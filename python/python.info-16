This is python.info, produced by makeinfo version 6.0 from python.texi.

     Python 3.6.0a0, May 06, 2016

     Georg Brandl

     Copyright © 2001-2016, Python Software Foundation

INFO-DIR-SECTION Documentation tools
START-INFO-DIR-ENTRY
* Python: (python.info). The Python Programming Language
END-INFO-DIR-ENTRY


   Generated by Sphinx 1.4.1.


File: python.info,  Node: Miscellaneous Functions,  Prev: Miscellaneous System Information,  Up: os --- Miscellaneous operating system interfaces

5.16.1.12 Miscellaneous Functions
.................................

 -- Function: os.urandom (n)

     Return a string of `n' random bytes suitable for cryptographic use.

     This function returns random bytes from an OS-specific randomness
     source.  The returned data should be unpredictable enough for
     cryptographic applications, though its exact quality depends on the
     OS implementation.  On a Unix-like system this will query
     ‘/dev/urandom’, and on Windows it will use ‘CryptGenRandom()’.  If
     a randomness source is not found, *note NotImplementedError: 569.
     will be raised.

     For an easy-to-use interface to the random number generator
     provided by your platform, please see *note random.SystemRandom:
     14a1.

     Changed in version 3.5: On Linux 3.17 and newer, the ‘getrandom()’
     syscall is now used when available.  On OpenBSD 5.6 and newer, the
     C ‘getentropy()’ function is now used.  These functions avoid the
     usage of an internal file descriptor.


File: python.info,  Node: io --- Core tools for working with streams,  Next: time --- Time access and conversions,  Prev: os --- Miscellaneous operating system interfaces,  Up: Generic Operating System Services

5.16.2 ‘io’ — Core tools for working with streams
-------------------------------------------------

* Menu:

* Overview:: 
* High-level Module Interface:: 
* Class hierarchy:: 
* Performance: Performance<3>. 


File: python.info,  Node: Overview,  Next: High-level Module Interface,  Up: io --- Core tools for working with streams

5.16.2.1 Overview
.................

The *note io: 9f. module provides Python’s main facilities for dealing
with various types of I/O. There are three main types of I/O: `text
I/O', `binary I/O' and `raw I/O'. These are generic categories, and
various backing stores can be used for each of them.  A concrete object
belonging to any of these categories is called a *note file object: 78b.
Other common terms are `stream' and `file-like object'.

Independently of its category, each concrete stream object will also
have various capabilities: it can be read-only, write-only, or
read-write.  It can also allow arbitrary random access (seeking forwards
or backwards to any location), or only sequential access (for example in
the case of a socket or pipe).

All streams are careful about the type of data you give to them.  For
example giving a *note str: 25a. object to the ‘write()’ method of a
binary stream will raise a ‘TypeError’.  So will giving a *note bytes:
1db. object to the ‘write()’ method of a text stream.

Changed in version 3.3: Operations that used to raise *note IOError:
5b0. now raise *note OSError: 4b6, since *note IOError: 5b0. is now an
alias of *note OSError: 4b6.

* Menu:

* Text I/O:: 
* Binary I/O:: 
* Raw I/O:: 


File: python.info,  Node: Text I/O,  Next: Binary I/O,  Up: Overview

5.16.2.2 Text I/O
.................

Text I/O expects and produces *note str: 25a. objects.  This means that
whenever the backing store is natively made of bytes (such as in the
case of a file), encoding and decoding of data is made transparently as
well as optional translation of platform-specific newline characters.

The easiest way to create a text stream is with *note open(): 1e8,
optionally specifying an encoding:

     f = open("myfile.txt", "r", encoding="utf-8")

In-memory text streams are also available as *note StringIO: 41e.
objects:

     f = io.StringIO("some initial text data")

The text stream API is described in detail in the documentation of *note
TextIOBase: 89f.


File: python.info,  Node: Binary I/O,  Next: Raw I/O,  Prev: Text I/O,  Up: Overview

5.16.2.3 Binary I/O
...................

Binary I/O (also called `buffered I/O') expects and produces *note
bytes: 1db. objects.  No encoding, decoding, or newline translation is
performed.  This category of streams can be used for all kinds of
non-text data, and also when manual control over the handling of text
data is desired.

The easiest way to create a binary stream is with *note open(): 1e8.
with ‘'b'’ in the mode string:

     f = open("myfile.jpg", "rb")

In-memory binary streams are also available as *note BytesIO: 371.
objects:

     f = io.BytesIO(b"some initial binary data: \x00\x01")

The binary stream API is described in detail in the docs of *note
BufferedIOBase: 5fe.

Other library modules may provide additional ways to create text or
binary streams.  See *note socket.socket.makefile(): 75b. for example.


File: python.info,  Node: Raw I/O,  Prev: Binary I/O,  Up: Overview

5.16.2.4 Raw I/O
................

Raw I/O (also called `unbuffered I/O') is generally used as a low-level
building-block for binary and text streams; it is rarely useful to
directly manipulate a raw stream from user code.  Nevertheless, you can
create a raw stream by opening a file in binary mode with buffering
disabled:

     f = open("myfile.jpg", "rb", buffering=0)

The raw stream API is described in detail in the docs of *note
RawIOBase: 640.


File: python.info,  Node: High-level Module Interface,  Next: Class hierarchy,  Prev: Overview,  Up: io --- Core tools for working with streams

5.16.2.5 High-level Module Interface
....................................

 -- Data: io.DEFAULT_BUFFER_SIZE

     An int containing the default buffer size used by the module’s
     buffered I/O classes.  *note open(): 1e8. uses the file’s blksize
     (as obtained by *note os.stat(): 1e2.) if possible.

 -- Function: io.open (file, mode='r', buffering=-1, encoding=None,
          errors=None, newline=None, closefd=True, opener=None)

     This is an alias for the builtin *note open(): 1e8. function.

 -- Exception: io.BlockingIOError

     This is a compatibility alias for the builtin *note
     BlockingIOError: 5b5. exception.

 -- Exception: io.UnsupportedOperation

     An exception inheriting *note OSError: 4b6. and *note ValueError:
     19c. that is raised when an unsupported operation is called on a
     stream.

* Menu:

* In-memory streams:: 


File: python.info,  Node: In-memory streams,  Up: High-level Module Interface

5.16.2.6 In-memory streams
..........................

It is also possible to use a *note str: 25a. or *note bytes: 1db.-like
object as a file for both reading and writing.  For strings *note
StringIO: 41e. can be used like a file opened in text mode.  *note
BytesIO: 371. can be used like a file opened in binary mode.  Both
provide full read-write capabilities with random access.

See also
........

*note sys: fb.

     contains the standard IO streams: *note sys.stdin: 1b9, *note
     sys.stdout: 1ba, and *note sys.stderr: 270.


File: python.info,  Node: Class hierarchy,  Next: Performance<3>,  Prev: High-level Module Interface,  Up: io --- Core tools for working with streams

5.16.2.7 Class hierarchy
........................

The implementation of I/O streams is organized as a hierarchy of
classes.  First *note abstract base classes: 776. (ABCs), which are used
to specify the various categories of streams, then concrete classes
providing the standard stream implementations.

          Note: The abstract base classes also provide default
          implementations of some methods in order to help
          implementation of concrete stream classes.  For example, *note
          BufferedIOBase: 5fe. provides unoptimized implementations of
          ‘readinto()’ and *note readline(): 10b8.

At the top of the I/O hierarchy is the abstract base class *note IOBase:
1946.  It defines the basic interface to a stream.  Note, however, that
there is no separation between reading and writing to streams;
implementations are allowed to raise *note UnsupportedOperation: 1943.
if they do not support a given operation.

The *note RawIOBase: 640. ABC extends *note IOBase: 1946.  It deals with
the reading and writing of bytes to a stream.  *note FileIO: 917.
subclasses *note RawIOBase: 640. to provide an interface to files in the
machine’s file system.

The *note BufferedIOBase: 5fe. ABC deals with buffering on a raw byte
stream (*note RawIOBase: 640.).  Its subclasses, *note BufferedWriter:
fb4, *note BufferedReader: 7df, and *note BufferedRWPair: 1947. buffer
streams that are readable, writable, and both readable and writable.
*note BufferedRandom: fb5. provides a buffered interface to random
access streams.  Another *note BufferedIOBase: 5fe. subclass, *note
BytesIO: 371, is a stream of in-memory bytes.

The *note TextIOBase: 89f. ABC, another subclass of *note IOBase: 1946,
deals with streams whose bytes represent text, and handles encoding and
decoding to and from strings.  *note TextIOWrapper: 557, which extends
it, is a buffered text interface to a buffered raw stream (*note
BufferedIOBase: 5fe.).  Finally, *note StringIO: 41e. is an in-memory
stream for text.

Argument names are not part of the specification, and only the arguments
of *note open(): 1e8. are intended to be used as keyword arguments.

The following table summarizes the ABCs provided by the *note io: 9f.
module:

ABC                           Inherits               Stub Methods                 Mixin Methods and Properties
                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------
                                                                                  
*note IOBase: 1946.                                  ‘fileno’, ‘seek’, and        ‘close’, ‘closed’, ‘__enter__’, ‘__exit__’, ‘flush’,
                                                     ‘truncate’                   ‘isatty’, ‘__iter__’, ‘__next__’, ‘readable’,
                                                                                  ‘readline’, ‘readlines’, ‘seekable’, ‘tell’,
                                                                                  ‘writable’, and ‘writelines’
                                                                                  
                                                                                  
*note RawIOBase: 640.         *note IOBase: 1946.    ‘readinto’ and ‘write’       Inherited *note IOBase: 1946. methods, ‘read’, and
                                                                                  ‘readall’
                                                                                  
                                                                                  
*note BufferedIOBase: 5fe.    *note IOBase: 1946.    ‘detach’, ‘read’, ‘read1’,   Inherited *note IOBase: 1946. methods, ‘readinto’
                                                     and ‘write’                  
                                                     
                                                                                  
*note TextIOBase: 89f.        *note IOBase: 1946.    ‘detach’, ‘read’,            Inherited *note IOBase: 1946. methods, ‘encoding’,
                                                     ‘readline’, and ‘write’      ‘errors’, and ‘newlines’
                                                                                  

* Menu:

* I/O Base Classes:: 
* Raw File I/O:: 
* Buffered Streams:: 
* Text I/O: Text I/O<2>. 


File: python.info,  Node: I/O Base Classes,  Next: Raw File I/O,  Up: Class hierarchy

5.16.2.8 I/O Base Classes
.........................

 -- Class: io.IOBase

     The abstract base class for all I/O classes, acting on streams of
     bytes.  There is no public constructor.

     This class provides empty abstract implementations for many methods
     that derived classes can override selectively; the default
     implementations represent a file that cannot be read, written or
     seeked.

     Even though *note IOBase: 1946. does not declare ‘read()’,
     ‘readinto()’, or ‘write()’ because their signatures will vary,
     implementations and clients should consider those methods part of
     the interface.  Also, implementations may raise a *note ValueError:
     19c. (or *note UnsupportedOperation: 1943.) when operations they do
     not support are called.

     The basic type used for binary data read from or written to a file
     is *note bytes: 1db.  *note bytearray: 1dc.s are accepted too, and
     in some cases (such as ‘readinto()’) required.  Text I/O classes
     work with *note str: 25a. data.

     Note that calling any method (even inquiries) on a closed stream is
     undefined.  Implementations may raise *note ValueError: 19c. in
     this case.

     *note IOBase: 1946. (and its subclasses) supports the iterator
     protocol, meaning that an *note IOBase: 1946. object can be
     iterated over yielding the lines in a stream.  Lines are defined
     slightly differently depending on whether the stream is a binary
     stream (yielding bytes), or a text stream (yielding character
     strings).  See *note readline(): 10b8. below.

     *note IOBase: 1946. is also a context manager and therefore
     supports the *note with: 29d. statement.  In this example, `file'
     is closed after the *note with: 29d. statement’s suite is
     finished—even if an exception occurs:

          with open('spam.txt', 'w') as file:
              file.write('Spam and eggs!')

     *note IOBase: 1946. provides these data attributes and methods:

      -- Method: close ()

          Flush and close this stream.  This method has no effect if the
          file is already closed.  Once the file is closed, any
          operation on the file (e.g.  reading or writing) will raise a
          *note ValueError: 19c.

          As a convenience, it is allowed to call this method more than
          once; only the first call, however, will have an effect.

      -- Attribute: closed

          ‘True’ if the stream is closed.

      -- Method: fileno ()

          Return the underlying file descriptor (an integer) of the
          stream if it exists.  An *note OSError: 4b6. is raised if the
          IO object does not use a file descriptor.

      -- Method: flush ()

          Flush the write buffers of the stream if applicable.  This
          does nothing for read-only and non-blocking streams.

      -- Method: isatty ()

          Return ‘True’ if the stream is interactive (i.e., connected to
          a terminal/tty device).

      -- Method: readable ()

          Return ‘True’ if the stream can be read from.  If ‘False’,
          ‘read()’ will raise *note OSError: 4b6.

      -- Method: readline (size=-1)

          Read and return one line from the stream.  If `size' is
          specified, at most `size' bytes will be read.

          The line terminator is always ‘b'\n'’ for binary files; for
          text files, the `newline' argument to *note open(): 1e8. can
          be used to select the line terminator(s) recognized.

      -- Method: readlines (hint=-1)

          Read and return a list of lines from the stream.  `hint' can
          be specified to control the number of lines read: no more
          lines will be read if the total size (in bytes/characters) of
          all lines so far exceeds `hint'.

          Note that it’s already possible to iterate on file objects
          using ‘for line in file: ...’ without calling
          ‘file.readlines()’.

      -- Method: seek (offset[, whence])

          Change the stream position to the given byte `offset'.
          `offset' is interpreted relative to the position indicated by
          `whence'.  The default value for `whence' is ‘SEEK_SET’.
          Values for `whence' are:

             * ‘SEEK_SET’ or ‘0’ – start of the stream (the default);
               `offset' should be zero or positive

             * ‘SEEK_CUR’ or ‘1’ – current stream position; `offset' may
               be negative

             * ‘SEEK_END’ or ‘2’ – end of the stream; `offset' is
               usually negative

          Return the new absolute position.

          New in version 3.1: The ‘SEEK_*’ constants.

          New in version 3.3: Some operating systems could support
          additional values, like ‘os.SEEK_HOLE’ or ‘os.SEEK_DATA’.  The
          valid values for a file could depend on it being open in text
          or binary mode.

      -- Method: seekable ()

          Return ‘True’ if the stream supports random access.  If
          ‘False’, *note seek(): 194c, *note tell(): 194e. and *note
          truncate(): 918. will raise *note OSError: 4b6.

      -- Method: tell ()

          Return the current stream position.

      -- Method: truncate (size=None)

          Resize the stream to the given `size' in bytes (or the current
          position if `size' is not specified).  The current stream
          position isn’t changed.  This resizing can extend or reduce
          the current file size.  In case of extension, the contents of
          the new file area depend on the platform (on most systems,
          additional bytes are zero-filled).  The new file size is
          returned.

     Changed in version 3.5: Windows will now zero-fill files when
     extending.

      -- Method: writable ()

          Return ‘True’ if the stream supports writing.  If ‘False’,
          ‘write()’ and *note truncate(): 918. will raise *note OSError:
          4b6.

      -- Method: writelines (lines)

          Write a list of lines to the stream.  Line separators are not
          added, so it is usual for each of the lines provided to have a
          line separator at the end.

      -- Method: __del__ ()

          Prepare for object destruction.  *note IOBase: 1946. provides
          a default implementation of this method that calls the
          instance’s *note close(): 187c. method.

 -- Class: io.RawIOBase

     Base class for raw binary I/O. It inherits *note IOBase: 1946.
     There is no public constructor.

     Raw binary I/O typically provides low-level access to an underlying
     OS device or API, and does not try to encapsulate it in high-level
     primitives (this is left to Buffered I/O and Text I/O, described
     later in this page).

     In addition to the attributes and methods from *note IOBase: 1946,
     *note RawIOBase: 640. provides the following methods:

      -- Method: read (size=-1)

          Read up to `size' bytes from the object and return them.  As a
          convenience, if `size' is unspecified or -1, *note readall():
          1951. is called.  Otherwise, only one system call is ever
          made.  Fewer than `size' bytes may be returned if the
          operating system call returns fewer than `size' bytes.

          If 0 bytes are returned, and `size' was not 0, this indicates
          end of file.  If the object is in non-blocking mode and no
          bytes are available, ‘None’ is returned.

      -- Method: readall ()

          Read and return all the bytes from the stream until EOF, using
          multiple calls to the stream if necessary.

      -- Method: readinto (b)

          Read up to ‘len(b)’ bytes into *note bytearray: 1dc. `b' and
          return the number of bytes read.  If the object is in
          non-blocking mode and no bytes are available, ‘None’ is
          returned.

      -- Method: write (b)

          Write the given *note bytes: 1db. or *note bytearray: 1dc.
          object, `b', to the underlying raw stream and return the
          number of bytes written.  This can be less than ‘len(b)’,
          depending on specifics of the underlying raw stream, and
          especially if it is in non-blocking mode.  ‘None’ is returned
          if the raw stream is set not to block and no single byte could
          be readily written to it.

 -- Class: io.BufferedIOBase

     Base class for binary streams that support some kind of buffering.
     It inherits *note IOBase: 1946.  There is no public constructor.

     The main difference with *note RawIOBase: 640. is that methods
     *note read(): 16f8, *note readinto(): 1953. and *note write():
     1954. will try (respectively) to read as much input as requested or
     to consume all given output, at the expense of making perhaps more
     than one system call.

     In addition, those methods can raise *note BlockingIOError: 5b5. if
     the underlying raw stream is in non-blocking mode and cannot take
     or give enough data; unlike their *note RawIOBase: 640.
     counterparts, they will never return ‘None’.

     Besides, the *note read(): 16f8. method does not have a default
     implementation that defers to *note readinto(): 1953.

     A typical *note BufferedIOBase: 5fe. implementation should not
     inherit from a *note RawIOBase: 640. implementation, but wrap one,
     like *note BufferedWriter: fb4. and *note BufferedReader: 7df. do.

     *note BufferedIOBase: 5fe. provides or overrides these methods and
     attribute in addition to those from *note IOBase: 1946.:

      -- Attribute: raw

          The underlying raw stream (a *note RawIOBase: 640. instance)
          that *note BufferedIOBase: 5fe. deals with.  This is not part
          of the *note BufferedIOBase: 5fe. API and may not exist on
          some implementations.

      -- Method: detach ()

          Separate the underlying raw stream from the buffer and return
          it.

          After the raw stream has been detached, the buffer is in an
          unusable state.

          Some buffers, like *note BytesIO: 371, do not have the concept
          of a single raw stream to return from this method.  They raise
          *note UnsupportedOperation: 1943.

          New in version 3.1.

      -- Method: read (size=-1)

          Read and return up to `size' bytes.  If the argument is
          omitted, ‘None’, or negative, data is read and returned until
          EOF is reached.  An empty *note bytes: 1db. object is returned
          if the stream is already at EOF.

          If the argument is positive, and the underlying raw stream is
          not interactive, multiple raw reads may be issued to satisfy
          the byte count (unless EOF is reached first).  But for
          interactive raw streams, at most one raw read will be issued,
          and a short result does not imply that EOF is imminent.

          A *note BlockingIOError: 5b5. is raised if the underlying raw
          stream is in non blocking-mode, and has no data available at
          the moment.

      -- Method: read1 (size=-1)

          Read and return up to `size' bytes, with at most one call to
          the underlying raw stream’s *note read(): 2b9. (or *note
          readinto(): 2ba.) method.  This can be useful if you are
          implementing your own buffering on top of a *note
          BufferedIOBase: 5fe. object.

      -- Method: readinto (b)

          Read up to ‘len(b)’ bytes into bytearray `b' and return the
          number of bytes read.

          Like *note read(): 16f8, multiple reads may be issued to the
          underlying raw stream, unless the latter is interactive.

          A *note BlockingIOError: 5b5. is raised if the underlying raw
          stream is in non blocking-mode, and has no data available at
          the moment.

      -- Method: readinto1 (b)

          Read up to ‘len(b)’ bytes into bytearray `b', using at most
          one call to the underlying raw stream’s *note read(): 2b9. (or
          *note readinto(): 2ba.) method.  Return the number of bytes
          read.

          A *note BlockingIOError: 5b5. is raised if the underlying raw
          stream is in non blocking-mode, and has no data available at
          the moment.

          New in version 3.5.

      -- Method: write (b)

          Write the given *note bytes: 1db. or *note bytearray: 1dc.
          object, `b' and return the number of bytes written (never less
          than ‘len(b)’, since if the write fails an *note OSError: 4b6.
          will be raised).  Depending on the actual implementation,
          these bytes may be readily written to the underlying stream,
          or held in a buffer for performance and latency reasons.

          When in non-blocking mode, a *note BlockingIOError: 5b5. is
          raised if the data needed to be written to the raw stream but
          it couldn’t accept all the data without blocking.


File: python.info,  Node: Raw File I/O,  Next: Buffered Streams,  Prev: I/O Base Classes,  Up: Class hierarchy

5.16.2.9 Raw File I/O
.....................

 -- Class: io.FileIO (name, mode='r', closefd=True, opener=None)

     *note FileIO: 917. represents an OS-level file containing bytes
     data.  It implements the *note RawIOBase: 640. interface (and
     therefore the *note IOBase: 1946. interface, too).

     The `name' can be one of two things:

        * a character string or *note bytes: 1db. object representing
          the path to the file which will be opened.  In this case
          closefd must be True (the default) otherwise an error will be
          raised.

        * an integer representing the number of an existing OS-level
          file descriptor to which the resulting *note FileIO: 917.
          object will give access.  When the FileIO object is closed
          this fd will be closed as well, unless `closefd' is set to
          ‘False’.

     The `mode' can be ‘'r'’, ‘'w'’, ‘'x'’ or ‘'a'’ for reading
     (default), writing, exclusive creation or appending.  The file will
     be created if it doesn’t exist when opened for writing or
     appending; it will be truncated when opened for writing.  *note
     FileExistsError: 56f. will be raised if it already exists when
     opened for creating.  Opening a file for creating implies writing,
     so this mode behaves in a similar way to ‘'w'’.  Add a ‘'+'’ to the
     mode to allow simultaneous reading and writing.

     The ‘read()’ (when called with a positive argument), ‘readinto()’
     and ‘write()’ methods on this class will only make one system call.

     A custom opener can be used by passing a callable as `opener'.  The
     underlying file descriptor for the file object is then obtained by
     calling `opener' with (`name', `flags').  `opener' must return an
     open file descriptor (passing *note os.open: 1f4. as `opener'
     results in functionality similar to passing ‘None’).

     The newly created file is *note non-inheritable: 3ea.

     See the *note open(): 1e8. built-in function for examples on using
     the `opener' parameter.

     Changed in version 3.3: The `opener' parameter was added.  The
     ‘'x'’ mode was added.

     Changed in version 3.4: The file is now non-inheritable.

     In addition to the attributes and methods from *note IOBase: 1946.
     and *note RawIOBase: 640, *note FileIO: 917. provides the following
     data attributes:

      -- Attribute: mode

          The mode as given in the constructor.

      -- Attribute: name

          The file name.  This is the file descriptor of the file when
          no name is given in the constructor.


File: python.info,  Node: Buffered Streams,  Next: Text I/O<2>,  Prev: Raw File I/O,  Up: Class hierarchy

5.16.2.10 Buffered Streams
..........................

Buffered I/O streams provide a higher-level interface to an I/O device
than raw I/O does.

 -- Class: io.BytesIO ([initial_bytes])

     A stream implementation using an in-memory bytes buffer.  It
     inherits *note BufferedIOBase: 5fe.  The buffer is discarded when
     the *note close(): 187c. method is called.

     The argument `initial_bytes' contains optional initial *note bytes:
     1db. data.

     *note BytesIO: 371. provides or overrides these methods in addition
     to those from *note BufferedIOBase: 5fe. and *note IOBase: 1946.:

      -- Method: getbuffer ()

          Return a readable and writable view over the contents of the
          buffer without copying them.  Also, mutating the view will
          transparently update the contents of the buffer:

               >>> b = io.BytesIO(b"abcdef")
               >>> view = b.getbuffer()
               >>> view[2:4] = b"56"
               >>> b.getvalue()
               b'ab56ef'

               Note: As long as the view exists, the *note BytesIO: 371.
               object cannot be resized or closed.

          New in version 3.2.

      -- Method: getvalue ()

          Return *note bytes: 1db. containing the entire contents of the
          buffer.

      -- Method: read1 ()

          In *note BytesIO: 371, this is the same as ‘read()’.

      -- Method: readinto1 ()

          In *note BytesIO: 371, this is the same as ‘readinto()’.

          New in version 3.5.

 -- Class: io.BufferedReader (raw, buffer_size=DEFAULT_BUFFER_SIZE)

     A buffer providing higher-level access to a readable, sequential
     *note RawIOBase: 640. object.  It inherits *note BufferedIOBase:
     5fe.  When reading data from this object, a larger amount of data
     may be requested from the underlying raw stream, and kept in an
     internal buffer.  The buffered data can then be returned directly
     on subsequent reads.

     The constructor creates a *note BufferedReader: 7df. for the given
     readable `raw' stream and `buffer_size'.  If `buffer_size' is
     omitted, *note DEFAULT_BUFFER_SIZE: fae. is used.

     *note BufferedReader: 7df. provides or overrides these methods in
     addition to those from *note BufferedIOBase: 5fe. and *note IOBase:
     1946.:

      -- Method: peek ([size])

          Return bytes from the stream without advancing the position.
          At most one single read on the raw stream is done to satisfy
          the call.  The number of bytes returned may be less or more
          than requested.

      -- Method: read ([size])

          Read and return `size' bytes, or if `size' is not given or
          negative, until EOF or if the read call would block in
          non-blocking mode.

      -- Method: read1 (size)

          Read and return up to `size' bytes with only one call on the
          raw stream.  If at least one byte is buffered, only buffered
          bytes are returned.  Otherwise, one raw stream read call is
          made.

 -- Class: io.BufferedWriter (raw, buffer_size=DEFAULT_BUFFER_SIZE)

     A buffer providing higher-level access to a writeable, sequential
     *note RawIOBase: 640. object.  It inherits *note BufferedIOBase:
     5fe.  When writing to this object, data is normally placed into an
     internal buffer.  The buffer will be written out to the underlying
     *note RawIOBase: 640. object under various conditions, including:

        * when the buffer gets too small for all pending data;

        * when *note flush(): 195f. is called;

        * when a ‘seek()’ is requested (for *note BufferedRandom: fb5.
          objects);

        * when the *note BufferedWriter: fb4. object is closed or
          destroyed.

     The constructor creates a *note BufferedWriter: fb4. for the given
     writeable `raw' stream.  If the `buffer_size' is not given, it
     defaults to *note DEFAULT_BUFFER_SIZE: fae.

     *note BufferedWriter: fb4. provides or overrides these methods in
     addition to those from *note BufferedIOBase: 5fe. and *note IOBase:
     1946.:

      -- Method: flush ()

          Force bytes held in the buffer into the raw stream.  A *note
          BlockingIOError: 5b5. should be raised if the raw stream
          blocks.

      -- Method: write (b)

          Write the *note bytes: 1db. or *note bytearray: 1dc. object,
          `b' and return the number of bytes written.  When in
          non-blocking mode, a *note BlockingIOError: 5b5. is raised if
          the buffer needs to be written out but the raw stream blocks.

 -- Class: io.BufferedRandom (raw, buffer_size=DEFAULT_BUFFER_SIZE)

     A buffered interface to random access streams.  It inherits *note
     BufferedReader: 7df. and *note BufferedWriter: fb4, and further
     supports ‘seek()’ and ‘tell()’ functionality.

     The constructor creates a reader and writer for a seekable raw
     stream, given in the first argument.  If the `buffer_size' is
     omitted it defaults to *note DEFAULT_BUFFER_SIZE: fae.

     *note BufferedRandom: fb5. is capable of anything *note
     BufferedReader: 7df. or *note BufferedWriter: fb4. can do.

 -- Class: io.BufferedRWPair (reader, writer,
          buffer_size=DEFAULT_BUFFER_SIZE)

     A buffered I/O object combining two unidirectional *note RawIOBase:
     640. objects – one readable, the other writeable – into a single
     bidirectional endpoint.  It inherits *note BufferedIOBase: 5fe.

     `reader' and `writer' are *note RawIOBase: 640. objects that are
     readable and writeable respectively.  If the `buffer_size' is
     omitted it defaults to *note DEFAULT_BUFFER_SIZE: fae.

     *note BufferedRWPair: 1947. implements all of *note BufferedIOBase:
     5fe.’s methods except for *note detach(): 1956, which raises *note
     UnsupportedOperation: 1943.

          Warning: *note BufferedRWPair: 1947. does not attempt to
          synchronize accesses to its underlying raw streams.  You
          should not pass it the same object as reader and writer; use
          *note BufferedRandom: fb5. instead.


File: python.info,  Node: Text I/O<2>,  Prev: Buffered Streams,  Up: Class hierarchy

5.16.2.11 Text I/O
..................

 -- Class: io.TextIOBase

     Base class for text streams.  This class provides a character and
     line based interface to stream I/O. There is no ‘readinto()’ method
     because Python’s character strings are immutable.  It inherits
     *note IOBase: 1946.  There is no public constructor.

     *note TextIOBase: 89f. provides or overrides these data attributes
     and methods in addition to those from *note IOBase: 1946.:

      -- Attribute: encoding

          The name of the encoding used to decode the stream’s bytes
          into strings, and to encode strings into bytes.

      -- Attribute: errors

          The error setting of the decoder or encoder.

      -- Attribute: newlines

          A string, a tuple of strings, or ‘None’, indicating the
          newlines translated so far.  Depending on the implementation
          and the initial constructor flags, this may not be available.

      -- Attribute: buffer

          The underlying binary buffer (a *note BufferedIOBase: 5fe.
          instance) that *note TextIOBase: 89f. deals with.  This is not
          part of the *note TextIOBase: 89f. API and may not exist in
          some implementations.

      -- Method: detach ()

          Separate the underlying binary buffer from the *note
          TextIOBase: 89f. and return it.

          After the underlying buffer has been detached, the *note
          TextIOBase: 89f. is in an unusable state.

          Some *note TextIOBase: 89f. implementations, like *note
          StringIO: 41e, may not have the concept of an underlying
          buffer and calling this method will raise *note
          UnsupportedOperation: 1943.

          New in version 3.1.

      -- Method: read (size)

          Read and return at most `size' characters from the stream as a
          single *note str: 25a.  If `size' is negative or ‘None’, reads
          until EOF.

      -- Method: readline (size=-1)

          Read until newline or EOF and return a single ‘str’.  If the
          stream is already at EOF, an empty string is returned.

          If `size' is specified, at most `size' characters will be
          read.

      -- Method: seek (offset[, whence])

          Change the stream position to the given `offset'.  Behaviour
          depends on the `whence' parameter.  The default value for
          `whence' is ‘SEEK_SET’.

             * ‘SEEK_SET’ or ‘0’: seek from the start of the stream (the
               default); `offset' must either be a number returned by
               *note TextIOBase.tell(): 1968, or zero.  Any other
               `offset' value produces undefined behaviour.

             * ‘SEEK_CUR’ or ‘1’: "seek" to the current position;
               `offset' must be zero, which is a no-operation (all other
               values are unsupported).

             * ‘SEEK_END’ or ‘2’: seek to the end of the stream;
               `offset' must be zero (all other values are unsupported).

          Return the new absolute position as an opaque number.

          New in version 3.1: The ‘SEEK_*’ constants.

      -- Method: tell ()

          Return the current stream position as an opaque number.  The
          number does not usually represent a number of bytes in the
          underlying binary storage.

      -- Method: write (s)

          Write the string `s' to the stream and return the number of
          characters written.

 -- Class: io.TextIOWrapper (buffer, encoding=None, errors=None,
          newline=None, line_buffering=False, write_through=False)

     A buffered text stream over a *note BufferedIOBase: 5fe. binary
     stream.  It inherits *note TextIOBase: 89f.

     `encoding' gives the name of the encoding that the stream will be
     decoded or encoded with.  It defaults to *note
     locale.getpreferredencoding(False): fb0.

     `errors' is an optional string that specifies how encoding and
     decoding errors are to be handled.  Pass ‘'strict'’ to raise a
     *note ValueError: 19c. exception if there is an encoding error (the
     default of ‘None’ has the same effect), or pass ‘'ignore'’ to
     ignore errors.  (Note that ignoring encoding errors can lead to
     data loss.)  ‘'replace'’ causes a replacement marker (such as
     ‘'?'’) to be inserted where there is malformed data.
     ‘'backslashreplace'’ causes malformed data to be replaced by a
     backslashed escape sequence.  When writing, ‘'xmlcharrefreplace'’
     (replace with the appropriate XML character reference) or
     ‘'namereplace'’ (replace with ‘\N{...}’ escape sequences) can be
     used.  Any other error handling name that has been registered with
     *note codecs.register_error(): a74. is also valid.

     `newline' controls how line endings are handled.  It can be ‘None’,
     ‘''’, ‘'\n'’, ‘'\r'’, and ‘'\r\n'’.  It works as follows:

        * When reading input from the stream, if `newline' is ‘None’,
          *note universal newlines: 994. mode is enabled.  Lines in the
          input can end in ‘'\n'’, ‘'\r'’, or ‘'\r\n'’, and these are
          translated into ‘'\n'’ before being returned to the caller.
          If it is ‘''’, universal newlines mode is enabled, but line
          endings are returned to the caller untranslated.  If it has
          any of the other legal values, input lines are only terminated
          by the given string, and the line ending is returned to the
          caller untranslated.

        * When writing output to the stream, if `newline' is ‘None’, any
          ‘'\n'’ characters written are translated to the system default
          line separator, *note os.linesep: fb3.  If `newline' is ‘''’
          or ‘'\n'’, no translation takes place.  If `newline' is any of
          the other legal values, any ‘'\n'’ characters written are
          translated to the given string.

     If `line_buffering' is ‘True’, ‘flush()’ is implied when a call to
     write contains a newline character.

     If `write_through' is ‘True’, calls to ‘write()’ are guaranteed not
     to be buffered: any data written on the *note TextIOWrapper: 557.
     object is immediately handled to its underlying binary `buffer'.

     Changed in version 3.3: The `write_through' argument has been
     added.

     Changed in version 3.3: The default `encoding' is now
     ‘locale.getpreferredencoding(False)’ instead of
     ‘locale.getpreferredencoding()’.  Don’t change temporary the locale
     encoding using *note locale.setlocale(): 196a, use the current
     locale encoding instead of the user preferred encoding.

     *note TextIOWrapper: 557. provides one attribute in addition to
     those of *note TextIOBase: 89f. and its parents:

      -- Attribute: line_buffering

          Whether line buffering is enabled.

 -- Class: io.StringIO (initial_value='', newline='\n')

     An in-memory stream for text I/O. The text buffer is discarded when
     the *note close(): 187c. method is called.

     The initial value of the buffer can be set by providing
     `initial_value'.  If newline translation is enabled, newlines will
     be encoded as if by *note write(): 1969.  The stream is positioned
     at the start of the buffer.

     The `newline' argument works like that of *note TextIOWrapper: 557.
     The default is to consider only ‘\n’ characters as ends of lines
     and to do no newline translation.  If `newline' is set to ‘None’,
     newlines are written as ‘\n’ on all platforms, but universal
     newline decoding is still performed when reading.

     *note StringIO: 41e. provides this method in addition to those from
     *note TextIOBase: 89f. and its parents:

      -- Method: getvalue ()

          Return a ‘str’ containing the entire contents of the buffer.
          Newlines are decoded as if by *note read(): 1966, although the
          stream position is not changed.

     Example usage:

          import io

          output = io.StringIO()
          output.write('First line.\n')
          print('Second line.', file=output)

          # Retrieve file contents -- this will be
          # 'First line.\nSecond line.\n'
          contents = output.getvalue()

          # Close object and discard memory buffer --
          # .getvalue() will now raise an exception.
          output.close()

 -- Class: io.IncrementalNewlineDecoder

     A helper codec that decodes newlines for *note universal newlines:
     994. mode.  It inherits *note codecs.IncrementalDecoder: 11dc.


File: python.info,  Node: Performance<3>,  Prev: Class hierarchy,  Up: io --- Core tools for working with streams

5.16.2.12 Performance
.....................

This section discusses the performance of the provided concrete I/O
implementations.

* Menu:

* Binary I/O: Binary I/O<2>. 
* Text I/O: Text I/O<3>. 
* Multi-threading: Multi-threading<3>. 
* Reentrancy:: 


File: python.info,  Node: Binary I/O<2>,  Next: Text I/O<3>,  Up: Performance<3>

5.16.2.13 Binary I/O
....................

By reading and writing only large chunks of data even when the user asks
for a single byte, buffered I/O hides any inefficiency in calling and
executing the operating system’s unbuffered I/O routines.  The gain
depends on the OS and the kind of I/O which is performed.  For example,
on some modern OSes such as Linux, unbuffered disk I/O can be as fast as
buffered I/O. The bottom line, however, is that buffered I/O offers
predictable performance regardless of the platform and the backing
device.  Therefore, it is almost always preferable to use buffered I/O
rather than unbuffered I/O for binary data.


File: python.info,  Node: Text I/O<3>,  Next: Multi-threading<3>,  Prev: Binary I/O<2>,  Up: Performance<3>

5.16.2.14 Text I/O
..................

Text I/O over a binary storage (such as a file) is significantly slower
than binary I/O over the same storage, because it requires conversions
between unicode and binary data using a character codec.  This can
become noticeable handling huge amounts of text data like large log
files.  Also, ‘TextIOWrapper.tell()’ and ‘TextIOWrapper.seek()’ are both
quite slow due to the reconstruction algorithm used.

*note StringIO: 41e, however, is a native in-memory unicode container
and will exhibit similar speed to *note BytesIO: 371.


File: python.info,  Node: Multi-threading<3>,  Next: Reentrancy,  Prev: Text I/O<3>,  Up: Performance<3>

5.16.2.15 Multi-threading
.........................

*note FileIO: 917. objects are thread-safe to the extent that the
operating system calls (such as ‘read(2)’ under Unix) they wrap are
thread-safe too.

Binary buffered objects (instances of *note BufferedReader: 7df, *note
BufferedWriter: fb4, *note BufferedRandom: fb5. and *note
BufferedRWPair: 1947.) protect their internal structures using a lock;
it is therefore safe to call them from multiple threads at once.

*note TextIOWrapper: 557. objects are not thread-safe.


File: python.info,  Node: Reentrancy,  Prev: Multi-threading<3>,  Up: Performance<3>

5.16.2.16 Reentrancy
....................

Binary buffered objects (instances of *note BufferedReader: 7df, *note
BufferedWriter: fb4, *note BufferedRandom: fb5. and *note
BufferedRWPair: 1947.) are not reentrant.  While reentrant calls will
not happen in normal situations, they can arise from doing I/O in a
*note signal: e8. handler.  If a thread tries to re-enter a buffered
object which it is already accessing, a *note RuntimeError: 193. is
raised.  Note this doesn’t prohibit a different thread from entering the
buffered object.

The above implicitly extends to text files, since the *note open(): 1e8.
function will wrap a buffered object inside a *note TextIOWrapper: 557.
This includes standard streams and therefore affects the built-in
function *note print(): 481. as well.


File: python.info,  Node: time --- Time access and conversions,  Next: argparse --- Parser for command-line options arguments and sub-commands,  Prev: io --- Core tools for working with streams,  Up: Generic Operating System Services

5.16.3 ‘time’ — Time access and conversions
-------------------------------------------

This module provides various time-related functions.  For related
functionality, see also the *note datetime: 2f. and *note calendar: 15.
modules.

Although this module is always available, not all functions are
available on all platforms.  Most of the functions defined in this
module call platform C library functions with the same name.  It may
sometimes be helpful to consult the platform documentation, because the
semantics of these functions varies among platforms.

An explanation of some terminology and conventions is in order.

   * The `epoch' is the point where the time starts.  On January 1st of
     that year, at 0 hours, the "time since the epoch" is zero.  For
     Unix, the epoch is 1970.  To find out what the epoch is, look at
     ‘gmtime(0)’.

   * The functions in this module may not handle dates and times before
     the epoch or far in the future.  The cut-off point in the future is
     determined by the C library; for 32-bit systems, it is typically in
     2038.

   * `Year 2000 (Y2K) issues': Python depends on the platform’s C
     library, which generally doesn’t have year 2000 issues, since all
     dates and times are represented internally as seconds since the
     epoch.  Function *note strptime(): a0b. can parse 2-digit years
     when given ‘%y’ format code.  When 2-digit years are parsed, they
     are converted according to the POSIX and ISO C standards: values
     69–99 are mapped to 1969–1999, and values 0–68 are mapped to
     2000–2068.

   * UTC is Coordinated Universal Time (formerly known as Greenwich Mean
     Time, or GMT). The acronym UTC is not a mistake but a compromise
     between English and French.

   * DST is Daylight Saving Time, an adjustment of the timezone by
     (usually) one hour during part of the year.  DST rules are magic
     (determined by local law) and can change from year to year.  The C
     library has a table containing the local rules (often it is read
     from a system file for flexibility) and is the only source of True
     Wisdom in this respect.

   * The precision of the various real-time functions may be less than
     suggested by the units in which their value or argument is
     expressed.  E.g.  on most Unix systems, the clock "ticks" only 50
     or 100 times a second.

   * On the other hand, the precision of *note time(): 6a5. and *note
     sleep(): 216. is better than their Unix equivalents: times are
     expressed as floating point numbers, *note time(): 6a5. returns the
     most accurate time available (using Unix ‘gettimeofday()’ where
     available), and *note sleep(): 216. will accept a time with a
     nonzero fraction (Unix ‘select()’ is used to implement this, where
     available).

   * The time value as returned by *note gmtime(): 786, *note
     localtime(): 125d, and *note strptime(): a0b, and accepted by *note
     asctime(): 7af, *note mktime(): 7b0. and *note strftime(): 7b1, is
     a sequence of 9 integers.  The return values of *note gmtime():
     786, *note localtime(): 125d, and *note strptime(): a0b. also offer
     attribute names for individual fields.

     See *note struct_time: 125c. for a description of these objects.

     Changed in version 3.3: The *note struct_time: 125c. type was
     extended to provide the ‘tm_gmtoff’ and ‘tm_zone’ attributes when
     platform supports corresponding ‘struct tm’ members.

   * Use the following functions to convert between time
     representations:

     From                          To                            Use
                                                                 
     ------------------------------------------------------------------------------------------
                                                                 
     seconds since the epoch       *note struct_time: 125c. in   *note gmtime(): 786.
                                   UTC                           
                                   
                                                                 
     seconds since the epoch       *note struct_time: 125c. in   *note localtime(): 125d.
                                   local time                    
                                   
                                                                 
     *note struct_time: 125c. in   seconds since the epoch       *note calendar.timegm(): 12c6.
     UTC                                                         

     *note struct_time: 125c. in   seconds since the epoch       *note mktime(): 7b0.
     local time                                                  

The module defines the following functions and data items:

 -- Data: time.altzone

     The offset of the local DST timezone, in seconds west of UTC, if
     one is defined.  This is negative if the local DST timezone is east
     of UTC (as in Western Europe, including the UK). Only use this if
     ‘daylight’ is nonzero.

 -- Function: time.asctime ([t])

     Convert a tuple or *note struct_time: 125c. representing a time as
     returned by *note gmtime(): 786. or *note localtime(): 125d. to a
     string of the following form: ‘'Sun Jun 20 23:21:05 1993'’.  If `t'
     is not provided, the current time as returned by *note localtime():
     125d. is used.  Locale information is not used by *note asctime():
     7af.

          Note: Unlike the C function of the same name, *note asctime():
          7af. does not add a trailing newline.

 -- Function: time.clock ()

     On Unix, return the current processor time as a floating point
     number expressed in seconds.  The precision, and in fact the very
     definition of the meaning of "processor time", depends on that of
     the C function of the same name.

     On Windows, this function returns wall-clock seconds elapsed since
     the first call to this function, as a floating point number, based
     on the Win32 function ‘QueryPerformanceCounter()’.  The resolution
     is typically better than one microsecond.

     Deprecated since version 3.3: The behaviour of this function
     depends on the platform: use *note perf_counter(): 6ec. or *note
     process_time(): 6ed. instead, depending on your requirements, to
     have a well defined behaviour.

 -- Function: time.clock_getres (clk_id)

     Return the resolution (precision) of the specified clock `clk_id'.

     Availability: Unix.

     New in version 3.3.

 -- Function: time.clock_gettime (clk_id)

     Return the time of the specified clock `clk_id'.

     Availability: Unix.

     New in version 3.3.

 -- Function: time.clock_settime (clk_id, time)

     Set the time of the specified clock `clk_id'.

     Availability: Unix.

     New in version 3.3.

 -- Data: time.CLOCK_HIGHRES

     The Solaris OS has a CLOCK_HIGHRES timer that attempts to use an
     optimal hardware source, and may give close to nanosecond
     resolution.  CLOCK_HIGHRES is the nonadjustable, high-resolution
     clock.

     Availability: Solaris.

     New in version 3.3.

 -- Data: time.CLOCK_MONOTONIC

     Clock that cannot be set and represents monotonic time since some
     unspecified starting point.

     Availability: Unix.

     New in version 3.3.

 -- Data: time.CLOCK_MONOTONIC_RAW

     Similar to *note CLOCK_MONOTONIC: 1978, but provides access to a
     raw hardware-based time that is not subject to NTP adjustments.

     Availability: Linux 2.6.28 or later.

     New in version 3.3.

 -- Data: time.CLOCK_PROCESS_CPUTIME_ID

     High-resolution per-process timer from the CPU.

     Availability: Unix.

     New in version 3.3.

 -- Data: time.CLOCK_REALTIME

     System-wide real-time clock.  Setting this clock requires
     appropriate privileges.

     Availability: Unix.

     New in version 3.3.

 -- Data: time.CLOCK_THREAD_CPUTIME_ID

     Thread-specific CPU-time clock.

     Availability: Unix.

     New in version 3.3.

 -- Function: time.ctime ([secs])

     Convert a time expressed in seconds since the epoch to a string
     representing local time.  If `secs' is not provided or *note None:
     19d, the current time as returned by *note time(): 6a5. is used.
     ‘ctime(secs)’ is equivalent to ‘asctime(localtime(secs))’.  Locale
     information is not used by *note ctime(): 1265.

 -- Data: time.daylight

     Nonzero if a DST timezone is defined.

 -- Function: time.get_clock_info (name)

     Get information on the specified clock as a namespace object.
     Supported clock names and the corresponding functions to read their
     value are:

        * ‘'clock'’: *note time.clock(): 72a.

        * ‘'monotonic'’: *note time.monotonic(): 340.

        * ‘'perf_counter'’: *note time.perf_counter(): 6ec.

        * ‘'process_time'’: *note time.process_time(): 6ed.

        * ‘'time'’: *note time.time(): 6a5.

     The result has the following attributes:

        - `adjustable': ‘True’ if the clock can be changed automatically
          (e.g.  by a NTP daemon) or manually by the system
          administrator, ‘False’ otherwise

        - `implementation': The name of the underlying C function used
          to get the clock value

        - `monotonic': ‘True’ if the clock cannot go backward, ‘False’
          otherwise

        - `resolution': The resolution of the clock in seconds (*note
          float: 57a.)

     New in version 3.3.

 -- Function: time.gmtime ([secs])

     Convert a time expressed in seconds since the epoch to a *note
     struct_time: 125c. in UTC in which the dst flag is always zero.  If
     `secs' is not provided or *note None: 19d, the current time as
     returned by *note time(): 6a5. is used.  Fractions of a second are
     ignored.  See above for a description of the *note struct_time:
     125c. object.  See *note calendar.timegm(): 12c6. for the inverse
     of this function.

 -- Function: time.localtime ([secs])

     Like *note gmtime(): 786. but converts to local time.  If `secs' is
     not provided or *note None: 19d, the current time as returned by
     *note time(): 6a5. is used.  The dst flag is set to ‘1’ when DST
     applies to the given time.

 -- Function: time.mktime (t)

     This is the inverse function of *note localtime(): 125d.  Its
     argument is the *note struct_time: 125c. or full 9-tuple (since the
     dst flag is needed; use ‘-1’ as the dst flag if it is unknown)
     which expresses the time in `local' time, not UTC. It returns a
     floating point number, for compatibility with *note time(): 6a5.
     If the input value cannot be represented as a valid time, either
     *note OverflowError: 578. or *note ValueError: 19c. will be raised
     (which depends on whether the invalid value is caught by Python or
     the underlying C libraries).  The earliest date for which it can
     generate a time is platform-dependent.

 -- Function: time.monotonic ()

     Return the value (in fractional seconds) of a monotonic clock, i.e.
     a clock that cannot go backwards.  The clock is not affected by
     system clock updates.  The reference point of the returned value is
     undefined, so that only the difference between the results of
     consecutive calls is valid.

     On Windows versions older than Vista, *note monotonic(): 340.
     detects ‘GetTickCount()’ integer overflow (32 bits, roll-over after
     49.7 days).  It increases an internal epoch (reference time) by
     2^32 each time that an overflow is detected.  The epoch is stored
     in the process-local state and so the value of *note monotonic():
     340. may be different in two Python processes running for more than
     49 days.  On more recent versions of Windows and on other operating
     systems, *note monotonic(): 340. is system-wide.

     New in version 3.3.

     Changed in version 3.5: The function is now always available.

 -- Function: time.perf_counter ()

     Return the value (in fractional seconds) of a performance counter,
     i.e.  a clock with the highest available resolution to measure a
     short duration.  It does include time elapsed during sleep and is
     system-wide.  The reference point of the returned value is
     undefined, so that only the difference between the results of
     consecutive calls is valid.

     New in version 3.3.

 -- Function: time.process_time ()

     Return the value (in fractional seconds) of the sum of the system
     and user CPU time of the current process.  It does not include time
     elapsed during sleep.  It is process-wide by definition.  The
     reference point of the returned value is undefined, so that only
     the difference between the results of consecutive calls is valid.

     New in version 3.3.

 -- Function: time.sleep (secs)

     Suspend execution of the calling thread for the given number of
     seconds.  The argument may be a floating point number to indicate a
     more precise sleep time.  The actual suspension time may be less
     than that requested because any caught signal will terminate the
     *note sleep(): 216. following execution of that signal’s catching
     routine.  Also, the suspension time may be longer than requested by
     an arbitrary amount because of the scheduling of other activity in
     the system.

     Changed in version 3.5: The function now sleeps at least `secs'
     even if the sleep is interrupted by a signal, except if the signal
     handler raises an exception (see PEP 475(1) for the rationale).

 -- Function: time.strftime (format[, t])

     Convert a tuple or *note struct_time: 125c. representing a time as
     returned by *note gmtime(): 786. or *note localtime(): 125d. to a
     string as specified by the `format' argument.  If `t' is not
     provided, the current time as returned by *note localtime(): 125d.
     is used.  `format' must be a string.  *note ValueError: 19c. is
     raised if any field in `t' is outside of the allowed range.

     0 is a legal argument for any position in the time tuple; if it is
     normally illegal the value is forced to a correct one.

     The following directives can be embedded in the `format' string.
     They are shown without the optional field width and precision
     specification, and are replaced by the indicated characters in the
     *note strftime(): 7b1. result:

     Directive       Meaning                                              Notes
                                                                          
     ---------------------------------------------------------------------------------
                                                                          
     ‘%a’            Locale’s abbreviated weekday name.
                     
                                                                          
     ‘%A’            Locale’s full weekday name.
                     
                                                                          
     ‘%b’            Locale’s abbreviated month name.
                     
                                                                          
     ‘%B’            Locale’s full month name.
                     
                                                                          
     ‘%c’            Locale’s appropriate date and time representation.
                     
                                                                          
     ‘%d’            Day of the month as a decimal number [01,31].
                     
                                                                          
     ‘%H’            Hour (24-hour clock) as a decimal number [00,23].
                     
                                                                          
     ‘%I’            Hour (12-hour clock) as a decimal number [01,12].
                     
                                                                          
     ‘%j’            Day of the year as a decimal number [001,366].
                     
                                                                          
     ‘%m’            Month as a decimal number [01,12].
                     
                                                                          
     ‘%M’            Minute as a decimal number [00,59].
                     
                                                                          
     ‘%p’            Locale’s equivalent of either AM or PM.              (1)
                                                                          
                                                                          
     ‘%S’            Second as a decimal number [00,61].                  (2)
                                                                          
                                                                          
     ‘%U’            Week number of the year (Sunday as the first day     (3)
                     of the week) as a decimal number [00,53].  All       
                     days in a new year preceding the first Sunday are
                     considered to be in week 0.
                     
                                                                          
     ‘%w’            Weekday as a decimal number [0(Sunday),6].
                     
                                                                          
     ‘%W’            Week number of the year (Monday as the first day     (3)
                     of the week) as a decimal number [00,53].  All       
                     days in a new year preceding the first Monday are
                     considered to be in week 0.
                     
                                                                          
     ‘%x’            Locale’s appropriate date representation.
                     
                                                                          
     ‘%X’            Locale’s appropriate time representation.
                     
                                                                          
     ‘%y’            Year without century as a decimal number [00,99].
                     
                                                                          
     ‘%Y’            Year with century as a decimal number.
                     
                                                                          
     ‘%z’            Time zone offset indicating a positive or negative
                     time difference from UTC/GMT of the form +HHMM or
                     -HHMM, where H represents decimal hour digits and
                     M represents decimal minute digits [-23:59,
                     +23:59].
                     
                                                                          
     ‘%Z’            Time zone name (no characters if no time zone
                     exists).
                     
                                                                          
     ‘%%’            A literal ‘'%'’ character.
                     

     Notes:

       1. When used with the *note strptime(): a0b. function, the ‘%p’
          directive only affects the output hour field if the ‘%I’
          directive is used to parse the hour.

       2. The range really is ‘0’ to ‘61’; value ‘60’ is valid in
          timestamps representing leap seconds and value ‘61’ is
          supported for historical reasons.

       3. When used with the *note strptime(): a0b. function, ‘%U’ and
          ‘%W’ are only used in calculations when the day of the week
          and the year are specified.

     Here is an example, a format for dates compatible with that
     specified in the RFC 2822(2) Internet email standard.  (3)

          >>> from time import gmtime, strftime
          >>> strftime("%a, %d %b %Y %H:%M:%S +0000", gmtime())
          'Thu, 28 Jun 2001 14:17:15 +0000'

     Additional directives may be supported on certain platforms, but
     only the ones listed here have a meaning standardized by ANSI C. To
     see the full set of format codes supported on your platform,
     consult the ‘strftime(3)’ documentation.

     On some platforms, an optional field width and precision
     specification can immediately follow the initial ‘'%'’ of a
     directive in the following order; this is also not portable.  The
     field width is normally 2 except for ‘%j’ where it is 3.

 -- Function: time.strptime (string[, format])

     Parse a string representing a time according to a format.  The
     return value is a *note struct_time: 125c. as returned by *note
     gmtime(): 786. or *note localtime(): 125d.

     The `format' parameter uses the same directives as those used by
     *note strftime(): 7b1.; it defaults to ‘"%a %b %d %H:%M:%S %Y"’
     which matches the formatting returned by *note ctime(): 1265.  If
     `string' cannot be parsed according to `format', or if it has
     excess data after parsing, *note ValueError: 19c. is raised.  The
     default values used to fill in any missing data when more accurate
     values cannot be inferred are ‘(1900, 1, 1, 0, 0, 0, 0, 1, -1)’.
     Both `string' and `format' must be strings.

     For example:

          >>> import time
          >>> time.strptime("30 Nov 00", "%d %b %y")   # doctest: +NORMALIZE_WHITESPACE
          time.struct_time(tm_year=2000, tm_mon=11, tm_mday=30, tm_hour=0, tm_min=0,
                           tm_sec=0, tm_wday=3, tm_yday=335, tm_isdst=-1)

     Support for the ‘%Z’ directive is based on the values contained in
     ‘tzname’ and whether ‘daylight’ is true.  Because of this, it is
     platform-specific except for recognizing UTC and GMT which are
     always known (and are considered to be non-daylight savings
     timezones).

     Only the directives specified in the documentation are supported.
     Because ‘strftime()’ is implemented per platform it can sometimes
     offer more directives than those listed.  But ‘strptime()’ is
     independent of any platform and thus does not necessarily support
     all directives available that are not documented as supported.

 -- Class: time.struct_time

          The type of the time value sequence returned by *note
          gmtime(): 786, *note localtime(): 125d, and *note strptime():
          a0b.  It is an object with a *note named tuple: 787.
          interface: values can be accessed by index and by attribute
          name.  The following values are present:

          Index       Attribute               Values
                                              
          --------------------------------------------------------------------------
                                              
          0           ‘tm_year’               (for example, 1993)
                                              
                                              
          1           ‘tm_mon’                range [1, 12]
                                              
                                              
          2           ‘tm_mday’               range [1, 31]
                                              
                                              
          3           ‘tm_hour’               range [0, 23]
                                              
                                              
          4           ‘tm_min’                range [0, 59]
                                              
                                              
          5           ‘tm_sec’                range [0, 61]; see `(2)' in
                                              *note strftime(): 7b1. description
                                              
                                              
          6           ‘tm_wday’               range [0, 6], Monday is 0
                                              
                                              
          7           ‘tm_yday’               range [1, 366]
                                              
                                              
          8           ‘tm_isdst’              0, 1 or -1; see below
                                              
                                              
          N/A         ‘tm_zone’               abbreviation of timezone name
                                              
                                              
          N/A         ‘tm_gmtoff’             offset east of UTC in seconds
                                              

          Note that unlike the C structure, the month value is a range
          of [1, 12], not [0, 11].

          In calls to *note mktime(): 7b0, ‘tm_isdst’ may be set to 1
          when daylight savings time is in effect, and 0 when it is not.
          A value of -1 indicates that this is not known, and will
          usually result in the correct state being filled in.

          When a tuple with an incorrect length is passed to a function
          expecting a *note struct_time: 125c, or having elements of the
          wrong type, a *note TypeError: 562. is raised.

     Changed in version 3.3: ‘tm_gmtoff’ and ‘tm_zone’ attributes are
     available on platforms with C library supporting the corresponding
     fields in ‘struct tm’.

 -- Function: time.time ()

     Return the time in seconds since the epoch as a floating point
     number.  Note that even though the time is always returned as a
     floating point number, not all systems provide time with a better
     precision than 1 second.  While this function normally returns
     non-decreasing values, it can return a lower value than a previous
     call if the system clock has been set back between the two calls.

 -- Data: time.timezone

     The offset of the local (non-DST) timezone, in seconds west of UTC
     (negative in most of Western Europe, positive in the US, zero in
     the UK).

 -- Data: time.tzname

     A tuple of two strings: the first is the name of the local non-DST
     timezone, the second is the name of the local DST timezone.  If no
     DST timezone is defined, the second string should not be used.

 -- Function: time.tzset ()

     Resets the time conversion rules used by the library routines.  The
     environment variable ‘TZ’ specifies how this is done.

     Availability: Unix.

          Note: Although in many cases, changing the ‘TZ’ environment
          variable may affect the output of functions like *note
          localtime(): 125d. without calling *note tzset(): 1980, this
          behavior should not be relied on.

          The ‘TZ’ environment variable should contain no whitespace.

     The standard format of the ‘TZ’ environment variable is (whitespace
     added for clarity):

          std offset [dst [offset [,start[/time], end[/time]]]]

     Where the components are:

     ‘std’ and ‘dst’

          Three or more alphanumerics giving the timezone abbreviations.
          These will be propagated into time.tzname

     ‘offset’

          The offset has the form: ‘± hh[:mm[:ss]]’.  This indicates the
          value added the local time to arrive at UTC. If preceded by a
          ’-’, the timezone is east of the Prime Meridian; otherwise, it
          is west.  If no offset follows dst, summer time is assumed to
          be one hour ahead of standard time.

     ‘start[/time], end[/time]’

          Indicates when to change to and back from DST. The format of
          the start and end dates are one of the following:

          ‘J`n'’

               The Julian day `n' (1 <= `n' <= 365).  Leap days are not
               counted, so in all years February 28 is day 59 and March
               1 is day 60.

          ‘`n'’

               The zero-based Julian day (0 <= `n' <= 365).  Leap days
               are counted, and it is possible to refer to February 29.

          ‘M`m'.`n'.`d'’

               The `d'’th day (0 <= `d' <= 6) of week `n' of month `m'
               of the year (1 <= `n' <= 5, 1 <= `m' <= 12, where week 5
               means "the last `d' day in month `m'" which may occur in
               either the fourth or the fifth week).  Week 1 is the
               first week in which the `d'’th day occurs.  Day zero is a
               Sunday.

          ‘time’ has the same format as ‘offset’ except that no leading
          sign (’-’ or ’+’) is allowed.  The default, if time is not
          given, is 02:00:00.

          >>> os.environ['TZ'] = 'EST+05EDT,M4.1.0,M10.5.0'
          >>> time.tzset()
          >>> time.strftime('%X %x %Z')
          '02:07:36 05/08/03 EDT'
          >>> os.environ['TZ'] = 'AEST-10AEDT-11,M10.5.0,M3.5.0'
          >>> time.tzset()
          >>> time.strftime('%X %x %Z')
          '16:08:12 05/08/03 AEST'

     On many Unix systems (including *BSD, Linux, Solaris, and Darwin),
     it is more convenient to use the system’s zoneinfo (‘tzfile(5)’)
     database to specify the timezone rules.  To do this, set the ‘TZ’
     environment variable to the path of the required timezone datafile,
     relative to the root of the systems ’zoneinfo’ timezone database,
     usually located at ‘/usr/share/zoneinfo’.  For example,
     ‘'US/Eastern'’, ‘'Australia/Melbourne'’, ‘'Egypt'’ or
     ‘'Europe/Amsterdam'’.

          >>> os.environ['TZ'] = 'US/Eastern'
          >>> time.tzset()
          >>> time.tzname
          ('EST', 'EDT')
          >>> os.environ['TZ'] = 'Egypt'
          >>> time.tzset()
          >>> time.tzname
          ('EET', 'EEST')

See also
........

Module *note datetime: 2f.

     More object-oriented interface to dates and times.

Module *note locale: a7.

     Internationalization services.  The locale setting affects the
     interpretation of many format specifiers in *note strftime(): 7b1.
     and *note strptime(): a0b.

Module *note calendar: 15.

     General calendar-related functions.  *note timegm(): 12c6. is the
     inverse of *note gmtime(): 786. from this module.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0475

   (2) https://tools.ietf.org/html/rfc2822.html

   (3) The use of ‘%Z’ is now deprecated, but the ‘%z’ escape that
expands to the preferred hour/minute offset is not supported by all ANSI
C libraries.  Also, a strict reading of the original 1982 RFC 822
(https://tools.ietf.org/html/rfc822.html) standard calls for a two-digit
year (%y rather than %Y), but practice moved to 4-digit years long
before the year 2000.  After that, RFC 822
(https://tools.ietf.org/html/rfc822.html) became obsolete and the
4-digit year has been first recommended by RFC 1123
(https://tools.ietf.org/html/rfc1123.html) and then mandated by RFC 2822
(https://tools.ietf.org/html/rfc2822.html).


File: python.info,  Node: argparse --- Parser for command-line options arguments and sub-commands,  Next: getopt --- C-style parser for command line options,  Prev: time --- Time access and conversions,  Up: Generic Operating System Services

5.16.4 ‘argparse’ — Parser for command-line options, arguments and sub-commands
-------------------------------------------------------------------------------

New in version 3.2.

`Source code:' Lib/argparse.py(1)

__________________________________________________________________

Tutorial
........

This page contains the API reference information.  For a more gentle
introduction to Python command-line parsing, have a look at the *note
argparse tutorial: 1983.

The *note argparse: 6. module makes it easy to write user-friendly
command-line interfaces.  The program defines what arguments it
requires, and *note argparse: 6. will figure out how to parse those out
of *note sys.argv: 85c.  The *note argparse: 6. module also
automatically generates help and usage messages and issues errors when
users give the program invalid arguments.

* Menu:

* Example: Example<6>. 
* ArgumentParser objects:: 
* The add_argument() method: The add_argument method. 
* The parse_args() method: The parse_args method. 
* Other utilities:: 
* Upgrading optparse code:: 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/argparse.py


File: python.info,  Node: Example<6>,  Next: ArgumentParser objects,  Up: argparse --- Parser for command-line options arguments and sub-commands

5.16.4.1 Example
................

The following code is a Python program that takes a list of integers and
produces either the sum or the max:

     import argparse

     parser = argparse.ArgumentParser(description='Process some integers.')
     parser.add_argument('integers', metavar='N', type=int, nargs='+',
                        help='an integer for the accumulator')
     parser.add_argument('--sum', dest='accumulate', action='store_const',
                        const=sum, default=max,
                        help='sum the integers (default: find the max)')

     args = parser.parse_args()
     print(args.accumulate(args.integers))

Assuming the Python code above is saved into a file called ‘prog.py’, it
can be run at the command line and provides useful help messages:

     $ python prog.py -h
     usage: prog.py [-h] [--sum] N [N ...]

     Process some integers.

     positional arguments:
      N           an integer for the accumulator

     optional arguments:
      -h, --help  show this help message and exit
      --sum       sum the integers (default: find the max)

When run with the appropriate arguments, it prints either the sum or the
max of the command-line integers:

     $ python prog.py 1 2 3 4
     4

     $ python prog.py 1 2 3 4 --sum
     10

If invalid arguments are passed in, it will issue an error:

     $ python prog.py a b c
     usage: prog.py [-h] [--sum] N [N ...]
     prog.py: error: argument N: invalid int value: 'a'

The following sections walk you through this example.

* Menu:

* Creating a parser:: 
* Adding arguments:: 
* Parsing arguments:: 


File: python.info,  Node: Creating a parser,  Next: Adding arguments,  Up: Example<6>

5.16.4.2 Creating a parser
..........................

The first step in using the *note argparse: 6. is creating an *note
ArgumentParser: 22f. object:

     >>> parser = argparse.ArgumentParser(description='Process some integers.')

The *note ArgumentParser: 22f. object will hold all the information
necessary to parse the command line into Python data types.


File: python.info,  Node: Adding arguments,  Next: Parsing arguments,  Prev: Creating a parser,  Up: Example<6>

5.16.4.3 Adding arguments
.........................

Filling an *note ArgumentParser: 22f. with information about program
arguments is done by making calls to the *note add_argument(): 1987.
method.  Generally, these calls tell the *note ArgumentParser: 22f. how
to take the strings on the command line and turn them into objects.
This information is stored and used when *note parse_args(): 1988. is
called.  For example:

     >>> parser.add_argument('integers', metavar='N', type=int, nargs='+',
     ...                     help='an integer for the accumulator')
     >>> parser.add_argument('--sum', dest='accumulate', action='store_const',
     ...                     const=sum, default=max,
     ...                     help='sum the integers (default: find the max)')

Later, calling *note parse_args(): 1988. will return an object with two
attributes, ‘integers’ and ‘accumulate’.  The ‘integers’ attribute will
be a list of one or more ints, and the ‘accumulate’ attribute will be
either the *note sum(): a60. function, if ‘--sum’ was specified at the
command line, or the *note max(): 3fa. function if it was not.


File: python.info,  Node: Parsing arguments,  Prev: Adding arguments,  Up: Example<6>

5.16.4.4 Parsing arguments
..........................

*note ArgumentParser: 22f. parses arguments through the *note
parse_args(): 1988. method.  This will inspect the command line, convert
each argument to the appropriate type and then invoke the appropriate
action.  In most cases, this means a simple *note Namespace: 198a.
object will be built up from attributes parsed out of the command line:

     >>> parser.parse_args(['--sum', '7', '-1', '42'])
     Namespace(accumulate=<built-in function sum>, integers=[7, -1, 42])

In a script, *note parse_args(): 1988. will typically be called with no
arguments, and the *note ArgumentParser: 22f. will automatically
determine the command-line arguments from *note sys.argv: 85c.


File: python.info,  Node: ArgumentParser objects,  Next: The add_argument method,  Prev: Example<6>,  Up: argparse --- Parser for command-line options arguments and sub-commands

5.16.4.5 ArgumentParser objects
...............................

 -- Class: argparse.ArgumentParser (prog=None, usage=None,
          description=None, epilog=None, parents=[],
          formatter_class=argparse.HelpFormatter, prefix_chars='-',
          fromfile_prefix_chars=None, argument_default=None,
          conflict_handler='error', add_help=True, allow_abbrev=True)

     Create a new *note ArgumentParser: 22f. object.  All parameters
     should be passed as keyword arguments.  Each parameter has its own
     more detailed description below, but in short they are:

        * *note prog: 198c. - The name of the program (default:
          ‘sys.argv[0]’)

        * *note usage: 198d. - The string describing the program usage
          (default: generated from arguments added to parser)

        * *note description: 198e. - Text to display before the argument
          help (default: none)

        * *note epilog: 198f. - Text to display after the argument help
          (default: none)

        * *note parents: 1990. - A list of *note ArgumentParser: 22f.
          objects whose arguments should also be included

        * *note formatter_class: 1991. - A class for customizing the
          help output

        * *note prefix_chars: 1992. - The set of characters that prefix
          optional arguments (default: ’-’)

        * *note fromfile_prefix_chars: 1993. - The set of characters
          that prefix files from which additional arguments should be
          read (default: ‘None’)

        * *note argument_default: 1994. - The global default value for
          arguments (default: ‘None’)

        * *note conflict_handler: 1995. - The strategy for resolving
          conflicting optionals (usually unnecessary)

        * *note add_help: 1996. - Add a -h/–help option to the parser
          (default: ‘True’)

        * *note allow_abbrev: 231. - Allows long options to be
          abbreviated if the abbreviation is unambiguous.  (default:
          ‘True’)

     Changed in version 3.5: `allow_abbrev' parameter was added.

The following sections describe how each of these are used.

* Menu:

* prog:: 
* usage:: 
* description:: 
* epilog:: 
* parents:: 
* formatter_class:: 
* prefix_chars:: 
* fromfile_prefix_chars:: 
* argument_default:: 
* allow_abbrev:: 
* conflict_handler:: 
* add_help:: 


File: python.info,  Node: prog,  Next: usage,  Up: ArgumentParser objects

5.16.4.6 prog
.............

By default, *note ArgumentParser: 22f. objects uses ‘sys.argv[0]’ to
determine how to display the name of the program in help messages.  This
default is almost always desirable because it will make the help
messages match how the program was invoked on the command line.  For
example, consider a file named ‘myprogram.py’ with the following code:

     import argparse
     parser = argparse.ArgumentParser()
     parser.add_argument('--foo', help='foo help')
     args = parser.parse_args()

The help for this program will display ‘myprogram.py’ as the program
name (regardless of where the program was invoked from):

     $ python myprogram.py --help
     usage: myprogram.py [-h] [--foo FOO]

     optional arguments:
      -h, --help  show this help message and exit
      --foo FOO   foo help
     $ cd ..
     $ python subdir\myprogram.py --help
     usage: myprogram.py [-h] [--foo FOO]

     optional arguments:
      -h, --help  show this help message and exit
      --foo FOO   foo help

To change this default behavior, another value can be supplied using the
‘prog=’ argument to *note ArgumentParser: 22f.:

     >>> parser = argparse.ArgumentParser(prog='myprogram')
     >>> parser.print_help()
     usage: myprogram [-h]

     optional arguments:
      -h, --help  show this help message and exit

Note that the program name, whether determined from ‘sys.argv[0]’ or
from the ‘prog=’ argument, is available to help messages using the
‘%(prog)s’ format specifier.

     >>> parser = argparse.ArgumentParser(prog='myprogram')
     >>> parser.add_argument('--foo', help='foo of the %(prog)s program')
     >>> parser.print_help()
     usage: myprogram [-h] [--foo FOO]

     optional arguments:
      -h, --help  show this help message and exit
      --foo FOO   foo of the myprogram program


File: python.info,  Node: usage,  Next: description,  Prev: prog,  Up: ArgumentParser objects

5.16.4.7 usage
..............

By default, *note ArgumentParser: 22f. calculates the usage message from
the arguments it contains:

     >>> parser = argparse.ArgumentParser(prog='PROG')
     >>> parser.add_argument('--foo', nargs='?', help='foo help')
     >>> parser.add_argument('bar', nargs='+', help='bar help')
     >>> parser.print_help()
     usage: PROG [-h] [--foo [FOO]] bar [bar ...]

     positional arguments:
      bar          bar help

     optional arguments:
      -h, --help   show this help message and exit
      --foo [FOO]  foo help

The default message can be overridden with the ‘usage=’ keyword
argument:

     >>> parser = argparse.ArgumentParser(prog='PROG', usage='%(prog)s [options]')
     >>> parser.add_argument('--foo', nargs='?', help='foo help')
     >>> parser.add_argument('bar', nargs='+', help='bar help')
     >>> parser.print_help()
     usage: PROG [options]

     positional arguments:
      bar          bar help

     optional arguments:
      -h, --help   show this help message and exit
      --foo [FOO]  foo help

The ‘%(prog)s’ format specifier is available to fill in the program name
in your usage messages.


File: python.info,  Node: description,  Next: epilog,  Prev: usage,  Up: ArgumentParser objects

5.16.4.8 description
....................

Most calls to the *note ArgumentParser: 22f. constructor will use the
‘description=’ keyword argument.  This argument gives a brief
description of what the program does and how it works.  In help
messages, the description is displayed between the command-line usage
string and the help messages for the various arguments:

     >>> parser = argparse.ArgumentParser(description='A foo that bars')
     >>> parser.print_help()
     usage: argparse.py [-h]

     A foo that bars

     optional arguments:
      -h, --help  show this help message and exit

By default, the description will be line-wrapped so that it fits within
the given space.  To change this behavior, see the *note
formatter_class: 1991. argument.


File: python.info,  Node: epilog,  Next: parents,  Prev: description,  Up: ArgumentParser objects

5.16.4.9 epilog
...............

Some programs like to display additional description of the program
after the description of the arguments.  Such text can be specified
using the ‘epilog=’ argument to *note ArgumentParser: 22f.:

     >>> parser = argparse.ArgumentParser(
     ...     description='A foo that bars',
     ...     epilog="And that's how you'd foo a bar")
     >>> parser.print_help()
     usage: argparse.py [-h]

     A foo that bars

     optional arguments:
      -h, --help  show this help message and exit

     And that's how you'd foo a bar

As with the *note description: 198e. argument, the ‘epilog=’ text is by
default line-wrapped, but this behavior can be adjusted with the *note
formatter_class: 1991. argument to *note ArgumentParser: 22f.


File: python.info,  Node: parents,  Next: formatter_class,  Prev: epilog,  Up: ArgumentParser objects

5.16.4.10 parents
.................

Sometimes, several parsers share a common set of arguments.  Rather than
repeating the definitions of these arguments, a single parser with all
the shared arguments and passed to ‘parents=’ argument to *note
ArgumentParser: 22f. can be used.  The ‘parents=’ argument takes a list
of *note ArgumentParser: 22f. objects, collects all the positional and
optional actions from them, and adds these actions to the *note
ArgumentParser: 22f. object being constructed:

     >>> parent_parser = argparse.ArgumentParser(add_help=False)
     >>> parent_parser.add_argument('--parent', type=int)

     >>> foo_parser = argparse.ArgumentParser(parents=[parent_parser])
     >>> foo_parser.add_argument('foo')
     >>> foo_parser.parse_args(['--parent', '2', 'XXX'])
     Namespace(foo='XXX', parent=2)

     >>> bar_parser = argparse.ArgumentParser(parents=[parent_parser])
     >>> bar_parser.add_argument('--bar')
     >>> bar_parser.parse_args(['--bar', 'YYY'])
     Namespace(bar='YYY', parent=None)

Note that most parent parsers will specify ‘add_help=False’.  Otherwise,
the *note ArgumentParser: 22f. will see two ‘-h/--help’ options (one in
the parent and one in the child) and raise an error.

     Note: You must fully initialize the parsers before passing them via
     ‘parents=’.  If you change the parent parsers after the child
     parser, those changes will not be reflected in the child.


File: python.info,  Node: formatter_class,  Next: prefix_chars,  Prev: parents,  Up: ArgumentParser objects

5.16.4.11 formatter_class
.........................

*note ArgumentParser: 22f. objects allow the help formatting to be
customized by specifying an alternate formatting class.  Currently,
there are four such classes:

 -- Class: argparse.RawDescriptionHelpFormatter
 -- Class: argparse.RawTextHelpFormatter
 -- Class: argparse.ArgumentDefaultsHelpFormatter
 -- Class: argparse.MetavarTypeHelpFormatter

*note RawDescriptionHelpFormatter: 1997. and *note RawTextHelpFormatter:
1998. give more control over how textual descriptions are displayed.  By
default, *note ArgumentParser: 22f. objects line-wrap the *note
description: 198e. and *note epilog: 198f. texts in command-line help
messages:

     >>> parser = argparse.ArgumentParser(
     ...     prog='PROG',
     ...     description='''this description
     ...         was indented weird
     ...             but that is okay''',
     ...     epilog='''
     ...             likewise for this epilog whose whitespace will
     ...         be cleaned up and whose words will be wrapped
     ...         across a couple lines''')
     >>> parser.print_help()
     usage: PROG [-h]

     this description was indented weird but that is okay

     optional arguments:
      -h, --help  show this help message and exit

     likewise for this epilog whose whitespace will be cleaned up and whose words
     will be wrapped across a couple lines

Passing *note RawDescriptionHelpFormatter: 1997. as ‘formatter_class=’
indicates that *note description: 198e. and *note epilog: 198f. are
already correctly formatted and should not be line-wrapped:

     >>> parser = argparse.ArgumentParser(
     ...     prog='PROG',
     ...     formatter_class=argparse.RawDescriptionHelpFormatter,
     ...     description=textwrap.dedent('''\
     ...         Please do not mess up this text!
     ...         --------------------------------
     ...             I have indented it
     ...             exactly the way
     ...             I want it
     ...         '''))
     >>> parser.print_help()
     usage: PROG [-h]

     Please do not mess up this text!
     --------------------------------
        I have indented it
        exactly the way
        I want it

     optional arguments:
      -h, --help  show this help message and exit

*note RawTextHelpFormatter: 1998. maintains whitespace for all sorts of
help text, including argument descriptions.

*note ArgumentDefaultsHelpFormatter: 1999. automatically adds
information about default values to each of the argument help messages:

     >>> parser = argparse.ArgumentParser(
     ...     prog='PROG',
     ...     formatter_class=argparse.ArgumentDefaultsHelpFormatter)
     >>> parser.add_argument('--foo', type=int, default=42, help='FOO!')
     >>> parser.add_argument('bar', nargs='*', default=[1, 2, 3], help='BAR!')
     >>> parser.print_help()
     usage: PROG [-h] [--foo FOO] [bar [bar ...]]

     positional arguments:
      bar         BAR! (default: [1, 2, 3])

     optional arguments:
      -h, --help  show this help message and exit
      --foo FOO   FOO! (default: 42)

*note MetavarTypeHelpFormatter: 199a. uses the name of the *note type:
199b. argument for each argument as the display name for its values
(rather than using the *note dest: 199c. as the regular formatter does):

     >>> parser = argparse.ArgumentParser(
     ...     prog='PROG',
     ...     formatter_class=argparse.MetavarTypeHelpFormatter)
     >>> parser.add_argument('--foo', type=int)
     >>> parser.add_argument('bar', type=float)
     >>> parser.print_help()
     usage: PROG [-h] [--foo int] float

     positional arguments:
       float

     optional arguments:
       -h, --help  show this help message and exit
       --foo int


File: python.info,  Node: prefix_chars,  Next: fromfile_prefix_chars,  Prev: formatter_class,  Up: ArgumentParser objects

5.16.4.12 prefix_chars
......................

Most command-line options will use ‘-’ as the prefix, e.g.  ‘-f/--foo’.
Parsers that need to support different or additional prefix characters,
e.g.  for options like ‘+f’ or ‘/foo’, may specify them using the
‘prefix_chars=’ argument to the ArgumentParser constructor:

     >>> parser = argparse.ArgumentParser(prog='PROG', prefix_chars='-+')
     >>> parser.add_argument('+f')
     >>> parser.add_argument('++bar')
     >>> parser.parse_args('+f X ++bar Y'.split())
     Namespace(bar='Y', f='X')

The ‘prefix_chars=’ argument defaults to ‘'-'’.  Supplying a set of
characters that does not include ‘-’ will cause ‘-f/--foo’ options to be
disallowed.


File: python.info,  Node: fromfile_prefix_chars,  Next: argument_default,  Prev: prefix_chars,  Up: ArgumentParser objects

5.16.4.13 fromfile_prefix_chars
...............................

Sometimes, for example when dealing with a particularly long argument
lists, it may make sense to keep the list of arguments in a file rather
than typing it out at the command line.  If the ‘fromfile_prefix_chars=’
argument is given to the *note ArgumentParser: 22f. constructor, then
arguments that start with any of the specified characters will be
treated as files, and will be replaced by the arguments they contain.
For example:

     >>> with open('args.txt', 'w') as fp:
     ...    fp.write('-f\nbar')
     >>> parser = argparse.ArgumentParser(fromfile_prefix_chars='@')
     >>> parser.add_argument('-f')
     >>> parser.parse_args(['-f', 'foo', '@args.txt'])
     Namespace(f='bar')

Arguments read from a file must by default be one per line (but see also
*note convert_arg_line_to_args(): 199d.) and are treated as if they were
in the same place as the original file referencing argument on the
command line.  So in the example above, the expression ‘['-f', 'foo',
'@args.txt']’ is considered equivalent to the expression ‘['-f', 'foo',
'-f', 'bar']’.

The ‘fromfile_prefix_chars=’ argument defaults to ‘None’, meaning that
arguments will never be treated as file references.


File: python.info,  Node: argument_default,  Next: allow_abbrev,  Prev: fromfile_prefix_chars,  Up: ArgumentParser objects

5.16.4.14 argument_default
..........................

Generally, argument defaults are specified either by passing a default
to *note add_argument(): 1987. or by calling the *note set_defaults():
199e. methods with a specific set of name-value pairs.  Sometimes
however, it may be useful to specify a single parser-wide default for
arguments.  This can be accomplished by passing the ‘argument_default=’
keyword argument to *note ArgumentParser: 22f.  For example, to globally
suppress attribute creation on *note parse_args(): 1988. calls, we
supply ‘argument_default=SUPPRESS’:

     >>> parser = argparse.ArgumentParser(argument_default=argparse.SUPPRESS)
     >>> parser.add_argument('--foo')
     >>> parser.add_argument('bar', nargs='?')
     >>> parser.parse_args(['--foo', '1', 'BAR'])
     Namespace(bar='BAR', foo='1')
     >>> parser.parse_args([])
     Namespace()


File: python.info,  Node: allow_abbrev,  Next: conflict_handler,  Prev: argument_default,  Up: ArgumentParser objects

5.16.4.15 allow_abbrev
......................

Normally, when you pass an argument list to the *note parse_args():
1988. method of an *note ArgumentParser: 22f, it *note recognizes
abbreviations: 230. of long options.

This feature can be disabled by setting ‘allow_abbrev’ to ‘False’:

     >>> parser = argparse.ArgumentParser(prog='PROG', allow_abbrev=False)
     >>> parser.add_argument('--foobar', action='store_true')
     >>> parser.add_argument('--foonley', action='store_false')
     >>> parser.parse_args(['--foon'])
     usage: PROG [-h] [--foobar] [--foonley]
     PROG: error: unrecognized arguments: --foon

New in version 3.5.


File: python.info,  Node: conflict_handler,  Next: add_help,  Prev: allow_abbrev,  Up: ArgumentParser objects

5.16.4.16 conflict_handler
..........................

*note ArgumentParser: 22f. objects do not allow two actions with the
same option string.  By default, *note ArgumentParser: 22f. objects
raises an exception if an attempt is made to create an argument with an
option string that is already in use:

     >>> parser = argparse.ArgumentParser(prog='PROG')
     >>> parser.add_argument('-f', '--foo', help='old foo help')
     >>> parser.add_argument('--foo', help='new foo help')
     Traceback (most recent call last):
      ..
     ArgumentError: argument --foo: conflicting option string(s): --foo

Sometimes (e.g.  when using *note parents: 1990.) it may be useful to
simply override any older arguments with the same option string.  To get
this behavior, the value ‘'resolve'’ can be supplied to the
‘conflict_handler=’ argument of *note ArgumentParser: 22f.:

     >>> parser = argparse.ArgumentParser(prog='PROG', conflict_handler='resolve')
     >>> parser.add_argument('-f', '--foo', help='old foo help')
     >>> parser.add_argument('--foo', help='new foo help')
     >>> parser.print_help()
     usage: PROG [-h] [-f FOO] [--foo FOO]

     optional arguments:
      -h, --help  show this help message and exit
      -f FOO      old foo help
      --foo FOO   new foo help

Note that *note ArgumentParser: 22f. objects only remove an action if
all of its option strings are overridden.  So, in the example above, the
old ‘-f/--foo’ action is retained as the ‘-f’ action, because only the
‘--foo’ option string was overridden.


File: python.info,  Node: add_help,  Prev: conflict_handler,  Up: ArgumentParser objects

5.16.4.17 add_help
..................

By default, ArgumentParser objects add an option which simply displays
the parser’s help message.  For example, consider a file named
‘myprogram.py’ containing the following code:

     import argparse
     parser = argparse.ArgumentParser()
     parser.add_argument('--foo', help='foo help')
     args = parser.parse_args()

If ‘-h’ or ‘--help’ is supplied at the command line, the ArgumentParser
help will be printed:

     $ python myprogram.py --help
     usage: myprogram.py [-h] [--foo FOO]

     optional arguments:
      -h, --help  show this help message and exit
      --foo FOO   foo help

Occasionally, it may be useful to disable the addition of this help
option.  This can be achieved by passing ‘False’ as the ‘add_help=’
argument to *note ArgumentParser: 22f.:

     >>> parser = argparse.ArgumentParser(prog='PROG', add_help=False)
     >>> parser.add_argument('--foo', help='foo help')
     >>> parser.print_help()
     usage: PROG [--foo FOO]

     optional arguments:
      --foo FOO  foo help

The help option is typically ‘-h/--help’.  The exception to this is if
the ‘prefix_chars=’ is specified and does not include ‘-’, in which case
‘-h’ and ‘--help’ are not valid options.  In this case, the first
character in ‘prefix_chars’ is used to prefix the help options:

     >>> parser = argparse.ArgumentParser(prog='PROG', prefix_chars='+/')
     >>> parser.print_help()
     usage: PROG [+h]

     optional arguments:
       +h, ++help  show this help message and exit


File: python.info,  Node: The add_argument method,  Next: The parse_args method,  Prev: ArgumentParser objects,  Up: argparse --- Parser for command-line options arguments and sub-commands

5.16.4.18 The add_argument() method
...................................

 -- Method: ArgumentParser.add_argument (name or flags...[, action][,
          nargs][, const][, default][, type][, choices][, required][,
          help][, metavar][, dest])

     Define how a single command-line argument should be parsed.  Each
     parameter has its own more detailed description below, but in short
     they are:

        * *note name or flags: 19a1. - Either a name or a list of option
          strings, e.g.  ‘foo’ or ‘-f, --foo’.

        * *note action: 19a2. - The basic type of action to be taken
          when this argument is encountered at the command line.

        * *note nargs: 19a3. - The number of command-line arguments that
          should be consumed.

        * *note const: 19a4. - A constant value required by some *note
          action: 19a2. and *note nargs: 19a3. selections.

        * *note default: 19a5. - The value produced if the argument is
          absent from the command line.

        * *note type: 199b. - The type to which the command-line
          argument should be converted.

        * *note choices: 19a6. - A container of the allowable values for
          the argument.

        * *note required: 19a7. - Whether or not the command-line option
          may be omitted (optionals only).

        * *note help: 19a8. - A brief description of what the argument
          does.

        * *note metavar: 19a9. - A name for the argument in usage
          messages.

        * *note dest: 199c. - The name of the attribute to be added to
          the object returned by *note parse_args(): 1988.

The following sections describe how each of these are used.

* Menu:

* name or flags:: 
* action:: 
* nargs:: 
* const:: 
* default:: 
* type:: 
* choices:: 
* required:: 
* help:: 
* metavar:: 
* dest:: 
* Action classes:: 


File: python.info,  Node: name or flags,  Next: action,  Up: The add_argument method

5.16.4.19 name or flags
.......................

The *note add_argument(): 1987. method must know whether an optional
argument, like ‘-f’ or ‘--foo’, or a positional argument, like a list of
filenames, is expected.  The first arguments passed to *note
add_argument(): 1987. must therefore be either a series of flags, or a
simple argument name.  For example, an optional argument could be
created like:

     >>> parser.add_argument('-f', '--foo')

while a positional argument could be created like:

     >>> parser.add_argument('bar')

When *note parse_args(): 1988. is called, optional arguments will be
identified by the ‘-’ prefix, and the remaining arguments will be
assumed to be positional:

     >>> parser = argparse.ArgumentParser(prog='PROG')
     >>> parser.add_argument('-f', '--foo')
     >>> parser.add_argument('bar')
     >>> parser.parse_args(['BAR'])
     Namespace(bar='BAR', foo=None)
     >>> parser.parse_args(['BAR', '--foo', 'FOO'])
     Namespace(bar='BAR', foo='FOO')
     >>> parser.parse_args(['--foo', 'FOO'])
     usage: PROG [-h] [-f FOO] bar
     PROG: error: too few arguments


File: python.info,  Node: action,  Next: nargs,  Prev: name or flags,  Up: The add_argument method

5.16.4.20 action
................

*note ArgumentParser: 22f. objects associate command-line arguments with
actions.  These actions can do just about anything with the command-line
arguments associated with them, though most actions simply add an
attribute to the object returned by *note parse_args(): 1988.  The
‘action’ keyword argument specifies how the command-line arguments
should be handled.  The supplied actions are:

   * ‘'store'’ - This just stores the argument’s value.  This is the
     default action.  For example:

          >>> parser = argparse.ArgumentParser()
          >>> parser.add_argument('--foo')
          >>> parser.parse_args('--foo 1'.split())
          Namespace(foo='1')

   * ‘'store_const'’ - This stores the value specified by the *note
     const: 19a4. keyword argument.  The ‘'store_const'’ action is most
     commonly used with optional arguments that specify some sort of
     flag.  For example:

          >>> parser = argparse.ArgumentParser()
          >>> parser.add_argument('--foo', action='store_const', const=42)
          >>> parser.parse_args(['--foo'])
          Namespace(foo=42)

   * ‘'store_true'’ and ‘'store_false'’ - These are special cases of
     ‘'store_const'’ used for storing the values ‘True’ and ‘False’
     respectively.  In addition, they create default values of ‘False’
     and ‘True’ respectively.  For example:

          >>> parser = argparse.ArgumentParser()
          >>> parser.add_argument('--foo', action='store_true')
          >>> parser.add_argument('--bar', action='store_false')
          >>> parser.add_argument('--baz', action='store_false')
          >>> parser.parse_args('--foo --bar'.split())
          Namespace(foo=True, bar=False, baz=True)

   * ‘'append'’ - This stores a list, and appends each argument value to
     the list.  This is useful to allow an option to be specified
     multiple times.  Example usage:

          >>> parser = argparse.ArgumentParser()
          >>> parser.add_argument('--foo', action='append')
          >>> parser.parse_args('--foo 1 --foo 2'.split())
          Namespace(foo=['1', '2'])

   * ‘'append_const'’ - This stores a list, and appends the value
     specified by the *note const: 19a4. keyword argument to the list.
     (Note that the *note const: 19a4. keyword argument defaults to
     ‘None’.)  The ‘'append_const'’ action is typically useful when
     multiple arguments need to store constants to the same list.  For
     example:

          >>> parser = argparse.ArgumentParser()
          >>> parser.add_argument('--str', dest='types', action='append_const', const=str)
          >>> parser.add_argument('--int', dest='types', action='append_const', const=int)
          >>> parser.parse_args('--str --int'.split())
          Namespace(types=[<class 'str'>, <class 'int'>])

   * ‘'count'’ - This counts the number of times a keyword argument
     occurs.  For example, this is useful for increasing verbosity
     levels:

          >>> parser = argparse.ArgumentParser()
          >>> parser.add_argument('--verbose', '-v', action='count')
          >>> parser.parse_args(['-vvv'])
          Namespace(verbose=3)

   * ‘'help'’ - This prints a complete help message for all the options
     in the current parser and then exits.  By default a help action is
     automatically added to the parser.  See *note ArgumentParser: 22f.
     for details of how the output is created.

   * ‘'version'’ - This expects a ‘version=’ keyword argument in the
     *note add_argument(): 1987. call, and prints version information
     and exits when invoked:

          >>> import argparse
          >>> parser = argparse.ArgumentParser(prog='PROG')
          >>> parser.add_argument('--version', action='version', version='%(prog)s 2.0')
          >>> parser.parse_args(['--version'])
          PROG 2.0

You may also specify an arbitrary action by passing an Action subclass
or other object that implements the same interface.  The recommended way
to do this is to extend *note Action: 19aa, overriding the ‘__call__’
method and optionally the ‘__init__’ method.

An example of a custom action:

     >>> class FooAction(argparse.Action):
     ...     def __init__(self, option_strings, dest, nargs=None, **kwargs):
     ...         if nargs is not None:
     ...             raise ValueError("nargs not allowed")
     ...         super(FooAction, self).__init__(option_strings, dest, **kwargs)
     ...     def __call__(self, parser, namespace, values, option_string=None):
     ...         print('%r %r %r' % (namespace, values, option_string))
     ...         setattr(namespace, self.dest, values)
     ...
     >>> parser = argparse.ArgumentParser()
     >>> parser.add_argument('--foo', action=FooAction)
     >>> parser.add_argument('bar', action=FooAction)
     >>> args = parser.parse_args('1 --foo 2'.split())
     Namespace(bar=None, foo=None) '1' None
     Namespace(bar='1', foo=None) '2' '--foo'
     >>> args
     Namespace(bar='1', foo='2')

For more details, see *note Action: 19aa.


File: python.info,  Node: nargs,  Next: const,  Prev: action,  Up: The add_argument method

5.16.4.21 nargs
...............

ArgumentParser objects usually associate a single command-line argument
with a single action to be taken.  The ‘nargs’ keyword argument
associates a different number of command-line arguments with a single
action.  The supported values are:

   * ‘N’ (an integer).  ‘N’ arguments from the command line will be
     gathered together into a list.  For example:

          >>> parser = argparse.ArgumentParser()
          >>> parser.add_argument('--foo', nargs=2)
          >>> parser.add_argument('bar', nargs=1)
          >>> parser.parse_args('c --foo a b'.split())
          Namespace(bar=['c'], foo=['a', 'b'])

     Note that ‘nargs=1’ produces a list of one item.  This is different
     from the default, in which the item is produced by itself.

   * ‘'?'’.  One argument will be consumed from the command line if
     possible, and produced as a single item.  If no command-line
     argument is present, the value from *note default: 19a5. will be
     produced.  Note that for optional arguments, there is an additional
     case - the option string is present but not followed by a
     command-line argument.  In this case the value from *note const:
     19a4. will be produced.  Some examples to illustrate this:

          >>> parser = argparse.ArgumentParser()
          >>> parser.add_argument('--foo', nargs='?', const='c', default='d')
          >>> parser.add_argument('bar', nargs='?', default='d')
          >>> parser.parse_args(['XX', '--foo', 'YY'])
          Namespace(bar='XX', foo='YY')
          >>> parser.parse_args(['XX', '--foo'])
          Namespace(bar='XX', foo='c')
          >>> parser.parse_args([])
          Namespace(bar='d', foo='d')

     One of the more common uses of ‘nargs='?'’ is to allow optional
     input and output files:

          >>> parser = argparse.ArgumentParser()
          >>> parser.add_argument('infile', nargs='?', type=argparse.FileType('r'),
          ...                     default=sys.stdin)
          >>> parser.add_argument('outfile', nargs='?', type=argparse.FileType('w'),
          ...                     default=sys.stdout)
          >>> parser.parse_args(['input.txt', 'output.txt'])
          Namespace(infile=<_io.TextIOWrapper name='input.txt' encoding='UTF-8'>,
                    outfile=<_io.TextIOWrapper name='output.txt' encoding='UTF-8'>)
          >>> parser.parse_args([])
          Namespace(infile=<_io.TextIOWrapper name='<stdin>' encoding='UTF-8'>,
                    outfile=<_io.TextIOWrapper name='<stdout>' encoding='UTF-8'>)

   * ‘'*'’.  All command-line arguments present are gathered into a
     list.  Note that it generally doesn’t make much sense to have more
     than one positional argument with ‘nargs='*'’, but multiple
     optional arguments with ‘nargs='*'’ is possible.  For example:

          >>> parser = argparse.ArgumentParser()
          >>> parser.add_argument('--foo', nargs='*')
          >>> parser.add_argument('--bar', nargs='*')
          >>> parser.add_argument('baz', nargs='*')
          >>> parser.parse_args('a b --foo x y --bar 1 2'.split())
          Namespace(bar=['1', '2'], baz=['a', 'b'], foo=['x', 'y'])

   * ‘'+'’.  Just like ‘'*'’, all command-line args present are gathered
     into a list.  Additionally, an error message will be generated if
     there wasn’t at least one command-line argument present.  For
     example:

          >>> parser = argparse.ArgumentParser(prog='PROG')
          >>> parser.add_argument('foo', nargs='+')
          >>> parser.parse_args(['a', 'b'])
          Namespace(foo=['a', 'b'])
          >>> parser.parse_args([])
          usage: PROG [-h] foo [foo ...]
          PROG: error: too few arguments

   * ‘argparse.REMAINDER’.  All the remaining command-line arguments are
     gathered into a list.  This is commonly useful for command line
     utilities that dispatch to other command line utilities:

          >>> parser = argparse.ArgumentParser(prog='PROG')
          >>> parser.add_argument('--foo')
          >>> parser.add_argument('command')
          >>> parser.add_argument('args', nargs=argparse.REMAINDER)
          >>> print(parser.parse_args('--foo B cmd --arg1 XX ZZ'.split()))
          Namespace(args=['--arg1', 'XX', 'ZZ'], command='cmd', foo='B')

If the ‘nargs’ keyword argument is not provided, the number of arguments
consumed is determined by the *note action: 19a2.  Generally this means
a single command-line argument will be consumed and a single item (not a
list) will be produced.


File: python.info,  Node: const,  Next: default,  Prev: nargs,  Up: The add_argument method

5.16.4.22 const
...............

The ‘const’ argument of *note add_argument(): 1987. is used to hold
constant values that are not read from the command line but are required
for the various *note ArgumentParser: 22f. actions.  The two most common
uses of it are:

   * When *note add_argument(): 1987. is called with
     ‘action='store_const'’ or ‘action='append_const'’.  These actions
     add the ‘const’ value to one of the attributes of the object
     returned by *note parse_args(): 1988.  See the *note action: 19a2.
     description for examples.

   * When *note add_argument(): 1987. is called with option strings
     (like ‘-f’ or ‘--foo’) and ‘nargs='?'’.  This creates an optional
     argument that can be followed by zero or one command-line
     arguments.  When parsing the command line, if the option string is
     encountered with no command-line argument following it, the value
     of ‘const’ will be assumed instead.  See the *note nargs: 19a3.
     description for examples.

With the ‘'store_const'’ and ‘'append_const'’ actions, the ‘const’
keyword argument must be given.  For other actions, it defaults to
‘None’.


File: python.info,  Node: default,  Next: type,  Prev: const,  Up: The add_argument method

5.16.4.23 default
.................

All optional arguments and some positional arguments may be omitted at
the command line.  The ‘default’ keyword argument of *note
add_argument(): 1987, whose value defaults to ‘None’, specifies what
value should be used if the command-line argument is not present.  For
optional arguments, the ‘default’ value is used when the option string
was not present at the command line:

     >>> parser = argparse.ArgumentParser()
     >>> parser.add_argument('--foo', default=42)
     >>> parser.parse_args(['--foo', '2'])
     Namespace(foo='2')
     >>> parser.parse_args([])
     Namespace(foo=42)

If the ‘default’ value is a string, the parser parses the value as if it
were a command-line argument.  In particular, the parser applies any
*note type: 199b. conversion argument, if provided, before setting the
attribute on the *note Namespace: 198a. return value.  Otherwise, the
parser uses the value as is:

     >>> parser = argparse.ArgumentParser()
     >>> parser.add_argument('--length', default='10', type=int)
     >>> parser.add_argument('--width', default=10.5, type=int)
     >>> parser.parse_args()
     Namespace(length=10, width=10.5)

For positional arguments with *note nargs: 19a3. equal to ‘?’ or ‘*’,
the ‘default’ value is used when no command-line argument was present:

     >>> parser = argparse.ArgumentParser()
     >>> parser.add_argument('foo', nargs='?', default=42)
     >>> parser.parse_args(['a'])
     Namespace(foo='a')
     >>> parser.parse_args([])
     Namespace(foo=42)

Providing ‘default=argparse.SUPPRESS’ causes no attribute to be added if
the command-line argument was not present.:

     >>> parser = argparse.ArgumentParser()
     >>> parser.add_argument('--foo', default=argparse.SUPPRESS)
     >>> parser.parse_args([])
     Namespace()
     >>> parser.parse_args(['--foo', '1'])
     Namespace(foo='1')


File: python.info,  Node: type,  Next: choices,  Prev: default,  Up: The add_argument method

5.16.4.24 type
..............

By default, *note ArgumentParser: 22f. objects read command-line
arguments in as simple strings.  However, quite often the command-line
string should instead be interpreted as another type, like a *note
float: 57a. or *note int: 227.  The ‘type’ keyword argument of *note
add_argument(): 1987. allows any necessary type-checking and type
conversions to be performed.  Common built-in types and functions can be
used directly as the value of the ‘type’ argument:

     >>> parser = argparse.ArgumentParser()
     >>> parser.add_argument('foo', type=int)
     >>> parser.add_argument('bar', type=open)
     >>> parser.parse_args('2 temp.txt'.split())
     Namespace(bar=<_io.TextIOWrapper name='temp.txt' encoding='UTF-8'>, foo=2)

See the section on the *note default: 19a5. keyword argument for
information on when the ‘type’ argument is applied to default arguments.

To ease the use of various types of files, the argparse module provides
the factory FileType which takes the ‘mode=’, ‘bufsize=’, ‘encoding=’
and ‘errors=’ arguments of the *note open(): 1e8. function.  For
example, ‘FileType('w')’ can be used to create a writable file:

     >>> parser = argparse.ArgumentParser()
     >>> parser.add_argument('bar', type=argparse.FileType('w'))
     >>> parser.parse_args(['out.txt'])
     Namespace(bar=<_io.TextIOWrapper name='out.txt' encoding='UTF-8'>)

‘type=’ can take any callable that takes a single string argument and
returns the converted value:

     >>> def perfect_square(string):
     ...     value = int(string)
     ...     sqrt = math.sqrt(value)
     ...     if sqrt != int(sqrt):
     ...         msg = "%r is not a perfect square" % string
     ...         raise argparse.ArgumentTypeError(msg)
     ...     return value
     ...
     >>> parser = argparse.ArgumentParser(prog='PROG')
     >>> parser.add_argument('foo', type=perfect_square)
     >>> parser.parse_args(['9'])
     Namespace(foo=9)
     >>> parser.parse_args(['7'])
     usage: PROG [-h] foo
     PROG: error: argument foo: '7' is not a perfect square

The *note choices: 19a6. keyword argument may be more convenient for
type checkers that simply check against a range of values:

     >>> parser = argparse.ArgumentParser(prog='PROG')
     >>> parser.add_argument('foo', type=int, choices=range(5, 10))
     >>> parser.parse_args(['7'])
     Namespace(foo=7)
     >>> parser.parse_args(['11'])
     usage: PROG [-h] {5,6,7,8,9}
     PROG: error: argument foo: invalid choice: 11 (choose from 5, 6, 7, 8, 9)

See the *note choices: 19a6. section for more details.


File: python.info,  Node: choices,  Next: required,  Prev: type,  Up: The add_argument method

5.16.4.25 choices
.................

Some command-line arguments should be selected from a restricted set of
values.  These can be handled by passing a container object as the
`choices' keyword argument to *note add_argument(): 1987.  When the
command line is parsed, argument values will be checked, and an error
message will be displayed if the argument was not one of the acceptable
values:

     >>> parser = argparse.ArgumentParser(prog='game.py')
     >>> parser.add_argument('move', choices=['rock', 'paper', 'scissors'])
     >>> parser.parse_args(['rock'])
     Namespace(move='rock')
     >>> parser.parse_args(['fire'])
     usage: game.py [-h] {rock,paper,scissors}
     game.py: error: argument move: invalid choice: 'fire' (choose from 'rock',
     'paper', 'scissors')

Note that inclusion in the `choices' container is checked after any
*note type: 199b. conversions have been performed, so the type of the
objects in the `choices' container should match the *note type: 199b.
specified:

     >>> parser = argparse.ArgumentParser(prog='doors.py')
     >>> parser.add_argument('door', type=int, choices=range(1, 4))
     >>> print(parser.parse_args(['3']))
     Namespace(door=3)
     >>> parser.parse_args(['4'])
     usage: doors.py [-h] {1,2,3}
     doors.py: error: argument door: invalid choice: 4 (choose from 1, 2, 3)

Any object that supports the ‘in’ operator can be passed as the
`choices' value, so *note dict: 3b0. objects, *note set: 7be. objects,
custom containers, etc.  are all supported.


File: python.info,  Node: required,  Next: help,  Prev: choices,  Up: The add_argument method

5.16.4.26 required
..................

In general, the *note argparse: 6. module assumes that flags like ‘-f’
and ‘--bar’ indicate `optional' arguments, which can always be omitted
at the command line.  To make an option `required', ‘True’ can be
specified for the ‘required=’ keyword argument to *note add_argument():
1987.:

     >>> parser = argparse.ArgumentParser()
     >>> parser.add_argument('--foo', required=True)
     >>> parser.parse_args(['--foo', 'BAR'])
     Namespace(foo='BAR')
     >>> parser.parse_args([])
     usage: argparse.py [-h] [--foo FOO]
     argparse.py: error: option --foo is required

As the example shows, if an option is marked as ‘required’, *note
parse_args(): 1988. will report an error if that option is not present
at the command line.

     Note: Required options are generally considered bad form because
     users expect `options' to be `optional', and thus they should be
     avoided when possible.


File: python.info,  Node: help,  Next: metavar,  Prev: required,  Up: The add_argument method

5.16.4.27 help
..............

The ‘help’ value is a string containing a brief description of the
argument.  When a user requests help (usually by using ‘-h’ or ‘--help’
at the command line), these ‘help’ descriptions will be displayed with
each argument:

     >>> parser = argparse.ArgumentParser(prog='frobble')
     >>> parser.add_argument('--foo', action='store_true',
     ...         help='foo the bars before frobbling')
     >>> parser.add_argument('bar', nargs='+',
     ...         help='one of the bars to be frobbled')
     >>> parser.parse_args(['-h'])
     usage: frobble [-h] [--foo] bar [bar ...]

     positional arguments:
      bar     one of the bars to be frobbled

     optional arguments:
      -h, --help  show this help message and exit
      --foo   foo the bars before frobbling

The ‘help’ strings can include various format specifiers to avoid
repetition of things like the program name or the argument *note
default: 19a5.  The available specifiers include the program name,
‘%(prog)s’ and most keyword arguments to *note add_argument(): 1987,
e.g.  ‘%(default)s’, ‘%(type)s’, etc.:

     >>> parser = argparse.ArgumentParser(prog='frobble')
     >>> parser.add_argument('bar', nargs='?', type=int, default=42,
     ...         help='the bar to %(prog)s (default: %(default)s)')
     >>> parser.print_help()
     usage: frobble [-h] [bar]

     positional arguments:
      bar     the bar to frobble (default: 42)

     optional arguments:
      -h, --help  show this help message and exit

As the help string supports %-formatting, if you want a literal ‘%’ to
appear in the help string, you must escape it as ‘%%’.

*note argparse: 6. supports silencing the help entry for certain
options, by setting the ‘help’ value to ‘argparse.SUPPRESS’:

     >>> parser = argparse.ArgumentParser(prog='frobble')
     >>> parser.add_argument('--foo', help=argparse.SUPPRESS)
     >>> parser.print_help()
     usage: frobble [-h]

     optional arguments:
       -h, --help  show this help message and exit


File: python.info,  Node: metavar,  Next: dest,  Prev: help,  Up: The add_argument method

5.16.4.28 metavar
.................

When *note ArgumentParser: 22f. generates help messages, it needs some
way to refer to each expected argument.  By default, ArgumentParser
objects use the *note dest: 199c. value as the "name" of each object.
By default, for positional argument actions, the *note dest: 199c. value
is used directly, and for optional argument actions, the *note dest:
199c. value is uppercased.  So, a single positional argument with
‘dest='bar'’ will be referred to as ‘bar’.  A single optional argument
‘--foo’ that should be followed by a single command-line argument will
be referred to as ‘FOO’.  An example:

     >>> parser = argparse.ArgumentParser()
     >>> parser.add_argument('--foo')
     >>> parser.add_argument('bar')
     >>> parser.parse_args('X --foo Y'.split())
     Namespace(bar='X', foo='Y')
     >>> parser.print_help()
     usage:  [-h] [--foo FOO] bar

     positional arguments:
      bar

     optional arguments:
      -h, --help  show this help message and exit
      --foo FOO

An alternative name can be specified with ‘metavar’:

     >>> parser = argparse.ArgumentParser()
     >>> parser.add_argument('--foo', metavar='YYY')
     >>> parser.add_argument('bar', metavar='XXX')
     >>> parser.parse_args('X --foo Y'.split())
     Namespace(bar='X', foo='Y')
     >>> parser.print_help()
     usage:  [-h] [--foo YYY] XXX

     positional arguments:
      XXX

     optional arguments:
      -h, --help  show this help message and exit
      --foo YYY

Note that ‘metavar’ only changes the `displayed' name - the name of the
attribute on the *note parse_args(): 1988. object is still determined by
the *note dest: 199c. value.

Different values of ‘nargs’ may cause the metavar to be used multiple
times.  Providing a tuple to ‘metavar’ specifies a different display for
each of the arguments:

     >>> parser = argparse.ArgumentParser(prog='PROG')
     >>> parser.add_argument('-x', nargs=2)
     >>> parser.add_argument('--foo', nargs=2, metavar=('bar', 'baz'))
     >>> parser.print_help()
     usage: PROG [-h] [-x X X] [--foo bar baz]

     optional arguments:
      -h, --help     show this help message and exit
      -x X X
      --foo bar baz


File: python.info,  Node: dest,  Next: Action classes,  Prev: metavar,  Up: The add_argument method

5.16.4.29 dest
..............

Most *note ArgumentParser: 22f. actions add some value as an attribute
of the object returned by *note parse_args(): 1988.  The name of this
attribute is determined by the ‘dest’ keyword argument of *note
add_argument(): 1987.  For positional argument actions, ‘dest’ is
normally supplied as the first argument to *note add_argument(): 1987.:

     >>> parser = argparse.ArgumentParser()
     >>> parser.add_argument('bar')
     >>> parser.parse_args(['XXX'])
     Namespace(bar='XXX')

For optional argument actions, the value of ‘dest’ is normally inferred
from the option strings.  *note ArgumentParser: 22f. generates the value
of ‘dest’ by taking the first long option string and stripping away the
initial ‘--’ string.  If no long option strings were supplied, ‘dest’
will be derived from the first short option string by stripping the
initial ‘-’ character.  Any internal ‘-’ characters will be converted to
‘_’ characters to make sure the string is a valid attribute name.  The
examples below illustrate this behavior:

     >>> parser = argparse.ArgumentParser()
     >>> parser.add_argument('-f', '--foo-bar', '--foo')
     >>> parser.add_argument('-x', '-y')
     >>> parser.parse_args('-f 1 -x 2'.split())
     Namespace(foo_bar='1', x='2')
     >>> parser.parse_args('--foo 1 -y 2'.split())
     Namespace(foo_bar='1', x='2')

‘dest’ allows a custom attribute name to be provided:

     >>> parser = argparse.ArgumentParser()
     >>> parser.add_argument('--foo', dest='bar')
     >>> parser.parse_args('--foo XXX'.split())
     Namespace(bar='XXX')


File: python.info,  Node: Action classes,  Prev: dest,  Up: The add_argument method

5.16.4.30 Action classes
........................

Action classes implement the Action API, a callable which returns a
callable which processes arguments from the command-line.  Any object
which follows this API may be passed as the ‘action’ parameter to
‘add_argument()’.

 -- Class: argparse.Action (option_strings, dest, nargs=None,
          const=None, default=None, type=None, choices=None,
          required=False, help=None, metavar=None)

Action objects are used by an ArgumentParser to represent the
information needed to parse a single argument from one or more strings
from the command line.  The Action class must accept the two positional
arguments plus any keyword arguments passed to *note
ArgumentParser.add_argument(): 1987. except for the ‘action’ itself.

Instances of Action (or return value of any callable to the ‘action’
parameter) should have attributes "dest", "option_strings", "default",
"type", "required", "help", etc.  defined.  The easiest way to ensure
these attributes are defined is to call ‘Action.__init__’.

Action instances should be callable, so subclasses must override the
‘__call__’ method, which should accept four parameters:

   * ‘parser’ - The ArgumentParser object which contains this action.

   * ‘namespace’ - The *note Namespace: 198a. object that will be
     returned by *note parse_args(): 1988.  Most actions add an
     attribute to this object using *note setattr(): f90.

   * ‘values’ - The associated command-line arguments, with any type
     conversions applied.  Type conversions are specified with the *note
     type: 199b. keyword argument to *note add_argument(): 1987.

   * ‘option_string’ - The option string that was used to invoke this
     action.  The ‘option_string’ argument is optional, and will be
     absent if the action is associated with a positional argument.

The ‘__call__’ method may perform arbitrary actions, but will typically
set attributes on the ‘namespace’ based on ‘dest’ and ‘values’.


File: python.info,  Node: The parse_args method,  Next: Other utilities,  Prev: The add_argument method,  Up: argparse --- Parser for command-line options arguments and sub-commands

5.16.4.31 The parse_args() method
.................................

 -- Method: ArgumentParser.parse_args (args=None, namespace=None)

     Convert argument strings to objects and assign them as attributes
     of the namespace.  Return the populated namespace.

     Previous calls to *note add_argument(): 1987. determine exactly
     what objects are created and how they are assigned.  See the
     documentation for *note add_argument(): 1987. for details.

     By default, the argument strings are taken from *note sys.argv:
     85c, and a new empty *note Namespace: 198a. object is created for
     the attributes.

* Menu:

* Option value syntax:: 
* Invalid arguments:: 
* Arguments containing -:: 
* Argument abbreviations (prefix matching): Argument abbreviations prefix matching. 
* Beyond sys.argv: Beyond sys argv. 
* The Namespace object:: 


File: python.info,  Node: Option value syntax,  Next: Invalid arguments,  Up: The parse_args method

5.16.4.32 Option value syntax
.............................

The *note parse_args(): 1988. method supports several ways of specifying
the value of an option (if it takes one).  In the simplest case, the
option and its value are passed as two separate arguments:

     >>> parser = argparse.ArgumentParser(prog='PROG')
     >>> parser.add_argument('-x')
     >>> parser.add_argument('--foo')
     >>> parser.parse_args(['-x', 'X'])
     Namespace(foo=None, x='X')
     >>> parser.parse_args(['--foo', 'FOO'])
     Namespace(foo='FOO', x=None)

For long options (options with names longer than a single character),
the option and value can also be passed as a single command-line
argument, using ‘=’ to separate them:

     >>> parser.parse_args(['--foo=FOO'])
     Namespace(foo='FOO', x=None)

For short options (options only one character long), the option and its
value can be concatenated:

     >>> parser.parse_args(['-xX'])
     Namespace(foo=None, x='X')

Several short options can be joined together, using only a single ‘-’
prefix, as long as only the last option (or none of them) requires a
value:

     >>> parser = argparse.ArgumentParser(prog='PROG')
     >>> parser.add_argument('-x', action='store_true')
     >>> parser.add_argument('-y', action='store_true')
     >>> parser.add_argument('-z')
     >>> parser.parse_args(['-xyzZ'])
     Namespace(x=True, y=True, z='Z')


File: python.info,  Node: Invalid arguments,  Next: Arguments containing -,  Prev: Option value syntax,  Up: The parse_args method

5.16.4.33 Invalid arguments
...........................

While parsing the command line, *note parse_args(): 1988. checks for a
variety of errors, including ambiguous options, invalid types, invalid
options, wrong number of positional arguments, etc.  When it encounters
such an error, it exits and prints the error along with a usage message:

     >>> parser = argparse.ArgumentParser(prog='PROG')
     >>> parser.add_argument('--foo', type=int)
     >>> parser.add_argument('bar', nargs='?')

     >>> # invalid type
     >>> parser.parse_args(['--foo', 'spam'])
     usage: PROG [-h] [--foo FOO] [bar]
     PROG: error: argument --foo: invalid int value: 'spam'

     >>> # invalid option
     >>> parser.parse_args(['--bar'])
     usage: PROG [-h] [--foo FOO] [bar]
     PROG: error: no such option: --bar

     >>> # wrong number of arguments
     >>> parser.parse_args(['spam', 'badger'])
     usage: PROG [-h] [--foo FOO] [bar]
     PROG: error: extra arguments found: badger


File: python.info,  Node: Arguments containing -,  Next: Argument abbreviations prefix matching,  Prev: Invalid arguments,  Up: The parse_args method

5.16.4.34 Arguments containing ‘-’
..................................

The *note parse_args(): 1988. method attempts to give errors whenever
the user has clearly made a mistake, but some situations are inherently
ambiguous.  For example, the command-line argument ‘-1’ could either be
an attempt to specify an option or an attempt to provide a positional
argument.  The *note parse_args(): 1988. method is cautious here:
positional arguments may only begin with ‘-’ if they look like negative
numbers and there are no options in the parser that look like negative
numbers:

     >>> parser = argparse.ArgumentParser(prog='PROG')
     >>> parser.add_argument('-x')
     >>> parser.add_argument('foo', nargs='?')

     >>> # no negative number options, so -1 is a positional argument
     >>> parser.parse_args(['-x', '-1'])
     Namespace(foo=None, x='-1')

     >>> # no negative number options, so -1 and -5 are positional arguments
     >>> parser.parse_args(['-x', '-1', '-5'])
     Namespace(foo='-5', x='-1')

     >>> parser = argparse.ArgumentParser(prog='PROG')
     >>> parser.add_argument('-1', dest='one')
     >>> parser.add_argument('foo', nargs='?')

     >>> # negative number options present, so -1 is an option
     >>> parser.parse_args(['-1', 'X'])
     Namespace(foo=None, one='X')

     >>> # negative number options present, so -2 is an option
     >>> parser.parse_args(['-2'])
     usage: PROG [-h] [-1 ONE] [foo]
     PROG: error: no such option: -2

     >>> # negative number options present, so both -1s are options
     >>> parser.parse_args(['-1', '-1'])
     usage: PROG [-h] [-1 ONE] [foo]
     PROG: error: argument -1: expected one argument

If you have positional arguments that must begin with ‘-’ and don’t look
like negative numbers, you can insert the pseudo-argument ‘'--'’ which
tells *note parse_args(): 1988. that everything after that is a
positional argument:

     >>> parser.parse_args(['--', '-f'])
     Namespace(foo='-f', one=None)


File: python.info,  Node: Argument abbreviations prefix matching,  Next: Beyond sys argv,  Prev: Arguments containing -,  Up: The parse_args method

5.16.4.35 Argument abbreviations (prefix matching)
..................................................

The *note parse_args(): 1988. method *note by default: 231. allows long
options to be abbreviated to a prefix, if the abbreviation is
unambiguous (the prefix matches a unique option):

     >>> parser = argparse.ArgumentParser(prog='PROG')
     >>> parser.add_argument('-bacon')
     >>> parser.add_argument('-badger')
     >>> parser.parse_args('-bac MMM'.split())
     Namespace(bacon='MMM', badger=None)
     >>> parser.parse_args('-bad WOOD'.split())
     Namespace(bacon=None, badger='WOOD')
     >>> parser.parse_args('-ba BA'.split())
     usage: PROG [-h] [-bacon BACON] [-badger BADGER]
     PROG: error: ambiguous option: -ba could match -badger, -bacon

An error is produced for arguments that could produce more than one
options.  This feature can be disabled by setting *note allow_abbrev:
231. to ‘False’.


File: python.info,  Node: Beyond sys argv,  Next: The Namespace object,  Prev: Argument abbreviations prefix matching,  Up: The parse_args method

5.16.4.36 Beyond ‘sys.argv’
...........................

Sometimes it may be useful to have an ArgumentParser parse arguments
other than those of *note sys.argv: 85c.  This can be accomplished by
passing a list of strings to *note parse_args(): 1988.  This is useful
for testing at the interactive prompt:

     >>> parser = argparse.ArgumentParser()
     >>> parser.add_argument(
     ...     'integers', metavar='int', type=int, choices=range(10),
     ...  nargs='+', help='an integer in the range 0..9')
     >>> parser.add_argument(
     ...     '--sum', dest='accumulate', action='store_const', const=sum,
     ...   default=max, help='sum the integers (default: find the max)')
     >>> parser.parse_args(['1', '2', '3', '4'])
     Namespace(accumulate=<built-in function max>, integers=[1, 2, 3, 4])
     >>> parser.parse_args(['1', '2', '3', '4', '--sum'])
     Namespace(accumulate=<built-in function sum>, integers=[1, 2, 3, 4])


File: python.info,  Node: The Namespace object,  Prev: Beyond sys argv,  Up: The parse_args method

5.16.4.37 The Namespace object
..............................

 -- Class: argparse.Namespace

     Simple class used by default by *note parse_args(): 1988. to create
     an object holding attributes and return it.

This class is deliberately simple, just an *note object: 5cb. subclass
with a readable string representation.  If you prefer to have dict-like
view of the attributes, you can use the standard Python idiom, *note
vars(): c5a.:

     >>> parser = argparse.ArgumentParser()
     >>> parser.add_argument('--foo')
     >>> args = parser.parse_args(['--foo', 'BAR'])
     >>> vars(args)
     {'foo': 'BAR'}

It may also be useful to have an *note ArgumentParser: 22f. assign
attributes to an already existing object, rather than a new *note
Namespace: 198a. object.  This can be achieved by specifying the
‘namespace=’ keyword argument:

     >>> class C:
     ...     pass
     ...
     >>> c = C()
     >>> parser = argparse.ArgumentParser()
     >>> parser.add_argument('--foo')
     >>> parser.parse_args(args=['--foo', 'BAR'], namespace=c)
     >>> c.foo
     'BAR'


File: python.info,  Node: Other utilities,  Next: Upgrading optparse code,  Prev: The parse_args method,  Up: argparse --- Parser for command-line options arguments and sub-commands

5.16.4.38 Other utilities
.........................

* Menu:

* Sub-commands:: 
* FileType objects:: 
* Argument groups:: 
* Mutual exclusion:: 
* Parser defaults:: 
* Printing help:: 
* Partial parsing:: 
* Customizing file parsing:: 
* Exiting methods:: 


File: python.info,  Node: Sub-commands,  Next: FileType objects,  Up: Other utilities

5.16.4.39 Sub-commands
......................

 -- Method: ArgumentParser.add_subparsers ([title][, description][,
          prog][, parser_class][, action][, option_string][, dest][,
          help][, metavar])

     Many programs split up their functionality into a number of
     sub-commands, for example, the ‘svn’ program can invoke
     sub-commands like ‘svn checkout’, ‘svn update’, and ‘svn commit’.
     Splitting up functionality this way can be a particularly good idea
     when a program performs several different functions which require
     different kinds of command-line arguments.  *note ArgumentParser:
     22f. supports the creation of such sub-commands with the *note
     add_subparsers(): 19b5. method.  The *note add_subparsers(): 19b5.
     method is normally called with no arguments and returns a special
     action object.  This object has a single method, ‘add_parser()’,
     which takes a command name and any *note ArgumentParser: 22f.
     constructor arguments, and returns an *note ArgumentParser: 22f.
     object that can be modified as usual.

     Description of parameters:

        * title - title for the sub-parser group in help output; by
          default "subcommands" if description is provided, otherwise
          uses title for positional arguments

        * description - description for the sub-parser group in help
          output, by default None

        * prog - usage information that will be displayed with
          sub-command help, by default the name of the program and any
          positional arguments before the subparser argument

        * parser_class - class which will be used to create sub-parser
          instances, by default the class of the current parser (e.g.
          ArgumentParser)

        * *note action: 19a2. - the basic type of action to be taken
          when this argument is encountered at the command line

        * *note dest: 199c. - name of the attribute under which
          sub-command name will be stored; by default None and no value
          is stored

        * *note help: 19a8. - help for sub-parser group in help output,
          by default None

        * *note metavar: 19a9. - string presenting available
          sub-commands in help; by default it is None and presents
          sub-commands in form {cmd1, cmd2, ..}

     Some example usage:

          >>> # create the top-level parser
          >>> parser = argparse.ArgumentParser(prog='PROG')
          >>> parser.add_argument('--foo', action='store_true', help='foo help')
          >>> subparsers = parser.add_subparsers(help='sub-command help')
          >>>
          >>> # create the parser for the "a" command
          >>> parser_a = subparsers.add_parser('a', help='a help')
          >>> parser_a.add_argument('bar', type=int, help='bar help')
          >>>
          >>> # create the parser for the "b" command
          >>> parser_b = subparsers.add_parser('b', help='b help')
          >>> parser_b.add_argument('--baz', choices='XYZ', help='baz help')
          >>>
          >>> # parse some argument lists
          >>> parser.parse_args(['a', '12'])
          Namespace(bar=12, foo=False)
          >>> parser.parse_args(['--foo', 'b', '--baz', 'Z'])
          Namespace(baz='Z', foo=True)

     Note that the object returned by *note parse_args(): 1988. will
     only contain attributes for the main parser and the subparser that
     was selected by the command line (and not any other subparsers).
     So in the example above, when the ‘a’ command is specified, only
     the ‘foo’ and ‘bar’ attributes are present, and when the ‘b’
     command is specified, only the ‘foo’ and ‘baz’ attributes are
     present.

     Similarly, when a help message is requested from a subparser, only
     the help for that particular parser will be printed.  The help
     message will not include parent parser or sibling parser messages.
     (A help message for each subparser command, however, can be given
     by supplying the ‘help=’ argument to ‘add_parser()’ as above.)

          >>> parser.parse_args(['--help'])
          usage: PROG [-h] [--foo] {a,b} ...

          positional arguments:
            {a,b}   sub-command help
              a     a help
              b     b help

          optional arguments:
            -h, --help  show this help message and exit
            --foo   foo help

          >>> parser.parse_args(['a', '--help'])
          usage: PROG a [-h] bar

          positional arguments:
            bar     bar help

          optional arguments:
            -h, --help  show this help message and exit

          >>> parser.parse_args(['b', '--help'])
          usage: PROG b [-h] [--baz {X,Y,Z}]

          optional arguments:
            -h, --help     show this help message and exit
            --baz {X,Y,Z}  baz help

     The *note add_subparsers(): 19b5. method also supports ‘title’ and
     ‘description’ keyword arguments.  When either is present, the
     subparser’s commands will appear in their own group in the help
     output.  For example:

          >>> parser = argparse.ArgumentParser()
          >>> subparsers = parser.add_subparsers(title='subcommands',
          ...                                    description='valid subcommands',
          ...                                    help='additional help')
          >>> subparsers.add_parser('foo')
          >>> subparsers.add_parser('bar')
          >>> parser.parse_args(['-h'])
          usage:  [-h] {foo,bar} ...

          optional arguments:
            -h, --help  show this help message and exit

          subcommands:
            valid subcommands

            {foo,bar}   additional help

     Furthermore, ‘add_parser’ supports an additional ‘aliases’
     argument, which allows multiple strings to refer to the same
     subparser.  This example, like ‘svn’, aliases ‘co’ as a shorthand
     for ‘checkout’:

          >>> parser = argparse.ArgumentParser()
          >>> subparsers = parser.add_subparsers()
          >>> checkout = subparsers.add_parser('checkout', aliases=['co'])
          >>> checkout.add_argument('foo')
          >>> parser.parse_args(['co', 'bar'])
          Namespace(foo='bar')

     One particularly effective way of handling sub-commands is to
     combine the use of the *note add_subparsers(): 19b5. method with
     calls to *note set_defaults(): 199e. so that each subparser knows
     which Python function it should execute.  For example:

          >>> # sub-command functions
          >>> def foo(args):
          ...     print(args.x * args.y)
          ...
          >>> def bar(args):
          ...     print('((%s))' % args.z)
          ...
          >>> # create the top-level parser
          >>> parser = argparse.ArgumentParser()
          >>> subparsers = parser.add_subparsers()
          >>>
          >>> # create the parser for the "foo" command
          >>> parser_foo = subparsers.add_parser('foo')
          >>> parser_foo.add_argument('-x', type=int, default=1)
          >>> parser_foo.add_argument('y', type=float)
          >>> parser_foo.set_defaults(func=foo)
          >>>
          >>> # create the parser for the "bar" command
          >>> parser_bar = subparsers.add_parser('bar')
          >>> parser_bar.add_argument('z')
          >>> parser_bar.set_defaults(func=bar)
          >>>
          >>> # parse the args and call whatever function was selected
          >>> args = parser.parse_args('foo 1 -x 2'.split())
          >>> args.func(args)
          2.0
          >>>
          >>> # parse the args and call whatever function was selected
          >>> args = parser.parse_args('bar XYZYX'.split())
          >>> args.func(args)
          ((XYZYX))

     This way, you can let *note parse_args(): 1988. do the job of
     calling the appropriate function after argument parsing is
     complete.  Associating functions with actions like this is
     typically the easiest way to handle the different actions for each
     of your subparsers.  However, if it is necessary to check the name
     of the subparser that was invoked, the ‘dest’ keyword argument to
     the *note add_subparsers(): 19b5. call will work:

          >>> parser = argparse.ArgumentParser()
          >>> subparsers = parser.add_subparsers(dest='subparser_name')
          >>> subparser1 = subparsers.add_parser('1')
          >>> subparser1.add_argument('-x')
          >>> subparser2 = subparsers.add_parser('2')
          >>> subparser2.add_argument('y')
          >>> parser.parse_args(['2', 'frobble'])
          Namespace(subparser_name='2', y='frobble')


File: python.info,  Node: FileType objects,  Next: Argument groups,  Prev: Sub-commands,  Up: Other utilities

5.16.4.40 FileType objects
..........................

 -- Class: argparse.FileType (mode='r', bufsize=-1, encoding=None,
          errors=None)

     The *note FileType: 411. factory creates objects that can be passed
     to the type argument of *note ArgumentParser.add_argument(): 1987.
     Arguments that have *note FileType: 411. objects as their type will
     open command-line arguments as files with the requested modes,
     buffer sizes, encodings and error handling (see the *note open():
     1e8. function for more details):

          >>> parser = argparse.ArgumentParser()
          >>> parser.add_argument('--raw', type=argparse.FileType('wb', 0))
          >>> parser.add_argument('out', type=argparse.FileType('w', encoding='UTF-8'))
          >>> parser.parse_args(['--raw', 'raw.dat', 'file.txt'])
          Namespace(out=<_io.TextIOWrapper name='file.txt' mode='w' encoding='UTF-8'>, raw=<_io.FileIO name='raw.dat' mode='wb'>)

     FileType objects understand the pseudo-argument ‘'-'’ and
     automatically convert this into ‘sys.stdin’ for readable *note
     FileType: 411. objects and ‘sys.stdout’ for writable *note
     FileType: 411. objects:

          >>> parser = argparse.ArgumentParser()
          >>> parser.add_argument('infile', type=argparse.FileType('r'))
          >>> parser.parse_args(['-'])
          Namespace(infile=<_io.TextIOWrapper name='<stdin>' encoding='UTF-8'>)

     New in version 3.4: The `encodings' and `errors' keyword arguments.


File: python.info,  Node: Argument groups,  Next: Mutual exclusion,  Prev: FileType objects,  Up: Other utilities

5.16.4.41 Argument groups
.........................

 -- Method: ArgumentParser.add_argument_group (title=None,
          description=None)

     By default, *note ArgumentParser: 22f. groups command-line
     arguments into "positional arguments" and "optional arguments" when
     displaying help messages.  When there is a better conceptual
     grouping of arguments than this default one, appropriate groups can
     be created using the *note add_argument_group(): 19b8. method:

          >>> parser = argparse.ArgumentParser(prog='PROG', add_help=False)
          >>> group = parser.add_argument_group('group')
          >>> group.add_argument('--foo', help='foo help')
          >>> group.add_argument('bar', help='bar help')
          >>> parser.print_help()
          usage: PROG [--foo FOO] bar

          group:
            bar    bar help
            --foo FOO  foo help

     The *note add_argument_group(): 19b8. method returns an argument
     group object which has an *note add_argument(): 1987. method just
     like a regular *note ArgumentParser: 22f.  When an argument is
     added to the group, the parser treats it just like a normal
     argument, but displays the argument in a separate group for help
     messages.  The *note add_argument_group(): 19b8. method accepts
     `title' and `description' arguments which can be used to customize
     this display:

          >>> parser = argparse.ArgumentParser(prog='PROG', add_help=False)
          >>> group1 = parser.add_argument_group('group1', 'group1 description')
          >>> group1.add_argument('foo', help='foo help')
          >>> group2 = parser.add_argument_group('group2', 'group2 description')
          >>> group2.add_argument('--bar', help='bar help')
          >>> parser.print_help()
          usage: PROG [--bar BAR] foo

          group1:
            group1 description

            foo    foo help

          group2:
            group2 description

            --bar BAR  bar help

     Note that any arguments not in your user-defined groups will end up
     back in the usual "positional arguments" and "optional arguments"
     sections.


File: python.info,  Node: Mutual exclusion,  Next: Parser defaults,  Prev: Argument groups,  Up: Other utilities

5.16.4.42 Mutual exclusion
..........................

 -- Method: ArgumentParser.add_mutually_exclusive_group (required=False)

     Create a mutually exclusive group.  *note argparse: 6. will make
     sure that only one of the arguments in the mutually exclusive group
     was present on the command line:

          >>> parser = argparse.ArgumentParser(prog='PROG')
          >>> group = parser.add_mutually_exclusive_group()
          >>> group.add_argument('--foo', action='store_true')
          >>> group.add_argument('--bar', action='store_false')
          >>> parser.parse_args(['--foo'])
          Namespace(bar=True, foo=True)
          >>> parser.parse_args(['--bar'])
          Namespace(bar=False, foo=False)
          >>> parser.parse_args(['--foo', '--bar'])
          usage: PROG [-h] [--foo | --bar]
          PROG: error: argument --bar: not allowed with argument --foo

     The *note add_mutually_exclusive_group(): 19ba. method also accepts
     a `required' argument, to indicate that at least one of the
     mutually exclusive arguments is required:

          >>> parser = argparse.ArgumentParser(prog='PROG')
          >>> group = parser.add_mutually_exclusive_group(required=True)
          >>> group.add_argument('--foo', action='store_true')
          >>> group.add_argument('--bar', action='store_false')
          >>> parser.parse_args([])
          usage: PROG [-h] (--foo | --bar)
          PROG: error: one of the arguments --foo --bar is required

     Note that currently mutually exclusive argument groups do not
     support the `title' and `description' arguments of *note
     add_argument_group(): 19b8.


File: python.info,  Node: Parser defaults,  Next: Printing help,  Prev: Mutual exclusion,  Up: Other utilities

5.16.4.43 Parser defaults
.........................

 -- Method: ArgumentParser.set_defaults (**kwargs)

     Most of the time, the attributes of the object returned by *note
     parse_args(): 1988. will be fully determined by inspecting the
     command-line arguments and the argument actions.  *note
     set_defaults(): 199e. allows some additional attributes that are
     determined without any inspection of the command line to be added:

          >>> parser = argparse.ArgumentParser()
          >>> parser.add_argument('foo', type=int)
          >>> parser.set_defaults(bar=42, baz='badger')
          >>> parser.parse_args(['736'])
          Namespace(bar=42, baz='badger', foo=736)

     Note that parser-level defaults always override argument-level
     defaults:

          >>> parser = argparse.ArgumentParser()
          >>> parser.add_argument('--foo', default='bar')
          >>> parser.set_defaults(foo='spam')
          >>> parser.parse_args([])
          Namespace(foo='spam')

     Parser-level defaults can be particularly useful when working with
     multiple parsers.  See the *note add_subparsers(): 19b5. method for
     an example of this type.

 -- Method: ArgumentParser.get_default (dest)

     Get the default value for a namespace attribute, as set by either
     *note add_argument(): 1987. or by *note set_defaults(): 199e.:

          >>> parser = argparse.ArgumentParser()
          >>> parser.add_argument('--foo', default='badger')
          >>> parser.get_default('foo')
          'badger'


File: python.info,  Node: Printing help,  Next: Partial parsing,  Prev: Parser defaults,  Up: Other utilities

5.16.4.44 Printing help
.......................

In most typical applications, *note parse_args(): 1988. will take care
of formatting and printing any usage or error messages.  However,
several formatting methods are available:

 -- Method: ArgumentParser.print_usage (file=None)

     Print a brief description of how the *note ArgumentParser: 22f.
     should be invoked on the command line.  If `file' is ‘None’, *note
     sys.stdout: 1ba. is assumed.

 -- Method: ArgumentParser.print_help (file=None)

     Print a help message, including the program usage and information
     about the arguments registered with the *note ArgumentParser: 22f.
     If `file' is ‘None’, *note sys.stdout: 1ba. is assumed.

There are also variants of these methods that simply return a string
instead of printing it:

 -- Method: ArgumentParser.format_usage ()

     Return a string containing a brief description of how the *note
     ArgumentParser: 22f. should be invoked on the command line.

 -- Method: ArgumentParser.format_help ()

     Return a string containing a help message, including the program
     usage and information about the arguments registered with the *note
     ArgumentParser: 22f.


File: python.info,  Node: Partial parsing,  Next: Customizing file parsing,  Prev: Printing help,  Up: Other utilities

5.16.4.45 Partial parsing
.........................

 -- Method: ArgumentParser.parse_known_args (args=None, namespace=None)

Sometimes a script may only parse a few of the command-line arguments,
passing the remaining arguments on to another script or program.  In
these cases, the *note parse_known_args(): 19c3. method can be useful.
It works much like *note parse_args(): 1988. except that it does not
produce an error when extra arguments are present.  Instead, it returns
a two item tuple containing the populated namespace and the list of
remaining argument strings.

     >>> parser = argparse.ArgumentParser()
     >>> parser.add_argument('--foo', action='store_true')
     >>> parser.add_argument('bar')
     >>> parser.parse_known_args(['--foo', '--badger', 'BAR', 'spam'])
     (Namespace(bar='BAR', foo=True), ['--badger', 'spam'])

     Warning: *note Prefix matching: 230. rules apply to
     ‘parse_known_args()’.  The parser may consume an option even if
     it’s just a prefix of one of its known options, instead of leaving
     it in the remaining arguments list.


File: python.info,  Node: Customizing file parsing,  Next: Exiting methods,  Prev: Partial parsing,  Up: Other utilities

5.16.4.46 Customizing file parsing
..................................

 -- Method: ArgumentParser.convert_arg_line_to_args (arg_line)

     Arguments that are read from a file (see the
     `fromfile_prefix_chars' keyword argument to the *note
     ArgumentParser: 22f. constructor) are read one argument per line.
     *note convert_arg_line_to_args(): 199d. can be overridden for
     fancier reading.

     This method takes a single argument `arg_line' which is a string
     read from the argument file.  It returns a list of arguments parsed
     from this string.  The method is called once per line read from the
     argument file, in order.

     A useful override of this method is one that treats each
     space-separated word as an argument:

          def convert_arg_line_to_args(self, arg_line):
              return arg_line.split()


File: python.info,  Node: Exiting methods,  Prev: Customizing file parsing,  Up: Other utilities

5.16.4.47 Exiting methods
.........................

 -- Method: ArgumentParser.exit (status=0, message=None)

     This method terminates the program, exiting with the specified
     `status' and, if given, it prints a `message' before that.

 -- Method: ArgumentParser.error (message)

     This method prints a usage message including the `message' to the
     standard error and terminates the program with a status code of 2.


File: python.info,  Node: Upgrading optparse code,  Prev: Other utilities,  Up: argparse --- Parser for command-line options arguments and sub-commands

5.16.4.48 Upgrading optparse code
.................................

Originally, the *note argparse: 6. module had attempted to maintain
compatibility with *note optparse: c1.  However, *note optparse: c1. was
difficult to extend transparently, particularly with the changes
required to support the new ‘nargs=’ specifiers and better usage
messages.  When most everything in *note optparse: c1. had either been
copy-pasted over or monkey-patched, it no longer seemed practical to try
to maintain the backwards compatibility.

The *note argparse: 6. module improves on the standard library *note
optparse: c1. module in a number of ways including:

   * Handling positional arguments.

   * Supporting sub-commands.

   * Allowing alternative option prefixes like ‘+’ and ‘/’.

   * Handling zero-or-more and one-or-more style arguments.

   * Producing more informative usage messages.

   * Providing a much simpler interface for custom ‘type’ and ‘action’.

A partial upgrade path from *note optparse: c1. to *note argparse: 6.:

   * Replace all *note optparse.OptionParser.add_option(): 19c9. calls
     with *note ArgumentParser.add_argument(): 1987. calls.

   * Replace ‘(options, args) = parser.parse_args()’ with ‘args =
     parser.parse_args()’ and add additional *note
     ArgumentParser.add_argument(): 1987. calls for the positional
     arguments.  Keep in mind that what was previously called ‘options’,
     now in *note argparse: 6. context is called ‘args’.

   * Replace callback actions and the ‘callback_*’ keyword arguments
     with ‘type’ or ‘action’ arguments.

   * Replace string names for ‘type’ keyword arguments with the
     corresponding type objects (e.g.  int, float, complex, etc).

   * Replace ‘optparse.Values’ with *note Namespace: 198a. and
     ‘optparse.OptionError’ and ‘optparse.OptionValueError’ with
     ‘ArgumentError’.

   * Replace strings with implicit arguments such as ‘%default’ or
     ‘%prog’ with the standard Python syntax to use dictionaries to
     format strings, that is, ‘%(default)s’ and ‘%(prog)s’.

   * Replace the OptionParser constructor ‘version’ argument with a call
     to ‘parser.add_argument('--version', action='version',
     version='<the version>')’.


File: python.info,  Node: getopt --- C-style parser for command line options,  Next: logging --- Logging facility for Python,  Prev: argparse --- Parser for command-line options arguments and sub-commands,  Up: Generic Operating System Services

5.16.5 ‘getopt’ — C-style parser for command line options
---------------------------------------------------------

`Source code:' Lib/getopt.py(1)

__________________________________________________________________

     Note: The *note getopt: 86. module is a parser for command line
     options whose API is designed to be familiar to users of the C
     ‘getopt()’ function.  Users who are unfamiliar with the C
     ‘getopt()’ function or who would like to write less code and get
     better help and error messages should consider using the *note
     argparse: 6. module instead.

This module helps scripts to parse the command line arguments in
‘sys.argv’.  It supports the same conventions as the Unix ‘getopt()’
function (including the special meanings of arguments of the form ’‘-’’
and ’‘--’’).  Long options similar to those supported by GNU software
may be used as well via an optional third argument.

This module provides two functions and an exception:

 -- Function: getopt.getopt (args, shortopts, longopts=[])

     Parses command line options and parameter list.  `args' is the
     argument list to be parsed, without the leading reference to the
     running program.  Typically, this means ‘sys.argv[1:]’.
     `shortopts' is the string of option letters that the script wants
     to recognize, with options that require an argument followed by a
     colon (‘':'’; i.e., the same format that Unix ‘getopt()’ uses).

          Note: Unlike GNU ‘getopt()’, after a non-option argument, all
          further arguments are considered also non-options.  This is
          similar to the way non-GNU Unix systems work.

     `longopts', if specified, must be a list of strings with the names
     of the long options which should be supported.  The leading ‘'--'’
     characters should not be included in the option name.  Long options
     which require an argument should be followed by an equal sign
     (‘'='’).  Optional arguments are not supported.  To accept only
     long options, `shortopts' should be an empty string.  Long options
     on the command line can be recognized so long as they provide a
     prefix of the option name that matches exactly one of the accepted
     options.  For example, if `longopts' is ‘['foo', 'frob']’, the
     option ‘--fo’ will match as ‘--foo’, but ‘--f’ will not match
     uniquely, so *note GetoptError: 19cd. will be raised.

     The return value consists of two elements: the first is a list of
     ‘(option, value)’ pairs; the second is the list of program
     arguments left after the option list was stripped (this is a
     trailing slice of `args').  Each option-and-value pair returned has
     the option as its first element, prefixed with a hyphen for short
     options (e.g., ‘'-x'’) or two hyphens for long options (e.g.,
     ‘'--long-option'’), and the option argument as its second element,
     or an empty string if the option has no argument.  The options
     occur in the list in the same order in which they were found, thus
     allowing multiple occurrences.  Long and short options may be
     mixed.

 -- Function: getopt.gnu_getopt (args, shortopts, longopts=[])

     This function works like *note getopt(): 86, except that GNU style
     scanning mode is used by default.  This means that option and
     non-option arguments may be intermixed.  The *note getopt(): 86.
     function stops processing options as soon as a non-option argument
     is encountered.

     If the first character of the option string is ‘'+'’, or if the
     environment variable ‘POSIXLY_CORRECT’ is set, then option
     processing stops as soon as a non-option argument is encountered.

 -- Exception: getopt.GetoptError

     This is raised when an unrecognized option is found in the argument
     list or when an option requiring an argument is given none.  The
     argument to the exception is a string indicating the cause of the
     error.  For long options, an argument given to an option which does
     not require one will also cause this exception to be raised.  The
     attributes ‘msg’ and ‘opt’ give the error message and related
     option; if there is no specific option to which the exception
     relates, ‘opt’ is an empty string.

 -- Exception: getopt.error

     Alias for *note GetoptError: 19cd.; for backward compatibility.

An example using only Unix style options:

     >>> import getopt
     >>> args = '-a -b -cfoo -d bar a1 a2'.split()
     >>> args
     ['-a', '-b', '-cfoo', '-d', 'bar', 'a1', 'a2']
     >>> optlist, args = getopt.getopt(args, 'abc:d:')
     >>> optlist
     [('-a', ''), ('-b', ''), ('-c', 'foo'), ('-d', 'bar')]
     >>> args
     ['a1', 'a2']

Using long option names is equally easy:

     >>> s = '--condition=foo --testing --output-file abc.def -x a1 a2'
     >>> args = s.split()
     >>> args
     ['--condition=foo', '--testing', '--output-file', 'abc.def', '-x', 'a1', 'a2']
     >>> optlist, args = getopt.getopt(args, 'x', [
     ...     'condition=', 'output-file=', 'testing'])
     >>> optlist
     [('--condition', 'foo'), ('--testing', ''), ('--output-file', 'abc.def'), ('-x', '')]
     >>> args
     ['a1', 'a2']

In a script, typical usage is something like this:

     import getopt, sys

     def main():
         try:
             opts, args = getopt.getopt(sys.argv[1:], "ho:v", ["help", "output="])
         except getopt.GetoptError as err:
             # print help information and exit:
             print(err) # will print something like "option -a not recognized"
             usage()
             sys.exit(2)
         output = None
         verbose = False
         for o, a in opts:
             if o == "-v":
                 verbose = True
             elif o in ("-h", "--help"):
                 usage()
                 sys.exit()
             elif o in ("-o", "--output"):
                 output = a
             else:
                 assert False, "unhandled option"
         # ...

     if __name__ == "__main__":
         main()

Note that an equivalent command line interface could be produced with
less code and more informative help and error messages by using the
*note argparse: 6. module:

     import argparse

     if __name__ == '__main__':
         parser = argparse.ArgumentParser()
         parser.add_argument('-o', '--output')
         parser.add_argument('-v', dest='verbose', action='store_true')
         args = parser.parse_args()
         # ... do something with args.output ...
         # ... do something with args.verbose ..

See also
........

Module *note argparse: 6.

     Alternative command line option and argument parsing library.

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/getopt.py


File: python.info,  Node: logging --- Logging facility for Python,  Next: logging config --- Logging configuration,  Prev: getopt --- C-style parser for command line options,  Up: Generic Operating System Services

5.16.6 ‘logging’ — Logging facility for Python
----------------------------------------------

Important
.........

This page contains the API reference information.  For tutorial
information and discussion of more advanced topics, see

   * *note Basic Tutorial: 7c1.

   * *note Advanced Tutorial: 7c2.

   * *note Logging Cookbook: 7c3.

`Source code:' Lib/logging/__init__.py(1)

__________________________________________________________________

This module defines functions and classes which implement a flexible
event logging system for applications and libraries.

The key benefit of having the logging API provided by a standard library
module is that all Python modules can participate in logging, so your
application log can include your own messages integrated with messages
from third-party modules.

The module provides a lot of functionality and flexibility.  If you are
unfamiliar with logging, the best way to get to grips with it is to see
the tutorials (see the links on the right).

The basic classes defined by the module, together with their functions,
are listed below.

   * Loggers expose the interface that application code directly uses.

   * Handlers send the log records (created by loggers) to the
     appropriate destination.

   * Filters provide a finer grained facility for determining which log
     records to output.

   * Formatters specify the layout of log records in the final output.

* Menu:

* Logger Objects:: 
* Logging Levels:: 
* Handler Objects:: 
* Formatter Objects:: 
* Filter Objects:: 
* LogRecord Objects:: 
* LogRecord attributes:: 
* LoggerAdapter Objects:: 
* Thread Safety:: 
* Module-Level Functions:: 
* Module-Level Attributes:: 
* Integration with the warnings module:: 

   ---------- Footnotes ----------

   (1) 
https://hg.python.org/cpython/file/default/Lib/logging/__init__.py


File: python.info,  Node: Logger Objects,  Next: Logging Levels,  Up: logging --- Logging facility for Python

5.16.6.1 Logger Objects
.......................

Loggers have the following attributes and methods.  Note that Loggers
are never instantiated directly, but always through the module-level
function ‘logging.getLogger(name)’.  Multiple calls to *note
getLogger(): 19d4. with the same name will always return a reference to
the same Logger object.

The ‘name’ is potentially a period-separated hierarchical value, like
‘foo.bar.baz’ (though it could also be just plain ‘foo’, for example).
Loggers that are further down in the hierarchical list are children of
loggers higher up in the list.  For example, given a logger with a name
of ‘foo’, loggers with names of ‘foo.bar’, ‘foo.bar.baz’, and ‘foo.bam’
are all descendants of ‘foo’.  The logger name hierarchy is analogous to
the Python package hierarchy, and identical to it if you organise your
loggers on a per-module basis using the recommended construction
‘logging.getLogger(__name__)’.  That’s because in a module, ‘__name__’
is the module’s name in the Python package namespace.

 -- Class: logging.Logger

 -- Attribute: Logger.propagate

     If this evaluates to true, events logged to this logger will be
     passed to the handlers of higher level (ancestor) loggers, in
     addition to any handlers attached to this logger.  Messages are
     passed directly to the ancestor loggers’ handlers - neither the
     level nor filters of the ancestor loggers in question are
     considered.

     If this evaluates to false, logging messages are not passed to the
     handlers of ancestor loggers.

     The constructor sets this attribute to ‘True’.

          Note: If you attach a handler to a logger `and' one or more of
          its ancestors, it may emit the same record multiple times.  In
          general, you should not need to attach a handler to more than
          one logger - if you just attach it to the appropriate logger
          which is highest in the logger hierarchy, then it will see all
          events logged by all descendant loggers, provided that their
          propagate setting is left set to ‘True’.  A common scenario is
          to attach handlers only to the root logger, and to let
          propagation take care of the rest.

 -- Method: Logger.setLevel (lvl)

     Sets the threshold for this logger to `lvl'.  Logging messages
     which are less severe than `lvl' will be ignored.  When a logger is
     created, the level is set to ‘NOTSET’ (which causes all messages to
     be processed when the logger is the root logger, or delegation to
     the parent when the logger is a non-root logger).  Note that the
     root logger is created with level ‘WARNING’.

     The term ’delegation to the parent’ means that if a logger has a
     level of NOTSET, its chain of ancestor loggers is traversed until
     either an ancestor with a level other than NOTSET is found, or the
     root is reached.

     If an ancestor is found with a level other than NOTSET, then that
     ancestor’s level is treated as the effective level of the logger
     where the ancestor search began, and is used to determine how a
     logging event is handled.

     If the root is reached, and it has a level of NOTSET, then all
     messages will be processed.  Otherwise, the root’s level will be
     used as the effective level.

     See *note Logging Levels: 19d7. for a list of levels.

     Changed in version 3.2: The `lvl' parameter now accepts a string
     representation of the level such as ’INFO’ as an alternative to the
     integer constants such as ‘INFO’.  Note, however, that levels are
     internally stored as integers, and methods such as e.g.  *note
     getEffectiveLevel(): 19d8. and *note isEnabledFor(): 19d9. will
     return/expect to be passed integers.

 -- Method: Logger.isEnabledFor (lvl)

     Indicates if a message of severity `lvl' would be processed by this
     logger.  This method checks first the module-level level set by
     ‘logging.disable(lvl)’ and then the logger’s effective level as
     determined by *note getEffectiveLevel(): 19d8.

 -- Method: Logger.getEffectiveLevel ()

     Indicates the effective level for this logger.  If a value other
     than ‘NOTSET’ has been set using *note setLevel(): 19d6, it is
     returned.  Otherwise, the hierarchy is traversed towards the root
     until a value other than ‘NOTSET’ is found, and that value is
     returned.  The value returned is an integer, typically one of
     ‘logging.DEBUG’, ‘logging.INFO’ etc.

 -- Method: Logger.getChild (suffix)

     Returns a logger which is a descendant to this logger, as
     determined by the suffix.  Thus,
     ‘logging.getLogger('abc').getChild('def.ghi')’ would return the
     same logger as would be returned by
     ‘logging.getLogger('abc.def.ghi')’.  This is a convenience method,
     useful when the parent logger is named using e.g.  ‘__name__’
     rather than a literal string.

     New in version 3.2.

 -- Method: Logger.debug (msg, *args, **kwargs)

     Logs a message with level ‘DEBUG’ on this logger.  The `msg' is the
     message format string, and the `args' are the arguments which are
     merged into `msg' using the string formatting operator.  (Note that
     this means that you can use keywords in the format string, together
     with a single dictionary argument.)

     There are three keyword arguments in `kwargs' which are inspected:
     `exc_info', `stack_info', and `extra'.

     If `exc_info' does not evaluate as false, it causes exception
     information to be added to the logging message.  If an exception
     tuple (in the format returned by *note sys.exc_info(): 8ca.) or an
     exception instance is provided, it is used; otherwise, *note
     sys.exc_info(): 8ca. is called to get the exception information.

     The second optional keyword argument is `stack_info', which
     defaults to ‘False’.  If true, stack information is added to the
     logging message, including the actual logging call.  Note that this
     is not the same stack information as that displayed through
     specifying `exc_info': The former is stack frames from the bottom
     of the stack up to the logging call in the current thread, whereas
     the latter is information about stack frames which have been
     unwound, following an exception, while searching for exception
     handlers.

     You can specify `stack_info' independently of `exc_info', e.g.  to
     just show how you got to a certain point in your code, even when no
     exceptions were raised.  The stack frames are printed following a
     header line which says:

          Stack (most recent call last):

     This mimics the ‘Traceback (most recent call last):’ which is used
     when displaying exception frames.

     The third keyword argument is `extra' which can be used to pass a
     dictionary which is used to populate the __dict__ of the LogRecord
     created for the logging event with user-defined attributes.  These
     custom attributes can then be used as you like.  For example, they
     could be incorporated into logged messages.  For example:

          FORMAT = '%(asctime)-15s %(clientip)s %(user)-8s %(message)s'
          logging.basicConfig(format=FORMAT)
          d = {'clientip': '192.168.0.1', 'user': 'fbloggs'}
          logger = logging.getLogger('tcpserver')
          logger.warning('Protocol problem: %s', 'connection reset', extra=d)

     would print something like

          2006-02-08 22:20:02,165 192.168.0.1 fbloggs  Protocol problem: connection reset

     The keys in the dictionary passed in `extra' should not clash with
     the keys used by the logging system.  (See the *note Formatter:
     19da. documentation for more information on which keys are used by
     the logging system.)

     If you choose to use these attributes in logged messages, you need
     to exercise some care.  In the above example, for instance, the
     *note Formatter: 19da. has been set up with a format string which
     expects ’clientip’ and ’user’ in the attribute dictionary of the
     LogRecord.  If these are missing, the message will not be logged
     because a string formatting exception will occur.  So in this case,
     you always need to pass the `extra' dictionary with these keys.

     While this might be annoying, this feature is intended for use in
     specialized circumstances, such as multi-threaded servers where the
     same code executes in many contexts, and interesting conditions
     which arise are dependent on this context (such as remote client IP
     address and authenticated user name, in the above example).  In
     such circumstances, it is likely that specialized *note Formatter:
     19da.s would be used with particular ‘Handler’s.

     New in version 3.2: The `stack_info' parameter was added.

     Changed in version 3.5: The `exc_info' parameter can now accept
     exception instances.

 -- Method: Logger.info (msg, *args, **kwargs)

     Logs a message with level ‘INFO’ on this logger.  The arguments are
     interpreted as for *note debug(): 19dc.

 -- Method: Logger.warning (msg, *args, **kwargs)

     Logs a message with level ‘WARNING’ on this logger.  The arguments
     are interpreted as for *note debug(): 19dc.

          Note: There is an obsolete method ‘warn’ which is functionally
          identical to ‘warning’.  As ‘warn’ is deprecated, please do
          not use it - use ‘warning’ instead.

 -- Method: Logger.error (msg, *args, **kwargs)

     Logs a message with level ‘ERROR’ on this logger.  The arguments
     are interpreted as for *note debug(): 19dc.

 -- Method: Logger.critical (msg, *args, **kwargs)

     Logs a message with level ‘CRITICAL’ on this logger.  The arguments
     are interpreted as for *note debug(): 19dc.

 -- Method: Logger.log (lvl, msg, *args, **kwargs)

     Logs a message with integer level `lvl' on this logger.  The other
     arguments are interpreted as for *note debug(): 19dc.

 -- Method: Logger.exception (msg, *args, **kwargs)

     Logs a message with level ‘ERROR’ on this logger.  The arguments
     are interpreted as for *note debug(): 19dc.  Exception info is
     added to the logging message.  This method should only be called
     from an exception handler.

 -- Method: Logger.addFilter (filt)

     Adds the specified filter `filt' to this logger.

 -- Method: Logger.removeFilter (filt)

     Removes the specified filter `filt' from this logger.

 -- Method: Logger.filter (record)

     Applies this logger’s filters to the record and returns a true
     value if the record is to be processed.  The filters are consulted
     in turn, until one of them returns a false value.  If none of them
     return a false value, the record will be processed (passed to
     handlers).  If one returns a false value, no further processing of
     the record occurs.

 -- Method: Logger.addHandler (hdlr)

     Adds the specified handler `hdlr' to this logger.

 -- Method: Logger.removeHandler (hdlr)

     Removes the specified handler `hdlr' from this logger.

 -- Method: Logger.findCaller (stack_info=False)

     Finds the caller’s source filename and line number.  Returns the
     filename, line number, function name and stack information as a
     4-element tuple.  The stack information is returned as `None'
     unless `stack_info' is `True'.

 -- Method: Logger.handle (record)

     Handles a record by passing it to all handlers associated with this
     logger and its ancestors (until a false value of `propagate' is
     found).  This method is used for unpickled records received from a
     socket, as well as those created locally.  Logger-level filtering
     is applied using *note filter(): 19e1.

 -- Method: Logger.makeRecord (name, lvl, fn, lno, msg, args, exc_info,
          func=None, extra=None, sinfo=None)

     This is a factory method which can be overridden in subclasses to
     create specialized *note LogRecord: 508. instances.

 -- Method: Logger.hasHandlers ()

     Checks to see if this logger has any handlers configured.  This is
     done by looking for handlers in this logger and its parents in the
     logger hierarchy.  Returns ‘True’ if a handler was found, else
     ‘False’.  The method stops searching up the hierarchy whenever a
     logger with the ’propagate’ attribute set to False is found - that
     will be the last logger which is checked for the existence of
     handlers.

     New in version 3.2.


File: python.info,  Node: Logging Levels,  Next: Handler Objects,  Prev: Logger Objects,  Up: logging --- Logging facility for Python

5.16.6.2 Logging Levels
.......................

The numeric values of logging levels are given in the following table.
These are primarily of interest if you want to define your own levels,
and need them to have specific values relative to the predefined levels.
If you define a level with the same numeric value, it overwrites the
predefined value; the predefined name is lost.

Level              Numeric value
                   
---------------------------------------
                   
‘CRITICAL’         50
                   
                   
‘ERROR’            40
                   
                   
‘WARNING’          30
                   
                   
‘INFO’             20
                   
                   
‘DEBUG’            10
                   
                   
‘NOTSET’           0
                   


File: python.info,  Node: Handler Objects,  Next: Formatter Objects,  Prev: Logging Levels,  Up: logging --- Logging facility for Python

5.16.6.3 Handler Objects
........................

Handlers have the following attributes and methods.  Note that ‘Handler’
is never instantiated directly; this class acts as a base for more
useful subclasses.  However, the *note __init__(): 9d5. method in
subclasses needs to call *note Handler.__init__(): 19eb.

 -- Method: Handler.__init__ (level=NOTSET)

     Initializes the ‘Handler’ instance by setting its level, setting
     the list of filters to the empty list and creating a lock (using
     *note createLock(): 19ec.) for serializing access to an I/O
     mechanism.

 -- Method: Handler.createLock ()

     Initializes a thread lock which can be used to serialize access to
     underlying I/O functionality which may not be threadsafe.

 -- Method: Handler.acquire ()

     Acquires the thread lock created with *note createLock(): 19ec.

 -- Method: Handler.release ()

     Releases the thread lock acquired with *note acquire(): 19ed.

 -- Method: Handler.setLevel (lvl)

     Sets the threshold for this handler to `lvl'.  Logging messages
     which are less severe than `lvl' will be ignored.  When a handler
     is created, the level is set to ‘NOTSET’ (which causes all messages
     to be processed).

     See *note Logging Levels: 19d7. for a list of levels.

     Changed in version 3.2: The `lvl' parameter now accepts a string
     representation of the level such as ’INFO’ as an alternative to the
     integer constants such as ‘INFO’.

 -- Method: Handler.setFormatter (form)

     Sets the *note Formatter: 19da. for this handler to `form'.

 -- Method: Handler.addFilter (filt)

     Adds the specified filter `filt' to this handler.

 -- Method: Handler.removeFilter (filt)

     Removes the specified filter `filt' from this handler.

 -- Method: Handler.filter (record)

     Applies this handler’s filters to the record and returns a true
     value if the record is to be processed.  The filters are consulted
     in turn, until one of them returns a false value.  If none of them
     return a false value, the record will be emitted.  If one returns a
     false value, the handler will not emit the record.

 -- Method: Handler.flush ()

     Ensure all logging output has been flushed.  This version does
     nothing and is intended to be implemented by subclasses.

 -- Method: Handler.close ()

     Tidy up any resources used by the handler.  This version does no
     output but removes the handler from an internal list of handlers
     which is closed when *note shutdown(): 19f6. is called.  Subclasses
     should ensure that this gets called from overridden *note close():
     19f5. methods.

 -- Method: Handler.handle (record)

     Conditionally emits the specified logging record, depending on
     filters which may have been added to the handler.  Wraps the actual
     emission of the record with acquisition/release of the I/O thread
     lock.

 -- Method: Handler.handleError (record)

     This method should be called from handlers when an exception is
     encountered during an *note emit(): 19f9. call.  If the
     module-level attribute ‘raiseExceptions’ is ‘False’, exceptions get
     silently ignored.  This is what is mostly wanted for a logging
     system - most users will not care about errors in the logging
     system, they are more interested in application errors.  You could,
     however, replace this with a custom handler if you wish.  The
     specified record is the one which was being processed when the
     exception occurred.  (The default value of ‘raiseExceptions’ is
     ‘True’, as that is more useful during development).

 -- Method: Handler.format (record)

     Do formatting for a record - if a formatter is set, use it.
     Otherwise, use the default formatter for the module.

 -- Method: Handler.emit (record)

     Do whatever it takes to actually log the specified logging record.
     This version is intended to be implemented by subclasses and so
     raises a *note NotImplementedError: 569.

For a list of handlers included as standard, see *note logging.handlers:
aa.


File: python.info,  Node: Formatter Objects,  Next: Filter Objects,  Prev: Handler Objects,  Up: logging --- Logging facility for Python

5.16.6.4 Formatter Objects
..........................

*note Formatter: 19da. objects have the following attributes and
methods.  They are responsible for converting a *note LogRecord: 508. to
(usually) a string which can be interpreted by either a human or an
external system.  The base *note Formatter: 19da. allows a formatting
string to be specified.  If none is supplied, the default value of
‘'%(message)s'’ is used, which just includes the message in the logging
call.  To have additional items of information in the formatted output
(such as a timestamp), keep reading.

A Formatter can be initialized with a format string which makes use of
knowledge of the *note LogRecord: 508. attributes - such as the default
value mentioned above making use of the fact that the user’s message and
arguments are pre-formatted into a *note LogRecord: 508.’s `message'
attribute.  This format string contains standard Python %-style mapping
keys.  See section *note printf-style String Formatting: bec. for more
information on string formatting.

The useful mapping keys in a *note LogRecord: 508. are given in the
section on *note LogRecord attributes: 19fd.

 -- Class: logging.Formatter (fmt=None, datefmt=None, style='%')

     Returns a new instance of the *note Formatter: 19da. class.  The
     instance is initialized with a format string for the message as a
     whole, as well as a format string for the date/time portion of a
     message.  If no `fmt' is specified, ‘'%(message)s'’ is used.  If no
     `datefmt' is specified, the ISO8601 date format is used.

     The `style' parameter can be one of ’%’, ’{’ or ’$’ and determines
     how the format string will be merged with its data: using one of
     %-formatting, *note str.format(): 14d. or *note string.Template:
     7c4.  See *note Using particular formatting styles throughout your
     application: 19fe. for more information on using {- and
     $-formatting for log messages.

     Changed in version 3.2: The `style' parameter was added.

      -- Method: format (record)

          The record’s attribute dictionary is used as the operand to a
          string formatting operation.  Returns the resulting string.
          Before formatting the dictionary, a couple of preparatory
          steps are carried out.  The `message' attribute of the record
          is computed using `msg' % `args'.  If the formatting string
          contains ‘'(asctime)'’, *note formatTime(): 1a00. is called to
          format the event time.  If there is exception information, it
          is formatted using *note formatException(): 1a01. and appended
          to the message.  Note that the formatted exception information
          is cached in attribute `exc_text'.  This is useful because the
          exception information can be pickled and sent across the wire,
          but you should be careful if you have more than one *note
          Formatter: 19da. subclass which customizes the formatting of
          exception information.  In this case, you will have to clear
          the cached value after a formatter has done its formatting, so
          that the next formatter to handle the event doesn’t use the
          cached value but recalculates it afresh.

          If stack information is available, it’s appended after the
          exception information, using *note formatStack(): 1a02. to
          transform it if necessary.

      -- Method: formatTime (record, datefmt=None)

          This method should be called from *note format(): 14e. by a
          formatter which wants to make use of a formatted time.  This
          method can be overridden in formatters to provide for any
          specific requirement, but the basic behavior is as follows: if
          `datefmt' (a string) is specified, it is used with *note
          time.strftime(): 7b1. to format the creation time of the
          record.  Otherwise, the ISO8601 format is used.  The resulting
          string is returned.

          This function uses a user-configurable function to convert the
          creation time to a tuple.  By default, *note time.localtime():
          125d. is used; to change this for a particular formatter
          instance, set the ‘converter’ attribute to a function with the
          same signature as *note time.localtime(): 125d. or *note
          time.gmtime(): 786.  To change it for all formatters, for
          example if you want all logging times to be shown in GMT, set
          the ‘converter’ attribute in the ‘Formatter’ class.

          Changed in version 3.3: Previously, the default ISO 8601
          format was hard-coded as in this example: ‘2010-09-06
          22:38:15,292’ where the part before the comma is handled by a
          strptime format string (‘'%Y-%m-%d %H:%M:%S'’), and the part
          after the comma is a millisecond value.  Because strptime does
          not have a format placeholder for milliseconds, the
          millisecond value is appended using another format string,
          ‘'%s,%03d'’ – and both of these format strings have been
          hardcoded into this method.  With the change, these strings
          are defined as class-level attributes which can be overridden
          at the instance level when desired.  The names of the
          attributes are ‘default_time_format’ (for the strptime format
          string) and ‘default_msec_format’ (for appending the
          millisecond value).

      -- Method: formatException (exc_info)

          Formats the specified exception information (a standard
          exception tuple as returned by *note sys.exc_info(): 8ca.) as
          a string.  This default implementation just uses *note
          traceback.print_exception(): 1a03.  The resulting string is
          returned.

      -- Method: formatStack (stack_info)

          Formats the specified stack information (a string as returned
          by *note traceback.print_stack(): 34b, but with the last
          newline removed) as a string.  This default implementation
          just returns the input value.


File: python.info,  Node: Filter Objects,  Next: LogRecord Objects,  Prev: Formatter Objects,  Up: logging --- Logging facility for Python

5.16.6.5 Filter Objects
.......................

‘Filters’ can be used by ‘Handlers’ and ‘Loggers’ for more sophisticated
filtering than is provided by levels.  The base filter class only allows
events which are below a certain point in the logger hierarchy.  For
example, a filter initialized with ’A.B’ will allow events logged by
loggers ’A.B’, ’A.B.C’, ’A.B.C.D’, ’A.B.D’ etc.  but not ’A.BB’, ’B.A.B’
etc.  If initialized with the empty string, all events are passed.

 -- Class: logging.Filter (name='')

     Returns an instance of the *note Filter: 7c7. class.  If `name' is
     specified, it names a logger which, together with its children,
     will have its events allowed through the filter.  If `name' is the
     empty string, allows every event.

      -- Method: filter (record)

          Is the specified record to be logged?  Returns zero for no,
          nonzero for yes.  If deemed appropriate, the record may be
          modified in-place by this method.

Note that filters attached to handlers are consulted before an event is
emitted by the handler, whereas filters attached to loggers are
consulted whenever an event is logged (using *note debug(): 19dc, *note
info(): 1a07, etc.), before sending an event to handlers.  This means
that events which have been generated by descendant loggers will not be
filtered by a logger’s filter setting, unless the filter has also been
applied to those descendant loggers.

You don’t actually need to subclass ‘Filter’: you can pass any instance
which has a ‘filter’ method with the same semantics.

Changed in version 3.2: You don’t need to create specialized ‘Filter’
classes, or use other classes with a ‘filter’ method: you can use a
function (or other callable) as a filter.  The filtering logic will
check to see if the filter object has a ‘filter’ attribute: if it does,
it’s assumed to be a ‘Filter’ and its *note filter(): 1a06. method is
called.  Otherwise, it’s assumed to be a callable and called with the
record as the single parameter.  The returned value should conform to
that returned by *note filter(): 1a06.

Although filters are used primarily to filter records based on more
sophisticated criteria than levels, they get to see every record which
is processed by the handler or logger they’re attached to: this can be
useful if you want to do things like counting how many records were
processed by a particular logger or handler, or adding, changing or
removing attributes in the LogRecord being processed.  Obviously
changing the LogRecord needs to be done with some care, but it does
allow the injection of contextual information into logs (see *note Using
Filters to impart contextual information: 1a08.).


File: python.info,  Node: LogRecord Objects,  Next: LogRecord attributes,  Prev: Filter Objects,  Up: logging --- Logging facility for Python

5.16.6.6 LogRecord Objects
..........................

*note LogRecord: 508. instances are created automatically by the *note
Logger: 2c6. every time something is logged, and can be created manually
via *note makeLogRecord(): 1a0b. (for example, from a pickled event
received over the wire).

 -- Class: logging.LogRecord (name, level, pathname, lineno, msg, args,
          exc_info, func=None, sinfo=None)

     Contains all the information pertinent to the event being logged.

     The primary information is passed in ‘msg’ and ‘args’, which are
     combined using ‘msg % args’ to create the ‘message’ field of the
     record.


     Parameters:

        * ‘name’ – The name of the logger used to log the event
          represented by this LogRecord.  Note that this name will
          always have this value, even though it may be emitted by a
          handler attached to a different (ancestor) logger.

        * ‘level’ – The numeric level of the logging event (one of
          DEBUG, INFO etc.)  Note that this is converted to `two'
          attributes of the LogRecord: ‘levelno’ for the numeric value
          and ‘levelname’ for the corresponding level name.

        * ‘pathname’ – The full pathname of the source file where the
          logging call was made.

        * ‘lineno’ – The line number in the source file where the
          logging call was made.

        * ‘msg’ – The event description message, possibly a format
          string with placeholders for variable data.

        * ‘args’ – Variable data to merge into the `msg' argument to
          obtain the event description.

        * ‘exc_info’ – An exception tuple with the current exception
          information, or `None' if no exception information is
          available.

        * ‘func’ – The name of the function or method from which the
          logging call was invoked.

        * ‘sinfo’ – A text string representing stack information from
          the base of the stack in the current thread, up to the logging
          call.

      -- Method: getMessage ()

          Returns the message for this *note LogRecord: 508. instance
          after merging any user-supplied arguments with the message.
          If the user-supplied message argument to the logging call is
          not a string, *note str(): 25a. is called on it to convert it
          to a string.  This allows use of user-defined classes as
          messages, whose ‘__str__’ method can return the actual format
          string to be used.

     Changed in version 3.2: The creation of a ‘LogRecord’ has been made
     more configurable by providing a factory which is used to create
     the record.  The factory can be set using *note
     getLogRecordFactory(): 1a0d. and *note setLogRecordFactory(): 1a0e.
     (see this for the factory’s signature).

     This functionality can be used to inject your own values into a
     LogRecord at creation time.  You can use the following pattern:

          old_factory = logging.getLogRecordFactory()

          def record_factory(*args, **kwargs):
              record = old_factory(*args, **kwargs)
              record.custom_attribute = 0xdecafbad
              return record

          logging.setLogRecordFactory(record_factory)

     With this pattern, multiple factories could be chained, and as long
     as they don’t overwrite each other’s attributes or unintentionally
     overwrite the standard attributes listed above, there should be no
     surprises.


File: python.info,  Node: LogRecord attributes,  Next: LoggerAdapter Objects,  Prev: LogRecord Objects,  Up: logging --- Logging facility for Python

5.16.6.7 LogRecord attributes
.............................

The LogRecord has a number of attributes, most of which are derived from
the parameters to the constructor.  (Note that the names do not always
correspond exactly between the LogRecord constructor parameters and the
LogRecord attributes.)  These attributes can be used to merge data from
the record into the format string.  The following table lists (in
alphabetical order) the attribute names, their meanings and the
corresponding placeholder in a %-style format string.

If you are using {}-formatting (*note str.format(): 14d.), you can use
‘{attrname}’ as the placeholder in the format string.  If you are using
$-formatting (*note string.Template: 7c4.), use the form ‘${attrname}’.
In both cases, of course, replace ‘attrname’ with the actual attribute
name you want to use.

In the case of {}-formatting, you can specify formatting flags by
placing them after the attribute name, separated from it with a colon.
For example: a placeholder of ‘{msecs:03d}’ would format a millisecond
value of ‘4’ as ‘004’.  Refer to the *note str.format(): 14d.
documentation for full details on the options available to you.

Attribute name       Format                        Description
                                                   
-------------------------------------------------------------------------------------------------------
                                                   
args                 You shouldn’t need to         The tuple of arguments merged into ‘msg’ to
                     format this yourself.         produce ‘message’, or a dict whose values are
                                                   used for the merge (when there is only one
                                                   argument, and it is a dictionary).
                                                   
                                                   
asctime              ‘%(asctime)s’                 Human-readable time when the
                                                   *note LogRecord: 508. was created.  By default
                                                   this is of the form ’2003-07-08 16:49:45,896’
                                                   (the numbers after the comma are millisecond
                                                   portion of the time).
                                                   
                                                   
created              ‘%(created)f’                 Time when the *note LogRecord: 508. was created
                                                   (as returned by *note time.time(): 6a5.).
                                                   
                                                   
exc_info             You shouldn’t need to         Exception tuple (à la ‘sys.exc_info’) or, if no
                     format this yourself.         exception has occurred, `None'.
                                                   
                                                   
filename             ‘%(filename)s’                Filename portion of ‘pathname’.
                                                   
                                                   
funcName             ‘%(funcName)s’                Name of function containing the logging call.
                                                   
                                                   
levelname            ‘%(levelname)s’               Text logging level for the message (‘'DEBUG'’,
                                                   ‘'INFO'’, ‘'WARNING'’, ‘'ERROR'’, ‘'CRITICAL'’).
                                                   
                                                   
levelno              ‘%(levelno)s’                 Numeric logging level for the message (‘DEBUG’,
                                                   ‘INFO’, ‘WARNING’, ‘ERROR’, ‘CRITICAL’).
                                                   
                                                   
lineno               ‘%(lineno)d’                  Source line number where the logging call was
                                                   issued (if available).
                                                   
                                                   
module               ‘%(module)s’                  Module (name portion of ‘filename’).
                                                   
                                                   
msecs                ‘%(msecs)d’                   Millisecond portion of the time when the
                                                   *note LogRecord: 508. was created.
                                                   
                                                   
message              ‘%(message)s’                 The logged message, computed as ‘msg % args’.
                                                   This is set when *note Formatter.format(): 19ff.
                                                   is invoked.
                                                   
                                                   
msg                  You shouldn’t need to         The format string passed in the original logging
                     format this yourself.         call.  Merged with ‘args’ to produce ‘message’,
                                                   or an arbitrary object (see
                                                   *note Using arbitrary objects as messages: 1a10.).
                                                   
                                                   
name                 ‘%(name)s’                    Name of the logger used to log the call.
                                                   
                                                   
pathname             ‘%(pathname)s’                Full pathname of the source file where the
                                                   logging call was issued (if available).
                                                   
                                                   
process              ‘%(process)d’                 Process ID (if available).
                                                   
                                                   
processName          ‘%(processName)s’             Process name (if available).
                                                   
                                                   
relativeCreated      ‘%(relativeCreated)d’         Time in milliseconds when the LogRecord was
                                                   created, relative to the time the logging module
                                                   was loaded.
                                                   
                                                   
stack_info           You shouldn’t need to         Stack frame information (where available) from
                     format this yourself.         the bottom of the stack in the current thread, up
                                                   to and including the stack frame of the logging
                                                   call which resulted in the creation of this
                                                   record.
                                                   
                                                   
thread               ‘%(thread)d’                  Thread ID (if available).
                                                   
                                                   
threadName           ‘%(threadName)s’              Thread name (if available).
                                                   

Changed in version 3.1: `processName' was added.


File: python.info,  Node: LoggerAdapter Objects,  Next: Thread Safety,  Prev: LogRecord attributes,  Up: logging --- Logging facility for Python

5.16.6.8 LoggerAdapter Objects
..............................

*note LoggerAdapter: 8fd. instances are used to conveniently pass
contextual information into logging calls.  For a usage example, see the
section on *note adding contextual information to your logging output:
1a13.

 -- Class: logging.LoggerAdapter (logger, extra)

     Returns an instance of *note LoggerAdapter: 8fd. initialized with
     an underlying *note Logger: 2c6. instance and a dict-like object.

      -- Method: process (msg, kwargs)

          Modifies the message and/or keyword arguments passed to a
          logging call in order to insert contextual information.  This
          implementation takes the object passed as `extra' to the
          constructor and adds it to `kwargs' using key ’extra’.  The
          return value is a (`msg', `kwargs') tuple which has the
          (possibly modified) versions of the arguments passed in.

In addition to the above, *note LoggerAdapter: 8fd. supports the
following methods of *note Logger: 2c6.: *note debug(): 2ca, *note
info(): 19db, *note warning(): 19dd, *note error(): 19de, *note
exception(): 2c8, *note critical(): 2c9, *note log(): 2c7, *note
isEnabledFor(): 19d9, *note getEffectiveLevel(): 19d8, *note setLevel():
19d6. and *note hasHandlers(): 19e7.  These methods have the same
signatures as their counterparts in *note Logger: 2c6, so you can use
the two types of instances interchangeably.

Changed in version 3.2: The *note isEnabledFor(): 19d9, *note
getEffectiveLevel(): 19d8, *note setLevel(): 19d6. and *note
hasHandlers(): 19e7. methods were added to *note LoggerAdapter: 8fd.
These methods delegate to the underlying logger.


File: python.info,  Node: Thread Safety,  Next: Module-Level Functions,  Prev: LoggerAdapter Objects,  Up: logging --- Logging facility for Python

5.16.6.9 Thread Safety
......................

The logging module is intended to be thread-safe without any special
work needing to be done by its clients.  It achieves this though using
threading locks; there is one lock to serialize access to the module’s
shared data, and each handler also creates a lock to serialize access to
its underlying I/O.

If you are implementing asynchronous signal handlers using the *note
signal: e8. module, you may not be able to use logging from within such
handlers.  This is because lock implementations in the *note threading:
106. module are not always re-entrant, and so cannot be invoked from
such signal handlers.


File: python.info,  Node: Module-Level Functions,  Next: Module-Level Attributes,  Prev: Thread Safety,  Up: logging --- Logging facility for Python

5.16.6.10 Module-Level Functions
................................

In addition to the classes described above, there are a number of
module- level functions.

 -- Function: logging.getLogger (name=None)

     Return a logger with the specified name or, if name is ‘None’,
     return a logger which is the root logger of the hierarchy.  If
     specified, the name is typically a dot-separated hierarchical name
     like `’a’', `’a.b’' or `’a.b.c.d’'.  Choice of these names is
     entirely up to the developer who is using logging.

     All calls to this function with a given name return the same logger
     instance.  This means that logger instances never need to be passed
     between different parts of an application.

 -- Function: logging.getLoggerClass ()

     Return either the standard *note Logger: 2c6. class, or the last
     class passed to *note setLoggerClass(): 1a18.  This function may be
     called from within a new class definition, to ensure that
     installing a customized *note Logger: 2c6. class will not undo
     customizations already applied by other code.  For example:

          class MyLogger(logging.getLoggerClass()):
              # ... override behaviour here

 -- Function: logging.getLogRecordFactory ()

     Return a callable which is used to create a *note LogRecord: 508.

     New in version 3.2: This function has been provided, along with
     *note setLogRecordFactory(): 1a0e, to allow developers more control
     over how the *note LogRecord: 508. representing a logging event is
     constructed.

     See *note setLogRecordFactory(): 1a0e. for more information about
     the how the factory is called.

 -- Function: logging.debug (msg, *args, **kwargs)

     Logs a message with level ‘DEBUG’ on the root logger.  The `msg' is
     the message format string, and the `args' are the arguments which
     are merged into `msg' using the string formatting operator.  (Note
     that this means that you can use keywords in the format string,
     together with a single dictionary argument.)

     There are three keyword arguments in `kwargs' which are inspected:
     `exc_info' which, if it does not evaluate as false, causes
     exception information to be added to the logging message.  If an
     exception tuple (in the format returned by *note sys.exc_info():
     8ca.) is provided, it is used; otherwise, *note sys.exc_info():
     8ca. is called to get the exception information.

     The second optional keyword argument is `stack_info', which
     defaults to ‘False’.  If true, stack information is added to the
     logging message, including the actual logging call.  Note that this
     is not the same stack information as that displayed through
     specifying `exc_info': The former is stack frames from the bottom
     of the stack up to the logging call in the current thread, whereas
     the latter is information about stack frames which have been
     unwound, following an exception, while searching for exception
     handlers.

     You can specify `stack_info' independently of `exc_info', e.g.  to
     just show how you got to a certain point in your code, even when no
     exceptions were raised.  The stack frames are printed following a
     header line which says:

          Stack (most recent call last):

     This mimics the ‘Traceback (most recent call last):’ which is used
     when displaying exception frames.

     The third optional keyword argument is `extra' which can be used to
     pass a dictionary which is used to populate the __dict__ of the
     LogRecord created for the logging event with user-defined
     attributes.  These custom attributes can then be used as you like.
     For example, they could be incorporated into logged messages.  For
     example:

          FORMAT = '%(asctime)-15s %(clientip)s %(user)-8s %(message)s'
          logging.basicConfig(format=FORMAT)
          d = {'clientip': '192.168.0.1', 'user': 'fbloggs'}
          logging.warning('Protocol problem: %s', 'connection reset', extra=d)

     would print something like:

          2006-02-08 22:20:02,165 192.168.0.1 fbloggs  Protocol problem: connection reset

     The keys in the dictionary passed in `extra' should not clash with
     the keys used by the logging system.  (See the *note Formatter:
     19da. documentation for more information on which keys are used by
     the logging system.)

     If you choose to use these attributes in logged messages, you need
     to exercise some care.  In the above example, for instance, the
     *note Formatter: 19da. has been set up with a format string which
     expects ’clientip’ and ’user’ in the attribute dictionary of the
     LogRecord.  If these are missing, the message will not be logged
     because a string formatting exception will occur.  So in this case,
     you always need to pass the `extra' dictionary with these keys.

     While this might be annoying, this feature is intended for use in
     specialized circumstances, such as multi-threaded servers where the
     same code executes in many contexts, and interesting conditions
     which arise are dependent on this context (such as remote client IP
     address and authenticated user name, in the above example).  In
     such circumstances, it is likely that specialized *note Formatter:
     19da.s would be used with particular ‘Handler’s.

     New in version 3.2: The `stack_info' parameter was added.

 -- Function: logging.info (msg, *args, **kwargs)

     Logs a message with level ‘INFO’ on the root logger.  The arguments
     are interpreted as for *note debug(): 19dc.

 -- Function: logging.warning (msg, *args, **kwargs)

     Logs a message with level ‘WARNING’ on the root logger.  The
     arguments are interpreted as for *note debug(): 19dc.

          Note: There is an obsolete function ‘warn’ which is
          functionally identical to ‘warning’.  As ‘warn’ is deprecated,
          please do not use it - use ‘warning’ instead.

 -- Function: logging.error (msg, *args, **kwargs)

     Logs a message with level ‘ERROR’ on the root logger.  The
     arguments are interpreted as for *note debug(): 19dc.

 -- Function: logging.critical (msg, *args, **kwargs)

     Logs a message with level ‘CRITICAL’ on the root logger.  The
     arguments are interpreted as for *note debug(): 19dc.

 -- Function: logging.exception (msg, *args, **kwargs)

     Logs a message with level ‘ERROR’ on the root logger.  The
     arguments are interpreted as for *note debug(): 19dc.  Exception
     info is added to the logging message.  This function should only be
     called from an exception handler.

 -- Function: logging.log (level, msg, *args, **kwargs)

     Logs a message with level `level' on the root logger.  The other
     arguments are interpreted as for *note debug(): 19dc.

          Note: The above module-level convenience functions, which
          delegate to the root logger, call *note basicConfig(): 64c. to
          ensure that at least one handler is available.  Because of
          this, they should `not' be used in threads, in versions of
          Python earlier than 2.7.1 and 3.2, unless at least one handler
          has been added to the root logger `before' the threads are
          started.  In earlier versions of Python, due to a thread
          safety shortcoming in *note basicConfig(): 64c, this can
          (under rare circumstances) lead to handlers being added
          multiple times to the root logger, which can in turn lead to
          multiple messages for the same event.

 -- Function: logging.disable (lvl)

     Provides an overriding level `lvl' for all loggers which takes
     precedence over the logger’s own level.  When the need arises to
     temporarily throttle logging output down across the whole
     application, this function can be useful.  Its effect is to disable
     all logging calls of severity `lvl' and below, so that if you call
     it with a value of INFO, then all INFO and DEBUG events would be
     discarded, whereas those of severity WARNING and above would be
     processed according to the logger’s effective level.  If
     ‘logging.disable(logging.NOTSET)’ is called, it effectively removes
     this overriding level, so that logging output again depends on the
     effective levels of individual loggers.

 -- Function: logging.addLevelName (lvl, levelName)

     Associates level `lvl' with text `levelName' in an internal
     dictionary, which is used to map numeric levels to a textual
     representation, for example when a *note Formatter: 19da. formats a
     message.  This function can also be used to define your own levels.
     The only constraints are that all levels used must be registered
     using this function, levels should be positive integers and they
     should increase in increasing order of severity.

          Note: If you are thinking of defining your own levels, please
          see the section on *note Custom Levels: 1a20.

 -- Function: logging.getLevelName (lvl)

     Returns the textual representation of logging level `lvl'.  If the
     level is one of the predefined levels ‘CRITICAL’, ‘ERROR’,
     ‘WARNING’, ‘INFO’ or ‘DEBUG’ then you get the corresponding string.
     If you have associated levels with names using *note
     addLevelName(): 1a1f. then the name you have associated with `lvl'
     is returned.  If a numeric value corresponding to one of the
     defined levels is passed in, the corresponding string
     representation is returned.  Otherwise, the string ’Level %s’ % lvl
     is returned.

          Note: Levels are internally integers (as they need to be
          compared in the logging logic).  This function is used to
          convert between an integer level and the level name displayed
          in the formatted log output by means of the ‘%(levelname)s’
          format specifier (see *note LogRecord attributes: 19fd.).

     Changed in version 3.4: In Python versions earlier than 3.4, this
     function could also be passed a text level, and would return the
     corresponding numeric value of the level.  This undocumented
     behaviour was considered a mistake, and was removed in Python 3.4,
     but reinstated in 3.4.2 due to retain backward compatibility.

 -- Function: logging.makeLogRecord (attrdict)

     Creates and returns a new *note LogRecord: 508. instance whose
     attributes are defined by `attrdict'.  This function is useful for
     taking a pickled *note LogRecord: 508. attribute dictionary, sent
     over a socket, and reconstituting it as a *note LogRecord: 508.
     instance at the receiving end.

 -- Function: logging.basicConfig (**kwargs)

     Does basic configuration for the logging system by creating a *note
     StreamHandler: 7c5. with a default *note Formatter: 19da. and
     adding it to the root logger.  The functions *note debug(): 19dc,
     *note info(): 1a07, *note warning(): 1a19, *note error(): 1a1a. and
     *note critical(): 1a1b. will call *note basicConfig(): 64c.
     automatically if no handlers are defined for the root logger.

     This function does nothing if the root logger already has handlers
     configured for it.

          Note: This function should be called from the main thread
          before other threads are started.  In versions of Python prior
          to 2.7.1 and 3.2, if this function is called from multiple
          threads, it is possible (in rare circumstances) that a handler
          will be added to the root logger more than once, leading to
          unexpected results such as messages being duplicated in the
          log.

     The following keyword arguments are supported.

     Format             Description
                        
     ---------------------------------------------------------------------
                        
     ‘filename’         Specifies that a FileHandler be created, using
                        the specified filename, rather than a
                        StreamHandler.
                        
                        
     ‘filemode’         Specifies the mode to open the file, if
                        filename is specified (if filemode is
                        unspecified, it defaults to ’a’).
                        
                        
     ‘format’           Use the specified format string for the
                        handler.
                        
                        
     ‘datefmt’          Use the specified date/time format.
                        
                        
     ‘style’            If ‘format’ is specified, use this style for
                        the format string.  One of ’%’, ’{’ or ’$’ for
                        %-formatting, *note str.format(): 14d. or
                        *note string.Template: 7c4. respectively, and
                        defaulting to ’%’ if not specified.
                        
                        
     ‘level’            Set the root logger level to the specified
                        level.
                        
                        
     ‘stream’           Use the specified stream to initialize the
                        StreamHandler.  Note that this argument is
                        incompatible with ’filename’ - if both are
                        present, a ‘ValueError’ is raised.
                        
                        
     ‘handlers’         If specified, this should be an iterable of
                        already created handlers to add to the root
                        logger.  Any handlers which don’t already have
                        a formatter set will be assigned the default
                        formatter created in this function.  Note that
                        this argument is incompatible with ’filename’
                        or ’stream’ - if both are present, a
                        ‘ValueError’ is raised.
                        

     Changed in version 3.2: The ‘style’ argument was added.

     Changed in version 3.3: The ‘handlers’ argument was added.
     Additional checks were added to catch situations where incompatible
     arguments are specified (e.g.  ‘handlers’ together with ‘stream’ or
     ‘filename’, or ‘stream’ together with ‘filename’).

 -- Function: logging.shutdown ()

     Informs the logging system to perform an orderly shutdown by
     flushing and closing all handlers.  This should be called at
     application exit and no further use of the logging system should be
     made after this call.

 -- Function: logging.setLoggerClass (klass)

     Tells the logging system to use the class `klass' when
     instantiating a logger.  The class should define *note __init__():
     9d5. such that only a name argument is required, and the *note
     __init__(): 9d5. should call ‘Logger.__init__()’.  This function is
     typically called before any loggers are instantiated by
     applications which need to use custom logger behavior.

 -- Function: logging.setLogRecordFactory (factory)

     Set a callable which is used to create a *note LogRecord: 508.


     Parameters: ‘factory’ – The factory callable to be used to
     instantiate a log record.

     New in version 3.2: This function has been provided, along with
     *note getLogRecordFactory(): 1a0d, to allow developers more control
     over how the *note LogRecord: 508. representing a logging event is
     constructed.

     The factory has the following signature:

     ‘factory(name, level, fn, lno, msg, args, exc_info, func=None,
     sinfo=None, **kwargs)’


          name: The logger name.


          level: The logging level (numeric).


          fn: The full pathname of the file where the logging call was
          made.


          lno: The line number in the file where the logging call was
          made.


          msg: The logging message.


          args: The arguments for the logging message.


          exc_info: An exception tuple, or None.


          func: The name of the function or method which invoked the
          logging call.


          sinfo: A stack traceback such as is provided by *note
          traceback.print_stack(): 34b, showing the call hierarchy.


          kwargs: Additional keyword arguments.


File: python.info,  Node: Module-Level Attributes,  Next: Integration with the warnings module,  Prev: Module-Level Functions,  Up: logging --- Logging facility for Python

5.16.6.11 Module-Level Attributes
.................................

 -- Attribute: logging.lastResort

     A "handler of last resort" is available through this attribute.
     This is a *note StreamHandler: 7c5. writing to ‘sys.stderr’ with a
     level of ‘WARNING’, and is used to handle logging events in the
     absence of any logging configuration.  The end result is to just
     print the message to ‘sys.stderr’.  This replaces the earlier error
     message saying that "no handlers could be found for logger XYZ". If
     you need the earlier behaviour for some reason, ‘lastResort’ can be
     set to ‘None’.

     New in version 3.2.


File: python.info,  Node: Integration with the warnings module,  Prev: Module-Level Attributes,  Up: logging --- Logging facility for Python

5.16.6.12 Integration with the warnings module
..............................................

The *note captureWarnings(): 1a24. function can be used to integrate
*note logging: a8. with the *note warnings: 123. module.

 -- Function: logging.captureWarnings (capture)

     This function is used to turn the capture of warnings by logging on
     and off.

     If `capture' is ‘True’, warnings issued by the *note warnings: 123.
     module will be redirected to the logging system.  Specifically, a
     warning will be formatted using *note warnings.formatwarning():
     b15. and the resulting string logged to a logger named
     ‘'py.warnings'’ with a severity of ‘WARNING’.

     If `capture' is ‘False’, the redirection of warnings to the logging
     system will stop, and warnings will be redirected to their original
     destinations (i.e.  those in effect before ‘captureWarnings(True)’
     was called).

See also
........

Module *note logging.config: a9.

     Configuration API for the logging module.

Module *note logging.handlers: aa.

     Useful handlers included with the logging module.

PEP 282(1) - A Logging System

     The proposal which described this feature for inclusion in the
     Python standard library.

Original Python logging package(2)

     This is the original source for the *note logging: a8. package.
     The version of the package available from this site is suitable for
     use with Python 1.5.2, 2.1.x and 2.2.x, which do not include the
     *note logging: a8. package in the standard library.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0282

   (2) https://www.red-dove.com/python_logging.html


File: python.info,  Node: logging config --- Logging configuration,  Next: logging handlers --- Logging handlers,  Prev: logging --- Logging facility for Python,  Up: Generic Operating System Services

5.16.7 ‘logging.config’ — Logging configuration
-----------------------------------------------

Important
.........

This page contains only reference information.  For tutorials, please
see

   * *note Basic Tutorial: 7c1.

   * *note Advanced Tutorial: 7c2.

   * *note Logging Cookbook: 7c3.

`Source code:' Lib/logging/config.py(1)

__________________________________________________________________

This section describes the API for configuring the logging module.

* Menu:

* Configuration functions:: 
* Configuration dictionary schema:: 
* Configuration file format:: 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/logging/config.py


File: python.info,  Node: Configuration functions,  Next: Configuration dictionary schema,  Up: logging config --- Logging configuration

5.16.7.1 Configuration functions
................................

The following functions configure the logging module.  They are located
in the *note logging.config: a9. module.  Their use is optional — you
can configure the logging module using these functions or by making
calls to the main API (defined in *note logging: a8. itself) and
defining handlers which are declared either in *note logging: a8. or
*note logging.handlers: aa.

 -- Function: logging.config.dictConfig (config)

          Takes the logging configuration from a dictionary.  The
          contents of this dictionary are described in *note
          Configuration dictionary schema: 1a28. below.

          If an error is encountered during configuration, this function
          will raise a *note ValueError: 19c, *note TypeError: 562,
          *note AttributeError: 356. or *note ImportError: 19f. with a
          suitably descriptive message.  The following is a (possibly
          incomplete) list of conditions which will raise an error:

             * A ‘level’ which is not a string or which is a string not
               corresponding to an actual logging level.

             * A ‘propagate’ value which is not a boolean.

             * An id which does not have a corresponding destination.

             * A non-existent handler id found during an incremental
               call.

             * An invalid logger name.

             * Inability to resolve to an internal or external object.

          Parsing is performed by the ‘DictConfigurator’ class, whose
          constructor is passed the dictionary used for configuration,
          and has a ‘configure()’ method.  The *note logging.config: a9.
          module has a callable attribute ‘dictConfigClass’ which is
          initially set to ‘DictConfigurator’.  You can replace the
          value of ‘dictConfigClass’ with a suitable implementation of
          your own.

          *note dictConfig(): 76d. calls ‘dictConfigClass’ passing the
          specified dictionary, and then calls the ‘configure()’ method
          on the returned object to put the configuration into effect:

               def dictConfig(config):
                   dictConfigClass(config).configure()

          For example, a subclass of ‘DictConfigurator’ could call
          ‘DictConfigurator.__init__()’ in its own *note __init__():
          9d5, then set up custom prefixes which would be usable in the
          subsequent ‘configure()’ call.  ‘dictConfigClass’ would be
          bound to this new subclass, and then *note dictConfig(): 76d.
          could be called exactly as in the default, uncustomized state.

     New in version 3.2.

 -- Function: logging.config.fileConfig (fname, defaults=None,
          disable_existing_loggers=True)

     Reads the logging configuration from a *note configparser:
     23.-format file.  The format of the file should be as described in
     *note Configuration file format: 1a29.  This function can be called
     several times from an application, allowing an end user to select
     from various pre-canned configurations (if the developer provides a
     mechanism to present the choices and load the chosen
     configuration).


     Parameters:

        * ‘fname’ – A filename, or a file-like object, or an instance
          derived from *note RawConfigParser: 46a.  If a
          ‘RawConfigParser’-derived instance is passed, it is used as
          is.  Otherwise, a ‘Configparser’ is instantiated, and the
          configuration read by it from the object passed in ‘fname’.
          If that has a *note readline(): dc. method, it is assumed to
          be a file-like object and read using *note read_file(): 17d6.;
          otherwise, it is assumed to be a filename and passed to *note
          read(): 17d5.

        * ‘defaults’ – Defaults to be passed to the ConfigParser can be
          specified in this argument.

        * ‘disable_existing_loggers’ – If specified as ‘False’, loggers
          which exist when this call is made are left enabled.  The
          default is ‘True’ because this enables old behaviour in a
          backward- compatible way.  This behaviour is to disable any
          existing loggers unless they or their ancestors are explicitly
          named in the logging configuration.

     Changed in version 3.4: An instance of a subclass of *note
     RawConfigParser: 46a. is now accepted as a value for ‘fname’.  This
     facilitates:

        * Use of a configuration file where logging configuration is
          just part of the overall application configuration.

        * Use of a configuration read from a file, and then modified by
          the using application (e.g.  based on command-line parameters
          or other aspects of the runtime environment) before being
          passed to ‘fileConfig’.

 -- Function: logging.config.listen (port=DEFAULT_LOGGING_CONFIG_PORT,
          verify=None)

     Starts up a socket server on the specified port, and listens for
     new configurations.  If no port is specified, the module’s default
     ‘DEFAULT_LOGGING_CONFIG_PORT’ is used.  Logging configurations will
     be sent as a file suitable for processing by *note fileConfig():
     469.  Returns a *note Thread: 4f0. instance on which you can call
     *note start(): 1a2a. to start the server, and which you can *note
     join(): 7aa. when appropriate.  To stop the server, call *note
     stopListening(): 1a2b.

     The ‘verify’ argument, if specified, should be a callable which
     should verify whether bytes received across the socket are valid
     and should be processed.  This could be done by encrypting and/or
     signing what is sent across the socket, such that the ‘verify’
     callable can perform signature verification and/or decryption.  The
     ‘verify’ callable is called with a single argument - the bytes
     received across the socket - and should return the bytes to be
     processed, or None to indicate that the bytes should be discarded.
     The returned bytes could be the same as the passed in bytes (e.g.
     when only verification is done), or they could be completely
     different (perhaps if decryption were performed).

     To send a configuration to the socket, read in the configuration
     file and send it to the socket as a string of bytes preceded by a
     four-byte length string packed in binary using ‘struct.pack('>L',
     n)’.

          Note: Because portions of the configuration are passed through
          *note eval(): 7e8, use of this function may open its users to
          a security risk.  While the function only binds to a socket on
          ‘localhost’, and so does not accept connections from remote
          machines, there are scenarios where untrusted code could be
          run under the account of the process which calls *note
          listen(): 46b.  Specifically, if the process calling *note
          listen(): 46b. runs on a multi-user machine where users cannot
          trust each other, then a malicious user could arrange to run
          essentially arbitrary code in a victim user’s process, simply
          by connecting to the victim’s *note listen(): 46b. socket and
          sending a configuration which runs whatever code the attacker
          wants to have executed in the victim’s process.  This is
          especially easy to do if the default port is used, but not
          hard even if a different port is used).  To avoid the risk of
          this happening, use the ‘verify’ argument to *note listen():
          46b. to prevent unrecognised configurations from being
          applied.

     Changed in version 3.4.: The ‘verify’ argument was added.

 -- Function: logging.config.stopListening ()

     Stops the listening server which was created with a call to *note
     listen(): 46b.  This is typically called before calling ‘join()’ on
     the return value from *note listen(): 46b.


File: python.info,  Node: Configuration dictionary schema,  Next: Configuration file format,  Prev: Configuration functions,  Up: logging config --- Logging configuration

5.16.7.2 Configuration dictionary schema
........................................

Describing a logging configuration requires listing the various objects
to create and the connections between them; for example, you may create
a handler named ’console’ and then say that the logger named ’startup’
will send its messages to the ’console’ handler.  These objects aren’t
limited to those provided by the *note logging: a8. module because you
might write your own formatter or handler class.  The parameters to
these classes may also need to include external objects such as
‘sys.stderr’.  The syntax for describing these objects and connections
is defined in *note Object connections: 1a2d. below.

* Menu:

* Dictionary Schema Details:: 
* Incremental Configuration:: 
* Object connections:: 
* User-defined objects:: 
* Access to external objects:: 
* Access to internal objects:: 
* Import resolution and custom importers:: 


File: python.info,  Node: Dictionary Schema Details,  Next: Incremental Configuration,  Up: Configuration dictionary schema

5.16.7.3 Dictionary Schema Details
..................................

The dictionary passed to *note dictConfig(): 76d. must contain the
following keys:

   * `version' - to be set to an integer value representing the schema
     version.  The only valid value at present is 1, but having this key
     allows the schema to evolve while still preserving backwards
     compatibility.

All other keys are optional, but if present they will be interpreted as
described below.  In all cases below where a ’configuring dict’ is
mentioned, it will be checked for the special ‘'()'’ key to see if a
custom instantiation is required.  If so, the mechanism described in
*note User-defined objects: 1a2f. below is used to create an instance;
otherwise, the context is used to determine what to instantiate.

   * `formatters' - the corresponding value will be a dict in which each
     key is a formatter id and each value is a dict describing how to
     configure the corresponding *note Formatter: 19da. instance.

     The configuring dict is searched for keys ‘format’ and ‘datefmt’
     (with defaults of ‘None’) and these are used to construct a *note
     Formatter: 19da. instance.

   * `filters' - the corresponding value will be a dict in which each
     key is a filter id and each value is a dict describing how to
     configure the corresponding Filter instance.

     The configuring dict is searched for the key ‘name’ (defaulting to
     the empty string) and this is used to construct a *note
     logging.Filter: 7c7. instance.

   * `handlers' - the corresponding value will be a dict in which each
     key is a handler id and each value is a dict describing how to
     configure the corresponding Handler instance.

     The configuring dict is searched for the following keys:

        * ‘class’ (mandatory).  This is the fully qualified name of the
          handler class.

        * ‘level’ (optional).  The level of the handler.

        * ‘formatter’ (optional).  The id of the formatter for this
          handler.

        * ‘filters’ (optional).  A list of ids of the filters for this
          handler.

     All `other' keys are passed through as keyword arguments to the
     handler’s constructor.  For example, given the snippet:

          handlers:
            console:
              class : logging.StreamHandler
              formatter: brief
              level   : INFO
              filters: [allow_foo]
              stream  : ext://sys.stdout
            file:
              class : logging.handlers.RotatingFileHandler
              formatter: precise
              filename: logconfig.log
              maxBytes: 1024
              backupCount: 3

     the handler with id ‘console’ is instantiated as a *note
     logging.StreamHandler: 7c5, using ‘sys.stdout’ as the underlying
     stream.  The handler with id ‘file’ is instantiated as a *note
     logging.handlers.RotatingFileHandler: 1a30. with the keyword
     arguments ‘filename='logconfig.log', maxBytes=1024, backupCount=3’.

   * `loggers' - the corresponding value will be a dict in which each
     key is a logger name and each value is a dict describing how to
     configure the corresponding Logger instance.

     The configuring dict is searched for the following keys:

        * ‘level’ (optional).  The level of the logger.

        * ‘propagate’ (optional).  The propagation setting of the
          logger.

        * ‘filters’ (optional).  A list of ids of the filters for this
          logger.

        * ‘handlers’ (optional).  A list of ids of the handlers for this
          logger.

     The specified loggers will be configured according to the level,
     propagation, filters and handlers specified.

   * `root' - this will be the configuration for the root logger.
     Processing of the configuration will be as for any logger, except
     that the ‘propagate’ setting will not be applicable.

   * `incremental' - whether the configuration is to be interpreted as
     incremental to the existing configuration.  This value defaults to
     ‘False’, which means that the specified configuration replaces the
     existing configuration with the same semantics as used by the
     existing *note fileConfig(): 469. API.

     If the specified value is ‘True’, the configuration is processed as
     described in the section on *note Incremental Configuration: 1a31.

   * `disable_existing_loggers' - whether any existing loggers are to be
     disabled.  This setting mirrors the parameter of the same name in
     *note fileConfig(): 469.  If absent, this parameter defaults to
     ‘True’.  This value is ignored if `incremental' is ‘True’.


File: python.info,  Node: Incremental Configuration,  Next: Object connections,  Prev: Dictionary Schema Details,  Up: Configuration dictionary schema

5.16.7.4 Incremental Configuration
..................................

It is difficult to provide complete flexibility for incremental
configuration.  For example, because objects such as filters and
formatters are anonymous, once a configuration is set up, it is not
possible to refer to such anonymous objects when augmenting a
configuration.

Furthermore, there is not a compelling case for arbitrarily altering the
object graph of loggers, handlers, filters, formatters at run-time, once
a configuration is set up; the verbosity of loggers and handlers can be
controlled just by setting levels (and, in the case of loggers,
propagation flags).  Changing the object graph arbitrarily in a safe way
is problematic in a multi-threaded environment; while not impossible,
the benefits are not worth the complexity it adds to the implementation.

Thus, when the ‘incremental’ key of a configuration dict is present and
is ‘True’, the system will completely ignore any ‘formatters’ and
‘filters’ entries, and process only the ‘level’ settings in the
‘handlers’ entries, and the ‘level’ and ‘propagate’ settings in the
‘loggers’ and ‘root’ entries.

Using a value in the configuration dict lets configurations to be sent
over the wire as pickled dicts to a socket listener.  Thus, the logging
verbosity of a long-running application can be altered over time with no
need to stop and restart the application.


File: python.info,  Node: Object connections,  Next: User-defined objects,  Prev: Incremental Configuration,  Up: Configuration dictionary schema

5.16.7.5 Object connections
...........................

The schema describes a set of logging objects - loggers, handlers,
formatters, filters - which are connected to each other in an object
graph.  Thus, the schema needs to represent connections between the
objects.  For example, say that, once configured, a particular logger
has attached to it a particular handler.  For the purposes of this
discussion, we can say that the logger represents the source, and the
handler the destination, of a connection between the two.  Of course in
the configured objects this is represented by the logger holding a
reference to the handler.  In the configuration dict, this is done by
giving each destination object an id which identifies it unambiguously,
and then using the id in the source object’s configuration to indicate
that a connection exists between the source and the destination object
with that id.

So, for example, consider the following YAML snippet:

     formatters:
       brief:
         # configuration for formatter with id 'brief' goes here
       precise:
         # configuration for formatter with id 'precise' goes here
     handlers:
       h1: #This is an id
        # configuration of handler with id 'h1' goes here
        formatter: brief
       h2: #This is another id
        # configuration of handler with id 'h2' goes here
        formatter: precise
     loggers:
       foo.bar.baz:
         # other configuration for logger 'foo.bar.baz'
         handlers: [h1, h2]

(Note: YAML used here because it’s a little more readable than the
equivalent Python source form for the dictionary.)

The ids for loggers are the logger names which would be used
programmatically to obtain a reference to those loggers, e.g.
‘foo.bar.baz’.  The ids for Formatters and Filters can be any string
value (such as ‘brief’, ‘precise’ above) and they are transient, in that
they are only meaningful for processing the configuration dictionary and
used to determine connections between objects, and are not persisted
anywhere when the configuration call is complete.

The above snippet indicates that logger named ‘foo.bar.baz’ should have
two handlers attached to it, which are described by the handler ids ‘h1’
and ‘h2’.  The formatter for ‘h1’ is that described by id ‘brief’, and
the formatter for ‘h2’ is that described by id ‘precise’.


File: python.info,  Node: User-defined objects,  Next: Access to external objects,  Prev: Object connections,  Up: Configuration dictionary schema

5.16.7.6 User-defined objects
.............................

The schema supports user-defined objects for handlers, filters and
formatters.  (Loggers do not need to have different types for different
instances, so there is no support in this configuration schema for
user-defined logger classes.)

Objects to be configured are described by dictionaries which detail
their configuration.  In some places, the logging system will be able to
infer from the context how an object is to be instantiated, but when a
user-defined object is to be instantiated, the system will not know how
to do this.  In order to provide complete flexibility for user-defined
object instantiation, the user needs to provide a ’factory’ - a callable
which is called with a configuration dictionary and which returns the
instantiated object.  This is signalled by an absolute import path to
the factory being made available under the special key ‘'()'’.  Here’s a
concrete example:

     formatters:
       brief:
         format: '%(message)s'
       default:
         format: '%(asctime)s %(levelname)-8s %(name)-15s %(message)s'
         datefmt: '%Y-%m-%d %H:%M:%S'
       custom:
           (): my.package.customFormatterFactory
           bar: baz
           spam: 99.9
           answer: 42

The above YAML snippet defines three formatters.  The first, with id
‘brief’, is a standard *note logging.Formatter: 19da. instance with the
specified format string.  The second, with id ‘default’, has a longer
format and also defines the time format explicitly, and will result in a
*note logging.Formatter: 19da. initialized with those two format
strings.  Shown in Python source form, the ‘brief’ and ‘default’
formatters have configuration sub-dictionaries:

     {
       'format' : '%(message)s'
     }

and:

     {
       'format' : '%(asctime)s %(levelname)-8s %(name)-15s %(message)s',
       'datefmt' : '%Y-%m-%d %H:%M:%S'
     }

respectively, and as these dictionaries do not contain the special key
‘'()'’, the instantiation is inferred from the context: as a result,
standard *note logging.Formatter: 19da. instances are created.  The
configuration sub-dictionary for the third formatter, with id ‘custom’,
is:

     {
       '()' : 'my.package.customFormatterFactory',
       'bar' : 'baz',
       'spam' : 99.9,
       'answer' : 42
     }

and this contains the special key ‘'()'’, which means that user-defined
instantiation is wanted.  In this case, the specified factory callable
will be used.  If it is an actual callable it will be used directly -
otherwise, if you specify a string (as in the example) the actual
callable will be located using normal import mechanisms.  The callable
will be called with the `remaining' items in the configuration
sub-dictionary as keyword arguments.  In the above example, the
formatter with id ‘custom’ will be assumed to be returned by the call:

     my.package.customFormatterFactory(bar='baz', spam=99.9, answer=42)

The key ‘'()'’ has been used as the special key because it is not a
valid keyword parameter name, and so will not clash with the names of
the keyword arguments used in the call.  The ‘'()'’ also serves as a
mnemonic that the corresponding value is a callable.


File: python.info,  Node: Access to external objects,  Next: Access to internal objects,  Prev: User-defined objects,  Up: Configuration dictionary schema

5.16.7.7 Access to external objects
...................................

There are times where a configuration needs to refer to objects external
to the configuration, for example ‘sys.stderr’.  If the configuration
dict is constructed using Python code, this is straightforward, but a
problem arises when the configuration is provided via a text file (e.g.
JSON, YAML). In a text file, there is no standard way to distinguish
‘sys.stderr’ from the literal string ‘'sys.stderr'’.  To facilitate this
distinction, the configuration system looks for certain special prefixes
in string values and treat them specially.  For example, if the literal
string ‘'ext://sys.stderr'’ is provided as a value in the configuration,
then the ‘ext://’ will be stripped off and the remainder of the value
processed using normal import mechanisms.

The handling of such prefixes is done in a way analogous to protocol
handling: there is a generic mechanism to look for prefixes which match
the regular expression ‘^(?P<prefix>[a-z]+)://(?P<suffix>.*)$’ whereby,
if the ‘prefix’ is recognised, the ‘suffix’ is processed in a
prefix-dependent manner and the result of the processing replaces the
string value.  If the prefix is not recognised, then the string value
will be left as-is.


File: python.info,  Node: Access to internal objects,  Next: Import resolution and custom importers,  Prev: Access to external objects,  Up: Configuration dictionary schema

5.16.7.8 Access to internal objects
...................................

As well as external objects, there is sometimes also a need to refer to
objects in the configuration.  This will be done implicitly by the
configuration system for things that it knows about.  For example, the
string value ‘'DEBUG'’ for a ‘level’ in a logger or handler will
automatically be converted to the value ‘logging.DEBUG’, and the
‘handlers’, ‘filters’ and ‘formatter’ entries will take an object id and
resolve to the appropriate destination object.

However, a more generic mechanism is needed for user-defined objects
which are not known to the *note logging: a8. module.  For example,
consider *note logging.handlers.MemoryHandler: 1a39, which takes a
‘target’ argument which is another handler to delegate to.  Since the
system already knows about this class, then in the configuration, the
given ‘target’ just needs to be the object id of the relevant target
handler, and the system will resolve to the handler from the id.  If,
however, a user defines a ‘my.package.MyHandler’ which has an
‘alternate’ handler, the configuration system would not know that the
‘alternate’ referred to a handler.  To cater for this, a generic
resolution system allows the user to specify:

     handlers:
       file:
         # configuration of file handler goes here

       custom:
         (): my.package.MyHandler
         alternate: cfg://handlers.file

The literal string ‘'cfg://handlers.file'’ will be resolved in an
analogous way to strings with the ‘ext://’ prefix, but looking in the
configuration itself rather than the import namespace.  The mechanism
allows access by dot or by index, in a similar way to that provided by
‘str.format’.  Thus, given the following snippet:

     handlers:
       email:
         class: logging.handlers.SMTPHandler
         mailhost: localhost
         fromaddr: my_app@domain.tld
         toaddrs:
           - support_team@domain.tld
           - dev_team@domain.tld
         subject: Houston, we have a problem.

in the configuration, the string ‘'cfg://handlers'’ would resolve to the
dict with key ‘handlers’, the string ‘'cfg://handlers.email’ would
resolve to the dict with key ‘email’ in the ‘handlers’ dict, and so on.
The string ‘'cfg://handlers.email.toaddrs[1]’ would resolve to
‘'dev_team.domain.tld'’ and the string
‘'cfg://handlers.email.toaddrs[0]'’ would resolve to the value
‘'support_team@domain.tld'’.  The ‘subject’ value could be accessed
using either ‘'cfg://handlers.email.subject'’ or, equivalently,
‘'cfg://handlers.email[subject]'’.  The latter form only needs to be
used if the key contains spaces or non-alphanumeric characters.  If an
index value consists only of decimal digits, access will be attempted
using the corresponding integer value, falling back to the string value
if needed.

Given a string ‘cfg://handlers.myhandler.mykey.123’, this will resolve
to ‘config_dict['handlers']['myhandler']['mykey']['123']’.  If the
string is specified as ‘cfg://handlers.myhandler.mykey[123]’, the system
will attempt to retrieve the value from
‘config_dict['handlers']['myhandler']['mykey'][123]’, and fall back to
‘config_dict['handlers']['myhandler']['mykey']['123']’ if that fails.


File: python.info,  Node: Import resolution and custom importers,  Prev: Access to internal objects,  Up: Configuration dictionary schema

5.16.7.9 Import resolution and custom importers
...............................................

Import resolution, by default, uses the builtin *note __import__(): 5cd.
function to do its importing.  You may want to replace this with your
own importing mechanism: if so, you can replace the ‘importer’ attribute
of the ‘DictConfigurator’ or its superclass, the ‘BaseConfigurator’
class.  However, you need to be careful because of the way functions are
accessed from classes via descriptors.  If you are using a Python
callable to do your imports, and you want to define it at class level
rather than instance level, you need to wrap it with *note
staticmethod(): 5f6.  For example:

     from importlib import import_module
     from logging.config import BaseConfigurator

     BaseConfigurator.importer = staticmethod(import_module)

You don’t need to wrap with *note staticmethod(): 5f6. if you’re setting
the import callable on a configurator `instance'.


File: python.info,  Node: Configuration file format,  Prev: Configuration dictionary schema,  Up: logging config --- Logging configuration

5.16.7.10 Configuration file format
...................................

The configuration file format understood by *note fileConfig(): 469. is
based on *note configparser: 23. functionality.  The file must contain
sections called ‘[loggers]’, ‘[handlers]’ and ‘[formatters]’ which
identify by name the entities of each type which are defined in the
file.  For each such entity, there is a separate section which
identifies how that entity is configured.  Thus, for a logger named
‘log01’ in the ‘[loggers]’ section, the relevant configuration details
are held in a section ‘[logger_log01]’.  Similarly, a handler called
‘hand01’ in the ‘[handlers]’ section will have its configuration held in
a section called ‘[handler_hand01]’, while a formatter called ‘form01’
in the ‘[formatters]’ section will have its configuration specified in a
section called ‘[formatter_form01]’.  The root logger configuration must
be specified in a section called ‘[logger_root]’.

     Note: The *note fileConfig(): 469. API is older than the *note
     dictConfig(): 76d. API and does not provide functionality to cover
     certain aspects of logging.  For example, you cannot configure
     *note Filter: 7c7. objects, which provide for filtering of messages
     beyond simple integer levels, using *note fileConfig(): 469.  If
     you need to have instances of *note Filter: 7c7. in your logging
     configuration, you will need to use *note dictConfig(): 76d.  Note
     that future enhancements to configuration functionality will be
     added to *note dictConfig(): 76d, so it’s worth considering
     transitioning to this newer API when it’s convenient to do so.

Examples of these sections in the file are given below.

     [loggers]
     keys=root,log02,log03,log04,log05,log06,log07

     [handlers]
     keys=hand01,hand02,hand03,hand04,hand05,hand06,hand07,hand08,hand09

     [formatters]
     keys=form01,form02,form03,form04,form05,form06,form07,form08,form09

The root logger must specify a level and a list of handlers.  An example
of a root logger section is given below.

     [logger_root]
     level=NOTSET
     handlers=hand01

The ‘level’ entry can be one of ‘DEBUG, INFO, WARNING, ERROR, CRITICAL’
or ‘NOTSET’.  For the root logger only, ‘NOTSET’ means that all messages
will be logged.  Level values are *note eval(): 7e8.uated in the context
of the ‘logging’ package’s namespace.

The ‘handlers’ entry is a comma-separated list of handler names, which
must appear in the ‘[handlers]’ section.  These names must appear in the
‘[handlers]’ section and have corresponding sections in the
configuration file.

For loggers other than the root logger, some additional information is
required.  This is illustrated by the following example.

     [logger_parser]
     level=DEBUG
     handlers=hand01
     propagate=1
     qualname=compiler.parser

The ‘level’ and ‘handlers’ entries are interpreted as for the root
logger, except that if a non-root logger’s level is specified as
‘NOTSET’, the system consults loggers higher up the hierarchy to
determine the effective level of the logger.  The ‘propagate’ entry is
set to 1 to indicate that messages must propagate to handlers higher up
the logger hierarchy from this logger, or 0 to indicate that messages
are `not' propagated to handlers up the hierarchy.  The ‘qualname’ entry
is the hierarchical channel name of the logger, that is to say the name
used by the application to get the logger.

Sections which specify handler configuration are exemplified by the
following.

     [handler_hand01]
     class=StreamHandler
     level=NOTSET
     formatter=form01
     args=(sys.stdout,)

The ‘class’ entry indicates the handler’s class (as determined by *note
eval(): 7e8. in the ‘logging’ package’s namespace).  The ‘level’ is
interpreted as for loggers, and ‘NOTSET’ is taken to mean ’log
everything’.

The ‘formatter’ entry indicates the key name of the formatter for this
handler.  If blank, a default formatter (‘logging._defaultFormatter’) is
used.  If a name is specified, it must appear in the ‘[formatters]’
section and have a corresponding section in the configuration file.

The ‘args’ entry, when *note eval(): 7e8.uated in the context of the
‘logging’ package’s namespace, is the list of arguments to the
constructor for the handler class.  Refer to the constructors for the
relevant handlers, or to the examples below, to see how typical entries
are constructed.

     [handler_hand02]
     class=FileHandler
     level=DEBUG
     formatter=form02
     args=('python.log', 'w')

     [handler_hand03]
     class=handlers.SocketHandler
     level=INFO
     formatter=form03
     args=('localhost', handlers.DEFAULT_TCP_LOGGING_PORT)

     [handler_hand04]
     class=handlers.DatagramHandler
     level=WARN
     formatter=form04
     args=('localhost', handlers.DEFAULT_UDP_LOGGING_PORT)

     [handler_hand05]
     class=handlers.SysLogHandler
     level=ERROR
     formatter=form05
     args=(('localhost', handlers.SYSLOG_UDP_PORT), handlers.SysLogHandler.LOG_USER)

     [handler_hand06]
     class=handlers.NTEventLogHandler
     level=CRITICAL
     formatter=form06
     args=('Python Application', '', 'Application')

     [handler_hand07]
     class=handlers.SMTPHandler
     level=WARN
     formatter=form07
     args=('localhost', 'from@abc', ['user1@abc', 'user2@xyz'], 'Logger Subject')

     [handler_hand08]
     class=handlers.MemoryHandler
     level=NOTSET
     formatter=form08
     target=
     args=(10, ERROR)

     [handler_hand09]
     class=handlers.HTTPHandler
     level=NOTSET
     formatter=form09
     args=('localhost:9022', '/log', 'GET')

Sections which specify formatter configuration are typified by the
following.

     [formatter_form01]
     format=F1 %(asctime)s %(levelname)s %(message)s
     datefmt=
     class=logging.Formatter

The ‘format’ entry is the overall format string, and the ‘datefmt’ entry
is the ‘strftime()’-compatible date/time format string.  If empty, the
package substitutes ISO8601 format date/times, which is almost
equivalent to specifying the date format string ‘'%Y-%m-%d %H:%M:%S'’.
The ISO8601 format also specifies milliseconds, which are appended to
the result of using the above format string, with a comma separator.  An
example time in ISO8601 format is ‘2003-01-23 00:29:50,411’.

The ‘class’ entry is optional.  It indicates the name of the formatter’s
class (as a dotted module and class name.)  This option is useful for
instantiating a *note Formatter: 19da. subclass.  Subclasses of *note
Formatter: 19da. can present exception tracebacks in an expanded or
condensed format.

     Note: Due to the use of *note eval(): 7e8. as described above,
     there are potential security risks which result from using the
     *note listen(): 46b. to send and receive configurations via
     sockets.  The risks are limited to where multiple users with no
     mutual trust run code on the same machine; see the *note listen():
     46b. documentation for more information.

See also
........

Module *note logging: a8.

     API reference for the logging module.

Module *note logging.handlers: aa.

     Useful handlers included with the logging module.


File: python.info,  Node: logging handlers --- Logging handlers,  Next: getpass --- Portable password input,  Prev: logging config --- Logging configuration,  Up: Generic Operating System Services

5.16.8 ‘logging.handlers’ — Logging handlers
--------------------------------------------

Important
.........

This page contains only reference information.  For tutorials, please
see

   * *note Basic Tutorial: 7c1.

   * *note Advanced Tutorial: 7c2.

   * *note Logging Cookbook: 7c3.

`Source code:' Lib/logging/handlers.py(1)

__________________________________________________________________

The following useful handlers are provided in the package.  Note that
three of the handlers (*note StreamHandler: 7c5, *note FileHandler:
1a3f. and *note NullHandler: 880.) are actually defined in the *note
logging: a8. module itself, but have been documented here along with the
other handlers.

* Menu:

* StreamHandler:: 
* FileHandler:: 
* NullHandler:: 
* WatchedFileHandler:: 
* BaseRotatingHandler:: 
* RotatingFileHandler:: 
* TimedRotatingFileHandler:: 
* SocketHandler:: 
* DatagramHandler:: 
* SysLogHandler:: 
* NTEventLogHandler:: 
* SMTPHandler:: 
* MemoryHandler:: 
* HTTPHandler:: 
* QueueHandler:: 
* QueueListener:: 

   ---------- Footnotes ----------

   (1) 
https://hg.python.org/cpython/file/default/Lib/logging/handlers.py


File: python.info,  Node: StreamHandler,  Next: FileHandler,  Up: logging handlers --- Logging handlers

5.16.8.1 StreamHandler
......................

The *note StreamHandler: 7c5. class, located in the core *note logging:
a8. package, sends logging output to streams such as `sys.stdout',
`sys.stderr' or any file-like object (or, more precisely, any object
which supports ‘write()’ and ‘flush()’ methods).

 -- Class: logging.StreamHandler (stream=None)

     Returns a new instance of the *note StreamHandler: 7c5. class.  If
     `stream' is specified, the instance will use it for logging output;
     otherwise, `sys.stderr' will be used.

      -- Method: emit (record)

          If a formatter is specified, it is used to format the record.
          The record is then written to the stream with a terminator.
          If exception information is present, it is formatted using
          *note traceback.print_exception(): 1a03. and appended to the
          stream.

      -- Method: flush ()

          Flushes the stream by calling its *note flush(): 1a43. method.
          Note that the ‘close()’ method is inherited from ‘Handler’ and
          so does no output, so an explicit *note flush(): 1a43. call
          may be needed at times.

Changed in version 3.2: The ‘StreamHandler’ class now has a ‘terminator’
attribute, default value ‘'\n'’, which is used as the terminator when
writing a formatted record to a stream.  If you don’t want this newline
termination, you can set the handler instance’s ‘terminator’ attribute
to the empty string.  In earlier versions, the terminator was hardcoded
as ‘'\n'’.


File: python.info,  Node: FileHandler,  Next: NullHandler,  Prev: StreamHandler,  Up: logging handlers --- Logging handlers

5.16.8.2 FileHandler
....................

The *note FileHandler: 1a3f. class, located in the core *note logging:
a8. package, sends logging output to a disk file.  It inherits the
output functionality from *note StreamHandler: 7c5.

 -- Class: logging.FileHandler (filename, mode='a', encoding=None,
          delay=False)

     Returns a new instance of the *note FileHandler: 1a3f. class.  The
     specified file is opened and used as the stream for logging.  If
     `mode' is not specified, ‘'a'’ is used.  If `encoding' is not
     `None', it is used to open the file with that encoding.  If `delay'
     is true, then file opening is deferred until the first call to
     *note emit(): 1a46.  By default, the file grows indefinitely.

      -- Method: close ()

          Closes the file.

      -- Method: emit (record)

          Outputs the record to the file.


File: python.info,  Node: NullHandler,  Next: WatchedFileHandler,  Prev: FileHandler,  Up: logging handlers --- Logging handlers

5.16.8.3 NullHandler
....................

New in version 3.1.

The *note NullHandler: 880. class, located in the core *note logging:
a8. package, does not do any formatting or output.  It is essentially a
’no-op’ handler for use by library developers.

 -- Class: logging.NullHandler

     Returns a new instance of the *note NullHandler: 880. class.

      -- Method: emit (record)

          This method does nothing.

      -- Method: handle (record)

          This method does nothing.

      -- Method: createLock ()

          This method returns ‘None’ for the lock, since there is no
          underlying I/O to which access needs to be serialized.

See *note Configuring Logging for a Library: 1a4d. for more information
on how to use *note NullHandler: 880.


File: python.info,  Node: WatchedFileHandler,  Next: BaseRotatingHandler,  Prev: NullHandler,  Up: logging handlers --- Logging handlers

5.16.8.4 WatchedFileHandler
...........................

The *note WatchedFileHandler: 1a50. class, located in the *note
logging.handlers: aa. module, is a ‘FileHandler’ which watches the file
it is logging to.  If the file changes, it is closed and reopened using
the file name.

A file change can happen because of usage of programs such as
`newsyslog' and `logrotate' which perform log file rotation.  This
handler, intended for use under Unix/Linux, watches the file to see if
it has changed since the last emit.  (A file is deemed to have changed
if its device or inode have changed.)  If the file has changed, the old
file stream is closed, and the file opened to get a new stream.

This handler is not appropriate for use under Windows, because under
Windows open log files cannot be moved or renamed - logging opens the
files with exclusive locks - and so there is no need for such a handler.
Furthermore, `ST_INO' is not supported under Windows; *note stat(): 1e2.
always returns zero for this value.

 -- Class: logging.handlers.WatchedFileHandler (filename[, mode[,
          encoding[, delay]]])

     Returns a new instance of the *note WatchedFileHandler: 1a50.
     class.  The specified file is opened and used as the stream for
     logging.  If `mode' is not specified, ‘'a'’ is used.  If `encoding'
     is not `None', it is used to open the file with that encoding.  If
     `delay' is true, then file opening is deferred until the first call
     to *note emit(): 1a51.  By default, the file grows indefinitely.

      -- Method: reopenIfNeeded ()

          Checks to see if the file has changed.  If it has, the
          existing stream is flushed and closed and the file opened
          again, typically as a precursor to outputting the record to
          the file.

          New in version 3.6.

      -- Method: emit (record)

          Outputs the record to the file, but first calls *note
          reopenIfNeeded(): 1a52. to reopen the file if it has changed.


File: python.info,  Node: BaseRotatingHandler,  Next: RotatingFileHandler,  Prev: WatchedFileHandler,  Up: logging handlers --- Logging handlers

5.16.8.5 BaseRotatingHandler
............................

The *note BaseRotatingHandler: 1a55. class, located in the *note
logging.handlers: aa. module, is the base class for the rotating file
handlers, *note RotatingFileHandler: 1a30. and *note
TimedRotatingFileHandler: 466.  You should not need to instantiate this
class, but it has attributes and methods you may need to override.

 -- Class: logging.handlers.BaseRotatingHandler (filename, mode,
          encoding=None, delay=False)

     The parameters are as for ‘FileHandler’.  The attributes are:

      -- Attribute: namer

          If this attribute is set to a callable, the *note
          rotation_filename(): 1a57. method delegates to this callable.
          The parameters passed to the callable are those passed to
          *note rotation_filename(): 1a57.

               Note: The namer function is called quite a few times
               during rollover, so it should be as simple and as fast as
               possible.  It should also return the same output every
               time for a given input, otherwise the rollover behaviour
               may not work as expected.

          New in version 3.3.

      -- Attribute: rotator

          If this attribute is set to a callable, the *note rotate():
          1a59. method delegates to this callable.  The parameters
          passed to the callable are those passed to *note rotate():
          1a59.

          New in version 3.3.

      -- Method: rotation_filename (default_name)

          Modify the filename of a log file when rotating.

          This is provided so that a custom filename can be provided.

          The default implementation calls the ’namer’ attribute of the
          handler, if it’s callable, passing the default name to it.  If
          the attribute isn’t callable (the default is ‘None’), the name
          is returned unchanged.


          Parameters: ‘default_name’ – The default name for the log
          file.

          New in version 3.3.

      -- Method: rotate (source, dest)

          When rotating, rotate the current log.

          The default implementation calls the ’rotator’ attribute of
          the handler, if it’s callable, passing the source and dest
          arguments to it.  If the attribute isn’t callable (the default
          is ‘None’), the source is simply renamed to the destination.


          Parameters:

             * ‘source’ – The source filename.  This is normally the
               base filename, e.g.  ’test.log’.

             * ‘dest’ – The destination filename.  This is normally what
               the source is rotated to, e.g.  ’test.log.1’.

          New in version 3.3.

The reason the attributes exist is to save you having to subclass - you
can use the same callables for instances of *note RotatingFileHandler:
1a30. and *note TimedRotatingFileHandler: 466.  If either the namer or
rotator callable raises an exception, this will be handled in the same
way as any other exception during an ‘emit()’ call, i.e.  via the
‘handleError()’ method of the handler.

If you need to make more significant changes to rotation processing, you
can override the methods.

For an example, see *note Using a rotator and namer to customize log
rotation processing: 1a5a.


File: python.info,  Node: RotatingFileHandler,  Next: TimedRotatingFileHandler,  Prev: BaseRotatingHandler,  Up: logging handlers --- Logging handlers

5.16.8.6 RotatingFileHandler
............................

The *note RotatingFileHandler: 1a30. class, located in the *note
logging.handlers: aa. module, supports rotation of disk log files.

 -- Class: logging.handlers.RotatingFileHandler (filename, mode='a',
          maxBytes=0, backupCount=0, encoding=None, delay=0)

     Returns a new instance of the *note RotatingFileHandler: 1a30.
     class.  The specified file is opened and used as the stream for
     logging.  If `mode' is not specified, ‘'a'’ is used.  If `encoding'
     is not `None', it is used to open the file with that encoding.  If
     `delay' is true, then file opening is deferred until the first call
     to *note emit(): 1a5d.  By default, the file grows indefinitely.

     You can use the `maxBytes' and `backupCount' values to allow the
     file to `rollover' at a predetermined size.  When the size is about
     to be exceeded, the file is closed and a new file is silently
     opened for output.  Rollover occurs whenever the current log file
     is nearly `maxBytes' in length; if either of `maxBytes' or
     `backupCount' is zero, rollover never occurs.  If `backupCount' is
     non-zero, the system will save old log files by appending the
     extensions ’.1’, ’.2’ etc., to the filename.  For example, with a
     `backupCount' of 5 and a base file name of ‘app.log’, you would get
     ‘app.log’, ‘app.log.1’, ‘app.log.2’, up to ‘app.log.5’.  The file
     being written to is always ‘app.log’.  When this file is filled, it
     is closed and renamed to ‘app.log.1’, and if files ‘app.log.1’,
     ‘app.log.2’, etc.  exist, then they are renamed to ‘app.log.2’,
     ‘app.log.3’ etc.  respectively.

      -- Method: doRollover ()

          Does a rollover, as described above.

      -- Method: emit (record)

          Outputs the record to the file, catering for rollover as
          described previously.


File: python.info,  Node: TimedRotatingFileHandler,  Next: SocketHandler,  Prev: RotatingFileHandler,  Up: logging handlers --- Logging handlers

5.16.8.7 TimedRotatingFileHandler
.................................

The *note TimedRotatingFileHandler: 466. class, located in the *note
logging.handlers: aa. module, supports rotation of disk log files at
certain timed intervals.

 -- Class: logging.handlers.TimedRotatingFileHandler (filename,
          when='h', interval=1, backupCount=0, encoding=None,
          delay=False, utc=False, atTime=None)

     Returns a new instance of the *note TimedRotatingFileHandler: 466.
     class.  The specified file is opened and used as the stream for
     logging.  On rotating it also sets the filename suffix.  Rotating
     happens based on the product of `when' and `interval'.

     You can use the `when' to specify the type of `interval'.  The list
     of possible values is below.  Note that they are not case
     sensitive.

     Value                Type of interval
                          
     -------------------------------------------------
                          
     ‘'S'’                Seconds
                          
                          
     ‘'M'’                Minutes
                          
                          
     ‘'H'’                Hours
                          
                          
     ‘'D'’                Days
                          
                          
     ‘'W0'-'W6'’          Weekday (0=Monday)
                          
                          
     ‘'midnight'’         Roll over at midnight
                          

     When using weekday-based rotation, specify ’W0’ for Monday, ’W1’
     for Tuesday, and so on up to ’W6’ for Sunday.  In this case, the
     value passed for `interval' isn’t used.

     The system will save old log files by appending extensions to the
     filename.  The extensions are date-and-time based, using the
     strftime format ‘%Y-%m-%d_%H-%M-%S’ or a leading portion thereof,
     depending on the rollover interval.

     When computing the next rollover time for the first time (when the
     handler is created), the last modification time of an existing log
     file, or else the current time, is used to compute when the next
     rotation will occur.

     If the `utc' argument is true, times in UTC will be used; otherwise
     local time is used.

     If `backupCount' is nonzero, at most `backupCount' files will be
     kept, and if more would be created when rollover occurs, the oldest
     one is deleted.  The deletion logic uses the interval to determine
     which files to delete, so changing the interval may leave old files
     lying around.

     If `delay' is true, then file opening is deferred until the first
     call to *note emit(): 1a61.

     If `atTime' is not ‘None’, it must be a ‘datetime.time’ instance
     which specifies the time of day when rollover occurs, for the cases
     where rollover is set to happen "at midnight" or "on a particular
     weekday".

     Changed in version 3.4: `atTime' parameter was added.

      -- Method: doRollover ()

          Does a rollover, as described above.

      -- Method: emit (record)

          Outputs the record to the file, catering for rollover as
          described above.


File: python.info,  Node: SocketHandler,  Next: DatagramHandler,  Prev: TimedRotatingFileHandler,  Up: logging handlers --- Logging handlers

5.16.8.8 SocketHandler
......................

The *note SocketHandler: 467. class, located in the *note
logging.handlers: aa. module, sends logging output to a network socket.
The base class uses a TCP socket.

 -- Class: logging.handlers.SocketHandler (host, port)

     Returns a new instance of the *note SocketHandler: 467. class
     intended to communicate with a remote machine whose address is
     given by `host' and `port'.

     Changed in version 3.4: If ‘port’ is specified as ‘None’, a Unix
     domain socket is created using the value in ‘host’ - otherwise, a
     TCP socket is created.

      -- Method: close ()

          Closes the socket.

      -- Method: emit ()

          Pickles the record’s attribute dictionary and writes it to the
          socket in binary format.  If there is an error with the
          socket, silently drops the packet.  If the connection was
          previously lost, re-establishes the connection.  To unpickle
          the record at the receiving end into a *note LogRecord: 508,
          use the *note makeLogRecord(): 1a0b. function.

      -- Method: handleError ()

          Handles an error which has occurred during *note emit(): 1a66.
          The most likely cause is a lost connection.  Closes the socket
          so that we can retry on the next event.

      -- Method: makeSocket ()

          This is a factory method which allows subclasses to define the
          precise type of socket they want.  The default implementation
          creates a TCP socket (*note socket.SOCK_STREAM: 8fb.).

      -- Method: makePickle (record)

          Pickles the record’s attribute dictionary in binary format
          with a length prefix, and returns it ready for transmission
          across the socket.

          Note that pickles aren’t completely secure.  If you are
          concerned about security, you may want to override this method
          to implement a more secure mechanism.  For example, you can
          sign pickles using HMAC and then verify them on the receiving
          end, or alternatively you can disable unpickling of global
          objects on the receiving end.

      -- Method: send (packet)

          Send a pickled string `packet' to the socket.  This function
          allows for partial sends which can happen when the network is
          busy.

      -- Method: createSocket ()

          Tries to create a socket; on failure, uses an exponential
          back-off algorithm.  On initial failure, the handler will drop
          the message it was trying to send.  When subsequent messages
          are handled by the same instance, it will not try connecting
          until some time has passed.  The default parameters are such
          that the initial delay is one second, and if after that delay
          the connection still can’t be made, the handler will double
          the delay each time up to a maximum of 30 seconds.

          This behaviour is controlled by the following handler
          attributes:

             * ‘retryStart’ (initial delay, defaulting to 1.0 seconds).

             * ‘retryFactor’ (multiplier, defaulting to 2.0).

             * ‘retryMax’ (maximum delay, defaulting to 30.0 seconds).

          This means that if the remote listener starts up `after' the
          handler has been used, you could lose messages (since the
          handler won’t even attempt a connection until the delay has
          elapsed, but just silently drop messages during the delay
          period).


File: python.info,  Node: DatagramHandler,  Next: SysLogHandler,  Prev: SocketHandler,  Up: logging handlers --- Logging handlers

5.16.8.9 DatagramHandler
........................

The *note DatagramHandler: 468. class, located in the *note
logging.handlers: aa. module, inherits from *note SocketHandler: 467. to
support sending logging messages over UDP sockets.

 -- Class: logging.handlers.DatagramHandler (host, port)

     Returns a new instance of the *note DatagramHandler: 468. class
     intended to communicate with a remote machine whose address is
     given by `host' and `port'.

     Changed in version 3.4: If ‘port’ is specified as ‘None’, a Unix
     domain socket is created using the value in ‘host’ - otherwise, a
     TCP socket is created.

      -- Method: emit ()

          Pickles the record’s attribute dictionary and writes it to the
          socket in binary format.  If there is an error with the
          socket, silently drops the packet.  To unpickle the record at
          the receiving end into a *note LogRecord: 508, use the *note
          makeLogRecord(): 1a0b. function.

      -- Method: makeSocket ()

          The factory method of *note SocketHandler: 467. is here
          overridden to create a UDP socket (*note socket.SOCK_DGRAM:
          8fa.).

      -- Method: send (s)

          Send a pickled string to a socket.


File: python.info,  Node: SysLogHandler,  Next: NTEventLogHandler,  Prev: DatagramHandler,  Up: logging handlers --- Logging handlers

5.16.8.10 SysLogHandler
.......................

The *note SysLogHandler: 64d. class, located in the *note
logging.handlers: aa. module, supports sending logging messages to a
remote or local Unix syslog.

 -- Class: logging.handlers.SysLogHandler (address=('localhost',
          SYSLOG_UDP_PORT), facility=LOG_USER,
          socktype=socket.SOCK_DGRAM)

     Returns a new instance of the *note SysLogHandler: 64d. class
     intended to communicate with a remote Unix machine whose address is
     given by `address' in the form of a ‘(host, port)’ tuple.  If
     `address' is not specified, ‘('localhost', 514)’ is used.  The
     address is used to open a socket.  An alternative to providing a
     ‘(host, port)’ tuple is providing an address as a string, for
     example ’/dev/log’.  In this case, a Unix domain socket is used to
     send the message to the syslog.  If `facility' is not specified,
     ‘LOG_USER’ is used.  The type of socket opened depends on the
     `socktype' argument, which defaults to *note socket.SOCK_DGRAM:
     8fa. and thus opens a UDP socket.  To open a TCP socket (for use
     with the newer syslog daemons such as rsyslog), specify a value of
     *note socket.SOCK_STREAM: 8fb.

     Note that if your server is not listening on UDP port 514, *note
     SysLogHandler: 64d. may appear not to work.  In that case, check
     what address you should be using for a domain socket - it’s system
     dependent.  For example, on Linux it’s usually ’/dev/log’ but on
     OS/X it’s ’/var/run/syslog’.  You’ll need to check your platform
     and use the appropriate address (you may need to do this check at
     runtime if your application needs to run on several platforms).  On
     Windows, you pretty much have to use the UDP option.

     Changed in version 3.2: `socktype' was added.

      -- Method: close ()

          Closes the socket to the remote host.

      -- Method: emit (record)

          The record is formatted, and then sent to the syslog server.
          If exception information is present, it is `not' sent to the
          server.

          Changed in version 3.2.1: (See: issue 12168(1).)  In earlier
          versions, the message sent to the syslog daemons was always
          terminated with a NUL byte, because early versions of these
          daemons expected a NUL terminated message - even though it’s
          not in the relevant specification (RFC 5424).  More recent
          versions of these daemons don’t expect the NUL byte but strip
          it off if it’s there, and even more recent daemons (which
          adhere more closely to RFC 5424) pass the NUL byte on as part
          of the message.

          To enable easier handling of syslog messages in the face of
          all these differing daemon behaviours, the appending of the
          NUL byte has been made configurable, through the use of a
          class-level attribute, ‘append_nul’.  This defaults to ‘True’
          (preserving the existing behaviour) but can be set to ‘False’
          on a ‘SysLogHandler’ instance in order for that instance to
          `not' append the NUL terminator.

          Changed in version 3.3: (See: issue 12419(2).)  In earlier
          versions, there was no facility for an "ident" or "tag" prefix
          to identify the source of the message.  This can now be
          specified using a class-level attribute, defaulting to ‘""’ to
          preserve existing behaviour, but which can be overridden on a
          ‘SysLogHandler’ instance in order for that instance to prepend
          the ident to every message handled.  Note that the provided
          ident must be text, not bytes, and is prepended to the message
          exactly as is.

      -- Method: encodePriority (facility, priority)

          Encodes the facility and priority into an integer.  You can
          pass in strings or integers - if strings are passed, internal
          mapping dictionaries are used to convert them to integers.

          The symbolic ‘LOG_’ values are defined in *note SysLogHandler:
          64d. and mirror the values defined in the ‘sys/syslog.h’
          header file.

          `Priorities'

          Name (string)                  Symbolic value
                                         
          ---------------------------------------------------
                                         
          ‘alert’                        LOG_ALERT
                                         
                                         
          ‘crit’ or ‘critical’           LOG_CRIT
                                         
                                         
          ‘debug’                        LOG_DEBUG
                                         
                                         
          ‘emerg’ or ‘panic’             LOG_EMERG
                                         
                                         
          ‘err’ or ‘error’               LOG_ERR
                                         
                                         
          ‘info’                         LOG_INFO
                                         
                                         
          ‘notice’                       LOG_NOTICE
                                         
                                         
          ‘warn’ or ‘warning’            LOG_WARNING
                                         

          `Facilities'

          Name (string)       Symbolic value
                              
          ----------------------------------------
                              
          ‘auth’              LOG_AUTH
                              
                              
          ‘authpriv’          LOG_AUTHPRIV
                              
                              
          ‘cron’              LOG_CRON
                              
                              
          ‘daemon’            LOG_DAEMON
                              
                              
          ‘ftp’               LOG_FTP
                              
                              
          ‘kern’              LOG_KERN
                              
                              
          ‘lpr’               LOG_LPR
                              
                              
          ‘mail’              LOG_MAIL
                              
                              
          ‘news’              LOG_NEWS
                              
                              
          ‘syslog’            LOG_SYSLOG
                              
                              
          ‘user’              LOG_USER
                              
                              
          ‘uucp’              LOG_UUCP
                              
                              
          ‘local0’            LOG_LOCAL0
                              
                              
          ‘local1’            LOG_LOCAL1
                              
                              
          ‘local2’            LOG_LOCAL2
                              
                              
          ‘local3’            LOG_LOCAL3
                              
                              
          ‘local4’            LOG_LOCAL4
                              
                              
          ‘local5’            LOG_LOCAL5
                              
                              
          ‘local6’            LOG_LOCAL6
                              
                              
          ‘local7’            LOG_LOCAL7
                              

      -- Method: mapPriority (levelname)

          Maps a logging level name to a syslog priority name.  You may
          need to override this if you are using custom levels, or if
          the default algorithm is not suitable for your needs.  The
          default algorithm maps ‘DEBUG’, ‘INFO’, ‘WARNING’, ‘ERROR’ and
          ‘CRITICAL’ to the equivalent syslog names, and all other level
          names to ’warning’.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue12168

   (2) https://bugs.python.org/issue12419

