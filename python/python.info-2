This is python.info, produced by makeinfo version 6.0 from python.texi.

     Python 3.6.0a0, May 06, 2016

     Georg Brandl

     Copyright © 2001-2016, Python Software Foundation

INFO-DIR-SECTION Documentation tools
START-INFO-DIR-ENTRY
* Python: (python.info). The Python Programming Language
END-INFO-DIR-ENTRY


   Generated by Sphinx 1.4.1.


File: python.info,  Node: Removed<2>,  Next: Porting to Python 3 5,  Prev: Deprecated<2>,  Up: What's New In Python 3 5

1.2.10 Removed
--------------

* Menu:

* API and Feature Removals: API and Feature Removals<2>. 


File: python.info,  Node: API and Feature Removals<2>,  Up: Removed<2>

1.2.10.1 API and Feature Removals
.................................

The following obsolete and previously deprecated APIs and features have
been removed:

   * The ‘__version__’ attribute has been dropped from the email
     package.  The email code hasn’t been shipped separately from the
     stdlib for a long time, and the ‘__version__’ string was not
     updated in the last few releases.

   * The internal ‘Netrc’ class in the *note ftplib: 83. module was
     deprecated in 3.4, and has now been removed.  (Contributed by Matt
     Chaput in issue 6623(1).)

   * The concept of ‘.pyo’ files has been removed.

   * The JoinableQueue class in the provisional *note asyncio: a. module
     was deprecated in 3.4.4 and is now removed.  (Contributed by A.
     Jesse Jiryu Davis in issue 23464(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue6623

   (2) https://bugs.python.org/issue23464


File: python.info,  Node: Porting to Python 3 5,  Prev: Removed<2>,  Up: What's New In Python 3 5

1.2.11 Porting to Python 3.5
----------------------------

This section lists previously described changes and other bugfixes that
may require changes to your code.

* Menu:

* Changes in Python behavior:: 
* Changes in the Python API: Changes in the Python API<2>. 
* Changes in the C API: Changes in the C API<2>. 


File: python.info,  Node: Changes in Python behavior,  Next: Changes in the Python API<2>,  Up: Porting to Python 3 5

1.2.11.1 Changes in Python behavior
...................................

   * Due to an oversight, earlier Python versions erroneously accepted
     the following syntax:

          f(1 for x in [1], *args)
          f(1 for x in [1], **kwargs)

     Python 3.5 now correctly raises a *note SyntaxError: 3a6, as
     generator expressions must be put in parentheses if not a sole
     argument to a function.


File: python.info,  Node: Changes in the Python API<2>,  Next: Changes in the C API<2>,  Prev: Changes in Python behavior,  Up: Porting to Python 3 5

1.2.11.2 Changes in the Python API
..................................

   * PEP 475(1): System calls are now retried when interrupted by a
     signal instead of raising *note InterruptedError: 1e7. if the
     Python signal handler does not raise an exception.

   * Before Python 3.5, a *note datetime.time: 3a8. object was
     considered to be false if it represented midnight in UTC. This
     behavior was considered obscure and error-prone and has been
     removed in Python 3.5.  See issue 13936(2) for full details.

   * The ‘ssl.SSLSocket.send()’ method now raises either *note
     ssl.SSLWantReadError: 324. or *note ssl.SSLWantWriteError: 325. on
     a non-blocking socket if the operation would block.  Previously, it
     would return ‘0’.  (Contributed by Nikolaus Rath in issue
     20951(3).)

   * The ‘__name__’ attribute of generators is now set from the function
     name, instead of being set from the code name.  Use
     ‘gen.gi_code.co_name’ to retrieve the code name.  Generators also
     have a new ‘__qualname__’ attribute, the qualified name, which is
     now used for the representation of a generator (‘repr(gen)’).
     (Contributed by Victor Stinner in issue 21205(4).)

   * The deprecated "strict" mode and argument of *note HTMLParser: 3a9,
     ‘HTMLParser.error()’, and the ‘HTMLParserError’ exception have been
     removed.  (Contributed by Ezio Melotti in issue 15114(5).)  The
     `convert_charrefs' argument of *note HTMLParser: 3a9. is now ‘True’
     by default.  (Contributed by Berker Peksag in issue 21047(6).)

   * Although it is not formally part of the API, it is worth noting for
     porting purposes (ie: fixing tests) that error messages that were
     previously of the form "’sometype’ does not support the buffer
     protocol" are now of the form "a *note bytes-like object: 36b. is
     required, not ’sometype’".  (Contributed by Ezio Melotti in issue
     16518(7).)

   * If the current directory is set to a directory that no longer
     exists then *note FileNotFoundError: 3aa. will no longer be raised
     and instead *note find_spec(): 3ab. will return ‘None’ `without'
     caching ‘None’ in *note sys.path_importer_cache: 3ac, which is
     different than the typical case (issue 22834(8)).

   * HTTP status code and messages from *note http.client: 93. and *note
     http.server: 96. were refactored into a common *note HTTPStatus:
     295. enum.  The values in *note http.client: 93. and *note
     http.server: 96. remain available for backwards compatibility.
     (Contributed by Demian Brecht in issue 21793(9).)

   * When an import loader defines
     ‘importlib.machinery.Loader.exec_module()’ it is now expected to
     also define ‘create_module()’ (raises a *note DeprecationWarning:
     192. now, will be an error in Python 3.6).  If the loader inherits
     from *note importlib.abc.Loader: 3ad. then there is nothing to do,
     else simply define ‘create_module()’ to return ‘None’.
     (Contributed by Brett Cannon in issue 23014(10).)

   * The *note re.split(): 3ae. function always ignored empty pattern
     matches, so the ‘"x*"’ pattern worked the same as ‘"x+"’, and the
     ‘"\b"’ pattern never worked.  Now *note re.split(): 3ae. raises a
     warning if the pattern could match an empty string.  For
     compatibility, use patterns that never match an empty string (e.g.
     ‘"x+"’ instead of ‘"x*"’).  Patterns that could only match an empty
     string (such as ‘"\b"’) now raise an error.  (Contributed by Serhiy
     Storchaka in issue 22818(11).)

   * The *note http.cookies.Morsel: 394. dict-like interface has been
     made self consistent: morsel comparison now takes the *note key:
     391. and *note value: 392. into account, *note copy(): 3af. now
     results in a *note Morsel: 394. instance rather than a *note dict:
     3b0, and *note update(): 3b1. will now raise an exception if any of
     the keys in the update dictionary are invalid.  In addition, the
     undocumented `LegalChars' parameter of *note set(): 395. is
     deprecated and is now ignored.  (Contributed by Demian Brecht in
     issue 2211(12).)

   * PEP 488(13) has removed ‘.pyo’ files from Python and introduced the
     optional ‘opt-’ tag in ‘.pyc’ file names.  The *note
     importlib.util.cache_from_source(): 223. has gained an
     `optimization' parameter to help control the ‘opt-’ tag.  Because
     of this, the `debug_override' parameter of the function is now
     deprecated.  ‘.pyo’ files are also no longer supported as a file
     argument to the Python interpreter and thus serve no purpose when
     distributed on their own (i.e.  sourcless code distribution).  Due
     to the fact that the magic number for bytecode has changed in
     Python 3.5, all old ‘.pyo’ files from previous versions of Python
     are invalid regardless of this PEP.

   * The *note socket: ed. module now exports the *note
     CAN_RAW_FD_FRAMES: 3b2. constant on linux 3.6 and greater.

   * The *note ssl.cert_time_to_seconds(): 326. function now interprets
     the input time as UTC and not as local time, per RFC 5280(14).
     Additionally, the return value is always an *note int: 227.
     (Contributed by Akira Li in issue 19940(15).)

   * The ‘pygettext.py’ Tool now uses the standard +NNNN format for
     timezones in the POT-Creation-Date header.

   * The *note smtplib: eb. module now uses *note sys.stderr: 270.
     instead of the previous module-level ‘stderr’ variable for debug
     output.  If your (test) program depends on patching the
     module-level variable to capture the debug output, you will need to
     update it to capture sys.stderr instead.

   * The *note str.startswith(): 3b3. and *note str.endswith(): 3b4.
     methods no longer return ‘True’ when finding the empty string and
     the indexes are completely out of range.  (Contributed by Serhiy
     Storchaka in issue 24284(16).)

   * The *note inspect.getdoc(): 3b5. function now returns documentation
     strings inherited from base classes.  Documentation strings no
     longer need to be duplicated if the inherited documentation is
     appropriate.  To suppress an inherited string, an empty string must
     be specified (or the documentation may be filled in).  This change
     affects the output of the *note pydoc: d7. module and the *note
     help(): 3b6. function.  (Contributed by Serhiy Storchaka in issue
     15582(17).)

   * Nested *note functools.partial(): 3b7. calls are now flattened.  If
     you were relying on the previous behavior, you can now either add
     an attribute to a *note functools.partial(): 3b7. object or you can
     create a subclass of *note functools.partial(): 3b7.  (Contributed
     by Alexander Belopolsky in issue 7830(18).)

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0475

   (2) https://bugs.python.org/issue13936

   (3) https://bugs.python.org/issue20951

   (4) https://bugs.python.org/issue21205

   (5) https://bugs.python.org/issue15114

   (6) https://bugs.python.org/issue21047

   (7) https://bugs.python.org/issue16518

   (8) https://bugs.python.org/issue22834

   (9) https://bugs.python.org/issue21793

   (10) https://bugs.python.org/issue23014

   (11) https://bugs.python.org/issue22818

   (12) https://bugs.python.org/issue2211

   (13) https://www.python.org/dev/peps/pep-0488

   (14) https://tools.ietf.org/html/rfc5280.html

   (15) https://bugs.python.org/issue19940

   (16) https://bugs.python.org/issue24284

   (17) https://bugs.python.org/issue15582

   (18) https://bugs.python.org/issue7830


File: python.info,  Node: Changes in the C API<2>,  Prev: Changes in the Python API<2>,  Up: Porting to Python 3 5

1.2.11.3 Changes in the C API
.............................

   * The undocumented ‘format’ member of the (non-public)
     ‘PyMemoryViewObject’ structure has been removed.  All extensions
     relying on the relevant parts in ‘memoryobject.h’ must be rebuilt.

   * The ‘PyMemAllocator’ structure was renamed to *note
     PyMemAllocatorEx: 3b9. and a new ‘calloc’ field was added.

   * Removed non-documented macro ‘PyObject_REPR’ which leaked
     references.  Use format character ‘%R’ in *note
     PyUnicode_FromFormat(): 3ba.-like functions to format the *note
     repr(): 3bb. of the object.  (Contributed by Serhiy Storchaka in
     issue 22453(1).)

   * Because the lack of the ‘__module__’ attribute breaks pickling and
     introspection, a deprecation warning is now raised for builtin
     types without the ‘__module__’ attribute.  This would be an
     AttributeError in the future.  (Contributed by Serhiy Storchaka in
     issue 20204(2).)

   * As part of the PEP 492(3) implementation, the ‘tp_reserved’ slot of
     *note PyTypeObject: 3bc. was replaced with a *note tp_as_async:
     3bd. slot.  Refer to *note Coroutine Objects: 3be. for new types,
     structures and functions.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue22453

   (2) https://bugs.python.org/issue20204

   (3) https://www.python.org/dev/peps/pep-0492


File: python.info,  Node: What's New In Python 3 4,  Next: What's New In Python 3 3,  Prev: What's New In Python 3 5,  Up: What's New in Python

1.3 What’s New In Python 3.4
============================


Author: R. David Murray <<rdmurray@bitdance.com>> (Editor)

This article explains the new features in Python 3.4, compared to 3.3.
Python 3.4 was released on March 16, 2014.  For full details, see the
changelog(1).

See also
........

PEP 429(2) – Python 3.4 Release Schedule

* Menu:

* Summary: Summary -- Release Highlights. Release Highlights
* New Features: New Features<3>. 
* New Modules: New Modules<3>. 
* Improved Modules: Improved Modules<3>. 
* CPython Implementation Changes:: 
* Deprecated: Deprecated<3>. 
* Removed: Removed<3>. 
* Porting to Python 3.4: Porting to Python 3 4. 
* Changed in 3.4.3: Changed in 3 4 3. 

   ---------- Footnotes ----------

   (1) https://docs.python.org/3.4/whatsnew/changelog.html

   (2) https://www.python.org/dev/peps/pep-0429


File: python.info,  Node: Summary -- Release Highlights,  Next: New Features<3>,  Up: What's New In Python 3 4

1.3.1 Summary – Release Highlights
----------------------------------

New syntax features:

   * No new syntax features were added in Python 3.4.

Other new features:

   * *note pip should always be available: 3c2. ( PEP 453(1)).

   * *note Newly created file descriptors are non-inheritable: 3c3. (
     PEP 446(2)).

   * command line option for *note isolated mode: 3c4. (issue 16499(3)).

   * *note improvements in the handling of codecs: 3c5. that are not
     text encodings (multiple issues).

   * *note A ModuleSpec Type: 3c6. for the Import System ( PEP 451(4)).
     (Affects importer authors.)

   * The *note marshal: af. format has been made *note more compact and
     efficient: 3c7. (issue 16475(5)).

New library modules:

   * *note asyncio: a.: *note New provisional API for asynchronous IO:
     3c8. ( PEP 3156(6)).

   * *note ensurepip: 78.: *note Bootstrapping the pip installer: 3c9. (
     PEP 453(7)).

   * *note enum: 79.: *note Support for enumeration types: 3ca. ( PEP
     435(8)).

   * *note pathlib: c6.: *note Object-oriented filesystem paths: 3cb. (
     PEP 428(9)).

   * *note selectors: e4.: *note High-level and efficient I/O
     multiplexing: 3cc, built upon the *note select: e3. module
     primitives (part of PEP 3156(10)).

   * *note statistics: f3.: A basic *note numerically stable statistics
     library: 3cd. ( PEP 450(11)).

   * *note tracemalloc: 111.: *note Trace Python memory allocations:
     3ce. ( PEP 454(12)).

Significantly improved library modules:

   * *note Single-dispatch generic functions: 3cf. in *note functools:
     84. ( PEP 443(13)).

   * New *note pickle: c8. *note protocol 4: 3d0. ( PEP 3154(14)).

   * *note multiprocessing: b6. now has *note an option to avoid using
     os.fork on Unix: 3d1. (issue 8713(15)).

   * *note email: 67. has a new submodule, *note contentmanager: 69, and
     a new *note Message: 3d2. subclass (‘EmailMessage’) that *note
     simplify MIME handling: 3d3. (issue 18891(16)).

   * The *note inspect: 9e. and *note pydoc: d7. modules are now capable
     of correct introspection of a much wider variety of callable
     objects, which improves the output of the Python *note help(): 3b6.
     system.

   * The *note ipaddress: a0. module API has been declared stable

Security improvements:

   * *note Secure and interchangeable hash algorithm: 3d4. ( PEP
     456(17)).

   * *note Make newly created file descriptors non-inheritable: 3c3. (
     PEP 446(18)) to avoid leaking file descriptors to child processes.

   * New command line option for *note isolated mode: 3c4, (issue
     16499(19)).

   * *note multiprocessing: b6. now has *note an option to avoid using
     os.fork on Unix: 3d1.  `spawn' and `forkserver' are more secure
     because they avoid sharing data with child processes.

   * *note multiprocessing: b6. child processes on Windows no longer
     inherit all of the parent’s inheritable handles, only the necessary
     ones.

   * A new *note hashlib.pbkdf2_hmac(): 3d5. function provides the
     PKCS#5 password-based key derivation function 2(20).

   * *note TLSv1.1 and TLSv1.2 support: 3d6. for *note ssl: f1.

   * *note Retrieving certificates from the Windows system cert store
     support: 3d7. for *note ssl: f1.

   * *note Server-side SNI (Server Name Indication) support: 3d8. for
     *note ssl: f1.

   * The *note ssl.SSLContext: 1c6. class has a *note lot of
     improvements: 3d9.

   * All modules in the standard library that support SSL now support
     server certificate verification, including hostname matching (*note
     ssl.match_hostname(): 32b.) and CRLs (Certificate Revocation lists,
     see *note ssl.SSLContext.load_verify_locations(): 3da.).

CPython implementation improvements:

   * *note Safe object finalization: 3db. ( PEP 442(21)).

   * Leveraging PEP 442(22), in most cases *note module globals are no
     longer set to None during finalization: 3db. (issue 18214(23)).

   * *note Configurable memory allocators: 3dc. ( PEP 445(24)).

   * *note Argument Clinic: 3dd. ( PEP 436(25)).

Please read on for a comprehensive list of user-facing changes,
including many other smaller improvements, CPython optimizations,
deprecations, and potential porting issues.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0453

   (2) https://www.python.org/dev/peps/pep-0446

   (3) https://bugs.python.org/issue16499

   (4) https://www.python.org/dev/peps/pep-0451

   (5) https://bugs.python.org/issue16475

   (6) https://www.python.org/dev/peps/pep-3156

   (7) https://www.python.org/dev/peps/pep-0453

   (8) https://www.python.org/dev/peps/pep-0435

   (9) https://www.python.org/dev/peps/pep-0428

   (10) https://www.python.org/dev/peps/pep-3156

   (11) https://www.python.org/dev/peps/pep-0450

   (12) https://www.python.org/dev/peps/pep-0454

   (13) https://www.python.org/dev/peps/pep-0443

   (14) https://www.python.org/dev/peps/pep-3154

   (15) https://bugs.python.org/issue8713

   (16) https://bugs.python.org/issue18891

   (17) https://www.python.org/dev/peps/pep-0456

   (18) https://www.python.org/dev/peps/pep-0446

   (19) https://bugs.python.org/issue16499

   (20) https://en.wikipedia.org/wiki/PBKDF2

   (21) https://www.python.org/dev/peps/pep-0442

   (22) https://www.python.org/dev/peps/pep-0442

   (23) https://bugs.python.org/issue18214

   (24) https://www.python.org/dev/peps/pep-0445

   (25) https://www.python.org/dev/peps/pep-0436


File: python.info,  Node: New Features<3>,  Next: New Modules<3>,  Prev: Summary -- Release Highlights,  Up: What's New In Python 3 4

1.3.2 New Features
------------------

* Menu:

* PEP 453; Explicit Bootstrapping of PIP in Python Installations: PEP 453 Explicit Bootstrapping of PIP in Python Installations. 
* PEP 446; Newly Created File Descriptors Are Non-Inheritable: PEP 446 Newly Created File Descriptors Are Non-Inheritable. 
* Improvements to Codec Handling:: 
* PEP 451; A ModuleSpec Type for the Import System: PEP 451 A ModuleSpec Type for the Import System. 
* Other Language Changes: Other Language Changes<3>. 


File: python.info,  Node: PEP 453 Explicit Bootstrapping of PIP in Python Installations,  Next: PEP 446 Newly Created File Descriptors Are Non-Inheritable,  Up: New Features<3>

1.3.2.1 PEP 453: Explicit Bootstrapping of PIP in Python Installations
......................................................................

* Menu:

* Bootstrapping pip By Default:: 
* Documentation Changes:: 


File: python.info,  Node: Bootstrapping pip By Default,  Next: Documentation Changes,  Up: PEP 453 Explicit Bootstrapping of PIP in Python Installations

1.3.2.2 Bootstrapping pip By Default
....................................

The new *note ensurepip: 78. module (defined in PEP 453(1)) provides a
standard cross-platform mechanism to bootstrap the pip installer into
Python installations and virtual environments.  The version of ‘pip’
included with Python 3.4.0 is ‘pip’ 1.5.4, and future 3.4.x maintenance
releases will update the bundled version to the latest version of ‘pip’
that is available at the time of creating the release candidate.

By default, the commands ‘pipX’ and ‘pipX.Y’ will be installed on all
platforms (where X.Y stands for the version of the Python installation),
along with the ‘pip’ Python package and its dependencies.  On Windows
and in virtual environments on all platforms, the unversioned ‘pip’
command will also be installed.  On other platforms, the system wide
unversioned ‘pip’ command typically refers to the separately installed
Python 2 version.

The *note pyvenv: 3e1. command line utility and the *note venv: 122.
module make use of the *note ensurepip: 78. module to make ‘pip’ readily
available in virtual environments.  When using the command line utility,
‘pip’ is installed by default, while when using the *note venv: 122.
module *note API: 3e2. installation of ‘pip’ must be requested
explicitly.

For CPython *note source builds on POSIX systems: 3e3, the ‘make
install’ and ‘make altinstall’ commands bootstrap ‘pip’ by default.
This behaviour can be controlled through configure options, and
overridden through Makefile options.

On Windows and Mac OS X, the CPython installers now default to
installing ‘pip’ along with CPython itself (users may opt out of
installing it during the installation process).  Window users will need
to opt in to the automatic ‘PATH’ modifications to have ‘pip’ available
from the command line by default, otherwise it can still be accessed
through the Python launcher for Windows as ‘py -m pip’.

As discussed in the PEP(2), platform packagers may choose not to install
these commands by default, as long as, when invoked, they provide clear
and simple directions on how to install them on that platform (usually
using the system package manager).

     Note: To avoid conflicts between parallel Python 2 and Python 3
     installations, only the versioned ‘pip3’ and ‘pip3.4’ commands are
     bootstrapped by default when ‘ensurepip’ is invoked directly - the
     ‘--default-pip’ option is needed to also request the unversioned
     ‘pip’ command.  ‘pyvenv’ and the Windows installer ensure that the
     unqualified ‘pip’ command is made available in those environments,
     and ‘pip’ can always be invoked via the ‘-m’ switch rather than
     directly to avoid ambiguity on systems with multiple Python
     installations.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0453

   (2) 
https://www.python.org/dev/peps/pep-0453/#recommendations-for-downstream-distributors


File: python.info,  Node: Documentation Changes,  Prev: Bootstrapping pip By Default,  Up: PEP 453 Explicit Bootstrapping of PIP in Python Installations

1.3.2.3 Documentation Changes
.............................

As part of this change, the *note Installing Python Modules: 3e5. and
*note Distributing Python Modules: 3e6. sections of the documentation
have been completely redesigned as short getting started and FAQ
documents.  Most packaging documentation has now been moved out to the
Python Packaging Authority maintained Python Packaging User Guide(1) and
the documentation of the individual projects.

However, as this migration is currently still incomplete, the legacy
versions of those guides remaining available as *note Installing Python
Modules (Legacy version): 3e7. and *note Distributing Python Modules
(Legacy version): 3e8.

See also
........

PEP 453(2) – Explicit bootstrapping of pip in Python installations

     PEP written by Donald Stufft and Nick Coghlan, implemented by
     Donald Stufft, Nick Coghlan, Martin von Löwis and Ned Deily.

   ---------- Footnotes ----------

   (1) https://packaging.python.org

   (2) https://www.python.org/dev/peps/pep-0453


File: python.info,  Node: PEP 446 Newly Created File Descriptors Are Non-Inheritable,  Next: Improvements to Codec Handling,  Prev: PEP 453 Explicit Bootstrapping of PIP in Python Installations,  Up: New Features<3>

1.3.2.4 PEP 446: Newly Created File Descriptors Are Non-Inheritable
...................................................................

PEP 446(1) makes newly created file descriptors *note non-inheritable:
3ea.  In general, this is the behavior an application will want: when
launching a new process, having currently open files also open in the
new process can lead to all sorts of hard to find bugs, and potentially
to security issues.

However, there are occasions when inheritance is desired.  To support
these cases, the following new functions and methods are available:

   * *note os.get_inheritable(): 3eb, *note os.set_inheritable(): 3ec.

   * *note os.get_handle_inheritable(): 3ed, *note
     os.set_handle_inheritable(): 3ee.

   * *note socket.socket.get_inheritable(): 3ef, *note
     socket.socket.set_inheritable(): 3f0.

See also
........

PEP 446(2) – Make newly created file descriptors non-inheritable

     PEP written and implemented by Victor Stinner.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0446

   (2) https://www.python.org/dev/peps/pep-0446


File: python.info,  Node: Improvements to Codec Handling,  Next: PEP 451 A ModuleSpec Type for the Import System,  Prev: PEP 446 Newly Created File Descriptors Are Non-Inheritable,  Up: New Features<3>

1.3.2.5 Improvements to Codec Handling
......................................

Since it was first introduced, the *note codecs: 1c. module has always
been intended to operate as a type-neutral dynamic encoding and decoding
system.  However, its close coupling with the Python text model,
especially the type restricted convenience methods on the builtin *note
str: 25a, *note bytes: 1db. and *note bytearray: 1dc. types, has
historically obscured that fact.

As a key step in clarifying the situation, the *note codecs.encode():
3f2. and *note codecs.decode(): 3f3. convenience functions are now
properly documented in Python 2.7, 3.3 and 3.4.  These functions have
existed in the *note codecs: 1c. module (and have been covered by the
regression test suite) since Python 2.4, but were previously only
discoverable through runtime introspection.

Unlike the convenience methods on *note str: 25a, *note bytes: 1db. and
*note bytearray: 1dc, the *note codecs: 1c. convenience functions
support arbitrary codecs in both Python 2 and Python 3, rather than
being limited to Unicode text encodings (in Python 3) or ‘basestring’
<-> ‘basestring’ conversions (in Python 2).

In Python 3.4, the interpreter is able to identify the known non-text
encodings provided in the standard library and direct users towards
these general purpose convenience functions when appropriate:

     >>> b"abcdef".decode("hex")
     Traceback (most recent call last):
       File "<stdin>", line 1, in <module>
     LookupError: 'hex' is not a text encoding; use codecs.decode() to handle arbitrary codecs

     >>> "hello".encode("rot13")
     Traceback (most recent call last):
       File "<stdin>", line 1, in <module>
     LookupError: 'rot13' is not a text encoding; use codecs.encode() to handle arbitrary codecs

     >>> open("foo.txt", encoding="hex")
     Traceback (most recent call last):
       File "<stdin>", line 1, in <module>
     LookupError: 'hex' is not a text encoding; use codecs.open() to handle arbitrary codecs

In a related change, whenever it is feasible without breaking backwards
compatibility, exceptions raised during encoding and decoding operations
are wrapped in a chained exception of the same type that mentions the
name of the codec responsible for producing the error:

     >>> import codecs

     >>> codecs.decode(b"abcdefgh", "hex")
     Traceback (most recent call last):
       File "/usr/lib/python3.4/encodings/hex_codec.py", line 20, in hex_decode
         return (binascii.a2b_hex(input), len(input))
     binascii.Error: Non-hexadecimal digit found

     The above exception was the direct cause of the following exception:

     Traceback (most recent call last):
       File "<stdin>", line 1, in <module>
     binascii.Error: decoding with 'hex' codec failed (Error: Non-hexadecimal digit found)

     >>> codecs.encode("hello", "bz2")
     Traceback (most recent call last):
       File "/usr/lib/python3.4/encodings/bz2_codec.py", line 17, in bz2_encode
         return (bz2.compress(input), len(input))
       File "/usr/lib/python3.4/bz2.py", line 498, in compress
         return comp.compress(data) + comp.flush()
     TypeError: 'str' does not support the buffer interface

     The above exception was the direct cause of the following exception:

     Traceback (most recent call last):
       File "<stdin>", line 1, in <module>
     TypeError: encoding with 'bz2' codec failed (TypeError: 'str' does not support the buffer interface)

Finally, as the examples above show, these improvements have permitted
the restoration of the convenience aliases for the non-Unicode codecs
that were themselves restored in Python 3.2.  This means that encoding
binary data to and from its hexadecimal representation (for example) can
now be written as:

     >>> from codecs import encode, decode
     >>> encode(b"hello", "hex")
     b'68656c6c6f'
     >>> decode(b"68656c6c6f", "hex")
     b'hello'

The binary and text transforms provided in the standard library are
detailed in *note Binary Transforms: 3f4. and *note Text Transforms:
3f5.

(Contributed by Nick Coghlan in issue 7475(1), issue 17827(2), issue
17828(3) and issue 19619(4).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue7475

   (2) https://bugs.python.org/issue17827

   (3) https://bugs.python.org/issue17828

   (4) https://bugs.python.org/issue19619


File: python.info,  Node: PEP 451 A ModuleSpec Type for the Import System,  Next: Other Language Changes<3>,  Prev: Improvements to Codec Handling,  Up: New Features<3>

1.3.2.6 PEP 451: A ModuleSpec Type for the Import System
........................................................

PEP 451(1) provides an encapsulation of the information about a module
that the import machinery will use to load it (that is, a module
specification).  This helps simplify both the import implementation and
several import-related APIs.  The change is also a stepping stone for
several future import-related improvements(2).

The public-facing changes from the PEP are entirely backward-compatible.
Furthermore, they should be transparent to everyone but importer
authors.  Key finder and loader methods have been deprecated, but they
will continue working.  New importers should use the new methods
described in the PEP. Existing importers should be updated to implement
the new methods.  See the *note Deprecated: 3f7. section for a list of
methods that should be replaced and their replacements.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0451

   (2) 
https://mail.python.org/pipermail/python-dev/2013-November/130111.html


File: python.info,  Node: Other Language Changes<3>,  Prev: PEP 451 A ModuleSpec Type for the Import System,  Up: New Features<3>

1.3.2.7 Other Language Changes
..............................

Some smaller changes made to the core Python language are:

   * Unicode database updated to UCD version 6.3.

   * *note min(): 3f9. and *note max(): 3fa. now accept a `default'
     keyword-only argument that can be used to specify the value they
     return if the iterable they are evaluating has no elements.
     (Contributed by Julian Berman in issue 18111(1).)

   * Module objects are now *note weakref: 125.’able.

   * Module ‘__file__’ attributes (and related values) should now always
     contain absolute paths by default, with the sole exception of
     ‘__main__.__file__’ when a script has been executed directly using
     a relative path.  (Contributed by Brett Cannon in issue 18416(2).)

   * All the UTF-* codecs (except UTF-7) now reject surrogates during
     both encoding and decoding unless the ‘surrogatepass’ error handler
     is used, with the exception of the UTF-16 decoder (which accepts
     valid surrogate pairs) and the UTF-16 encoder (which produces them
     while encoding non-BMP characters).  (Contributed by Victor
     Stinner, Kang-Hao (Kenny) Lu and Serhiy Storchaka in issue
     12892(3).)

   * New German EBCDIC *note codec: 228. ‘cp273’.  (Contributed by
     Michael Bierenfeld and Andrew Kuchling in issue 1097797(4).)

   * New Ukrainian *note codec: 228. ‘cp1125’.  (Contributed by Serhiy
     Storchaka in issue 19668(5).)

   * *note bytes: 1db.join() and *note bytearray: 1dc.join() now accept
     arbitrary buffer objects as arguments.  (Contributed by Antoine
     Pitrou in issue 15958(6).)

   * The *note int: 227. constructor now accepts any object that has an
     ‘__index__’ method for its `base' argument.  (Contributed by Mark
     Dickinson in issue 16772(7).)

   * Frame objects now have a *note clear(): 3fb. method that clears all
     references to local variables from the frame.  (Contributed by
     Antoine Pitrou in issue 17934(8).)

   * *note memoryview: 1b7. is now registered as a *note Sequence: 1f,
     and supports the *note reversed(): 24d. builtin.  (Contributed by
     Nick Coghlan and Claudiu Popa in issue 18690(9) and issue
     19078(10).)

   * Signatures reported by *note help(): 3b6. have been modified and
     improved in several cases as a result of the introduction of
     Argument Clinic and other changes to the *note inspect: 9e. and
     *note pydoc: d7. modules.

   * *note __length_hint__(): 3fc. is now part of the formal language
     specification (see PEP 424(11)).  (Contributed by Armin Ronacher in
     issue 16148(12).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue18111

   (2) https://bugs.python.org/issue18416

   (3) https://bugs.python.org/issue12892

   (4) https://bugs.python.org/issue1097797

   (5) https://bugs.python.org/issue19668

   (6) https://bugs.python.org/issue15958

   (7) https://bugs.python.org/issue16772

   (8) https://bugs.python.org/issue17934

   (9) https://bugs.python.org/issue18690

   (10) https://bugs.python.org/issue19078

   (11) https://www.python.org/dev/peps/pep-0424

   (12) https://bugs.python.org/issue16148


File: python.info,  Node: New Modules<3>,  Next: Improved Modules<3>,  Prev: New Features<3>,  Up: What's New In Python 3 4

1.3.3 New Modules
-----------------

* Menu:

* asyncio: asyncio<2>. 
* ensurepip:: 
* enum: enum<2>. 
* pathlib: pathlib<2>. 
* selectors: selectors<2>. 
* statistics:: 
* tracemalloc:: 


File: python.info,  Node: asyncio<2>,  Next: ensurepip,  Up: New Modules<3>

1.3.3.1 asyncio
...............

The new *note asyncio: a. module (defined in PEP 3156(1)) provides a
standard pluggable event loop model for Python, providing solid
asynchronous IO support in the standard library, and making it easier
for other event loop implementations to interoperate with the standard
library and each other.

For Python 3.4, this module is considered a *note provisional API: 1de.

See also
........

PEP 3156(2) – Asynchronous IO Support Rebooted: the "asyncio" Module

     PEP written and implementation led by Guido van Rossum.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3156

   (2) https://www.python.org/dev/peps/pep-3156


File: python.info,  Node: ensurepip,  Next: enum<2>,  Prev: asyncio<2>,  Up: New Modules<3>

1.3.3.2 ensurepip
.................

The new *note ensurepip: 78. module is the primary infrastructure for
the PEP 453(1) implementation.  In the normal course of events end users
will not need to interact with this module, but it can be used to
manually bootstrap ‘pip’ if the automated bootstrapping into an
installation or virtual environment was declined.

*note ensurepip: 78. includes a bundled copy of ‘pip’, up-to-date as of
the first release candidate of the release of CPython with which it
ships (this applies to both maintenance releases and feature releases).
‘ensurepip’ does not access the internet.  If the installation has
Internet access, after ‘ensurepip’ is run the bundled ‘pip’ can be used
to upgrade ‘pip’ to a more recent release than the bundled one.  (Note
that such an upgraded version of ‘pip’ is considered to be a separately
installed package and will not be removed if Python is uninstalled.)

The module is named `ensure'pip because if called when ‘pip’ is already
installed, it does nothing.  It also has an ‘--upgrade’ option that will
cause it to install the bundled copy of ‘pip’ if the existing installed
version of ‘pip’ is older than the bundled copy.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0453


File: python.info,  Node: enum<2>,  Next: pathlib<2>,  Prev: ensurepip,  Up: New Modules<3>

1.3.3.3 enum
............

The new *note enum: 79. module (defined in PEP 435(1)) provides a
standard implementation of enumeration types, allowing other modules
(such as *note socket: ed.) to provide more informative error messages
and better debugging support by replacing opaque integer constants with
backwards compatible enumeration values.

See also
........

PEP 435(2) – Adding an Enum type to the Python standard library

     PEP written by Barry Warsaw, Eli Bendersky and Ethan Furman,
     implemented by Ethan Furman.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0435

   (2) https://www.python.org/dev/peps/pep-0435


File: python.info,  Node: pathlib<2>,  Next: selectors<2>,  Prev: enum<2>,  Up: New Modules<3>

1.3.3.4 pathlib
...............

The new *note pathlib: c6. module offers classes representing filesystem
paths with semantics appropriate for different operating systems.  Path
classes are divided between `pure paths', which provide purely
computational operations without I/O, and `concrete paths', which
inherit from pure paths but also provide I/O operations.

For Python 3.4, this module is considered a *note provisional API: 1de.

See also
........

PEP 428(1) – The pathlib module – object-oriented filesystem paths

     PEP written and implemented by Antoine Pitrou.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0428


File: python.info,  Node: selectors<2>,  Next: statistics,  Prev: pathlib<2>,  Up: New Modules<3>

1.3.3.5 selectors
.................

The new *note selectors: e4. module (created as part of implementing PEP
3156(1)) allows high-level and efficient I/O multiplexing, built upon
the *note select: e3. module primitives.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3156


File: python.info,  Node: statistics,  Next: tracemalloc,  Prev: selectors<2>,  Up: New Modules<3>

1.3.3.6 statistics
..................

The new *note statistics: f3. module (defined in PEP 450(1)) offers some
core statistics functionality directly in the standard library.  This
module supports calculation of the mean, median, mode, variance and
standard deviation of a data series.

See also
........

PEP 450(2) – Adding A Statistics Module To The Standard Library

     PEP written and implemented by Steven D’Aprano

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0450

   (2) https://www.python.org/dev/peps/pep-0450


File: python.info,  Node: tracemalloc,  Prev: statistics,  Up: New Modules<3>

1.3.3.7 tracemalloc
...................

The new *note tracemalloc: 111. module (defined in PEP 454(1)) is a
debug tool to trace memory blocks allocated by Python.  It provides the
following information:

   * Trace where an object was allocated

   * Statistics on allocated memory blocks per filename and per line
     number: total size, number and average size of allocated memory
     blocks

   * Compute the differences between two snapshots to detect memory
     leaks

See also
........

PEP 454(2) – Add a new tracemalloc module to trace Python memory allocations

     PEP written and implemented by Victor Stinner

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0454

   (2) https://www.python.org/dev/peps/pep-0454


File: python.info,  Node: Improved Modules<3>,  Next: CPython Implementation Changes,  Prev: New Modules<3>,  Up: What's New In Python 3 4

1.3.4 Improved Modules
----------------------

* Menu:

* abc:: 
* aifc:: 
* argparse: argparse<2>. 
* audioop:: 
* base64:: 
* collections: collections<2>. 
* colorsys:: 
* contextlib: contextlib<3>. 
* dbm: dbm<2>. 
* dis:: 
* doctest: doctest<2>. 
* email: email<2>. 
* filecmp:: 
* functools: functools<2>. 
* gc:: 
* glob: glob<2>. 
* hashlib:: 
* hmac:: 
* html:: 
* http: http<2>. 
* idlelib and IDLE: idlelib and IDLE<2>. 
* importlib: importlib<2>. 
* inspect: inspect<2>. 
* ipaddress: ipaddress<2>. 
* logging: logging<2>. 
* marshal:: 
* mmap:: 
* multiprocessing: multiprocessing<2>. 
* operator: operator<2>. 
* os: os<3>. 
* pdb:: 
* pickle: pickle<3>. 
* plistlib:: 
* poplib: poplib<2>. 
* pprint:: 
* pty:: 
* pydoc:: 
* re: re<2>. 
* resource:: 
* select:: 
* shelve:: 
* shutil: shutil<2>. 
* smtpd: smtpd<2>. 
* smtplib: smtplib<2>. 
* socket: socket<2>. 
* sqlite3: sqlite3<2>. 
* ssl: ssl<2>. 
* stat:: 
* struct:: 
* subprocess: subprocess<2>. 
* sunau:: 
* sys: sys<2>. 
* tarfile: tarfile<2>. 
* textwrap:: 
* threading: threading<2>. 
* traceback: traceback<2>. 
* types: types<2>. 
* urllib: urllib<2>. 
* unittest: unittest<2>. 
* venv:: 
* wave:: 
* weakref:: 
* xml.etree: xml etree. 
* zipfile: zipfile<3>. 


File: python.info,  Node: abc,  Next: aifc,  Up: Improved Modules<3>

1.3.4.1 abc
...........

New function *note abc.get_cache_token(): 407. can be used to know when
to invalidate caches that are affected by changes in the object graph.
(Contributed by Łukasz Langa in issue 16832(1).)

New class *note ABC: 408. has *note ABCMeta: 409. as its meta class.
Using ‘ABC’ as a base class has essentially the same effect as
specifying ‘metaclass=abc.ABCMeta’, but is simpler to type and easier to
read.  (Contributed by Bruno Dupuis in issue 16049(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue16832

   (2) https://bugs.python.org/issue16049


File: python.info,  Node: aifc,  Next: argparse<2>,  Prev: abc,  Up: Improved Modules<3>

1.3.4.2 aifc
............

The *note getparams(): 40b. method now returns a namedtuple rather than
a plain tuple.  (Contributed by Claudiu Popa in issue 17818(1).)

*note aifc.open(): 40c. now supports the context management protocol:
when used in a *note with: 29d. block, the *note close(): 40d. method of
the returned object will be called automatically at the end of the
block.  (Contributed by Serhiy Storchacha in issue 16486(2).)

The *note writeframesraw(): 40e. and *note writeframes(): 40f. methods
now accept any *note bytes-like object: 36b.  (Contributed by Serhiy
Storchaka in issue 8311(3).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue17818

   (2) https://bugs.python.org/issue16486

   (3) https://bugs.python.org/issue8311


File: python.info,  Node: argparse<2>,  Next: audioop,  Prev: aifc,  Up: Improved Modules<3>

1.3.4.3 argparse
................

The *note FileType: 411. class now accepts `encoding' and `errors'
arguments, which are passed through to *note open(): 1e8.  (Contributed
by Lucas Maystre in issue 11175(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue11175


File: python.info,  Node: audioop,  Next: base64,  Prev: argparse<2>,  Up: Improved Modules<3>

1.3.4.4 audioop
...............

*note audioop: d. now supports 24-bit samples.  (Contributed by Serhiy
Storchaka in issue 12866(1).)

New *note byteswap(): 413. function converts big-endian samples to
little-endian and vice versa.  (Contributed by Serhiy Storchaka in issue
19641(2).)

All *note audioop: d. functions now accept any *note bytes-like object:
36b.  Strings are not accepted: they didn’t work before, now they raise
an error right away.  (Contributed by Serhiy Storchaka in issue
16685(3).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue12866

   (2) https://bugs.python.org/issue19641

   (3) https://bugs.python.org/issue16685


File: python.info,  Node: base64,  Next: collections<2>,  Prev: audioop,  Up: Improved Modules<3>

1.3.4.5 base64
..............

The encoding and decoding functions in *note base64: e. now accept any
*note bytes-like object: 36b. in cases where it previously required a
*note bytes: 1db. or *note bytearray: 1dc. instance.  (Contributed by
Nick Coghlan in issue 17839(1).)

New functions *note a85encode(): 415, *note a85decode(): 416, *note
b85encode(): 417, and *note b85decode(): 418. provide the ability to
encode and decode binary data from and to ‘Ascii85’ and the
git/mercurial ‘Base85’ formats, respectively.  The ‘a85’ functions have
options that can be used to make them compatible with the variants of
the ‘Ascii85’ encoding, including the Adobe variant.  (Contributed by
Martin Morrison, the Mercurial project, Serhiy Storchaka, and Antoine
Pitrou in issue 17618(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue17839

   (2) https://bugs.python.org/issue17618


File: python.info,  Node: collections<2>,  Next: colorsys,  Prev: base64,  Up: Improved Modules<3>

1.3.4.6 collections
...................

The *note ChainMap.new_child(): 41a. method now accepts an `m' argument
specifying the child map to add to the chain.  This allows an existing
mapping and/or a custom mapping type to be used for the child.
(Contributed by Vinay Sajip in issue 16613(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue16613


File: python.info,  Node: colorsys,  Next: contextlib<3>,  Prev: collections<2>,  Up: Improved Modules<3>

1.3.4.7 colorsys
................

The number of digits in the coefficients for the RGB — YIQ conversions
have been expanded so that they match the FCC NTSC versions.  The change
in results should be less than 1% and may better match results found
elsewhere.  (Contributed by Brian Landers and Serhiy Storchaka in issue
14323(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue14323


File: python.info,  Node: contextlib<3>,  Next: dbm<2>,  Prev: colorsys,  Up: Improved Modules<3>

1.3.4.8 contextlib
..................

The new *note contextlib.suppress: 41d. context manager helps to clarify
the intent of code that deliberately suppresses exceptions from a single
statement.  (Contributed by Raymond Hettinger in issue 15806(1) and Zero
Piraeus in issue 19266(2).)

The new *note contextlib.redirect_stdout(): 26f. context manager makes
it easier for utility scripts to handle inflexible APIs that write their
output to *note sys.stdout: 1ba. and don’t provide any options to
redirect it.  Using the context manager, the *note sys.stdout: 1ba.
output can be redirected to any other stream or, in conjunction with
*note io.StringIO: 41e, to a string.  The latter can be especially
useful, for example, to capture output from a function that was written
to implement a command line interface.  It is recommended only for
utility scripts because it affects the global state of *note sys.stdout:
1ba.  (Contributed by Raymond Hettinger in issue 15805(3).)

The *note contextlib: 24. documentation has also been updated to include
a *note discussion: 41f. of the differences between single use, reusable
and reentrant context managers.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue15806

   (2) https://bugs.python.org/issue19266

   (3) https://bugs.python.org/issue15805


File: python.info,  Node: dbm<2>,  Next: dis,  Prev: contextlib<3>,  Up: Improved Modules<3>

1.3.4.9 dbm
...........

*note dbm.open(): 421. objects now support the context management
protocol.  When used in a *note with: 29d. statement, the ‘close’ method
of the database object will be called automatically at the end of the
block.  (Contributed by Claudiu Popa and Nick Coghlan in issue
19282(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue19282


File: python.info,  Node: dis,  Next: doctest<2>,  Prev: dbm<2>,  Up: Improved Modules<3>

1.3.4.10 dis
............

Functions *note show_code(): 423, *note dis(): 424, *note distb(): 425,
and *note disassemble(): 426. now accept a keyword-only `file' argument
that controls where they write their output.

The *note dis: 36. module is now built around an *note Instruction: 427.
class that provides object oriented access to the details of each
individual bytecode operation.

A new method, *note get_instructions(): 428, provides an iterator that
emits the Instruction stream for a given piece of Python code.  Thus it
is now possible to write a program that inspects and manipulates a
bytecode object in ways different from those provided by the *note dis:
36. module itself.  For example:

     >>> import dis
     >>> for instr in dis.get_instructions(lambda x: x + 1):
     ...     print(instr.opname)
     LOAD_FAST
     LOAD_CONST
     BINARY_ADD
     RETURN_VALUE

The various display tools in the *note dis: 36. module have been
rewritten to use these new components.

In addition, a new application-friendly class *note Bytecode: 429.
provides an object-oriented API for inspecting bytecode in both in
human-readable form and for iterating over instructions.  The *note
Bytecode: 429. constructor takes the same arguments that
‘get_instruction()’ does (plus an optional `current_offset'), and the
resulting object can be iterated to produce *note Instruction: 427.
objects.  But it also has a *note dis: 42a. method, equivalent to
calling *note dis: 424. on the constructor argument, but returned as a
multi-line string:

     >>> bytecode = dis.Bytecode(lambda x: x +1, current_offset=3)
     >>> for instr in bytecode:
     ...     print('{} ({})'.format(instr.opname, instr.opcode))
     LOAD_FAST (124)
     LOAD_CONST (100)
     BINARY_ADD (23)
     RETURN_VALUE (83)
     >>> bytecode.dis().splitlines()       # doctest: +NORMALIZE_WHITESPACE
     ['  1           0 LOAD_FAST                0 (x)',
      '      -->     3 LOAD_CONST               1 (1)',
      '              6 BINARY_ADD',
      '              7 RETURN_VALUE']

*note Bytecode: 429. also has a class method, *note from_traceback():
42b, that provides the ability to manipulate a traceback (that is,
‘print(Bytecode.from_traceback(tb).dis())’ is equivalent to
‘distb(tb)’).

(Contributed by Nick Coghlan, Ryan Kelly and Thomas Kluyver in issue
11816(1) and Claudiu Popa in issue 17916(2).)

New function *note stack_effect(): 42c. computes the effect on the
Python stack of a given opcode and argument, information that is not
otherwise available.  (Contributed by Larry Hastings in issue 19722(3).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue11816

   (2) https://bugs.python.org/issue17916

   (3) https://bugs.python.org/issue19722


File: python.info,  Node: doctest<2>,  Next: email<2>,  Prev: dis,  Up: Improved Modules<3>

1.3.4.11 doctest
................

A new *note option flag: 42e, *note FAIL_FAST: 42f, halts test running
as soon as the first failure is detected.  (Contributed by R. David
Murray and Daniel Urban in issue 16522(1).)

The *note doctest: 65. command line interface now uses *note argparse:
6, and has two new options, ‘-o’ and ‘-f’.  ‘-o’ allows *note doctest
options: 42e. to be specified on the command line, and ‘-f’ is a
shorthand for ‘-o FAIL_FAST’ (to parallel the similar option supported
by the *note unittest: 118. CLI). (Contributed by R. David Murray in
issue 11390(2).)

*note doctest: 65. will now find doctests in extension module ‘__doc__’
strings.  (Contributed by Zachary Ware in issue 3158(3).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue16522

   (2) https://bugs.python.org/issue11390

   (3) https://bugs.python.org/issue3158


File: python.info,  Node: email<2>,  Next: filecmp,  Prev: doctest<2>,  Up: Improved Modules<3>

1.3.4.12 email
..............

*note as_string(): 431. now accepts a `policy' argument to override the
default policy of the message when generating a string representation of
it.  This means that ‘as_string’ can now be used in more circumstances,
instead of having to create and use a *note generator: 6c. in order to
pass formatting parameters to its ‘flatten’ method.  (Contributed by R.
David Murray in issue 18600(1).)

New method *note as_bytes(): 432. added to produce a bytes
representation of the message in a fashion similar to how ‘as_string’
produces a string representation.  It does not accept the `maxheaderlen'
argument, but does accept the `unixfrom' and `policy' arguments.  The
*note Message: 3d2. *note __bytes__(): 433. method calls it, meaning
that ‘bytes(mymsg)’ will now produce the intuitive result: a bytes
object containing the fully formatted message.  (Contributed by R. David
Murray in issue 18600(2).)

The *note Message.set_param(): 434. message now accepts a `replace'
keyword argument.  When specified, the associated header will be updated
without changing its location in the list of headers.  For backward
compatibility, the default is ‘False’.  (Contributed by R. David Murray
in issue 18891(3).)  A pair of new subclasses of *note Message: 3d2.
have been added (*note EmailMessage: 435. and *note MIMEPart: 436.),
along with a new sub-module, *note contentmanager: 69. and a new *note
policy: 73. attribute *note content_manager: 437.  All documentation is
currently in the new module, which is being added as part of email’s new
*note provisional API: 1de.  These classes provide a number of new
methods that make extracting content from and inserting content into
email messages much easier.  For details, see the *note contentmanager:
69. documentation and the *note Examples using the Provisional API: 438.
These API additions complete the bulk of the work that was planned as
part of the email6 project.  The currently provisional API is scheduled
to become final in Python 3.5 (possibly with a few minor additions in
the area of error handling).  (Contributed by R. David Murray in issue
18891(4).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue18600

   (2) https://bugs.python.org/issue18600

   (3) https://bugs.python.org/issue18891

   (4) https://bugs.python.org/issue18891


File: python.info,  Node: filecmp,  Next: functools<2>,  Prev: email<2>,  Up: Improved Modules<3>

1.3.4.13 filecmp
................

A new *note clear_cache(): 43a. function provides the ability to clear
the *note filecmp: 7d. comparison cache, which uses *note os.stat():
1e2. information to determine if the file has changed since the last
compare.  This can be used, for example, if the file might have been
changed and re-checked in less time than the resolution of a particular
filesystem’s file modification time field.  (Contributed by Mark Levitt
in issue 18149(1).)

New module attribute *note DEFAULT_IGNORES: 43b. provides the list of
directories that are used as the default value for the `ignore'
parameter of the *note dircmp(): 43c. function.  (Contributed by Eli
Bendersky in issue 15442(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue18149

   (2) https://bugs.python.org/issue15442


File: python.info,  Node: functools<2>,  Next: gc,  Prev: filecmp,  Up: Improved Modules<3>

1.3.4.14 functools
..................

The new *note partialmethod(): 43e. descriptor brings partial argument
application to descriptors, just as *note partial(): 3b7. provides for
normal callables.  The new descriptor also makes it easier to get
arbitrary callables (including *note partial(): 3b7. instances) to
behave like normal instance methods when included in a class definition.
(Contributed by Alon Horev and Nick Coghlan in issue 4331(1).)  The new
*note singledispatch(): 43f. decorator brings support for
single-dispatch generic functions to the Python standard library.  Where
object oriented programming focuses on grouping multiple operations on a
common set of data into a class, a generic function focuses on grouping
multiple implementations of an operation that allows it to work with
`different' kinds of data.

See also
........

PEP 443(2) – Single-dispatch generic functions

     PEP written and implemented by Łukasz Langa.

*note total_ordering(): 440. now supports a return value of *note
NotImplemented: 441. from the underlying comparison function.
(Contributed by Katie Miller in issue 10042(3).)

A pure-python version of the *note partial(): 3b7. function is now in
the stdlib; in CPython it is overridden by the C accelerated version,
but it is available for other implementations to use.  (Contributed by
Brian Thorne in issue 12428(4).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue4331

   (2) https://www.python.org/dev/peps/pep-0443

   (3) https://bugs.python.org/issue10042

   (4) https://bugs.python.org/issue12428


File: python.info,  Node: gc,  Next: glob<2>,  Prev: functools<2>,  Up: Improved Modules<3>

1.3.4.15 gc
...........

New function *note get_stats(): 443. returns a list of three
per-generation dictionaries containing the collections statistics since
interpreter startup.  (Contributed by Antoine Pitrou in issue 16351(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue16351


File: python.info,  Node: glob<2>,  Next: hashlib,  Prev: gc,  Up: Improved Modules<3>

1.3.4.16 glob
.............

A new function *note escape(): 445. provides a way to escape special
characters in a filename so that they do not become part of the globbing
expansion but are instead matched literally.  (Contributed by Serhiy
Storchaka in issue 8402(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue8402


File: python.info,  Node: hashlib,  Next: hmac,  Prev: glob<2>,  Up: Improved Modules<3>

1.3.4.17 hashlib
................

A new *note hashlib.pbkdf2_hmac(): 3d5. function provides the PKCS#5
password-based key derivation function 2(1).  (Contributed by Christian
Heimes in issue 18582(2).)

The *note name: 447. attribute of *note hashlib: 8c. hash objects is now
a formally supported interface.  It has always existed in CPython’s
*note hashlib: 8c. (although it did not return lower case names for all
supported hashes), but it was not a public interface and so some other
Python implementations have not previously supported it.  (Contributed
by Jason R. Coombs in issue 18532(3).)

   ---------- Footnotes ----------

   (1) https://en.wikipedia.org/wiki/PBKDF2

   (2) https://bugs.python.org/issue18582

   (3) https://bugs.python.org/issue18532


File: python.info,  Node: hmac,  Next: html,  Prev: hashlib,  Up: Improved Modules<3>

1.3.4.18 hmac
.............

*note hmac: 8e. now accepts ‘bytearray’ as well as ‘bytes’ for the `key'
argument to the *note new(): 449. function, and the `msg' parameter to
both the *note new(): 449. function and the *note update(): 44a. method
now accepts any type supported by the *note hashlib: 8c. module.
(Contributed by Jonas Borgström in issue 18240(1).)

The `digestmod' argument to the *note hmac.new(): 449. function may now
be any hash digest name recognized by *note hashlib: 8c.  In addition,
the current behavior in which the value of `digestmod' defaults to ‘MD5’
is deprecated: in a future version of Python there will be no default
value.  (Contributed by Christian Heimes in issue 17276(2).)

With the addition of *note block_size: 44b. and *note name: 44c.
attributes (and the formal documentation of the *note digest_size: 44d.
attribute), the *note hmac: 8e. module now conforms fully to the PEP
247(3) API. (Contributed by Christian Heimes in issue 18775(4).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue18240

   (2) https://bugs.python.org/issue17276

   (3) https://www.python.org/dev/peps/pep-0247

   (4) https://bugs.python.org/issue18775


File: python.info,  Node: html,  Next: http<2>,  Prev: hmac,  Up: Improved Modules<3>

1.3.4.19 html
.............

New function *note unescape(): 44f. function converts HTML5 character
references to the corresponding Unicode characters.  (Contributed by
Ezio Melotti in issue 2927(1).)

*note HTMLParser: 3a9. accepts a new keyword argument `convert_charrefs'
that, when ‘True’, automatically converts all character references.  For
backward-compatibility, its value defaults to ‘False’, but it will
change to ‘True’ in a future version of Python, so you are invited to
set it explicitly and update your code to use this new feature.
(Contributed by Ezio Melotti in issue 13633(2).)

The `strict' argument of *note HTMLParser: 3a9. is now deprecated.
(Contributed by Ezio Melotti in issue 15114(3).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue2927

   (2) https://bugs.python.org/issue13633

   (3) https://bugs.python.org/issue15114


File: python.info,  Node: http<2>,  Next: idlelib and IDLE<2>,  Prev: html,  Up: Improved Modules<3>

1.3.4.20 http
.............

*note send_error(): 451. now accepts an optional additional `explain'
parameter which can be used to provide an extended error description,
overriding the hardcoded default if there is one.  This extended error
description will be formatted using the ‘error_message_format’ attribute
and sent as the body of the error response.  (Contributed by Karl Cow in
issue 12921(1).)

The *note http.server: 96. *note command line interface: 452. now has a
‘-b/--bind’ option that causes the server to listen on a specific
address.  (Contributed by Malte Swart in issue 17764(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue12921

   (2) https://bugs.python.org/issue17764


File: python.info,  Node: idlelib and IDLE<2>,  Next: importlib<2>,  Prev: http<2>,  Up: Improved Modules<3>

1.3.4.21 idlelib and IDLE
.........................

Since idlelib implements the IDLE shell and editor and is not intended
for import by other programs, it gets improvements with every release.
See ‘Lib/idlelib/NEWS.txt’ for a cumulative list of changes since 3.3.0,
as well as changes made in future 3.4.x releases.  This file is also
available from the IDLE Help ‣ About IDLE dialog.


File: python.info,  Node: importlib<2>,  Next: inspect<2>,  Prev: idlelib and IDLE<2>,  Up: Improved Modules<3>

1.3.4.22 importlib
..................

The *note InspectLoader: 455. ABC defines a new method, *note
source_to_code(): 2a4. that accepts source data and a path and returns a
code object.  The default implementation is equivalent to ‘compile(data,
path, 'exec', dont_inherit=True)’.  (Contributed by Eric Snow and Brett
Cannon in issue 15627(1).)

*note InspectLoader: 455. also now has a default implementation for the
*note get_code(): 456. method.  However, it will normally be desirable
to override the default implementation for performance reasons.
(Contributed by Brett Cannon in issue 18072(2).)

The *note reload(): 457. function has been moved from *note imp: 99. to
*note importlib: 9a. as part of the *note imp: 99. module deprecation.
(Contributed by Berker Peksag in issue 18193(3).)

*note importlib.util: 9d. now has a *note MAGIC_NUMBER: 458. attribute
providing access to the bytecode version number.  This replaces the
*note get_magic(): 459. function in the deprecated *note imp: 99.
module.  (Contributed by Brett Cannon in issue 18192(4).)

New *note importlib.util: 9d. functions *note cache_from_source(): 223.
and *note source_from_cache(): 45a. replace the same-named functions in
the deprecated *note imp: 99. module.  (Contributed by Brett Cannon in
issue 18194(5).)

The *note importlib: 9a. bootstrap ‘NamespaceLoader’ now conforms to the
*note InspectLoader: 455. ABC, which means that ‘runpy’ and ‘python -m’
can now be used with namespace packages.  (Contributed by Brett Cannon
in issue 18058(6).)

*note importlib.util: 9d. has a new function *note decode_source(): 45b.
that decodes source from bytes using universal newline processing.  This
is useful for implementing *note InspectLoader.get_source(): 45c.
methods.

*note importlib.machinery.ExtensionFileLoader: 45d. now has a *note
get_filename(): 45e. method.  This was inadvertently omitted in the
original implementation.  (Contributed by Eric Snow in issue 19152(7).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue15627

   (2) https://bugs.python.org/issue18072

   (3) https://bugs.python.org/issue18193

   (4) https://bugs.python.org/issue18192

   (5) https://bugs.python.org/issue18194

   (6) https://bugs.python.org/issue18058

   (7) https://bugs.python.org/issue19152


File: python.info,  Node: inspect<2>,  Next: ipaddress<2>,  Prev: importlib<2>,  Up: Improved Modules<3>

1.3.4.23 inspect
................

The *note inspect: 9e. module now offers a basic *note command line
interface: 460. to quickly display source code and other information for
modules, classes and functions.  (Contributed by Claudiu Popa and Nick
Coghlan in issue 18626(1).)

*note unwrap(): 461. makes it easy to unravel wrapper function chains
created by *note functools.wraps(): 462. (and any other API that sets
the ‘__wrapped__’ attribute on a wrapper function).  (Contributed by
Daniel Urban, Aaron Iles and Nick Coghlan in issue 13266(2).)

As part of the implementation of the new *note enum: 79. module, the
*note inspect: 9e. module now has substantially better support for
custom ‘__dir__’ methods and dynamic class attributes provided through
metaclasses.  (Contributed by Ethan Furman in issue 18929(3) and issue
19030(4).)

*note getfullargspec(): 39b. and *note getargspec(): 39a. now use the
*note signature(): 2ac. API. This allows them to support a much broader
range of callables, including those with ‘__signature__’ attributes,
those with metadata provided by argument clinic, *note
functools.partial(): 3b7. objects and more.  Note that, unlike *note
signature(): 2ac, these functions still ignore ‘__wrapped__’ attributes,
and report the already bound first argument for bound methods, so it is
still necessary to update your code to use *note signature(): 2ac.
directly if those features are desired.  (Contributed by Yury Selivanov
in issue 17481(5).)

*note signature(): 2ac. now supports duck types of CPython functions,
which adds support for functions compiled with Cython.  (Contributed by
Stefan Behnel and Yury Selivanov in issue 17159(6).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue18626

   (2) https://bugs.python.org/issue13266

   (3) https://bugs.python.org/issue18929

   (4) https://bugs.python.org/issue19030

   (5) https://bugs.python.org/issue17481

   (6) https://bugs.python.org/issue17159


File: python.info,  Node: ipaddress<2>,  Next: logging<2>,  Prev: inspect<2>,  Up: Improved Modules<3>

1.3.4.24 ipaddress
..................

*note ipaddress: a0. was added to the standard library in Python 3.3 as
a *note provisional API: 1de.  With the release of Python 3.4, this
qualification has been removed: *note ipaddress: a0. is now considered a
stable API, covered by the normal standard library requirements to
maintain backwards compatibility.

A new *note is_global: 464. property is ‘True’ if an address is globally
routeable.  (Contributed by Peter Moody in issue 17400(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue17400


File: python.info,  Node: logging<2>,  Next: marshal,  Prev: ipaddress<2>,  Up: Improved Modules<3>

1.3.4.25 logging
................

The *note TimedRotatingFileHandler: 466. has a new `atTime' parameter
that can be used to specify the time of day when rollover should happen.
(Contributed by Ronald Oussoren in issue 9556(1).)

*note SocketHandler: 467. and *note DatagramHandler: 468. now support
Unix domain sockets (by setting `port' to ‘None’).  (Contributed by
Vinay Sajip in commit ce46195b56a9.)

*note fileConfig(): 469. now accepts a *note
configparser.RawConfigParser: 46a. subclass instance for the `fname'
parameter.  This facilitates using a configuration file when logging
configuration is just a part of the overall application configuration,
or where the application modifies the configuration before passing it to
*note fileConfig(): 469.  (Contributed by Vinay Sajip in issue
16110(2).)

Logging configuration data received from a socket via the *note
logging.config.listen(): 46b. function can now be validated before being
processed by supplying a verification function as the argument to the
new `verify' keyword argument.  (Contributed by Vinay Sajip in issue
15452(3).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue9556

   (2) https://bugs.python.org/issue16110

   (3) https://bugs.python.org/issue15452


File: python.info,  Node: marshal,  Next: mmap,  Prev: logging<2>,  Up: Improved Modules<3>

1.3.4.26 marshal
................

The default *note marshal: af. version has been bumped to 3.  The code
implementing the new version restores the Python2 behavior of recording
only one copy of interned strings and preserving the interning on
deserialization, and extends this "one copy" ability to any object type
(including handling recursive references).  This reduces both the size
of ‘.pyc’ files and the amount of memory a module occupies in memory
when it is loaded from a ‘.pyc’ (or ‘.pyo’) file.  (Contributed by
Kristján Valur Jónsson in issue 16475(1), with additional speedups by
Antoine Pitrou in issue 19219(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue16475

   (2) https://bugs.python.org/issue19219


File: python.info,  Node: mmap,  Next: multiprocessing<2>,  Prev: marshal,  Up: Improved Modules<3>

1.3.4.27 mmap
.............

mmap objects can now be *note weakref: 125.ed.  (Contributed by Valerie
Lambert in issue 4885(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue4885


File: python.info,  Node: multiprocessing<2>,  Next: operator<2>,  Prev: mmap,  Up: Improved Modules<3>

1.3.4.28 multiprocessing
........................

On Unix two new *note start methods: 46f, ‘spawn’ and ‘forkserver’, have
been added for starting processes using *note multiprocessing: b6.
These make the mixing of processes with threads more robust, and the
‘spawn’ method matches the semantics that multiprocessing has always
used on Windows.  New function *note get_all_start_methods(): 470.
reports all start methods available on the platform, *note
get_start_method(): 471. reports the current start method, and *note
set_start_method(): 472. sets the start method.  (Contributed by Richard
Oudkerk in issue 8713(1).)

*note multiprocessing: b6. also now has the concept of a ‘context’,
which determines how child processes are created.  New function *note
get_context(): 473. returns a context that uses a specified start
method.  It has the same API as the *note multiprocessing: b6. module
itself, so you can use it to create *note Pool: 474.s and other objects
that will operate within that context.  This allows a framework and an
application or different parts of the same application to use
multiprocessing without interfering with each other.  (Contributed by
Richard Oudkerk in issue 18999(2).)

Except when using the old `fork' start method, child processes no longer
inherit unneeded handles/file descriptors from their parents (part of
issue 8713(3)).

*note multiprocessing: b6. now relies on *note runpy: e0. (which
implements the ‘-m’ switch) to initialise ‘__main__’ appropriately in
child processes when using the ‘spawn’ or ‘forkserver’ start methods.
This resolves some edge cases where combining multiprocessing, the ‘-m’
command line switch, and explicit relative imports could cause obscure
failures in child processes.  (Contributed by Nick Coghlan in issue
19946(4).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue8713

   (2) https://bugs.python.org/issue18999

   (3) https://bugs.python.org/issue8713

   (4) https://bugs.python.org/issue19946


File: python.info,  Node: operator<2>,  Next: os<3>,  Prev: multiprocessing<2>,  Up: Improved Modules<3>

1.3.4.29 operator
.................

New function *note length_hint(): 476. provides an implementation of the
specification for how the *note __length_hint__(): 3fc. special method
should be used, as part of the PEP 424(1) formal specification of this
language feature.  (Contributed by Armin Ronacher in issue 16148(2).)

There is now a pure-python version of the *note operator: c0. module
available for reference and for use by alternate implementations of
Python.  (Contributed by Zachary Ware in issue 16694(3).)

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0424

   (2) https://bugs.python.org/issue16148

   (3) https://bugs.python.org/issue16694


File: python.info,  Node: os<3>,  Next: pdb,  Prev: operator<2>,  Up: Improved Modules<3>

1.3.4.30 os
...........

There are new functions to get and set the *note inheritable flag: 3ea.
of a file descriptor (*note os.get_inheritable(): 3eb, *note
os.set_inheritable(): 3ec.) or a Windows handle (*note
os.get_handle_inheritable(): 3ed, *note os.set_handle_inheritable():
3ee.).

New function *note cpu_count(): 478. reports the number of CPUs
available on the platform on which Python is running (or ‘None’ if the
count can’t be determined).  The *note multiprocessing.cpu_count(): 479.
function is now implemented in terms of this function).  (Contributed by
Trent Nelson, Yogesh Chaudhari, Victor Stinner, and Charles-François
Natali in issue 17914(1).)

*note os.path.samestat(): 47a. is now available on the Windows platform
(and the *note os.path.samefile(): 47b. implementation is now shared
between Unix and Windows).  (Contributed by Brian Curtin in issue
11939(2).)

*note os.path.ismount(): 47c. now recognizes volumes mounted below a
drive root on Windows.  (Contributed by Tim Golden in issue 9035(3).)

*note os.open(): 1f4. supports two new flags on platforms that provide
them, *note O_PATH: 47d. (un-opened file descriptor), and *note
O_TMPFILE: 47e. (unnamed temporary file; as of 3.4.0 release available
only on Linux systems with a kernel version of 3.11 or newer that have
uapi headers).  (Contributed by Christian Heimes in issue 18673(4) and
Benjamin Peterson, respectively.)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue17914

   (2) https://bugs.python.org/issue11939

   (3) https://bugs.python.org/issue9035

   (4) https://bugs.python.org/issue18673


File: python.info,  Node: pdb,  Next: pickle<3>,  Prev: os<3>,  Up: Improved Modules<3>

1.3.4.31 pdb
............

*note pdb: c7. has been enhanced to handle generators, *note yield: 480,
and ‘yield from’ in a more useful fashion.  This is especially helpful
when debugging *note asyncio: a. based programs.  (Contributed by Andrew
Svetlov and Xavier de Gaye in issue 16596(1).)

The ‘print’ command has been removed from *note pdb: c7, restoring
access to the Python *note print(): 481. function from the pdb command
line.  Python2’s ‘pdb’ did not have a ‘print’ command; instead, entering
‘print’ executed the ‘print’ statement.  In Python3 ‘print’ was
mistakenly made an alias for the pdb *note p: 482. command.  ‘p’,
however, prints the ‘repr’ of its argument, not the ‘str’ like the
Python2 ‘print’ command did.  Worse, the Python3 ‘pdb print’ command
shadowed the Python3 ‘print’ function, making it inaccessible at the
‘pdb’ prompt.  (Contributed by Connor Osborn in issue 18764(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue16596

   (2) https://bugs.python.org/issue18764


File: python.info,  Node: pickle<3>,  Next: plistlib,  Prev: pdb,  Up: Improved Modules<3>

1.3.4.32 pickle
...............

*note pickle: c8. now supports (but does not use by default) a new
pickle protocol, protocol 4.  This new protocol addresses a number of
issues that were present in previous protocols, such as the
serialization of nested classes, very large strings and containers, and
classes whose *note __new__(): 484. method takes keyword-only arguments.
It also provides some efficiency improvements.

See also
........

PEP 3154(1) – Pickle protocol 4

     PEP written by Antoine Pitrou and implemented by Alexandre
     Vassalotti.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3154


File: python.info,  Node: plistlib,  Next: poplib<2>,  Prev: pickle<3>,  Up: Improved Modules<3>

1.3.4.33 plistlib
.................

*note plistlib: cd. now has an API that is similar to the standard
pattern for stdlib serialization protocols, with new *note load(): 486,
*note dump(): 487, *note loads(): 488, and *note dumps(): 489.
functions.  (The older API is now deprecated.)  In addition to the
already supported XML plist format (*note FMT_XML: 48a.), it also now
supports the binary plist format (*note FMT_BINARY: 48b.).  (Contributed
by Ronald Oussoren and others in issue 14455(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue14455


File: python.info,  Node: poplib<2>,  Next: pprint,  Prev: plistlib,  Up: Improved Modules<3>

1.3.4.34 poplib
...............

Two new methods have been added to *note poplib: ce.: *note capa(): 48d,
which returns the list of capabilities advertised by the POP server, and
*note stls(): 48e, which switches a clear-text POP3 session into an
encrypted POP3 session if the POP server supports it.  (Contributed by
Lorenzo Catucci in issue 4473(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue4473


File: python.info,  Node: pprint,  Next: pty,  Prev: poplib<2>,  Up: Improved Modules<3>

1.3.4.35 pprint
...............

The *note pprint: d0. module’s *note PrettyPrinter: 490. class and its
*note pformat(): 491, and *note pprint(): 492. functions have a new
option, `compact', that controls how the output is formatted.  Currently
setting `compact' to ‘True’ means that sequences will be printed with as
many sequence elements as will fit within `width' on each (indented)
line.  (Contributed by Serhiy Storchaka in issue 19132(1).)

Long strings are now wrapped using Python’s normal line continuation
syntax.  (Contributed by Antoine Pitrou in issue 17150(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue19132

   (2) https://bugs.python.org/issue17150


File: python.info,  Node: pty,  Next: pydoc,  Prev: pprint,  Up: Improved Modules<3>

1.3.4.36 pty
............

*note pty.spawn(): 494. now returns the status value from *note
os.waitpid(): 200. on the child process, instead of ‘None’.
(Contributed by Gregory P. Smith.)


File: python.info,  Node: pydoc,  Next: re<2>,  Prev: pty,  Up: Improved Modules<3>

1.3.4.37 pydoc
..............

The *note pydoc: d7. module is now based directly on the *note
inspect.signature(): 2ac. introspection API, allowing it to provide
signature information for a wider variety of callable objects.  This
change also means that ‘__wrapped__’ attributes are now taken into
account when displaying help information.  (Contributed by Larry
Hastings in issue 19674(1).)

The *note pydoc: d7. module no longer displays the ‘self’ parameter for
already bound methods.  Instead, it aims to always display the exact
current signature of the supplied callable.  (Contributed by Larry
Hastings in issue 20710(2).)

In addition to the changes that have been made to *note pydoc: d7.
directly, its handling of custom ‘__dir__’ methods and various
descriptor behaviours has also been improved substantially by the
underlying changes in the *note inspect: 9e. module.

As the *note help(): 3b6. builtin is based on *note pydoc: d7, the above
changes also affect the behaviour of *note help(): 3b6.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue19674

   (2) https://bugs.python.org/issue20710


File: python.info,  Node: re<2>,  Next: resource,  Prev: pydoc,  Up: Improved Modules<3>

1.3.4.38 re
...........

New *note fullmatch(): 497. function and *note regex.fullmatch(): 498.
method anchor the pattern at both ends of the string to match.  This
provides a way to be explicit about the goal of the match, which avoids
a class of subtle bugs where ‘$’ characters get lost during code changes
or the addition of alternatives to an existing regular expression.
(Contributed by Matthew Barnett in issue 16203(1).)

The repr of *note regex objects: 499. now includes the pattern and the
flags; the repr of *note match objects: 49a. now includes the start,
end, and the part of the string that matched.  (Contributed by Hugo
Lopes Tavares and Serhiy Storchaka in issue 13592(2) and issue
17087(3).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue16203

   (2) https://bugs.python.org/issue13592

   (3) https://bugs.python.org/issue17087


File: python.info,  Node: resource,  Next: select,  Prev: re<2>,  Up: Improved Modules<3>

1.3.4.39 resource
.................

New *note prlimit(): 49c. function, available on Linux platforms with a
kernel version of 2.6.36 or later and glibc of 2.13 or later, provides
the ability to query or set the resource limits for processes other than
the one making the call.  (Contributed by Christian Heimes in issue
16595(1).)

On Linux kernel version 2.6.36 or later, there are there are also some
new Linux specific constants: *note RLIMIT_MSGQUEUE: 49d, *note
RLIMIT_NICE: 49e, *note RLIMIT_RTPRIO: 49f, *note RLIMIT_RTTIME: 4a0,
and *note RLIMIT_SIGPENDING: 4a1.  (Contributed by Christian Heimes in
issue 19324(2).)

On FreeBSD version 9 and later, there some new FreeBSD specific
constants: *note RLIMIT_SBSIZE: 4a2, *note RLIMIT_SWAP: 4a3, and *note
RLIMIT_NPTS: 4a4.  (Contributed by Claudiu Popa in issue 19343(3).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue16595

   (2) https://bugs.python.org/issue19324

   (3) https://bugs.python.org/issue19343


File: python.info,  Node: select,  Next: shelve,  Prev: resource,  Up: Improved Modules<3>

1.3.4.40 select
...............

*note epoll: 4a6. objects now support the context management protocol.
When used in a *note with: 29d. statement, the *note close(): 4a7.
method will be called automatically at the end of the block.
(Contributed by Serhiy Storchaka in issue 16488(1).)

*note devpoll: 4a8. objects now have *note fileno(): 4a9. and *note
close(): 4aa. methods, as well as a new attribute *note closed: 4ab.
(Contributed by Victor Stinner in issue 18794(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue16488

   (2) https://bugs.python.org/issue18794


File: python.info,  Node: shelve,  Next: shutil<2>,  Prev: select,  Up: Improved Modules<3>

1.3.4.41 shelve
...............

*note Shelf: 4ad. instances may now be used in *note with: 29d.
statements, and will be automatically closed at the end of the *note
with: 29d. block.  (Contributed by Filip Gruszczyński in issue
13896(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue13896


File: python.info,  Node: shutil<2>,  Next: smtpd<2>,  Prev: shelve,  Up: Improved Modules<3>

1.3.4.42 shutil
...............

*note copyfile(): 4af. now raises a specific *note Error: 4b0. subclass,
*note SameFileError: 4b1, when the source and destination are the same
file, which allows an application to take appropriate action on this
specific error.  (Contributed by Atsuo Ishimoto and Hynek Schlawack in
issue 1492704(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue1492704


File: python.info,  Node: smtpd<2>,  Next: smtplib<2>,  Prev: shutil<2>,  Up: Improved Modules<3>

1.3.4.43 smtpd
..............

The *note SMTPServer: 309. and *note SMTPChannel: 30a. classes now
accept a `map' keyword argument which, if specified, is passed in to
*note asynchat.async_chat: 4b3. as its `map' argument.  This allows an
application to avoid affecting the global socket map.  (Contributed by
Vinay Sajip in issue 11959(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue11959


File: python.info,  Node: smtplib<2>,  Next: socket<2>,  Prev: smtpd<2>,  Up: Improved Modules<3>

1.3.4.44 smtplib
................

*note SMTPException: 4b5. is now a subclass of *note OSError: 4b6, which
allows both socket level errors and SMTP protocol level errors to be
caught in one try/except statement by code that only cares whether or
not an error occurred.  (Contributed by Ned Jackson Lovely in issue
2118(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue2118


File: python.info,  Node: socket<2>,  Next: sqlite3<2>,  Prev: smtplib<2>,  Up: Improved Modules<3>

1.3.4.45 socket
...............

The socket module now supports the *note CAN_BCM: 4b8. protocol on
platforms that support it.  (Contributed by Brian Thorne in issue
15359(1).)

Socket objects have new methods to get or set their *note inheritable
flag: 3ea, *note get_inheritable(): 3ef. and *note set_inheritable():
3f0.

The ‘socket.AF_*’ and ‘socket.SOCK_*’ constants are now enumeration
values using the new *note enum: 79. module.  This allows meaningful
names to be printed during debugging, instead of integer "magic
numbers".

The *note AF_LINK: 4b9. constant is now available on BSD and OSX.

*note inet_pton(): 4ba. and *note inet_ntop(): 4bb. are now supported on
Windows.  (Contributed by Atsuo Ishimoto in issue 7171(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue15359

   (2) https://bugs.python.org/issue7171


File: python.info,  Node: sqlite3<2>,  Next: ssl<2>,  Prev: socket<2>,  Up: Improved Modules<3>

1.3.4.46 sqlite3
................

A new boolean parameter to the *note connect(): 4bd. function, `uri',
can be used to indicate that the `database' parameter is a ‘uri’ (see
the SQLite URI documentation(1)).  (Contributed by poq in issue
13773(2).)

   ---------- Footnotes ----------

   (1) http://www.sqlite.org/uri.html

   (2) https://bugs.python.org/issue13773


File: python.info,  Node: ssl<2>,  Next: stat,  Prev: sqlite3<2>,  Up: Improved Modules<3>

1.3.4.47 ssl
............

*note PROTOCOL_TLSv1_1: 4bf. and *note PROTOCOL_TLSv1_2: 4c0. (TLSv1.1
and TLSv1.2 support) have been added; support for these protocols is
only available if Python is linked with OpenSSL 1.0.1 or later.
(Contributed by Michele Orrù and Antoine Pitrou in issue 16692(1).)  New
function *note create_default_context(): 4c1. provides a standard way to
obtain an *note SSLContext: 1c6. whose settings are intended to be a
reasonable balance between compatibility and security.  These settings
are more stringent than the defaults provided by the *note SSLContext:
1c6. constructor, and may be adjusted in the future, without prior
deprecation, if best-practice security requirements change.  The new
recommended best practice for using stdlib libraries that support SSL is
to use *note create_default_context(): 4c1. to obtain an *note
SSLContext: 1c6. object, modify it if needed, and then pass it as the
`context' argument of the appropriate stdlib API. (Contributed by
Christian Heimes in issue 19689(2).)

*note SSLContext: 1c6. method *note load_verify_locations(): 3da.
accepts a new optional argument `cadata', which can be used to provide
PEM or DER encoded certificates directly via strings or bytes,
respectively.  (Contributed by Christian Heimes in issue 18138(3).)

New function *note get_default_verify_paths(): 4c2. returns a named
tuple of the paths and environment variables that the *note
set_default_verify_paths(): 4c3. method uses to set OpenSSL’s default
‘cafile’ and ‘capath’.  This can be an aid in debugging default
verification issues.  (Contributed by Christian Heimes in issue
18143(4).)

*note SSLContext: 1c6. has a new method, *note cert_store_stats(): 4c4,
that reports the number of loaded ‘X.509’ certs, ‘X.509 CA’ certs, and
certificate revocation lists (‘crl’s), as well as a *note
get_ca_certs(): 4c5. method that returns a list of the loaded ‘CA’
certificates.  (Contributed by Christian Heimes in issue 18147(5).)

If OpenSSL 0.9.8 or later is available, *note SSLContext: 1c6. has a new
attribute *note verify_flags: 4c6. that can be used to control the
certificate verification process by setting it to some combination of
the new constants *note VERIFY_DEFAULT: 4c7, *note
VERIFY_CRL_CHECK_LEAF: 4c8, *note VERIFY_CRL_CHECK_CHAIN: 4c9, or *note
VERIFY_X509_STRICT: 4ca.  OpenSSL does not do any CRL verification by
default.  (Contributed by Christien Heimes in issue 8813(6).)

New *note SSLContext: 1c6. method *note load_default_certs(): 4cb. loads
a set of default "certificate authority" (CA) certificates from default
locations, which vary according to the platform.  It can be used to load
both TLS web server authentication certificates (‘purpose=’*note
SERVER_AUTH: 4cc.) for a client to use to verify a server, and
certificates for a server to use in verifying client certificates
(‘purpose=’*note CLIENT_AUTH: 4cd.).  (Contributed by Christian Heimes
in issue 19292(7).)  Two new windows-only functions, *note
enum_certificates(): 4ce. and *note enum_crls(): 4cf. provide the
ability to retrieve certificates, certificate information, and CRLs from
the Windows cert store.  (Contributed by Christian Heimes in issue
17134(8).)  Support for server-side SNI (Server Name Indication) using
the new *note ssl.SSLContext.set_servername_callback(): 4d0. method.
(Contributed by Daniel Black in issue 8109(9).)

The dictionary returned by *note SSLSocket.getpeercert(): 4d1. contains
additional ‘X509v3’ extension items: ‘crlDistributionPoints’,
‘calIssuers’, and ‘OCSP’ URIs.  (Contributed by Christian Heimes in
issue 18379(10).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue16692

   (2) https://bugs.python.org/issue19689

   (3) https://bugs.python.org/issue18138

   (4) https://bugs.python.org/issue18143

   (5) https://bugs.python.org/issue18147

   (6) https://bugs.python.org/issue8813

   (7) https://bugs.python.org/issue19292

   (8) https://bugs.python.org/issue17134

   (9) https://bugs.python.org/issue8109

   (10) https://bugs.python.org/issue18379


File: python.info,  Node: stat,  Next: struct,  Prev: ssl<2>,  Up: Improved Modules<3>

1.3.4.48 stat
.............

The *note stat: f2. module is now backed by a C implementation in
‘_stat’.  A C implementation is required as most of the values aren’t
standardized and are platform-dependent.  (Contributed by Christian
Heimes in issue 11016(1).)

The module supports new *note ST_MODE: 4d3. flags, *note S_IFDOOR: 4d4,
*note S_IFPORT: 4d5, and *note S_IFWHT: 4d6.  (Contributed by Christian
Hiemes in issue 11016(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue11016

   (2) https://bugs.python.org/issue11016


File: python.info,  Node: struct,  Next: subprocess<2>,  Prev: stat,  Up: Improved Modules<3>

1.3.4.49 struct
...............

New function *note iter_unpack: 4d8. and a new *note
struct.Struct.iter_unpack(): 4d9. method on compiled formats provide
streamed unpacking of a buffer containing repeated instances of a given
format of data.  (Contributed by Antoine Pitrou in issue 17804(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue17804


File: python.info,  Node: subprocess<2>,  Next: sunau,  Prev: struct,  Up: Improved Modules<3>

1.3.4.50 subprocess
...................

*note check_output(): 4db. now accepts an `input' argument that can be
used to provide the contents of ‘stdin’ for the command that is run.
(Contributed by Zack Weinberg in issue 16624(1).)

‘getstatus()’ and *note getstatusoutput(): 4dc. now work on Windows.
This change was actually inadvertently made in 3.3.4.  (Contributed by
Tim Golden in issue 10197(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue16624

   (2) https://bugs.python.org/issue10197


File: python.info,  Node: sunau,  Next: sys<2>,  Prev: subprocess<2>,  Up: Improved Modules<3>

1.3.4.51 sunau
..............

The ‘getparams()’ method now returns a namedtuple rather than a plain
tuple.  (Contributed by Claudiu Popa in issue 18901(1).)

*note sunau.open(): 4de. now supports the context management protocol:
when used in a *note with: 29d. block, the ‘close’ method of the
returned object will be called automatically at the end of the block.
(Contributed by Serhiy Storchaka in issue 18878(2).)

*note AU_write.setsampwidth(): 4df. now supports 24 bit samples, thus
adding support for writing 24 sample using the module.  (Contributed by
Serhiy Storchaka in issue 19261(3).)

The *note writeframesraw(): 4e0. and *note writeframes(): 4e1. methods
now accept any *note bytes-like object: 36b.  (Contributed by Serhiy
Storchaka in issue 8311(4).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue18901

   (2) https://bugs.python.org/issue18878

   (3) https://bugs.python.org/issue19261

   (4) https://bugs.python.org/issue8311


File: python.info,  Node: sys<2>,  Next: tarfile<2>,  Prev: sunau,  Up: Improved Modules<3>

1.3.4.52 sys
............

New function *note sys.getallocatedblocks(): 4e3. returns the current
number of blocks allocated by the interpreter.  (In CPython with the
default ‘--with-pymalloc’ setting, this is allocations made through the
‘PyObject_Malloc()’ API.) This can be useful for tracking memory leaks,
especially if automated via a test suite.  (Contributed by Antoine
Pitrou in issue 13390(1).)

When the Python interpreter starts in *note interactive mode: 4e4, it
checks for an *note __interactivehook__: 4e5. attribute on the *note
sys: fb. module.  If the attribute exists, its value is called with no
arguments just before interactive mode is started.  The check is made
after the *note PYTHONSTARTUP: 4e6. file is read, so it can be set
there.  The *note site: e9. module *note sets it: 4e7. to a function
that enables tab completion and history saving (in ‘~/.python-history’)
if the platform supports *note readline: dc.  If you do not want this
(new) behavior, you can override it in *note PYTHONSTARTUP: 4e6,
‘sitecustomize’, or ‘usercustomize’ by deleting this attribute from
*note sys: fb. (or setting it to some other callable).  (Contributed by
Éric Araujo and Antoine Pitrou in issue 5845(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue13390

   (2) https://bugs.python.org/issue5845


File: python.info,  Node: tarfile<2>,  Next: textwrap,  Prev: sys<2>,  Up: Improved Modules<3>

1.3.4.53 tarfile
................

The *note tarfile: ff. module now supports a simple *note Command Line
Interface: 4e9. when called as a script directly or via ‘-m’.  This can
be used to create and extract tarfile archives.  (Contributed by Berker
Peksag in issue 13477(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue13477


File: python.info,  Node: textwrap,  Next: threading<2>,  Prev: tarfile<2>,  Up: Improved Modules<3>

1.3.4.54 textwrap
.................

The *note TextWrapper: 4eb. class has two new attributes/constructor
arguments: *note max_lines: 4ec, which limits the number of lines in the
output, and *note placeholder: 4ed, which is a string that will appear
at the end of the output if it has been truncated because of
`max_lines'.  Building on these capabilities, a new convenience function
*note shorten(): 4ee. collapses all of the whitespace in the input to
single spaces and produces a single line of a given `width' that ends
with the `placeholder' (by default, ‘[...]’).  (Contributed by Antoine
Pitrou and Serhiy Storchaka in issue 18585(1) and issue 18725(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue18585

   (2) https://bugs.python.org/issue18725


File: python.info,  Node: threading<2>,  Next: traceback<2>,  Prev: textwrap,  Up: Improved Modules<3>

1.3.4.55 threading
..................

The *note Thread: 4f0. object representing the main thread can be
obtained from the new *note main_thread(): 4f1. function.  In normal
conditions this will be the thread from which the Python interpreter was
started.  (Contributed by Andrew Svetlov in issue 18882(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue18882


File: python.info,  Node: traceback<2>,  Next: types<2>,  Prev: threading<2>,  Up: Improved Modules<3>

1.3.4.56 traceback
..................

A new *note traceback.clear_frames(): 4f3. function takes a traceback
object and clears the local variables in all of the frames it
references, reducing the amount of memory consumed.  (Contributed by
Andrew Kuchling in issue 1565525(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue1565525


File: python.info,  Node: types<2>,  Next: urllib<2>,  Prev: traceback<2>,  Up: Improved Modules<3>

1.3.4.57 types
..............

A new *note DynamicClassAttribute(): 4f5. descriptor provides a way to
define an attribute that acts normally when looked up through an
instance object, but which is routed to the `class' ‘__getattr__’ when
looked up through the class.  This allows one to have properties active
on a class, and have virtual attributes on the class with the same name
(see ‘Enum’ for an example).  (Contributed by Ethan Furman in issue
19030(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue19030


File: python.info,  Node: urllib<2>,  Next: unittest<2>,  Prev: types<2>,  Up: Improved Modules<3>

1.3.4.58 urllib
...............

*note urllib.request: 11d. now supports ‘data:’ URLs via the *note
DataHandler: 4f7. class.  (Contributed by Mathias Panzenböck in issue
16423(1).)

The http method that will be used by a *note Request: 4f8. class can now
be specified by setting a *note method: 4f9. class attribute on the
subclass.  (Contributed by Jason R Coombs in issue 18978(2).)

*note Request: 4f8. objects are now reusable: if the *note full_url:
4fa. or *note data: 4fb. attributes are modified, all relevant internal
properties are updated.  This means, for example, that it is now
possible to use the same *note Request: 4f8. object in more than one
*note OpenerDirector.open(): 4fc. call with different `data' arguments,
or to modify a *note Request: 4f8.’s ‘url’ rather than recomputing it
from scratch.  There is also a new *note remove_header(): 4fd. method
that can be used to remove headers from a *note Request: 4f8.
(Contributed by Alexey Kachayev in issue 16464(3), Daniel Wozniak in
issue 17485(4), and Damien Brecht and Senthil Kumaran in issue
17272(5).)

*note HTTPError: 4fe. objects now have a *note headers: 4ff. attribute
that provides access to the HTTP response headers associated with the
error.  (Contributed by Berker Peksag in issue 15701(6).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue16423

   (2) https://bugs.python.org/issue18978

   (3) https://bugs.python.org/issue16464

   (4) https://bugs.python.org/issue17485

   (5) https://bugs.python.org/issue17272

   (6) https://bugs.python.org/issue15701


File: python.info,  Node: unittest<2>,  Next: venv,  Prev: urllib<2>,  Up: Improved Modules<3>

1.3.4.59 unittest
.................

The *note TestCase: 501. class has a new method, *note subTest(): 502,
that produces a context manager whose *note with: 29d. block becomes a
"sub-test".  This context manager allows a test method to dynamically
generate subtests by, say, calling the ‘subTest’ context manager inside
a loop.  A single test method can thereby produce an indefinite number
of separately-identified and separately-counted tests, all of which will
run even if one or more of them fail.  For example:

     class NumbersTest(unittest.TestCase):
         def test_even(self):
             for i in range(6):
                 with self.subTest(i=i):
                     self.assertEqual(i % 2, 0)

will result in six subtests, each identified in the unittest verbose
output with a label consisting of the variable name ‘i’ and a particular
value for that variable (‘i=0’, ‘i=1’, etc).  See *note Distinguishing
test iterations using subtests: 503. for the full version of this
example.  (Contributed by Antoine Pitrou in issue 16997(1).)

*note unittest.main(): 504. now accepts an iterable of test names for
`defaultTest', where previously it only accepted a single test name as a
string.  (Contributed by Jyrki Pulliainen in issue 15132(2).)

If *note SkipTest: 505. is raised during test discovery (that is, at the
module level in the test file), it is now reported as a skip instead of
an error.  (Contributed by Zach Ware in issue 16935(3).)

*note discover(): 506. now sorts the discovered files to provide
consistent test ordering.  (Contributed by Martin Melin and Jeff Ramnani
in issue 16709(4).)

*note TestSuite: 27d. now drops references to tests as soon as the test
has been run, if the test is successful.  On Python interpreters that do
garbage collection, this allows the tests to be garbage collected if
nothing else is holding a reference to the test.  It is possible to
override this behavior by creating a *note TestSuite: 27d. subclass that
defines a custom ‘_removeTestAtIndex’ method.  (Contributed by Tom
Wardill, Matt McClure, and Andrew Svetlov in issue 11798(5).)

A new test assertion context-manager, *note assertLogs(): 507, will
ensure that a given block of code emits a log message using the *note
logging: a8. module.  By default the message can come from any logger
and have a priority of ‘INFO’ or higher, but both the logger name and an
alternative minimum logging level may be specified.  The object returned
by the context manager can be queried for the *note LogRecord: 508.s
and/or formatted messages that were logged.  (Contributed by Antoine
Pitrou in issue 18937(6).)

Test discovery now works with namespace packages (Contributed by Claudiu
Popa in issue 17457(7).)

*note unittest.mock: 119. objects now inspect their specification
signatures when matching calls, which means an argument can now be
matched by either position or name, instead of only by position.
(Contributed by Antoine Pitrou in issue 17015(8).)

‘mock_open()’ objects now have ‘readline’ and ‘readlines’ methods.
(Contributed by Toshio Kuratomi in issue 17467(9).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue16997

   (2) https://bugs.python.org/issue15132

   (3) https://bugs.python.org/issue16935

   (4) https://bugs.python.org/issue16709

   (5) https://bugs.python.org/issue11798

   (6) https://bugs.python.org/issue18937

   (7) https://bugs.python.org/issue17457

   (8) https://bugs.python.org/issue17015

   (9) https://bugs.python.org/issue17467


File: python.info,  Node: venv,  Next: wave,  Prev: unittest<2>,  Up: Improved Modules<3>

1.3.4.60 venv
.............

*note venv: 122. now includes activation scripts for the ‘csh’ and
‘fish’ shells.  (Contributed by Andrew Svetlov in issue 15417(1).)

*note EnvBuilder: 50a. and the *note create(): 50b. convenience function
take a new keyword argument `with_pip', which defaults to ‘False’, that
controls whether or not *note EnvBuilder: 50a. ensures that ‘pip’ is
installed in the virtual environment.  (Contributed by Nick Coghlan in
issue 19552(2) as part of the PEP 453(3) implementation.)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue15417

   (2) https://bugs.python.org/issue19552

   (3) https://www.python.org/dev/peps/pep-0453


File: python.info,  Node: wave,  Next: weakref,  Prev: venv,  Up: Improved Modules<3>

1.3.4.61 wave
.............

The ‘getparams()’ method now returns a namedtuple rather than a plain
tuple.  (Contributed by Claudiu Popa in issue 17487(1).)

*note wave.open(): 50d. now supports the context management protocol.
(Contributed by Claudiu Popa in issue 17616(2).)

*note wave: 124. can now *note write output to unseekable files: 50e.
(Contributed by David Jones, Guilherme Polo, and Serhiy Storchaka in
issue 5202(3).)

The *note writeframesraw(): 50f. and *note writeframes(): 510. methods
now accept any *note bytes-like object: 36b.  (Contributed by Serhiy
Storchaka in issue 8311(4).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue17487

   (2) https://bugs.python.org/issue17616

   (3) https://bugs.python.org/issue5202

   (4) https://bugs.python.org/issue8311


File: python.info,  Node: weakref,  Next: xml etree,  Prev: wave,  Up: Improved Modules<3>

1.3.4.62 weakref
................

New *note WeakMethod: 512. class simulates weak references to bound
methods.  (Contributed by Antoine Pitrou in issue 14631(1).)

New *note finalize: 513. class makes it possible to register a callback
to be invoked when an object is garbage collected, without needing to
carefully manage the lifecycle of the weak reference itself.
(Contributed by Richard Oudkerk in issue 15528(2).)

The callback, if any, associated with a *note ref: 514. is now exposed
via the *note __callback__: 515. attribute.  (Contributed by Mark
Dickinson in issue 17643(3).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue14631

   (2) https://bugs.python.org/issue15528

   (3) https://bugs.python.org/issue17643


File: python.info,  Node: xml etree,  Next: zipfile<3>,  Prev: weakref,  Up: Improved Modules<3>

1.3.4.63 xml.etree
..................

A new parser, *note XMLPullParser: 517, allows a non-blocking
applications to parse XML documents.  An example can be seen at *note
Pull API for non-blocking parsing: 518.  (Contributed by Antoine Pitrou
in issue 17741(1).)

The *note xml.etree.ElementTree: 134. *note tostring(): 519. and *note
tostringlist(): 51a. functions, and the *note ElementTree: 51b. *note
write(): 51c. method, now have a `short_empty_elements' *note
keyword-only parameter: 51d. providing control over whether elements
with no content are written in abbreviated (‘<tag />’) or expanded
(‘<tag></tag>’) form.  (Contributed by Ariel Poliak and Serhiy Storchaka
in issue 14377(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue17741

   (2) https://bugs.python.org/issue14377


File: python.info,  Node: zipfile<3>,  Prev: xml etree,  Up: Improved Modules<3>

1.3.4.64 zipfile
................

The *note writepy(): 51f. method of the *note PyZipFile: 520. class has
a new `filterfunc' option that can be used to control which directories
and files are added to the archive.  For example, this could be used to
exclude test files from the archive.  (Contributed by Christian Tismer
in issue 19274(1).)

The `allowZip64' parameter to *note ZipFile: 521. and ‘PyZipfile’ is now
‘True’ by default.  (Contributed by William Mallard in issue 17201(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue19274

   (2) https://bugs.python.org/issue17201


File: python.info,  Node: CPython Implementation Changes,  Next: Deprecated<3>,  Prev: Improved Modules<3>,  Up: What's New In Python 3 4

1.3.5 CPython Implementation Changes
------------------------------------

* Menu:

* PEP 445; Customization of CPython Memory Allocators: PEP 445 Customization of CPython Memory Allocators. 
* PEP 442; Safe Object Finalization: PEP 442 Safe Object Finalization. 
* PEP 456; Secure and Interchangeable Hash Algorithm: PEP 456 Secure and Interchangeable Hash Algorithm. 
* PEP 436; Argument Clinic: PEP 436 Argument Clinic. 
* Other Build and C API Changes:: 
* Other Improvements:: 
* Significant Optimizations:: 


File: python.info,  Node: PEP 445 Customization of CPython Memory Allocators,  Next: PEP 442 Safe Object Finalization,  Up: CPython Implementation Changes

1.3.5.1 PEP 445: Customization of CPython Memory Allocators
...........................................................

PEP 445(1) adds new C level interfaces to customize memory allocation in
the CPython interpreter.

See also
........

PEP 445(2) – Add new APIs to customize Python memory allocators

     PEP written and implemented by Victor Stinner.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0445

   (2) https://www.python.org/dev/peps/pep-0445


File: python.info,  Node: PEP 442 Safe Object Finalization,  Next: PEP 456 Secure and Interchangeable Hash Algorithm,  Prev: PEP 445 Customization of CPython Memory Allocators,  Up: CPython Implementation Changes

1.3.5.2 PEP 442: Safe Object Finalization
.........................................

PEP 442(1) removes the current limitations and quirks of object
finalization in CPython.  With it, objects with *note __del__(): 525.
methods, as well as generators with *note finally: 526. clauses, can be
finalized when they are part of a reference cycle.

As part of this change, module globals are no longer forcibly set to
*note None: 19d. during interpreter shutdown in most cases, instead
relying on the normal operation of the cyclic garbage collector.  This
avoids a whole class of interpreter-shutdown-time errors, usually
involving ‘__del__’ methods, that have plagued Python since the cyclic
GC was first introduced.

See also
........

PEP 442(2) – Safe object finalization

     PEP written and implemented by Antoine Pitrou.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0442

   (2) https://www.python.org/dev/peps/pep-0442


File: python.info,  Node: PEP 456 Secure and Interchangeable Hash Algorithm,  Next: PEP 436 Argument Clinic,  Prev: PEP 442 Safe Object Finalization,  Up: CPython Implementation Changes

1.3.5.3 PEP 456: Secure and Interchangeable Hash Algorithm
..........................................................

PEP 456(1) follows up on earlier security fix work done on Python’s hash
algorithm to address certain DOS attacks to which public facing APIs
backed by dictionary lookups may be subject.  (See issue 14621(2) for
the start of the current round of improvements.)  The PEP unifies
CPython’s hash code to make it easier for a packager to substitute a
different hash algorithm, and switches Python’s default implementation
to a SipHash implementation on platforms that have a 64 bit data type.
Any performance differences in comparison with the older FNV algorithm
are trivial.

The PEP adds additional fields to the *note sys.hash_info: 528. struct
sequence to describe the hash algorithm in use by the currently
executing binary.  Otherwise, the PEP does not alter any existing
CPython APIs.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0456

   (2) https://bugs.python.org/issue14621


File: python.info,  Node: PEP 436 Argument Clinic,  Next: Other Build and C API Changes,  Prev: PEP 456 Secure and Interchangeable Hash Algorithm,  Up: CPython Implementation Changes

1.3.5.4 PEP 436: Argument Clinic
................................

"Argument Clinic" ( PEP 436(1)) is now part of the CPython build process
and can be used to simplify the process of defining and maintaining
accurate signatures for builtins and standard library extension modules
implemented in C.

Some standard library extension modules have been converted to use
Argument Clinic in Python 3.4, and *note pydoc: d7. and *note inspect:
9e. have been updated accordingly.

It is expected that signature metadata for programmatic introspection
will be added to additional callables implemented in C as part of Python
3.4 maintenance releases.

     Note: The Argument Clinic PEP is not fully up to date with the
     state of the implementation.  This has been deemed acceptable by
     the release manager and core development team in this case, as
     Argument Clinic will not be made available as a public API for
     third party use in Python 3.4.

See also
........

PEP 436(2) – The Argument Clinic DSL

     PEP written and implemented by Larry Hastings.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0436

   (2) https://www.python.org/dev/peps/pep-0436


File: python.info,  Node: Other Build and C API Changes,  Next: Other Improvements,  Prev: PEP 436 Argument Clinic,  Up: CPython Implementation Changes

1.3.5.5 Other Build and C API Changes
.....................................

   * The new *note PyType_GetSlot(): 52b. function has been added to the
     stable ABI, allowing retrieval of function pointers from named type
     slots when using the limited API. (Contributed by Martin von Löwis
     in issue 17162(1).)

   * The new *note Py_SetStandardStreamEncoding(): 52c.
     pre-initialization API allows applications embedding the CPython
     interpreter to reliably force a particular encoding and error
     handler for the standard streams.  (Contributed by Bastien Montagne
     and Nick Coghlan in issue 16129(2).)

   * Most Python C APIs that don’t mutate string arguments are now
     correctly marked as accepting ‘const char *’ rather than ‘char *’.
     (Contributed by Serhiy Storchaka in issue 1772673(3).)

   * A new shell version of ‘python-config’ can be used even when a
     python interpreter is not available (for example, in cross
     compilation scenarios).

   * *note PyUnicode_FromFormat(): 3ba. now supports width and precision
     specifications for ‘%s’, ‘%A’, ‘%U’, ‘%V’, ‘%S’, and ‘%R’.
     (Contributed by Ysj Ray and Victor Stinner in issue 7330(4).)

   * New function *note PyStructSequence_InitType2(): 52d. supplements
     the existing *note PyStructSequence_InitType(): 52e. function.  The
     difference is that it returns ‘0’ on success and ‘-1’ on failure.

   * The CPython source can now be compiled using the address sanity
     checking features of recent versions of GCC and clang: the false
     alarms in the small object allocator have been silenced.
     (Contributed by Dhiru Kholia in issue 18596(5).)

   * The Windows build now uses Address Space Layout Randomization(6)
     and Data Execution Prevention(7).  (Contributed by Christian Heimes
     in issue 16632(8).)

   * New function *note PyObject_LengthHint(): 52f. is the C API
     equivalent of *note operator.length_hint(): 476.  (Contributed by
     Armin Ronacher in issue 16148(9).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue17162

   (2) https://bugs.python.org/issue16129

   (3) https://bugs.python.org/issue1772673

   (4) https://bugs.python.org/issue7330

   (5) https://bugs.python.org/issue18596

   (6) https://en.wikipedia.org/wiki/Address_space_layout_randomization

   (7) https://en.wikipedia.org/wiki/Data_Execution_Prevention

   (8) https://bugs.python.org/issue16632

   (9) https://bugs.python.org/issue16148


File: python.info,  Node: Other Improvements,  Next: Significant Optimizations,  Prev: Other Build and C API Changes,  Up: CPython Implementation Changes

1.3.5.6 Other Improvements
..........................

   * The *note python: 532. command has a new *note option: 533, ‘-I’,
     which causes it to run in "isolated mode", which means that *note
     sys.path: 16c. contains neither the script’s directory nor the
     user’s ‘site-packages’ directory, and all ‘PYTHON*’ environment
     variables are ignored (it implies both ‘-s’ and ‘-E’).  Other
     restrictions may also be applied in the future, with the goal being
     to isolate the execution of a script from the user’s environment.
     This is appropriate, for example, when Python is used to run a
     system script.  On most POSIX systems it can and should be used in
     the ‘#!’ line of system scripts.  (Contributed by Christian Heimes
     in issue 16499(1).)

   * Tab-completion is now enabled by default in the interactive
     interpreter on systems that support *note readline: dc.  History is
     also enabled by default, and is written to (and read from) the file
     ‘~/.python-history’.  (Contributed by Antoine Pitrou and Éric
     Araujo in issue 5845(2).)

   * Invoking the Python interpreter with ‘--version’ now outputs the
     version to standard output instead of standard error (issue
     18338(3)).  Similar changes were made to *note argparse: 6. (issue
     18920(4)) and other modules that have script-like invocation
     capabilities (issue 18922(5)).

   * The CPython Windows installer now adds ‘.py’ to the ‘PATHEXT’
     variable when extensions are registered, allowing users to run a
     python script at the windows command prompt by just typing its name
     without the ‘.py’ extension.  (Contributed by Paul Moore in issue
     18569(6).)

   * A new ‘make’ target coverage-report(7) will build python, run the
     test suite, and generate an HTML coverage report for the C codebase
     using ‘gcov’ and lcov(8).

   * The ‘-R’ option to the *note python regression test suite: 534. now
     also checks for memory allocation leaks, using *note
     sys.getallocatedblocks(): 4e3.  (Contributed by Antoine Pitrou in
     issue 13390(9).)

   * ‘python -m’ now works with namespace packages.

   * The *note stat: f2. module is now implemented in C, which means it
     gets the values for its constants from the C header files, instead
     of having the values hard-coded in the python module as was
     previously the case.

   * Loading multiple python modules from a single OS module (‘.so’,
     ‘.dll’) now works correctly (previously it silently returned the
     first python module in the file).  (Contributed by Václav Šmilauer
     in issue 16421(10).)

   * A new opcode, *note LOAD_CLASSDEREF: 535, has been added to fix a
     bug in the loading of free variables in class bodies that could be
     triggered by certain uses of *note __prepare__: 536.  (Contributed
     by Benjamin Peterson in issue 17853(11).)

   * A number of MemoryError-related crashes were identified and fixed
     by Victor Stinner using his PEP 445(12)-based ‘pyfailmalloc’ tool
     (issue 18408(13), issue 18520(14)).

   * The *note pyvenv: 3e1. command now accepts a ‘--copies’ option to
     use copies rather than symlinks even on systems where symlinks are
     the default.  (Contributed by Vinay Sajip in issue 18807(15).)

   * The *note pyvenv: 3e1. command also accepts a ‘--without-pip’
     option to suppress the otherwise-automatic bootstrapping of pip
     into the virtual environment.  (Contributed by Nick Coghlan in
     issue 19552(16) as part of the PEP 453(17) implementation.)

   * The encoding name is now optional in the value set for the *note
     PYTHONIOENCODING: 537. environment variable.  This makes it
     possible to set just the error handler, without changing the
     default encoding.  (Contributed by Serhiy Storchaka in issue
     18818(18).)

   * The *note bz2: 14, *note lzma: ab, and *note gzip: 8b. module
     ‘open’ functions now support ‘x’ (exclusive creation) mode.
     (Contributed by Tim Heaney and Vajrasky Kok in issue 19201(19),
     issue 19222(20), and issue 19223(21).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue16499

   (2) https://bugs.python.org/issue5845

   (3) https://bugs.python.org/issue18338

   (4) https://bugs.python.org/issue18920

   (5) https://bugs.python.org/issue18922

   (6) https://bugs.python.org/issue18569

   (7) 
https://docs.python.org/devguide/coverage.html#measuring-coverage-of-c-code-with-gcov-and-lcov

   (8) http://ltp.sourceforge.net/coverage/lcov.php

   (9) https://bugs.python.org/issue13390

   (10) https://bugs.python.org/issue16421

   (11) https://bugs.python.org/issue17853

   (12) https://www.python.org/dev/peps/pep-0445

   (13) https://bugs.python.org/issue18408

   (14) https://bugs.python.org/issue18520

   (15) https://bugs.python.org/issue18807

   (16) https://bugs.python.org/issue19552

   (17) https://www.python.org/dev/peps/pep-0453

   (18) https://bugs.python.org/issue18818

   (19) https://bugs.python.org/issue19201

   (20) https://bugs.python.org/issue19222

   (21) https://bugs.python.org/issue19223


File: python.info,  Node: Significant Optimizations,  Prev: Other Improvements,  Up: CPython Implementation Changes

1.3.5.7 Significant Optimizations
.................................

   * The UTF-32 decoder is now 3x to 4x faster.  (Contributed by Serhiy
     Storchaka in issue 14625(1).)

   * The cost of hash collisions for sets is now reduced.  Each hash
     table probe now checks a series of consecutive, adjacent key/hash
     pairs before continuing to make random probes through the hash
     table.  This exploits cache locality to make collision resolution
     less expensive.  The collision resolution scheme can be described
     as a hybrid of linear probing and open addressing.  The number of
     additional linear probes defaults to nine.  This can be changed at
     compile-time by defining LINEAR_PROBES to be any value.  Set
     LINEAR_PROBES=0 to turn-off linear probing entirely.  (Contributed
     by Raymond Hettinger in issue 18771(2).)

   * The interpreter starts about 30% faster.  A couple of measures lead
     to the speedup.  The interpreter loads fewer modules on startup,
     e.g.  the *note re: db, *note collections: 1e. and *note locale:
     a7. modules and their dependencies are no longer imported by
     default.  The marshal module has been improved to load compiled
     Python code faster.  (Contributed by Antoine Pitrou, Christian
     Heimes and Victor Stinner in issue 19219(3), issue 19218(4), issue
     19209(5), issue 19205(6) and issue 9548(7).)

   * *note bz2.BZ2File: 539. is now as fast or faster than the Python2
     version for most cases.  *note lzma.LZMAFile: 53a. has also been
     optimized.  (Contributed by Serhiy Storchaka and Nadeem Vawda in
     issue 16034(8).)

   * *note random.getrandbits(): 53b. is 20%-40% faster for small
     integers (the most common use case).  (Contributed by Serhiy
     Storchaka in issue 16674(9).)

   * By taking advantage of the new storage format for strings, pickling
     of strings is now significantly faster.  (Contributed by Victor
     Stinner and Antoine Pitrou in issue 15596(10).)

   * A performance issue in ‘io.FileIO.readall()’ has been solved.  This
     particularly affects Windows, and significantly speeds up the case
     of piping significant amounts of data through *note subprocess: f7.
     (Contributed by Richard Oudkerk in issue 15758(11).)

   * *note html.escape(): 53c. is now 10x faster.  (Contributed by Matt
     Bryant in issue 18020(12).)

   * On Windows, the native ‘VirtualAlloc’ is now used instead of the
     CRT ‘malloc’ in ‘obmalloc’.  Artificial benchmarks show about a 3%
     memory savings.

   * *note os.urandom(): 2df. now uses a lazily-opened persistent file
     descriptor so as to avoid using many file descriptors when run in
     parallel from multiple threads.  (Contributed by Antoine Pitrou in
     issue 18756(13).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue14625

   (2) https://bugs.python.org/issue18771

   (3) https://bugs.python.org/issue19219

   (4) https://bugs.python.org/issue19218

   (5) https://bugs.python.org/issue19209

   (6) https://bugs.python.org/issue19205

   (7) https://bugs.python.org/issue9548

   (8) https://bugs.python.org/issue16034

   (9) https://bugs.python.org/issue16674

   (10) https://bugs.python.org/issue15596

   (11) https://bugs.python.org/issue15758

   (12) https://bugs.python.org/issue18020

   (13) https://bugs.python.org/issue18756


File: python.info,  Node: Deprecated<3>,  Next: Removed<3>,  Prev: CPython Implementation Changes,  Up: What's New In Python 3 4

1.3.6 Deprecated
----------------

This section covers various APIs and other features that have been
deprecated in Python 3.4, and will be removed in Python 3.5 or later.
In most (but not all) cases, using the deprecated APIs will produce a
*note DeprecationWarning: 192. when the interpreter is run with
deprecation warnings enabled (for example, by using ‘-Wd’).

* Menu:

* Deprecations in the Python API:: 
* Deprecated Features:: 


File: python.info,  Node: Deprecations in the Python API,  Next: Deprecated Features,  Up: Deprecated<3>

1.3.6.1 Deprecations in the Python API
......................................

   * As mentioned in *note PEP 451; A ModuleSpec Type for the Import
     System: 3c6, a number of *note importlib: 9a. methods and functions
     are deprecated: *note importlib.find_loader(): 53f. is replaced by
     *note importlib.util.find_spec(): 540.; *note
     importlib.machinery.PathFinder.find_module(): 541. is replaced by
     *note importlib.machinery.PathFinder.find_spec(): 542.; *note
     importlib.abc.MetaPathFinder.find_module(): 543. is replaced by
     *note importlib.abc.MetaPathFinder.find_spec(): 544.; *note
     importlib.abc.PathEntryFinder.find_loader(): 545. and *note
     find_module(): 546. are replaced by *note
     importlib.abc.PathEntryFinder.find_spec(): 547.; all of the
     ‘xxxLoader’ ABC ‘load_module’ methods (*note
     importlib.abc.Loader.load_module(): 18b, *note
     importlib.abc.InspectLoader.load_module(): 548, *note
     importlib.abc.FileLoader.load_module(): 549, *note
     importlib.abc.SourceLoader.load_module(): 54a.) should no longer be
     implemented, instead loaders should implement an ‘exec_module’
     method (*note importlib.abc.Loader.exec_module(): 18c, *note
     importlib.abc.InspectLoader.exec_module(): 54b. *note
     importlib.abc.SourceLoader.exec_module(): 54c.) and let the import
     system take care of the rest; and *note
     importlib.abc.Loader.module_repr(): 54d, *note
     importlib.util.module_for_loader(): 54e, *note
     importlib.util.set_loader(): 54f, and *note
     importlib.util.set_package(): 550. are no longer needed because
     their functions are now handled automatically by the import system.

   * The *note imp: 99. module is pending deprecation.  To keep
     compatibility with Python 2/3 code bases, the module’s removal is
     currently not scheduled.

   * The *note formatter: 80. module is pending deprecation and is
     slated for removal in Python 3.6.

   * ‘MD5’ as the default `digestmod' for the *note hmac.new(): 449.
     function is deprecated.  Python 3.6 will require an explicit digest
     name or constructor as `digestmod' argument.

   * The internal ‘Netrc’ class in the *note ftplib: 83. module has been
     documented as deprecated in its docstring for quite some time.  It
     now emits a *note DeprecationWarning: 192. and will be removed
     completely in Python 3.5.

   * The undocumented `endtime' argument to *note
     subprocess.Popen.wait(): 551. should not have been exposed and is
     hopefully not in use; it is deprecated and will mostly likely be
     removed in Python 3.5.

   * The `strict' argument of *note HTMLParser: 3a9. is deprecated.

   * The *note plistlib: cd. *note readPlist(): 552, *note writePlist():
     553, *note readPlistFromBytes(): 554, and *note
     writePlistToBytes(): 555. functions are deprecated in favor of the
     corresponding new functions *note load(): 486, *note dump(): 487,
     *note loads(): 488, and *note dumps(): 489.  *note Data(): 556. is
     deprecated in favor of just using the *note bytes: 1db.
     constructor.

   * The *note sysconfig: fc. key ‘SO’ is deprecated, it has been
     replaced by ‘EXT_SUFFIX’.

   * The ‘U’ mode accepted by various ‘open’ functions is deprecated.
     In Python3 it does not do anything useful, and should be replaced
     by appropriate uses of *note io.TextIOWrapper: 557. (if needed) and
     its `newline' argument.

   * The `parser' argument of *note xml.etree.ElementTree.iterparse():
     558. has been deprecated, as has the `html' argument of *note
     XMLParser(): 559.  To prepare for the removal of the latter, all
     arguments to ‘XMLParser’ should be passed by keyword.


File: python.info,  Node: Deprecated Features,  Prev: Deprecations in the Python API,  Up: Deprecated<3>

1.3.6.2 Deprecated Features
...........................

   * Running *note IDLE: 55b. with the ‘-n’ flag (no subprocess) is
     deprecated.  However, the feature will not be removed until issue
     18823(1) is resolved.

   * The site module adding a "site-python" directory to sys.path, if it
     exists, is deprecated (issue 19375(2)).

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue18823

   (2) https://bugs.python.org/issue19375


File: python.info,  Node: Removed<3>,  Next: Porting to Python 3 4,  Prev: Deprecated<3>,  Up: What's New In Python 3 4

1.3.7 Removed
-------------

* Menu:

* Operating Systems No Longer Supported:: 
* API and Feature Removals: API and Feature Removals<3>. 
* Code Cleanups:: 


File: python.info,  Node: Operating Systems No Longer Supported,  Next: API and Feature Removals<3>,  Up: Removed<3>

1.3.7.1 Operating Systems No Longer Supported
.............................................

Support for the following operating systems has been removed from the
source and build tools:

   * OS/2 (issue 16135(1)).

   * Windows 2000 (changeset e52df05b496a).

   * Windows systems where ‘COMSPEC’ points to ‘command.com’ (issue
     14470(2)).

   * VMS (issue 16136(3)).

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue16135

   (2) https://bugs.python.org/issue14470

   (3) https://bugs.python.org/issue16136


File: python.info,  Node: API and Feature Removals<3>,  Next: Code Cleanups,  Prev: Operating Systems No Longer Supported,  Up: Removed<3>

1.3.7.2 API and Feature Removals
................................

The following obsolete and previously deprecated APIs and features have
been removed:

   * The unmaintained ‘Misc/TextMate’ and ‘Misc/vim’ directories have
     been removed (see the devguide(1) for suggestions on what to use
     instead).

   * The ‘SO’ makefile macro is removed (it was replaced by the
     ‘SHLIB_SUFFIX’ and ‘EXT_SUFFIX’ macros) (issue 16754(2)).

   * The ‘PyThreadState.tick_counter’ field has been removed; its value
     has been meaningless since Python 3.2, when the "new GIL" was
     introduced (issue 19199(3)).

   * ‘PyLoader’ and ‘PyPycLoader’ have been removed from *note
     importlib: 9a.  (Contributed by Taras Lyapun in issue 15641(4).)

   * The `strict' argument to *note HTTPConnection: 55f. and *note
     HTTPSConnection: 560. has been removed.  HTTP 0.9-style "Simple
     Responses" are no longer supported.

   * The deprecated *note urllib.request.Request: 4f8. getter and setter
     methods ‘add_data’, ‘has_data’, ‘get_data’, ‘get_type’, ‘get_host’,
     ‘get_selector’, ‘set_proxy’, ‘get_origin_req_host’, and
     ‘is_unverifiable’ have been removed (use direct attribute access
     instead).

   * Support for loading the deprecated ‘TYPE_INT64’ has been removed
     from *note marshal: af.  (Contributed by Dan Riti in issue
     15480(5).)

   * *note inspect.Signature: 2a8.: positional-only parameters are now
     required to have a valid name.

   * *note object.__format__(): 561. no longer accepts non-empty format
     strings, it now raises a *note TypeError: 562. instead.  Using a
     non-empty string has been deprecated since Python 3.2.  This change
     has been made to prevent a situation where previously working (but
     incorrect) code would start failing if an object gained a
     __format__ method, which means that your code may now raise a *note
     TypeError: 562. if you are using an ‘'s'’ format code with objects
     that do not have a __format__ method that handles it.  See issue
     7994(6) for background.

   * ‘difflib.SequenceMatcher.isbjunk()’ and
     ‘difflib.SequenceMatcher.isbpopular()’ were deprecated in 3.2, and
     have now been removed: use ‘x in sm.bjunk’ and ‘x in sm.bpopular’,
     where `sm' is a *note SequenceMatcher: 563. object (issue
     13248(7)).

   ---------- Footnotes ----------

   (1) https://docs.python.org/devguide

   (2) https://bugs.python.org/issue16754

   (3) https://bugs.python.org/issue19199

   (4) https://bugs.python.org/issue15641

   (5) https://bugs.python.org/issue15480

   (6) https://bugs.python.org/issue7994

   (7) https://bugs.python.org/issue13248


File: python.info,  Node: Code Cleanups,  Prev: API and Feature Removals<3>,  Up: Removed<3>

1.3.7.3 Code Cleanups
.....................

   * The unused and undocumented internal ‘Scanner’ class has been
     removed from the *note pydoc: d7. module.

   * The private and effectively unused ‘_gestalt’ module has been
     removed, along with the private *note platform: cc. functions
     ‘_mac_ver_lookup’, ‘_mac_ver_gstalt’, and ‘_bcd2str’, which would
     only have ever been called on badly broken OSX systems (see issue
     18393(1)).

   * The hardcoded copies of certain *note stat: f2. constants that were
     included in the *note tarfile: ff. module namespace have been
     removed.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue18393


File: python.info,  Node: Porting to Python 3 4,  Next: Changed in 3 4 3,  Prev: Removed<3>,  Up: What's New In Python 3 4

1.3.8 Porting to Python 3.4
---------------------------

This section lists previously described changes and other bugfixes that
may require changes to your code.

* Menu:

* Changes in 'python' Command Behavior:: 
* Changes in the Python API: Changes in the Python API<3>. 
* Changes in the C API: Changes in the C API<3>. 


File: python.info,  Node: Changes in 'python' Command Behavior,  Next: Changes in the Python API<3>,  Up: Porting to Python 3 4

1.3.8.1 Changes in ’python’ Command Behavior
............................................

   * In a posix shell, setting the ‘PATH’ environment variable to an
     empty value is equivalent to not setting it at all.  However,
     setting *note PYTHONPATH: 567. to an empty value was `not'
     equivalent to not setting it at all: setting *note PYTHONPATH: 567.
     to an empty value was equivalent to setting it to ‘.’, which leads
     to confusion when reasoning by analogy to how ‘PATH’ works.  The
     behavior now conforms to the posix convention for ‘PATH’.

   * The [X refs, Y blocks] output of a debug (‘--with-pydebug’) build
     of the CPython interpreter is now off by default.  It can be
     re-enabled using the ‘-X showrefcount’ option.  (Contributed by
     Ezio Melotti in issue 17323(1).)

   * The python command and most stdlib scripts (as well as *note
     argparse: 6.) now output ‘--version’ information to ‘stdout’
     instead of ‘stderr’ (for issue list see *note Other Improvements:
     531. above).

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue17323


File: python.info,  Node: Changes in the Python API<3>,  Next: Changes in the C API<3>,  Prev: Changes in 'python' Command Behavior,  Up: Porting to Python 3 4

1.3.8.2 Changes in the Python API
.................................

   * The ABCs defined in *note importlib.abc: 9b. now either raise the
     appropriate exception or return a default value instead of raising
     *note NotImplementedError: 569. blindly.  This will only affect
     code calling *note super(): 56a. and falling through all the way to
     the ABCs.  For compatibility, catch both *note NotImplementedError:
     569. or the appropriate exception as needed.

   * The module type now initializes the *note __package__: 56b. and
     *note __loader__: 56c. attributes to ‘None’ by default.  To
     determine if these attributes were set in a backwards-compatible
     fashion, use e.g.  ‘getattr(module, '__loader__', None) is not
     None’.  (issue 17115(1).)

   * *note importlib.util.module_for_loader(): 54e. now sets
     ‘__loader__’ and ‘__package__’ unconditionally to properly support
     reloading.  If this is not desired then you will need to set these
     attributes manually.  You can use ‘importlib.util.module_to_load()’
     for module management.

   * Import now resets relevant attributes (e.g.  ‘__name__’,
     ‘__loader__’, ‘__package__’, ‘__file__’, ‘__cached__’)
     unconditionally when reloading.  Note that this restores a pre-3.3
     behavior in that it means a module is re-found when re-loaded
     (issue 19413(2)).

   * Frozen packages no longer set ‘__path__’ to a list containing the
     package name, they now set it to an empty list.  The previous
     behavior could cause the import system to do the wrong thing on
     submodule imports if there was also a directory with the same name
     as the frozen package.  The correct way to determine if a module is
     a package or not is to use ‘hasattr(module, '__path__')’ (issue
     18065(3)).

   * Frozen modules no longer define a ‘__file__’ attribute.  It’s
     semantically incorrect for frozen modules to set the attribute as
     they are not loaded from any explicit location.  If you must know
     that a module comes from frozen code then you can see if the
     module’s ‘__spec__.location’ is set to ‘'frozen'’, check if the
     loader is a subclass of *note importlib.machinery.FrozenImporter:
     56d, or if Python 2 compatibility is necessary you can use
     ‘imp.is_frozen()’.

   * *note py_compile.compile(): 56e. now raises *note FileExistsError:
     56f. if the file path it would write to is a symlink or a
     non-regular file.  This is to act as a warning that import will
     overwrite those files with a regular file regardless of what type
     of file path they were originally.

   * *note importlib.abc.SourceLoader.get_source(): 570. no longer
     raises *note ImportError: 19f. when the source code being loaded
     triggers a *note SyntaxError: 3a6. or *note UnicodeDecodeError:
     571.  As *note ImportError: 19f. is meant to be raised only when
     source code cannot be found but it should, it was felt to be
     over-reaching/overloading of that meaning when the source code is
     found but improperly structured.  If you were catching ImportError
     before and wish to continue to ignore syntax or decoding issues,
     catch all three exceptions now.

   * *note functools.update_wrapper(): 572. and *note functools.wraps():
     462. now correctly set the ‘__wrapped__’ attribute to the function
     being wrapped, even if that function also had its ‘__wrapped__’
     attribute set.  This means ‘__wrapped__’ attributes now correctly
     link a stack of decorated functions rather than every ‘__wrapped__’
     attribute in the chain referring to the innermost function.
     Introspection libraries that assumed the previous behaviour was
     intentional can use *note inspect.unwrap(): 461. to access the
     first function in the chain that has no ‘__wrapped__’ attribute.

   * *note inspect.getfullargspec(): 39b. has been reimplemented on top
     of *note inspect.signature(): 2ac. and hence handles a much wider
     variety of callable objects than it did in the past.  It is
     expected that additional builtin and extension module callables
     will gain signature metadata over the course of the Python 3.4
     series.  Code that assumes that *note inspect.getfullargspec():
     39b. will fail on non-Python callables may need to be adjusted
     accordingly.

   * *note importlib.machinery.PathFinder: 573. now passes on the
     current working directory to objects in *note sys.path_hooks: 574.
     for the empty string.  This results in *note
     sys.path_importer_cache: 3ac. never containing ‘''’, thus iterating
     through *note sys.path_importer_cache: 3ac. based on *note
     sys.path: 16c. will not find all keys.  A module’s ‘__file__’ when
     imported in the current working directory will also now have an
     absolute path, including when using ‘-m’ with the interpreter
     (except for ‘__main__.__file__’ when a script has been executed
     directly using a relative path) (Contributed by Brett Cannon in
     issue 18416(4)).  is specified on the command-line) (issue
     18416(5)).

   * The removal of the `strict' argument to *note HTTPConnection: 55f.
     and *note HTTPSConnection: 560. changes the meaning of the
     remaining arguments if you are specifying them positionally rather
     than by keyword.  If you’ve been paying attention to deprecation
     warnings your code should already be specifying any additional
     arguments via keywords.

   * Strings between ‘from __future__ import ...’ statements now
     `always' raise a *note SyntaxError: 3a6.  Previously if there was
     no leading docstring, an interstitial string would sometimes be
     ignored.  This brings CPython into compliance with the language
     spec; Jython and PyPy already were.  (issue 17434(6)).

   * *note ssl.SSLSocket.getpeercert(): 4d1. and *note
     ssl.SSLSocket.do_handshake(): 328. now raise an *note OSError: 4b6.
     with ‘ENOTCONN’ when the ‘SSLSocket’ is not connected, instead of
     the previous behavior of raising an *note AttributeError: 356.  In
     addition, *note getpeercert(): 4d1. will raise a *note ValueError:
     19c. if the handshake has not yet been done.

   * *note base64.b32decode(): 575. now raises a *note binascii.Error:
     576. when the input string contains non-b32-alphabet characters,
     instead of a *note TypeError: 562.  This particular *note
     TypeError: 562. was missed when the other *note TypeError: 562.s
     were converted.  (Contributed by Serhiy Storchaka in issue
     18011(7).)  Note: this change was also inadvertently applied in
     Python 3.3.3.

   * The ‘file’ attribute is now automatically closed when the creating
     ‘cgi.FieldStorage’ instance is garbage collected.  If you were
     pulling the file object out separately from the ‘cgi.FieldStorage’
     instance and not keeping the instance alive, then you should either
     store the entire ‘cgi.FieldStorage’ instance or read the contents
     of the file before the ‘cgi.FieldStorage’ instance is garbage
     collected.

   * Calling ‘read’ or ‘write’ on a closed SSL socket now raises an
     informative *note ValueError: 19c. rather than the previous more
     mysterious *note AttributeError: 356. (issue 9177(8)).

   * *note slice.indices(): 577. no longer produces an *note
     OverflowError: 578. for huge values.  As a consequence of this fix,
     *note slice.indices(): 577. now raises a *note ValueError: 19c. if
     given a negative length; previously it returned nonsense values
     (issue 14794(9)).

   * The *note complex: 579. constructor, unlike the *note cmath: 19.
     functions, was incorrectly accepting *note float: 57a. values if an
     object’s ‘__complex__’ special method returned one.  This now
     raises a *note TypeError: 562.  (issue 16290(10).)

   * The *note int: 227. constructor in 3.2 and 3.3 erroneously accepts
     *note float: 57a. values for the `base' parameter.  It is unlikely
     anyone was doing this, but if so, it will now raise a *note
     TypeError: 562. (issue 16772(11)).

   * Defaults for keyword-only arguments are now evaluated `after'
     defaults for regular keyword arguments, instead of before.
     Hopefully no one wrote any code that depends on the previous buggy
     behavior (issue 16967(12)).

   * Stale thread states are now cleared after *note fork(): 57b.  This
     may cause some system resources to be released that previously were
     incorrectly kept perpetually alive (for example, database
     connections kept in thread-local storage).  (issue 17094(13).)

   * Parameter names in ‘__annotations__’ dicts are now mangled
     properly, similarly to ‘__kwdefaults__’.  (Contributed by Yury
     Selivanov in issue 20625(14).)

   * *note hashlib.hash.name: 447. now always returns the identifier in
     lower case.  Previously some builtin hashes had uppercase names,
     but now that it is a formal public interface the naming has been
     made consistent (issue 18532(15)).

   * Because *note unittest.TestSuite: 27d. now drops references to
     tests after they are run, test harnesses that re-use a *note
     TestSuite: 27d. to re-run a set of tests may fail.  Test suites
     should not be re-used in this fashion since it means state is
     retained between test runs, breaking the test isolation that *note
     unittest: 118. is designed to provide.  However, if the lack of
     isolation is considered acceptable, the old behavior can be
     restored by creating a *note TestSuite: 27d. subclass that defines
     a ‘_removeTestAtIndex’ method that does nothing (see *note
     TestSuite.__iter__(): 57c.) (issue 11798(16)).

   * *note unittest: 118. now uses *note argparse: 6. for command line
     parsing.  There are certain invalid command forms that used to work
     that are no longer allowed; in theory this should not cause
     backward compatibility issues since the disallowed command forms
     didn’t make any sense and are unlikely to be in use.

   * The *note re.split(): 3ae, *note re.findall(): 57d, and *note
     re.sub(): 2f5. functions, and the *note group(): 57e. and *note
     groups(): 57f. methods of ‘match’ objects now always return a
     `bytes' object when the string to be matched is a *note bytes-like
     object: 36b.  Previously the return type matched the input type, so
     if your code was depending on the return value being, say, a
     ‘bytearray’, you will need to change your code.

   * *note audioop: d. functions now raise an error immediately if
     passed string input, instead of failing randomly later on (issue
     16685(17)).

   * The new `convert_charrefs' argument to *note HTMLParser: 3a9.
     currently defaults to ‘False’ for backward compatibility, but will
     eventually be changed to default to ‘True’.  It is recommended that
     you add this keyword, with the appropriate value, to any *note
     HTMLParser: 3a9. calls in your code (issue 13633(18)).

   * Since the `digestmod' argument to the *note hmac.new(): 449.
     function will in the future have no default, all calls to *note
     hmac.new(): 449. should be changed to explicitly specify a
     `digestmod' (issue 17276(19)).

   * Calling *note sysconfig.get_config_var(): 580. with the ‘SO’ key,
     or looking ‘SO’ up in the results of a call to *note
     sysconfig.get_config_vars(): 581. is deprecated.  This key should
     be replaced by ‘EXT_SUFFIX’ or ‘SHLIB_SUFFIX’, depending on the
     context (issue 19555(20)).

   * Any calls to ‘open’ functions that specify ‘U’ should be modified.
     ‘U’ is ineffective in Python3 and will eventually raise an error if
     used.  Depending on the function, the equivalent of its old Python2
     behavior can be achieved using either a `newline' argument, or if
     necessary by wrapping the stream in *note TextIOWrapper: 557. to
     use its `newline' argument (issue 15204(21)).

   * If you use *note pyvenv: 3e1. in a script and desire that pip `not'
     be installed, you must add ‘--without-pip’ to your command
     invocation.

   * The default behavior of *note json.dump(): 582. and *note
     json.dumps(): 373. when an indent is specified has changed: it no
     longer produces trailing spaces after the item separating commas at
     the ends of lines.  This will matter only if you have tests that
     are doing white-space-sensitive comparisons of such output (issue
     16333(22)).

   * *note doctest: 65. now looks for doctests in extension module
     ‘__doc__’ strings, so if your doctest test discovery includes
     extension modules that have things that look like doctests in them
     you may see test failures you’ve never seen before when running
     your tests (issue 3158(23)).

   * The *note collections.abc: 1f. module has been slightly refactored
     as part of the Python startup improvements.  As a consequence of
     this, it is no longer the case that importing *note collections:
     1e. automatically imports *note collections.abc: 1f.  If your
     program depended on the (undocumented) implicit import, you will
     need to add an explicit ‘import collections.abc’ (issue 20784(24)).

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue17115

   (2) https://bugs.python.org/issue19413

   (3) https://bugs.python.org/issue18065

   (4) https://bugs.python.org/issue18416

   (5) https://bugs.python.org/issue18416

   (6) https://bugs.python.org/issue17434

   (7) https://bugs.python.org/issue18011

   (8) https://bugs.python.org/issue9177

   (9) https://bugs.python.org/issue14794

   (10) https://bugs.python.org/issue16290

   (11) https://bugs.python.org/issue16772

   (12) https://bugs.python.org/issue16967

   (13) https://bugs.python.org/issue17094

   (14) https://bugs.python.org/issue20625

   (15) https://bugs.python.org/issue18532

   (16) https://bugs.python.org/issue11798

   (17) https://bugs.python.org/issue16685

   (18) https://bugs.python.org/issue13633

   (19) https://bugs.python.org/issue17276

   (20) https://bugs.python.org/issue19555

   (21) https://bugs.python.org/issue15204

   (22) https://bugs.python.org/issue16333

   (23) https://bugs.python.org/issue3158

   (24) https://bugs.python.org/issue20784


File: python.info,  Node: Changes in the C API<3>,  Prev: Changes in the Python API<3>,  Up: Porting to Python 3 4

1.3.8.3 Changes in the C API
............................

   * *note PyEval_EvalFrameEx(): 584, *note PyObject_Repr(): 585, and
     *note PyObject_Str(): 586, along with some other internal C APIs,
     now include a debugging assertion that ensures they are not used in
     situations where they may silently discard a currently active
     exception.  In cases where discarding the active exception is
     expected and desired (for example, because it has already been
     saved locally with *note PyErr_Fetch(): 587. or is being
     deliberately replaced with a different exception), an explicit
     *note PyErr_Clear(): 588. call will be needed to avoid triggering
     the assertion when invoking these operations (directly or
     indirectly) and running against a version of Python that is
     compiled with assertions enabled.

   * *note PyErr_SetImportError(): 589. now sets *note TypeError: 562.
     when its `msg' argument is not set.  Previously only ‘NULL’ was
     returned with no exception set.

   * The result of the *note PyOS_ReadlineFunctionPointer: 58a. callback
     must now be a string allocated by *note PyMem_RawMalloc(): 58b. or
     *note PyMem_RawRealloc(): 58c, or `NULL' if an error occurred,
     instead of a string allocated by *note PyMem_Malloc(): 152. or
     *note PyMem_Realloc(): 58d. (issue 16742(1))

   * ‘PyThread_set_key_value()’ now always set the value.  In Python
     3.3, the function did nothing if the key already exists (if the
     current value is a non-NULL pointer).

   * The ‘f_tstate’ (thread state) field of the *note PyFrameObject:
     58e. structure has been removed to fix a bug: see issue 14432(2)
     for the rationale.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue16742

   (2) https://bugs.python.org/issue14432


File: python.info,  Node: Changed in 3 4 3,  Prev: Porting to Python 3 4,  Up: What's New In Python 3 4

1.3.9 Changed in 3.4.3
----------------------

* Menu:

* PEP 476; Enabling certificate verification by default for stdlib http clients: PEP 476 Enabling certificate verification by default for stdlib http clients. 


File: python.info,  Node: PEP 476 Enabling certificate verification by default for stdlib http clients,  Up: Changed in 3 4 3

1.3.9.1 PEP 476: Enabling certificate verification by default for stdlib http clients
.....................................................................................

*note http.client: 93. and modules which use it, such as *note
urllib.request: 11d. and *note xmlrpc.client: 13c, will now verify that
the server presents a certificate which is signed by a CA in the
platform trust store and whose hostname matches the hostname being
requested by default, significantly improving security for many
applications.

For applications which require the old previous behavior, they can pass
an alternate context:

     import urllib.request
     import ssl

     # This disables all verification
     context = ssl._create_unverified_context()

     # This allows using a specific certificate for the host, which doesn't need
     # to be in the trust store
     context = ssl.create_default_context(cafile="/path/to/file.crt")

     urllib.request.urlopen("https://invalid-cert", context=context)


File: python.info,  Node: What's New In Python 3 3,  Next: What's New In Python 3 2,  Prev: What's New In Python 3 4,  Up: What's New in Python

1.4 What’s New In Python 3.3
============================

This article explains the new features in Python 3.3, compared to 3.2.
Python 3.3 was released on September 29, 2012.  For full details, see
the changelog(1).

See also
........

PEP 398(2) - Python 3.3 Release Schedule

* Menu:

* Summary: Summary -- Release highlights<3>. Release highlights
* PEP 405; Virtual Environments: PEP 405 Virtual Environments. 
* PEP 420; Implicit Namespace Packages: PEP 420 Implicit Namespace Packages. 
* PEP 3118; New memoryview implementation and buffer protocol documentation: PEP 3118 New memoryview implementation and buffer protocol documentation. 
* PEP 393; Flexible String Representation: PEP 393 Flexible String Representation. 
* PEP 397; Python Launcher for Windows: PEP 397 Python Launcher for Windows. 
* PEP 3151; Reworking the OS and IO exception hierarchy: PEP 3151 Reworking the OS and IO exception hierarchy. 
* PEP 380; Syntax for Delegating to a Subgenerator: PEP 380 Syntax for Delegating to a Subgenerator. 
* PEP 409; Suppressing exception context: PEP 409 Suppressing exception context. 
* PEP 414; Explicit Unicode literals: PEP 414 Explicit Unicode literals. 
* PEP 3155; Qualified name for classes and functions: PEP 3155 Qualified name for classes and functions. 
* PEP 412; Key-Sharing Dictionary: PEP 412 Key-Sharing Dictionary. 
* PEP 362; Function Signature Object: PEP 362 Function Signature Object. 
* PEP 421; Adding sys.implementation: PEP 421 Adding sys implementation. 
* Using importlib as the Implementation of Import:: 
* Other Language Changes: Other Language Changes<4>. 
* A Finer-Grained Import Lock:: 
* Builtin functions and types:: 
* New Modules: New Modules<4>. 
* Improved Modules: Improved Modules<4>. 
* Optimizations: Optimizations<3>. 
* Build and C API Changes: Build and C API Changes<3>. 
* Deprecated: Deprecated<4>. 
* Porting to Python 3.3: Porting to Python 3 3. 

   ---------- Footnotes ----------

   (1) https://docs.python.org/3.3/whatsnew/changelog.html

   (2) https://www.python.org/dev/peps/pep-0398


File: python.info,  Node: Summary -- Release highlights<3>,  Next: PEP 405 Virtual Environments,  Up: What's New In Python 3 3

1.4.1 Summary – Release highlights
----------------------------------

New syntax features:

   * New ‘yield from’ expression for *note generator delegation: 595.

   * The ‘u'unicode'’ syntax is accepted again for *note str: 25a.
     objects.

New library modules:

   * *note faulthandler: 7b. (helps debugging low-level crashes)

   * *note ipaddress: a0. (high-level objects representing IP addresses
     and masks)

   * *note lzma: ab. (compress data using the XZ / LZMA algorithm)

   * *note unittest.mock: 119. (replace parts of your system under test
     with mock objects)

   * *note venv: 122. (Python *note virtual environments: 596, as in the
     popular ‘virtualenv’ package)

New built-in features:

   * Reworked *note I/O exception hierarchy: 597.

Implementation improvements:

   * Rewritten *note import machinery: 598. based on *note importlib:
     9a.

   * More compact *note unicode strings: 599.

   * More compact *note attribute dictionaries: 59a.

Significantly Improved Library Modules:

   * C Accelerator for the *note decimal: 59b. module.

   * Better unicode handling in the *note email: 59c. module (*note
     provisional: 59d.).

Security improvements:

   * Hash randomization is switched on by default.

Please read on for a comprehensive list of user-facing changes.


File: python.info,  Node: PEP 405 Virtual Environments,  Next: PEP 420 Implicit Namespace Packages,  Prev: Summary -- Release highlights<3>,  Up: What's New In Python 3 3

1.4.2 PEP 405: Virtual Environments
-----------------------------------

Virtual environments help create separate Python setups while sharing a
system-wide base install, for ease of maintenance.  Virtual environments
have their own set of private site packages (i.e.  locally-installed
libraries), and are optionally segregated from the system-wide site
packages.  Their concept and implementation are inspired by the popular
‘virtualenv’ third-party package, but benefit from tighter integration
with the interpreter core.

This PEP adds the *note venv: 122. module for programmatic access, and
the *note pyvenv: 3e1. script for command-line access and
administration.  The Python interpreter checks for a ‘pyvenv.cfg’, file
whose existence signals the base of a virtual environment’s directory
tree.

See also
........

PEP 405(1) - Python Virtual Environments

     PEP written by Carl Meyer; implementation by Carl Meyer and Vinay
     Sajip

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0405


File: python.info,  Node: PEP 420 Implicit Namespace Packages,  Next: PEP 3118 New memoryview implementation and buffer protocol documentation,  Prev: PEP 405 Virtual Environments,  Up: What's New In Python 3 3

1.4.3 PEP 420: Implicit Namespace Packages
------------------------------------------

Native support for package directories that don’t require ‘__init__.py’
marker files and can automatically span multiple path segments (inspired
by various third party approaches to namespace packages, as described in
PEP 420(1))

See also
........

PEP 420(2) - Implicit Namespace Packages

     PEP written by Eric V. Smith; implementation by Eric V. Smith and
     Barry Warsaw

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0420

   (2) https://www.python.org/dev/peps/pep-0420


File: python.info,  Node: PEP 3118 New memoryview implementation and buffer protocol documentation,  Next: PEP 393 Flexible String Representation,  Prev: PEP 420 Implicit Namespace Packages,  Up: What's New In Python 3 3

1.4.4 PEP 3118: New memoryview implementation and buffer protocol documentation
-------------------------------------------------------------------------------

The implementation of PEP 3118(1) has been significantly improved.

The new memoryview implementation comprehensively fixes all ownership
and lifetime issues of dynamically allocated fields in the Py_buffer
struct that led to multiple crash reports.  Additionally, several
functions that crashed or returned incorrect results for non-contiguous
or multi-dimensional input have been fixed.

The memoryview object now has a PEP-3118 compliant getbufferproc() that
checks the consumer’s request type.  Many new features have been added,
most of them work in full generality for non-contiguous arrays and
arrays with suboffsets.

The documentation has been updated, clearly spelling out
responsibilities for both exporters and consumers.  Buffer request flags
are grouped into basic and compound flags.  The memory layout of
non-contiguous and multi-dimensional NumPy-style arrays is explained.

* Menu:

* Features:: 
* API changes:: 

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3118


File: python.info,  Node: Features,  Next: API changes,  Up: PEP 3118 New memoryview implementation and buffer protocol documentation

1.4.4.1 Features
................

   * All native single character format specifiers in struct module
     syntax (optionally prefixed with ’@’) are now supported.

   * With some restrictions, the cast() method allows changing of format
     and shape of C-contiguous arrays.

   * Multi-dimensional list representations are supported for any array
     type.

   * Multi-dimensional comparisons are supported for any array type.

   * One-dimensional memoryviews of hashable (read-only) types with
     formats B, b or c are now hashable.  (Contributed by Antoine Pitrou
     in issue 13411(1).)

   * Arbitrary slicing of any 1-D arrays type is supported.  For
     example, it is now possible to reverse a memoryview in O(1) by
     using a negative step.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue13411


File: python.info,  Node: API changes,  Prev: Features,  Up: PEP 3118 New memoryview implementation and buffer protocol documentation

1.4.4.2 API changes
...................

   * The maximum number of dimensions is officially limited to 64.

   * The representation of empty shape, strides and suboffsets is now an
     empty tuple instead of None.

   * Accessing a memoryview element with format ’B’ (unsigned bytes) now
     returns an integer (in accordance with the struct module syntax).
     For returning a bytes object the view must be cast to ’c’ first.

   * memoryview comparisons now use the logical structure of the
     operands and compare all array elements by value.  All format
     strings in struct module syntax are supported.  Views with
     unrecognised format strings are still permitted, but will always
     compare as unequal, regardless of view contents.

   * For further changes see *note Build and C API Changes: 5a4. and
     *note Porting C code: 5a5.

(Contributed by Stefan Krah in issue 10181(1).)

See also
........

PEP 3118(2) - Revising the Buffer Protocol

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue10181

   (2) https://www.python.org/dev/peps/pep-3118


File: python.info,  Node: PEP 393 Flexible String Representation,  Next: PEP 397 Python Launcher for Windows,  Prev: PEP 3118 New memoryview implementation and buffer protocol documentation,  Up: What's New In Python 3 3

1.4.5 PEP 393: Flexible String Representation
---------------------------------------------

The Unicode string type is changed to support multiple internal
representations, depending on the character with the largest Unicode
ordinal (1, 2, or 4 bytes) in the represented string.  This allows a
space-efficient representation in common cases, but gives access to full
UCS-4 on all systems.  For compatibility with existing APIs, several
representations may exist in parallel; over time, this compatibility
should be phased out.

On the Python side, there should be no downside to this change.

On the C API side, PEP 393 is fully backward compatible.  The legacy API
should remain available at least five years.  Applications using the
legacy API will not fully benefit of the memory reduction, or - worse -
may use a bit more memory, because Python may have to maintain two
versions of each string (in the legacy format and in the new efficient
storage).

* Menu:

* Functionality:: 
* Performance and resource usage:: 


File: python.info,  Node: Functionality,  Next: Performance and resource usage,  Up: PEP 393 Flexible String Representation

1.4.5.1 Functionality
.....................

Changes introduced by PEP 393(1) are the following:

   * Python now always supports the full range of Unicode code points,
     including non-BMP ones (i.e.  from ‘U+0000’ to ‘U+10FFFF’).  The
     distinction between narrow and wide builds no longer exists and
     Python now behaves like a wide build, even under Windows.

   * With the death of narrow builds, the problems specific to narrow
     builds have also been fixed, for example:

        * *note len(): 5a8. now always returns 1 for non-BMP characters,
          so ‘len('\U0010FFFF') == 1’;

        * surrogate pairs are not recombined in string literals, so
          ‘'\uDBFF\uDFFF' != '\U0010FFFF'’;

        * indexing or slicing non-BMP characters returns the expected
          value, so ‘'\U0010FFFF'[0]’ now returns ‘'\U0010FFFF'’ and not
          ‘'\uDBFF'’;

        * all other functions in the standard library now correctly
          handle non-BMP code points.

   * The value of *note sys.maxunicode: 5a9. is now always ‘1114111’
     (‘0x10FFFF’ in hexadecimal).  The ‘PyUnicode_GetMax()’ function
     still returns either ‘0xFFFF’ or ‘0x10FFFF’ for backward
     compatibility, and it should not be used with the new Unicode API
     (see issue 13054(2)).

   * The ‘./configure’ flag ‘--with-wide-unicode’ has been removed.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0393

   (2) https://bugs.python.org/issue13054


File: python.info,  Node: Performance and resource usage,  Prev: Functionality,  Up: PEP 393 Flexible String Representation

1.4.5.2 Performance and resource usage
......................................

The storage of Unicode strings now depends on the highest code point in
the string:

   * pure ASCII and Latin1 strings (‘U+0000-U+00FF’) use 1 byte per code
     point;

   * BMP strings (‘U+0000-U+FFFF’) use 2 bytes per code point;

   * non-BMP strings (‘U+10000-U+10FFFF’) use 4 bytes per code point.

The net effect is that for most applications, memory usage of string
storage should decrease significantly - especially compared to former
wide unicode builds - as, in many cases, strings will be pure ASCII even
in international contexts (because many strings store non-human language
data, such as XML fragments, HTTP headers, JSON-encoded data, etc.).  We
also hope that it will, for the same reasons, increase CPU cache
efficiency on non-trivial applications.  The memory usage of Python 3.3
is two to three times smaller than Python 3.2, and a little bit better
than Python 2.7, on a Django benchmark (see the PEP for details).

See also
........

PEP 393(1) - Flexible String Representation

     PEP written by Martin von Löwis; implementation by Torsten Becker
     and Martin von Löwis.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0393


File: python.info,  Node: PEP 397 Python Launcher for Windows,  Next: PEP 3151 Reworking the OS and IO exception hierarchy,  Prev: PEP 393 Flexible String Representation,  Up: What's New In Python 3 3

1.4.6 PEP 397: Python Launcher for Windows
------------------------------------------

The Python 3.3 Windows installer now includes a ‘py’ launcher
application that can be used to launch Python applications in a version
independent fashion.

This launcher is invoked implicitly when double-clicking ‘*.py’ files.
If only a single Python version is installed on the system, that version
will be used to run the file.  If multiple versions are installed, the
most recent version is used by default, but this can be overridden by
including a Unix-style "shebang line" in the Python script.

The launcher can also be used explicitly from the command line as the
‘py’ application.  Running ‘py’ follows the same version selection rules
as implicitly launching scripts, but a more specific version can be
selected by passing appropriate arguments (such as ‘-3’ to request
Python 3 when Python 2 is also installed, or ‘-2.6’ to specifclly
request an earlier Python version when a more recent version is
installed).

In addition to the launcher, the Windows installer now includes an
option to add the newly installed Python to the system PATH.
(Contributed by Brian Curtin in issue 3561(1).)

See also
........

PEP 397(2) - Python Launcher for Windows

     PEP written by Mark Hammond and Martin v.  Löwis; implementation by
     Vinay Sajip.

Launcher documentation: *note Python Launcher for Windows: 5ad.

Installer PATH modification: *note Finding the Python executable: 5ae.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue3561

   (2) https://www.python.org/dev/peps/pep-0397


File: python.info,  Node: PEP 3151 Reworking the OS and IO exception hierarchy,  Next: PEP 380 Syntax for Delegating to a Subgenerator,  Prev: PEP 397 Python Launcher for Windows,  Up: What's New In Python 3 3

1.4.7 PEP 3151: Reworking the OS and IO exception hierarchy
-----------------------------------------------------------

The hierarchy of exceptions raised by operating system errors is now
both simplified and finer-grained.

You don’t have to worry anymore about choosing the appropriate exception
type between *note OSError: 4b6, *note IOError: 5b0, *note
EnvironmentError: 5b1, *note WindowsError: 5b2, ‘mmap.error’, *note
socket.error: 5b3. or *note select.error: 5b4.  All these exception
types are now only one: *note OSError: 4b6.  The other names are kept as
aliases for compatibility reasons.

Also, it is now easier to catch a specific error condition.  Instead of
inspecting the ‘errno’ attribute (or ‘args[0]’) for a particular
constant from the *note errno: 7a. module, you can catch the adequate
*note OSError: 4b6. subclass.  The available subclasses are the
following:

   * *note BlockingIOError: 5b5.

   * *note ChildProcessError: 5b6.

   * *note ConnectionError: 299.

   * *note FileExistsError: 56f.

   * *note FileNotFoundError: 3aa.

   * *note InterruptedError: 1e7.

   * *note IsADirectoryError: 5b7.

   * *note NotADirectoryError: 5b8.

   * *note PermissionError: 1a6.

   * *note ProcessLookupError: 5b9.

   * *note TimeoutError: 5ba.

And the *note ConnectionError: 299. itself has finer-grained subclasses:

   * *note BrokenPipeError: 5bb.

   * *note ConnectionAbortedError: 5bc.

   * *note ConnectionRefusedError: 5bd.

   * *note ConnectionResetError: 5be.

Thanks to the new exceptions, common usages of the *note errno: 7a. can
now be avoided.  For example, the following code written for Python 3.2:

     from errno import ENOENT, EACCES, EPERM

     try:
         with open("document.txt") as f:
             content = f.read()
     except IOError as err:
         if err.errno == ENOENT:
             print("document.txt file is missing")
         elif err.errno in (EACCES, EPERM):
             print("You are not allowed to read document.txt")
         else:
             raise

can now be written without the *note errno: 7a. import and without
manual inspection of exception attributes:

     try:
         with open("document.txt") as f:
             content = f.read()
     except FileNotFoundError:
         print("document.txt file is missing")
     except PermissionError:
         print("You are not allowed to read document.txt")

See also
........

PEP 3151(1) - Reworking the OS and IO Exception Hierarchy

     PEP written and implemented by Antoine Pitrou

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3151


File: python.info,  Node: PEP 380 Syntax for Delegating to a Subgenerator,  Next: PEP 409 Suppressing exception context,  Prev: PEP 3151 Reworking the OS and IO exception hierarchy,  Up: What's New In Python 3 3

1.4.8 PEP 380: Syntax for Delegating to a Subgenerator
------------------------------------------------------

PEP 380 adds the ‘yield from’ expression, allowing a *note generator:
5c0. to delegate part of its operations to another generator.  This
allows a section of code containing *note yield: 480. to be factored out
and placed in another generator.  Additionally, the subgenerator is
allowed to return with a value, and the value is made available to the
delegating generator.

While designed primarily for use in delegating to a subgenerator, the
‘yield from’ expression actually allows delegation to arbitrary
subiterators.

For simple iterators, ‘yield from iterable’ is essentially just a
shortened form of ‘for item in iterable: yield item’:

     >>> def g(x):
     ...     yield from range(x, 0, -1)
     ...     yield from range(x)
     ...
     >>> list(g(5))
     [5, 4, 3, 2, 1, 0, 1, 2, 3, 4]

However, unlike an ordinary loop, ‘yield from’ allows subgenerators to
receive sent and thrown values directly from the calling scope, and
return a final value to the outer generator:

     >>> def accumulate():
     ...     tally = 0
     ...     while 1:
     ...         next = yield
     ...         if next is None:
     ...             return tally
     ...         tally += next
     ...
     >>> def gather_tallies(tallies):
     ...     while 1:
     ...         tally = yield from accumulate()
     ...         tallies.append(tally)
     ...
     >>> tallies = []
     >>> acc = gather_tallies(tallies)
     >>> next(acc) # Ensure the accumulator is ready to accept values
     >>> for i in range(4):
     ...     acc.send(i)
     ...
     >>> acc.send(None) # Finish the first tally
     >>> for i in range(5):
     ...     acc.send(i)
     ...
     >>> acc.send(None) # Finish the second tally
     >>> tallies
     [6, 10]

The main principle driving this change is to allow even generators that
are designed to be used with the ‘send’ and ‘throw’ methods to be split
into multiple subgenerators as easily as a single large function can be
split into multiple subfunctions.

See also
........

PEP 380(1) - Syntax for Delegating to a Subgenerator

     PEP written by Greg Ewing; implementation by Greg Ewing, integrated
     into 3.3 by Renaud Blanch, Ryan Kelly and Nick Coghlan;
     documentation by Zbigniew Jędrzejewski-Szmek and Nick Coghlan

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0380


File: python.info,  Node: PEP 409 Suppressing exception context,  Next: PEP 414 Explicit Unicode literals,  Prev: PEP 380 Syntax for Delegating to a Subgenerator,  Up: What's New In Python 3 3

1.4.9 PEP 409: Suppressing exception context
--------------------------------------------

PEP 409 introduces new syntax that allows the display of the chained
exception context to be disabled.  This allows cleaner error messages in
applications that convert between exception types:

     >>> class D:
     ...     def __init__(self, extra):
     ...         self._extra_attributes = extra
     ...     def __getattr__(self, attr):
     ...         try:
     ...             return self._extra_attributes[attr]
     ...         except KeyError:
     ...             raise AttributeError(attr) from None
     ...
     >>> D({}).x
     Traceback (most recent call last):
       File "<stdin>", line 1, in <module>
       File "<stdin>", line 8, in __getattr__
     AttributeError: x

Without the ‘from None’ suffix to suppress the cause, the original
exception would be displayed by default:

     >>> class C:
     ...     def __init__(self, extra):
     ...         self._extra_attributes = extra
     ...     def __getattr__(self, attr):
     ...         try:
     ...             return self._extra_attributes[attr]
     ...         except KeyError:
     ...             raise AttributeError(attr)
     ...
     >>> C({}).x
     Traceback (most recent call last):
       File "<stdin>", line 6, in __getattr__
     KeyError: 'x'

     During handling of the above exception, another exception occurred:

     Traceback (most recent call last):
       File "<stdin>", line 1, in <module>
       File "<stdin>", line 8, in __getattr__
     AttributeError: x

No debugging capability is lost, as the original exception context
remains available if needed (for example, if an intervening library has
incorrectly suppressed valuable underlying details):

     >>> try:
     ...     D({}).x
     ... except AttributeError as exc:
     ...     print(repr(exc.__context__))
     ...
     KeyError('x',)

See also
........

PEP 409(1) - Suppressing exception context

     PEP written by Ethan Furman; implemented by Ethan Furman and Nick
     Coghlan.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0409


File: python.info,  Node: PEP 414 Explicit Unicode literals,  Next: PEP 3155 Qualified name for classes and functions,  Prev: PEP 409 Suppressing exception context,  Up: What's New In Python 3 3

1.4.10 PEP 414: Explicit Unicode literals
-----------------------------------------

To ease the transition from Python 2 for Unicode aware Python
applications that make heavy use of Unicode literals, Python 3.3 once
again supports the "‘u’" prefix for string literals.  This prefix has no
semantic significance in Python 3, it is provided solely to reduce the
number of purely mechanical changes in migrating to Python 3, making it
easier for developers to focus on the more significant semantic changes
(such as the stricter default separation of binary and text data).

See also
........

PEP 414(1) - Explicit Unicode literals

     PEP written by Armin Ronacher.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0414


File: python.info,  Node: PEP 3155 Qualified name for classes and functions,  Next: PEP 412 Key-Sharing Dictionary,  Prev: PEP 414 Explicit Unicode literals,  Up: What's New In Python 3 3

1.4.11 PEP 3155: Qualified name for classes and functions
---------------------------------------------------------

Functions and class objects have a new ‘__qualname__’ attribute
representing the "path" from the module top-level to their definition.
For global functions and classes, this is the same as ‘__name__’.  For
other functions and classes, it provides better information about where
they were actually defined, and how they might be accessible from the
global scope.

Example with (non-bound) methods:

     >>> class C:
     ...     def meth(self):
     ...         pass
     >>> C.meth.__name__
     'meth'
     >>> C.meth.__qualname__
     'C.meth'

Example with nested classes:

     >>> class C:
     ...     class D:
     ...         def meth(self):
     ...             pass
     ...
     >>> C.D.__name__
     'D'
     >>> C.D.__qualname__
     'C.D'
     >>> C.D.meth.__name__
     'meth'
     >>> C.D.meth.__qualname__
     'C.D.meth'

Example with nested functions:

     >>> def outer():
     ...     def inner():
     ...         pass
     ...     return inner
     ...
     >>> outer().__name__
     'inner'
     >>> outer().__qualname__
     'outer.<locals>.inner'

The string representation of those objects is also changed to include
the new, more precise information:

     >>> str(C.D)
     "<class '__main__.C.D'>"
     >>> str(C.D.meth)
     '<function C.D.meth at 0x7f46b9fe31e0>'

See also
........

PEP 3155(1) - Qualified name for classes and functions

     PEP written and implemented by Antoine Pitrou.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3155


File: python.info,  Node: PEP 412 Key-Sharing Dictionary,  Next: PEP 362 Function Signature Object,  Prev: PEP 3155 Qualified name for classes and functions,  Up: What's New In Python 3 3

1.4.12 PEP 412: Key-Sharing Dictionary
--------------------------------------

Dictionaries used for the storage of objects’ attributes are now able to
share part of their internal storage between each other (namely, the
part which stores the keys and their respective hashes).  This reduces
the memory consumption of programs creating many instances of
non-builtin types.

See also
........

PEP 412(1) - Key-Sharing Dictionary

     PEP written and implemented by Mark Shannon.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0412


File: python.info,  Node: PEP 362 Function Signature Object,  Next: PEP 421 Adding sys implementation,  Prev: PEP 412 Key-Sharing Dictionary,  Up: What's New In Python 3 3

1.4.13 PEP 362: Function Signature Object
-----------------------------------------

A new function *note inspect.signature(): 2ac. makes introspection of
python callables easy and straightforward.  A broad range of callables
is supported: python functions, decorated or not, classes, and *note
functools.partial(): 3b7. objects.  New classes *note inspect.Signature:
2a8, *note inspect.Parameter: 2a9. and *note inspect.BoundArguments:
5c6. hold information about the call signatures, such as, annotations,
default values, parameters kinds, and bound arguments, which
considerably simplifies writing decorators and any code that validates
or amends calling signatures or arguments.

See also
........

PEP 362(1): - Function Signature Object

     PEP written by Brett Cannon, Yury Selivanov, Larry Hastings, Jiwon
     Seo; implemented by Yury Selivanov.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0362


File: python.info,  Node: PEP 421 Adding sys implementation,  Next: Using importlib as the Implementation of Import,  Prev: PEP 362 Function Signature Object,  Up: What's New In Python 3 3

1.4.14 PEP 421: Adding sys.implementation
-----------------------------------------

A new attribute on the *note sys: fb. module exposes details specific to
the implementation of the currently running interpreter.  The initial
set of attributes on *note sys.implementation: 5c8. are ‘name’,
‘version’, ‘hexversion’, and ‘cache_tag’.

The intention of ‘sys.implementation’ is to consolidate into one
namespace the implementation-specific data used by the standard library.
This allows different Python implementations to share a single standard
library code base much more easily.  In its initial state,
‘sys.implementation’ holds only a small portion of the
implementation-specific data.  Over time that ratio will shift in order
to make the standard library more portable.

One example of improved standard library portability is ‘cache_tag’.  As
of Python 3.3, ‘sys.implementation.cache_tag’ is used by *note
importlib: 9a. to support PEP 3147(1) compliance.  Any Python
implementation that uses ‘importlib’ for its built-in import system may
use ‘cache_tag’ to control the caching behavior for modules.

* Menu:

* SimpleNamespace:: 

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3147


File: python.info,  Node: SimpleNamespace,  Up: PEP 421 Adding sys implementation

1.4.14.1 SimpleNamespace
........................

The implementation of ‘sys.implementation’ also introduces a new type to
Python: *note types.SimpleNamespace: 5ca.  In contrast to a
mapping-based namespace, like *note dict: 3b0, ‘SimpleNamespace’ is
attribute-based, like *note object: 5cb.  However, unlike ‘object’,
‘SimpleNamespace’ instances are writable.  This means that you can add,
remove, and modify the namespace through normal attribute access.

See also
........

PEP 421(1) - Adding sys.implementation

     PEP written and implemented by Eric Snow.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0421


File: python.info,  Node: Using importlib as the Implementation of Import,  Next: Other Language Changes<4>,  Prev: PEP 421 Adding sys implementation,  Up: What's New In Python 3 3

1.4.15 Using importlib as the Implementation of Import
------------------------------------------------------

issue 2377(1) - Replace __import__ w/ importlib.__import__ issue
13959(2) - Re-implement parts of *note imp: 99. in pure Python issue
14605(3) - Make import machinery explicit issue 14646(4) - Require
loaders set __loader__ and __package__

The *note __import__(): 5cd. function is now powered by *note
importlib.__import__(): 5ce.  This work leads to the completion of
"phase 2" of PEP 302(5).  There are multiple benefits to this change.
First, it has allowed for more of the machinery powering import to be
exposed instead of being implicit and hidden within the C code.  It also
provides a single implementation for all Python VMs supporting Python
3.3 to use, helping to end any VM-specific deviations in import
semantics.  And finally it eases the maintenance of import, allowing for
future growth to occur.

For the common user, there should be no visible change in semantics.
For those whose code currently manipulates import or calls import
programmatically, the code changes that might possibly be required are
covered in the *note Porting Python code: 5cf. section of this document.

* Menu:

* New APIs:: 
* Visible Changes:: 

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue2377

   (2) https://bugs.python.org/issue13959

   (3) https://bugs.python.org/issue14605

   (4) https://bugs.python.org/issue14646

   (5) https://www.python.org/dev/peps/pep-0302


File: python.info,  Node: New APIs,  Next: Visible Changes,  Up: Using importlib as the Implementation of Import

1.4.15.1 New APIs
.................

One of the large benefits of this work is the exposure of what goes into
making the import statement work.  That means the various importers that
were once implicit are now fully exposed as part of the *note importlib:
9a. package.

The abstract base classes defined in *note importlib.abc: 9b. have been
expanded to properly delineate between *note meta path finders: 5d1. and
*note path entry finders: 5d2. by introducing *note
importlib.abc.MetaPathFinder: 5d3. and *note
importlib.abc.PathEntryFinder: 5d4, respectively.  The old ABC of *note
importlib.abc.Finder: 5d5. is now only provided for
backwards-compatibility and does not enforce any method requirements.

In terms of finders, *note importlib.machinery.FileFinder: 5d6. exposes
the mechanism used to search for source and bytecode files of a module.
Previously this class was an implicit member of *note sys.path_hooks:
574.

For loaders, the new abstract base class *note importlib.abc.FileLoader:
5d7. helps write a loader that uses the file system as the storage
mechanism for a module’s code.  The loader for source files (*note
importlib.machinery.SourceFileLoader: 5d8.), sourceless bytecode files
(*note importlib.machinery.SourcelessFileLoader: 5d9.), and extension
modules (*note importlib.machinery.ExtensionFileLoader: 45d.) are now
available for direct use.

*note ImportError: 19f. now has ‘name’ and ‘path’ attributes which are
set when there is relevant data to provide.  The message for failed
imports will also provide the full name of the module now instead of
just the tail end of the module’s name.

The *note importlib.invalidate_caches(): 5da. function will now call the
method with the same name on all finders cached in *note
sys.path_importer_cache: 3ac. to help clean up any stored state as
necessary.


File: python.info,  Node: Visible Changes,  Prev: New APIs,  Up: Using importlib as the Implementation of Import

1.4.15.2 Visible Changes
........................

For potential required changes to code, see the *note Porting Python
code: 5cf. section.

Beyond the expanse of what *note importlib: 9a. now exposes, there are
other visible changes to import.  The biggest is that *note
sys.meta_path: 5dc. and *note sys.path_hooks: 574. now store all of the
meta path finders and path entry hooks used by import.  Previously the
finders were implicit and hidden within the C code of import instead of
being directly exposed.  This means that one can now easily remove or
change the order of the various finders to fit one’s needs.

Another change is that all modules have a ‘__loader__’ attribute,
storing the loader used to create the module.  PEP 302(1) has been
updated to make this attribute mandatory for loaders to implement, so in
the future once 3rd-party loaders have been updated people will be able
to rely on the existence of the attribute.  Until such time, though,
import is setting the module post-load.

Loaders are also now expected to set the ‘__package__’ attribute from
PEP 366(2).  Once again, import itself is already setting this on all
loaders from *note importlib: 9a. and import itself is setting the
attribute post-load.

‘None’ is now inserted into *note sys.path_importer_cache: 3ac. when no
finder can be found on *note sys.path_hooks: 574.  Since *note
imp.NullImporter: 5dd. is not directly exposed on *note sys.path_hooks:
574. it could no longer be relied upon to always be available to use as
a value representing no finder found.

All other changes relate to semantic changes which should be taken into
consideration when updating code for Python 3.3, and thus should be read
about in the *note Porting Python code: 5cf. section of this document.

(Implementation by Brett Cannon)

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0302

   (2) https://www.python.org/dev/peps/pep-0366


File: python.info,  Node: Other Language Changes<4>,  Next: A Finer-Grained Import Lock,  Prev: Using importlib as the Implementation of Import,  Up: What's New In Python 3 3

1.4.16 Other Language Changes
-----------------------------

Some smaller changes made to the core Python language are:

   * Added support for Unicode name aliases and named sequences.  Both
     *note unicodedata.lookup(): 5df. and ‘'\N{...}'’ now resolve name
     aliases, and *note unicodedata.lookup(): 5df. resolves named
     sequences too.

     (Contributed by Ezio Melotti in issue 12753(1).)

   * Unicode database updated to UCD version 6.1.0

   * Equality comparisons on *note range(): 5e0. objects now return a
     result reflecting the equality of the underlying sequences
     generated by those range objects.  (issue 13201(2))

   * The ‘count()’, ‘find()’, ‘rfind()’, ‘index()’ and ‘rindex()’
     methods of *note bytes: 1db. and *note bytearray: 1dc. objects now
     accept an integer between 0 and 255 as their first argument.

     (Contributed by Petri Lehtinen in issue 12170(3).)

   * The ‘rjust()’, ‘ljust()’, and ‘center()’ methods of *note bytes:
     1db. and *note bytearray: 1dc. now accept a *note bytearray: 1dc.
     for the ‘fill’ argument.  (Contributed by Petri Lehtinen in issue
     12380(4).)

   * New methods have been added to *note list: 25d. and *note
     bytearray: 1dc.: ‘copy()’ and ‘clear()’ (issue 10516(5)).
     Consequently, *note MutableSequence: 252. now also defines a
     ‘clear()’ method (issue 11388(6)).

   * Raw bytes literals can now be written ‘rb"..."’ as well as
     ‘br"..."’.

     (Contributed by Antoine Pitrou in issue 13748(7).)

   * *note dict.setdefault(): 5e1. now does only one lookup for the
     given key, making it atomic when used with built-in types.

     (Contributed by Filip Gruszczyński in issue 13521(8).)

   * The error messages produced when a function call does not match the
     function signature have been significantly improved.

     (Contributed by Benjamin Peterson.)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue12753

   (2) https://bugs.python.org/issue13201

   (3) https://bugs.python.org/issue12170

   (4) https://bugs.python.org/issue12380

   (5) https://bugs.python.org/issue10516

   (6) https://bugs.python.org/issue11388

   (7) https://bugs.python.org/issue13748

   (8) https://bugs.python.org/issue13521


File: python.info,  Node: A Finer-Grained Import Lock,  Next: Builtin functions and types,  Prev: Other Language Changes<4>,  Up: What's New In Python 3 3

1.4.17 A Finer-Grained Import Lock
----------------------------------

Previous versions of CPython have always relied on a global import lock.
This led to unexpected annoyances, such as deadlocks when importing a
module would trigger code execution in a different thread as a
side-effect.  Clumsy workarounds were sometimes employed, such as the
*note PyImport_ImportModuleNoBlock(): 5e3. C API function.

In Python 3.3, importing a module takes a per-module lock.  This
correctly serializes importation of a given module from multiple threads
(preventing the exposure of incompletely initialized modules), while
eliminating the aforementioned annoyances.

(Contributed by Antoine Pitrou in issue 9260(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue9260


File: python.info,  Node: Builtin functions and types,  Next: New Modules<4>,  Prev: A Finer-Grained Import Lock,  Up: What's New In Python 3 3

1.4.18 Builtin functions and types
----------------------------------

   * *note open(): 1e8. gets a new `opener' parameter: the underlying
     file descriptor for the file object is then obtained by calling
     `opener' with (`file', `flags').  It can be used to use custom
     flags like *note os.O_CLOEXEC: 5e5. for example.  The ‘'x'’ mode
     was added: open for exclusive creation, failing if the file already
     exists.

   * *note print(): 481.: added the `flush' keyword argument.  If the
     `flush' keyword argument is true, the stream is forcibly flushed.

   * *note hash(): 5e6.: hash randomization is enabled by default, see
     *note object.__hash__(): 5e7. and *note PYTHONHASHSEED: 5e8.

   * The *note str: 25a. type gets a new *note casefold(): 256. method:
     return a casefolded copy of the string, casefolded strings may be
     used for caseless matching.  For example, ‘'ß'.casefold()’ returns
     ‘'ss'’.

   * The sequence documentation has been substantially rewritten to
     better explain the binary/text sequence distinction and to provide
     specific documentation sections for the individual builtin sequence
     types (issue 4966(1)).

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue4966


File: python.info,  Node: New Modules<4>,  Next: Improved Modules<4>,  Prev: Builtin functions and types,  Up: What's New In Python 3 3

1.4.19 New Modules
------------------

* Menu:

* faulthandler: faulthandler<3>. 
* ipaddress: ipaddress<3>. 
* lzma: lzma<2>. 


File: python.info,  Node: faulthandler<3>,  Next: ipaddress<3>,  Up: New Modules<4>

1.4.19.1 faulthandler
.....................

This new debug module *note faulthandler: 7b. contains functions to dump
Python tracebacks explicitly, on a fault (a crash like a segmentation
fault), after a timeout, or on a user signal.  Call *note
faulthandler.enable(): 161. to install fault handlers for the ‘SIGSEGV’,
‘SIGFPE’, ‘SIGABRT’, ‘SIGBUS’, and ‘SIGILL’ signals.  You can also
enable them at startup by setting the *note PYTHONFAULTHANDLER: 5eb.
environment variable or by using *note -X: 5ec. ‘faulthandler’ command
line option.

Example of a segmentation fault on Linux:

     $ python -q -X faulthandler
     >>> import ctypes
     >>> ctypes.string_at(0)
     Fatal Python error: Segmentation fault

     Current thread 0x00007fb899f39700:
       File "/home/python/cpython/Lib/ctypes/__init__.py", line 486 in string_at
       File "<stdin>", line 1 in <module>
     Segmentation fault


File: python.info,  Node: ipaddress<3>,  Next: lzma<2>,  Prev: faulthandler<3>,  Up: New Modules<4>

1.4.19.2 ipaddress
..................

The new *note ipaddress: a0. module provides tools for creating and
manipulating objects representing IPv4 and IPv6 addresses, networks and
interfaces (i.e.  an IP address associated with a specific IP subnet).

(Contributed by Google and Peter Moody in PEP 3144(1).)

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3144


File: python.info,  Node: lzma<2>,  Prev: ipaddress<3>,  Up: New Modules<4>

1.4.19.3 lzma
.............

The newly-added *note lzma: ab. module provides data compression and
decompression using the LZMA algorithm, including support for the ‘.xz’
and ‘.lzma’ file formats.

(Contributed by Nadeem Vawda and Per Øyvind Karlsen in issue 6715(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue6715


File: python.info,  Node: Improved Modules<4>,  Next: Optimizations<3>,  Prev: New Modules<4>,  Up: What's New In Python 3 3

1.4.20 Improved Modules
-----------------------

* Menu:

* abc: abc<2>. 
* array:: 
* base64: base64<2>. 
* binascii:: 
* bz2: bz2<2>. 
* codecs:: 
* collections: collections<3>. 
* contextlib: contextlib<4>. 
* crypt:: 
* curses: curses<2>. 
* datetime: datetime<2>. 
* decimal:: 
* email: email<3>. 
* ftplib:: 
* functools: functools<3>. 
* gc: gc<2>. 
* hmac: hmac<2>. 
* http: http<3>. 
* html: html<2>. 
* imaplib: imaplib<2>. 
* inspect: inspect<3>. 
* io: io<2>. 
* itertools:: 
* logging: logging<3>. 
* math: math<2>. 
* mmap: mmap<2>. 
* multiprocessing: multiprocessing<3>. 
* nntplib:: 
* os: os<4>. 
* pdb: pdb<2>. 
* pickle: pickle<4>. 
* pydoc: pydoc<2>. 
* re: re<3>. 
* sched:: 
* select: select<2>. 
* shlex:: 
* shutil: shutil<3>. 
* signal: signal<2>. 
* smtpd: smtpd<3>. 
* smtplib: smtplib<3>. 
* socket: socket<3>. 
* socketserver: socketserver<2>. 
* sqlite3: sqlite3<3>. 
* ssl: ssl<3>. 
* stat: stat<2>. 
* struct: struct<2>. 
* subprocess: subprocess<3>. 
* sys: sys<3>. 
* tarfile: tarfile<3>. 
* tempfile:: 
* textwrap: textwrap<2>. 
* threading: threading<3>. 
* time: time<2>. 
* types: types<3>. 
* unittest: unittest<3>. 
* urllib: urllib<3>. 
* webbrowser:: 
* xml.etree.ElementTree: xml etree ElementTree. 
* zlib: zlib<2>. 


File: python.info,  Node: abc<2>,  Next: array,  Up: Improved Modules<4>

1.4.20.1 abc
............

Improved support for abstract base classes containing descriptors
composed with abstract methods.  The recommended approach to declaring
abstract descriptors is now to provide ‘__isabstractmethod__’ as a
dynamically updated property.  The built-in descriptors have been
updated accordingly.

        * *note abc.abstractproperty: 5f1. has been deprecated, use
          *note property: 377. with *note abc.abstractmethod(): 5f2.
          instead.

        * *note abc.abstractclassmethod: 5f3. has been deprecated, use
          *note classmethod: 5f4. with *note abc.abstractmethod(): 5f2.
          instead.

        * *note abc.abstractstaticmethod: 5f5. has been deprecated, use
          *note staticmethod: 5f6. with *note abc.abstractmethod(): 5f2.
          instead.

(Contributed by Darren Dale in issue 11610(1).)

*note abc.ABCMeta.register(): 5f7. now returns the registered subclass,
which means it can now be used as a class decorator (issue 10868(2)).

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue11610

   (2) https://bugs.python.org/issue10868


File: python.info,  Node: array,  Next: base64<2>,  Prev: abc<2>,  Up: Improved Modules<4>

1.4.20.2 array
..............

The *note array: 7. module supports the ‘long long’ type using ‘q’ and
‘Q’ type codes.

(Contributed by Oren Tirosh and Hirokazu Yamamoto in issue 1172711(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue1172711


File: python.info,  Node: base64<2>,  Next: binascii,  Prev: array,  Up: Improved Modules<4>

1.4.20.3 base64
...............

ASCII-only Unicode strings are now accepted by the decoding functions of
the *note base64: e. modern interface.  For example,
‘base64.b64decode('YWJj')’ returns ‘b'abc'’.  (Contributed by Catalin
Iacob in issue 13641(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue13641


File: python.info,  Node: binascii,  Next: bz2<2>,  Prev: base64<2>,  Up: Improved Modules<4>

1.4.20.4 binascii
.................

In addition to the binary objects they normally accept, the ‘a2b_’
functions now all also accept ASCII-only strings as input.  (Contributed
by Antoine Pitrou in issue 13637(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue13637


File: python.info,  Node: bz2<2>,  Next: codecs,  Prev: binascii,  Up: Improved Modules<4>

1.4.20.5 bz2
............

The *note bz2: 14. module has been rewritten from scratch.  In the
process, several new features have been added:

   * New *note bz2.open(): 5fc. function: open a bzip2-compressed file
     in binary or text mode.

   * *note bz2.BZ2File: 539. can now read from and write to arbitrary
     file-like objects, by means of its constructor’s `fileobj'
     argument.

     (Contributed by Nadeem Vawda in issue 5863(1).)

   * *note bz2.BZ2File: 539. and *note bz2.decompress(): 5fd. can now
     decompress multi-stream inputs (such as those produced by the
     ‘pbzip2’ tool).  *note bz2.BZ2File: 539. can now also be used to
     create this type of file, using the ‘'a'’ (append) mode.

     (Contributed by Nir Aides in issue 1625(2).)

   * *note bz2.BZ2File: 539. now implements all of the *note
     io.BufferedIOBase: 5fe. API, except for the ‘detach()’ and
     ‘truncate()’ methods.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue5863

   (2) https://bugs.python.org/issue1625


File: python.info,  Node: codecs,  Next: collections<3>,  Prev: bz2<2>,  Up: Improved Modules<4>

1.4.20.6 codecs
...............

The *note mbcs: 76. codec has been rewritten to handle correctly
‘replace’ and ‘ignore’ error handlers on all Windows versions.  The
*note mbcs: 76. codec now supports all error handlers, instead of only
‘replace’ to encode and ‘ignore’ to decode.

A new Windows-only codec has been added: ‘cp65001’ (issue 13216(1)).  It
is the Windows code page 65001 (Windows UTF-8, ‘CP_UTF8’).  For example,
it is used by ‘sys.stdout’ if the console output code page is set to
cp65001 (e.g., using ‘chcp 65001’ command).

Multibyte CJK decoders now resynchronize faster.  They only ignore the
first byte of an invalid byte sequence.  For example,
‘b'\xff\n'.decode('gb2312', 'replace')’ now returns a ‘\n’ after the
replacement character.

(issue 12016(2))

Incremental CJK codec encoders are no longer reset at each call to their
encode() methods.  For example:

     $ ./python -q
     >>> import codecs
     >>> encoder = codecs.getincrementalencoder('hz')('strict')
     >>> b''.join(encoder.encode(x) for x in '\u52ff\u65bd\u65bc\u4eba\u3002 Bye.')
     b'~{NpJ)l6HK!#~} Bye.'

This example gives ‘b'~{Np~}~{J)~}~{l6~}~{HK~}~{!#~} Bye.'’ with older
Python versions.

(issue 12100(3))

The ‘unicode_internal’ codec has been deprecated.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue13216

   (2) https://bugs.python.org/issue12016

   (3) https://bugs.python.org/issue12100


File: python.info,  Node: collections<3>,  Next: contextlib<4>,  Prev: codecs,  Up: Improved Modules<4>

1.4.20.7 collections
....................

Addition of a new *note ChainMap: 601. class to allow treating a number
of mappings as a single unit.  (Written by Raymond Hettinger for issue
11089(1), made public in issue 11297(2).)

The abstract base classes have been moved in a new *note
collections.abc: 1f. module, to better differentiate between the
abstract and the concrete collections classes.  Aliases for ABCs are
still present in the *note collections: 1e. module to preserve existing
imports.  (issue 11085(3))

The *note Counter: 602. class now supports the unary ‘+’ and ‘-’
operators, as well as the in-place operators ‘+=’, ‘-=’, ‘|=’, and ‘&=’.
(Contributed by Raymond Hettinger in issue 13121(4).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue11089

   (2) https://bugs.python.org/issue11297

   (3) https://bugs.python.org/issue11085

   (4) https://bugs.python.org/issue13121


File: python.info,  Node: contextlib<4>,  Next: crypt,  Prev: collections<3>,  Up: Improved Modules<4>

1.4.20.8 contextlib
...................

*note ExitStack: 604. now provides a solid foundation for programmatic
manipulation of context managers and similar cleanup functionality.
Unlike the previous ‘contextlib.nested’ API (which was deprecated and
removed), the new API is designed to work correctly regardless of
whether context managers acquire their resources in their ‘__init__’
method (for example, file objects) or in their ‘__enter__’ method (for
example, synchronisation objects from the *note threading: 106. module).

(issue 13585(1))

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue13585


File: python.info,  Node: crypt,  Next: curses<2>,  Prev: contextlib<4>,  Up: Improved Modules<4>

1.4.20.9 crypt
..............

Addition of salt and modular crypt format (hashing method) and the *note
mksalt(): 606. function to the *note crypt: 28. module.

(issue 10924(1))

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue10924


File: python.info,  Node: curses<2>,  Next: datetime<2>,  Prev: crypt,  Up: Improved Modules<4>

1.4.20.10 curses
................

        * If the *note curses: 2b. module is linked to the ncursesw
          library, use Unicode functions when Unicode strings or
          characters are passed (e.g.  ‘waddwstr()’), and bytes
          functions otherwise (e.g.  ‘waddstr()’).

        * Use the locale encoding instead of ‘utf-8’ to encode Unicode
          strings.

        * ‘curses.window’ has a new *note curses.window.encoding: 608.
          attribute.

        * The ‘curses.window’ class has a new *note get_wch(): 609.
          method to get a wide character

        * The *note curses: 2b. module has a new *note unget_wch(): 60a.
          function to push a wide character so the next *note get_wch():
          609. will return it

(Contributed by Iñigo Serna in issue 6755(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue6755


File: python.info,  Node: datetime<2>,  Next: decimal,  Prev: curses<2>,  Up: Improved Modules<4>

1.4.20.11 datetime
..................

        * Equality comparisons between naive and aware *note datetime:
          60c. instances now return *note False: 60d. instead of raising
          *note TypeError: 562. (issue 15006(1)).

        * New *note datetime.datetime.timestamp(): 60e. method: Return
          POSIX timestamp corresponding to the *note datetime: 60c.
          instance.

        * The *note datetime.datetime.strftime(): 15e. method supports
          formatting years older than 1000.

        * The *note datetime.datetime.astimezone(): 60f. method can now
          be called without arguments to convert datetime instance to
          the system timezone.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue15006


File: python.info,  Node: decimal,  Next: email<3>,  Prev: datetime<2>,  Up: Improved Modules<4>

1.4.20.12 decimal
.................

issue 7652(1) - integrate fast native decimal arithmetic.

     C-module and libmpdec written by Stefan Krah.

The new C version of the decimal module integrates the high speed
libmpdec library for arbitrary precision correctly-rounded decimal
floating point arithmetic.  libmpdec conforms to IBM’s General Decimal
Arithmetic Specification.

Performance gains range from 10x for database applications to 100x for
numerically intensive applications.  These numbers are expected gains
for standard precisions used in decimal floating point arithmetic.
Since the precision is user configurable, the exact figures may vary.
For example, in integer bignum arithmetic the differences can be
significantly higher.

The following table is meant as an illustration.  Benchmarks are
available at ‘http://www.bytereef.org/mpdecimal/quickstart.html’.

                   decimal.py        _decimal           speedup
                                                        
     ---------------------------------------------------------------------
                                                        
     pi            42.02s            0.345s             120x
                                                        
                                                        
     telco         172.19s           5.68s              30x
                                                        
                                                        
     psycopg       3.57s             0.29s              12x
                                                        

* Menu:

* Features: Features<2>. 
* API changes: API changes<2>. 

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue7652


File: python.info,  Node: Features<2>,  Next: API changes<2>,  Up: decimal

1.4.20.13 Features
..................

   * The *note FloatOperation: 612. signal optionally enables stricter
     semantics for mixing floats and Decimals.

   * If Python is compiled without threads, the C version automatically
     disables the expensive thread local context machinery.  In this
     case, the variable *note HAVE_THREADS: 613. is set to ‘False’.


File: python.info,  Node: API changes<2>,  Prev: Features<2>,  Up: decimal

1.4.20.14 API changes
.....................

   * The C module has the following context limits, depending on the
     machine architecture:

                                  32-bit                    64-bit
                                                            
          -------------------------------------------------------------------------------------
                                                            
          ‘MAX_PREC’              ‘425000000’               ‘999999999999999999’
                                                            
                                                            
          ‘MAX_EMAX’              ‘425000000’               ‘999999999999999999’
                                                            
                                                            
          ‘MIN_EMIN’              ‘-425000000’              ‘-999999999999999999’
                                                            

   * In the context templates (*note DefaultContext: 615, *note
     BasicContext: 616. and *note ExtendedContext: 617.) the magnitude
     of ‘Emax’ and ‘Emin’ has changed to ‘999999’.

   * The *note Decimal: 618. constructor in decimal.py does not observe
     the context limits and converts values with arbitrary exponents or
     precision exactly.  Since the C version has internal limits, the
     following scheme is used: If possible, values are converted
     exactly, otherwise *note InvalidOperation: 619. is raised and the
     result is NaN. In the latter case it is always possible to use
     *note create_decimal(): 61a. in order to obtain a rounded or
     inexact value.

   * The power function in decimal.py is always correctly-rounded.  In
     the C version, it is defined in terms of the correctly-rounded
     *note exp(): 61b. and *note ln(): 61c. functions, but the final
     result is only "almost always correctly rounded".

   * In the C version, the context dictionary containing the signals is
     a *note MutableMapping: 61d.  For speed reasons, ‘flags’ and
     ‘traps’ always refer to the same *note MutableMapping: 61d. that
     the context was initialized with.  If a new signal dictionary is
     assigned, ‘flags’ and ‘traps’ are updated with the new values, but
     they do not reference the RHS dictionary.

   * Pickling a *note Context: 61e. produces a different output in order
     to have a common interchange format for the Python and C versions.

   * The order of arguments in the *note Context: 61e. constructor has
     been changed to match the order displayed by *note repr(): 3bb.

   * The ‘watchexp’ parameter in the *note quantize(): 61f. method is
     deprecated.


File: python.info,  Node: email<3>,  Next: ftplib,  Prev: decimal,  Up: Improved Modules<4>

1.4.20.15 email
...............

* Menu:

* Policy Framework:: 
* Provisional Policy with New Header API:: 
* Other API Changes:: 


File: python.info,  Node: Policy Framework,  Next: Provisional Policy with New Header API,  Up: email<3>

1.4.20.16 Policy Framework
..........................

The email package now has a *note policy: 73. framework.  A *note
Policy: 622. is an object with several methods and properties that
control how the email package behaves.  The primary policy for Python
3.3 is the *note Compat32: 623. policy, which provides backward
compatibility with the email package in Python 3.2.  A ‘policy’ can be
specified when an email message is parsed by a *note parser: 72, or when
a *note Message: 3d2. object is created, or when an email is serialized
using a *note generator: 6c.  Unless overridden, a policy passed to a
‘parser’ is inherited by all the ‘Message’ object and sub-objects
created by the ‘parser’.  By default a ‘generator’ will use the policy
of the ‘Message’ object it is serializing.  The default policy is *note
compat32: 280.

The minimum set of controls implemented by all ‘policy’ objects are:

     max_line_length     The maximum length, excluding the linesep character(s),
                         individual lines may have when a ‘Message’ is serialized.
                         Defaults to 78.
                         
                         
     linesep             The character used to separate individual lines when a
                         ‘Message’ is serialized.  Defaults to ‘\n’.
                         
                         
     cte_type            ‘7bit’ or ‘8bit’.  ‘8bit’ applies only to a ‘Bytes’
                         ‘generator’, and means that non-ASCII may be used where
                         allowed by the protocol (or where it exists in the
                         original input).
                         
                         
     raise_on_defect     Causes a ‘parser’ to raise error when defects are
                         encountered instead of adding them to the ‘Message’
                         object’s ‘defects’ list.
                         

A new policy instance, with new settings, is created using the *note
clone(): 624. method of policy objects.  ‘clone’ takes any of the above
controls as keyword arguments.  Any control not specified in the call
retains its default value.  Thus you can create a policy that uses
‘\r\n’ linesep characters like this:

     mypolicy = compat32.clone(linesep='\r\n')

Policies can be used to make the generation of messages in the format
needed by your application simpler.  Instead of having to remember to
specify ‘linesep='\r\n'’ in all the places you call a ‘generator’, you
can specify it once, when you set the policy used by the ‘parser’ or the
‘Message’, whichever your program uses to create ‘Message’ objects.  On
the other hand, if you need to generate messages in multiple forms, you
can still specify the parameters in the appropriate ‘generator’ call.
Or you can have custom policy instances for your different cases, and
pass those in when you create the ‘generator’.


File: python.info,  Node: Provisional Policy with New Header API,  Next: Other API Changes,  Prev: Policy Framework,  Up: email<3>

1.4.20.17 Provisional Policy with New Header API
................................................

While the policy framework is worthwhile all by itself, the main
motivation for introducing it is to allow the creation of new policies
that implement new features for the email package in a way that
maintains backward compatibility for those who do not use the new
policies.  Because the new policies introduce a new API, we are
releasing them in Python 3.3 as a *note provisional policy: 59d.
Backwards incompatible changes (up to and including removal of the code)
may occur if deemed necessary by the core developers.

The new policies are instances of *note EmailPolicy: 626, and add the
following additional controls:

     refold_source       Controls whether or not headers parsed by a
                         *note parser: 72. are refolded by the
                         *note generator: 6c.  It can be ‘none’, ‘long’, or ‘all’.
                         The default is ‘long’, which means that source headers
                         with a line longer than ‘max_line_length’ get refolded.
                         ‘none’ means no line get refolded, and ‘all’ means that
                         all lines get refolded.
                         
                         
     header_factory      A callable that take a ‘name’ and ‘value’ and produces a
                         custom header object.
                         

The ‘header_factory’ is the key to the new features provided by the new
policies.  When one of the new policies is used, any header retrieved
from a ‘Message’ object is an object produced by the ‘header_factory’,
and any time you set a header on a ‘Message’ it becomes an object
produced by ‘header_factory’.  All such header objects have a ‘name’
attribute equal to the header name.  Address and Date headers have
additional attributes that give you access to the parsed data of the
header.  This means you can now do things like this:

     >>> m = Message(policy=SMTP)
     >>> m['To'] = 'Éric <foo@example.com>'
     >>> m['to']
     'Éric <foo@example.com>'
     >>> m['to'].addresses
     (Address(display_name='Éric', username='foo', domain='example.com'),)
     >>> m['to'].addresses[0].username
     'foo'
     >>> m['to'].addresses[0].display_name
     'Éric'
     >>> m['Date'] = email.utils.localtime()
     >>> m['Date'].datetime
     datetime.datetime(2012, 5, 25, 21, 39, 24, 465484, tzinfo=datetime.timezone(datetime.timedelta(-1, 72000), 'EDT'))
     >>> m['Date']
     'Fri, 25 May 2012 21:44:27 -0400'
     >>> print(m)
     To: =?utf-8?q?=C3=89ric?= <foo@example.com>
     Date: Fri, 25 May 2012 21:44:27 -0400

You will note that the unicode display name is automatically encoded as
‘utf-8’ when the message is serialized, but that when the header is
accessed directly, you get the unicode version.  This eliminates any
need to deal with the *note email.header: 6d. *note decode_header():
627. or *note make_header(): 628. functions.

You can also create addresses from parts:

     >>> m['cc'] = [Group('pals', [Address('Bob', 'bob', 'example.com'),
     ...                           Address('Sally', 'sally', 'example.com')]),
     ...            Address('Bonzo', addr_spec='bonz@laugh.com')]
     >>> print(m)
     To: =?utf-8?q?=C3=89ric?= <foo@example.com>
     Date: Fri, 25 May 2012 21:44:27 -0400
     cc: pals: Bob <bob@example.com>, Sally <sally@example.com>;, Bonzo <bonz@laugh.com>

Decoding to unicode is done automatically:

     >>> m2 = message_from_string(str(m))
     >>> m2['to']
     'Éric <foo@example.com>'

When you parse a message, you can use the ‘addresses’ and ‘groups’
attributes of the header objects to access the groups and individual
addresses:

     >>> m2['cc'].addresses
     (Address(display_name='Bob', username='bob', domain='example.com'), Address(display_name='Sally', username='sally', domain='example.com'), Address(display_name='Bonzo', username='bonz', domain='laugh.com'))
     >>> m2['cc'].groups
     (Group(display_name='pals', addresses=(Address(display_name='Bob', username='bob', domain='example.com'), Address(display_name='Sally', username='sally', domain='example.com')), Group(display_name=None, addresses=(Address(display_name='Bonzo', username='bonz', domain='laugh.com'),))

In summary, if you use one of the new policies, header manipulation
works the way it ought to: your application works with unicode strings,
and the email package transparently encodes and decodes the unicode to
and from the RFC standard Content Transfer Encodings.


File: python.info,  Node: Other API Changes,  Prev: Provisional Policy with New Header API,  Up: email<3>

1.4.20.18 Other API Changes
...........................

New ‘BytesHeaderParser’, added to the *note parser: 72. module to
complement ‘HeaderParser’ and complete the Bytes API.

New utility functions:

        * *note format_datetime(): 62a.: given a *note datetime: 60c,
          produce a string formatted for use in an email header.

        * *note parsedate_to_datetime(): 62b.: given a date string from
          an email header, convert it into an aware *note datetime: 60c,
          or a naive *note datetime: 60c. if the offset is ‘-0000’.

        * *note localtime(): 62c.: With no argument, returns the current
          local time as an aware *note datetime: 60c. using the local
          *note timezone: 62d.  Given an aware *note datetime: 60c,
          converts it into an aware *note datetime: 60c. using the local
          *note timezone: 62d.


File: python.info,  Node: ftplib,  Next: functools<3>,  Prev: email<3>,  Up: Improved Modules<4>

1.4.20.19 ftplib
................

   * *note ftplib.FTP: 62f. now accepts a ‘source_address’ keyword
     argument to specify the ‘(host, port)’ to use as the source address
     in the bind call when creating the outgoing socket.  (Contributed
     by Giampaolo Rodolà in issue 8594(1).)

   * The *note FTP_TLS: 630. class now provides a new *note ccc(): 631.
     function to revert control channel back to plaintext.  This can be
     useful to take advantage of firewalls that know how to handle NAT
     with non-secure FTP without opening fixed ports.  (Contributed by
     Giampaolo Rodolà in issue 12139(2).)

   * Added *note ftplib.FTP.mlsd(): 632. method which provides a
     parsable directory listing format and deprecates *note
     ftplib.FTP.nlst(): 633. and *note ftplib.FTP.dir(): 634.
     (Contributed by Giampaolo Rodolà in issue 11072(3).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue8594

   (2) https://bugs.python.org/issue12139

   (3) https://bugs.python.org/issue11072


File: python.info,  Node: functools<3>,  Next: gc<2>,  Prev: ftplib,  Up: Improved Modules<4>

1.4.20.20 functools
...................

The *note functools.lru_cache(): 1c1. decorator now accepts a ‘typed’
keyword argument (that defaults to ‘False’ to ensure that it caches
values of different types that compare equal in separate cache slots.
(Contributed by Raymond Hettinger in issue 13227(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue13227


File: python.info,  Node: gc<2>,  Next: hmac<2>,  Prev: functools<3>,  Up: Improved Modules<4>

1.4.20.21 gc
............

It is now possible to register callbacks invoked by the garbage
collector before and after collection using the new *note callbacks:
637. list.


File: python.info,  Node: hmac<2>,  Next: http<3>,  Prev: gc<2>,  Up: Improved Modules<4>

1.4.20.22 hmac
..............

A new *note compare_digest(): 639. function has been added to prevent
side channel attacks on digests through timing analysis.  (Contributed
by Nick Coghlan and Christian Heimes in issue 15061(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue15061


File: python.info,  Node: http<3>,  Next: html<2>,  Prev: hmac<2>,  Up: Improved Modules<4>

1.4.20.23 http
..............

*note http.server.BaseHTTPRequestHandler: 63b. now buffers the headers
and writes them all at once when *note end_headers(): 63c. is called.  A
new method *note flush_headers(): 63d. can be used to directly manage
when the accumlated headers are sent.  (Contributed by Andrew Schaaf in
issue 3709(1).)

*note http.server: 96. now produces valid ‘HTML 4.01 strict’ output.
(Contributed by Ezio Melotti in issue 13295(2).)

*note http.client.HTTPResponse: 63e. now has a *note readinto(): 63f.
method, which means it can be used as an *note io.RawIOBase: 640. class.
(Contributed by John Kuhn in issue 13464(3).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue3709

   (2) https://bugs.python.org/issue13295

   (3) https://bugs.python.org/issue13464


File: python.info,  Node: html<2>,  Next: imaplib<2>,  Prev: http<3>,  Up: Improved Modules<4>

1.4.20.24 html
..............

*note html.parser.HTMLParser: 3a9. is now able to parse broken markup
without raising errors, therefore the `strict' argument of the
constructor and the ‘HTMLParseError’ exception are now deprecated.  The
ability to parse broken markup is the result of a number of bug fixes
that are also available on the latest bug fix releases of Python
2.7/3.2.  (Contributed by Ezio Melotti in issue 15114(1), and issue
14538(2), issue 13993(3), issue 13960(4), issue 13358(5), issue
1745761(6), issue 755670(7), issue 13357(8), issue 12629(9), issue
1200313(10), issue 670664(11), issue 13273(12), issue 12888(13), issue
7311(14).)

A new *note html5: 642. dictionary that maps HTML5 named character
references to the equivalent Unicode character(s) (e.g.  ‘html5['gt;']
== '>'’) has been added to the *note html.entities: 90. module.  The
dictionary is now also used by *note HTMLParser: 3a9.  (Contributed by
Ezio Melotti in issue 11113(15) and issue 15156(16).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue15114

   (2) https://bugs.python.org/issue14538

   (3) https://bugs.python.org/issue13993

   (4) https://bugs.python.org/issue13960

   (5) https://bugs.python.org/issue13358

   (6) https://bugs.python.org/issue1745761

   (7) https://bugs.python.org/issue755670

   (8) https://bugs.python.org/issue13357

   (9) https://bugs.python.org/issue12629

   (10) https://bugs.python.org/issue1200313

   (11) https://bugs.python.org/issue670664

   (12) https://bugs.python.org/issue13273

   (13) https://bugs.python.org/issue12888

   (14) https://bugs.python.org/issue7311

   (15) https://bugs.python.org/issue11113

   (16) https://bugs.python.org/issue15156


File: python.info,  Node: imaplib<2>,  Next: inspect<3>,  Prev: html<2>,  Up: Improved Modules<4>

1.4.20.25 imaplib
.................

The *note IMAP4_SSL: 644. constructor now accepts an SSLContext
parameter to control parameters of the secure channel.

(Contributed by Sijin Joseph in issue 8808(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue8808


File: python.info,  Node: inspect<3>,  Next: io<2>,  Prev: imaplib<2>,  Up: Improved Modules<4>

1.4.20.26 inspect
.................

A new *note getclosurevars(): 646. function has been added.  This
function reports the current binding of all names referenced from the
function body and where those names were resolved, making it easier to
verify correct internal state when testing code that relies on stateful
closures.

(Contributed by Meador Inge and Nick Coghlan in issue 13062(1).)

A new *note getgeneratorlocals(): 647. function has been added.  This
function reports the current binding of local variables in the
generator’s stack frame, making it easier to verify correct internal
state when testing generators.

(Contributed by Meador Inge in issue 15153(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue13062

   (2) https://bugs.python.org/issue15153


File: python.info,  Node: io<2>,  Next: itertools,  Prev: inspect<3>,  Up: Improved Modules<4>

1.4.20.27 io
............

The *note open(): 1e9. function has a new ‘'x'’ mode that can be used to
exclusively create a new file, and raise a *note FileExistsError: 56f.
if the file already exists.  It is based on the C11 ’x’ mode to fopen().

(Contributed by David Townshend in issue 12760(1).)

The constructor of the *note TextIOWrapper: 557. class has a new
`write_through' optional argument.  If `write_through' is ‘True’, calls
to ‘write()’ are guaranteed not to be buffered: any data written on the
*note TextIOWrapper: 557. object is immediately handled to its
underlying binary buffer.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue12760


File: python.info,  Node: itertools,  Next: logging<3>,  Prev: io<2>,  Up: Improved Modules<4>

1.4.20.28 itertools
...................

*note accumulate(): 64a. now takes an optional ‘func’ argument for
providing a user-supplied binary function.


File: python.info,  Node: logging<3>,  Next: math<2>,  Prev: itertools,  Up: Improved Modules<4>

1.4.20.29 logging
.................

The *note basicConfig(): 64c. function now supports an optional
‘handlers’ argument taking an iterable of handlers to be added to the
root logger.

A class level attribute ‘append_nul’ has been added to *note
SysLogHandler: 64d. to allow control of the appending of the ‘NUL’
(‘\000’) byte to syslog records, since for some deamons it is required
while for others it is passed through to the log.


File: python.info,  Node: math<2>,  Next: mmap<2>,  Prev: logging<3>,  Up: Improved Modules<4>

1.4.20.30 math
..............

The *note math: b0. module has a new function, *note log2(): 64f, which
returns the base-2 logarithm of `x'.

(Written by Mark Dickinson in issue 11888(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue11888


File: python.info,  Node: mmap<2>,  Next: multiprocessing<3>,  Prev: math<2>,  Up: Improved Modules<4>

1.4.20.31 mmap
..............

The *note read(): 651. method is now more compatible with other
file-like objects: if the argument is omitted or specified as ‘None’, it
returns the bytes from the current file position to the end of the
mapping.  (Contributed by Petri Lehtinen in issue 12021(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue12021


File: python.info,  Node: multiprocessing<3>,  Next: nntplib,  Prev: mmap<2>,  Up: Improved Modules<4>

1.4.20.32 multiprocessing
.........................

The new *note multiprocessing.connection.wait(): 653. function allows
polling multiple objects (such as connections, sockets and pipes) with a
timeout.  (Contributed by Richard Oudkerk in issue 12328(1).)

*note multiprocessing.Connection: 654. objects can now be transferred
over multiprocessing connections.  (Contributed by Richard Oudkerk in
issue 4892(2).)

*note multiprocessing.Process: 655. now accepts a ‘daemon’ keyword
argument to override the default behavior of inheriting the ‘daemon’
flag from the parent process (issue 6064(3)).

New attribute *note multiprocessing.Process.sentinel: 656. allows a
program to wait on multiple *note Process: 655. objects at one time
using the appropriate OS primitives (for example, *note select: e3. on
posix systems).

New methods *note multiprocessing.pool.Pool.starmap(): 657. and *note
starmap_async(): 658. provide *note itertools.starmap(): 659.
equivalents to the existing *note multiprocessing.pool.Pool.map(): 65a.
and *note map_async(): 65b. functions.  (Contributed by Hynek Schlawack
in issue 12708(4).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue12328

   (2) https://bugs.python.org/issue4892

   (3) https://bugs.python.org/issue6064

   (4) https://bugs.python.org/issue12708


File: python.info,  Node: nntplib,  Next: os<4>,  Prev: multiprocessing<3>,  Up: Improved Modules<4>

1.4.20.33 nntplib
.................

The *note nntplib.NNTP: 65d. class now supports the context management
protocol to unconditionally consume *note socket.error: 5b3. exceptions
and to close the NNTP connection when done:

     >>> from nntplib import NNTP
     >>> with NNTP('news.gmane.org') as n:
     ...     n.group('gmane.comp.python.committers')
     ...
     ('211 1755 1 1755 gmane.comp.python.committers', 1755, 1, 1755, 'gmane.comp.python.committers')
     >>>

(Contributed by Giampaolo Rodolà in issue 9795(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue9795


File: python.info,  Node: os<4>,  Next: pdb<2>,  Prev: nntplib,  Up: Improved Modules<4>

1.4.20.34 os
............

   * The *note os: c2. module has a new *note pipe2(): 65f. function
     that makes it possible to create a pipe with *note O_CLOEXEC: 5e5.
     or *note O_NONBLOCK: 2e2. flags set atomically.  This is especially
     useful to avoid race conditions in multi-threaded programs.

   * The *note os: c2. module has a new *note sendfile(): 1fb. function
     which provides an efficient "zero-copy" way for copying data from
     one file (or socket) descriptor to another.  The phrase "zero-copy"
     refers to the fact that all of the copying of data between the two
     descriptors is done entirely by the kernel, with no copying of data
     into userspace buffers.  *note sendfile(): 1fb. can be used to
     efficiently copy data from a file on disk to a network socket, e.g.
     for downloading a file.

     (Patch submitted by Ross Lagerwall and Giampaolo Rodolà in issue
     10882(1).)

   * To avoid race conditions like symlink attacks and issues with
     temporary files and directories, it is more reliable (and also
     faster) to manipulate file descriptors instead of file names.
     Python 3.3 enhances existing functions and introduces new functions
     to work on file descriptors (issue 4761(2), issue 10755(3) and
     issue 14626(4)).

        - The *note os: c2. module has a new *note fwalk(): 660.
          function similar to *note walk(): 1e1. except that it also
          yields file descriptors referring to the directories visited.
          This is especially useful to avoid symlink races.

        - The following functions get new optional `dir_fd' (*note paths
          relative to directory descriptors: 661.) and/or
          `follow_symlinks' (*note not following symlinks: 662.): *note
          access(): 663, *note chflags(): 664, *note chmod(): 665, *note
          chown(): 666, *note link(): 667, *note lstat(): 668, *note
          mkdir(): 669, *note mkfifo(): 1f2, *note mknod(): 1f3, *note
          open(): 1f4, *note readlink(): 66a, *note remove(): 66b, *note
          rename(): 66c, *note replace(): 66d, *note rmdir(): 66e, *note
          stat(): 1e2, *note symlink(): 66f, *note unlink(): 670, *note
          utime(): 671.  Platform support for using these parameters can
          be checked via the sets *note os.supports_dir_fd: 672. and
          ‘os.supports_follows_symlinks’.

        - The following functions now support a file descriptor for
          their path argument: *note chdir(): 673, *note chmod(): 665,
          *note chown(): 666, *note execve(): 674, *note listdir(): 675,
          *note pathconf(): 676, *note exists(): 677, *note stat(): 1e2,
          *note statvfs(): 678, *note utime(): 671.  Platform support
          for this can be checked via the *note os.supports_fd: 679.
          set.

   * *note access(): 663. accepts an ‘effective_ids’ keyword argument to
     turn on using the effective uid/gid rather than the real uid/gid in
     the access check.  Platform support for this can be checked via the
     *note supports_effective_ids: 67a. set.

   * The *note os: c2. module has two new functions: *note
     getpriority(): 67b. and *note setpriority(): 67c.  They can be used
     to get or set process niceness/priority in a fashion similar to
     *note os.nice(): 67d. but extended to all processes instead of just
     the current one.

     (Patch submitted by Giampaolo Rodolà in issue 10784(5).)

   * The new *note os.replace(): 66d. function allows cross-platform
     renaming of a file with overwriting the destination.  With *note
     os.rename(): 66c, an existing destination file is overwritten under
     POSIX, but raises an error under Windows.  (Contributed by Antoine
     Pitrou in issue 8828(6).)

   * The stat family of functions (*note stat(): 1e2, *note fstat():
     1ee, and *note lstat(): 668.) now support reading a file’s
     timestamps with nanosecond precision.  Symmetrically, *note
     utime(): 671. can now write file timestamps with nanosecond
     precision.  (Contributed by Larry Hastings in issue 14127(7).)

   * The new *note os.get_terminal_size(): 67e. function queries the
     size of the terminal attached to a file descriptor.  See also *note
     shutil.get_terminal_size(): 67f.  (Contributed by Zbigniew
     Jędrzejewski-Szmek in issue 13609(8).)

   * New functions to support Linux extended attributes (issue
     12720(9)): *note getxattr(): 680, *note listxattr(): 681, *note
     removexattr(): 682, *note setxattr(): 683.

   * New interface to the scheduler.  These functions control how a
     process is allocated CPU time by the operating system.  New
     functions: *note sched_get_priority_max(): 684, *note
     sched_get_priority_min(): 685, *note sched_getaffinity(): 686,
     *note sched_getparam(): 687, *note sched_getscheduler(): 688, *note
     sched_rr_get_interval(): 689, *note sched_setaffinity(): 68a, *note
     sched_setparam(): 68b, *note sched_setscheduler(): 68c, *note
     sched_yield(): 68d,

   * New functions to control the file system:

        * *note posix_fadvise(): 1f5.: Announces an intention to access
          data in a specific pattern thus allowing the kernel to make
          optimizations.

        * *note posix_fallocate(): 1f6.: Ensures that enough disk space
          is allocated for a file.

        * *note sync(): 68e.: Force write of everything to disk.

   * Additional new posix functions:

        * *note lockf(): 68f.: Apply, test or remove a POSIX lock on an
          open file descriptor.

        * *note pread(): 1f7.: Read from a file descriptor at an offset,
          the file offset remains unchanged.

        * *note pwrite(): 1f8.: Write to a file descriptor from an
          offset, leaving the file offset unchanged.

        * *note readv(): 1fa.: Read from a file descriptor into a number
          of writable buffers.

        * *note truncate(): 2e3.: Truncate the file corresponding to
          `path', so that it is at most `length' bytes in size.

        * *note waitid(): 1ff.: Wait for the completion of one or more
          child processes.

        * *note writev(): 202.: Write the contents of `buffers' to a
          file descriptor, where `buffers' is an arbitrary sequence of
          buffers.

        * *note getgrouplist(): 690. (issue 9344(10)): Return list of
          group ids that specified user belongs to.

   * *note times(): 691. and *note uname(): 692.: Return type changed
     from a tuple to a tuple-like object with named attributes.

   * Some platforms now support additional constants for the *note
     lseek(): 693. function, such as ‘os.SEEK_HOLE’ and ‘os.SEEK_DATA’.

   * New constants *note RTLD_LAZY: 694, *note RTLD_NOW: 695, *note
     RTLD_GLOBAL: 696, *note RTLD_LOCAL: 697, *note RTLD_NODELETE: 698,
     *note RTLD_NOLOAD: 699, and *note RTLD_DEEPBIND: 69a. are available
     on platforms that support them.  These are for use with the *note
     sys.setdlopenflags(): 69b. function, and supersede the similar
     constants defined in *note ctypes: 2a. and ‘DLFCN’.  (Contributed
     by Victor Stinner in issue 13226(11).)

   * *note os.symlink(): 66f. now accepts (and ignores) the
     ‘target_is_directory’ keyword argument on non-Windows platforms, to
     ease cross-platform support.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue10882

   (2) https://bugs.python.org/issue4761

   (3) https://bugs.python.org/issue10755

   (4) https://bugs.python.org/issue14626

   (5) https://bugs.python.org/issue10784

   (6) https://bugs.python.org/issue8828

   (7) https://bugs.python.org/issue14127

   (8) https://bugs.python.org/issue13609

   (9) https://bugs.python.org/issue12720

   (10) https://bugs.python.org/issue9344

   (11) https://bugs.python.org/issue13226


File: python.info,  Node: pdb<2>,  Next: pickle<4>,  Prev: os<4>,  Up: Improved Modules<4>

1.4.20.35 pdb
.............

Tab-completion is now available not only for command names, but also
their arguments.  For example, for the ‘break’ command, function and
file names are completed.

(Contributed by Georg Brandl in issue 14210(1))

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue14210


File: python.info,  Node: pickle<4>,  Next: pydoc<2>,  Prev: pdb<2>,  Up: Improved Modules<4>

1.4.20.36 pickle
................

*note pickle.Pickler: 69e. objects now have an optional *note
dispatch_table: 69f. attribute allowing per-pickler reduction functions
to be set.

(Contributed by Richard Oudkerk in issue 14166(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue14166


File: python.info,  Node: pydoc<2>,  Next: re<3>,  Prev: pickle<4>,  Up: Improved Modules<4>

1.4.20.37 pydoc
...............

The Tk GUI and the ‘serve()’ function have been removed from the *note
pydoc: d7. module: ‘pydoc -g’ and ‘serve()’ have been deprecated in
Python 3.2.


File: python.info,  Node: re<3>,  Next: sched,  Prev: pydoc<2>,  Up: Improved Modules<4>

1.4.20.38 re
............

*note str: 25a. regular expressions now support ‘\u’ and ‘\U’ escapes.

(Contributed by Serhiy Storchaka in issue 3665(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue3665


File: python.info,  Node: sched,  Next: select<2>,  Prev: re<3>,  Up: Improved Modules<4>

1.4.20.39 sched
...............

   * *note run(): 6a3. now accepts a `blocking' parameter which when set
     to False makes the method execute the scheduled events due to
     expire soonest (if any) and then return immediately.  This is
     useful in case you want to use the *note scheduler: 6a4. in
     non-blocking applications.  (Contributed by Giampaolo Rodolà in
     issue 13449(1).)

   * *note scheduler: 6a4. class can now be safely used in
     multi-threaded environments.  (Contributed by Josiah Carlson and
     Giampaolo Rodolà in issue 8684(2).)

   * `timefunc' and `delayfunct' parameters of *note scheduler: 6a4.
     class constructor are now optional and defaults to *note
     time.time(): 6a5. and *note time.sleep(): 216. respectively.
     (Contributed by Chris Clark in issue 13245(3).)

   * *note enter(): 6a6. and *note enterabs(): 6a7. `argument' parameter
     is now optional.  (Contributed by Chris Clark in issue 13245(4).)

   * *note enter(): 6a6. and *note enterabs(): 6a7. now accept a
     `kwargs' parameter.  (Contributed by Chris Clark in issue
     13245(5).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue13449

   (2) https://bugs.python.org/issue8684

   (3) https://bugs.python.org/issue13245

   (4) https://bugs.python.org/issue13245

   (5) https://bugs.python.org/issue13245


File: python.info,  Node: select<2>,  Next: shlex,  Prev: sched,  Up: Improved Modules<4>

1.4.20.40 select
................

Solaris and derivative platforms have a new class *note select.devpoll:
4a8. for high performance asynchronous sockets via ‘/dev/poll’.
(Contributed by Jesús Cea Avión in issue 6397(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue6397


File: python.info,  Node: shlex,  Next: shutil<3>,  Prev: select<2>,  Up: Improved Modules<4>

1.4.20.41 shlex
...............

The previously undocumented helper function ‘quote’ from the *note
pipes: ca. modules has been moved to the *note shlex: e6. module and
documented.  *note quote(): 6aa. properly escapes all characters in a
string that might be otherwise given special meaning by the shell.


File: python.info,  Node: shutil<3>,  Next: signal<2>,  Prev: shlex,  Up: Improved Modules<4>

1.4.20.42 shutil
................

   * New functions:

        * *note disk_usage(): 6ac.: provides total, used and free disk
          space statistics.  (Contributed by Giampaolo Rodolà in issue
          12442(1).)

        * *note chown(): 6ad.: allows one to change user and/or group of
          the given path also specifying the user/group names and not
          only their numeric ids.  (Contributed by Sandro Tosi in issue
          12191(2).)

        * *note shutil.get_terminal_size(): 67f.: returns the size of
          the terminal window to which the interpreter is attached.
          (Contributed by Zbigniew Jędrzejewski-Szmek in issue
          13609(3).)

   * *note copy2(): 304. and *note copystat(): 6ae. now preserve file
     timestamps with nanosecond precision on platforms that support it.
     They also preserve file "extended attributes" on Linux.
     (Contributed by Larry Hastings in issue 14127(4) and issue
     15238(5).)

   * Several functions now take an optional ‘symlinks’ argument: when
     that parameter is true, symlinks aren’t dereferenced and the
     operation instead acts on the symlink itself (or creates one, if
     relevant).  (Contributed by Hynek Schlawack in issue 12715(6).)

   * When copying files to a different file system, *note move(): 302.
     now handles symlinks the way the posix ‘mv’ command does,
     recreating the symlink rather than copying the target file
     contents.  (Contributed by Jonathan Niehof in issue 9993(7).)
     *note move(): 302. now also returns the ‘dst’ argument as its
     result.

   * *note rmtree(): 6af. is now resistant to symlink attacks on
     platforms which support the new ‘dir_fd’ parameter in *note
     os.open(): 1f4. and *note os.unlink(): 670.  (Contributed by Martin
     von Löwis and Hynek Schlawack in issue 4489(8).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue12442

   (2) https://bugs.python.org/issue12191

   (3) https://bugs.python.org/issue13609

   (4) https://bugs.python.org/issue14127

   (5) https://bugs.python.org/issue15238

   (6) https://bugs.python.org/issue12715

   (7) https://bugs.python.org/issue9993

   (8) https://bugs.python.org/issue4489


File: python.info,  Node: signal<2>,  Next: smtpd<3>,  Prev: shutil<3>,  Up: Improved Modules<4>

1.4.20.43 signal
................

   * The *note signal: e8. module has new functions:

        * *note pthread_sigmask(): 6b1.: fetch and/or change the signal
          mask of the calling thread (Contributed by Jean-Paul Calderone
          in issue 8407(1));

        * *note pthread_kill(): 6b2.: send a signal to a thread;

        * *note sigpending(): 6b3.: examine pending functions;

        * *note sigwait(): 6b4.: wait a signal;

        * *note sigwaitinfo(): 215.: wait for a signal, returning
          detailed information about it;

        * *note sigtimedwait(): 214.: like *note sigwaitinfo(): 215. but
          with a timeout.

   * The signal handler writes the signal number as a single byte
     instead of a nul byte into the wakeup file descriptor.  So it is
     possible to wait more than one signal and know which signals were
     raised.

   * *note signal.signal(): 6b5. and *note signal.siginterrupt(): 6b6.
     raise an OSError, instead of a RuntimeError: OSError has an errno
     attribute.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue8407


File: python.info,  Node: smtpd<3>,  Next: smtplib<3>,  Prev: signal<2>,  Up: Improved Modules<4>

1.4.20.44 smtpd
...............

The *note smtpd: ea. module now supports RFC 5321(1) (extended SMTP) and
RFC 1870(2) (size extension).  Per the standard, these extensions are
enabled if and only if the client initiates the session with an ‘EHLO’
command.

(Initial ‘ELHO’ support by Alberto Trevino.  Size extension by Juhana
Jauhiainen.  Substantial additional work on the patch contributed by
Michele Orrù and Dan Boswell.  issue 8739(3))

   ---------- Footnotes ----------

   (1) https://tools.ietf.org/html/rfc5321.html

   (2) https://tools.ietf.org/html/rfc1870.html

   (3) https://bugs.python.org/issue8739


File: python.info,  Node: smtplib<3>,  Next: socket<3>,  Prev: smtpd<3>,  Up: Improved Modules<4>

1.4.20.45 smtplib
.................

The *note SMTP: 6b9, *note SMTP_SSL: 6ba, and *note LMTP: 6bb. classes
now accept a ‘source_address’ keyword argument to specify the ‘(host,
port)’ to use as the source address in the bind call when creating the
outgoing socket.  (Contributed by Paulo Scardine in issue 11281(1).)

*note SMTP: 6b9. now supports the context management protocol, allowing
an ‘SMTP’ instance to be used in a ‘with’ statement.  (Contributed by
Giampaolo Rodolà in issue 11289(2).)

The *note SMTP_SSL: 6ba. constructor and the *note starttls(): 6bc.
method now accept an SSLContext parameter to control parameters of the
secure channel.  (Contributed by Kasun Herath in issue 8809(3).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue11281

   (2) https://bugs.python.org/issue11289

   (3) https://bugs.python.org/issue8809


File: python.info,  Node: socket<3>,  Next: socketserver<2>,  Prev: smtplib<3>,  Up: Improved Modules<4>

1.4.20.46 socket
................

   * The *note socket: 20a. class now exposes additional methods to
     process ancillary data when supported by the underlying platform:

        * *note sendmsg(): 212.

        * *note recvmsg(): 20f.

        * *note recvmsg_into(): 6be.

     (Contributed by David Watson in issue 6560(1), based on an earlier
     patch by Heiko Wundram)

   * The *note socket: 20a. class now supports the PF_CAN protocol
     family (‘https://en.wikipedia.org/wiki/Socketcan’), on Linux
     (‘https://lwn.net/Articles/253425’).

     (Contributed by Matthias Fuchs, updated by Tiago Gonçalves in issue
     10141(2).)

   * The *note socket: 20a. class now supports the PF_RDS protocol
     family (‘https://en.wikipedia.org/wiki/Reliable_Datagram_Sockets’
     and ‘https://oss.oracle.com/projects/rds/’).

   * The *note socket: 20a. class now supports the ‘PF_SYSTEM’ protocol
     family on OS X. (Contributed by Michael Goderbauer in issue
     13777(3).)

   * New function *note sethostname(): 6bf. allows the hostname to be
     set on unix systems if the calling process has sufficient
     privileges.  (Contributed by Ross Lagerwall in issue 10866(4).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue6560

   (2) https://bugs.python.org/issue10141

   (3) https://bugs.python.org/issue13777

   (4) https://bugs.python.org/issue10866


File: python.info,  Node: socketserver<2>,  Next: sqlite3<3>,  Prev: socket<3>,  Up: Improved Modules<4>

1.4.20.47 socketserver
......................

*note BaseServer: 6c1. now has an overridable method *note
service_actions(): 6c2. that is called by the *note serve_forever():
6c3. method in the service loop.  *note ForkingMixIn: 6c4. now uses this
to clean up zombie child processes.  (Contributed by Justin Warkentin in
issue 11109(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue11109


File: python.info,  Node: sqlite3<3>,  Next: ssl<3>,  Prev: socketserver<2>,  Up: Improved Modules<4>

1.4.20.48 sqlite3
.................

New *note sqlite3.Connection: 6c6. method *note set_trace_callback():
6c7. can be used to capture a trace of all sql commands processed by
sqlite.  (Contributed by Torsten Landschoff in issue 11688(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue11688


File: python.info,  Node: ssl<3>,  Next: stat<2>,  Prev: sqlite3<3>,  Up: Improved Modules<4>

1.4.20.49 ssl
.............

   * The *note ssl: f1. module has two new random generation functions:

        * *note RAND_bytes(): 6c9.: generate cryptographically strong
          pseudo-random bytes.

        * *note RAND_pseudo_bytes(): 6ca.: generate pseudo-random bytes.

     (Contributed by Victor Stinner in issue 12049(1).)

   * The *note ssl: f1. module now exposes a finer-grained exception
     hierarchy in order to make it easier to inspect the various kinds
     of errors.  (Contributed by Antoine Pitrou in issue 11183(2).)

   * *note load_cert_chain(): 6cb. now accepts a `password' argument to
     be used if the private key is encrypted.  (Contributed by Adam
     Simpkins in issue 12803(3).)

   * Diffie-Hellman key exchange, both regular and Elliptic Curve-based,
     is now supported through the *note load_dh_params(): 6cc. and *note
     set_ecdh_curve(): 6cd. methods.  (Contributed by Antoine Pitrou in
     issue 13626(4) and issue 13627(5).)

   * SSL sockets have a new *note get_channel_binding(): 6ce. method
     allowing the implementation of certain authentication mechanisms
     such as SCRAM-SHA-1-PLUS. (Contributed by Jacek Konieczny in issue
     12551(6).)

   * You can query the SSL compression algorithm used by an SSL socket,
     thanks to its new *note compression(): 6cf. method.  The new
     attribute *note OP_NO_COMPRESSION: 6d0. can be used to disable
     compression.  (Contributed by Antoine Pitrou in issue 13634(7).)

   * Support has been added for the Next Procotol Negotiation extension
     using the *note ssl.SSLContext.set_npn_protocols(): 6d1. method.
     (Contributed by Colin Marc in issue 14204(8).)

   * SSL errors can now be introspected more easily thanks to *note
     library: 6d2. and *note reason: 6d3. attributes.  (Contributed by
     Antoine Pitrou in issue 14837(9).)

   * The *note get_server_certificate(): 6d4. function now supports
     IPv6.  (Contributed by Charles-François Natali in issue 11811(10).)

   * New attribute *note OP_CIPHER_SERVER_PREFERENCE: 6d5. allows
     setting SSLv3 server sockets to use the server’s cipher ordering
     preference rather than the client’s (issue 13635(11)).

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue12049

   (2) https://bugs.python.org/issue11183

   (3) https://bugs.python.org/issue12803

   (4) https://bugs.python.org/issue13626

   (5) https://bugs.python.org/issue13627

   (6) https://bugs.python.org/issue12551

   (7) https://bugs.python.org/issue13634

   (8) https://bugs.python.org/issue14204

   (9) https://bugs.python.org/issue14837

   (10) https://bugs.python.org/issue11811

   (11) https://bugs.python.org/issue13635


File: python.info,  Node: stat<2>,  Next: struct<2>,  Prev: ssl<3>,  Up: Improved Modules<4>

1.4.20.50 stat
..............

The undocumented tarfile.filemode function has been moved to *note
stat.filemode(): 6d7.  It can be used to convert a file’s mode to a
string of the form ’-rwxrwxrwx’.

(Contributed by Giampaolo Rodolà in issue 14807(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue14807


File: python.info,  Node: struct<2>,  Next: subprocess<3>,  Prev: stat<2>,  Up: Improved Modules<4>

1.4.20.51 struct
................

The *note struct: f6. module now supports ‘ssize_t’ and ‘size_t’ via the
new codes ‘n’ and ‘N’, respectively.  (Contributed by Antoine Pitrou in
issue 3163(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue3163


File: python.info,  Node: subprocess<3>,  Next: sys<3>,  Prev: struct<2>,  Up: Improved Modules<4>

1.4.20.52 subprocess
....................

Command strings can now be bytes objects on posix platforms.
(Contributed by Victor Stinner in issue 8513(1).)

A new constant *note DEVNULL: 6da. allows suppressing output in a
platform-independent fashion.  (Contributed by Ross Lagerwall in issue
5870(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue8513

   (2) https://bugs.python.org/issue5870


File: python.info,  Node: sys<3>,  Next: tarfile<3>,  Prev: subprocess<3>,  Up: Improved Modules<4>

1.4.20.53 sys
.............

The *note sys: fb. module has a new *note thread_info: 6dc. *note struct
sequence: 6dd. holding informations about the thread implementation
(issue 11223(1)).

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue11223


File: python.info,  Node: tarfile<3>,  Next: tempfile,  Prev: sys<3>,  Up: Improved Modules<4>

1.4.20.54 tarfile
.................

*note tarfile: ff. now supports ‘lzma’ encoding via the *note lzma: ab.
module.  (Contributed by Lars Gustäbel in issue 5689(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue5689


File: python.info,  Node: tempfile,  Next: textwrap<2>,  Prev: tarfile<3>,  Up: Improved Modules<4>

1.4.20.55 tempfile
..................

*note tempfile.SpooledTemporaryFile: 6e0.’s ‘truncate()’ method now
accepts a ‘size’ parameter.  (Contributed by Ryan Kelly in issue
9957(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue9957


File: python.info,  Node: textwrap<2>,  Next: threading<3>,  Prev: tempfile,  Up: Improved Modules<4>

1.4.20.56 textwrap
..................

The *note textwrap: 105. module has a new *note indent(): 6e2. that
makes it straightforward to add a common prefix to selected lines in a
block of text (issue 13857(1)).

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue13857


File: python.info,  Node: threading<3>,  Next: time<2>,  Prev: textwrap<2>,  Up: Improved Modules<4>

1.4.20.57 threading
...................

*note threading.Condition: 6e4, *note threading.Semaphore: 6e5, *note
threading.BoundedSemaphore: 6e6, *note threading.Event: 6e7, and *note
threading.Timer: 6e8, all of which used to be factory functions
returning a class instance, are now classes and may be subclassed.
(Contributed by Éric Araujo in issue 10968(1).)

The *note threading.Thread: 4f0. constructor now accepts a ‘daemon’
keyword argument to override the default behavior of inheriting the
‘deamon’ flag value from the parent thread (issue 6064(2)).

The formerly private function ‘_thread.get_ident’ is now available as
the public function *note threading.get_ident(): 6e9.  This eliminates
several cases of direct access to the ‘_thread’ module in the stdlib.
Third party code that used ‘_thread.get_ident’ should likewise be
changed to use the new public interface.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue10968

   (2) https://bugs.python.org/issue6064


File: python.info,  Node: time<2>,  Next: types<3>,  Prev: threading<3>,  Up: Improved Modules<4>

1.4.20.58 time
..............

The PEP 418(1) added new functions to the *note time: 107. module:

   * *note get_clock_info(): 6eb.: Get information on a clock.

   * *note monotonic(): 340.: Monotonic clock (cannot go backward), not
     affected by system clock updates.

   * *note perf_counter(): 6ec.: Performance counter with the highest
     available resolution to measure a short duration.

   * *note process_time(): 6ed.: Sum of the system and user CPU time of
     the current process.

Other new functions:

   * *note clock_getres(): 6ee, *note clock_gettime(): 6ef. and *note
     clock_settime(): 6f0. functions with ‘CLOCK_xxx’ constants.
     (Contributed by Victor Stinner in issue 10278(2).)

To improve cross platform consistency, *note sleep(): 216. now raises a
*note ValueError: 19c. when passed a negative sleep value.  Previously
this was an error on posix, but produced an infinite sleep on Windows.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0418

   (2) https://bugs.python.org/issue10278


File: python.info,  Node: types<3>,  Next: unittest<3>,  Prev: time<2>,  Up: Improved Modules<4>

1.4.20.59 types
...............

Add a new *note types.MappingProxyType: 6f2. class: Read-only proxy of a
mapping.  (issue 14386(1))

The new functions *note types.new_class(): 6f3. and *note
types.prepare_class(): 6f4. provide support for PEP 3115 compliant
dynamic type creation.  (issue 14588(2))

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue14386

   (2) https://bugs.python.org/issue14588


File: python.info,  Node: unittest<3>,  Next: urllib<3>,  Prev: types<3>,  Up: Improved Modules<4>

1.4.20.60 unittest
..................

*note assertRaises(): 6f6, *note assertRaisesRegex(): 6f7, *note
assertWarns(): 6f8, and *note assertWarnsRegex(): 6f9. now accept a
keyword argument `msg' when used as context managers.  (Contributed by
Ezio Melotti and Winston Ewert in issue 10775(1).)

*note unittest.TestCase.run(): 6fa. now returns the *note TestResult:
6fb. object.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue10775


File: python.info,  Node: urllib<3>,  Next: webbrowser,  Prev: unittest<3>,  Up: Improved Modules<4>

1.4.20.61 urllib
................

The *note Request: 4f8. class, now accepts a `method' argument used by
*note get_method(): 6fd. to determine what HTTP method should be used.
For example, this will send a ‘'HEAD'’ request:

     >>> urlopen(Request('https://www.python.org', method='HEAD'))

(issue 1673007(1))

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue1673007


File: python.info,  Node: webbrowser,  Next: xml etree ElementTree,  Prev: urllib<3>,  Up: Improved Modules<4>

1.4.20.62 webbrowser
....................

The *note webbrowser: 126. module supports more "browsers": Google
Chrome (named ‘chrome’, ‘chromium’, ‘chrome-browser’ or
‘chromium-browser’ depending on the version and operating system), and
the generic launchers ‘xdg-open’, from the FreeDesktop.org project, and
‘gvfs-open’, which is the default URI handler for GNOME 3.  (The former
contributed by Arnaud Calmettes in issue 13620(1), the latter by
Matthias Klose in issue 14493(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue13620

   (2) https://bugs.python.org/issue14493


File: python.info,  Node: xml etree ElementTree,  Next: zlib<2>,  Prev: webbrowser,  Up: Improved Modules<4>

1.4.20.63 xml.etree.ElementTree
...............................

The *note xml.etree.ElementTree: 134. module now imports its C
accelerator by default; there is no longer a need to explicitly import
‘xml.etree.cElementTree’ (this module stays for backwards compatibility,
but is now deprecated).  In addition, the ‘iter’ family of methods of
*note Element: 700. has been optimized (rewritten in C). The module’s
documentation has also been greatly improved with added examples and a
more detailed reference.


File: python.info,  Node: zlib<2>,  Prev: xml etree ElementTree,  Up: Improved Modules<4>

1.4.20.64 zlib
..............

New attribute *note zlib.Decompress.eof: 702. makes it possible to
distinguish between a properly-formed compressed stream and an
incomplete or truncated one.  (Contributed by Nadeem Vawda in issue
12646(1).)

New attribute *note zlib.ZLIB_RUNTIME_VERSION: 703. reports the version
string of the underlying ‘zlib’ library that is loaded at runtime.
(Contributed by Torsten Landschoff in issue 12306(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue12646

   (2) https://bugs.python.org/issue12306


File: python.info,  Node: Optimizations<3>,  Next: Build and C API Changes<3>,  Prev: Improved Modules<4>,  Up: What's New In Python 3 3

1.4.21 Optimizations
--------------------

Major performance enhancements have been added:

   * Thanks to PEP 393(1), some operations on Unicode strings have been
     optimized:

        * the memory footprint is divided by 2 to 4 depending on the
          text

        * encode an ASCII string to UTF-8 doesn’t need to encode
          characters anymore, the UTF-8 representation is shared with
          the ASCII representation

        * the UTF-8 encoder has been optimized

        * repeating a single ASCII letter and getting a substring of an
          ASCII string is 4 times faster

   * UTF-8 is now 2x to 4x faster.  UTF-16 encoding is now up to 10x
     faster.

     (Contributed by Serhiy Storchaka, issue 14624(2), issue 14738(3)
     and issue 15026(4).)

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0393

   (2) https://bugs.python.org/issue14624

   (3) https://bugs.python.org/issue14738

   (4) https://bugs.python.org/issue15026


File: python.info,  Node: Build and C API Changes<3>,  Next: Deprecated<4>,  Prev: Optimizations<3>,  Up: What's New In Python 3 3

1.4.22 Build and C API Changes
------------------------------

Changes to Python’s build process and to the C API include:

   * New PEP 3118(1) related function:

        * *note PyMemoryView_FromMemory(): 705.

   * PEP 393(2) added new Unicode types, macros and functions:

        * High-level API:

             * *note PyUnicode_CopyCharacters(): 706.

             * *note PyUnicode_FindChar(): 707.

             * *note PyUnicode_GetLength(): 708, *note
               PyUnicode_GET_LENGTH: 709.

             * *note PyUnicode_New(): 70a.

             * *note PyUnicode_Substring(): 70b.

             * *note PyUnicode_ReadChar(): 70c, *note
               PyUnicode_WriteChar(): 70d.

        * Low-level API:

             * *note Py_UCS1: 70e, *note Py_UCS2: 70f, *note Py_UCS4:
               710. types

             * *note PyASCIIObject: 711. and *note
               PyCompactUnicodeObject: 712. structures

             * *note PyUnicode_READY: 713.

             * *note PyUnicode_FromKindAndData(): 714.

             * *note PyUnicode_AsUCS4(): 715, *note
               PyUnicode_AsUCS4Copy(): 716.

             * *note PyUnicode_DATA: 717, *note PyUnicode_1BYTE_DATA:
               718, *note PyUnicode_2BYTE_DATA: 719, *note
               PyUnicode_4BYTE_DATA: 71a.

             * *note PyUnicode_KIND: 71b. with ‘PyUnicode_Kind’ enum:
               *note PyUnicode_WCHAR_KIND: 71c, *note
               PyUnicode_1BYTE_KIND: 71d, *note PyUnicode_2BYTE_KIND:
               71e, *note PyUnicode_4BYTE_KIND: 71f.

             * *note PyUnicode_READ: 720, *note PyUnicode_READ_CHAR:
               721, *note PyUnicode_WRITE: 722.

             * *note PyUnicode_MAX_CHAR_VALUE: 723.

   * *note PyArg_ParseTuple: 724. now accepts a *note bytearray: 1dc.
     for the ‘c’ format (issue 12380(3)).

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3118

   (2) https://www.python.org/dev/peps/pep-0393

   (3) https://bugs.python.org/issue12380


File: python.info,  Node: Deprecated<4>,  Next: Porting to Python 3 3,  Prev: Build and C API Changes<3>,  Up: What's New In Python 3 3

1.4.23 Deprecated
-----------------

* Menu:

* Unsupported Operating Systems: Unsupported Operating Systems<2>. 
* Deprecated Python modules, functions and methods: Deprecated Python modules functions and methods<3>. 
* Deprecated functions and types of the C API: Deprecated functions and types of the C API<2>. 
* Deprecated features: Deprecated features<2>. 


File: python.info,  Node: Unsupported Operating Systems<2>,  Next: Deprecated Python modules functions and methods<3>,  Up: Deprecated<4>

1.4.23.1 Unsupported Operating Systems
......................................

OS/2 and VMS are no longer supported due to the lack of a maintainer.

Windows 2000 and Windows platforms which set ‘COMSPEC’ to ‘command.com’
are no longer supported due to maintenance burden.

OSF support, which was deprecated in 3.2, has been completely removed.


File: python.info,  Node: Deprecated Python modules functions and methods<3>,  Next: Deprecated functions and types of the C API<2>,  Prev: Unsupported Operating Systems<2>,  Up: Deprecated<4>

1.4.23.2 Deprecated Python modules, functions and methods
.........................................................

   * Passing a non-empty string to ‘object.__format__()’ is deprecated,
     and will produce a *note TypeError: 562. in Python 3.4 (issue
     9856(1)).

   * The ‘unicode_internal’ codec has been deprecated because of the PEP
     393(2), use UTF-8, UTF-16 (‘utf-16-le’ or ‘utf-16-be’), or UTF-32
     (‘utf-32-le’ or ‘utf-32-be’)

   * *note ftplib.FTP.nlst(): 633. and *note ftplib.FTP.dir(): 634.: use
     *note ftplib.FTP.mlsd(): 632.

   * *note platform.popen(): 728.: use the *note subprocess: f7. module.
     Check especially the *note Replacing Older Functions with the
     subprocess Module: 729. section (issue 11377(3)).

   * issue 13374(4): The Windows bytes API has been deprecated in the
     *note os: c2. module.  Use Unicode filenames, instead of bytes
     filenames, to not depend on the ANSI code page anymore and to
     support any filename.

   * issue 13988(5): The ‘xml.etree.cElementTree’ module is deprecated.
     The accelerator is used automatically whenever available.

   * The behaviour of *note time.clock(): 72a. depends on the platform:
     use the new *note time.perf_counter(): 6ec. or *note
     time.process_time(): 6ed. function instead, depending on your
     requirements, to have a well defined behaviour.

   * The *note os.stat_float_times(): 72b. function is deprecated.

   * *note abc: 4. module:

        * *note abc.abstractproperty: 5f1. has been deprecated, use
          *note property: 377. with *note abc.abstractmethod(): 5f2.
          instead.

        * *note abc.abstractclassmethod: 5f3. has been deprecated, use
          *note classmethod: 5f4. with *note abc.abstractmethod(): 5f2.
          instead.

        * *note abc.abstractstaticmethod: 5f5. has been deprecated, use
          *note staticmethod: 5f6. with *note abc.abstractmethod(): 5f2.
          instead.

   * *note importlib: 9a. package:

        * *note importlib.abc.SourceLoader.path_mtime(): 72c. is now
          deprecated in favour of *note
          importlib.abc.SourceLoader.path_stats(): 72d. as bytecode
          files now store both the modification time and size of the
          source file the bytecode file was compiled from.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue9856

   (2) https://www.python.org/dev/peps/pep-0393

   (3) https://bugs.python.org/issue11377

   (4) https://bugs.python.org/issue13374

   (5) https://bugs.python.org/issue13988


File: python.info,  Node: Deprecated functions and types of the C API<2>,  Next: Deprecated features<2>,  Prev: Deprecated Python modules functions and methods<3>,  Up: Deprecated<4>

1.4.23.3 Deprecated functions and types of the C API
....................................................

The *note Py_UNICODE: 72f. has been deprecated by PEP 393(1) and will be
removed in Python 4.  All functions using this type are deprecated:

Unicode functions and methods using *note Py_UNICODE: 72f. and *note
Py_UNICODE*: 72f. types:

   * *note PyUnicode_FromUnicode: 730.: use *note
     PyUnicode_FromWideChar(): 731. or *note
     PyUnicode_FromKindAndData(): 714.

   * *note PyUnicode_AS_UNICODE: 732, *note PyUnicode_AsUnicode(): 733,
     *note PyUnicode_AsUnicodeAndSize(): 734.: use *note
     PyUnicode_AsWideCharString(): 735.

   * *note PyUnicode_AS_DATA: 736.: use *note PyUnicode_DATA: 717. with
     *note PyUnicode_READ: 720. and *note PyUnicode_WRITE: 722.

   * *note PyUnicode_GET_SIZE: 737, *note PyUnicode_GetSize(): 738.: use
     *note PyUnicode_GET_LENGTH: 709. or *note PyUnicode_GetLength():
     708.

   * *note PyUnicode_GET_DATA_SIZE: 739.: use ‘PyUnicode_GET_LENGTH(str)
     * PyUnicode_KIND(str)’ (only work on ready strings)

   * *note PyUnicode_AsUnicodeCopy(): 73a.: use *note
     PyUnicode_AsUCS4Copy(): 716. or *note PyUnicode_AsWideCharString():
     735.

   * ‘PyUnicode_GetMax()’

Functions and macros manipulating Py_UNICODE* strings:

   * ‘Py_UNICODE_strlen’: use *note PyUnicode_GetLength(): 708. or *note
     PyUnicode_GET_LENGTH: 709.

   * ‘Py_UNICODE_strcat’: use *note PyUnicode_CopyCharacters(): 706. or
     *note PyUnicode_FromFormat(): 3ba.

   * ‘Py_UNICODE_strcpy’, ‘Py_UNICODE_strncpy’, ‘Py_UNICODE_COPY’: use
     *note PyUnicode_CopyCharacters(): 706. or *note
     PyUnicode_Substring(): 70b.

   * ‘Py_UNICODE_strcmp’: use *note PyUnicode_Compare(): 73b.

   * ‘Py_UNICODE_strncmp’: use *note PyUnicode_Tailmatch(): 73c.

   * ‘Py_UNICODE_strchr’, ‘Py_UNICODE_strrchr’: use *note
     PyUnicode_FindChar(): 707.

   * ‘Py_UNICODE_FILL’: use *note PyUnicode_Fill(): 73d.

   * ‘Py_UNICODE_MATCH’

Encoders:

   * *note PyUnicode_Encode(): 73e.: use ‘PyUnicode_AsEncodedObject()’

   * *note PyUnicode_EncodeUTF7(): 73f.

   * *note PyUnicode_EncodeUTF8(): 740.: use *note PyUnicode_AsUTF8():
     741. or *note PyUnicode_AsUTF8String(): 742.

   * *note PyUnicode_EncodeUTF32(): 743.

   * *note PyUnicode_EncodeUTF16(): 744.

   * ‘PyUnicode_EncodeUnicodeEscape:()’ use *note
     PyUnicode_AsUnicodeEscapeString(): 745.

   * ‘PyUnicode_EncodeRawUnicodeEscape:()’ use *note
     PyUnicode_AsRawUnicodeEscapeString(): 746.

   * *note PyUnicode_EncodeLatin1(): 747.: use *note
     PyUnicode_AsLatin1String(): 748.

   * *note PyUnicode_EncodeASCII(): 749.: use *note
     PyUnicode_AsASCIIString(): 74a.

   * *note PyUnicode_EncodeCharmap(): 74b.

   * *note PyUnicode_TranslateCharmap(): 74c.

   * *note PyUnicode_EncodeMBCS(): 74d.: use *note
     PyUnicode_AsMBCSString(): 74e. or *note PyUnicode_EncodeCodePage():
     74f. (with ‘CP_ACP’ code_page)

   * ‘PyUnicode_EncodeDecimal()’, *note
     PyUnicode_TransformDecimalToASCII(): 750.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0393


File: python.info,  Node: Deprecated features<2>,  Prev: Deprecated functions and types of the C API<2>,  Up: Deprecated<4>

1.4.23.4 Deprecated features
............................

The *note array: 7. module’s ‘'u'’ format code is now deprecated and
will be removed in Python 4 together with the rest of the (*note
Py_UNICODE: 72f.) API.


File: python.info,  Node: Porting to Python 3 3,  Prev: Deprecated<4>,  Up: What's New In Python 3 3

1.4.24 Porting to Python 3.3
----------------------------

This section lists previously described changes and other bugfixes that
may require changes to your code.

* Menu:

* Porting Python code:: 
* Porting C code:: 
* Building C extensions:: 
* Command Line Switch Changes:: 


File: python.info,  Node: Porting Python code,  Next: Porting C code,  Up: Porting to Python 3 3

1.4.24.1 Porting Python code
............................

   * Hash randomization is enabled by default.  Set the *note
     PYTHONHASHSEED: 5e8. environment variable to ‘0’ to disable hash
     randomization.  See also the *note object.__hash__(): 5e7. method.

   * issue 12326(1): On Linux, sys.platform doesn’t contain the major
     version anymore.  It is now always ’linux’, instead of ’linux2’ or
     ’linux3’ depending on the Linux version used to build Python.
     Replace sys.platform == ’linux2’ with
     sys.platform.startswith(’linux’), or directly sys.platform ==
     ’linux’ if you don’t need to support older Python versions.

   * issue 13847(2), issue 14180(3): *note time: 107. and *note
     datetime: 2f.: *note OverflowError: 578. is now raised instead of
     *note ValueError: 19c. if a timestamp is out of range.  *note
     OSError: 4b6. is now raised if C functions ‘gmtime()’ or
     ‘localtime()’ failed.

   * The default finders used by import now utilize a cache of what is
     contained within a specific directory.  If you create a Python
     source file or sourceless bytecode file, make sure to call *note
     importlib.invalidate_caches(): 5da. to clear out the cache for the
     finders to notice the new file.

   * *note ImportError: 19f. now uses the full name of the module that
     was attempted to be imported.  Doctests that check ImportErrors’
     message will need to be updated to use the full name of the module
     instead of just the tail of the name.

   * The `index' argument to *note __import__(): 5cd. now defaults to 0
     instead of -1 and no longer support negative values.  It was an
     oversight when PEP 328(4) was implemented that the default value
     remained -1.  If you need to continue to perform a relative import
     followed by an absolute import, then perform the relative import
     using an index of 1, followed by another import using an index of
     0.  It is preferred, though, that you use *note
     importlib.import_module(): 754. rather than call *note
     __import__(): 5cd. directly.

   * *note __import__(): 5cd. no longer allows one to use an index value
     other than 0 for top-level modules.  E.g.  ‘__import__('sys',
     level=1)’ is now an error.

   * Because *note sys.meta_path: 5dc. and *note sys.path_hooks: 574.
     now have finders on them by default, you will most likely want to
     use ‘list.insert()’ instead of ‘list.append()’ to add to those
     lists.

   * Because ‘None’ is now inserted into *note sys.path_importer_cache:
     3ac, if you are clearing out entries in the dictionary of paths
     that do not have a finder, you will need to remove keys paired with
     values of ‘None’ `and' *note imp.NullImporter: 5dd. to be
     backwards-compatible.  This will lead to extra overhead on older
     versions of Python that re-insert ‘None’ into *note
     sys.path_importer_cache: 3ac. where it repesents the use of
     implicit finders, but semantically it should not change anything.

   * *note importlib.abc.Finder: 5d5. no longer specifies a
     ‘find_module()’ abstract method that must be implemented.  If you
     were relying on subclasses to implement that method, make sure to
     check for the method’s existence first.  You will probably want to
     check for ‘find_loader()’ first, though, in the case of working
     with *note path entry finders: 5d2.

   * *note pkgutil: cb. has been converted to use *note importlib: 9a.
     internally.  This eliminates many edge cases where the old
     behaviour of the PEP 302 import emulation failed to match the
     behaviour of the real import system.  The import emulation itself
     is still present, but is now deprecated.  The *note
     pkgutil.iter_importers(): 755. and *note pkgutil.walk_packages():
     756. functions special case the standard import hooks so they are
     still supported even though they do not provide the non-standard
     ‘iter_modules()’ method.

   * A longstanding RFC-compliance bug (issue 1079(5)) in the parsing
     done by *note email.header.decode_header(): 627. has been fixed.
     Code that uses the standard idiom to convert encoded headers into
     unicode (‘str(make_header(decode_header(h))’) will see no change,
     but code that looks at the individual tuples returned by
     decode_header will see that whitespace that precedes or follows
     ‘ASCII’ sections is now included in the ‘ASCII’ section.  Code that
     builds headers using ‘make_header’ should also continue to work
     without change, since ‘make_header’ continues to add whitespace
     between ‘ASCII’ and non-‘ASCII’ sections if it is not already
     present in the input strings.

   * *note email.utils.formataddr(): 757. now does the correct content
     transfer encoding when passed non-‘ASCII’ display names.  Any code
     that depended on the previous buggy behavior that preserved the
     non-‘ASCII’ unicode in the formatted output string will need to be
     changed (issue 1690608(6)).

   * *note poplib.POP3.quit(): 758. may now raise protocol errors like
     all other ‘poplib’ methods.  Code that assumes ‘quit’ does not
     raise *note poplib.error_proto: 759. errors may need to be changed
     if errors on ‘quit’ are encountered by a particular application
     (issue 11291(7)).

   * The ‘strict’ argument to *note email.parser.Parser: 75a, deprecated
     since Python 2.4, has finally been removed.

   * The deprecated method ‘unittest.TestCase.assertSameElements’ has
     been removed.

   * The deprecated variable ‘time.accept2dyear’ has been removed.

   * The deprecated ‘Context._clamp’ attribute has been removed from the
     *note decimal: 34. module.  It was previously replaced by the
     public attribute ‘clamp’.  (See issue 8540(8).)

   * The undocumented internal helper class ‘SSLFakeFile’ has been
     removed from *note smtplib: eb, since its functionality has long
     been provided directly by *note socket.socket.makefile(): 75b.

   * Passing a negative value to *note time.sleep(): 216. on Windows now
     raises an error instead of sleeping forever.  It has always raised
     an error on posix.

   * The ‘ast.__version__’ constant has been removed.  If you need to
     make decisions affected by the AST version, use *note
     sys.version_info: 75c. to make the decision.

   * Code that used to work around the fact that the *note threading:
     106. module used factory functions by subclassing the private
     classes will need to change to subclass the now-public classes.

   * The undocumented debugging machinery in the threading module has
     been removed, simplifying the code.  This should have no effect on
     production code, but is mentioned here in case any application
     debug frameworks were interacting with it (issue 13550(9)).

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue12326

   (2) https://bugs.python.org/issue13847

   (3) https://bugs.python.org/issue14180

   (4) https://www.python.org/dev/peps/pep-0328

   (5) https://bugs.python.org/issue1079

   (6) https://bugs.python.org/issue1690608

   (7) https://bugs.python.org/issue11291

   (8) https://bugs.python.org/issue8540

   (9) https://bugs.python.org/issue13550


File: python.info,  Node: Porting C code,  Next: Building C extensions,  Prev: Porting Python code,  Up: Porting to Python 3 3

1.4.24.2 Porting C code
.......................

   * In the course of changes to the buffer API the undocumented
     ‘smalltable’ member of the *note Py_buffer: 75d. structure has been
     removed and the layout of the ‘PyMemoryViewObject’ has changed.

     All extensions relying on the relevant parts in ‘memoryobject.h’ or
     ‘object.h’ must be rebuilt.

   * Due to *note PEP 393: 599, the *note Py_UNICODE: 72f. type and all
     functions using this type are deprecated (but will stay available
     for at least five years).  If you were using low-level Unicode APIs
     to construct and access unicode objects and you want to benefit of
     the memory footprint reduction provided by PEP 393, you have to
     convert your code to the new *note Unicode API: 75e.

     However, if you only have been using high-level functions such as
     *note PyUnicode_Concat(): 75f, *note PyUnicode_Join(): 760. or
     *note PyUnicode_FromFormat(): 3ba, your code will automatically
     take advantage of the new unicode representations.

   * *note PyImport_GetMagicNumber(): 761. now returns -1 upon failure.

   * As a negative value for the `level' argument to *note __import__():
     5cd. is no longer valid, the same now holds for *note
     PyImport_ImportModuleLevel(): 762.  This also means that the value
     of `level' used by *note PyImport_ImportModuleEx(): 763. is now 0
     instead of -1.


File: python.info,  Node: Building C extensions,  Next: Command Line Switch Changes,  Prev: Porting C code,  Up: Porting to Python 3 3

1.4.24.3 Building C extensions
..............................

   * The range of possible file names for C extensions has been
     narrowed.  Very rarely used spellings have been suppressed: under
     POSIX, files named ‘xxxmodule.so’, ‘xxxmodule.abi3.so’ and
     ‘xxxmodule.cpython-*.so’ are no longer recognized as implementing
     the ‘xxx’ module.  If you had been generating such files, you have
     to switch to the other spellings (i.e., remove the ‘module’ string
     from the file names).

     (implemented in issue 14040(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue14040


File: python.info,  Node: Command Line Switch Changes,  Prev: Building C extensions,  Up: Porting to Python 3 3

1.4.24.4 Command Line Switch Changes
....................................

   * The -Q command-line flag and related artifacts have been removed.
     Code checking sys.flags.division_warning will need updating.

     (issue 10998(1), contributed by Éric Araujo.)

   * When ‘python’ is started with *note -S: 766, ‘import site’ will no
     longer add site-specific paths to the module search paths.  In
     previous versions, it did.

     (issue 11591(2), contributed by Carl Meyer with editions by Éric
     Araujo.)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue10998

   (2) https://bugs.python.org/issue11591


File: python.info,  Node: What's New In Python 3 2,  Next: What's New In Python 3 1,  Prev: What's New In Python 3 3,  Up: What's New in Python

1.5 What’s New In Python 3.2
============================


Author: Raymond Hettinger

This article explains the new features in Python 3.2 as compared to 3.1.
It focuses on a few highlights and gives a few examples.  For full
details, see the Misc/NEWS(1) file.

See also
........

PEP 392(2) - Python 3.2 Release Schedule

* Menu:

* PEP 384; Defining a Stable ABI: PEP 384 Defining a Stable ABI. 
* PEP 389; Argparse Command Line Parsing Module: PEP 389 Argparse Command Line Parsing Module. 
* PEP 391; Dictionary Based Configuration for Logging: PEP 391 Dictionary Based Configuration for Logging. 
* PEP 3148; The concurrent.futures module: PEP 3148 The concurrent futures module. 
* PEP 3147; PYC Repository Directories: PEP 3147 PYC Repository Directories. 
* PEP 3149; ABI Version Tagged .so Files: PEP 3149 ABI Version Tagged so Files. 
* PEP 3333; Python Web Server Gateway Interface v1.0.1: PEP 3333 Python Web Server Gateway Interface v1 0 1. 
* Other Language Changes: Other Language Changes<5>. 
* New, Improved, and Deprecated Modules: New Improved and Deprecated Modules. 
* Multi-threading:: 
* Optimizations: Optimizations<4>. 
* Unicode:: 
* Codecs:: 
* Documentation:: 
* IDLE:: 
* Code Repository:: 
* Build and C API Changes: Build and C API Changes<4>. 
* Porting to Python 3.2: Porting to Python 3 2. 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/3.2/Misc/NEWS

   (2) https://www.python.org/dev/peps/pep-0392


File: python.info,  Node: PEP 384 Defining a Stable ABI,  Next: PEP 389 Argparse Command Line Parsing Module,  Up: What's New In Python 3 2

1.5.1 PEP 384: Defining a Stable ABI
------------------------------------

In the past, extension modules built for one Python version were often
not usable with other Python versions.  Particularly on Windows, every
feature release of Python required rebuilding all extension modules that
one wanted to use.  This requirement was the result of the free access
to Python interpreter internals that extension modules could use.

With Python 3.2, an alternative approach becomes available: extension
modules which restrict themselves to a limited API (by defining
Py_LIMITED_API) cannot use many of the internals, but are constrained to
a set of API functions that are promised to be stable for several
releases.  As a consequence, extension modules built for 3.2 in that
mode will also work with 3.3, 3.4, and so on.  Extension modules that
make use of details of memory structures can still be built, but will
need to be recompiled for every feature release.

See also
........

PEP 384(1) - Defining a Stable ABI

     PEP written by Martin von Löwis.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0384


File: python.info,  Node: PEP 389 Argparse Command Line Parsing Module,  Next: PEP 391 Dictionary Based Configuration for Logging,  Prev: PEP 384 Defining a Stable ABI,  Up: What's New In Python 3 2

1.5.2 PEP 389: Argparse Command Line Parsing Module
---------------------------------------------------

A new module for command line parsing, *note argparse: 6, was introduced
to overcome the limitations of *note optparse: c1. which did not provide
support for positional arguments (not just options), subcommands,
required options and other common patterns of specifying and validating
options.

This module has already had widespread success in the community as a
third-party module.  Being more fully featured than its predecessor, the
*note argparse: 6. module is now the preferred module for command-line
processing.  The older module is still being kept available because of
the substantial amount of legacy code that depends on it.

Here’s an annotated example parser showing features like limiting
results to a set of choices, specifying a `metavar' in the help screen,
validating that one or more positional arguments is present, and making
a required option:

     import argparse
     parser = argparse.ArgumentParser(
                 description = 'Manage servers',         # main description for help
                 epilog = 'Tested on Solaris and Linux') # displayed after help
     parser.add_argument('action',                       # argument name
                 choices = ['deploy', 'start', 'stop'],  # three allowed values
                 help = 'action on each target')         # help msg
     parser.add_argument('targets',
                 metavar = 'HOSTNAME',                   # var name used in help msg
                 nargs = '+',                            # require one or more targets
                 help = 'url for target machines')       # help msg explanation
     parser.add_argument('-u', '--user',                 # -u or --user option
                 required = True,                        # make it a required argument
                 help = 'login as user')

Example of calling the parser on a command string:

     >>> cmd  = 'deploy sneezy.example.com sleepy.example.com -u skycaptain'
     >>> result = parser.parse_args(cmd.split())
     >>> result.action
     'deploy'
     >>> result.targets
     ['sneezy.example.com', 'sleepy.example.com']
     >>> result.user
     'skycaptain'

Example of the parser’s automatically generated help:

     >>> parser.parse_args('-h'.split())

     usage: manage_cloud.py [-h] -u USER
                            {deploy,start,stop} HOSTNAME [HOSTNAME ...]

     Manage servers

     positional arguments:
       {deploy,start,stop}   action on each target
       HOSTNAME              url for target machines

     optional arguments:
       -h, --help            show this help message and exit
       -u USER, --user USER  login as user

     Tested on Solaris and Linux

An especially nice *note argparse: 6. feature is the ability to define
subparsers, each with their own argument patterns and help displays:

     import argparse
     parser = argparse.ArgumentParser(prog='HELM')
     subparsers = parser.add_subparsers()

     parser_l = subparsers.add_parser('launch', help='Launch Control')   # first subgroup
     parser_l.add_argument('-m', '--missiles', action='store_true')
     parser_l.add_argument('-t', '--torpedos', action='store_true')

     parser_m = subparsers.add_parser('move', help='Move Vessel',        # second subgroup
                                      aliases=('steer', 'turn'))         # equivalent names
     parser_m.add_argument('-c', '--course', type=int, required=True)
     parser_m.add_argument('-s', '--speed', type=int, default=0)

     $ ./helm.py --help                         # top level help (launch and move)
     $ ./helm.py launch --help                  # help for launch options
     $ ./helm.py launch --missiles              # set missiles=True and torpedos=False
     $ ./helm.py steer --course 180 --speed 5   # set movement parameters

See also
........

PEP 389(1) - New Command Line Parsing Module

     PEP written by Steven Bethard.

*note Upgrading optparse code: 76b. for details on the differences from
*note optparse: c1.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0389


File: python.info,  Node: PEP 391 Dictionary Based Configuration for Logging,  Next: PEP 3148 The concurrent futures module,  Prev: PEP 389 Argparse Command Line Parsing Module,  Up: What's New In Python 3 2

1.5.3 PEP 391: Dictionary Based Configuration for Logging
---------------------------------------------------------

The *note logging: a8. module provided two kinds of configuration, one
style with function calls for each option or another style driven by an
external file saved in a ‘ConfigParser’ format.  Those options did not
provide the flexibility to create configurations from JSON or YAML
files, nor did they support incremental configuration, which is needed
for specifying logger options from a command line.

To support a more flexible style, the module now offers *note
logging.config.dictConfig(): 76d. for specifying logging configuration
with plain Python dictionaries.  The configuration options include
formatters, handlers, filters, and loggers.  Here’s a working example of
a configuration dictionary:

     {"version": 1,
      "formatters": {"brief": {"format": "%(levelname)-8s: %(name)-15s: %(message)s"},
                     "full": {"format": "%(asctime)s %(name)-15s %(levelname)-8s %(message)s"}
                     },
      "handlers": {"console": {
                        "class": "logging.StreamHandler",
                        "formatter": "brief",
                        "level": "INFO",
                        "stream": "ext://sys.stdout"},
                   "console_priority": {
                        "class": "logging.StreamHandler",
                        "formatter": "full",
                        "level": "ERROR",
                        "stream": "ext://sys.stderr"}
                   },
      "root": {"level": "DEBUG", "handlers": ["console", "console_priority"]}}

If that dictionary is stored in a file called ‘conf.json’, it can be
loaded and called with code like this:

     >>> import json, logging.config
     >>> with open('conf.json') as f:
             conf = json.load(f)
     >>> logging.config.dictConfig(conf)
     >>> logging.info("Transaction completed normally")
     INFO    : root           : Transaction completed normally
     >>> logging.critical("Abnormal termination")
     2011-02-17 11:14:36,694 root            CRITICAL Abnormal termination

See also
........

PEP 391(1) - Dictionary Based Configuration for Logging

     PEP written by Vinay Sajip.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0391


File: python.info,  Node: PEP 3148 The concurrent futures module,  Next: PEP 3147 PYC Repository Directories,  Prev: PEP 391 Dictionary Based Configuration for Logging,  Up: What's New In Python 3 2

1.5.4 PEP 3148: The ‘concurrent.futures’ module
-----------------------------------------------

Code for creating and managing concurrency is being collected in a new
top-level namespace, `concurrent'.  Its first member is a `futures'
package which provides a uniform high-level interface for managing
threads and processes.

The design for *note concurrent.futures: 22. was inspired by the
`java.util.concurrent' package.  In that model, a running call and its
result are represented by a *note Future: 76f. object that abstracts
features common to threads, processes, and remote procedure calls.  That
object supports status checks (running or done), timeouts,
cancellations, adding callbacks, and access to results or exceptions.

The primary offering of the new module is a pair of executor classes for
launching and managing calls.  The goal of the executors is to make it
easier to use existing tools for making parallel calls.  They save the
effort needed to setup a pool of resources, launch the calls, create a
results queue, add time-out handling, and limit the total number of
threads, processes, or remote procedure calls.

Ideally, each application should share a single executor across multiple
components so that process and thread limits can be centrally managed.
This solves the design challenge that arises when each component has its
own competing strategy for resource management.

Both classes share a common interface with three methods: *note
submit(): 770. for scheduling a callable and returning a *note Future:
76f. object; *note map(): 268. for scheduling many asynchronous calls at
a time, and *note shutdown(): 771. for freeing resources.  The class is
a *note context manager: 165. and can be used in a *note with: 29d.
statement to assure that resources are automatically released when
currently pending futures are done executing.

A simple of example of *note ThreadPoolExecutor: 26a. is a launch of
four parallel threads for copying files:

     import concurrent.futures, shutil
     with concurrent.futures.ThreadPoolExecutor(max_workers=4) as e:
         e.submit(shutil.copy, 'src1.txt', 'dest1.txt')
         e.submit(shutil.copy, 'src2.txt', 'dest2.txt')
         e.submit(shutil.copy, 'src3.txt', 'dest3.txt')
         e.submit(shutil.copy, 'src3.txt', 'dest4.txt')

See also
........

PEP 3148(1) - Futures – Execute Computations Asynchronously

     PEP written by Brian Quinlan.

*note Code for Threaded Parallel URL reads: 772, an example using
threads to fetch multiple web pages in parallel.

*note Code for computing prime numbers in parallel: 773, an example
demonstrating *note ProcessPoolExecutor: 269.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3148

