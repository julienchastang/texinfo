This is python.info, produced by makeinfo version 6.0 from python.texi.

     Python 3.6.0a0, May 06, 2016

     Georg Brandl

     Copyright © 2001-2016, Python Software Foundation

INFO-DIR-SECTION Documentation tools
START-INFO-DIR-ENTRY
* Python: (python.info). The Python Programming Language
END-INFO-DIR-ENTRY


   Generated by Sphinx 1.4.1.


File: python.info,  Node: Set Objects,  Prev: Dictionary Objects,  Up: Container Objects

7.8.4.2 Set Objects
...................

This section details the public API for *note set: 7be. and *note
frozenset: 84c. objects.  Any functionality not listed below is best
accessed using the either the abstract object protocol (including *note
PyObject_CallMethod(): 34bc, *note PyObject_RichCompareBool(): 3362,
*note PyObject_Hash(): 34be, *note PyObject_Repr(): 585, *note
PyObject_IsTrue(): 34bf, *note PyObject_Print(): 34ab, and *note
PyObject_GetIter(): 34c6.) or the abstract number protocol (including
*note PyNumber_And(): 34d9, *note PyNumber_Subtract(): 34cc, *note
PyNumber_Or(): 34db, *note PyNumber_Xor(): 34da, *note
PyNumber_InPlaceAnd(): 34e5, *note PyNumber_InPlaceSubtract(): 34dd,
*note PyNumber_InPlaceOr(): 34e7, and *note PyNumber_InPlaceXor():
34e6.).

 -- C Type: PySetObject

     This subtype of *note PyObject: 9f5. is used to hold the internal
     data for both *note set: 7be. and *note frozenset: 84c. objects.
     It is like a *note PyDictObject: 3665. in that it is a fixed size
     for small sets (much like tuple storage) and will point to a
     separate, variable sized block of memory for medium and large sized
     sets (much like list storage).  None of the fields of this
     structure should be considered public and are subject to change.
     All access should be done through the documented API rather than by
     manipulating the values in the structure.

 -- C Variable: PyTypeObject PySet_Type

     This is an instance of *note PyTypeObject: 3bc. representing the
     Python *note set: 7be. type.

 -- C Variable: PyTypeObject PyFrozenSet_Type

     This is an instance of *note PyTypeObject: 3bc. representing the
     Python *note frozenset: 84c. type.

The following type check macros work on pointers to any Python object.
Likewise, the constructor functions work with any iterable Python
object.

 -- C Function: int PySet_Check (PyObject *p)

     Return true if `p' is a *note set: 7be. object or an instance of a
     subtype.

 -- C Function: int PyFrozenSet_Check (PyObject *p)

     Return true if `p' is a *note frozenset: 84c. object or an instance
     of a subtype.

 -- C Function: int PyAnySet_Check (PyObject *p)

     Return true if `p' is a *note set: 7be. object, a *note frozenset:
     84c. object, or an instance of a subtype.

 -- C Function: int PyAnySet_CheckExact (PyObject *p)

     Return true if `p' is a *note set: 7be. object or a *note
     frozenset: 84c. object but not an instance of a subtype.

 -- C Function: int PyFrozenSet_CheckExact (PyObject *p)

     Return true if `p' is a *note frozenset: 84c. object but not an
     instance of a subtype.

 -- C Function: PyObject* PySet_New (PyObject *iterable)
     `Return value: New reference.'  Return a new *note set: 7be.
     containing objects returned by the `iterable'.  The `iterable' may
     be `NULL' to create a new empty set.  Return the new set on success
     or `NULL' on failure.  Raise *note TypeError: 562. if `iterable' is
     not actually iterable.  The constructor is also useful for copying
     a set (‘c=set(s)’).

 -- C Function: PyObject* PyFrozenSet_New (PyObject *iterable)
     `Return value: New reference.'  Return a new *note frozenset: 84c.
     containing objects returned by the `iterable'.  The `iterable' may
     be `NULL' to create a new empty frozenset.  Return the new set on
     success or `NULL' on failure.  Raise *note TypeError: 562. if
     `iterable' is not actually iterable.

The following functions and macros are available for instances of *note
set: 7be. or *note frozenset: 84c. or instances of their subtypes.

 -- C Function: Py_ssize_t PySet_Size (PyObject *anyset)

     Return the length of a *note set: 7be. or *note frozenset: 84c.
     object.  Equivalent to ‘len(anyset)’.  Raises a ‘PyExc_SystemError’
     if `anyset' is not a *note set: 7be, *note frozenset: 84c, or an
     instance of a subtype.

 -- C Function: Py_ssize_t PySet_GET_SIZE (PyObject *anyset)

     Macro form of *note PySet_Size(): a2c. without error checking.

 -- C Function: int PySet_Contains (PyObject *anyset, PyObject *key)

     Return 1 if found, 0 if not found, and -1 if an error is
     encountered.  Unlike the Python *note __contains__(): 99c. method,
     this function does not automatically convert unhashable sets into
     temporary frozensets.  Raise a *note TypeError: 562. if the `key'
     is unhashable.  Raise ‘PyExc_SystemError’ if `anyset' is not a
     *note set: 7be, *note frozenset: 84c, or an instance of a subtype.

 -- C Function: int PySet_Add (PyObject *set, PyObject *key)

     Add `key' to a *note set: 7be. instance.  Also works with *note
     frozenset: 84c. instances (like *note PyTuple_SetItem(): 3321. it
     can be used to fill-in the values of brand new frozensets before
     they are exposed to other code).  Return 0 on success or -1 on
     failure.  Raise a *note TypeError: 562. if the `key' is unhashable.
     Raise a *note MemoryError: 10b9. if there is no room to grow.
     Raise a *note SystemError: 1a0. if `set' is not an instance of
     *note set: 7be. or its subtype.

The following functions are available for instances of *note set: 7be.
or its subtypes but not for instances of *note frozenset: 84c. or its
subtypes.

 -- C Function: int PySet_Discard (PyObject *set, PyObject *key)

     Return 1 if found and removed, 0 if not found (no action taken),
     and -1 if an error is encountered.  Does not raise *note KeyError:
     1a7. for missing keys.  Raise a *note TypeError: 562. if the `key'
     is unhashable.  Unlike the Python *note discard(): 1082. method,
     this function does not automatically convert unhashable sets into
     temporary frozensets.  Raise ‘PyExc_SystemError’ if `set' is not an
     instance of *note set: 7be. or its subtype.

 -- C Function: PyObject* PySet_Pop (PyObject *set)
     `Return value: New reference.'  Return a new reference to an
     arbitrary object in the `set', and removes the object from the
     `set'.  Return `NULL' on failure.  Raise *note KeyError: 1a7. if
     the set is empty.  Raise a *note SystemError: 1a0. if `set' is not
     an instance of *note set: 7be. or its subtype.

 -- C Function: int PySet_Clear (PyObject *set)

     Empty an existing set of all elements.

 -- C Function: int PySet_ClearFreeList ()

     Clear the free list.  Return the total number of freed items.

     New in version 3.3.


File: python.info,  Node: Function Objects<2>,  Next: Other Objects,  Prev: Container Objects,  Up: Concrete Objects Layer

7.8.5 Function Objects
----------------------

* Menu:

* Function Objects: Function Objects<3>. 
* Instance Method Objects:: 
* Method Objects: Method Objects<2>. 
* Cell Objects:: 
* Code Objects: Code Objects<2>. 


File: python.info,  Node: Function Objects<3>,  Next: Instance Method Objects,  Up: Function Objects<2>

7.8.5.1 Function Objects
........................

There are a few functions specific to Python functions.

 -- C Type: PyFunctionObject

     The C structure used for functions.

 -- C Variable: PyTypeObject PyFunction_Type

     This is an instance of *note PyTypeObject: 3bc. and represents the
     Python function type.  It is exposed to Python programmers as
     ‘types.FunctionType’.

 -- C Function: int PyFunction_Check (PyObject *o)

     Return true if `o' is a function object (has type *note
     PyFunction_Type: 3690.).  The parameter must not be `NULL'.

 -- C Function: PyObject* PyFunction_New (PyObject *code,
          PyObject *globals)
     `Return value: New reference.'  Return a new function object
     associated with the code object `code'.  `globals' must be a
     dictionary with the global variables accessible to the function.

     The function’s docstring, name and `__module__' are retrieved from
     the code object, the argument defaults and closure are set to
     `NULL'.

 -- C Function: PyObject* PyFunction_NewWithQualName (PyObject *code,
          PyObject *globals, PyObject *qualname)
     `Return value: New reference.'  As *note PyFunction_New(): 3692,
     but also allows setting the function object’s ‘__qualname__’
     attribute.  `qualname' should be a unicode object or NULL; if NULL,
     the ‘__qualname__’ attribute is set to the same value as its
     ‘__name__’ attribute.

     New in version 3.3.

 -- C Function: PyObject* PyFunction_GetCode (PyObject *op)
     `Return value: Borrowed reference.'  Return the code object
     associated with the function object `op'.

 -- C Function: PyObject* PyFunction_GetGlobals (PyObject *op)
     `Return value: Borrowed reference.'  Return the globals dictionary
     associated with the function object `op'.

 -- C Function: PyObject* PyFunction_GetModule (PyObject *op)
     `Return value: Borrowed reference.'  Return the `__module__'
     attribute of the function object `op'.  This is normally a string
     containing the module name, but can be set to any other object by
     Python code.

 -- C Function: PyObject* PyFunction_GetDefaults (PyObject *op)
     `Return value: Borrowed reference.'  Return the argument default
     values of the function object `op'.  This can be a tuple of
     arguments or `NULL'.

 -- C Function: int PyFunction_SetDefaults (PyObject *op,
          PyObject *defaults)

     Set the argument default values for the function object `op'.
     `defaults' must be `Py_None' or a tuple.

     Raises *note SystemError: 1a0. and returns ‘-1’ on failure.

 -- C Function: PyObject* PyFunction_GetClosure (PyObject *op)
     `Return value: Borrowed reference.'  Return the closure associated
     with the function object `op'.  This can be `NULL' or a tuple of
     cell objects.

 -- C Function: int PyFunction_SetClosure (PyObject *op,
          PyObject *closure)

     Set the closure associated with the function object `op'.
     `closure' must be `Py_None' or a tuple of cell objects.

     Raises *note SystemError: 1a0. and returns ‘-1’ on failure.

 -- C Function: PyObject *PyFunction_GetAnnotations (PyObject *op)

     Return the annotations of the function object `op'.  This can be a
     mutable dictionary or `NULL'.

 -- C Function: int PyFunction_SetAnnotations (PyObject *op,
          PyObject *annotations)

     Set the annotations for the function object `op'.  `annotations'
     must be a dictionary or `Py_None'.

     Raises *note SystemError: 1a0. and returns ‘-1’ on failure.


File: python.info,  Node: Instance Method Objects,  Next: Method Objects<2>,  Prev: Function Objects<3>,  Up: Function Objects<2>

7.8.5.2 Instance Method Objects
...............................

An instance method is a wrapper for a *note PyCFunction: a58. and the
new way to bind a *note PyCFunction: a58. to a class object.  It
replaces the former call ‘PyMethod_New(func, NULL, class)’.

 -- C Variable: PyTypeObject PyInstanceMethod_Type

     This instance of *note PyTypeObject: 3bc. represents the Python
     instance method type.  It is not exposed to Python programs.

 -- C Function: int PyInstanceMethod_Check (PyObject *o)

     Return true if `o' is an instance method object (has type *note
     PyInstanceMethod_Type: 36a0.).  The parameter must not be `NULL'.

 -- C Function: PyObject* PyInstanceMethod_New (PyObject *func)

     Return a new instance method object, with `func' being any callable
     object `func' is the function that will be called when the instance
     method is called.

 -- C Function: PyObject* PyInstanceMethod_Function (PyObject *im)

     Return the function object associated with the instance method
     `im'.

 -- C Function: PyObject* PyInstanceMethod_GET_FUNCTION (PyObject *im)

     Macro version of *note PyInstanceMethod_Function(): 36a3. which
     avoids error checking.


File: python.info,  Node: Method Objects<2>,  Next: Cell Objects,  Prev: Instance Method Objects,  Up: Function Objects<2>

7.8.5.3 Method Objects
......................

Methods are bound function objects.  Methods are always bound to an
instance of a user-defined class.  Unbound methods (methods bound to a
class object) are no longer available.

 -- C Variable: PyTypeObject PyMethod_Type

     This instance of *note PyTypeObject: 3bc. represents the Python
     method type.  This is exposed to Python programs as
     ‘types.MethodType’.

 -- C Function: int PyMethod_Check (PyObject *o)

     Return true if `o' is a method object (has type *note
     PyMethod_Type: 36a7.).  The parameter must not be `NULL'.

 -- C Function: PyObject* PyMethod_New (PyObject *func, PyObject *self)
     `Return value: New reference.'  Return a new method object, with
     `func' being any callable object and `self' the instance the method
     should be bound.  `func' is the function that will be called when
     the method is called.  `self' must not be `NULL'.

 -- C Function: PyObject* PyMethod_Function (PyObject *meth)
     `Return value: Borrowed reference.'  Return the function object
     associated with the method `meth'.

 -- C Function: PyObject* PyMethod_GET_FUNCTION (PyObject *meth)
     `Return value: Borrowed reference.'  Macro version of *note
     PyMethod_Function(): 36aa. which avoids error checking.

 -- C Function: PyObject* PyMethod_Self (PyObject *meth)
     `Return value: Borrowed reference.'  Return the instance associated
     with the method `meth'.

 -- C Function: PyObject* PyMethod_GET_SELF (PyObject *meth)
     `Return value: Borrowed reference.'  Macro version of *note
     PyMethod_Self(): 36ac. which avoids error checking.

 -- C Function: int PyMethod_ClearFreeList ()

     Clear the free list.  Return the total number of freed items.


File: python.info,  Node: Cell Objects,  Next: Code Objects<2>,  Prev: Method Objects<2>,  Up: Function Objects<2>

7.8.5.4 Cell Objects
....................

"Cell" objects are used to implement variables referenced by multiple
scopes.  For each such variable, a cell object is created to store the
value; the local variables of each stack frame that references the value
contains a reference to the cells from outer scopes which also use that
variable.  When the value is accessed, the value contained in the cell
is used instead of the cell object itself.  This de-referencing of the
cell object requires support from the generated byte-code; these are not
automatically de-referenced when accessed.  Cell objects are not likely
to be useful elsewhere.

 -- C Type: PyCellObject

     The C structure used for cell objects.

 -- C Variable: PyTypeObject PyCell_Type

     The type object corresponding to cell objects.

 -- C Function: int PyCell_Check (ob)

     Return true if `ob' is a cell object; `ob' must not be `NULL'.

 -- C Function: PyObject* PyCell_New (PyObject *ob)
     `Return value: New reference.'  Create and return a new cell object
     containing the value `ob'.  The parameter may be `NULL'.

 -- C Function: PyObject* PyCell_Get (PyObject *cell)
     `Return value: New reference.'  Return the contents of the cell
     `cell'.

 -- C Function: PyObject* PyCell_GET (PyObject *cell)
     `Return value: Borrowed reference.'  Return the contents of the
     cell `cell', but without checking that `cell' is non-`NULL' and a
     cell object.

 -- C Function: int PyCell_Set (PyObject *cell, PyObject *value)

     Set the contents of the cell object `cell' to `value'.  This
     releases the reference to any current content of the cell.  `value'
     may be `NULL'. `cell' must be non-`NULL'; if it is not a cell
     object, ‘-1’ will be returned.  On success, ‘0’ will be returned.

 -- C Function: void PyCell_SET (PyObject *cell, PyObject *value)

     Sets the value of the cell object `cell' to `value'.  No reference
     counts are adjusted, and no checks are made for safety; `cell' must
     be non-`NULL' and must be a cell object.


File: python.info,  Node: Code Objects<2>,  Prev: Cell Objects,  Up: Function Objects<2>

7.8.5.5 Code Objects
....................

Code objects are a low-level detail of the CPython implementation.  Each
one represents a chunk of executable code that hasn’t yet been bound
into a function.

 -- C Type: PyCodeObject

     The C structure of the objects used to describe code objects.  The
     fields of this type are subject to change at any time.

 -- C Variable: PyTypeObject PyCode_Type

     This is an instance of *note PyTypeObject: 3bc. representing the
     Python *note code: 1b. type.

 -- C Function: int PyCode_Check (PyObject *co)

     Return true if `co' is a *note code: 1b. object.

 -- C Function: int PyCode_GetNumFree (PyCodeObject *co)

     Return the number of free variables in `co'.

 -- C Function: PyCodeObject* PyCode_New (int argcount,
          int kwonlyargcount, int nlocals, int stacksize, int flags,
          PyObject *code, PyObject *consts, PyObject *names,
          PyObject *varnames, PyObject *freevars, PyObject *cellvars,
          PyObject *filename, PyObject *name, int firstlineno,
          PyObject *lnotab)

     Return a new code object.  If you need a dummy code object to
     create a frame, use *note PyCode_NewEmpty(): 963. instead.  Calling
     *note PyCode_New(): 964. directly can bind you to a precise Python
     version since the definition of the bytecode changes often.

 -- C Function: PyCodeObject* PyCode_NewEmpty (const char *filename,
          const char *funcname, int firstlineno)

     Return a new empty code object with the specified filename,
     function name, and first line number.  It is illegal to *note
     exec(): 8ac. or *note eval(): 7e8. the resulting code object.


File: python.info,  Node: Other Objects,  Prev: Function Objects<2>,  Up: Concrete Objects Layer

7.8.6 Other Objects
-------------------

* Menu:

* File Objects:: 
* Module Objects:: 
* Iterator Objects:: 
* Descriptor Objects:: 
* Slice Objects:: 
* MemoryView objects:: 
* Weak Reference Objects: Weak Reference Objects<2>. 
* Capsules: Capsules<2>. 
* Generator Objects:: 
* Coroutine Objects: Coroutine Objects<2>. 
* DateTime Objects: DateTime Objects<2>. 


File: python.info,  Node: File Objects,  Next: Module Objects,  Up: Other Objects

7.8.6.1 File Objects
....................

These APIs are a minimal emulation of the Python 2 C API for built-in
file objects, which used to rely on the buffered I/O (‘FILE*’) support
from the C standard library.  In Python 3, files and streams use the new
*note io: 9f. module, which defines several layers over the low-level
unbuffered I/O of the operating system.  The functions described below
are convenience C wrappers over these new APIs, and meant mostly for
internal error reporting in the interpreter; third-party code is advised
to access the *note io: 9f. APIs instead.

 -- C Function: PyFile_FromFd (int fd, const char *name, const
          char *mode, int buffering, const char *encoding, const
          char *errors, const char *newline, int closefd)

     Create a Python file object from the file descriptor of an already
     opened file `fd'.  The arguments `name', `encoding', `errors' and
     `newline' can be `NULL' to use the defaults; `buffering' can be
     `-1' to use the default.  `name' is ignored and kept for backward
     compatibility.  Return `NULL' on failure.  For a more comprehensive
     description of the arguments, please refer to the *note io.open():
     1e9. function documentation.

          Warning: Since Python streams have their own buffering layer,
          mixing them with OS-level file descriptors can produce various
          issues (such as unexpected ordering of data).

     Changed in version 3.2: Ignore `name' attribute.

 -- C Function: int PyObject_AsFileDescriptor (PyObject *p)

     Return the file descriptor associated with `p' as an ‘int’.  If the
     object is an integer, its value is returned.  If not, the object’s
     *note fileno(): 187a. method is called if it exists; the method
     must return an integer, which is returned as the file descriptor
     value.  Sets an exception and returns ‘-1’ on failure.

 -- C Function: PyObject* PyFile_GetLine (PyObject *p, int n)
     `Return value: New reference.'

     Equivalent to ‘p.readline([n])’, this function reads one line from
     the object `p'.  `p' may be a file object or any object with a
     *note readline(): 10b8. method.  If `n' is ‘0’, exactly one line is
     read, regardless of the length of the line.  If `n' is greater than
     ‘0’, no more than `n' bytes will be read from the file; a partial
     line can be returned.  In both cases, an empty string is returned
     if the end of the file is reached immediately.  If `n' is less than
     ‘0’, however, one line is read regardless of length, but *note
     EOFError: 8d8. is raised if the end of the file is reached
     immediately.

 -- C Function: int PyFile_WriteObject (PyObject *obj, PyObject *p,
          int flags)

     Write object `obj' to file object `p'.  The only supported flag for
     `flags' is ‘Py_PRINT_RAW’; if given, the *note str(): 25a. of the
     object is written instead of the *note repr(): 3bb.  Return ‘0’ on
     success or ‘-1’ on failure; the appropriate exception will be set.

 -- C Function: int PyFile_WriteString (const char *s, PyObject *p)

     Write string `s' to file object `p'.  Return ‘0’ on success or ‘-1’
     on failure; the appropriate exception will be set.


File: python.info,  Node: Module Objects,  Next: Iterator Objects,  Prev: File Objects,  Up: Other Objects

7.8.6.2 Module Objects
......................

 -- C Variable: PyTypeObject PyModule_Type

     This instance of *note PyTypeObject: 3bc. represents the Python
     module type.  This is exposed to Python programs as
     ‘types.ModuleType’.

 -- C Function: int PyModule_Check (PyObject *p)

     Return true if `p' is a module object, or a subtype of a module
     object.

 -- C Function: int PyModule_CheckExact (PyObject *p)

     Return true if `p' is a module object, but not a subtype of *note
     PyModule_Type: 36cd.

 -- C Function: PyObject* PyModule_NewObject (PyObject *name)

     Return a new module object with the *note __name__: 8d3. attribute
     set to `name'.  The module’s *note __name__: 8d3, ‘__doc__’, *note
     __package__: 56b, and *note __loader__: 56c. attributes are filled
     in (all but *note __name__: 8d3. are set to ‘None’); the caller is
     responsible for providing a *note __file__: df0. attribute.

     New in version 3.3.

     Changed in version 3.4: *note __package__: 56b. and *note
     __loader__: 56c. are set to ‘None’.

 -- C Function: PyObject* PyModule_New (const char *name)
     `Return value: New reference.'  Similar to ‘PyImport_NewObject()’,
     but the name is a UTF-8 encoded string instead of a Unicode object.

 -- C Function: PyObject* PyModule_GetDict (PyObject *module)
     `Return value: Borrowed reference.'

     Return the dictionary object that implements `module'’s namespace;
     this object is the same as the ‘__dict__’ attribute of the module
     object.  This function never fails.  It is recommended extensions
     use other ‘PyModule_*()’ and ‘PyObject_*()’ functions rather than
     directly manipulate a module’s ‘__dict__’.

 -- C Function: PyObject* PyModule_GetNameObject (PyObject *module)

     Return `module'’s *note __name__: 8d3. value.  If the module does
     not provide one, or if it is not a string, *note SystemError: 1a0.
     is raised and `NULL' is returned.

     New in version 3.3.

 -- C Function: char* PyModule_GetName (PyObject *module)

     Similar to *note PyModule_GetNameObject(): 36d3. but return the
     name encoded to ‘'utf-8'’.

 -- C Function: void* PyModule_GetState (PyObject *module)

     Return the "state" of the module, that is, a pointer to the block
     of memory allocated at module creation time, or `NULL'. See *note
     PyModuleDef.m_size: 36d6.

 -- C Function: PyModuleDef* PyModule_GetDef (PyObject *module)

     Return a pointer to the *note PyModuleDef: 3344. struct from which
     the module was created, or `NULL' if the module wasn’t created from
     a definition.

 -- C Function: PyObject* PyModule_GetFilenameObject (PyObject *module)

     Return the name of the file from which `module' was loaded using
     `module'’s *note __file__: df0. attribute.  If this is not defined,
     or if it is not a unicode string, raise *note SystemError: 1a0. and
     return `NULL'; otherwise return a reference to a Unicode object.

     New in version 3.2.

 -- C Function: char* PyModule_GetFilename (PyObject *module)

     Similar to *note PyModule_GetFilenameObject(): 36d8. but return the
     filename encoded to ’utf-8’.

     Deprecated since version 3.2: *note PyModule_GetFilename(): 36d9.
     raises ‘UnicodeEncodeError’ on unencodable filenames, use *note
     PyModule_GetFilenameObject(): 36d8. instead.

* Menu:

* Initializing C modules:: 
* Module lookup:: 


File: python.info,  Node: Initializing C modules,  Next: Module lookup,  Up: Module Objects

7.8.6.3 Initializing C modules
..............................

Modules objects are usually created from extension modules (shared
libraries which export an initialization function), or compiled-in
modules (where the initialization function is added using *note
PyImport_AppendInittab(): 3305.).  See *note Building C and C++
Extensions: 3308. or *note Extending Embedded Python: 338d. for details.

The initialization function can either pass pass a module definition
instance to *note PyModule_Create(): 3304, and return the resulting
module object, or request "multi-phase initialization" by returning the
definition struct itself.

 -- C Type: PyModuleDef

     The module definition struct, which holds all information needed to
     create a module object.  There is usually only one statically
     initialized variable of this type for each module.

      -- C Member: PyModuleDef_Base m_base

          Always initialize this member to ‘PyModuleDef_HEAD_INIT’.

      -- C Member: char* m_name

          Name for the new module.

      -- C Member: char* m_doc

          Docstring for the module; usually a docstring variable created
          with ‘PyDoc_STRVAR()’ is used.

      -- C Member: Py_ssize_t m_size

          Module state may be kept in a per-module memory area that can
          be retrieved with *note PyModule_GetState(): 36d5, rather than
          in static globals.  This makes modules safe for use in
          multiple sub-interpreters.

          This memory area is allocated based on `m_size' on module
          creation, and freed when the module object is deallocated,
          after the ‘m_free’ function has been called, if present.

          Setting ‘m_size’ to ‘-1’ means that the module does not
          support sub-interpreters, because it has global state.

          Setting it to a non-negative value means that the module can
          be re-initialized and specifies the additional amount of
          memory it requires for its state.  Non-negative ‘m_size’ is
          required for multi-phase initialization.

          See PEP 3121(1) for more details.

      -- C Member: PyMethodDef* m_methods

          A pointer to a table of module-level functions, described by
          *note PyMethodDef: a9d. values.  Can be `NULL' if no functions
          are present.

      -- C Member: PyModuleDef_Slot* m_slots

          An array of slot definitions for multi-phase initialization,
          terminated by a ‘{0, NULL}’ entry.  When using single-phase
          initialization, `m_slots' must be `NULL'.

          Changed in version 3.5: Prior to version 3.5, this member was
          always set to `NULL', and was defined as:

                -- C Member: inquiry m_reload

      -- C Member: traverseproc m_traverse

          A traversal function to call during GC traversal of the module
          object, or `NULL' if not needed.

      -- C Member: inquiry m_clear

          A clear function to call during GC clearing of the module
          object, or `NULL' if not needed.

      -- C Member: freefunc m_free

          A function to call during deallocation of the module object,
          or `NULL' if not needed.

* Menu:

* Single-phase initialization:: 
* Multi-phase initialization:: 
* Low-level module creation functions:: 
* Support functions:: 

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3121


File: python.info,  Node: Single-phase initialization,  Next: Multi-phase initialization,  Up: Initializing C modules

7.8.6.4 Single-phase initialization
...................................

The module initialization function may create and return the module
object directly.  This is referred to as "single-phase initialization",
and uses one of the following two module creation functions:

 -- C Function: PyObject* PyModule_Create (PyModuleDef *def)

     Create a new module object, given the definition in `def'.  This
     behaves like *note PyModule_Create2(): 36e5. with
     `module_api_version' set to ‘PYTHON_API_VERSION’.

 -- C Function: PyObject* PyModule_Create2 (PyModuleDef *def,
          int module_api_version)

     Create a new module object, given the definition in `def', assuming
     the API version `module_api_version'.  If that version does not
     match the version of the running interpreter, a *note
     RuntimeWarning: 10cd. is emitted.

          Note: Most uses of this function should be using *note
          PyModule_Create(): 3304. instead; only use this if you are
          sure you need it.

Before it is returned from in the initialization function, the resulting
module object is typically populated using functions like *note
PyModule_AddObject(): 36e6.


File: python.info,  Node: Multi-phase initialization,  Next: Low-level module creation functions,  Prev: Single-phase initialization,  Up: Initializing C modules

7.8.6.5 Multi-phase initialization
..................................

An alternate way to specify extensions is to request "multi-phase
initialization".  Extension modules created this way behave more like
Python modules: the initialization is split between the `creation
phase', when the module object is created, and the `execution phase',
when it is populated.  The distinction is similar to the *note
__new__(): 484. and *note __init__(): 9d5. methods of classes.

Unlike modules created using single-phase initialization, these modules
are not singletons: if the `sys.modules' entry is removed and the module
is re-imported, a new module object is created, and the old module is
subject to normal garbage collection – as with Python modules.  By
default, multiple modules created from the same definition should be
independent: changes to one should not affect the others.  This means
that all state should be specific to the module object (using e.g.
using *note PyModule_GetState(): 36d5.), or its contents (such as the
module’s ‘__dict__’ or individual classes created with *note
PyType_FromSpec(): 3566.).

All modules created using multi-phase initialization are expected to
support *note sub-interpreters: 36e8.  Making sure multiple modules are
independent is typically enough to achieve this.

To request multi-phase initialization, the initialization function
(PyInit_modulename) returns a *note PyModuleDef: 3344. instance with
non-empty *note m_slots: 36df.  Before it is returned, the ‘PyModuleDef’
instance must be initialized with the following function:

 -- C Function: PyObject* PyModuleDef_Init (PyModuleDef *def)

     Ensures a module definition is a properly initialized Python object
     that correctly reports its type and reference count.

     Returns `def' cast to ‘PyObject*’, or `NULL' if an error occurred.

     New in version 3.5.

The `m_slots' member of the module definition must point to an array of
‘PyModuleDef_Slot’ structures:

 -- C Type: PyModuleDef_Slot

      -- C Member: int slot

          A slot ID, chosen from the available values explained below.

      -- C Member: void* value

          Value of the slot, whose meaning depends on the slot ID.

     New in version 3.5.

The `m_slots' array must be terminated by a slot with id 0.

The available slot types are:

 -- C Variable: Py_mod_create

     Specifies a function that is called to create the module object
     itself.  The `value' pointer of this slot must point to a function
     of the signature:

      -- C Function: PyObject* create_module (PyObject *spec,
               PyModuleDef *def)

     The function receives a *note ModuleSpec: e8e. instance, as defined
     in PEP 451(1), and the module definition.  It should return a new
     module object, or set an error and return `NULL'.

     This function should be kept minimal.  In particular, it should not
     call arbitrary Python code, as trying to import the same module
     again may result in an infinite loop.

     Multiple ‘Py_mod_create’ slots may not be specified in one module
     definition.

     If ‘Py_mod_create’ is not specified, the import machinery will
     create a normal module object using *note PyModule_New(): 36d1.
     The name is taken from `spec', not the definition, to allow
     extension modules to dynamically adjust to their place in the
     module hierarchy and be imported under different names through
     symlinks, all while sharing a single module definition.

     There is no requirement for the returned object to be an instance
     of *note PyModule_Type: 36cd.  Any type can be used, as long as it
     supports setting and getting import-related attributes.  However,
     only ‘PyModule_Type’ instances may be returned if the ‘PyModuleDef’
     has non-`NULL' ‘m_methods’, ‘m_traverse’, ‘m_clear’, ‘m_free’;
     non-zero ‘m_size’; or slots other than ‘Py_mod_create’.

 -- C Variable: Py_mod_exec

     Specifies a function that is called to `execute' the module.  This
     is equivalent to executing the code of a Python module: typically,
     this function adds classes and constants to the module.  The
     signature of the function is:

      -- C Function: int exec_module (PyObject* module)

     If multiple ‘Py_mod_exec’ slots are specified, they are processed
     in the order they appear in the `m_slots' array.

See PEP 489(2) for more details on multi-phase initialization.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0451

   (2) https://www.python.org/dev/peps/pep-0489


File: python.info,  Node: Low-level module creation functions,  Next: Support functions,  Prev: Multi-phase initialization,  Up: Initializing C modules

7.8.6.6 Low-level module creation functions
...........................................

The following functions are called under the hood when using multi-phase
initialization.  They can be used directly, for example when creating
module objects dynamically.  Note that both ‘PyModule_FromDefAndSpec’
and ‘PyModule_ExecDef’ must be called to fully initialize a module.

 -- C Function: PyObject * PyModule_FromDefAndSpec (PyModuleDef *def,
          PyObject *spec)

     Create a new module object, given the definition in `module' and
     the ModuleSpec `spec'.  This behaves like *note
     PyModule_FromDefAndSpec2(): 387. with `module_api_version' set to
     ‘PYTHON_API_VERSION’.

     New in version 3.5.

 -- C Function: PyObject * PyModule_FromDefAndSpec2 (PyModuleDef *def,
          PyObject *spec, int module_api_version)

     Create a new module object, given the definition in `module' and
     the ModuleSpec `spec', assuming the API version
     `module_api_version'.  If that version does not match the version
     of the running interpreter, a *note RuntimeWarning: 10cd. is
     emitted.

          Note: Most uses of this function should be using *note
          PyModule_FromDefAndSpec(): 386. instead; only use this if you
          are sure you need it.

     New in version 3.5.

 -- C Function: int PyModule_ExecDef (PyObject *module,
          PyModuleDef *def)

     Process any execution slots (*note Py_mod_exec: 36ef.) given in
     `def'.

     New in version 3.5.

 -- C Function: int PyModule_SetDocString (PyObject *module, const
          char *docstring)

     Set the docstring for `module' to `docstring'.  This function is
     called automatically when creating a module from ‘PyModuleDef’,
     using either ‘PyModule_Create’ or ‘PyModule_FromDefAndSpec’.

     New in version 3.5.

 -- C Function: int PyModule_AddFunctions (PyObject *module,
          PyMethodDef *functions)

     Add the functions from the `NULL' terminated `functions' array to
     `module'.  Refer to the *note PyMethodDef: a9d. documentation for
     details on individual entries (due to the lack of a shared module
     namespace, module level "functions" implemented in C typically
     receive the module as their first parameter, making them similar to
     instance methods on Python classes).  This function is called
     automatically when creating a module from ‘PyModuleDef’, using
     either ‘PyModule_Create’ or ‘PyModule_FromDefAndSpec’.

     New in version 3.5.


File: python.info,  Node: Support functions,  Prev: Low-level module creation functions,  Up: Initializing C modules

7.8.6.7 Support functions
.........................

The module initialization function (if using single phase
initialization) or a function called from a module execution slot (if
using multi-phase initialization), can use the following functions to
help initialize the module state:

 -- C Function: int PyModule_AddObject (PyObject *module, const
          char *name, PyObject *value)

     Add an object to `module' as `name'.  This is a convenience
     function which can be used from the module’s initialization
     function.  This steals a reference to `value'.  Return ‘-1’ on
     error, ‘0’ on success.

 -- C Function: int PyModule_AddIntConstant (PyObject *module, const
          char *name, long value)

     Add an integer constant to `module' as `name'.  This convenience
     function can be used from the module’s initialization function.
     Return ‘-1’ on error, ‘0’ on success.

 -- C Function: int PyModule_AddStringConstant (PyObject *module, const
          char *name, const char *value)

     Add a string constant to `module' as `name'.  This convenience
     function can be used from the module’s initialization function.
     The string `value' must be `NULL'-terminated.  Return ‘-1’ on
     error, ‘0’ on success.

 -- C Function: int PyModule_AddIntMacro (PyObject *module, macro)

     Add an int constant to `module'.  The name and the value are taken
     from `macro'.  For example ‘PyModule_AddIntMacro(module, AF_INET)’
     adds the int constant `AF_INET' with the value of `AF_INET' to
     `module'.  Return ‘-1’ on error, ‘0’ on success.

 -- C Function: int PyModule_AddStringMacro (PyObject *module, macro)

     Add a string constant to `module'.


File: python.info,  Node: Module lookup,  Prev: Initializing C modules,  Up: Module Objects

7.8.6.8 Module lookup
.....................

Single-phase initialization creates singleton modules that can be looked
up in the context of the current interpreter.  This allows the module
object to be retrieved later with only a reference to the module
definition.

These functions will not work on modules created using multi-phase
initialization, since multiple such modules can be created from a single
definition.

 -- C Function: PyObject* PyState_FindModule (PyModuleDef *def)

     Returns the module object that was created from `def' for the
     current interpreter.  This method requires that the module object
     has been attached to the interpreter state with *note
     PyState_AddModule(): 36fa. beforehand.  In case the corresponding
     module object is not found or has not been attached to the
     interpreter state yet, it returns `NULL'.

 -- C Function: int PyState_AddModule (PyObject *module,
          PyModuleDef *def)

     Attaches the module object passed to the function to the
     interpreter state.  This allows the module object to be accessible
     via *note PyState_FindModule(): 36f9.

     Only effective on modules created using single-phase
     initialization.

     New in version 3.3.

 -- C Function: int PyState_RemoveModule (PyModuleDef *def)

     Removes the module object created from `def' from the interpreter
     state.

     New in version 3.3.


File: python.info,  Node: Iterator Objects,  Next: Descriptor Objects,  Prev: Module Objects,  Up: Other Objects

7.8.6.9 Iterator Objects
........................

Python provides two general-purpose iterator objects.  The first, a
sequence iterator, works with an arbitrary sequence supporting the *note
__getitem__(): a84. method.  The second works with a callable object and
a sentinel value, calling the callable for each item in the sequence,
and ending the iteration when the sentinel value is returned.

 -- C Variable: PyTypeObject PySeqIter_Type

     Type object for iterator objects returned by *note PySeqIter_New():
     3700. and the one-argument form of the *note iter(): 99a. built-in
     function for built-in sequence types.

 -- C Function: int PySeqIter_Check (op)

     Return true if the type of `op' is *note PySeqIter_Type: 36ff.

 -- C Function: PyObject* PySeqIter_New (PyObject *seq)
     `Return value: New reference.'  Return an iterator that works with
     a general sequence object, `seq'.  The iteration ends when the
     sequence raises *note IndexError: afb. for the subscripting
     operation.

 -- C Variable: PyTypeObject PyCallIter_Type

     Type object for iterator objects returned by *note
     PyCallIter_New(): 3703. and the two-argument form of the *note
     iter(): 99a. built-in function.

 -- C Function: int PyCallIter_Check (op)

     Return true if the type of `op' is *note PyCallIter_Type: 3702.

 -- C Function: PyObject* PyCallIter_New (PyObject *callable,
          PyObject *sentinel)
     `Return value: New reference.'  Return a new iterator.  The first
     parameter, `callable', can be any Python callable object that can
     be called with no parameters; each call to it should return the
     next item in the iteration.  When `callable' returns a value equal
     to `sentinel', the iteration will be terminated.


File: python.info,  Node: Descriptor Objects,  Next: Slice Objects,  Prev: Iterator Objects,  Up: Other Objects

7.8.6.10 Descriptor Objects
...........................

"Descriptors" are objects that describe some attribute of an object.
They are found in the dictionary of type objects.

 -- C Variable: PyTypeObject PyProperty_Type

     The type object for the built-in descriptor types.

 -- C Function: PyObject* PyDescr_NewGetSet (PyTypeObject *type, struct
          PyGetSetDef *getset)
     `Return value: New reference.'

 -- C Function: PyObject* PyDescr_NewMember (PyTypeObject *type, struct
          PyMemberDef *meth)
     `Return value: New reference.'

 -- C Function: PyObject* PyDescr_NewMethod (PyTypeObject *type, struct
          PyMethodDef *meth)
     `Return value: New reference.'

 -- C Function: PyObject* PyDescr_NewWrapper (PyTypeObject *type, struct
          wrapperbase *wrapper, void *wrapped)
     `Return value: New reference.'

 -- C Function: PyObject* PyDescr_NewClassMethod (PyTypeObject *type,
          PyMethodDef *method)
     `Return value: New reference.'

 -- C Function: int PyDescr_IsData (PyObject *descr)

     Return true if the descriptor objects `descr' describes a data
     attribute, or false if it describes a method.  `descr' must be a
     descriptor object; there is no error checking.

 -- C Function: PyObject* PyWrapper_New (PyObject *, PyObject *)
     `Return value: New reference.'


File: python.info,  Node: Slice Objects,  Next: MemoryView objects,  Prev: Descriptor Objects,  Up: Other Objects

7.8.6.11 Slice Objects
......................

 -- C Variable: PyTypeObject PySlice_Type

     The type object for slice objects.  This is the same as *note
     slice: a85. in the Python layer.

 -- C Function: int PySlice_Check (PyObject *ob)

     Return true if `ob' is a slice object; `ob' must not be `NULL'.

 -- C Function: PyObject* PySlice_New (PyObject *start, PyObject *stop,
          PyObject *step)
     `Return value: New reference.'  Return a new slice object with the
     given values.  The `start', `stop', and `step' parameters are used
     as the values of the slice object attributes of the same names.
     Any of the values may be `NULL', in which case the ‘None’ will be
     used for the corresponding attribute.  Return `NULL' if the new
     object could not be allocated.

 -- C Function: int PySlice_GetIndices (PyObject *slice,
          Py_ssize_t length, Py_ssize_t *start, Py_ssize_t *stop,
          Py_ssize_t *step)

     Retrieve the start, stop and step indices from the slice object
     `slice', assuming a sequence of length `length'.  Treats indices
     greater than `length' as errors.

     Returns 0 on success and -1 on error with no exception set (unless
     one of the indices was not *note None: 19d. and failed to be
     converted to an integer, in which case -1 is returned with an
     exception set).

     You probably do not want to use this function.

     Changed in version 3.2: The parameter type for the `slice'
     parameter was ‘PySliceObject*’ before.

 -- C Function: int PySlice_GetIndicesEx (PyObject *slice,
          Py_ssize_t length, Py_ssize_t *start, Py_ssize_t *stop,
          Py_ssize_t *step, Py_ssize_t *slicelength)

     Usable replacement for *note PySlice_GetIndices(): 3716.  Retrieve
     the start, stop, and step indices from the slice object `slice'
     assuming a sequence of length `length', and store the length of the
     slice in `slicelength'.  Out of bounds indices are clipped in a
     manner consistent with the handling of normal slices.

     Returns 0 on success and -1 on error with exception set.

     Changed in version 3.2: The parameter type for the `slice'
     parameter was ‘PySliceObject*’ before.


File: python.info,  Node: MemoryView objects,  Next: Weak Reference Objects<2>,  Prev: Slice Objects,  Up: Other Objects

7.8.6.12 MemoryView objects
...........................

A *note memoryview: 1b7. object exposes the C level *note buffer
interface: ff5. as a Python object which can then be passed around like
any other object.

 -- C Function: PyObject *PyMemoryView_FromObject (PyObject *obj)

     Create a memoryview object from an object that provides the buffer
     interface.  If `obj' supports writable buffer exports, the
     memoryview object will be read/write, otherwise it may be either
     read-only or read/write at the discretion of the exporter.

 -- C Function: PyObject *PyMemoryView_FromMemory (char *mem,
          Py_ssize_t size, int flags)

     Create a memoryview object using `mem' as the underlying buffer.
     `flags' can be one of ‘PyBUF_READ’ or ‘PyBUF_WRITE’.

     New in version 3.3.

 -- C Function: PyObject *PyMemoryView_FromBuffer (Py_buffer *view)

     Create a memoryview object wrapping the given buffer structure
     `view'.  For simple byte buffers, *note PyMemoryView_FromMemory():
     705. is the preferred function.

 -- C Function: PyObject *PyMemoryView_GetContiguous (PyObject *obj,
          int buffertype, char order)

     Create a memoryview object to a *note contiguous: 1069. chunk of
     memory (in either ’C’ or ’F’ortran `order') from an object that
     defines the buffer interface.  If memory is contiguous, the
     memoryview object points to the original memory.  Otherwise, a copy
     is made and the memoryview points to a new bytes object.

 -- C Function: int PyMemoryView_Check (PyObject *obj)

     Return true if the object `obj' is a memoryview object.  It is not
     currently allowed to create subclasses of *note memoryview: 1b7.

 -- C Function: Py_buffer *PyMemoryView_GET_BUFFER (PyObject *mview)

     Return a pointer to the memoryview’s private copy of the exporter’s
     buffer.  `mview' `must' be a memoryview instance; this macro
     doesn’t check its type, you must do it yourself or you will risk
     crashes.

 -- C Function: Py_buffer *PyMemoryView_GET_BASE (PyObject *mview)

     Return either a pointer to the exporting object that the memoryview
     is based on or `NULL' if the memoryview has been created by one of
     the functions *note PyMemoryView_FromMemory(): 705. or *note
     PyMemoryView_FromBuffer(): 3522.  `mview' `must' be a memoryview
     instance.


File: python.info,  Node: Weak Reference Objects<2>,  Next: Capsules<2>,  Prev: MemoryView objects,  Up: Other Objects

7.8.6.13 Weak Reference Objects
...............................

Python supports `weak references' as first-class objects.  There are two
specific object types which directly implement weak references.  The
first is a simple reference object, and the second acts as a proxy for
the original object as much as it can.

 -- C Function: int PyWeakref_Check (ob)

     Return true if `ob' is either a reference or proxy object.

 -- C Function: int PyWeakref_CheckRef (ob)

     Return true if `ob' is a reference object.

 -- C Function: int PyWeakref_CheckProxy (ob)

     Return true if `ob' is a proxy object.

 -- C Function: PyObject* PyWeakref_NewRef (PyObject *ob,
          PyObject *callback)
     `Return value: New reference.'  Return a weak reference object for
     the object `ob'.  This will always return a new reference, but is
     not guaranteed to create a new object; an existing reference object
     may be returned.  The second parameter, `callback', can be a
     callable object that receives notification when `ob' is garbage
     collected; it should accept a single parameter, which will be the
     weak reference object itself.  `callback' may also be ‘None’ or
     `NULL'. If `ob' is not a weakly-referencable object, or if
     `callback' is not callable, ‘None’, or `NULL', this will return
     `NULL' and raise *note TypeError: 562.

 -- C Function: PyObject* PyWeakref_NewProxy (PyObject *ob,
          PyObject *callback)
     `Return value: New reference.'  Return a weak reference proxy
     object for the object `ob'.  This will always return a new
     reference, but is not guaranteed to create a new object; an
     existing proxy object may be returned.  The second parameter,
     `callback', can be a callable object that receives notification
     when `ob' is garbage collected; it should accept a single
     parameter, which will be the weak reference object itself.
     `callback' may also be ‘None’ or `NULL'. If `ob' is not a
     weakly-referencable object, or if `callback' is not callable,
     ‘None’, or `NULL', this will return `NULL' and raise *note
     TypeError: 562.

 -- C Function: PyObject* PyWeakref_GetObject (PyObject *ref)
     `Return value: Borrowed reference.'  Return the referenced object
     from a weak reference, `ref'.  If the referent is no longer live,
     returns ‘Py_None’.

          Note: This function returns a `borrowed reference' to the
          referenced object.  This means that you should always call
          *note Py_INCREF(): 32f8. on the object except if you know that
          it cannot be destroyed while you are still using it.

 -- C Function: PyObject* PyWeakref_GET_OBJECT (PyObject *ref)
     `Return value: Borrowed reference.'  Similar to *note
     PyWeakref_GetObject(): 3727, but implemented as a macro that does
     no error checking.


File: python.info,  Node: Capsules<2>,  Next: Generator Objects,  Prev: Weak Reference Objects<2>,  Up: Other Objects

7.8.6.14 Capsules
.................

Refer to *note Providing a C API for an Extension Module: 96c. for more
information on using these objects.

 -- C Type: PyCapsule

     This subtype of *note PyObject: 9f5. represents an opaque value,
     useful for C extension modules who need to pass an opaque value (as
     a ‘void*’ pointer) through Python code to other C code.  It is
     often used to make a C function pointer defined in one module
     available to other modules, so the regular import mechanism can be
     used to access C APIs defined in dynamically loaded modules.

 -- C Type: PyCapsule_Destructor

     The type of a destructor callback for a capsule.  Defined as:

          typedef void (*PyCapsule_Destructor)(PyObject *);

     See *note PyCapsule_New(): 332d. for the semantics of
     PyCapsule_Destructor callbacks.

 -- C Function: int PyCapsule_CheckExact (PyObject *p)

     Return true if its argument is a *note PyCapsule: 868.

 -- C Function: PyObject* PyCapsule_New (void *pointer, const
          char *name, PyCapsule_Destructor destructor)
     `Return value: New reference.'  Create a *note PyCapsule: 868.
     encapsulating the `pointer'.  The `pointer' argument may not be
     `NULL'.

     On failure, set an exception and return `NULL'.

     The `name' string may either be `NULL' or a pointer to a valid C
     string.  If non-`NULL', this string must outlive the capsule.
     (Though it is permitted to free it inside the `destructor'.)

     If the `destructor' argument is not `NULL', it will be called with
     the capsule as its argument when it is destroyed.

     If this capsule will be stored as an attribute of a module, the
     `name' should be specified as ‘modulename.attributename’.  This
     will enable other modules to import the capsule using *note
     PyCapsule_Import(): 332e.

 -- C Function: void* PyCapsule_GetPointer (PyObject *capsule, const
          char *name)

     Retrieve the `pointer' stored in the capsule.  On failure, set an
     exception and return `NULL'.

     The `name' parameter must compare exactly to the name stored in the
     capsule.  If the name stored in the capsule is `NULL', the `name'
     passed in must also be `NULL'. Python uses the C function
     ‘strcmp()’ to compare capsule names.

 -- C Function: PyCapsule_Destructor PyCapsule_GetDestructor
          (PyObject *capsule)

     Return the current destructor stored in the capsule.  On failure,
     set an exception and return `NULL'.

     It is legal for a capsule to have a `NULL' destructor.  This makes
     a `NULL' return code somewhat ambiguous; use *note
     PyCapsule_IsValid(): 96b. or *note PyErr_Occurred(): 32f9. to
     disambiguate.

 -- C Function: void* PyCapsule_GetContext (PyObject *capsule)

     Return the current context stored in the capsule.  On failure, set
     an exception and return `NULL'.

     It is legal for a capsule to have a `NULL' context.  This makes a
     `NULL' return code somewhat ambiguous; use *note
     PyCapsule_IsValid(): 96b. or *note PyErr_Occurred(): 32f9. to
     disambiguate.

 -- C Function: const char* PyCapsule_GetName (PyObject *capsule)

     Return the current name stored in the capsule.  On failure, set an
     exception and return `NULL'.

     It is legal for a capsule to have a `NULL' name.  This makes a
     `NULL' return code somewhat ambiguous; use *note
     PyCapsule_IsValid(): 96b. or *note PyErr_Occurred(): 32f9. to
     disambiguate.

 -- C Function: void* PyCapsule_Import (const char *name, int no_block)

     Import a pointer to a C object from a capsule attribute in a
     module.  The `name' parameter should specify the full name to the
     attribute, as in ‘module.attribute’.  The `name' stored in the
     capsule must match this string exactly.  If `no_block' is true,
     import the module without blocking (using *note
     PyImport_ImportModuleNoBlock(): 5e3.).  If `no_block' is false,
     import the module conventionally (using *note
     PyImport_ImportModule(): 8df.).

     Return the capsule’s internal `pointer' on success.  On failure,
     set an exception and return `NULL'. However, if *note
     PyCapsule_Import(): 332e. failed to import the module, and
     `no_block' was true, no exception is set.

 -- C Function: int PyCapsule_IsValid (PyObject *capsule, const
          char *name)

     Determines whether or not `capsule' is a valid capsule.  A valid
     capsule is non-`NULL', passes *note PyCapsule_CheckExact(): 372c,
     has a non-`NULL' pointer stored in it, and its internal name
     matches the `name' parameter.  (See *note PyCapsule_GetPointer():
     372d. for information on how capsule names are compared.)

     In other words, if *note PyCapsule_IsValid(): 96b. returns a true
     value, calls to any of the accessors (any function starting with
     ‘PyCapsule_Get()’) are guaranteed to succeed.

     Return a nonzero value if the object is valid and matches the name
     passed in.  Return 0 otherwise.  This function will not fail.

 -- C Function: int PyCapsule_SetContext (PyObject *capsule,
          void *context)

     Set the context pointer inside `capsule' to `context'.

     Return 0 on success.  Return nonzero and set an exception on
     failure.

 -- C Function: int PyCapsule_SetDestructor (PyObject *capsule,
          PyCapsule_Destructor destructor)

     Set the destructor inside `capsule' to `destructor'.

     Return 0 on success.  Return nonzero and set an exception on
     failure.

 -- C Function: int PyCapsule_SetName (PyObject *capsule, const
          char *name)

     Set the name inside `capsule' to `name'.  If non-`NULL', the name
     must outlive the capsule.  If the previous `name' stored in the
     capsule was not `NULL', no attempt is made to free it.

     Return 0 on success.  Return nonzero and set an exception on
     failure.

 -- C Function: int PyCapsule_SetPointer (PyObject *capsule,
          void *pointer)

     Set the void pointer inside `capsule' to `pointer'.  The pointer
     may not be `NULL'.

     Return 0 on success.  Return nonzero and set an exception on
     failure.


File: python.info,  Node: Generator Objects,  Next: Coroutine Objects<2>,  Prev: Capsules<2>,  Up: Other Objects

7.8.6.15 Generator Objects
..........................

Generator objects are what Python uses to implement generator iterators.
They are normally created by iterating over a function that yields
values, rather than explicitly calling *note PyGen_New(): 3738. or *note
PyGen_NewWithQualName(): 3739.

 -- C Type: PyGenObject

     The C structure used for generator objects.

 -- C Variable: PyTypeObject PyGen_Type

     The type object corresponding to generator objects.

 -- C Function: int PyGen_Check (PyObject *ob)

     Return true if `ob' is a generator object; `ob' must not be `NULL'.

 -- C Function: int PyGen_CheckExact (PyObject *ob)

     Return true if `ob'’s type is `PyGen_Type'; `ob' must not be
     `NULL'.

 -- C Function: PyObject* PyGen_New (PyFrameObject *frame)
     `Return value: New reference.'  Create and return a new generator
     object based on the `frame' object.  A reference to `frame' is
     stolen by this function.  The argument must not be `NULL'.

 -- C Function: PyObject* PyGen_NewWithQualName (PyFrameObject *frame,
          PyObject *name, PyObject *qualname)
     `Return value: New reference.'  Create and return a new generator
     object based on the `frame' object, with ‘__name__’ and
     ‘__qualname__’ set to `name' and `qualname'.  A reference to
     `frame' is stolen by this function.  The `frame' argument must not
     be `NULL'.


File: python.info,  Node: Coroutine Objects<2>,  Next: DateTime Objects<2>,  Prev: Generator Objects,  Up: Other Objects

7.8.6.16 Coroutine Objects
..........................

New in version 3.5.

Coroutine objects are what functions declared with an ‘async’ keyword
return.

 -- C Type: PyCoroObject

     The C structure used for coroutine objects.

 -- C Variable: PyTypeObject PyCoro_Type

     The type object corresponding to coroutine objects.

 -- C Function: int PyCoro_CheckExact (PyObject *ob)

     Return true if `ob'’s type is `PyCoro_Type'; `ob' must not be
     `NULL'.

 -- C Function: PyObject* PyCoro_New (PyFrameObject *frame,
          PyObject *name, PyObject *qualname)
     `Return value: New reference.'  Create and return a new coroutine
     object based on the `frame' object, with ‘__name__’ and
     ‘__qualname__’ set to `name' and `qualname'.  A reference to
     `frame' is stolen by this function.  The `frame' argument must not
     be `NULL'.


File: python.info,  Node: DateTime Objects<2>,  Prev: Coroutine Objects<2>,  Up: Other Objects

7.8.6.17 DateTime Objects
.........................

Various date and time objects are supplied by the *note datetime: 2f.
module.  Before using any of these functions, the header file
‘datetime.h’ must be included in your source (note that this is not
included by ‘Python.h’), and the macro ‘PyDateTime_IMPORT’ must be
invoked, usually as part of the module initialisation function.  The
macro puts a pointer to a C structure into a static variable,
‘PyDateTimeAPI’, that is used by the following macros.

Type-check macros:

 -- C Function: int PyDate_Check (PyObject *ob)

     Return true if `ob' is of type ‘PyDateTime_DateType’ or a subtype
     of ‘PyDateTime_DateType’.  `ob' must not be `NULL'.

 -- C Function: int PyDate_CheckExact (PyObject *ob)

     Return true if `ob' is of type ‘PyDateTime_DateType’.  `ob' must
     not be `NULL'.

 -- C Function: int PyDateTime_Check (PyObject *ob)

     Return true if `ob' is of type ‘PyDateTime_DateTimeType’ or a
     subtype of ‘PyDateTime_DateTimeType’.  `ob' must not be `NULL'.

 -- C Function: int PyDateTime_CheckExact (PyObject *ob)

     Return true if `ob' is of type ‘PyDateTime_DateTimeType’.  `ob'
     must not be `NULL'.

 -- C Function: int PyTime_Check (PyObject *ob)

     Return true if `ob' is of type ‘PyDateTime_TimeType’ or a subtype
     of ‘PyDateTime_TimeType’.  `ob' must not be `NULL'.

 -- C Function: int PyTime_CheckExact (PyObject *ob)

     Return true if `ob' is of type ‘PyDateTime_TimeType’.  `ob' must
     not be `NULL'.

 -- C Function: int PyDelta_Check (PyObject *ob)

     Return true if `ob' is of type ‘PyDateTime_DeltaType’ or a subtype
     of ‘PyDateTime_DeltaType’.  `ob' must not be `NULL'.

 -- C Function: int PyDelta_CheckExact (PyObject *ob)

     Return true if `ob' is of type ‘PyDateTime_DeltaType’.  `ob' must
     not be `NULL'.

 -- C Function: int PyTZInfo_Check (PyObject *ob)

     Return true if `ob' is of type ‘PyDateTime_TZInfoType’ or a subtype
     of ‘PyDateTime_TZInfoType’.  `ob' must not be `NULL'.

 -- C Function: int PyTZInfo_CheckExact (PyObject *ob)

     Return true if `ob' is of type ‘PyDateTime_TZInfoType’.  `ob' must
     not be `NULL'.

Macros to create objects:

 -- C Function: PyObject* PyDate_FromDate (int year, int month, int day)
     `Return value: New reference.'  Return a ‘datetime.date’ object
     with the specified year, month and day.

 -- C Function: PyObject* PyDateTime_FromDateAndTime (int year,
          int month, int day, int hour, int minute, int second,
          int usecond)
     `Return value: New reference.'  Return a ‘datetime.datetime’ object
     with the specified year, month, day, hour, minute, second and
     microsecond.

 -- C Function: PyObject* PyTime_FromTime (int hour, int minute,
          int second, int usecond)
     `Return value: New reference.'  Return a ‘datetime.time’ object
     with the specified hour, minute, second and microsecond.

 -- C Function: PyObject* PyDelta_FromDSU (int days, int seconds,
          int useconds)
     `Return value: New reference.'  Return a ‘datetime.timedelta’
     object representing the given number of days, seconds and
     microseconds.  Normalization is performed so that the resulting
     number of microseconds and seconds lie in the ranges documented for
     ‘datetime.timedelta’ objects.

Macros to extract fields from date objects.  The argument must be an
instance of ‘PyDateTime_Date’, including subclasses (such as
‘PyDateTime_DateTime’).  The argument must not be `NULL', and the type
is not checked:

 -- C Function: int PyDateTime_GET_YEAR (PyDateTime_Date *o)

     Return the year, as a positive int.

 -- C Function: int PyDateTime_GET_MONTH (PyDateTime_Date *o)

     Return the month, as an int from 1 through 12.

 -- C Function: int PyDateTime_GET_DAY (PyDateTime_Date *o)

     Return the day, as an int from 1 through 31.

Macros to extract fields from datetime objects.  The argument must be an
instance of ‘PyDateTime_DateTime’, including subclasses.  The argument
must not be `NULL', and the type is not checked:

 -- C Function: int PyDateTime_DATE_GET_HOUR (PyDateTime_DateTime *o)

     Return the hour, as an int from 0 through 23.

 -- C Function: int PyDateTime_DATE_GET_MINUTE (PyDateTime_DateTime *o)

     Return the minute, as an int from 0 through 59.

 -- C Function: int PyDateTime_DATE_GET_SECOND (PyDateTime_DateTime *o)

     Return the second, as an int from 0 through 59.

 -- C Function: int PyDateTime_DATE_GET_MICROSECOND
          (PyDateTime_DateTime *o)

     Return the microsecond, as an int from 0 through 999999.

Macros to extract fields from time objects.  The argument must be an
instance of ‘PyDateTime_Time’, including subclasses.  The argument must
not be `NULL', and the type is not checked:

 -- C Function: int PyDateTime_TIME_GET_HOUR (PyDateTime_Time *o)

     Return the hour, as an int from 0 through 23.

 -- C Function: int PyDateTime_TIME_GET_MINUTE (PyDateTime_Time *o)

     Return the minute, as an int from 0 through 59.

 -- C Function: int PyDateTime_TIME_GET_SECOND (PyDateTime_Time *o)

     Return the second, as an int from 0 through 59.

 -- C Function: int PyDateTime_TIME_GET_MICROSECOND (PyDateTime_Time *o)

     Return the microsecond, as an int from 0 through 999999.

Macros to extract fields from time delta objects.  The argument must be
an instance of ‘PyDateTime_Delta’, including subclasses.  The argument
must not be `NULL', and the type is not checked:

 -- C Function: int PyDateTime_DELTA_GET_DAYS (PyDateTime_Delta *o)

     Return the number of days, as an int from -999999999 to 999999999.

     New in version 3.3.

 -- C Function: int PyDateTime_DELTA_GET_SECONDS (PyDateTime_Delta *o)

     Return the number of seconds, as an int from 0 through 86399.

     New in version 3.3.

 -- C Function: int PyDateTime_DELTA_GET_MICROSECOND
          (PyDateTime_Delta *o)

     Return the number of microseconds, as an int from 0 through 999999.

     New in version 3.3.

Macros for the convenience of modules implementing the DB API:

 -- C Function: PyObject* PyDateTime_FromTimestamp (PyObject *args)
     `Return value: New reference.'  Create and return a new
     ‘datetime.datetime’ object given an argument tuple suitable for
     passing to ‘datetime.datetime.fromtimestamp()’.

 -- C Function: PyObject* PyDate_FromTimestamp (PyObject *args)
     `Return value: New reference.'  Create and return a new
     ‘datetime.date’ object given an argument tuple suitable for passing
     to ‘datetime.date.fromtimestamp()’.


File: python.info,  Node: Initialization Finalization and Threads,  Next: Memory Management,  Prev: Concrete Objects Layer,  Up: Python/C API Reference Manual

7.9 Initialization, Finalization, and Threads
=============================================

* Menu:

* Initializing and finalizing the interpreter:: 
* Process-wide parameters:: 
* Thread State and the Global Interpreter Lock:: 
* Sub-interpreter support:: 
* Asynchronous Notifications:: 
* Profiling and Tracing:: 
* Advanced Debugger Support:: 


File: python.info,  Node: Initializing and finalizing the interpreter,  Next: Process-wide parameters,  Up: Initialization Finalization and Threads

7.9.1 Initializing and finalizing the interpreter
-------------------------------------------------

 -- C Function: void Py_Initialize ()

     Initialize the Python interpreter.  In an application embedding
     Python, this should be called before using any other Python/C API
     functions; with the exception of *note Py_SetProgramName(): d4b,
     *note Py_SetPythonHome(): 3769. and *note Py_SetPath(): d4a.  This
     initializes the table of loaded modules (‘sys.modules’), and
     creates the fundamental modules *note builtins: 13, *note __main__:
     1. and *note sys: fb.  It also initializes the module search path
     (‘sys.path’).  It does not set ‘sys.argv’; use *note
     PySys_SetArgvEx(): 85b. for that.  This is a no-op when called for
     a second time (without calling *note Py_FinalizeEx(): 185. first).
     There is no return value; it is a fatal error if the initialization
     fails.

 -- C Function: void Py_InitializeEx (int initsigs)

     This function works like *note Py_Initialize(): 876. if `initsigs'
     is 1.  If `initsigs' is 0, it skips initialization registration of
     signal handlers, which might be useful when Python is embedded.

 -- C Function: int Py_IsInitialized ()

     Return true (nonzero) when the Python interpreter has been
     initialized, false (zero) if not.  After *note Py_FinalizeEx():
     185. is called, this returns false until *note Py_Initialize():
     876. is called again.

 -- C Function: int Py_FinalizeEx ()

     Undo all initializations made by *note Py_Initialize(): 876. and
     subsequent use of Python/C API functions, and destroy all
     sub-interpreters (see *note Py_NewInterpreter(): 376b. below) that
     were created and not yet destroyed since the last call to *note
     Py_Initialize(): 876.  Ideally, this frees all memory allocated by
     the Python interpreter.  This is a no-op when called for a second
     time (without calling *note Py_Initialize(): 876. again first).
     Normally the return value is 0.  If there were errors during
     finalization (flushing buffered data), -1 is returned.

     This function is provided for a number of reasons.  An embedding
     application might want to restart Python without having to restart
     the application itself.  An application that has loaded the Python
     interpreter from a dynamically loadable library (or DLL) might want
     to free all memory allocated by Python before unloading the DLL.
     During a hunt for memory leaks in an application a developer might
     want to free all memory allocated by Python before exiting from the
     application.

     `Bugs and caveats:' The destruction of modules and objects in
     modules is done in random order; this may cause destructors (*note
     __del__(): 525. methods) to fail when they depend on other objects
     (even functions) or modules.  Dynamically loaded extension modules
     loaded by Python are not unloaded.  Small amounts of memory
     allocated by the Python interpreter may not be freed (if you find a
     leak, please report it).  Memory tied up in circular references
     between objects is not freed.  Some memory allocated by extension
     modules may not be freed.  Some extensions may not work properly if
     their initialization routine is called more than once; this can
     happen if an application calls *note Py_Initialize(): 876. and
     *note Py_FinalizeEx(): 185. more than once.

     New in version 3.6.

 -- C Function: void Py_Finalize ()

     This is a backwards-compatible version of *note Py_FinalizeEx():
     185. that disregards the return value.


File: python.info,  Node: Process-wide parameters,  Next: Thread State and the Global Interpreter Lock,  Prev: Initializing and finalizing the interpreter,  Up: Initialization Finalization and Threads

7.9.2 Process-wide parameters
-----------------------------

 -- C Function: int Py_SetStandardStreamEncoding (const char *encoding,
          const char *errors)

     This function should be called before *note Py_Initialize(): 876,
     if it is called at all.  It specifies which encoding and error
     handling to use with standard IO, with the same meanings as in
     *note str.encode(): 89d.

     It overrides *note PYTHONIOENCODING: 537. values, and allows
     embedding code to control IO encoding when the environment variable
     does not work.

     ‘encoding’ and/or ‘errors’ may be NULL to use *note
     PYTHONIOENCODING: 537. and/or default values (depending on other
     settings).

     Note that *note sys.stderr: 270. always uses the "backslashreplace"
     error handler, regardless of this (or any other) setting.

     If *note Py_FinalizeEx(): 185. is called, this function will need
     to be called again in order to affect subsequent calls to *note
     Py_Initialize(): 876.

     Returns 0 if successful, a nonzero value on error (e.g.  calling
     after the interpreter has already been initialized).

     New in version 3.4.

 -- C Function: void Py_SetProgramName (wchar_t *name)

     This function should be called before *note Py_Initialize(): 876.
     is called for the first time, if it is called at all.  It tells the
     interpreter the value of the ‘argv[0]’ argument to the ‘main()’
     function of the program (converted to wide characters).  This is
     used by *note Py_GetPath(): 33ab. and some other functions below to
     find the Python run-time libraries relative to the interpreter
     executable.  The default value is ‘'python'’.  The argument should
     point to a zero-terminated wide character string in static storage
     whose contents will not change for the duration of the program’s
     execution.  No code in the Python interpreter will change the
     contents of this storage.

     Use *note Py_DecodeLocale(): 381. to decode a bytes string to get a
     ‘wchar_*’ string.

 -- C Function: wchar* Py_GetProgramName ()

     Return the program name set with *note Py_SetProgramName(): d4b, or
     the default.  The returned string points into static storage; the
     caller should not modify its value.

 -- C Function: wchar_t* Py_GetPrefix ()

     Return the `prefix' for installed platform-independent files.  This
     is derived through a number of complicated rules from the program
     name set with *note Py_SetProgramName(): d4b. and some environment
     variables; for example, if the program name is
     ‘'/usr/local/bin/python'’, the prefix is ‘'/usr/local'’.  The
     returned string points into static storage; the caller should not
     modify its value.  This corresponds to the ‘prefix’ variable in the
     top-level ‘Makefile’ and the ‘--prefix’ argument to the ‘configure’
     script at build time.  The value is available to Python code as
     ‘sys.prefix’.  It is only useful on Unix.  See also the next
     function.

 -- C Function: wchar_t* Py_GetExecPrefix ()

     Return the `exec-prefix' for installed platform-`dependent' files.
     This is derived through a number of complicated rules from the
     program name set with *note Py_SetProgramName(): d4b. and some
     environment variables; for example, if the program name is
     ‘'/usr/local/bin/python'’, the exec-prefix is ‘'/usr/local'’.  The
     returned string points into static storage; the caller should not
     modify its value.  This corresponds to the ‘exec_prefix’ variable
     in the top-level ‘Makefile’ and the ‘--exec-prefix’ argument to the
     ‘configure’ script at build time.  The value is available to Python
     code as ‘sys.exec_prefix’.  It is only useful on Unix.

     Background: The exec-prefix differs from the prefix when platform
     dependent files (such as executables and shared libraries) are
     installed in a different directory tree.  In a typical
     installation, platform dependent files may be installed in the
     ‘/usr/local/plat’ subtree while platform independent may be
     installed in ‘/usr/local’.

     Generally speaking, a platform is a combination of hardware and
     software families, e.g.  Sparc machines running the Solaris 2.x
     operating system are considered the same platform, but Intel
     machines running Solaris 2.x are another platform, and Intel
     machines running Linux are yet another platform.  Different major
     revisions of the same operating system generally also form
     different platforms.  Non-Unix operating systems are a different
     story; the installation strategies on those systems are so
     different that the prefix and exec-prefix are meaningless, and set
     to the empty string.  Note that compiled Python bytecode files are
     platform independent (but not independent from the Python version
     by which they were compiled!).

     System administrators will know how to configure the ‘mount’ or
     ‘automount’ programs to share ‘/usr/local’ between platforms while
     having ‘/usr/local/plat’ be a different filesystem for each
     platform.

 -- C Function: wchar_t* Py_GetProgramFullPath ()

     Return the full program name of the Python executable; this is
     computed as a side-effect of deriving the default module search
     path from the program name (set by *note Py_SetProgramName(): d4b.
     above).  The returned string points into static storage; the caller
     should not modify its value.  The value is available to Python code
     as ‘sys.executable’.

 -- C Function: wchar_t* Py_GetPath ()

     Return the default module search path; this is computed from the
     program name (set by *note Py_SetProgramName(): d4b. above) and
     some environment variables.  The returned string consists of a
     series of directory names separated by a platform dependent
     delimiter character.  The delimiter character is ‘':'’ on Unix and
     Mac OS X, ‘';'’ on Windows.  The returned string points into static
     storage; the caller should not modify its value.  The list *note
     sys.path: 16c. is initialized with this value on interpreter
     startup; it can be (and usually is) modified later to change the
     search path for loading modules.

 -- C Function: void Py_SetPath (const wchar_t *)

     Set the default module search path.  If this function is called
     before *note Py_Initialize(): 876, then *note Py_GetPath(): 33ab.
     won’t attempt to compute a default search path but uses the one
     provided instead.  This is useful if Python is embedded by an
     application that has full knowledge of the location of all modules.
     The path components should be separated by the platform dependent
     delimiter character, which is ‘':'’ on Unix and Mac OS X, ‘';'’ on
     Windows.

     This also causes *note sys.executable: 1d34. to be set only to the
     raw program name (see *note Py_SetProgramName(): d4b.) and for
     *note sys.prefix: 2dfd. and *note sys.exec_prefix: 2dfe. to be
     empty.  It is up to the caller to modify these if required after
     calling *note Py_Initialize(): 876.

     Use *note Py_DecodeLocale(): 381. to decode a bytes string to get a
     ‘wchar_*’ string.

     The path argument is copied internally, so the caller may free it
     after the call completes.

 -- C Function: const char* Py_GetVersion ()

     Return the version of this Python interpreter.  This is a string
     that looks something like

          "3.0a5+ (py3k:63103M, May 12 2008, 00:53:55) \n[GCC 4.2.3]"

     The first word (up to the first space character) is the current
     Python version; the first three characters are the major and minor
     version separated by a period.  The returned string points into
     static storage; the caller should not modify its value.  The value
     is available to Python code as *note sys.version: 2e3b.

 -- C Function: const char* Py_GetPlatform ()

     Return the platform identifier for the current platform.  On Unix,
     this is formed from the "official" name of the operating system,
     converted to lower case, followed by the major revision number;
     e.g., for Solaris 2.x, which is also known as SunOS 5.x, the value
     is ‘'sunos5'’.  On Mac OS X, it is ‘'darwin'’.  On Windows, it is
     ‘'win'’.  The returned string points into static storage; the
     caller should not modify its value.  The value is available to
     Python code as ‘sys.platform’.

 -- C Function: const char* Py_GetCopyright ()

     Return the official copyright string for the current Python
     version, for example

     ‘'Copyright 1991-1995 Stichting Mathematisch Centrum, Amsterdam'’

     The returned string points into static storage; the caller should
     not modify its value.  The value is available to Python code as
     ‘sys.copyright’.

 -- C Function: const char* Py_GetCompiler ()

     Return an indication of the compiler used to build the current
     Python version, in square brackets, for example:

          "[GCC 2.7.2.2]"

     The returned string points into static storage; the caller should
     not modify its value.  The value is available to Python code as
     part of the variable ‘sys.version’.

 -- C Function: const char* Py_GetBuildInfo ()

     Return information about the sequence number and build date and
     time of the current Python interpreter instance, for example

          "#67, Aug  1 1997, 22:34:28"

     The returned string points into static storage; the caller should
     not modify its value.  The value is available to Python code as
     part of the variable ‘sys.version’.

 -- C Function: void PySys_SetArgvEx (int argc, wchar_t **argv,
          int updatepath)

     Set *note sys.argv: 85c. based on `argc' and `argv'.  These
     parameters are similar to those passed to the program’s ‘main()’
     function with the difference that the first entry should refer to
     the script file to be executed rather than the executable hosting
     the Python interpreter.  If there isn’t a script that will be run,
     the first entry in `argv' can be an empty string.  If this function
     fails to initialize *note sys.argv: 85c, a fatal condition is
     signalled using *note Py_FatalError(): 344e.

     If `updatepath' is zero, this is all the function does.  If
     `updatepath' is non-zero, the function also modifies *note
     sys.path: 16c. according to the following algorithm:

        - If the name of an existing script is passed in ‘argv[0]’, the
          absolute path of the directory where the script is located is
          prepended to *note sys.path: 16c.

        - Otherwise (that is, if `argc' is 0 or ‘argv[0]’ doesn’t point
          to an existing file name), an empty string is prepended to
          *note sys.path: 16c, which is the same as prepending the
          current working directory (‘"."’).

     Use *note Py_DecodeLocale(): 381. to decode a bytes string to get a
     ‘wchar_*’ string.

          Note: It is recommended that applications embedding the Python
          interpreter for purposes other than executing a single script
          pass 0 as `updatepath', and update *note sys.path: 16c.
          themselves if desired.  See CVE-2008-5983(1).

          On versions before 3.1.3, you can achieve the same effect by
          manually popping the first *note sys.path: 16c. element after
          having called *note PySys_SetArgv(): 966, for example using:

               PyRun_SimpleString("import sys; sys.path.pop(0)\n");

     New in version 3.1.3.

 -- C Function: void PySys_SetArgv (int argc, wchar_t **argv)

     This function works like *note PySys_SetArgvEx(): 85b. with
     `updatepath' set to 1 unless the ‘python’ interpreter was started
     with the *note -I: d05.

     Use *note Py_DecodeLocale(): 381. to decode a bytes string to get a
     ‘wchar_*’ string.

     Changed in version 3.4: The `updatepath' value depends on *note -I:
     d05.

 -- C Function: void Py_SetPythonHome (wchar_t *home)

     Set the default "home" directory, that is, the location of the
     standard Python libraries.  See *note PYTHONHOME: d04. for the
     meaning of the argument string.

     The argument should point to a zero-terminated character string in
     static storage whose contents will not change for the duration of
     the program’s execution.  No code in the Python interpreter will
     change the contents of this storage.

     Use *note Py_DecodeLocale(): 381. to decode a bytes string to get a
     ‘wchar_*’ string.

 -- C Function: w_char* Py_GetPythonHome ()

     Return the default "home", that is, the value set by a previous
     call to *note Py_SetPythonHome(): 3769, or the value of the *note
     PYTHONHOME: d04. environment variable if it is set.

   ---------- Footnotes ----------

   (1) http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5983


File: python.info,  Node: Thread State and the Global Interpreter Lock,  Next: Sub-interpreter support,  Prev: Process-wide parameters,  Up: Initialization Finalization and Threads

7.9.3 Thread State and the Global Interpreter Lock
--------------------------------------------------

The Python interpreter is not fully thread-safe.  In order to support
multi-threaded Python programs, there’s a global lock, called the *note
global interpreter lock: 153. or *note GIL: 848, that must be held by
the current thread before it can safely access Python objects.  Without
the lock, even the simplest operations could cause problems in a
multi-threaded program: for example, when two threads simultaneously
increment the reference count of the same object, the reference count
could end up being incremented only once instead of twice.

Therefore, the rule exists that only the thread that has acquired the
*note GIL: 848. may operate on Python objects or call Python/C API
functions.  In order to emulate concurrency of execution, the
interpreter regularly tries to switch threads (see *note
sys.setswitchinterval(): 849.).  The lock is also released around
potentially blocking I/O operations like reading or writing a file, so
that other Python threads can run in the meantime.

The Python interpreter keeps some thread-specific bookkeeping
information inside a data structure called *note PyThreadState: 3775.
There’s also one global variable pointing to the current *note
PyThreadState: 3775.: it can be retrieved using *note
PyThreadState_Get(): 3776.

* Menu:

* Releasing the GIL from extension code:: 
* Non-Python created threads:: 
* High-level API:: 
* Low-level API:: 


File: python.info,  Node: Releasing the GIL from extension code,  Next: Non-Python created threads,  Up: Thread State and the Global Interpreter Lock

7.9.3.1 Releasing the GIL from extension code
.............................................

Most extension code manipulating the *note GIL: 848. has the following
simple structure:

     Save the thread state in a local variable.
     Release the global interpreter lock.
     ... Do some blocking I/O operation ...
     Reacquire the global interpreter lock.
     Restore the thread state from the local variable.

This is so common that a pair of macros exists to simplify it:

     Py_BEGIN_ALLOW_THREADS
     ... Do some blocking I/O operation ...
     Py_END_ALLOW_THREADS

The *note Py_BEGIN_ALLOW_THREADS: 3326. macro opens a new block and
declares a hidden local variable; the *note Py_END_ALLOW_THREADS: 3327.
macro closes the block.  These two macros are still available when
Python is compiled without thread support (they simply have an empty
expansion).

When thread support is enabled, the block above expands to the following
code:

     PyThreadState *_save;

     _save = PyEval_SaveThread();
     ...Do some blocking I/O operation...
     PyEval_RestoreThread(_save);

Here is how these functions work: the global interpreter lock is used to
protect the pointer to the current thread state.  When releasing the
lock and saving the thread state, the current thread state pointer must
be retrieved before the lock is released (since another thread could
immediately acquire the lock and store its own thread state in the
global variable).  Conversely, when acquiring the lock and restoring the
thread state, the lock must be acquired before storing the thread state
pointer.

     Note: Calling system I/O functions is the most common use case for
     releasing the GIL, but it can also be useful before calling
     long-running computations which don’t need access to Python
     objects, such as compression or cryptographic functions operating
     over memory buffers.  For example, the standard *note zlib: 141.
     and *note hashlib: 8c. modules release the GIL when compressing or
     hashing data.


File: python.info,  Node: Non-Python created threads,  Next: High-level API,  Prev: Releasing the GIL from extension code,  Up: Thread State and the Global Interpreter Lock

7.9.3.2 Non-Python created threads
..................................

When threads are created using the dedicated Python APIs (such as the
*note threading: 106. module), a thread state is automatically
associated to them and the code showed above is therefore correct.
However, when threads are created from C (for example by a third-party
library with its own thread management), they don’t hold the GIL, nor is
there a thread state structure for them.

If you need to call Python code from these threads (often this will be
part of a callback API provided by the aforementioned third-party
library), you must first register these threads with the interpreter by
creating a thread state data structure, then acquiring the GIL, and
finally storing their thread state pointer, before you can start using
the Python/C API. When you are done, you should reset the thread state
pointer, release the GIL, and finally free the thread state data
structure.

The *note PyGILState_Ensure(): 377a. and *note PyGILState_Release():
377b. functions do all of the above automatically.  The typical idiom
for calling into Python from a C thread is:

     PyGILState_STATE gstate;
     gstate = PyGILState_Ensure();

     /* Perform Python actions here. */
     result = CallSomeFunction();
     /* evaluate result or handle exception */

     /* Release the thread. No Python API allowed beyond this point. */
     PyGILState_Release(gstate);

Note that the ‘PyGILState_*()’ functions assume there is only one global
interpreter (created automatically by *note Py_Initialize(): 876.).
Python supports the creation of additional interpreters (using *note
Py_NewInterpreter(): 376b.), but mixing multiple interpreters and the
‘PyGILState_*()’ API is unsupported.

Another important thing to note about threads is their behaviour in the
face of the C ‘fork()’ call.  On most systems with ‘fork()’, after a
process forks only the thread that issued the fork will exist.  That
also means any locks held by other threads will never be released.
Python solves this for *note os.fork(): 57b. by acquiring the locks it
uses internally before the fork, and releasing them afterwards.  In
addition, it resets any *note Lock Objects: 1cc9. in the child.  When
extending or embedding Python, there is no way to inform Python of
additional (non-Python) locks that need to be acquired before or reset
after a fork.  OS facilities such as ‘pthread_atfork()’ would need to be
used to accomplish the same thing.  Additionally, when extending or
embedding Python, calling ‘fork()’ directly rather than through *note
os.fork(): 57b. (and returning to or calling into Python) may result in
a deadlock by one of Python’s internal locks being held by a thread that
is defunct after the fork.  *note PyOS_AfterFork(): 3435. tries to reset
the necessary locks, but is not always able to.


File: python.info,  Node: High-level API,  Next: Low-level API,  Prev: Non-Python created threads,  Up: Thread State and the Global Interpreter Lock

7.9.3.3 High-level API
......................

These are the most commonly used types and functions when writing C
extension code, or when embedding the Python interpreter:

 -- C Type: PyInterpreterState

     This data structure represents the state shared by a number of
     cooperating threads.  Threads belonging to the same interpreter
     share their module administration and a few other internal items.
     There are no public members in this structure.

     Threads belonging to different interpreters initially share
     nothing, except process state like available memory, open file
     descriptors and such.  The global interpreter lock is also shared
     by all threads, regardless of to which interpreter they belong.

 -- C Type: PyThreadState

     This data structure represents the state of a single thread.  The
     only public data member is *note PyInterpreterState *:
     377d.‘interp’, which points to this thread’s interpreter state.

 -- C Function: void PyEval_InitThreads ()

     Initialize and acquire the global interpreter lock.  It should be
     called in the main thread before creating a second thread or
     engaging in any other thread operations such as
     ‘PyEval_ReleaseThread(tstate)’.  It is not needed before calling
     *note PyEval_SaveThread(): 873. or *note PyEval_RestoreThread():
     874.

     This is a no-op when called for a second time.

     Changed in version 3.2: This function cannot be called before *note
     Py_Initialize(): 876. anymore.

          Note: When only the main thread exists, no GIL operations are
          needed.  This is a common situation (most Python programs do
          not use threads), and the lock operations slow the interpreter
          down a bit.  Therefore, the lock is not created initially.
          This situation is equivalent to having acquired the lock: when
          there is only a single thread, all object accesses are safe.
          Therefore, when this function initializes the global
          interpreter lock, it also acquires it.  Before the Python
          *note _thread: 3. module creates a new thread, knowing that
          either it has the lock or the lock hasn’t been created yet, it
          calls *note PyEval_InitThreads(): 875.  When this call
          returns, it is guaranteed that the lock has been created and
          that the calling thread has acquired it.

          It is `not' safe to call this function when it is unknown
          which thread (if any) currently has the global interpreter
          lock.

          This function is not available when thread support is disabled
          at compile time.

 -- C Function: int PyEval_ThreadsInitialized ()

     Returns a non-zero value if *note PyEval_InitThreads(): 875. has
     been called.  This function can be called without holding the GIL,
     and therefore can be used to avoid calls to the locking API when
     running single-threaded.  This function is not available when
     thread support is disabled at compile time.

 -- C Function: PyThreadState* PyEval_SaveThread ()

     Release the global interpreter lock (if it has been created and
     thread support is enabled) and reset the thread state to `NULL',
     returning the previous thread state (which is not `NULL'). If the
     lock has been created, the current thread must have acquired it.
     (This function is available even when thread support is disabled at
     compile time.)

 -- C Function: void PyEval_RestoreThread (PyThreadState *tstate)

     Acquire the global interpreter lock (if it has been created and
     thread support is enabled) and set the thread state to `tstate',
     which must not be `NULL'. If the lock has been created, the current
     thread must not have acquired it, otherwise deadlock ensues.  (This
     function is available even when thread support is disabled at
     compile time.)

 -- C Function: PyThreadState* PyThreadState_Get ()

     Return the current thread state.  The global interpreter lock must
     be held.  When the current thread state is `NULL', this issues a
     fatal error (so that the caller needn’t check for `NULL').

 -- C Function: PyThreadState* PyThreadState_Swap
          (PyThreadState *tstate)

     Swap the current thread state with the thread state given by the
     argument `tstate', which may be `NULL'. The global interpreter lock
     must be held and is not released.

 -- C Function: void PyEval_ReInitThreads ()

     This function is called from *note PyOS_AfterFork(): 3435. to
     ensure that newly created child processes don’t hold locks
     referring to threads which are not running in the child process.

The following functions use thread-local storage, and are not compatible
with sub-interpreters:

 -- C Function: PyGILState_STATE PyGILState_Ensure ()

     Ensure that the current thread is ready to call the Python C API
     regardless of the current state of Python, or of the global
     interpreter lock.  This may be called as many times as desired by a
     thread as long as each call is matched with a call to *note
     PyGILState_Release(): 377b.  In general, other thread-related APIs
     may be used between *note PyGILState_Ensure(): 377a. and *note
     PyGILState_Release(): 377b. calls as long as the thread state is
     restored to its previous state before the Release().  For example,
     normal usage of the *note Py_BEGIN_ALLOW_THREADS: 3326. and *note
     Py_END_ALLOW_THREADS: 3327. macros is acceptable.

     The return value is an opaque "handle" to the thread state when
     *note PyGILState_Ensure(): 377a. was called, and must be passed to
     *note PyGILState_Release(): 377b. to ensure Python is left in the
     same state.  Even though recursive calls are allowed, these handles
     `cannot' be shared - each unique call to *note PyGILState_Ensure():
     377a. must save the handle for its call to *note
     PyGILState_Release(): 377b.

     When the function returns, the current thread will hold the GIL and
     be able to call arbitrary Python code.  Failure is a fatal error.

 -- C Function: void PyGILState_Release (PyGILState_STATE)

     Release any resources previously acquired.  After this call,
     Python’s state will be the same as it was prior to the
     corresponding *note PyGILState_Ensure(): 377a. call (but generally
     this state will be unknown to the caller, hence the use of the
     GILState API).

     Every call to *note PyGILState_Ensure(): 377a. must be matched by a
     call to *note PyGILState_Release(): 377b. on the same thread.

 -- C Function: PyThreadState* PyGILState_GetThisThreadState ()

     Get the current thread state for this thread.  May return ‘NULL’ if
     no GILState API has been used on the current thread.  Note that the
     main thread always has such a thread-state, even if no
     auto-thread-state call has been made on the main thread.  This is
     mainly a helper/diagnostic function.

 -- C Function: int PyGILState_Check ()

     Return 1 if the current thread is holding the GIL and 0 otherwise.
     This function can be called from any thread at any time.  Only if
     it has had its Python thread state initialized and currently is
     holding the GIL will it return 1.  This is mainly a
     helper/diagnostic function.  It can be useful for example in
     callback contexts or memory allocation functions when knowing that
     the GIL is locked can allow the caller to perform sensitive actions
     or otherwise behave differently.

     New in version 3.4.

The following macros are normally used without a trailing semicolon;
look for example usage in the Python source distribution.

 -- C Macro: Py_BEGIN_ALLOW_THREADS

     This macro expands to ‘{ PyThreadState *_save; _save =
     PyEval_SaveThread();’.  Note that it contains an opening brace; it
     must be matched with a following *note Py_END_ALLOW_THREADS: 3327.
     macro.  See above for further discussion of this macro.  It is a
     no-op when thread support is disabled at compile time.

 -- C Macro: Py_END_ALLOW_THREADS

     This macro expands to ‘PyEval_RestoreThread(_save); }’.  Note that
     it contains a closing brace; it must be matched with an earlier
     *note Py_BEGIN_ALLOW_THREADS: 3326. macro.  See above for further
     discussion of this macro.  It is a no-op when thread support is
     disabled at compile time.

 -- C Macro: Py_BLOCK_THREADS

     This macro expands to ‘PyEval_RestoreThread(_save);’: it is
     equivalent to *note Py_END_ALLOW_THREADS: 3327. without the closing
     brace.  It is a no-op when thread support is disabled at compile
     time.

 -- C Macro: Py_UNBLOCK_THREADS

     This macro expands to ‘_save = PyEval_SaveThread();’: it is
     equivalent to *note Py_BEGIN_ALLOW_THREADS: 3326. without the
     opening brace and variable declaration.  It is a no-op when thread
     support is disabled at compile time.


File: python.info,  Node: Low-level API,  Prev: High-level API,  Up: Thread State and the Global Interpreter Lock

7.9.3.4 Low-level API
.....................

All of the following functions are only available when thread support is
enabled at compile time, and must be called only when the global
interpreter lock has been created.

 -- C Function: PyInterpreterState* PyInterpreterState_New ()

     Create a new interpreter state object.  The global interpreter lock
     need not be held, but may be held if it is necessary to serialize
     calls to this function.

 -- C Function: void PyInterpreterState_Clear
          (PyInterpreterState *interp)

     Reset all information in an interpreter state object.  The global
     interpreter lock must be held.

 -- C Function: void PyInterpreterState_Delete
          (PyInterpreterState *interp)

     Destroy an interpreter state object.  The global interpreter lock
     need not be held.  The interpreter state must have been reset with
     a previous call to *note PyInterpreterState_Clear(): 3786.

 -- C Function: PyThreadState* PyThreadState_New
          (PyInterpreterState *interp)

     Create a new thread state object belonging to the given interpreter
     object.  The global interpreter lock need not be held, but may be
     held if it is necessary to serialize calls to this function.

 -- C Function: void PyThreadState_Clear (PyThreadState *tstate)

     Reset all information in a thread state object.  The global
     interpreter lock must be held.

 -- C Function: void PyThreadState_Delete (PyThreadState *tstate)

     Destroy a thread state object.  The global interpreter lock need
     not be held.  The thread state must have been reset with a previous
     call to *note PyThreadState_Clear(): 3789.

 -- C Function: PyObject* PyThreadState_GetDict ()
     `Return value: Borrowed reference.'  Return a dictionary in which
     extensions can store thread-specific state information.  Each
     extension should use a unique key to use to store state in the
     dictionary.  It is okay to call this function when no current
     thread state is available.  If this function returns `NULL', no
     exception has been raised and the caller should assume no current
     thread state is available.

 -- C Function: int PyThreadState_SetAsyncExc (long id, PyObject *exc)

     Asynchronously raise an exception in a thread.  The `id' argument
     is the thread id of the target thread; `exc' is the exception
     object to be raised.  This function does not steal any references
     to `exc'.  To prevent naive misuse, you must write your own C
     extension to call this.  Must be called with the GIL held.  Returns
     the number of thread states modified; this is normally one, but
     will be zero if the thread id isn’t found.  If `exc' is ‘NULL’, the
     pending exception (if any) for the thread is cleared.  This raises
     no exceptions.

 -- C Function: void PyEval_AcquireThread (PyThreadState *tstate)

     Acquire the global interpreter lock and set the current thread
     state to `tstate', which should not be `NULL'. The lock must have
     been created earlier.  If this thread already has the lock,
     deadlock ensues.

     *note PyEval_RestoreThread(): 874. is a higher-level function which
     is always available (even when thread support isn’t enabled or when
     threads have not been initialized).

 -- C Function: void PyEval_ReleaseThread (PyThreadState *tstate)

     Reset the current thread state to `NULL' and release the global
     interpreter lock.  The lock must have been created earlier and must
     be held by the current thread.  The `tstate' argument, which must
     not be `NULL', is only used to check that it represents the current
     thread state — if it isn’t, a fatal error is reported.

     *note PyEval_SaveThread(): 873. is a higher-level function which is
     always available (even when thread support isn’t enabled or when
     threads have not been initialized).

 -- C Function: void PyEval_AcquireLock ()

     Acquire the global interpreter lock.  The lock must have been
     created earlier.  If this thread already has the lock, a deadlock
     ensues.

     Deprecated since version 3.2: This function does not update the
     current thread state.  Please use *note PyEval_RestoreThread():
     874. or *note PyEval_AcquireThread(): 378d. instead.

 -- C Function: void PyEval_ReleaseLock ()

     Release the global interpreter lock.  The lock must have been
     created earlier.

     Deprecated since version 3.2: This function does not update the
     current thread state.  Please use *note PyEval_SaveThread(): 873.
     or *note PyEval_ReleaseThread(): 378e. instead.


File: python.info,  Node: Sub-interpreter support,  Next: Asynchronous Notifications,  Prev: Thread State and the Global Interpreter Lock,  Up: Initialization Finalization and Threads

7.9.4 Sub-interpreter support
-----------------------------

While in most uses, you will only embed a single Python interpreter,
there are cases where you need to create several independent
interpreters in the same process and perhaps even in the same thread.
Sub-interpreters allow you to do that.  You can switch between
sub-interpreters using the *note PyThreadState_Swap(): 377e. function.
You can create and destroy them using the following functions:

 -- C Function: PyThreadState* Py_NewInterpreter ()

     Create a new sub-interpreter.  This is an (almost) totally separate
     environment for the execution of Python code.  In particular, the
     new interpreter has separate, independent versions of all imported
     modules, including the fundamental modules *note builtins: 13,
     *note __main__: 1. and *note sys: fb.  The table of loaded modules
     (‘sys.modules’) and the module search path (‘sys.path’) are also
     separate.  The new environment has no ‘sys.argv’ variable.  It has
     new standard I/O stream file objects ‘sys.stdin’, ‘sys.stdout’ and
     ‘sys.stderr’ (however these refer to the same underlying file
     descriptors).

     The return value points to the first thread state created in the
     new sub-interpreter.  This thread state is made in the current
     thread state.  Note that no actual thread is created; see the
     discussion of thread states below.  If creation of the new
     interpreter is unsuccessful, `NULL' is returned; no exception is
     set since the exception state is stored in the current thread state
     and there may not be a current thread state.  (Like all other
     Python/C API functions, the global interpreter lock must be held
     before calling this function and is still held when it returns;
     however, unlike most other Python/C API functions, there needn’t be
     a current thread state on entry.)

     Extension modules are shared between (sub-)interpreters as follows:
     the first time a particular extension is imported, it is
     initialized normally, and a (shallow) copy of its module’s
     dictionary is squirreled away.  When the same extension is imported
     by another (sub-)interpreter, a new module is initialized and
     filled with the contents of this copy; the extension’s ‘init’
     function is not called.  Note that this is different from what
     happens when an extension is imported after the interpreter has
     been completely re-initialized by calling *note Py_FinalizeEx():
     185. and *note Py_Initialize(): 876.; in that case, the extension’s
     ‘initmodule’ function `is' called again.

 -- C Function: void Py_EndInterpreter (PyThreadState *tstate)

     Destroy the (sub-)interpreter represented by the given thread
     state.  The given thread state must be the current thread state.
     See the discussion of thread states below.  When the call returns,
     the current thread state is `NULL'. All thread states associated
     with this interpreter are destroyed.  (The global interpreter lock
     must be held before calling this function and is still held when it
     returns.)  *note Py_FinalizeEx(): 185. will destroy all
     sub-interpreters that haven’t been explicitly destroyed at that
     point.

* Menu:

* Bugs and caveats:: 


File: python.info,  Node: Bugs and caveats,  Up: Sub-interpreter support

7.9.4.1 Bugs and caveats
........................

Because sub-interpreters (and the main interpreter) are part of the same
process, the insulation between them isn’t perfect — for example, using
low-level file operations like *note os.close(): 203. they can
(accidentally or maliciously) affect each other’s open files.  Because
of the way extensions are shared between (sub-)interpreters, some
extensions may not work properly; this is especially likely when the
extension makes use of (static) global variables, or when the extension
manipulates its module’s dictionary after its initialization.  It is
possible to insert objects created in one sub-interpreter into a
namespace of another sub-interpreter; this should be done with great
care to avoid sharing user-defined functions, methods, instances or
classes between sub-interpreters, since import operations executed by
such objects may affect the wrong (sub-)interpreter’s dictionary of
loaded modules.

Also note that combining this functionality with ‘PyGILState_*()’ APIs
is delicate, because these APIs assume a bijection between Python thread
states and OS-level threads, an assumption broken by the presence of
sub-interpreters.  It is highly recommended that you don’t switch
sub-interpreters between a pair of matching *note PyGILState_Ensure():
377a. and *note PyGILState_Release(): 377b. calls.  Furthermore,
extensions (such as *note ctypes: 2a.) using these APIs to allow calling
of Python code from non-Python created threads will probably be broken
when using sub-interpreters.


File: python.info,  Node: Asynchronous Notifications,  Next: Profiling and Tracing,  Prev: Sub-interpreter support,  Up: Initialization Finalization and Threads

7.9.5 Asynchronous Notifications
--------------------------------

A mechanism is provided to make asynchronous notifications to the main
interpreter thread.  These notifications take the form of a function
pointer and a void pointer argument.

 -- C Function: int Py_AddPendingCall (int (*func)(void *), void *arg)

     Schedule a function to be called from the main interpreter thread.
     On success, 0 is returned and `func' is queued for being called in
     the main thread.  On failure, -1 is returned without setting any
     exception.

     When successfully queued, `func' will be `eventually' called from
     the main interpreter thread with the argument `arg'.  It will be
     called asynchronously with respect to normally running Python code,
     but with both these conditions met:

        * on a *note bytecode: d06. boundary;

        * with the main thread holding the *note global interpreter
          lock: 153. (`func' can therefore use the full C API).

     `func' must return 0 on success, or -1 on failure with an exception
     set.  `func' won’t be interrupted to perform another asynchronous
     notification recursively, but it can still be interrupted to switch
     threads if the global interpreter lock is released.

     This function doesn’t need a current thread state to run, and it
     doesn’t need the global interpreter lock.

          Warning: This is a low-level function, only useful for very
          special cases.  There is no guarantee that `func' will be
          called as quick as possible.  If the main thread is busy
          executing a system call, `func' won’t be called before the
          system call returns.  This function is generally `not'
          suitable for calling Python code from arbitrary C threads.
          Instead, use the *note PyGILState API: 3779.

     New in version 3.1.


File: python.info,  Node: Profiling and Tracing,  Next: Advanced Debugger Support,  Prev: Asynchronous Notifications,  Up: Initialization Finalization and Threads

7.9.6 Profiling and Tracing
---------------------------

The Python interpreter provides some low-level support for attaching
profiling and execution tracing facilities.  These are used for
profiling, debugging, and coverage analysis tools.

This C interface allows the profiling or tracing code to avoid the
overhead of calling through Python-level callable objects, making a
direct C function call instead.  The essential attributes of the
facility have not changed; the interface allows trace functions to be
installed per-thread, and the basic events reported to the trace
function are the same as had been reported to the Python-level trace
functions in previous versions.

 -- C Type: int (*Py_tracefunc) (PyObject *obj, PyFrameObject *frame,
          int what, PyObject *arg)

     The type of the trace function registered using *note
     PyEval_SetProfile(): abd. and *note PyEval_SetTrace(): abe.  The
     first parameter is the object passed to the registration function
     as `obj', `frame' is the frame object to which the event pertains,
     `what' is one of the constants ‘PyTrace_CALL’, ‘PyTrace_EXCEPTION’,
     ‘PyTrace_LINE’, ‘PyTrace_RETURN’, ‘PyTrace_C_CALL’,
     ‘PyTrace_C_EXCEPTION’, or ‘PyTrace_C_RETURN’, and `arg' depends on
     the value of `what':

     Value of `what'                    Meaning of `arg'
                                        
     ------------------------------------------------------------------------------
                                        
     ‘PyTrace_CALL’                     Always `NULL'.
                                        
                                        
     ‘PyTrace_EXCEPTION’                Exception information as returned by
                                        *note sys.exc_info(): 8ca.
                                        
                                        
     ‘PyTrace_LINE’                     Always `NULL'.
                                        
                                        
     ‘PyTrace_RETURN’                   Value being returned to the caller, or
                                        `NULL' if caused by an exception.
                                        
                                        
     ‘PyTrace_C_CALL’                   Function object being called.
                                        
                                        
     ‘PyTrace_C_EXCEPTION’              Function object being called.
                                        
                                        
     ‘PyTrace_C_RETURN’                 Function object being called.
                                        

 -- C Variable: int PyTrace_CALL

     The value of the `what' parameter to a *note Py_tracefunc: 3795.
     function when a new call to a function or method is being reported,
     or a new entry into a generator.  Note that the creation of the
     iterator for a generator function is not reported as there is no
     control transfer to the Python bytecode in the corresponding frame.

 -- C Variable: int PyTrace_EXCEPTION

     The value of the `what' parameter to a *note Py_tracefunc: 3795.
     function when an exception has been raised.  The callback function
     is called with this value for `what' when after any bytecode is
     processed after which the exception becomes set within the frame
     being executed.  The effect of this is that as exception
     propagation causes the Python stack to unwind, the callback is
     called upon return to each frame as the exception propagates.  Only
     trace functions receives these events; they are not needed by the
     profiler.

 -- C Variable: int PyTrace_LINE

     The value passed as the `what' parameter to a trace function (but
     not a profiling function) when a line-number event is being
     reported.

 -- C Variable: int PyTrace_RETURN

     The value for the `what' parameter to *note Py_tracefunc: 3795.
     functions when a call is returning without propagating an
     exception.

 -- C Variable: int PyTrace_C_CALL

     The value for the `what' parameter to *note Py_tracefunc: 3795.
     functions when a C function is about to be called.

 -- C Variable: int PyTrace_C_EXCEPTION

     The value for the `what' parameter to *note Py_tracefunc: 3795.
     functions when a C function has raised an exception.

 -- C Variable: int PyTrace_C_RETURN

     The value for the `what' parameter to *note Py_tracefunc: 3795.
     functions when a C function has returned.

 -- C Function: void PyEval_SetProfile (Py_tracefunc func,
          PyObject *obj)

     Set the profiler function to `func'.  The `obj' parameter is passed
     to the function as its first parameter, and may be any Python
     object, or `NULL'. If the profile function needs to maintain state,
     using a different value for `obj' for each thread provides a
     convenient and thread-safe place to store it.  The profile function
     is called for all monitored events except the line-number events.

 -- C Function: void PyEval_SetTrace (Py_tracefunc func, PyObject *obj)

     Set the tracing function to `func'.  This is similar to *note
     PyEval_SetProfile(): abd, except the tracing function does receive
     line-number events.

 -- C Function: PyObject* PyEval_GetCallStats (PyObject *self)

     Return a tuple of function call counts.  There are constants
     defined for the positions within the tuple:

     Name                                Value
                                         
     ------------------------------------------------
                                         
     ‘PCALL_ALL’                         0
                                         
                                         
     ‘PCALL_FUNCTION’                    1
                                         
                                         
     ‘PCALL_FAST_FUNCTION’               2
                                         
                                         
     ‘PCALL_FASTER_FUNCTION’             3
                                         
                                         
     ‘PCALL_METHOD’                      4
                                         
                                         
     ‘PCALL_BOUND_METHOD’                5
                                         
                                         
     ‘PCALL_CFUNCTION’                   6
                                         
                                         
     ‘PCALL_TYPE’                        7
                                         
                                         
     ‘PCALL_GENERATOR’                   8
                                         
                                         
     ‘PCALL_OTHER’                       9
                                         
                                         
     ‘PCALL_POP’                         10
                                         

     ‘PCALL_FAST_FUNCTION’ means no argument tuple needs to be created.
     ‘PCALL_FASTER_FUNCTION’ means that the fast-path frame setup code
     is used.

     If there is a method call where the call can be optimized by
     changing the argument tuple and calling the function directly, it
     gets recorded twice.

     This function is only present if Python is compiled with
     ‘CALL_PROFILE’ defined.


File: python.info,  Node: Advanced Debugger Support,  Prev: Profiling and Tracing,  Up: Initialization Finalization and Threads

7.9.7 Advanced Debugger Support
-------------------------------

These functions are only intended to be used by advanced debugging
tools.

 -- C Function: PyInterpreterState* PyInterpreterState_Head ()

     Return the interpreter state object at the head of the list of all
     such objects.

 -- C Function: PyInterpreterState* PyInterpreterState_Next
          (PyInterpreterState *interp)

     Return the next interpreter state object after `interp' from the
     list of all such objects.

 -- C Function: PyThreadState * PyInterpreterState_ThreadHead
          (PyInterpreterState *interp)

     Return the pointer to the first *note PyThreadState: 3775. object
     in the list of threads associated with the interpreter `interp'.

 -- C Function: PyThreadState* PyThreadState_Next
          (PyThreadState *tstate)

     Return the next thread state object after `tstate' from the list of
     all such objects belonging to the same *note PyInterpreterState:
     377d. object.


File: python.info,  Node: Memory Management,  Next: Object Implementation Support,  Prev: Initialization Finalization and Threads,  Up: Python/C API Reference Manual

7.10 Memory Management
======================

* Menu:

* Overview: Overview<2>. 
* Raw Memory Interface:: 
* Memory Interface:: 
* Customize Memory Allocators:: 
* The pymalloc allocator:: 
* Examples: Examples<28>. 


File: python.info,  Node: Overview<2>,  Next: Raw Memory Interface,  Up: Memory Management

7.10.1 Overview
---------------

Memory management in Python involves a private heap containing all
Python objects and data structures.  The management of this private heap
is ensured internally by the `Python memory manager'.  The Python memory
manager has different components which deal with various dynamic storage
management aspects, like sharing, segmentation, preallocation or
caching.

At the lowest level, a raw memory allocator ensures that there is enough
room in the private heap for storing all Python-related data by
interacting with the memory manager of the operating system.  On top of
the raw memory allocator, several object-specific allocators operate on
the same heap and implement distinct memory management policies adapted
to the peculiarities of every object type.  For example, integer objects
are managed differently within the heap than strings, tuples or
dictionaries because integers imply different storage requirements and
speed/space tradeoffs.  The Python memory manager thus delegates some of
the work to the object-specific allocators, but ensures that the latter
operate within the bounds of the private heap.

It is important to understand that the management of the Python heap is
performed by the interpreter itself and that the user has no control
over it, even if she regularly manipulates object pointers to memory
blocks inside that heap.  The allocation of heap space for Python
objects and other internal buffers is performed on demand by the Python
memory manager through the Python/C API functions listed in this
document.

To avoid memory corruption, extension writers should never try to
operate on Python objects with the functions exported by the C library:
‘malloc()’, ‘calloc()’, ‘realloc()’ and ‘free()’.  This will result in
mixed calls between the C allocator and the Python memory manager with
fatal consequences, because they implement different algorithms and
operate on different heaps.  However, one may safely allocate and
release memory blocks with the C library allocator for individual
purposes, as shown in the following example:

     PyObject *res;
     char *buf = (char *) malloc(BUFSIZ); /* for I/O */

     if (buf == NULL)
         return PyErr_NoMemory();
     ...Do some I/O operation involving buf...
     res = PyBytes_FromString(buf);
     free(buf); /* malloc'ed */
     return res;

In this example, the memory request for the I/O buffer is handled by the
C library allocator.  The Python memory manager is involved only in the
allocation of the string object returned as a result.

In most situations, however, it is recommended to allocate memory from
the Python heap specifically because the latter is under control of the
Python memory manager.  For example, this is required when the
interpreter is extended with new object types written in C. Another
reason for using the Python heap is the desire to `inform' the Python
memory manager about the memory needs of the extension module.  Even
when the requested memory is used exclusively for internal,
highly-specific purposes, delegating all memory requests to the Python
memory manager causes the interpreter to have a more accurate image of
its memory footprint as a whole.  Consequently, under certain
circumstances, the Python memory manager may or may not trigger
appropriate actions, like garbage collection, memory compaction or other
preventive procedures.  Note that by using the C library allocator as
shown in the previous example, the allocated memory for the I/O buffer
escapes completely the Python memory manager.

See also
........

The *note PYTHONMALLOC: 151. environment variable can be used to
configure the memory allocators used by Python.

The *note PYTHONMALLOCSTATS: b13. environment variable can be used to
print statistics of the *note pymalloc memory allocator: 183. every time
a new pymalloc object arena is created, and on shutdown.


File: python.info,  Node: Raw Memory Interface,  Next: Memory Interface,  Prev: Overview<2>,  Up: Memory Management

7.10.2 Raw Memory Interface
---------------------------

The following function sets are wrappers to the system allocator.  These
functions are thread-safe, the *note GIL: 153. does not need to be held.

The default raw memory block allocator uses the following functions:
‘malloc()’, ‘calloc()’, ‘realloc()’ and ‘free()’; call ‘malloc(1)’ (or
‘calloc(1, 1)’) when requesting zero bytes.

New in version 3.4.

 -- C Function: void* PyMem_RawMalloc (size_t n)

     Allocates `n' bytes and returns a pointer of type ‘void*’ to the
     allocated memory, or `NULL' if the request fails.

     Requesting zero bytes returns a distinct non-`NULL' pointer if
     possible, as if ‘PyMem_RawMalloc(1)’ had been called instead.  The
     memory will not have been initialized in any way.

 -- C Function: void* PyMem_RawCalloc (size_t nelem, size_t elsize)

     Allocates `nelem' elements each whose size in bytes is `elsize' and
     returns a pointer of type ‘void*’ to the allocated memory, or
     `NULL' if the request fails.  The memory is initialized to zeros.

     Requesting zero elements or elements of size zero bytes returns a
     distinct non-`NULL' pointer if possible, as if ‘PyMem_RawCalloc(1,
     1)’ had been called instead.

     New in version 3.5.

 -- C Function: void* PyMem_RawRealloc (void *p, size_t n)

     Resizes the memory block pointed to by `p' to `n' bytes.  The
     contents will be unchanged to the minimum of the old and the new
     sizes.

     If `p' is `NULL', the call is equivalent to ‘PyMem_RawMalloc(n)’;
     else if `n' is equal to zero, the memory block is resized but is
     not freed, and the returned pointer is non-`NULL'.

     Unless `p' is `NULL', it must have been returned by a previous call
     to *note PyMem_RawMalloc(): 58b, *note PyMem_RawRealloc(): 58c. or
     *note PyMem_RawCalloc(): 37f.

     If the request fails, *note PyMem_RawRealloc(): 58c. returns `NULL'
     and `p' remains a valid pointer to the previous memory area.

 -- C Function: void PyMem_RawFree (void *p)

     Frees the memory block pointed to by `p', which must have been
     returned by a previous call to *note PyMem_RawMalloc(): 58b, *note
     PyMem_RawRealloc(): 58c. or *note PyMem_RawCalloc(): 37f.
     Otherwise, or if ‘PyMem_Free(p)’ has been called before, undefined
     behavior occurs.

     If `p' is `NULL', no operation is performed.


File: python.info,  Node: Memory Interface,  Next: Customize Memory Allocators,  Prev: Raw Memory Interface,  Up: Memory Management

7.10.3 Memory Interface
-----------------------

The following function sets, modeled after the ANSI C standard, but
specifying behavior when requesting zero bytes, are available for
allocating and releasing memory from the Python heap.

By default, these functions use *note pymalloc memory allocator: 183.

     Warning: The *note GIL: 153. must be held when using these
     functions.

Changed in version 3.6: The default allocator is now pymalloc instead of
system ‘malloc()’.

 -- C Function: void* PyMem_Malloc (size_t n)

     Allocates `n' bytes and returns a pointer of type ‘void*’ to the
     allocated memory, or `NULL' if the request fails.

     Requesting zero bytes returns a distinct non-`NULL' pointer if
     possible, as if ‘PyMem_Malloc(1)’ had been called instead.  The
     memory will not have been initialized in any way.

 -- C Function: void* PyMem_Calloc (size_t nelem, size_t elsize)

     Allocates `nelem' elements each whose size in bytes is `elsize' and
     returns a pointer of type ‘void*’ to the allocated memory, or
     `NULL' if the request fails.  The memory is initialized to zeros.

     Requesting zero elements or elements of size zero bytes returns a
     distinct non-`NULL' pointer if possible, as if ‘PyMem_Calloc(1, 1)’
     had been called instead.

     New in version 3.5.

 -- C Function: void* PyMem_Realloc (void *p, size_t n)

     Resizes the memory block pointed to by `p' to `n' bytes.  The
     contents will be unchanged to the minimum of the old and the new
     sizes.

     If `p' is `NULL', the call is equivalent to ‘PyMem_Malloc(n)’; else
     if `n' is equal to zero, the memory block is resized but is not
     freed, and the returned pointer is non-`NULL'.

     Unless `p' is `NULL', it must have been returned by a previous call
     to *note PyMem_Malloc(): 152, *note PyMem_Realloc(): 58d. or *note
     PyMem_Calloc(): 380.

     If the request fails, *note PyMem_Realloc(): 58d. returns `NULL'
     and `p' remains a valid pointer to the previous memory area.

 -- C Function: void PyMem_Free (void *p)

     Frees the memory block pointed to by `p', which must have been
     returned by a previous call to *note PyMem_Malloc(): 152, *note
     PyMem_Realloc(): 58d. or *note PyMem_Calloc(): 380.  Otherwise, or
     if ‘PyMem_Free(p)’ has been called before, undefined behavior
     occurs.

     If `p' is `NULL', no operation is performed.

The following type-oriented macros are provided for convenience.  Note
that `TYPE' refers to any C type.

 -- C Function: TYPE* PyMem_New (TYPE, size_t n)

     Same as *note PyMem_Malloc(): 152, but allocates ‘(n *
     sizeof(TYPE))’ bytes of memory.  Returns a pointer cast to ‘TYPE*’.
     The memory will not have been initialized in any way.

 -- C Function: TYPE* PyMem_Resize (void *p, TYPE, size_t n)

     Same as *note PyMem_Realloc(): 58d, but the memory block is resized
     to ‘(n * sizeof(TYPE))’ bytes.  Returns a pointer cast to ‘TYPE*’.
     On return, `p' will be a pointer to the new memory area, or `NULL'
     in the event of failure.

     This is a C preprocessor macro; `p' is always reassigned.  Save the
     original value of `p' to avoid losing memory when handling errors.

 -- C Function: void PyMem_Del (void *p)

     Same as *note PyMem_Free(): a26.

In addition, the following macro sets are provided for calling the
Python memory allocator directly, without involving the C API functions
listed above.  However, note that their use does not preserve binary
compatibility across Python versions and is therefore deprecated in
extension modules.

   * ‘PyMem_MALLOC(size)’

   * ‘PyMem_NEW(type, size)’

   * ‘PyMem_REALLOC(ptr, size)’

   * ‘PyMem_RESIZE(ptr, type, size)’

   * ‘PyMem_FREE(ptr)’

   * ‘PyMem_DEL(ptr)’


File: python.info,  Node: Customize Memory Allocators,  Next: The pymalloc allocator,  Prev: Memory Interface,  Up: Memory Management

7.10.4 Customize Memory Allocators
----------------------------------

New in version 3.4.

 -- C Type: PyMemAllocatorEx

     Structure used to describe a memory block allocator.  The structure
     has four fields:

     Field                                                          Meaning
                                                                    
     -----------------------------------------------------------------------------------------------------------
                                                                    
     ‘void *ctx’                                                    user context passed as first argument
                                                                    
                                                                    
     ‘void* malloc(void *ctx, size_t size)’                         allocate a memory block
                                                                    
                                                                    
     ‘void* calloc(void *ctx, size_t nelem, size_t elsize)’         allocate a memory block initialized with
                                                                    zeros
                                                                    
                                                                    
     ‘void* realloc(void *ctx, void *ptr, size_t new_size)’         allocate or resize a memory block
                                                                    
                                                                    
     ‘void free(void *ctx, void *ptr)’                              free a memory block
                                                                    

     Changed in version 3.5: The ‘PyMemAllocator’ structure was renamed
     to *note PyMemAllocatorEx: 3b9. and a new ‘calloc’ field was added.

 -- C Type: PyMemAllocatorDomain

     Enum used to identify an allocator domain.  Domains:

      -- C Variable: PYMEM_DOMAIN_RAW

          Functions:

             * *note PyMem_RawMalloc(): 58b.

             * *note PyMem_RawRealloc(): 58c.

             * *note PyMem_RawCalloc(): 37f.

             * *note PyMem_RawFree(): 3438.

      -- C Variable: PYMEM_DOMAIN_MEM

          Functions:

             * *note PyMem_Malloc(): 152,

             * *note PyMem_Realloc(): 58d.

             * *note PyMem_Calloc(): 380.

             * *note PyMem_Free(): a26.

      -- C Variable: PYMEM_DOMAIN_OBJ

          Functions:

             * ‘PyObject_Malloc()’

             * ‘PyObject_Realloc()’

             * ‘PyObject_Calloc()’

             * ‘PyObject_Free()’

 -- C Function: void PyMem_GetAllocator (PyMemAllocatorDomain domain,
          PyMemAllocatorEx *allocator)

     Get the memory block allocator of the specified domain.

 -- C Function: void PyMem_SetAllocator (PyMemAllocatorDomain domain,
          PyMemAllocatorEx *allocator)

     Set the memory block allocator of the specified domain.

     The new allocator must return a distinct non-NULL pointer when
     requesting zero bytes.

     For the *note PYMEM_DOMAIN_RAW: d1e. domain, the allocator must be
     thread-safe: the *note GIL: 153. is not held when the allocator is
     called.

     If the new allocator is not a hook (does not call the previous
     allocator), the *note PyMem_SetupDebugHooks(): 156. function must
     be called to reinstall the debug hooks on top on the new allocator.

 -- C Function: void PyMem_SetupDebugHooks (void)

     Setup hooks to detect bugs in the Python memory allocator
     functions.

     Newly allocated memory is filled with the byte ‘0xCB’, freed memory
     is filled with the byte ‘0xDB’.

     Runtime checks:

        - Detect API violations, ex: ‘PyObject_Free()’ called on a
          buffer allocated by *note PyMem_Malloc(): 152.

        - Detect write before the start of the buffer (buffer underflow)

        - Detect write after the end of the buffer (buffer overflow)

        - Check that the *note GIL: 153. is held when allocator
          functions of *note PYMEM_DOMAIN_OBJ: 154. (ex:
          ‘PyObject_Malloc()’) and *note PYMEM_DOMAIN_MEM: 155. (ex:
          *note PyMem_Malloc(): 152.) domains are called

     On error, the debug hooks use the *note tracemalloc: 111. module to
     get the traceback where a memory block was allocated.  The
     traceback is only displayed if *note tracemalloc: 111. is tracing
     Python memory allocations and the memory block was traced.

     These hooks are installed by default if Python is compiled in debug
     mode.  The *note PYTHONMALLOC: 151. environment variable can be
     used to install debug hooks on a Python compiled in release mode.

     Changed in version 3.6: This function now also works on Python
     compiled in release mode.  On error, the debug hooks now use *note
     tracemalloc: 111. to get the traceback where a memory block was
     allocated.  The debug hooks now also check if the GIL is held when
     functions of *note PYMEM_DOMAIN_OBJ: 154. and *note
     PYMEM_DOMAIN_MEM: 155. domains are called.


File: python.info,  Node: The pymalloc allocator,  Next: Examples<28>,  Prev: Customize Memory Allocators,  Up: Memory Management

7.10.5 The pymalloc allocator
-----------------------------

Python has a `pymalloc' allocator optimized for small objects (smaller
or equal to 512 bytes) with a short lifetime.  It uses memory mappings
called "arenas" with a fixed size of 256 KB. It falls back to *note
PyMem_RawMalloc(): 58b. and *note PyMem_RawRealloc(): 58c. for
allocations larger than 512 bytes.

`pymalloc' is the default allocator of the *note PYMEM_DOMAIN_MEM: 155.
(ex: ‘PyObject_Malloc()’) and *note PYMEM_DOMAIN_OBJ: 154. (ex:
‘PyObject_Malloc()’) domains.

The arena allocator uses the following functions:

   * ‘VirtualAlloc()’ and ‘VirtualFree()’ on Windows,

   * ‘mmap()’ and ‘munmap()’ if available,

   * ‘malloc()’ and ‘free()’ otherwise.

* Menu:

* Customize pymalloc Arena Allocator:: 


File: python.info,  Node: Customize pymalloc Arena Allocator,  Up: The pymalloc allocator

7.10.5.1 Customize pymalloc Arena Allocator
...........................................

New in version 3.4.

 -- C Type: PyObjectArenaAllocator

     Structure used to describe an arena allocator.  The structure has
     three fields:

     Field                                                  Meaning
                                                            
     ---------------------------------------------------------------------------------------------------
                                                            
     ‘void *ctx’                                            user context passed as first argument
                                                            
                                                            
     ‘void* alloc(void *ctx, size_t size)’                  allocate an arena of size bytes
                                                            
                                                            
     ‘void free(void *ctx, size_t size, void *ptr)’         free an arena
                                                            

 -- C Function: PyObject_GetArenaAllocator
          (PyObjectArenaAllocator *allocator)

     Get the arena allocator.

 -- C Function: PyObject_SetArenaAllocator
          (PyObjectArenaAllocator *allocator)

     Set the arena allocator.


File: python.info,  Node: Examples<28>,  Prev: The pymalloc allocator,  Up: Memory Management

7.10.6 Examples
---------------

Here is the example from section *note Overview: 37a3, rewritten so that
the I/O buffer is allocated from the Python heap by using the first
function set:

     PyObject *res;
     char *buf = (char *) PyMem_Malloc(BUFSIZ); /* for I/O */

     if (buf == NULL)
         return PyErr_NoMemory();
     /* ...Do some I/O operation involving buf... */
     res = PyBytes_FromString(buf);
     PyMem_Free(buf); /* allocated with PyMem_Malloc */
     return res;

The same code using the type-oriented function set:

     PyObject *res;
     char *buf = PyMem_New(char, BUFSIZ); /* for I/O */

     if (buf == NULL)
         return PyErr_NoMemory();
     /* ...Do some I/O operation involving buf... */
     res = PyBytes_FromString(buf);
     PyMem_Del(buf); /* allocated with PyMem_New */
     return res;

Note that in the two examples above, the buffer is always manipulated
via functions belonging to the same set.  Indeed, it is required to use
the same memory API family for a given memory block, so that the risk of
mixing different allocators is reduced to a minimum.  The following code
sequence contains two errors, one of which is labeled as `fatal' because
it mixes two different allocators operating on different heaps.

     char *buf1 = PyMem_New(char, BUFSIZ);
     char *buf2 = (char *) malloc(BUFSIZ);
     char *buf3 = (char *) PyMem_Malloc(BUFSIZ);
     ...
     PyMem_Del(buf3);  /* Wrong -- should be PyMem_Free() */
     free(buf2);       /* Right -- allocated via malloc() */
     free(buf1);       /* Fatal -- should be PyMem_Del()  */

In addition to the functions aimed at handling raw memory blocks from
the Python heap, objects in Python are allocated and released with *note
PyObject_New(): a96, *note PyObject_NewVar(): a97. and *note
PyObject_Del(): a98.

These will be explained in the next chapter on defining and implementing
new object types in C.


File: python.info,  Node: Object Implementation Support,  Next: API and ABI Versioning,  Prev: Memory Management,  Up: Python/C API Reference Manual

7.11 Object Implementation Support
==================================

This chapter describes the functions, types, and macros used when
defining new object types.

* Menu:

* Allocating Objects on the Heap:: 
* Common Object Structures:: 
* Type Objects: Type Objects<3>. 
* Number Object Structures:: 
* Mapping Object Structures:: 
* Sequence Object Structures:: 
* Buffer Object Structures:: 
* Async Object Structures:: 
* Supporting Cyclic Garbage Collection:: 


File: python.info,  Node: Allocating Objects on the Heap,  Next: Common Object Structures,  Up: Object Implementation Support

7.11.1 Allocating Objects on the Heap
-------------------------------------

 -- C Function: PyObject* _PyObject_New (PyTypeObject *type)
     `Return value: New reference.'

 -- C Function: PyVarObject* _PyObject_NewVar (PyTypeObject *type,
          Py_ssize_t size)
     `Return value: New reference.'

 -- C Function: PyObject* PyObject_Init (PyObject *op,
          PyTypeObject *type)
     `Return value: Borrowed reference.'  Initialize a newly-allocated
     object `op' with its type and initial reference.  Returns the
     initialized object.  If `type' indicates that the object
     participates in the cyclic garbage detector, it is added to the
     detector’s set of observed objects.  Other fields of the object are
     not affected.

 -- C Function: PyVarObject* PyObject_InitVar (PyVarObject *op,
          PyTypeObject *type, Py_ssize_t size)
     `Return value: Borrowed reference.'  This does everything *note
     PyObject_Init(): 37be. does, and also initializes the length
     information for a variable-size object.

 -- C Function: TYPE* PyObject_New (TYPE, PyTypeObject *type)
     `Return value: New reference.'  Allocate a new Python object using
     the C structure type `TYPE' and the Python type object `type'.
     Fields not defined by the Python object header are not initialized;
     the object’s reference count will be one.  The size of the memory
     allocation is determined from the *note tp_basicsize: 3336. field
     of the type object.

 -- C Function: TYPE* PyObject_NewVar (TYPE, PyTypeObject *type,
          Py_ssize_t size)
     `Return value: New reference.'  Allocate a new Python object using
     the C structure type `TYPE' and the Python type object `type'.
     Fields not defined by the Python object header are not initialized.
     The allocated memory allows for the `TYPE' structure plus `size'
     fields of the size given by the *note tp_itemsize: 3350. field of
     `type'.  This is useful for implementing objects like tuples, which
     are able to determine their size at construction time.  Embedding
     the array of fields into the same allocation decreases the number
     of allocations, improving the memory management efficiency.

 -- C Function: void PyObject_Del (PyObject *op)

     Releases memory allocated to an object using *note PyObject_New():
     a96. or *note PyObject_NewVar(): a97.  This is normally called from
     the *note tp_dealloc: 333c. handler specified in the object’s type.
     The fields of the object should not be accessed after this call as
     the memory is no longer a valid Python object.

 -- C Variable: PyObject _Py_NoneStruct

     Object which is visible in Python as ‘None’.  This should only be
     accessed using the *note Py_None: 3300. macro, which evaluates to a
     pointer to this object.

See also
........

*note PyModule_Create(): 3304.

     To allocate and create extension modules.


File: python.info,  Node: Common Object Structures,  Next: Type Objects<3>,  Prev: Allocating Objects on the Heap,  Up: Object Implementation Support

7.11.2 Common Object Structures
-------------------------------

There are a large number of structures which are used in the definition
of object types for Python.  This section describes these structures and
how they are used.

All Python objects ultimately share a small number of fields at the
beginning of the object’s representation in memory.  These are
represented by the *note PyObject: 9f5. and *note PyVarObject: 37c4.
types, which are defined, in turn, by the expansions of some macros also
used, whether directly or indirectly, in the definition of all other
Python objects.

 -- C Type: PyObject

     All object types are extensions of this type.  This is a type which
     contains the information Python needs to treat a pointer to an
     object as an object.  In a normal "release" build, it contains only
     the object’s reference count and a pointer to the corresponding
     type object.  Nothing is actually declared to be a *note PyObject:
     9f5, but every pointer to a Python object can be cast to a *note
     PyObject*: 9f5.  Access to the members must be done by using the
     macros *note Py_REFCNT: 37c5. and *note Py_TYPE: 37c6.

 -- C Type: PyVarObject

     This is an extension of *note PyObject: 9f5. that adds the
     ‘ob_size’ field.  This is only used for objects that have some
     notion of `length'.  This type does not often appear in the
     Python/C API. Access to the members must be done by using the
     macros *note Py_REFCNT: 37c5, *note Py_TYPE: 37c6, and *note
     Py_SIZE: 37c7.

 -- C Macro: PyObject_HEAD

     This is a macro used when declaring new types which represent
     objects without a varying length.  The PyObject_HEAD macro expands
     to:

          PyObject ob_base;

     See documentation of *note PyObject: 9f5. above.

 -- C Macro: PyObject_VAR_HEAD

     This is a macro used when declaring new types which represent
     objects with a length that varies from instance to instance.  The
     PyObject_VAR_HEAD macro expands to:

          PyVarObject ob_base;

     See documentation of *note PyVarObject: 37c4. above.

 -- C Macro: Py_TYPE (o)

     This macro is used to access the ‘ob_type’ member of a Python
     object.  It expands to:

          (((PyObject*)(o))->ob_type)

 -- C Macro: Py_REFCNT (o)

     This macro is used to access the ‘ob_refcnt’ member of a Python
     object.  It expands to:

          (((PyObject*)(o))->ob_refcnt)

 -- C Macro: Py_SIZE (o)

     This macro is used to access the ‘ob_size’ member of a Python
     object.  It expands to:

          (((PyVarObject*)(o))->ob_size)

 -- C Macro: PyObject_HEAD_INIT (type)

     This is a macro which expands to initialization values for a new
     *note PyObject: 9f5. type.  This macro expands to:

          _PyObject_EXTRA_INIT
          1, type,

 -- C Macro: PyVarObject_HEAD_INIT (type, size)

     This is a macro which expands to initialization values for a new
     *note PyVarObject: 37c4. type, including the ‘ob_size’ field.  This
     macro expands to:

          _PyObject_EXTRA_INIT
          1, type, size,

 -- C Type: PyCFunction

     Type of the functions used to implement most Python callables in C.
     Functions of this type take two *note PyObject*: 9f5. parameters
     and return one such value.  If the return value is `NULL', an
     exception shall have been set.  If not `NULL', the return value is
     interpreted as the return value of the function as exposed in
     Python.  The function must return a new reference.

 -- C Type: PyCFunctionWithKeywords

     Type of the functions used to implement Python callables in C that
     take keyword arguments: they take three *note PyObject*: 9f5.
     parameters and return one such value.  See *note PyCFunction: a58.
     above for the meaning of the return value.

 -- C Type: PyMethodDef

     Structure used to describe a method of an extension type.  This
     structure has four fields:

     Field                  C Type            Meaning
                                              
     -----------------------------------------------------------------------------
                                              
     ‘ml_name’              char *            name of the method
                                              
                                              
     ‘ml_meth’              PyCFunction       pointer to the C implementation
                                              
                                              
     ‘ml_flags’             int               flag bits indicating how the call
                                              should be constructed
                                              
                                              
     ‘ml_doc’               char *            points to the contents of the
                                              docstring
                                              

The ‘ml_meth’ is a C function pointer.  The functions may be of
different types, but they always return *note PyObject*: 9f5.  If the
function is not of the *note PyCFunction: a58, the compiler will require
a cast in the method table.  Even though *note PyCFunction: a58. defines
the first parameter as *note PyObject*: 9f5, it is common that the
method implementation uses the specific C type of the `self' object.

The ‘ml_flags’ field is a bitfield which can include the following
flags.  The individual flags indicate either a calling convention or a
binding convention.  Of the calling convention flags, only *note
METH_VARARGS: acc. and *note METH_KEYWORDS: 3303. can be combined (but
note that *note METH_KEYWORDS: 3303. alone is equivalent to
‘METH_VARARGS | METH_KEYWORDS’).  Any of the calling convention flags
can be combined with a binding flag.

 -- Data: METH_VARARGS

     This is the typical calling convention, where the methods have the
     type *note PyCFunction: a58.  The function expects two *note
     PyObject*: 9f5. values.  The first one is the `self' object for
     methods; for module functions, it is the module object.  The second
     parameter (often called `args') is a tuple object representing all
     arguments.  This parameter is typically processed using *note
     PyArg_ParseTuple(): 724. or *note PyArg_UnpackTuple(): aca.

 -- Data: METH_KEYWORDS

     Methods with these flags must be of type *note
     PyCFunctionWithKeywords: 37cb.  The function expects three
     parameters: `self', `args', and a dictionary of all the keyword
     arguments.  The flag is typically combined with *note METH_VARARGS:
     acc, and the parameters are typically processed using *note
     PyArg_ParseTupleAndKeywords(): a57.

 -- Data: METH_NOARGS

     Methods without parameters don’t need to check whether arguments
     are given if they are listed with the *note METH_NOARGS: a9a. flag.
     They need to be of type *note PyCFunction: a58.  The first
     parameter is typically named `self' and will hold a reference to
     the module or object instance.  In all cases the second parameter
     will be `NULL'.

 -- Data: METH_O

     Methods with a single object argument can be listed with the *note
     METH_O: acb. flag, instead of invoking *note PyArg_ParseTuple():
     724. with a ‘"O"’ argument.  They have the type *note PyCFunction:
     a58, with the `self' parameter, and a *note PyObject*: 9f5.
     parameter representing the single argument.

These two constants are not used to indicate the calling convention but
the binding when use with methods of classes.  These may not be used for
functions defined for modules.  At most one of these flags may be set
for any given method.

 -- Data: METH_CLASS

     The method will be passed the type object as the first parameter
     rather than an instance of the type.  This is used to create `class
     methods', similar to what is created when using the *note
     classmethod(): 5f4. built-in function.

 -- Data: METH_STATIC

     The method will be passed `NULL' as the first parameter rather than
     an instance of the type.  This is used to create `static methods',
     similar to what is created when using the *note staticmethod():
     5f6. built-in function.

One other constant controls whether a method is loaded in place of
another definition with the same method name.

 -- Data: METH_COEXIST

     The method will be loaded in place of existing definitions.
     Without `METH_COEXIST', the default is to skip repeated
     definitions.  Since slot wrappers are loaded before the method
     table, the existence of a `sq_contains' slot, for example, would
     generate a wrapped method named *note __contains__(): 99c. and
     preclude the loading of a corresponding PyCFunction with the same
     name.  With the flag defined, the PyCFunction will be loaded in
     place of the wrapper object and will co-exist with the slot.  This
     is helpful because calls to PyCFunctions are optimized more than
     wrapper object calls.

 -- C Type: PyMemberDef

     Structure which describes an attribute of a type which corresponds
     to a C struct member.  Its fields are:

     Field                  C Type            Meaning
                                              
     -----------------------------------------------------------------------------
                                              
     ‘name’                 char *            name of the member
                                              
                                              
     *note type: 376.       int               the type of the member in the C
                                              struct
                                              
                                              
     ‘offset’               Py_ssize_t        the offset in bytes that the
                                              member is located on the type’s
                                              object struct
                                              
                                              
     ‘flags’                int               flag bits indicating if the field
                                              should be read-only or writable
                                              
                                              
     ‘doc’                  char *            points to the contents of the
                                              docstring
                                              

     *note type: 376. can be one of many ‘T_’ macros corresponding to
     various C types.  When the member is accessed in Python, it will be
     converted to the equivalent Python type.

     Macro name          C type
                         
     -------------------------------------------
                         
     T_SHORT             short
                         
                         
     T_INT               int
                         
                         
     T_LONG              long
                         
                         
     T_FLOAT             float
                         
                         
     T_DOUBLE            double
                         
                         
     T_STRING            char *
                         
                         
     T_OBJECT            PyObject *
                         
                         
     T_OBJECT_EX         PyObject *
                         
                         
     T_CHAR              char
                         
                         
     T_BYTE              char
                         
                         
     T_UBYTE             unsigned char
                         
                         
     T_UINT              unsigned int
                         
                         
     T_USHORT            unsigned short
                         
                         
     T_ULONG             unsigned long
                         
                         
     T_BOOL              char
                         
                         
     T_LONGLONG          long long
                         
                         
     T_ULONGLONG         unsigned long long
                         
                         
     T_PYSSIZET          Py_ssize_t
                         

     ‘T_OBJECT’ and ‘T_OBJECT_EX’ differ in that ‘T_OBJECT’ returns
     ‘None’ if the member is `NULL' and ‘T_OBJECT_EX’ raises an *note
     AttributeError: 356.  Try to use ‘T_OBJECT_EX’ over ‘T_OBJECT’
     because ‘T_OBJECT_EX’ handles use of the *note del: c30. statement
     on that attribute more correctly than ‘T_OBJECT’.

     ‘flags’ can be 0 for write and read access or ‘READONLY’ for
     read-only access.  Using ‘T_STRING’ for *note type: 376. implies
     ‘READONLY’.  Only ‘T_OBJECT’ and ‘T_OBJECT_EX’ members can be
     deleted.  (They are set to `NULL').


File: python.info,  Node: Type Objects<3>,  Next: Number Object Structures,  Prev: Common Object Structures,  Up: Object Implementation Support

7.11.3 Type Objects
-------------------

Perhaps one of the most important structures of the Python object system
is the structure that defines a new type: the *note PyTypeObject: 3bc.
structure.  Type objects can be handled using any of the ‘PyObject_*()’
or ‘PyType_*()’ functions, but do not offer much that’s interesting to
most Python applications.  These objects are fundamental to how objects
behave, so they are very important to the interpreter itself and to any
extension module that implements new types.

Type objects are fairly large compared to most of the standard types.
The reason for the size is that each type object stores a large number
of values, mostly C function pointers, each of which implements a small
part of the type’s functionality.  The fields of the type object are
examined in detail in this section.  The fields will be described in the
order in which they occur in the structure.

Typedefs: unaryfunc, binaryfunc, ternaryfunc, inquiry, intargfunc,
intintargfunc, intobjargproc, intintobjargproc, objobjargproc,
destructor, freefunc, printfunc, getattrfunc, getattrofunc, setattrfunc,
setattrofunc, reprfunc, hashfunc

The structure definition for *note PyTypeObject: 3bc. can be found in
‘Include/object.h’.  For convenience of reference, this repeats the
definition found there:

     typedef struct _typeobject {
         PyObject_VAR_HEAD
         const char *tp_name; /* For printing, in format "<module>.<name>" */
         Py_ssize_t tp_basicsize, tp_itemsize; /* For allocation */

         /* Methods to implement standard operations */

         destructor tp_dealloc;
         printfunc tp_print;
         getattrfunc tp_getattr;
         setattrfunc tp_setattr;
         PyAsyncMethods *tp_as_async; /* formerly known as tp_compare (Python 2)
                                         or tp_reserved (Python 3) */
         reprfunc tp_repr;

         /* Method suites for standard classes */

         PyNumberMethods *tp_as_number;
         PySequenceMethods *tp_as_sequence;
         PyMappingMethods *tp_as_mapping;

         /* More standard operations (here for binary compatibility) */

         hashfunc tp_hash;
         ternaryfunc tp_call;
         reprfunc tp_str;
         getattrofunc tp_getattro;
         setattrofunc tp_setattro;

         /* Functions to access object as input/output buffer */
         PyBufferProcs *tp_as_buffer;

         /* Flags to define presence of optional/expanded features */
         unsigned long tp_flags;

         const char *tp_doc; /* Documentation string */

         /* call function for all accessible objects */
         traverseproc tp_traverse;

         /* delete references to contained objects */
         inquiry tp_clear;

         /* rich comparisons */
         richcmpfunc tp_richcompare;

         /* weak reference enabler */
         Py_ssize_t tp_weaklistoffset;

         /* Iterators */
         getiterfunc tp_iter;
         iternextfunc tp_iternext;

         /* Attribute descriptor and subclassing stuff */
         struct PyMethodDef *tp_methods;
         struct PyMemberDef *tp_members;
         struct PyGetSetDef *tp_getset;
         struct _typeobject *tp_base;
         PyObject *tp_dict;
         descrgetfunc tp_descr_get;
         descrsetfunc tp_descr_set;
         Py_ssize_t tp_dictoffset;
         initproc tp_init;
         allocfunc tp_alloc;
         newfunc tp_new;
         freefunc tp_free; /* Low-level free-memory routine */
         inquiry tp_is_gc; /* For PyObject_IS_GC */
         PyObject *tp_bases;
         PyObject *tp_mro; /* method resolution order */
         PyObject *tp_cache;
         PyObject *tp_subclasses;
         PyObject *tp_weaklist;
         destructor tp_del;

         /* Type attribute cache version tag. Added in version 2.6 */
         unsigned int tp_version_tag;

         destructor tp_finalize;

     } PyTypeObject;

The type object structure extends the *note PyVarObject: 37c4.
structure.  The ‘ob_size’ field is used for dynamic types (created by
‘type_new()’, usually called from a class statement).  Note that *note
PyType_Type: 355b. (the metatype) initializes *note tp_itemsize: 3350,
which means that its instances (i.e.  type objects) `must' have the
‘ob_size’ field.

 -- C Member: PyObject* PyObject._ob_next
 -- C Member: PyObject* PyObject._ob_prev

     These fields are only present when the macro ‘Py_TRACE_REFS’ is
     defined.  Their initialization to `NULL' is taken care of by the
     ‘PyObject_HEAD_INIT’ macro.  For statically allocated objects,
     these fields always remain `NULL'. For dynamically allocated
     objects, these two fields are used to link the object into a
     doubly-linked list of `all' live objects on the heap.  This could
     be used for various debugging purposes; currently the only use is
     to print the objects that are still alive at the end of a run when
     the environment variable *note PYTHONDUMPREFS: d21. is set.

     These fields are not inherited by subtypes.

 -- C Member: Py_ssize_t PyObject.ob_refcnt

     This is the type object’s reference count, initialized to ‘1’ by
     the ‘PyObject_HEAD_INIT’ macro.  Note that for statically allocated
     type objects, the type’s instances (objects whose ‘ob_type’ points
     back to the type) do `not' count as references.  But for
     dynamically allocated type objects, the instances `do' count as
     references.

     This field is not inherited by subtypes.

 -- C Member: PyTypeObject* PyObject.ob_type

     This is the type’s type, in other words its metatype.  It is
     initialized by the argument to the ‘PyObject_HEAD_INIT’ macro, and
     its value should normally be ‘&PyType_Type’.  However, for
     dynamically loadable extension modules that must be usable on
     Windows (at least), the compiler complains that this is not a valid
     initializer.  Therefore, the convention is to pass `NULL' to the
     ‘PyObject_HEAD_INIT’ macro and to initialize this field explicitly
     at the start of the module’s initialization function, before doing
     anything else.  This is typically done like this:

          Foo_Type.ob_type = &PyType_Type;

     This should be done before any instances of the type are created.
     *note PyType_Ready(): 3335. checks if ‘ob_type’ is `NULL', and if
     so, initializes it to the ‘ob_type’ field of the base class.  *note
     PyType_Ready(): 3335. will not change this field if it is non-zero.

     This field is inherited by subtypes.

 -- C Member: Py_ssize_t PyVarObject.ob_size

     For statically allocated type objects, this should be initialized
     to zero.  For dynamically allocated type objects, this field has a
     special internal meaning.

     This field is not inherited by subtypes.

 -- C Member: const char* PyTypeObject.tp_name

     Pointer to a NUL-terminated string containing the name of the type.
     For types that are accessible as module globals, the string should
     be the full module name, followed by a dot, followed by the type
     name; for built-in types, it should be just the type name.  If the
     module is a submodule of a package, the full package name is part
     of the full module name.  For example, a type named ‘T’ defined in
     module ‘M’ in subpackage ‘Q’ in package ‘P’ should have the *note
     tp_name: 3356. initializer ‘"P.Q.M.T"’.

     For dynamically allocated type objects, this should just be the
     type name, and the module name explicitly stored in the type dict
     as the value for key ‘'__module__'’.

     For statically allocated type objects, the tp_name field should
     contain a dot.  Everything before the last dot is made accessible
     as the ‘__module__’ attribute, and everything after the last dot is
     made accessible as the *note __name__: 8d3. attribute.

     If no dot is present, the entire *note tp_name: 3356. field is made
     accessible as the *note __name__: 8d3. attribute, and the
     ‘__module__’ attribute is undefined (unless explicitly set in the
     dictionary, as explained above).  This means your type will be
     impossible to pickle.

     This field is not inherited by subtypes.

 -- C Member: Py_ssize_t PyTypeObject.tp_basicsize
 -- C Member: Py_ssize_t PyTypeObject.tp_itemsize

     These fields allow calculating the size in bytes of instances of
     the type.

     There are two kinds of types: types with fixed-length instances
     have a zero *note tp_itemsize: 3350. field, types with
     variable-length instances have a non-zero *note tp_itemsize: 3350.
     field.  For a type with fixed-length instances, all instances have
     the same size, given in *note tp_basicsize: 3336.

     For a type with variable-length instances, the instances must have
     an ‘ob_size’ field, and the instance size is *note tp_basicsize:
     3336. plus N times *note tp_itemsize: 3350, where N is the "length"
     of the object.  The value of N is typically stored in the
     instance’s ‘ob_size’ field.  There are exceptions: for example,
     ints use a negative ‘ob_size’ to indicate a negative number, and N
     is ‘abs(ob_size)’ there.  Also, the presence of an ‘ob_size’ field
     in the instance layout doesn’t mean that the instance structure is
     variable-length (for example, the structure for the list type has
     fixed-length instances, yet those instances have a meaningful
     ‘ob_size’ field).

     The basic size includes the fields in the instance declared by the
     macro *note PyObject_HEAD: 8de. or *note PyObject_VAR_HEAD: 37c8.
     (whichever is used to declare the instance struct) and this in turn
     includes the ‘_ob_prev’ and ‘_ob_next’ fields if they are present.
     This means that the only correct way to get an initializer for the
     *note tp_basicsize: 3336. is to use the ‘sizeof’ operator on the
     struct used to declare the instance layout.  The basic size does
     not include the GC header size.

     These fields are inherited separately by subtypes.  If the base
     type has a non-zero *note tp_itemsize: 3350, it is generally not
     safe to set *note tp_itemsize: 3350. to a different non-zero value
     in a subtype (though this depends on the implementation of the base
     type).

     A note about alignment: if the variable items require a particular
     alignment, this should be taken care of by the value of *note
     tp_basicsize: 3336.  Example: suppose a type implements an array of
     ‘double’.  *note tp_itemsize: 3350. is ‘sizeof(double)’.  It is the
     programmer’s responsibility that *note tp_basicsize: 3336. is a
     multiple of ‘sizeof(double)’ (assuming this is the alignment
     requirement for ‘double’).

 -- C Member: destructor PyTypeObject.tp_dealloc

     A pointer to the instance destructor function.  This function must
     be defined unless the type guarantees that its instances will never
     be deallocated (as is the case for the singletons ‘None’ and
     ‘Ellipsis’).

     The destructor function is called by the *note Py_DECREF(): 32fd.
     and *note Py_XDECREF(): 32fc. macros when the new reference count
     is zero.  At this point, the instance is still in existence, but
     there are no references to it.  The destructor function should free
     all references which the instance owns, free all memory buffers
     owned by the instance (using the freeing function corresponding to
     the allocation function used to allocate the buffer), and finally
     (as its last action) call the type’s *note tp_free: 333d. function.
     If the type is not subtypable (doesn’t have the *note
     Py_TPFLAGS_BASETYPE: 3343. flag bit set), it is permissible to call
     the object deallocator directly instead of via *note tp_free: 333d.
     The object deallocator should be the one used to allocate the
     instance; this is normally *note PyObject_Del(): a98. if the
     instance was allocated using *note PyObject_New(): a96. or
     ‘PyObject_VarNew()’, or *note PyObject_GC_Del(): ac7. if the
     instance was allocated using *note PyObject_GC_New(): ac5. or *note
     PyObject_GC_NewVar(): ac6.

     This field is inherited by subtypes.

 -- C Member: printfunc PyTypeObject.tp_print

     Reserved slot, formerly used for print formatting in Python 2.x.

 -- C Member: getattrfunc PyTypeObject.tp_getattr

     An optional pointer to the get-attribute-string function.

     This field is deprecated.  When it is defined, it should point to a
     function that acts the same as the *note tp_getattro: 335a.
     function, but taking a C string instead of a Python string object
     to give the attribute name.  The signature is the same as for *note
     PyObject_GetAttrString(): 331b.

     This field is inherited by subtypes together with *note
     tp_getattro: 335a.: a subtype inherits both *note tp_getattr: 335d.
     and *note tp_getattro: 335a. from its base type when the subtype’s
     *note tp_getattr: 335d. and *note tp_getattro: 335a. are both
     `NULL'.

 -- C Member: setattrfunc PyTypeObject.tp_setattr

     An optional pointer to the function for setting and deleting
     attributes.

     This field is deprecated.  When it is defined, it should point to a
     function that acts the same as the *note tp_setattro: 335b.
     function, but taking a C string instead of a Python string object
     to give the attribute name.  The signature is the same as for *note
     PyObject_SetAttrString(): 34b2, but setting `v' to `NULL' to delete
     an attribute must be supported.

     This field is inherited by subtypes together with *note
     tp_setattro: 335b.: a subtype inherits both *note tp_setattr: 335e.
     and *note tp_setattro: 335b. from its base type when the subtype’s
     *note tp_setattr: 335e. and *note tp_setattro: 335b. are both
     `NULL'.

 -- C Member: PyAsyncMethods* tp_as_async

     Pointer to an additional structure that contains fields relevant
     only to objects which implement *note awaitable: 1ca. and *note
     asynchronous iterator: f76. protocols at the C-level.  See *note
     Async Object Structures: 37d6. for details.

     New in version 3.5: Formerly known as ‘tp_compare’ and
     ‘tp_reserved’.

 -- C Member: reprfunc PyTypeObject.tp_repr

     An optional pointer to a function that implements the built-in
     function *note repr(): 3bb.

     The signature is the same as for *note PyObject_Repr(): 585.; it
     must return a string or a Unicode object.  Ideally, this function
     should return a string that, when passed to *note eval(): 7e8,
     given a suitable environment, returns an object with the same
     value.  If this is not feasible, it should return a string starting
     with ‘'<'’ and ending with ‘'>'’ from which both the type and the
     value of the object can be deduced.

     When this field is not set, a string of the form ‘<%s object at
     %p>’ is returned, where ‘%s’ is replaced by the type name, and ‘%p’
     by the object’s memory address.

     This field is inherited by subtypes.

 -- C Member: PyNumberMethods* tp_as_number

     Pointer to an additional structure that contains fields relevant
     only to objects which implement the number protocol.  These fields
     are documented in *note Number Object Structures: 37d8.

     The ‘tp_as_number’ field is not inherited, but the contained fields
     are inherited individually.

 -- C Member: PySequenceMethods* tp_as_sequence

     Pointer to an additional structure that contains fields relevant
     only to objects which implement the sequence protocol.  These
     fields are documented in *note Sequence Object Structures: 37da.

     The ‘tp_as_sequence’ field is not inherited, but the contained
     fields are inherited individually.

 -- C Member: PyMappingMethods* tp_as_mapping

     Pointer to an additional structure that contains fields relevant
     only to objects which implement the mapping protocol.  These fields
     are documented in *note Mapping Object Structures: 37dc.

     The ‘tp_as_mapping’ field is not inherited, but the contained
     fields are inherited individually.

 -- C Member: hashfunc PyTypeObject.tp_hash

     An optional pointer to a function that implements the built-in
     function *note hash(): 5e6.

     The signature is the same as for *note PyObject_Hash(): 34be.; it
     must return a value of the type Py_hash_t.  The value ‘-1’ should
     not be returned as a normal return value; when an error occurs
     during the computation of the hash value, the function should set
     an exception and return ‘-1’.

     This field can be set explicitly to *note
     PyObject_HashNotImplemented(): 9a5. to block inheritance of the
     hash method from a parent type.  This is interpreted as the
     equivalent of ‘__hash__ = None’ at the Python level, causing
     ‘isinstance(o, collections.Hashable)’ to correctly return ‘False’.
     Note that the converse is also true - setting ‘__hash__ = None’ on
     a class at the Python level will result in the ‘tp_hash’ slot being
     set to *note PyObject_HashNotImplemented(): 9a5.

     When this field is not set, an attempt to take the hash of the
     object raises *note TypeError: 562.

     This field is inherited by subtypes together with *note
     tp_richcompare: 3360.: a subtype inherits both of *note
     tp_richcompare: 3360. and *note tp_hash: 37dd, when the subtype’s
     *note tp_richcompare: 3360. and *note tp_hash: 37dd. are both
     `NULL'.

 -- C Member: ternaryfunc PyTypeObject.tp_call

     An optional pointer to a function that implements calling the
     object.  This should be `NULL' if the object is not callable.  The
     signature is the same as for *note PyObject_Call(): 330f.

     This field is inherited by subtypes.

 -- C Member: reprfunc PyTypeObject.tp_str

     An optional pointer to a function that implements the built-in
     operation *note str(): 25a.  (Note that *note str: 25a. is a type
     now, and *note str(): 25a. calls the constructor for that type.
     This constructor calls *note PyObject_Str(): 586. to do the actual
     work, and *note PyObject_Str(): 586. will call this handler.)

     The signature is the same as for *note PyObject_Str(): 586.; it
     must return a string or a Unicode object.  This function should
     return a "friendly" string representation of the object, as this is
     the representation that will be used, among other things, by the
     *note print(): 481. function.

     When this field is not set, *note PyObject_Repr(): 585. is called
     to return a string representation.

     This field is inherited by subtypes.

 -- C Member: getattrofunc PyTypeObject.tp_getattro

     An optional pointer to the get-attribute function.

     The signature is the same as for *note PyObject_GetAttr(): 34ae.
     It is usually convenient to set this field to *note
     PyObject_GenericGetAttr(): 34af, which implements the normal way of
     looking for object attributes.

     This field is inherited by subtypes together with *note tp_getattr:
     335d.: a subtype inherits both *note tp_getattr: 335d. and *note
     tp_getattro: 335a. from its base type when the subtype’s *note
     tp_getattr: 335d. and *note tp_getattro: 335a. are both `NULL'.

 -- C Member: setattrofunc PyTypeObject.tp_setattro

     An optional pointer to the function for setting and deleting
     attributes.

     The signature is the same as for *note PyObject_SetAttr(): 34b0,
     but setting `v' to `NULL' to delete an attribute must be supported.
     It is usually convenient to set this field to *note
     PyObject_GenericSetAttr(): 34b4, which implements the normal way of
     setting object attributes.

     This field is inherited by subtypes together with *note tp_setattr:
     335e.: a subtype inherits both *note tp_setattr: 335e. and *note
     tp_setattro: 335b. from its base type when the subtype’s *note
     tp_setattr: 335e. and *note tp_setattro: 335b. are both `NULL'.

 -- C Member: PyBufferProcs* PyTypeObject.tp_as_buffer

     Pointer to an additional structure that contains fields relevant
     only to objects which implement the buffer interface.  These fields
     are documented in *note Buffer Object Structures: 351b.

     The *note tp_as_buffer: 37de. field is not inherited, but the
     contained fields are inherited individually.

 -- C Member: unsigned long PyTypeObject.tp_flags

     This field is a bit mask of various flags.  Some flags indicate
     variant semantics for certain situations; others are used to
     indicate that certain fields in the type object (or in the
     extension structures referenced via ‘tp_as_number’,
     ‘tp_as_sequence’, ‘tp_as_mapping’, and *note tp_as_buffer: 37de.)
     that were historically not always present are valid; if such a flag
     bit is clear, the type fields it guards must not be accessed and
     must be considered to have a zero or `NULL' value instead.

     Inheritance of this field is complicated.  Most flag bits are
     inherited individually, i.e.  if the base type has a flag bit set,
     the subtype inherits this flag bit.  The flag bits that pertain to
     extension structures are strictly inherited if the extension
     structure is inherited, i.e.  the base type’s value of the flag bit
     is copied into the subtype together with a pointer to the extension
     structure.  The *note Py_TPFLAGS_HAVE_GC: 334a. flag bit is
     inherited together with the *note tp_traverse: 2ea9. and *note
     tp_clear: 3353. fields, i.e.  if the *note Py_TPFLAGS_HAVE_GC:
     334a. flag bit is clear in the subtype and the *note tp_traverse:
     2ea9. and *note tp_clear: 3353. fields in the subtype exist and
     have `NULL' values.

     The following bit masks are currently defined; these can be ORed
     together using the ‘|’ operator to form the value of the *note
     tp_flags: 3560. field.  The macro *note PyType_HasFeature(): 3562.
     takes a type and a flags value, `tp' and `f', and checks whether
     ‘tp->tp_flags & f’ is non-zero.

      -- Data: Py_TPFLAGS_HEAPTYPE

          This bit is set when the type object itself is allocated on
          the heap.  In this case, the ‘ob_type’ field of its instances
          is considered a reference to the type, and the type object is
          INCREF’ed when a new instance is created, and DECREF’ed when
          an instance is destroyed (this does not apply to instances of
          subtypes; only the type referenced by the instance’s ob_type
          gets INCREF’ed or DECREF’ed).

      -- Data: Py_TPFLAGS_BASETYPE

          This bit is set when the type can be used as the base type of
          another type.  If this bit is clear, the type cannot be
          subtyped (similar to a "final" class in Java).

      -- Data: Py_TPFLAGS_READY

          This bit is set when the type object has been fully
          initialized by *note PyType_Ready(): 3335.

      -- Data: Py_TPFLAGS_READYING

          This bit is set while *note PyType_Ready(): 3335. is in the
          process of initializing the type object.

      -- Data: Py_TPFLAGS_HAVE_GC

          This bit is set when the object supports garbage collection.
          If this bit is set, instances must be created using *note
          PyObject_GC_New(): ac5. and destroyed using *note
          PyObject_GC_Del(): ac7.  More information in section *note
          Supporting Cyclic Garbage Collection: 37e2.  This bit also
          implies that the GC-related fields *note tp_traverse: 2ea9.
          and *note tp_clear: 3353. are present in the type object.

      -- Data: Py_TPFLAGS_DEFAULT

          This is a bitmask of all the bits that pertain to the
          existence of certain fields in the type object and its
          extension structures.  Currently, it includes the following
          bits: ‘Py_TPFLAGS_HAVE_STACKLESS_EXTENSION’,
          ‘Py_TPFLAGS_HAVE_VERSION_TAG’.

      -- Data: Py_TPFLAGS_LONG_SUBCLASS

      -- Data: Py_TPFLAGS_LIST_SUBCLASS

      -- Data: Py_TPFLAGS_TUPLE_SUBCLASS

      -- Data: Py_TPFLAGS_BYTES_SUBCLASS

      -- Data: Py_TPFLAGS_UNICODE_SUBCLASS

      -- Data: Py_TPFLAGS_DICT_SUBCLASS

      -- Data: Py_TPFLAGS_BASE_EXC_SUBCLASS

      -- Data: Py_TPFLAGS_TYPE_SUBCLASS

          These flags are used by functions such as *note
          PyLong_Check(): 3572. to quickly determine if a type is a
          subclass of a built-in type; such specific checks are faster
          than a generic check, like *note PyObject_IsInstance(): 374.
          Custom types that inherit from built-ins should have their
          *note tp_flags: 3560. set appropriately, or the code that
          interacts with such types will behave differently depending on
          what kind of check is used.

      -- Data: Py_TPFLAGS_HAVE_FINALIZE

          This bit is set when the *note tp_finalize: 38b. slot is
          present in the type structure.

          New in version 3.4.

 -- C Member: const char* PyTypeObject.tp_doc

     An optional pointer to a NUL-terminated C string giving the
     docstring for this type object.  This is exposed as the ‘__doc__’
     attribute on the type and instances of the type.

     This field is `not' inherited by subtypes.

 -- C Member: traverseproc PyTypeObject.tp_traverse

     An optional pointer to a traversal function for the garbage
     collector.  This is only used if the *note Py_TPFLAGS_HAVE_GC:
     334a. flag bit is set.  More information about Python’s garbage
     collection scheme can be found in section *note Supporting Cyclic
     Garbage Collection: 37e2.

     The *note tp_traverse: 2ea9. pointer is used by the garbage
     collector to detect reference cycles.  A typical implementation of
     a *note tp_traverse: 2ea9. function simply calls *note Py_VISIT():
     3348. on each of the instance’s members that are Python objects.
     For example, this is function ‘local_traverse()’ from the *note
     _thread: 3. extension module:

          static int
          local_traverse(localobject *self, visitproc visit, void *arg)
          {
              Py_VISIT(self->args);
              Py_VISIT(self->kw);
              Py_VISIT(self->dict);
              return 0;
          }

     Note that *note Py_VISIT(): 3348. is called only on those members
     that can participate in reference cycles.  Although there is also a
     ‘self->key’ member, it can only be `NULL' or a Python string and
     therefore cannot be part of a reference cycle.

     On the other hand, even if you know a member can never be part of a
     cycle, as a debugging aid you may want to visit it anyway just so
     the *note gc: 85. module’s *note get_referents(): 2ea8. function
     will include it.

     Note that *note Py_VISIT(): 3348. requires the `visit' and `arg'
     parameters to ‘local_traverse()’ to have these specific names;
     don’t name them just anything.

     This field is inherited by subtypes together with *note tp_clear:
     3353. and the *note Py_TPFLAGS_HAVE_GC: 334a. flag bit: the flag
     bit, *note tp_traverse: 2ea9, and *note tp_clear: 3353. are all
     inherited from the base type if they are all zero in the subtype.

 -- C Member: inquiry PyTypeObject.tp_clear

     An optional pointer to a clear function for the garbage collector.
     This is only used if the *note Py_TPFLAGS_HAVE_GC: 334a. flag bit
     is set.

     The *note tp_clear: 3353. member function is used to break
     reference cycles in cyclic garbage detected by the garbage
     collector.  Taken together, all *note tp_clear: 3353. functions in
     the system must combine to break all reference cycles.  This is
     subtle, and if in any doubt supply a *note tp_clear: 3353.
     function.  For example, the tuple type does not implement a *note
     tp_clear: 3353. function, because it’s possible to prove that no
     reference cycle can be composed entirely of tuples.  Therefore the
     *note tp_clear: 3353. functions of other types must be sufficient
     to break any cycle containing a tuple.  This isn’t immediately
     obvious, and there’s rarely a good reason to avoid implementing
     *note tp_clear: 3353.

     Implementations of *note tp_clear: 3353. should drop the instance’s
     references to those of its members that may be Python objects, and
     set its pointers to those members to `NULL', as in the following
     example:

          static int
          local_clear(localobject *self)
          {
              Py_CLEAR(self->key);
              Py_CLEAR(self->args);
              Py_CLEAR(self->kw);
              Py_CLEAR(self->dict);
              return 0;
          }

     The *note Py_CLEAR(): 3349. macro should be used, because clearing
     references is delicate: the reference to the contained object must
     not be decremented until after the pointer to the contained object
     is set to `NULL'. This is because decrementing the reference count
     may cause the contained object to become trash, triggering a chain
     of reclamation activity that may include invoking arbitrary Python
     code (due to finalizers, or weakref callbacks, associated with the
     contained object).  If it’s possible for such code to reference
     `self' again, it’s important that the pointer to the contained
     object be `NULL' at that time, so that `self' knows the contained
     object can no longer be used.  The *note Py_CLEAR(): 3349. macro
     performs the operations in a safe order.

     Because the goal of *note tp_clear: 3353. functions is to break
     reference cycles, it’s not necessary to clear contained objects
     like Python strings or Python integers, which can’t participate in
     reference cycles.  On the other hand, it may be convenient to clear
     all contained Python objects, and write the type’s *note
     tp_dealloc: 333c. function to invoke *note tp_clear: 3353.

     More information about Python’s garbage collection scheme can be
     found in section *note Supporting Cyclic Garbage Collection: 37e2.

     This field is inherited by subtypes together with *note
     tp_traverse: 2ea9. and the *note Py_TPFLAGS_HAVE_GC: 334a. flag
     bit: the flag bit, *note tp_traverse: 2ea9, and *note tp_clear:
     3353. are all inherited from the base type if they are all zero in
     the subtype.

 -- C Member: richcmpfunc PyTypeObject.tp_richcompare

     An optional pointer to the rich comparison function, whose
     signature is ‘PyObject *tp_richcompare(PyObject *a, PyObject *b,
     int op)’.  The first parameter is guaranteed to be an instance of
     the type that is defined by *note PyTypeObject: 3bc.

     The function should return the result of the comparison (usually
     ‘Py_True’ or ‘Py_False’).  If the comparison is undefined, it must
     return ‘Py_NotImplemented’, if another error occurred it must
     return ‘NULL’ and set an exception condition.

          Note: If you want to implement a type for which only a limited
          set of comparisons makes sense (e.g.  ‘==’ and ‘!=’, but not
          ‘<’ and friends), directly raise *note TypeError: 562. in the
          rich comparison function.

     This field is inherited by subtypes together with *note tp_hash:
     37dd.: a subtype inherits *note tp_richcompare: 3360. and *note
     tp_hash: 37dd. when the subtype’s *note tp_richcompare: 3360. and
     *note tp_hash: 37dd. are both `NULL'.

     The following constants are defined to be used as the third
     argument for *note tp_richcompare: 3360. and for *note
     PyObject_RichCompare(): 3361.:

     Constant             Comparison
                          
     --------------------------------------
                          
     ‘Py_LT’              ‘<’
                          
                          
     ‘Py_LE’              ‘<=’
                          
                          
     ‘Py_EQ’              ‘==’
                          
                          
     ‘Py_NE’              ‘!=’
                          
                          
     ‘Py_GT’              ‘>’
                          
                          
     ‘Py_GE’              ‘>=’
                          

 -- C Member: Py_ssize_t PyTypeObject.tp_weaklistoffset

     If the instances of this type are weakly referenceable, this field
     is greater than zero and contains the offset in the instance
     structure of the weak reference list head (ignoring the GC header,
     if present); this offset is used by ‘PyObject_ClearWeakRefs()’ and
     the ‘PyWeakref_*()’ functions.  The instance structure needs to
     include a field of type *note PyObject*: 9f5. which is initialized
     to `NULL'.

     Do not confuse this field with *note tp_weaklist: 37ec.; that is
     the list head for weak references to the type object itself.

     This field is inherited by subtypes, but see the rules listed
     below.  A subtype may override this offset; this means that the
     subtype uses a different weak reference list head than the base
     type.  Since the list head is always found via *note
     tp_weaklistoffset: 3369, this should not be a problem.

     When a type defined by a class statement has no *note __slots__:
     e09. declaration, and none of its base types are weakly
     referenceable, the type is made weakly referenceable by adding a
     weak reference list head slot to the instance layout and setting
     the *note tp_weaklistoffset: 3369. of that slot’s offset.

     When a type’s ‘__slots__’ declaration contains a slot named
     ‘__weakref__’, that slot becomes the weak reference list head for
     instances of the type, and the slot’s offset is stored in the
     type’s *note tp_weaklistoffset: 3369.

     When a type’s ‘__slots__’ declaration does not contain a slot named
     ‘__weakref__’, the type inherits its *note tp_weaklistoffset: 3369.
     from its base type.

 -- C Member: getiterfunc PyTypeObject.tp_iter

     An optional pointer to a function that returns an iterator for the
     object.  Its presence normally signals that the instances of this
     type are iterable (although sequences may be iterable without this
     function).

     This function has the same signature as *note PyObject_GetIter():
     34c6.

     This field is inherited by subtypes.

 -- C Member: iternextfunc PyTypeObject.tp_iternext

     An optional pointer to a function that returns the next item in an
     iterator.  When the iterator is exhausted, it must return `NULL'; a
     *note StopIteration: 191. exception may or may not be set.  When
     another error occurs, it must return `NULL' too.  Its presence
     signals that the instances of this type are iterators.

     Iterator types should also define the *note tp_iter: ab2. function,
     and that function should return the iterator instance itself (not a
     new iterator instance).

     This function has the same signature as *note PyIter_Next(): 3518.

     This field is inherited by subtypes.

 -- C Member: struct PyMethodDef* PyTypeObject.tp_methods

     An optional pointer to a static `NULL'-terminated array of *note
     PyMethodDef: a9d. structures, declaring regular methods of this
     type.

     For each entry in the array, an entry is added to the type’s
     dictionary (see *note tp_dict: 37ed. below) containing a method
     descriptor.

     This field is not inherited by subtypes (methods are inherited
     through a different mechanism).

 -- C Member: struct PyMemberDef* PyTypeObject.tp_members

     An optional pointer to a static `NULL'-terminated array of *note
     PyMemberDef: 968. structures, declaring regular data members
     (fields or slots) of instances of this type.

     For each entry in the array, an entry is added to the type’s
     dictionary (see *note tp_dict: 37ed. below) containing a member
     descriptor.

     This field is not inherited by subtypes (members are inherited
     through a different mechanism).

 -- C Member: struct PyGetSetDef* PyTypeObject.tp_getset

     An optional pointer to a static `NULL'-terminated array of
     ‘PyGetSetDef’ structures, declaring computed attributes of
     instances of this type.

     For each entry in the array, an entry is added to the type’s
     dictionary (see *note tp_dict: 37ed. below) containing a getset
     descriptor.

     This field is not inherited by subtypes (computed attributes are
     inherited through a different mechanism).

     Docs for PyGetSetDef:

          typedef PyObject *(*getter)(PyObject *, void *);
          typedef int (*setter)(PyObject *, PyObject *, void *);

          typedef struct PyGetSetDef {
              char *name;    /* attribute name */
              getter get;    /* C function to get the attribute */
              setter set;    /* C function to set or delete the attribute */
              char *doc;     /* optional doc string */
              void *closure; /* optional additional data for getter and setter */
          } PyGetSetDef;

 -- C Member: PyTypeObject* PyTypeObject.tp_base

     An optional pointer to a base type from which type properties are
     inherited.  At this level, only single inheritance is supported;
     multiple inheritance require dynamically creating a type object by
     calling the metatype.

     This field is not inherited by subtypes (obviously), but it
     defaults to ‘&PyBaseObject_Type’ (which to Python programmers is
     known as the type *note object: 5cb.).

 -- C Member: PyObject* PyTypeObject.tp_dict

     The type’s dictionary is stored here by *note PyType_Ready(): 3335.

     This field should normally be initialized to `NULL' before
     PyType_Ready is called; it may also be initialized to a dictionary
     containing initial attributes for the type.  Once *note
     PyType_Ready(): 3335. has initialized the type, extra attributes
     for the type may be added to this dictionary only if they don’t
     correspond to overloaded operations (like *note __add__(): e19.).

     This field is not inherited by subtypes (though the attributes
     defined in here are inherited through a different mechanism).

          Warning: It is not safe to use *note PyDict_SetItem(): 3323.
          on or otherwise modify *note tp_dict: 37ed. with the
          dictionary C-API.

 -- C Member: descrgetfunc PyTypeObject.tp_descr_get

     An optional pointer to a "descriptor get" function.

     The function signature is

          PyObject * tp_descr_get(PyObject *self, PyObject *obj, PyObject *type);

     This field is inherited by subtypes.

 -- C Member: descrsetfunc PyTypeObject.tp_descr_set

     An optional pointer to a function for setting and deleting a
     descriptor’s value.

     The function signature is

          int tp_descr_set(PyObject *self, PyObject *obj, PyObject *value);

     The `value' argument is set to `NULL' to delete the value.  This
     field is inherited by subtypes.

 -- C Member: Py_ssize_t PyTypeObject.tp_dictoffset

     If the instances of this type have a dictionary containing instance
     variables, this field is non-zero and contains the offset in the
     instances of the type of the instance variable dictionary; this
     offset is used by *note PyObject_GenericGetAttr(): 34af.

     Do not confuse this field with *note tp_dict: 37ed.; that is the
     dictionary for attributes of the type object itself.

     If the value of this field is greater than zero, it specifies the
     offset from the start of the instance structure.  If the value is
     less than zero, it specifies the offset from the `end' of the
     instance structure.  A negative offset is more expensive to use,
     and should only be used when the instance structure contains a
     variable-length part.  This is used for example to add an instance
     variable dictionary to subtypes of *note str: 25a. or *note tuple:
     25c.  Note that the *note tp_basicsize: 3336. field should account
     for the dictionary added to the end in that case, even though the
     dictionary is not included in the basic object layout.  On a system
     with a pointer size of 4 bytes, *note tp_dictoffset: 37f0. should
     be set to ‘-4’ to indicate that the dictionary is at the very end
     of the structure.

     The real dictionary offset in an instance can be computed from a
     negative *note tp_dictoffset: 37f0. as follows:

          dictoffset = tp_basicsize + abs(ob_size)*tp_itemsize + tp_dictoffset
          if dictoffset is not aligned on sizeof(void*):
              round up to sizeof(void*)

     where *note tp_basicsize: 3336, *note tp_itemsize: 3350. and *note
     tp_dictoffset: 37f0. are taken from the type object, and ‘ob_size’
     is taken from the instance.  The absolute value is taken because
     ints use the sign of ‘ob_size’ to store the sign of the number.
     (There’s never a need to do this calculation yourself; it is done
     for you by ‘_PyObject_GetDictPtr()’.)

     This field is inherited by subtypes, but see the rules listed
     below.  A subtype may override this offset; this means that the
     subtype instances store the dictionary at a difference offset than
     the base type.  Since the dictionary is always found via *note
     tp_dictoffset: 37f0, this should not be a problem.

     When a type defined by a class statement has no *note __slots__:
     e09. declaration, and none of its base types has an instance
     variable dictionary, a dictionary slot is added to the instance
     layout and the *note tp_dictoffset: 37f0. is set to that slot’s
     offset.

     When a type defined by a class statement has a ‘__slots__’
     declaration, the type inherits its *note tp_dictoffset: 37f0. from
     its base type.

     (Adding a slot named *note __dict__: df4. to the ‘__slots__’
     declaration does not have the expected effect, it just causes
     confusion.  Maybe this should be added as a feature just like
     ‘__weakref__’ though.)

 -- C Member: initproc PyTypeObject.tp_init

     An optional pointer to an instance initialization function.

     This function corresponds to the *note __init__(): 9d5. method of
     classes.  Like *note __init__(): 9d5, it is possible to create an
     instance without calling *note __init__(): 9d5, and it is possible
     to reinitialize an instance by calling its *note __init__(): 9d5.
     method again.

     The function signature is

          int tp_init(PyObject *self, PyObject *args, PyObject *kwds)

     The self argument is the instance to be initialized; the `args' and
     `kwds' arguments represent positional and keyword arguments of the
     call to *note __init__(): 9d5.

     The *note tp_init: 333f. function, if not `NULL', is called when an
     instance is created normally by calling its type, after the type’s
     *note tp_new: 3339. function has returned an instance of the type.
     If the *note tp_new: 3339. function returns an instance of some
     other type that is not a subtype of the original type, no *note
     tp_init: 333f. function is called; if *note tp_new: 3339. returns
     an instance of a subtype of the original type, the subtype’s *note
     tp_init: 333f. is called.

     This field is inherited by subtypes.

 -- C Member: allocfunc PyTypeObject.tp_alloc

     An optional pointer to an instance allocation function.

     The function signature is

          PyObject *tp_alloc(PyTypeObject *self, Py_ssize_t nitems)

     The purpose of this function is to separate memory allocation from
     memory initialization.  It should return a pointer to a block of
     memory of adequate length for the instance, suitably aligned, and
     initialized to zeros, but with ‘ob_refcnt’ set to ‘1’ and ‘ob_type’
     set to the type argument.  If the type’s *note tp_itemsize: 3350.
     is non-zero, the object’s ‘ob_size’ field should be initialized to
     `nitems' and the length of the allocated memory block should be
     ‘tp_basicsize + nitems*tp_itemsize’, rounded up to a multiple of
     ‘sizeof(void*)’; otherwise, `nitems' is not used and the length of
     the block should be *note tp_basicsize: 3336.

     Do not use this function to do any other instance initialization,
     not even to allocate additional memory; that should be done by
     *note tp_new: 3339.

     This field is inherited by static subtypes, but not by dynamic
     subtypes (subtypes created by a class statement); in the latter,
     this field is always set to *note PyType_GenericAlloc(): 3565, to
     force a standard heap allocation strategy.  That is also the
     recommended value for statically defined types.

 -- C Member: newfunc PyTypeObject.tp_new

     An optional pointer to an instance creation function.

     If this function is `NULL' for a particular type, that type cannot
     be called to create new instances; presumably there is some other
     way to create instances, like a factory function.

     The function signature is

          PyObject *tp_new(PyTypeObject *subtype, PyObject *args, PyObject *kwds)

     The subtype argument is the type of the object being created; the
     `args' and `kwds' arguments represent positional and keyword
     arguments of the call to the type.  Note that subtype doesn’t have
     to equal the type whose *note tp_new: 3339. function is called; it
     may be a subtype of that type (but not an unrelated type).

     The *note tp_new: 3339. function should call
     ‘subtype->tp_alloc(subtype, nitems)’ to allocate space for the
     object, and then do only as much further initialization as is
     absolutely necessary.  Initialization that can safely be ignored or
     repeated should be placed in the *note tp_init: 333f. handler.  A
     good rule of thumb is that for immutable types, all initialization
     should take place in *note tp_new: 3339, while for mutable types,
     most initialization should be deferred to *note tp_init: 333f.

     This field is inherited by subtypes, except it is not inherited by
     static types whose *note tp_base: 334d. is `NULL' or
     ‘&PyBaseObject_Type’.

 -- C Member: destructor PyTypeObject.tp_free

     An optional pointer to an instance deallocation function.  Its
     signature is ‘freefunc’:

          void tp_free(void *)

     An initializer that is compatible with this signature is
     ‘PyObject_Free()’.

     This field is inherited by static subtypes, but not by dynamic
     subtypes (subtypes created by a class statement); in the latter,
     this field is set to a deallocator suitable to match *note
     PyType_GenericAlloc(): 3565. and the value of the *note
     Py_TPFLAGS_HAVE_GC: 334a. flag bit.

 -- C Member: inquiry PyTypeObject.tp_is_gc

     An optional pointer to a function called by the garbage collector.

     The garbage collector needs to know whether a particular object is
     collectible or not.  Normally, it is sufficient to look at the
     object’s type’s *note tp_flags: 3560. field, and check the *note
     Py_TPFLAGS_HAVE_GC: 334a. flag bit.  But some types have a mixture
     of statically and dynamically allocated instances, and the
     statically allocated instances are not collectible.  Such types
     should define this function; it should return ‘1’ for a collectible
     instance, and ‘0’ for a non-collectible instance.  The signature is

          int tp_is_gc(PyObject *self)

     (The only example of this are types themselves.  The metatype,
     *note PyType_Type: 355b, defines this function to distinguish
     between statically and dynamically allocated types.)

     This field is inherited by subtypes.

 -- C Member: PyObject* PyTypeObject.tp_bases

     Tuple of base types.

     This is set for types created by a class statement.  It should be
     `NULL' for statically defined types.

     This field is not inherited.

 -- C Member: PyObject* PyTypeObject.tp_mro

     Tuple containing the expanded set of base types, starting with the
     type itself and ending with *note object: 5cb, in Method Resolution
     Order.

     This field is not inherited; it is calculated fresh by *note
     PyType_Ready(): 3335.

 -- C Member: destructor PyTypeObject.tp_finalize

     An optional pointer to an instance finalization function.  Its
     signature is ‘destructor’:

          void tp_finalize(PyObject *)

     If *note tp_finalize: 38b. is set, the interpreter calls it once
     when finalizing an instance.  It is called either from the garbage
     collector (if the instance is part of an isolated reference cycle)
     or just before the object is deallocated.  Either way, it is
     guaranteed to be called before attempting to break reference
     cycles, ensuring that it finds the object in a sane state.

     *note tp_finalize: 38b. should not mutate the current exception
     status; therefore, a recommended way to write a non-trivial
     finalizer is:

          static void
          local_finalize(PyObject *self)
          {
              PyObject *error_type, *error_value, *error_traceback;

              /* Save the current exception, if any. */
              PyErr_Fetch(&error_type, &error_value, &error_traceback);

              /* ... */

              /* Restore the saved exception. */
              PyErr_Restore(error_type, error_value, error_traceback);
          }

     For this field to be taken into account (even through inheritance),
     you must also set the *note Py_TPFLAGS_HAVE_FINALIZE: 37eb. flags
     bit.

     This field is inherited by subtypes.

     New in version 3.4.

     See also
     ........

     "Safe object finalization" ( PEP 442(1))

 -- C Member: PyObject* PyTypeObject.tp_cache

     Unused.  Not inherited.  Internal use only.

 -- C Member: PyObject* PyTypeObject.tp_subclasses

     List of weak references to subclasses.  Not inherited.  Internal
     use only.

 -- C Member: PyObject* PyTypeObject.tp_weaklist

     Weak reference list head, for weak references to this type object.
     Not inherited.  Internal use only.

The remaining fields are only defined if the feature test macro
‘COUNT_ALLOCS’ is defined, and are for internal use only.  They are
documented here for completeness.  None of these fields are inherited by
subtypes.

 -- C Member: Py_ssize_t PyTypeObject.tp_allocs

     Number of allocations.

 -- C Member: Py_ssize_t PyTypeObject.tp_frees

     Number of frees.

 -- C Member: Py_ssize_t PyTypeObject.tp_maxalloc

     Maximum simultaneously allocated objects.

 -- C Member: PyTypeObject* PyTypeObject.tp_next

     Pointer to the next type object with a non-zero *note tp_allocs:
     37f6. field.

Also, note that, in a garbage collected Python, tp_dealloc may be called
from any Python thread, not just the thread which created the object (if
the object becomes part of a refcount cycle, that cycle might be
collected by a garbage collection on any thread).  This is not a problem
for Python API calls, since the thread on which tp_dealloc is called
will own the Global Interpreter Lock (GIL). However, if the object being
destroyed in turn destroys objects from some other C or C++ library,
care should be taken to ensure that destroying those objects on the
thread which called tp_dealloc will not violate any assumptions of the
library.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0442


File: python.info,  Node: Number Object Structures,  Next: Mapping Object Structures,  Prev: Type Objects<3>,  Up: Object Implementation Support

7.11.4 Number Object Structures
-------------------------------

 -- C Type: PyNumberMethods

     This structure holds pointers to the functions which an object uses
     to implement the number protocol.  Each function is used by the
     function of similar name documented in the *note Number Protocol:
     34c7. section.

     Here is the structure definition:

          typedef struct {
               binaryfunc nb_add;
               binaryfunc nb_subtract;
               binaryfunc nb_multiply;
               binaryfunc nb_remainder;
               binaryfunc nb_divmod;
               ternaryfunc nb_power;
               unaryfunc nb_negative;
               unaryfunc nb_positive;
               unaryfunc nb_absolute;
               inquiry nb_bool;
               unaryfunc nb_invert;
               binaryfunc nb_lshift;
               binaryfunc nb_rshift;
               binaryfunc nb_and;
               binaryfunc nb_xor;
               binaryfunc nb_or;
               unaryfunc nb_int;
               void *nb_reserved;
               unaryfunc nb_float;

               binaryfunc nb_inplace_add;
               binaryfunc nb_inplace_subtract;
               binaryfunc nb_inplace_multiply;
               binaryfunc nb_inplace_remainder;
               ternaryfunc nb_inplace_power;
               binaryfunc nb_inplace_lshift;
               binaryfunc nb_inplace_rshift;
               binaryfunc nb_inplace_and;
               binaryfunc nb_inplace_xor;
               binaryfunc nb_inplace_or;

               binaryfunc nb_floor_divide;
               binaryfunc nb_true_divide;
               binaryfunc nb_inplace_floor_divide;
               binaryfunc nb_inplace_true_divide;

               unaryfunc nb_index;

               binaryfunc nb_matrix_multiply;
               binaryfunc nb_inplace_matrix_multiply;
          } PyNumberMethods;

          Note: Binary and ternary functions must check the type of all
          their operands, and implement the necessary conversions (at
          least one of the operands is an instance of the defined type).
          If the operation is not defined for the given operands, binary
          and ternary functions must return ‘Py_NotImplemented’, if
          another error occurred they must return ‘NULL’ and set an
          exception.

          Note: The ‘nb_reserved’ field should always be ‘NULL’.  It was
          previously called ‘nb_long’, and was renamed in Python 3.0.1.


File: python.info,  Node: Mapping Object Structures,  Next: Sequence Object Structures,  Prev: Number Object Structures,  Up: Object Implementation Support

7.11.5 Mapping Object Structures
--------------------------------

 -- C Type: PyMappingMethods

     This structure holds pointers to the functions which an object uses
     to implement the mapping protocol.  It has three members:

 -- C Member: lenfunc PyMappingMethods.mp_length

     This function is used by *note PyMapping_Length(): 350a. and *note
     PyObject_Size(): 34c3, and has the same signature.  This slot may
     be set to `NULL' if the object has no defined length.

 -- C Member: binaryfunc PyMappingMethods.mp_subscript

     This function is used by *note PyObject_GetItem(): 33a2. and has
     the same signature.  This slot must be filled for the *note
     PyMapping_Check(): 3508. function to return ‘1’, it can be `NULL'
     otherwise.

 -- C Member: objobjargproc PyMappingMethods.mp_ass_subscript

     This function is used by *note PyObject_SetItem(): 33a0. and *note
     PyObject_DelItem(): 34c4.  It has the same signature as *note
     PyObject_SetItem(): 33a0, but `v' can also be set to `NULL' to
     delete an item.  If this slot is `NULL', the object does not
     support item assignment and deletion.


File: python.info,  Node: Sequence Object Structures,  Next: Buffer Object Structures,  Prev: Mapping Object Structures,  Up: Object Implementation Support

7.11.6 Sequence Object Structures
---------------------------------

 -- C Type: PySequenceMethods

     This structure holds pointers to the functions which an object uses
     to implement the sequence protocol.

 -- C Member: lenfunc PySequenceMethods.sq_length

     This function is used by *note PySequence_Size(): 34f1. and *note
     PyObject_Size(): 34c3, and has the same signature.

 -- C Member: binaryfunc PySequenceMethods.sq_concat

     This function is used by *note PySequence_Concat(): 34f3. and has
     the same signature.  It is also used by the ‘+’ operator, after
     trying the numeric addition via the ‘nb_add’ slot.

 -- C Member: ssizeargfunc PySequenceMethods.sq_repeat

     This function is used by *note PySequence_Repeat(): 34f4. and has
     the same signature.  It is also used by the ‘*’ operator, after
     trying numeric multiplication via the ‘nb_multiply’ slot.

 -- C Member: ssizeargfunc PySequenceMethods.sq_item

     This function is used by *note PySequence_GetItem(): 33a3. and has
     the same signature.  This slot must be filled for the *note
     PySequence_Check(): 34f0. function to return ‘1’, it can be `NULL'
     otherwise.

     Negative indexes are handled as follows: if the ‘sq_length’ slot is
     filled, it is called and the sequence length is used to compute a
     positive index which is passed to ‘sq_item’.  If ‘sq_length’ is
     `NULL', the index is passed as is to the function.

 -- C Member: ssizeobjargproc PySequenceMethods.sq_ass_item

     This function is used by *note PySequence_SetItem(): 339f. and has
     the same signature.  This slot may be left to `NULL' if the object
     does not support item assignment and deletion.

 -- C Member: objobjproc PySequenceMethods.sq_contains

     This function may be used by *note PySequence_Contains(): 34fc. and
     has the same signature.  This slot may be left to `NULL', in this
     case *note PySequence_Contains(): 34fc. simply traverses the
     sequence until it finds a match.

 -- C Member: binaryfunc PySequenceMethods.sq_inplace_concat

     This function is used by *note PySequence_InPlaceConcat(): 34f5.
     and has the same signature.  It should modify its first operand,
     and return it.

 -- C Member: ssizeargfunc PySequenceMethods.sq_inplace_repeat

     This function is used by *note PySequence_InPlaceRepeat(): 34f6.
     and has the same signature.  It should modify its first operand,
     and return it.


File: python.info,  Node: Buffer Object Structures,  Next: Async Object Structures,  Prev: Sequence Object Structures,  Up: Object Implementation Support

7.11.7 Buffer Object Structures
-------------------------------

 -- C Type: PyBufferProcs

     This structure holds pointers to the functions required by the
     *note Buffer protocol: ff5.  The protocol defines how an exporter
     object can expose its internal data to consumer objects.

 -- C Member: getbufferproc PyBufferProcs.bf_getbuffer

     The signature of this function is:

          int (PyObject *exporter, Py_buffer *view, int flags);

     Handle a request to `exporter' to fill in `view' as specified by
     `flags'.  Except for point (3), an implementation of this function
     MUST take these steps:

       1. Check if the request can be met.  If not, raise
          ‘PyExc_BufferError’, set ‘view->obj’ to `NULL' and return -1.

       2. Fill in the requested fields.

       3. Increment an internal counter for the number of exports.

       4. Set ‘view->obj’ to `exporter' and increment ‘view->obj’.

       5. Return 0.

     If `exporter' is part of a chain or tree of buffer providers, two
     main schemes can be used:

        * Re-export: Each member of the tree acts as the exporting
          object and sets ‘view->obj’ to a new reference to itself.

        * Redirect: The buffer request is redirected to the root object
          of the tree.  Here, ‘view->obj’ will be a new reference to the
          root object.

     The individual fields of `view' are described in section *note
     Buffer structure: 351d, the rules how an exporter must react to
     specific requests are in section *note Buffer request types: 3530.

     All memory pointed to in the *note Py_buffer: 75d. structure
     belongs to the exporter and must remain valid until there are no
     consumers left.  *note format: 3529, *note shape: 352b, *note
     strides: 3520, *note suboffsets: 352d. and *note internal: 352f.
     are read-only for the consumer.

     *note PyBuffer_FillInfo(): 3523. provides an easy way of exposing a
     simple bytes buffer while dealing correctly with all request types.

     *note PyObject_GetBuffer(): 996. is the interface for the consumer
     that wraps this function.

 -- C Member: releasebufferproc PyBufferProcs.bf_releasebuffer

     The signature of this function is:

          void (PyObject *exporter, Py_buffer *view);

     Handle a request to release the resources of the buffer.  If no
     resources need to be released, *note
     PyBufferProcs.bf_releasebuffer: 380b. may be `NULL'. Otherwise, a
     standard implementation of this function will take these optional
     steps:

       1. Decrement an internal counter for the number of exports.

       2. If the counter is 0, free all memory associated with `view'.

     The exporter MUST use the *note internal: 352f. field to keep track
     of buffer-specific resources.  This field is guaranteed to remain
     constant, while a consumer MAY pass a copy of the original buffer
     as the `view' argument.

     This function MUST NOT decrement ‘view->obj’, since that is done
     automatically in *note PyBuffer_Release(): 9cb. (this scheme is
     useful for breaking reference cycles).

     *note PyBuffer_Release(): 9cb. is the interface for the consumer
     that wraps this function.


File: python.info,  Node: Async Object Structures,  Next: Supporting Cyclic Garbage Collection,  Prev: Buffer Object Structures,  Up: Object Implementation Support

7.11.8 Async Object Structures
------------------------------

New in version 3.5.

 -- C Type: PyAsyncMethods

     This structure holds pointers to the functions required to
     implement *note awaitable: 1ca. and *note asynchronous iterator:
     f76. objects.

     Here is the structure definition:

          typedef struct {
              unaryfunc am_await;
              unaryfunc am_aiter;
              unaryfunc am_anext;
          } PyAsyncMethods;

 -- C Member: unaryfunc PyAsyncMethods.am_await

     The signature of this function is:

          PyObject *am_await(PyObject *self)

     The returned object must be an iterator, i.e.  *note
     PyIter_Check(): 3517. must return ‘1’ for it.

     This slot may be set to `NULL' if an object is not an *note
     awaitable: 1ca.

 -- C Member: unaryfunc PyAsyncMethods.am_aiter

     The signature of this function is:

          PyObject *am_aiter(PyObject *self)

     Must return an *note awaitable: 1ca. object.  See *note
     __anext__(): e5b. for details.

     This slot may be set to `NULL' if an object does not implement
     asynchronous iteration protocol.

 -- C Member: unaryfunc PyAsyncMethods.am_anext

     The signature of this function is:

          PyObject *am_anext(PyObject *self)

     Must return an *note awaitable: 1ca. object.  See *note
     __anext__(): e5b. for details.  This slot may be set to `NULL'.


File: python.info,  Node: Supporting Cyclic Garbage Collection,  Prev: Async Object Structures,  Up: Object Implementation Support

7.11.9 Supporting Cyclic Garbage Collection
-------------------------------------------

Python’s support for detecting and collecting garbage which involves
circular references requires support from object types which are
"containers" for other objects which may also be containers.  Types
which do not store references to other objects, or which only store
references to atomic types (such as numbers or strings), do not need to
provide any explicit support for garbage collection.

To create a container type, the *note tp_flags: 3560. field of the type
object must include the *note Py_TPFLAGS_HAVE_GC: 334a. and provide an
implementation of the *note tp_traverse: 2ea9. handler.  If instances of
the type are mutable, a *note tp_clear: 3353. implementation must also
be provided.

 -- Data: Py_TPFLAGS_HAVE_GC

     Objects with a type with this flag set must conform with the rules
     documented here.  For convenience these objects will be referred to
     as container objects.

Constructors for container types must conform to two rules:

  1. The memory for the object must be allocated using *note
     PyObject_GC_New(): ac5. or *note PyObject_GC_NewVar(): ac6.

  2. Once all the fields which may contain references to other
     containers are initialized, it must call *note PyObject_GC_Track():
     ac8.

 -- C Function: TYPE* PyObject_GC_New (TYPE, PyTypeObject *type)

     Analogous to *note PyObject_New(): a96. but for container objects
     with the *note Py_TPFLAGS_HAVE_GC: 334a. flag set.

 -- C Function: TYPE* PyObject_GC_NewVar (TYPE, PyTypeObject *type,
          Py_ssize_t size)

     Analogous to *note PyObject_NewVar(): a97. but for container
     objects with the *note Py_TPFLAGS_HAVE_GC: 334a. flag set.

 -- C Function: TYPE* PyObject_GC_Resize (TYPE, PyVarObject *op,
          Py_ssize_t newsize)

     Resize an object allocated by *note PyObject_NewVar(): a97.
     Returns the resized object or `NULL' on failure.

 -- C Function: void PyObject_GC_Track (PyObject *op)

     Adds the object `op' to the set of container objects tracked by the
     collector.  The collector can run at unexpected times so objects
     must be valid while being tracked.  This should be called once all
     the fields followed by the *note tp_traverse: 2ea9. handler become
     valid, usually near the end of the constructor.

 -- C Function: void _PyObject_GC_TRACK (PyObject *op)

     A macro version of *note PyObject_GC_Track(): ac8.  It should not
     be used for extension modules.

Similarly, the deallocator for the object must conform to a similar pair
of rules:

  1. Before fields which refer to other containers are invalidated,
     *note PyObject_GC_UnTrack(): ac9. must be called.

  2. The object’s memory must be deallocated using *note
     PyObject_GC_Del(): ac7.

 -- C Function: void PyObject_GC_Del (void *op)

     Releases memory allocated to an object using *note
     PyObject_GC_New(): ac5. or *note PyObject_GC_NewVar(): ac6.

 -- C Function: void PyObject_GC_UnTrack (void *op)

     Remove the object `op' from the set of container objects tracked by
     the collector.  Note that *note PyObject_GC_Track(): ac8. can be
     called again on this object to add it back to the set of tracked
     objects.  The deallocator (*note tp_dealloc: 333c. handler) should
     call this for the object before any of the fields used by the *note
     tp_traverse: 2ea9. handler become invalid.

 -- C Function: void _PyObject_GC_UNTRACK (PyObject *op)

     A macro version of *note PyObject_GC_UnTrack(): ac9.  It should not
     be used for extension modules.

The *note tp_traverse: 2ea9. handler accepts a function parameter of
this type:

 -- C Type: int (*visitproc) (PyObject *object, void *arg)

     Type of the visitor function passed to the *note tp_traverse: 2ea9.
     handler.  The function should be called with an object to traverse
     as `object' and the third parameter to the *note tp_traverse: 2ea9.
     handler as `arg'.  The Python core uses several visitor functions
     to implement cyclic garbage detection; it’s not expected that users
     will need to write their own visitor functions.

The *note tp_traverse: 2ea9. handler must have the following type:

 -- C Type: int (*traverseproc) (PyObject *self, visitproc visit,
          void *arg)

     Traversal function for a container object.  Implementations must
     call the `visit' function for each object directly contained by
     `self', with the parameters to `visit' being the contained object
     and the `arg' value passed to the handler.  The `visit' function
     must not be called with a `NULL' object argument.  If `visit'
     returns a non-zero value that value should be returned immediately.

To simplify writing *note tp_traverse: 2ea9. handlers, a *note
Py_VISIT(): 3348. macro is provided.  In order to use this macro, the
*note tp_traverse: 2ea9. implementation must name its arguments exactly
`visit' and `arg':

 -- C Function: void Py_VISIT (PyObject *o)

     Call the `visit' callback, with arguments `o' and `arg'.  If
     `visit' returns a non-zero value, then return it.  Using this
     macro, *note tp_traverse: 2ea9. handlers look like:

          static int
          my_traverse(Noddy *self, visitproc visit, void *arg)
          {
              Py_VISIT(self->foo);
              Py_VISIT(self->bar);
              return 0;
          }

The *note tp_clear: 3353. handler must be of the *note inquiry: 3818.
type, or `NULL' if the object is immutable.

 -- C Type: int (*inquiry) (PyObject *self)

     Drop references that may have created reference cycles.  Immutable
     objects do not have to define this method since they can never
     directly create reference cycles.  Note that the object must still
     be valid after calling this method (don’t just call *note
     Py_DECREF(): 32fd. on a reference).  The collector will call this
     method if it detects that this object is involved in a reference
     cycle.


File: python.info,  Node: API and ABI Versioning,  Prev: Object Implementation Support,  Up: Python/C API Reference Manual

7.12 API and ABI Versioning
===========================

‘PY_VERSION_HEX’ is the Python version number encoded in a single
integer.

For example if the ‘PY_VERSION_HEX’ is set to ‘0x030401a2’, the
underlying version information can be found by treating it as a 32 bit
number in the following manner:

     Bytes       Bits (big endian order)       Meaning
                                               
     -----------------------------------------------------------------------------------------------
                                               
     ‘1’         ‘1-8’                         ‘PY_MAJOR_VERSION’ (the ‘3’ in ‘3.4.1a2’)
                                               
                                               
     ‘2’         ‘9-16’                        ‘PY_MINOR_VERSION’ (the ‘4’ in ‘3.4.1a2’)
                                               
                                               
     ‘3’         ‘17-24’                       ‘PY_MICRO_VERSION’ (the ‘1’ in ‘3.4.1a2’)
                                               
                                               
     ‘4’         ‘25-28’                       ‘PY_RELEASE_LEVEL’ (‘0xA’ for alpha, ‘0xB’ for
                                               beta, ‘0xC’ for release candidate and ‘0xF’ for
                                               final), in this case it is alpha.
                                               
                                               
                 ‘29-32’                       ‘PY_RELEASE_SERIAL’ (the ‘2’ in ‘3.4.1a2’, zero
                                               for final releases)
                                               

Thus ‘3.4.1a2’ is hexversion ‘0x030401a2’.

All the given macros are defined in Include/patchlevel.h(1).

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Include/patchlevel.h


File: python.info,  Node: Distributing Python Modules,  Next: Installing Python Modules,  Prev: Python/C API Reference Manual,  Up: Top

8 Distributing Python Modules
*****************************


Email: <distutils-sig@python.org>

As a popular open source development project, Python has an active
supporting community of contributors and users that also make their
software available for other Python developers to use under open source
license terms.

This allows Python users to share and collaborate effectively,
benefiting from the solutions others have already created to common (and
sometimes even rare!)  problems, as well as potentially contributing
their own solutions to the common pool.

This guide covers the distribution part of the process.  For a guide to
installing other Python projects, refer to the *note installation guide:
3e5.

     Note: For corporate and other institutional users, be aware that
     many organisations have their own policies around using and
     contributing to open source software.  Please take such policies
     into account when making use of the distribution and installation
     tools provided with Python.

* Menu:

* Key terms:: 
* Open source licensing and collaboration:: 
* Installing the tools:: 
* Reading the guide:: 
* How do I...?: How do I ?. 


File: python.info,  Node: Key terms,  Next: Open source licensing and collaboration,  Up: Distributing Python Modules

8.1 Key terms
=============

   * the Python Packaging Index(1) is a public repository of open source
     licensed packages made available for use by other Python users

   * the Python Packaging Authority(2) are the group of developers and
     documentation authors responsible for the maintenance and evolution
     of the standard packaging tools and the associated metadata and
     file format standards.  They maintain a variety of tools,
     documentation and issue trackers on both GitHub(3) and
     BitBucket(4).

   * *note distutils: 37. is the original build and distribution system
     first added to the Python standard library in 1998.  While direct
     use of *note distutils: 37. is being phased out, it still laid the
     foundation for the current packaging and distribution
     infrastructure, and it not only remains part of the standard
     library, but its name lives on in other ways (such as the name of
     the mailing list used to coordinate Python packaging standards
     development).

   * setuptools(5) is a (largely) drop-in replacement for *note
     distutils: 37. first published in 2004.  Its most notable addition
     over the unmodified *note distutils: 37. tools was the ability to
     declare dependencies on other packages.  It is currently
     recommended as a more regularly updated alternative to *note
     distutils: 37. that offers consistent support for more recent
     packaging standards across a wide range of Python versions.

   * wheel(6) (in this context) is a project that adds the ‘bdist_wheel’
     command to *note distutils: 37./setuptools(7).  This produces a
     cross platform binary packaging format (called "wheels" or "wheel
     files" and defined in PEP 427(8)) that allows Python libraries,
     even those including binary extensions, to be installed on a system
     without needing to be built locally.

   ---------- Footnotes ----------

   (1) https://pypi.python.org/pypi

   (2) https://www.pypa.io/

   (3) https://github.com/pypa

   (4) https://bitbucket.org/pypa/

   (5) https://setuptools.pypa.io/en/latest/setuptools.html

   (6) https://wheel.readthedocs.org

   (7) https://setuptools.pypa.io/en/latest/setuptools.html

   (8) https://www.python.org/dev/peps/pep-0427


File: python.info,  Node: Open source licensing and collaboration,  Next: Installing the tools,  Prev: Key terms,  Up: Distributing Python Modules

8.2 Open source licensing and collaboration
===========================================

In most parts of the world, software is automatically covered by
copyright.  This means that other developers require explicit permission
to copy, use, modify and redistribute the software.

Open source licensing is a way of explicitly granting such permission in
a relatively consistent way, allowing developers to share and
collaborate efficiently by making common solutions to various problems
freely available.  This leaves many developers free to spend more time
focusing on the problems that are relatively unique to their specific
situation.

The distribution tools provided with Python are designed to make it
reasonably straightforward for developers to make their own
contributions back to that common pool of software if they choose to do
so.

The same distribution tools can also be used to distribute software
within an organisation, regardless of whether that software is published
as open source software or not.


File: python.info,  Node: Installing the tools,  Next: Reading the guide,  Prev: Open source licensing and collaboration,  Up: Distributing Python Modules

8.3 Installing the tools
========================

The standard library does not include build tools that support modern
Python packaging standards, as the core development team has found that
it is important to have standard tools that work consistently, even on
older versions of Python.

The currently recommended build and distribution tools can be installed
by invoking the ‘pip’ module at the command line:

     python -m pip install setuptools wheel twine

     Note: For POSIX users (including Mac OS X and Linux users), these
     instructions assume the use of a *note virtual environment: cd3.

     For Windows users, these instructions assume that the option to
     adjust the system PATH environment variable was selected when
     installing Python.

The Python Packaging User Guide includes more details on the currently
recommended tools(1).

   ---------- Footnotes ----------

   (1) 
https://packaging.python.org/en/latest/current/#packaging-tool-recommendations


File: python.info,  Node: Reading the guide,  Next: How do I ?,  Prev: Installing the tools,  Up: Distributing Python Modules

8.4 Reading the guide
=====================

The Python Packaging User Guide covers the various key steps and
elements involved in creating a project:

   * Project structure(1)

   * Building and packaging the project(2)

   * Uploading the project to the Python Packaging Index(3)

   ---------- Footnotes ----------

   (1) https://packaging.python.org/en/latest/distributing/

   (2) 
https://packaging.python.org/en/latest/distributing/#packaging-your-project

   (3) 
https://packaging.python.org/en/latest/distributing/#uploading-your-project-to-pypi


File: python.info,  Node: How do I ?,  Prev: Reading the guide,  Up: Distributing Python Modules

8.5 How do I...?
================

These are quick answers or links for some common tasks.

* Menu:

* ... choose a name for my project?: choose a name for my project?. 
* ... create and distribute binary extensions?: create and distribute binary extensions?. 


File: python.info,  Node: choose a name for my project?,  Next: create and distribute binary extensions?,  Up: How do I ?

8.5.1 ... choose a name for my project?
---------------------------------------

This isn’t an easy topic, but here are a few tips:

   * check the Python Packaging Index to see if the name is already in
     use

   * check popular hosting sites like GitHub, BitBucket, etc to see if
     there is already a project with that name

   * check what comes up in a web search for the name you’re considering

   * avoid particularly common words, especially ones with multiple
     meanings, as they can make it difficult for users to find your
     software when searching for it


File: python.info,  Node: create and distribute binary extensions?,  Prev: choose a name for my project?,  Up: How do I ?

8.5.2 ... create and distribute binary extensions?
--------------------------------------------------

This is actually quite a complex topic, with a variety of alternatives
available depending on exactly what you’re aiming to achieve.  See the
Python Packaging User Guide for more information and recommendations.

See also
........

Python Packaging User Guide: Binary Extensions(1)

   ---------- Footnotes ----------

   (1) https://packaging.python.org/en/latest/extensions


File: python.info,  Node: Installing Python Modules,  Next: Python HOWTOs,  Prev: Distributing Python Modules,  Up: Top

9 Installing Python Modules
***************************


Email: <distutils-sig@python.org>

As a popular open source development project, Python has an active
supporting community of contributors and users that also make their
software available for other Python developers to use under open source
license terms.

This allows Python users to share and collaborate effectively,
benefiting from the solutions others have already created to common (and
sometimes even rare!)  problems, as well as potentially contributing
their own solutions to the common pool.

This guide covers the installation part of the process.  For a guide to
creating and sharing your own Python projects, refer to the *note
distribution guide: 3e6.

     Note: For corporate and other institutional users, be aware that
     many organisations have their own policies around using and
     contributing to open source software.  Please take such policies
     into account when making use of the distribution and installation
     tools provided with Python.

* Menu:

* Key terms: Key terms<2>. 
* Basic usage:: 
* How do I ...?: How do I ?<2>. 
* Common installation issues:: 


File: python.info,  Node: Key terms<2>,  Next: Basic usage,  Up: Installing Python Modules

9.1 Key terms
=============

   * ‘pip’ is the preferred installer program.  Starting with Python
     3.4, it is included by default with the Python binary installers.

   * a virtual environment is a semi-isolated Python environment that
     allows packages to be installed for use by a particular
     application, rather than being installed system wide

   * ‘pyvenv’ is the standard tool for creating virtual environments,
     and has been part of Python since Python 3.3.  Starting with Python
     3.4, it defaults to installing ‘pip’ into all created virtual
     environments

   * ‘virtualenv’ is a third party alternative (and predecessor) to
     ‘pyvenv’.  It allows virtual environments to be used on versions of
     Python prior to 3.4, which either don’t provide ‘pyvenv’ at all, or
     aren’t able to automatically install ‘pip’ into created
     environments.

   * the Python Packaging Index(1) is a public repository of open source
     licensed packages made available for use by other Python users

   * the Python Packaging Authority(2) are the group of developers and
     documentation authors responsible for the maintenance and evolution
     of the standard packaging tools and the associated metadata and
     file format standards.  They maintain a variety of tools,
     documentation and issue trackers on both GitHub(3) and
     BitBucket(4).

   * ‘distutils’ is the original build and distribution system first
     added to the Python standard library in 1998.  While direct use of
     ‘distutils’ is being phased out, it still laid the foundation for
     the current packaging and distribution infrastructure, and it not
     only remains part of the standard library, but its name lives on in
     other ways (such as the name of the mailing list used to coordinate
     Python packaging standards development).

   ---------- Footnotes ----------

   (1) https://pypi.python.org/pypi

   (2) https://www.pypa.io/en/latest/

   (3) https://github.com/pypa

   (4) https://bitbucket.org/pypa/


File: python.info,  Node: Basic usage,  Next: How do I ?<2>,  Prev: Key terms<2>,  Up: Installing Python Modules

9.2 Basic usage
===============

The standard packaging tools are all designed to be used from the
command line.

The following command will install the latest version of a module and
its dependencies from the Python Packaging Index:

     python -m pip install SomePackage

     Note: For POSIX users (including Mac OS X and Linux users), the
     examples in this guide assume the use of a *note virtual
     environment: cd3.

     For Windows users, the examples in this guide assume that the
     option to adjust the system PATH environment variable was selected
     when installing Python.

It’s also possible to specify an exact or minimum version directly on
the command line.  When using comparator operators such as ‘>’, ‘<’ or
some other special character which get interpreted by shell, the package
name and the version should be enclosed within double quotes:

     python -m pip install SomePackage==1.0.4    # specific version
     python -m pip install "SomePackage>=1.0.4"  # minimum version

Normally, if a suitable module is already installed, attempting to
install it again will have no effect.  Upgrading existing modules must
be requested explicitly:

     python -m pip install --upgrade SomePackage

More information and resources regarding ‘pip’ and its capabilities can
be found in the Python Packaging User Guide(1).

‘pyvenv’ has its own documentation at *note pyvenv - Creating virtual
environments: 3e1.  Installing into an active virtual environment uses
the commands shown above.

See also
........

Python Packaging User Guide: Installing Python Distribution Packages(2)

   ---------- Footnotes ----------

   (1) https://packaging.python.org

   (2) https://packaging.python.org/en/latest/installing/


File: python.info,  Node: How do I ?<2>,  Next: Common installation issues,  Prev: Basic usage,  Up: Installing Python Modules

9.3 How do I ...?
=================

These are quick answers or links for some common tasks.

* Menu:

* ... install pip in versions of Python prior to Python 3.4?: install pip in versions of Python prior to Python 3 4?. 
* ... install packages just for the current user?: install packages just for the current user?. 
* ... install scientific Python packages?: install scientific Python packages?. 
* ... work with multiple versions of Python installed in parallel?: work with multiple versions of Python installed in parallel?. 


File: python.info,  Node: install pip in versions of Python prior to Python 3 4?,  Next: install packages just for the current user?,  Up: How do I ?<2>

9.3.1 ... install ‘pip’ in versions of Python prior to Python 3.4?
------------------------------------------------------------------

Python only started bundling ‘pip’ with Python 3.4.  For earlier
versions, ‘pip’ needs to be "bootstrapped" as described in the Python
Packaging User Guide.

See also
........

Python Packaging User Guide: Requirements for Installing Packages(1)

   ---------- Footnotes ----------

   (1) 
https://packaging.python.org/en/latest/installing/#requirements-for-installing-packages


File: python.info,  Node: install packages just for the current user?,  Next: install scientific Python packages?,  Prev: install pip in versions of Python prior to Python 3 4?,  Up: How do I ?<2>

9.3.2 ... install packages just for the current user?
-----------------------------------------------------

Passing the ‘--user’ option to ‘python -m pip install’ will install a
package just for the current user, rather than for all users of the
system.


File: python.info,  Node: install scientific Python packages?,  Next: work with multiple versions of Python installed in parallel?,  Prev: install packages just for the current user?,  Up: How do I ?<2>

9.3.3 ... install scientific Python packages?
---------------------------------------------

A number of scientific Python packages have complex binary dependencies,
and aren’t currently easy to install using ‘pip’ directly.  At this
point in time, it will often be easier for users to install these
packages by other means(1) rather than attempting to install them with
‘pip’.

See also
........

Python Packaging User Guide: Installing Scientific Packages(2)

   ---------- Footnotes ----------

   (1) https://packaging.python.org/en/latest/science/

   (2) https://packaging.python.org/en/latest/science/


File: python.info,  Node: work with multiple versions of Python installed in parallel?,  Prev: install scientific Python packages?,  Up: How do I ?<2>

9.3.4 ... work with multiple versions of Python installed in parallel?
----------------------------------------------------------------------

On Linux, Mac OS X and other POSIX systems, use the versioned Python
commands in combination with the ‘-m’ switch to run the appropriate copy
of ‘pip’:

     python2   -m pip install SomePackage  # default Python 2
     python2.7 -m pip install SomePackage  # specifically Python 2.7
     python3   -m pip install SomePackage  # default Python 3
     python3.4 -m pip install SomePackage  # specifically Python 3.4

(appropriately versioned ‘pip’ commands may also be available)

On Windows, use the ‘py’ Python launcher in combination with the ‘-m’
switch:

     py -2   -m pip install SomePackage  # default Python 2
     py -2.7 -m pip install SomePackage  # specifically Python 2.7
     py -3   -m pip install SomePackage  # default Python 3
     py -3.4 -m pip install SomePackage  # specifically Python 3.4


File: python.info,  Node: Common installation issues,  Prev: How do I ?<2>,  Up: Installing Python Modules

9.4 Common installation issues
==============================

* Menu:

* Installing into the system Python on Linux:: 
* Installing binary extensions:: 


File: python.info,  Node: Installing into the system Python on Linux,  Next: Installing binary extensions,  Up: Common installation issues

9.4.1 Installing into the system Python on Linux
------------------------------------------------

On Linux systems, a Python installation will typically be included as
part of the distribution.  Installing into this Python installation
requires root access to the system, and may interfere with the operation
of the system package manager and other components of the system if a
component is unexpectedly upgraded using ‘pip’.

On such systems, it is often better to use a virtual environment or a
per-user installation when installing packages with ‘pip’.


File: python.info,  Node: Installing binary extensions,  Prev: Installing into the system Python on Linux,  Up: Common installation issues

9.4.2 Installing binary extensions
----------------------------------

Python has typically relied heavily on source based distribution, with
end users being expected to compile extension modules from source as
part of the installation process.

With the introduction of support for the binary ‘wheel’ format, and the
ability to publish wheels for at least Windows and Mac OS X through the
Python Packaging Index, this problem is expected to diminish over time,
as users are more regularly able to install pre-built extensions rather
than needing to build them themselves.

Some of the solutions for installing scientific software(1) that is not
yet available as pre-built ‘wheel’ files may also help with obtaining
other binary extensions without needing to build them locally.

See also
........

Python Packaging User Guide: Binary Extensions(2)

   ---------- Footnotes ----------

   (1) https://packaging.python.org/en/latest/science/

   (2) https://packaging.python.org/en/latest/extensions/


File: python.info,  Node: Python HOWTOs,  Next: Python Frequently Asked Questions,  Prev: Installing Python Modules,  Up: Top

10 Python HOWTOs
****************

Python HOWTOs are documents that cover a single, specific topic, and
attempt to cover it fairly completely.  Modelled on the Linux
Documentation Project’s HOWTO collection, this collection is an effort
to foster documentation that’s more detailed than the Python Library
Reference.

Currently, the HOWTOs are:

* Menu:

* Porting Python 2 Code to Python 3:: 
* Porting Extension Modules to Python 3:: 
* Curses Programming with Python:: 
* Descriptor HowTo Guide:: 
* Functional Programming HOWTO:: 
* Logging HOWTO:: 
* Logging Cookbook:: 
* Regular Expression HOWTO:: 
* Socket Programming HOWTO:: 
* Sorting HOW TO:: 
* Unicode HOWTO:: 
* HOWTO Fetch Internet Resources Using The urllib Package:: 
* Argparse Tutorial:: 
* An introduction to the ipaddress module:: 
* Argument Clinic How-To:: 


File: python.info,  Node: Porting Python 2 Code to Python 3,  Next: Porting Extension Modules to Python 3,  Up: Python HOWTOs

10.1 Porting Python 2 Code to Python 3
======================================


author: Brett Cannon

Abstract
........

With Python 3 being the future of Python while Python 2 is still in
active use, it is good to have your project available for both major
releases of Python.  This guide is meant to help you figure out how best
to support both Python 2 & 3 simultaneously.

If you are looking to port an extension module instead of pure Python
code, please see *note Porting Extension Modules to Python 3: 8e3.

If you would like to read one core Python developer’s take on why Python
3 came into existence, you can read Nick Coghlan’s Python 3 Q & A(1).

For help with porting, you can email the python-porting(2) mailing list
with questions.

* Menu:

* The Short Explanation:: 
* Details:: 
* Dropping Python 2 support completely:: 

   ---------- Footnotes ----------

   (1) 
http://ncoghlan-devs-python-notes.readthedocs.org/en/latest/python3/questions_and_answers.html

   (2) https://mail.python.org/mailman/listinfo/python-porting


File: python.info,  Node: The Short Explanation,  Next: Details,  Up: Porting Python 2 Code to Python 3

10.1.1 The Short Explanation
----------------------------

To make your project be single-source Python 2/3 compatible, the basic
steps are:

  1. Only worry about supporting Python 2.7

  2. Make sure you have good test coverage (coverage.py(1) can help;
     ‘pip install coverage’)

  3. Learn the differences between Python 2 & 3

  4. Use Modernize(2) or Futurize(3) to update your code (‘pip install
     modernize’ or ‘pip install future’, respectively)

  5. Use Pylint(4) to help make sure you don’t regress on your Python 3
     support (‘pip install pylint’)

  6. Use caniusepython3(5) to find out which of your dependencies are
     blocking your use of Python 3 (‘pip install caniusepython3’)

  7. Once your dependencies are no longer blocking you, use continuous
     integration to make sure you stay compatible with Python 2 & 3
     (tox(6) can help test against multiple versions of Python; ‘pip
     install tox’)

If you are dropping support for Python 2 entirely, then after you learn
the differences between Python 2 & 3 you can run 2to3(7) over your code
and skip the rest of the steps outlined above.

   ---------- Footnotes ----------

   (1) https://pypi.python.org/pypi/coverage

   (2) http://python-modernize.readthedocs.org/en/latest/

   (3) http://python-future.org/automatic_conversion.html

   (4) https://pypi.python.org/pypi/pylint

   (5) https://pypi.python.org/pypi/caniusepython3

   (6) https://pypi.python.org/pypi/tox

   (7) https://docs.python.org/3/library/2to3.html


File: python.info,  Node: Details,  Next: Dropping Python 2 support completely,  Prev: The Short Explanation,  Up: Porting Python 2 Code to Python 3

10.1.2 Details
--------------

A key point about supporting Python 2 & 3 simultaneously is that you can
start `today'!  Even if your dependencies are not supporting Python 3
yet that does not mean you can’t modernize your code `now' to support
Python 3.  Most changes required to support Python 3 lead to cleaner
code using newer practices even in Python 2.

Another key point is that modernizing your Python 2 code to also support
Python 3 is largely automated for you.  While you might have to make
some API decisions thanks to Python 3 clarifying text data versus binary
data, the lower-level work is now mostly done for you and thus can at
least benefit from the automated changes immediately.

Keep those key points in mind while you read on about the details of
porting your code to support Python 2 & 3 simultaneously.

* Menu:

* Drop support for Python 2.6 and older: Drop support for Python 2 6 and older. 
* Make sure you specify the proper version support in your setup.py file: Make sure you specify the proper version support in your setup py file. 
* Have good test coverage:: 
* Learn the differences between Python 2 & 3:: 
* Update your code:: 
* Prevent compatibility regressions:: 
* Check which dependencies block your transition:: 
* Update your setup.py file to denote Python 3 compatibility: Update your setup py file to denote Python 3 compatibility. 
* Use continuous integration to stay compatible:: 


File: python.info,  Node: Drop support for Python 2 6 and older,  Next: Make sure you specify the proper version support in your setup py file,  Up: Details

10.1.2.1 Drop support for Python 2.6 and older
..............................................

While you can make Python 2.5 work with Python 3, it is `much' easier if
you only have to work with Python 2.7.  If dropping Python 2.5 is not an
option then the six(1) project can help you support Python 2.5 & 3
simultaneously (‘pip install six’).  Do realize, though, that nearly all
the projects listed in this HOWTO will not be available to you.

If you are able to skip Python 2.5 and older, then the required changes
to your code should continue to look and feel like idiomatic Python
code.  At worst you will have to use a function instead of a method in
some instances or have to import a function instead of using a built-in
one, but otherwise the overall transformation should not feel foreign to
you.

But you should aim for only supporting Python 2.7.  Python 2.6 is no
longer supported and thus is not receiving bugfixes.  This means `you'
will have to work around any issues you come across with Python 2.6.
There are also some tools mentioned in this HOWTO which do not support
Python 2.6 (e.g., Pylint(2)), and this will become more commonplace as
time goes on.  It will simply be easier for you if you only support the
versions of Python that you have to support.

   ---------- Footnotes ----------

   (1) https://pypi.python.org/pypi/six

   (2) https://pypi.python.org/pypi/pylint


File: python.info,  Node: Make sure you specify the proper version support in your setup py file,  Next: Have good test coverage,  Prev: Drop support for Python 2 6 and older,  Up: Details

10.1.2.2 Make sure you specify the proper version support in your ‘setup.py’ file
.................................................................................

In your ‘setup.py’ file you should have the proper trove classifier(1)
specifying what versions of Python you support.  As your project does
not support Python 3 yet you should at least have ‘Programming Language
:: Python :: 2 :: Only’ specified.  Ideally you should also specify each
major/minor version of Python that you do support, e.g.  ‘Programming
Language :: Python :: 2.7’.

   ---------- Footnotes ----------

   (1) https://pypi.python.org/pypi?%3Aaction=list_classifiers


File: python.info,  Node: Have good test coverage,  Next: Learn the differences between Python 2 & 3,  Prev: Make sure you specify the proper version support in your setup py file,  Up: Details

10.1.2.3 Have good test coverage
................................

Once you have your code supporting the oldest version of Python 2 you
want it to, you will want to make sure your test suite has good
coverage.  A good rule of thumb is that if you want to be confident
enough in your test suite that any failures that appear after having
tools rewrite your code are actual bugs in the tools and not in your
code.  If you want a number to aim for, try to get over 80% coverage
(and don’t feel bad if you can’t easily get past 90%).  If you don’t
already have a tool to measure test coverage then coverage.py(1) is
recommended.

   ---------- Footnotes ----------

   (1) https://pypi.python.org/pypi/coverage


File: python.info,  Node: Learn the differences between Python 2 & 3,  Next: Update your code,  Prev: Have good test coverage,  Up: Details

10.1.2.4 Learn the differences between Python 2 & 3
...................................................

Once you have your code well-tested you are ready to begin porting your
code to Python 3!  But to fully understand how your code is going to
change and what you want to look out for while you code, you will want
to learn what changes Python 3 makes in terms of Python 2.  Typically
the two best ways of doing that is reading the "What’s New"(1) doc for
each release of Python 3 and the Porting to Python 3(2) book (which is
free online).  There is also a handy cheat sheet(3) from the
Python-Future project.

   ---------- Footnotes ----------

   (1) https://docs.python.org/3/whatsnew/index.html

   (2) http://python3porting.com/

   (3) http://python-future.org/compatible_idioms.html


File: python.info,  Node: Update your code,  Next: Prevent compatibility regressions,  Prev: Learn the differences between Python 2 & 3,  Up: Details

10.1.2.5 Update your code
.........................

Once you feel like you know what is different in Python 3 compared to
Python 2, it’s time to update your code!  You have a choice between two
tools in porting your code automatically: Modernize(1) and Futurize(2).
Which tool you choose will depend on how much like Python 3 you want
your code to be.  Futurize(3) does its best to make Python 3 idioms and
practices exist in Python 2, e.g.  backporting the ‘bytes’ type from
Python 3 so that you have semantic parity between the major versions of
Python.  Modernize(4), on the other hand, is more conservative and
targets a Python 2/3 subset of Python, relying on six(5) to help provide
compatibility.

Regardless of which tool you choose, they will update your code to run
under Python 3 while staying compatible with the version of Python 2 you
started with.  Depending on how conservative you want to be, you may
want to run the tool over your test suite first and visually inspect the
diff to make sure the transformation is accurate.  After you have
transformed your test suite and verified that all the tests still pass
as expected, then you can transform your application code knowing that
any tests which fail is a translation failure.

Unfortunately the tools can’t automate everything to make your code work
under Python 3 and so there are a handful of things you will need to
update manually to get full Python 3 support (which of these steps are
necessary vary between the tools).  Read the documentation for the tool
you choose to use to see what it fixes by default and what it can do
optionally to know what will (not) be fixed for you and what you may
have to fix on your own (e.g.  using ‘io.open()’ over the built-in
‘open()’ function is off by default in Modernize).  Luckily, though,
there are only a couple of things to watch out for which can be
considered large issues that may be hard to debug if not watched for.

* Menu:

* Division:: 
* Text versus binary data:: 
* Use feature detection instead of version detection:: 

   ---------- Footnotes ----------

   (1) http://python-modernize.readthedocs.org/en/latest/

   (2) http://python-future.org/automatic_conversion.html

   (3) http://python-future.org/automatic_conversion.html

   (4) http://python-modernize.readthedocs.org/en/latest/

   (5) https://pypi.python.org/pypi/six


File: python.info,  Node: Division,  Next: Text versus binary data,  Up: Update your code

10.1.2.6 Division
.................

In Python 3, ‘5 / 2 == 2.5’ and not ‘2’; all division between ‘int’
values result in a ‘float’.  This change has actually been planned since
Python 2.2 which was released in 2002.  Since then users have been
encouraged to add ‘from __future__ import division’ to any and all files
which use the ‘/’ and ‘//’ operators or to be running the interpreter
with the ‘-Q’ flag.  If you have not been doing this then you will need
to go through your code and do two things:

  1. Add ‘from __future__ import division’ to your files

  2. Update any division operator as necessary to either use ‘//’ to use
     floor division or continue using ‘/’ and expect a float

The reason that ‘/’ isn’t simply translated to ‘//’ automatically is
that if an object defines a ‘__truediv__’ method but not ‘__floordiv__’
then your code would begin to fail (e.g.  a user-defined class that uses
‘/’ to signify some operation but not ‘//’ for the same thing or at
all).


File: python.info,  Node: Text versus binary data,  Next: Use feature detection instead of version detection,  Prev: Division,  Up: Update your code

10.1.2.7 Text versus binary data
................................

In Python 2 you could use the ‘str’ type for both text and binary data.
Unfortunately this confluence of two different concepts could lead to
brittle code which sometimes worked for either kind of data, sometimes
not.  It also could lead to confusing APIs if people didn’t explicitly
state that something that accepted ‘str’ accepted either text or binary
data instead of one specific type.  This complicated the situation
especially for anyone supporting multiple languages as APIs wouldn’t
bother explicitly supporting ‘unicode’ when they claimed text data
support.

To make the distinction between text and binary data clearer and more
pronounced, Python 3 did what most languages created in the age of the
internet have done and made text and binary data distinct types that
cannot blindly be mixed together (Python predates widespread access to
the internet).  For any code that only deals with text or only binary
data, this separation doesn’t pose an issue.  But for code that has to
deal with both, it does mean you might have to now care about when you
are using text compared to binary data, which is why this cannot be
entirely automated.

To start, you will need to decide which APIs take text and which take
binary (it is `highly' recommended you don’t design APIs that can take
both due to the difficulty of keeping the code working; as stated
earlier it is difficult to do well).  In Python 2 this means making sure
the APIs that take text can work with ‘unicode’ in Python 2 and those
that work with binary data work with the ‘bytes’ type from Python 3 and
thus a subset of ‘str’ in Python 2 (which the ‘bytes’ type in Python 2
is an alias for).  Usually the biggest issue is realizing which methods
exist for which types in Python 2 & 3 simultaneously (for text that’s
‘unicode’ in Python 2 and ‘str’ in Python 3, for binary that’s
‘str’/‘bytes’ in Python 2 and ‘bytes’ in Python 3).  The following table
lists the `unique' methods of each data type across Python 2 & 3 (e.g.,
the ‘decode()’ method is usable on the equivalent binary data type in
either Python 2 or 3, but it can’t be used by the text data type
consistently between Python 2 and 3 because ‘str’ in Python 3 doesn’t
have the method).  Do note that as of Python 3.5 the ‘__mod__’ method
was added to the bytes type.

`Text data'                  `Binary data'
                             
                             
                             decode
                             
                             
encode

format

isdecimal

isnumeric

Making the distinction easier to handle can be accomplished by encoding
and decoding between binary data and text at the edge of your code.
This means that when you receive text in binary data, you should
immediately decode it.  And if your code needs to send text as binary
data then encode it as late as possible.  This allows your code to work
with only text internally and thus eliminates having to keep track of
what type of data you are working with.

The next issue is making sure you know whether the string literals in
your code represent text or binary data.  At minimum you should add a
‘b’ prefix to any literal that presents binary data.  For text you
should either use the ‘from __future__ import unicode_literals’
statement or add a ‘u’ prefix to the text literal.

As part of this dichotomy you also need to be careful about opening
files.  Unless you have been working on Windows, there is a chance you
have not always bothered to add the ‘b’ mode when opening a binary file
(e.g., ‘rb’ for binary reading).  Under Python 3, binary files and text
files are clearly distinct and mutually incompatible; see the *note io:
9f. module for details.  Therefore, you `must' make a decision of
whether a file will be used for binary access (allowing binary data to
be read and/or written) or text access (allowing text data to be read
and/or written).  You should also use *note io.open(): 1e9. for opening
files instead of the built-in *note open(): 1e8. function as the *note
io: 9f. module is consistent from Python 2 to 3 while the built-in *note
open(): 1e8. function is not (in Python 3 it’s actually *note io.open():
1e9.).

The constructors of both ‘str’ and ‘bytes’ have different semantics for
the same arguments between Python 2 & 3.  Passing an integer to ‘bytes’
in Python 2 will give you the string representation of the integer:
‘bytes(3) == '3'’.  But in Python 3, an integer argument to ‘bytes’ will
give you a bytes object as long as the integer specified, filled with
null bytes: ‘bytes(3) == b'\x00\x00\x00'’.  A similar worry is necessary
when passing a bytes object to ‘str’.  In Python 2 you just get the
bytes object back: ‘str(b'3') == b'3'’.  But in Python 3 you get the
string representation of the bytes object: ‘str(b'3') == "b'3'"’.

Finally, the indexing of binary data requires careful handling (slicing
does `not' require any special handling).  In Python 2, ‘b'123'[1] ==
b'2'’ while in Python 3 ‘b'123'[1] == 50’.  Because binary data is
simply a collection of binary numbers, Python 3 returns the integer
value for the byte you index on.  But in Python 2 because ‘bytes ==
str’, indexing returns a one-item slice of bytes.  The six(1) project
has a function named ‘six.indexbytes()’ which will return an integer
like in Python 3: ‘six.indexbytes(b'123', 1)’.

To summarize:

  1. Decide which of your APIs take text and which take binary data

  2. Make sure that your code that works with text also works with
     ‘unicode’ and code for binary data works with ‘bytes’ in Python 2
     (see the table above for what methods you cannot use for each type)

  3. Mark all binary literals with a ‘b’ prefix, use a ‘u’ prefix or
     *note __future__: 0. import statement for text literals

  4. Decode binary data to text as soon as possible, encode text as
     binary data as late as possible

  5. Open files using *note io.open(): 1e9. and make sure to specify the
     ‘b’ mode when appropriate

  6. Be careful when indexing binary data

   ---------- Footnotes ----------

   (1) https://pypi.python.org/pypi/six


File: python.info,  Node: Use feature detection instead of version detection,  Prev: Text versus binary data,  Up: Update your code

10.1.2.8 Use feature detection instead of version detection
...........................................................

Inevitably you will have code that has to choose what to do based on
what version of Python is running.  The best way to do this is with
feature detection of whether the version of Python you’re running under
supports what you need.  If for some reason that doesn’t work then you
should make the version check is against Python 2 and not Python 3.  To
help explain this, let’s look at an example.

Let’s pretend that you need access to a feature of importlib(1) that is
available in Python’s standard library since Python 3.3 and available
for Python 2 through importlib2(2) on PyPI. You might be tempted to
write code to access e.g.  the ‘importlib.abc’ module by doing the
following:

     import sys

     if sys.version[0] == 3:
         from importlib import abc
     else:
         from importlib2 import abc

The problem with this code is what happens when Python 4 comes out?  It
would be better to treat Python 2 as the exceptional case instead of
Python 3 and assume that future Python versions will be more compatible
with Python 3 than Python 2:

     import sys

     if sys.version[0] > 2:
         from importlib import abc
     else:
         from importlib2 import abc

The best solution, though, is to do no version detection at all and
instead rely on feature detection.  That avoids any potential issues of
getting the version detection wrong and helps keep you
future-compatible:

     try:
         from importlib import abc
     except ImportError:
         from importlib2 import abc

   ---------- Footnotes ----------

   (1) https://docs.python.org/3/library/importlib.html#module-importlib

   (2) https://pypi.python.org/pypi/importlib2


File: python.info,  Node: Prevent compatibility regressions,  Next: Check which dependencies block your transition,  Prev: Update your code,  Up: Details

10.1.2.9 Prevent compatibility regressions
..........................................

Once you have fully translated your code to be compatible with Python 3,
you will want to make sure your code doesn’t regress and stop working
under Python 3.  This is especially true if you have a dependency which
is blocking you from actually running under Python 3 at the moment.

To help with staying compatible, any new modules you create should have
at least the following block of code at the top of it:

     from __future__ import absolute_import
     from __future__ import division
     from __future__ import print_function
     from __future__ import unicode_literals

You can also run Python 2 with the ‘-3’ flag to be warned about various
compatibility issues your code triggers during execution.  If you turn
warnings into errors with ‘-Werror’ then you can make sure that you
don’t accidentally miss a warning.

You can also use the Pylint(1) project and its ‘--py3k’ flag to lint
your code to receive warnings when your code begins to deviate from
Python 3 compatibility.  This also prevents you from having to run
Modernize(2) or Futurize(3) over your code regularly to catch
compatibility regressions.  This does require you only support Python
2.7 and Python 3.4 or newer as that is Pylint’s minimum Python version
support.

   ---------- Footnotes ----------

   (1) https://pypi.python.org/pypi/pylint

   (2) http://python-modernize.readthedocs.org/en/latest/

   (3) http://python-future.org/automatic_conversion.html


File: python.info,  Node: Check which dependencies block your transition,  Next: Update your setup py file to denote Python 3 compatibility,  Prev: Prevent compatibility regressions,  Up: Details

10.1.2.10 Check which dependencies block your transition
........................................................

`After' you have made your code compatible with Python 3 you should
begin to care about whether your dependencies have also been ported.
The caniusepython3(1) project was created to help you determine which
projects – directly or indirectly – are blocking you from supporting
Python 3.  There is both a command-line tool as well as a web interface
at ‘https://caniusepython3.com’ .

The project also provides code which you can integrate into your test
suite so that you will have a failing test when you no longer have
dependencies blocking you from using Python 3.  This allows you to avoid
having to manually check your dependencies and to be notified quickly
when you can start running on Python 3.

   ---------- Footnotes ----------

   (1) https://pypi.python.org/pypi/caniusepython3


File: python.info,  Node: Update your setup py file to denote Python 3 compatibility,  Next: Use continuous integration to stay compatible,  Prev: Check which dependencies block your transition,  Up: Details

10.1.2.11 Update your ‘setup.py’ file to denote Python 3 compatibility
......................................................................

Once your code works under Python 3, you should update the classifiers
in your ‘setup.py’ to contain ‘Programming Language :: Python :: 3’ and
to not specify sole Python 2 support.  This will tell anyone using your
code that you support Python 2 `and' 3.  Ideally you will also want to
add classifiers for each major/minor version of Python you now support.


File: python.info,  Node: Use continuous integration to stay compatible,  Prev: Update your setup py file to denote Python 3 compatibility,  Up: Details

10.1.2.12 Use continuous integration to stay compatible
.......................................................

Once you are able to fully run under Python 3 you will want to make sure
your code always works under both Python 2 & 3.  Probably the best tool
for running your tests under multiple Python interpreters is tox(1).
You can then integrate tox with your continuous integration system so
that you never accidentally break Python 2 or 3 support.

You may also want to use use the ‘-bb’ flag with the Python 3
interpreter to trigger an exception when you are comparing bytes to
strings or bytes to an int (the latter is available starting in Python
3.5).  By default type-differing comparisons simply return ‘False’, but
if you made a mistake in your separation of text/binary data handling or
indexing on bytes you wouldn’t easily find the mistake.  This flag will
raise an exception when these kinds of comparisons occur, making the
mistake much easier to track down.

And that’s mostly it!  At this point your code base is compatible with
both Python 2 and 3 simultaneously.  Your testing will also be set up so
that you don’t accidentally break Python 2 or 3 compatibility regardless
of which version you typically run your tests under while developing.

   ---------- Footnotes ----------

   (1) https://pypi.python.org/pypi/tox


File: python.info,  Node: Dropping Python 2 support completely,  Prev: Details,  Up: Porting Python 2 Code to Python 3

10.1.3 Dropping Python 2 support completely
-------------------------------------------

If you are able to fully drop support for Python 2, then the steps
required to transition to Python 3 simplify greatly.

  1. Update your code to only support Python 2.7

  2. Make sure you have good test coverage (coverage.py(1) can help)

  3. Learn the differences between Python 2 & 3

  4. Use 2to3(2) to rewrite your code to run only under Python 3

After this your code will be fully Python 3 compliant but in a way that
is not supported by Python 2.  You should also update the classifiers in
your ‘setup.py’ to contain ‘Programming Language :: Python :: 3 ::
Only’.

   ---------- Footnotes ----------

   (1) https://pypi.python.org/pypi/coverage

   (2) https://docs.python.org/3/library/2to3.html


File: python.info,  Node: Porting Extension Modules to Python 3,  Next: Curses Programming with Python,  Prev: Porting Python 2 Code to Python 3,  Up: Python HOWTOs

10.2 Porting Extension Modules to Python 3
==========================================


author: Benjamin Peterson

Abstract
........

Although changing the C-API was not one of Python 3’s objectives, the
many Python-level changes made leaving Python 2’s API intact impossible.
In fact, some changes such as *note int(): 227. and ‘long()’ unification
are more obvious on the C level.  This document endeavors to document
incompatibilities and how they can be worked around.

* Menu:

* Conditional compilation:: 
* Changes to Object APIs:: 
* Module initialization and state:: 
* CObject replaced with Capsule:: 
* Other options:: 


File: python.info,  Node: Conditional compilation,  Next: Changes to Object APIs,  Up: Porting Extension Modules to Python 3

10.2.1 Conditional compilation
------------------------------

The easiest way to compile only some code for Python 3 is to check if
‘PY_MAJOR_VERSION’ is greater than or equal to 3.

     #if PY_MAJOR_VERSION >= 3
     #define IS_PY3K
     #endif

API functions that are not present can be aliased to their equivalents
within conditional blocks.


File: python.info,  Node: Changes to Object APIs,  Next: Module initialization and state,  Prev: Conditional compilation,  Up: Porting Extension Modules to Python 3

10.2.2 Changes to Object APIs
-----------------------------

Python 3 merged together some types with similar functions while cleanly
separating others.

* Menu:

* str/unicode Unification:: 
* long/int Unification:: 


File: python.info,  Node: str/unicode Unification,  Next: long/int Unification,  Up: Changes to Object APIs

10.2.2.1 str/unicode Unification
................................

Python 3’s *note str(): 25a. type is equivalent to Python 2’s
‘unicode()’; the C functions are called ‘PyUnicode_*’ for both.  The old
8-bit string type has become *note bytes(): 1db, with C functions called
‘PyBytes_*’.  Python 2.6 and later provide a compatibility header,
‘bytesobject.h’, mapping ‘PyBytes’ names to ‘PyString’ ones.  For best
compatibility with Python 3, ‘PyUnicode’ should be used for textual data
and ‘PyBytes’ for binary data.  It’s also important to remember that
‘PyBytes’ and ‘PyUnicode’ in Python 3 are not interchangeable like
‘PyString’ and ‘PyUnicode’ are in Python 2.  The following example shows
best practices with regards to ‘PyUnicode’, ‘PyString’, and ‘PyBytes’.

     #include "stdlib.h"
     #include "Python.h"
     #include "bytesobject.h"

     /* text example */
     static PyObject *
     say_hello(PyObject *self, PyObject *args) {
         PyObject *name, *result;

         if (!PyArg_ParseTuple(args, "U:say_hello", &name))
             return NULL;

         result = PyUnicode_FromFormat("Hello, %S!", name);
         return result;
     }

     /* just a forward */
     static char * do_encode(PyObject *);

     /* bytes example */
     static PyObject *
     encode_object(PyObject *self, PyObject *args) {
         char *encoded;
         PyObject *result, *myobj;

         if (!PyArg_ParseTuple(args, "O:encode_object", &myobj))
             return NULL;

         encoded = do_encode(myobj);
         if (encoded == NULL)
             return NULL;
         result = PyBytes_FromString(encoded);
         free(encoded);
         return result;
     }


File: python.info,  Node: long/int Unification,  Prev: str/unicode Unification,  Up: Changes to Object APIs

10.2.2.2 long/int Unification
.............................

Python 3 has only one integer type, *note int(): 227.  But it actually
corresponds to Python 2’s ‘long()’ type–the *note int(): 227. type used
in Python 2 was removed.  In the C-API, ‘PyInt_*’ functions are replaced
by their ‘PyLong_*’ equivalents.


File: python.info,  Node: Module initialization and state,  Next: CObject replaced with Capsule,  Prev: Changes to Object APIs,  Up: Porting Extension Modules to Python 3

10.2.3 Module initialization and state
--------------------------------------

Python 3 has a revamped extension module initialization system.  (See
PEP 3121(1).)  Instead of storing module state in globals, they should
be stored in an interpreter specific structure.  Creating modules that
act correctly in both Python 2 and Python 3 is tricky.  The following
simple example demonstrates how.

     #include "Python.h"

     struct module_state {
         PyObject *error;
     };

     #if PY_MAJOR_VERSION >= 3
     #define GETSTATE(m) ((struct module_state*)PyModule_GetState(m))
     #else
     #define GETSTATE(m) (&_state)
     static struct module_state _state;
     #endif

     static PyObject *
     error_out(PyObject *m) {
         struct module_state *st = GETSTATE(m);
         PyErr_SetString(st->error, "something bad happened");
         return NULL;
     }

     static PyMethodDef myextension_methods[] = {
         {"error_out", (PyCFunction)error_out, METH_NOARGS, NULL},
         {NULL, NULL}
     };

     #if PY_MAJOR_VERSION >= 3

     static int myextension_traverse(PyObject *m, visitproc visit, void *arg) {
         Py_VISIT(GETSTATE(m)->error);
         return 0;
     }

     static int myextension_clear(PyObject *m) {
         Py_CLEAR(GETSTATE(m)->error);
         return 0;
     }


     static struct PyModuleDef moduledef = {
             PyModuleDef_HEAD_INIT,
             "myextension",
             NULL,
             sizeof(struct module_state),
             myextension_methods,
             NULL,
             myextension_traverse,
             myextension_clear,
             NULL
     };

     #define INITERROR return NULL

     PyMODINIT_FUNC
     PyInit_myextension(void)

     #else
     #define INITERROR return

     void
     initmyextension(void)
     #endif
     {
     #if PY_MAJOR_VERSION >= 3
         PyObject *module = PyModule_Create(&moduledef);
     #else
         PyObject *module = Py_InitModule("myextension", myextension_methods);
     #endif

         if (module == NULL)
             INITERROR;
         struct module_state *st = GETSTATE(module);

         st->error = PyErr_NewException("myextension.Error", NULL, NULL);
         if (st->error == NULL) {
             Py_DECREF(module);
             INITERROR;
         }

     #if PY_MAJOR_VERSION >= 3
         return module;
     #endif
     }

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3121


File: python.info,  Node: CObject replaced with Capsule,  Next: Other options,  Prev: Module initialization and state,  Up: Porting Extension Modules to Python 3

10.2.4 CObject replaced with Capsule
------------------------------------

The ‘Capsule’ object was introduced in Python 3.1 and 2.7 to replace
‘CObject’.  CObjects were useful, but the ‘CObject’ API was problematic:
it didn’t permit distinguishing between valid CObjects, which allowed
mismatched CObjects to crash the interpreter, and some of its APIs
relied on undefined behavior in C. (For further reading on the rationale
behind Capsules, please see issue 5630(1).)

If you’re currently using CObjects, and you want to migrate to 3.1 or
newer, you’ll need to switch to Capsules.  ‘CObject’ was deprecated in
3.1 and 2.7 and completely removed in Python 3.2.  If you only support
2.7, or 3.1 and above, you can simply switch to ‘Capsule’.  If you need
to support Python 3.0, or versions of Python earlier than 2.7, you’ll
have to support both CObjects and Capsules.  (Note that Python 3.0 is no
longer supported, and it is not recommended for production use.)

The following example header file ‘capsulethunk.h’ may solve the problem
for you.  Simply write your code against the ‘Capsule’ API and include
this header file after ‘Python.h’.  Your code will automatically use
Capsules in versions of Python with Capsules, and switch to CObjects
when Capsules are unavailable.

‘capsulethunk.h’ simulates Capsules using CObjects.  However, ‘CObject’
provides no place to store the capsule’s "name".  As a result the
simulated ‘Capsule’ objects created by ‘capsulethunk.h’ behave slightly
differently from real Capsules.  Specifically:

        * The name parameter passed in to *note PyCapsule_New(): 332d.
          is ignored.

        * The name parameter passed in to *note PyCapsule_IsValid():
          96b. and *note PyCapsule_GetPointer(): 372d. is ignored, and
          no error checking of the name is performed.

        * *note PyCapsule_GetName(): 3730. always returns NULL.

        * *note PyCapsule_SetName(): 3733. always raises an exception
          and returns failure.  (Since there’s no way to store a name in
          a CObject, noisy failure of *note PyCapsule_SetName(): 3733.
          was deemed preferable to silent failure here.  If this is
          inconvenient, feel free to modify your local copy as you see
          fit.)

You can find ‘capsulethunk.h’ in the Python source distribution as
Doc/includes/capsulethunk.h(2).  We also include it here for your
convenience:

     #ifndef __CAPSULETHUNK_H
     #define __CAPSULETHUNK_H

     #if (    (PY_VERSION_HEX <  0x02070000) \
          || ((PY_VERSION_HEX >= 0x03000000) \
           && (PY_VERSION_HEX <  0x03010000)) )

     #define __PyCapsule_GetField(capsule, field, default_value) \
         ( PyCapsule_CheckExact(capsule) \
             ? (((PyCObject *)capsule)->field) \
             : (default_value) \
         ) \

     #define __PyCapsule_SetField(capsule, field, value) \
         ( PyCapsule_CheckExact(capsule) \
             ? (((PyCObject *)capsule)->field = value), 1 \
             : 0 \
         ) \


     #define PyCapsule_Type PyCObject_Type

     #define PyCapsule_CheckExact(capsule) (PyCObject_Check(capsule))
     #define PyCapsule_IsValid(capsule, name) (PyCObject_Check(capsule))


     #define PyCapsule_New(pointer, name, destructor) \
         (PyCObject_FromVoidPtr(pointer, destructor))


     #define PyCapsule_GetPointer(capsule, name) \
         (PyCObject_AsVoidPtr(capsule))

     /* Don't call PyCObject_SetPointer here, it fails if there's a destructor */
     #define PyCapsule_SetPointer(capsule, pointer) \
         __PyCapsule_SetField(capsule, cobject, pointer)


     #define PyCapsule_GetDestructor(capsule) \
         __PyCapsule_GetField(capsule, destructor)

     #define PyCapsule_SetDestructor(capsule, dtor) \
         __PyCapsule_SetField(capsule, destructor, dtor)


     /*
      * Sorry, there's simply no place
      * to store a Capsule "name" in a CObject.
      */
     #define PyCapsule_GetName(capsule) NULL

     static int
     PyCapsule_SetName(PyObject *capsule, const char *unused)
     {
         unused = unused;
         PyErr_SetString(PyExc_NotImplementedError,
             "can't use PyCapsule_SetName with CObjects");
         return 1;
     }



     #define PyCapsule_GetContext(capsule) \
         __PyCapsule_GetField(capsule, descr)

     #define PyCapsule_SetContext(capsule, context) \
         __PyCapsule_SetField(capsule, descr, context)


     static void *
     PyCapsule_Import(const char *name, int no_block)
     {
         PyObject *object = NULL;
         void *return_value = NULL;
         char *trace;
         size_t name_length = (strlen(name) + 1) * sizeof(char);
         char *name_dup = (char *)PyMem_MALLOC(name_length);

         if (!name_dup) {
             return NULL;
         }

         memcpy(name_dup, name, name_length);

         trace = name_dup;
         while (trace) {
             char *dot = strchr(trace, '.');
             if (dot) {
                 *dot++ = '\0';
             }

             if (object == NULL) {
                 if (no_block) {
                     object = PyImport_ImportModuleNoBlock(trace);
                 } else {
                     object = PyImport_ImportModule(trace);
                     if (!object) {
                         PyErr_Format(PyExc_ImportError,
                             "PyCapsule_Import could not "
                             "import module \"%s\"", trace);
                     }
                 }
             } else {
                 PyObject *object2 = PyObject_GetAttrString(object, trace);
                 Py_DECREF(object);
                 object = object2;
             }
             if (!object) {
                 goto EXIT;
             }

             trace = dot;
         }

         if (PyCObject_Check(object)) {
             PyCObject *cobject = (PyCObject *)object;
             return_value = cobject->cobject;
         } else {
             PyErr_Format(PyExc_AttributeError,
                 "PyCapsule_Import \"%s\" is not valid",
                 name);
         }

     EXIT:
         Py_XDECREF(object);
         if (name_dup) {
             PyMem_FREE(name_dup);
         }
         return return_value;
     }

     #endif /* #if PY_VERSION_HEX < 0x02070000 */

     #endif /* __CAPSULETHUNK_H */

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue5630

   (2) 
https://hg.python.org/cpython/file/default/Doc/includes/capsulethunk.h


File: python.info,  Node: Other options,  Prev: CObject replaced with Capsule,  Up: Porting Extension Modules to Python 3

10.2.5 Other options
--------------------

If you are writing a new extension module, you might consider Cython(1).
It translates a Python-like language to C. The extension modules it
creates are compatible with Python 3 and Python 2.

   ---------- Footnotes ----------

   (1) http://cython.org/


File: python.info,  Node: Curses Programming with Python,  Next: Descriptor HowTo Guide,  Prev: Porting Extension Modules to Python 3,  Up: Python HOWTOs

10.3 Curses Programming with Python
===================================


Author: A.M. Kuchling, Eric S. Raymond


Release: 2.04

Abstract
........

This document describes how to use the *note curses: 2b. extension
module to control text-mode displays.

* Menu:

* What is curses?:: 
* Starting and ending a curses application:: 
* Windows and Pads:: 
* Displaying Text:: 
* User Input:: 
* For More Information:: 


File: python.info,  Node: What is curses?,  Next: Starting and ending a curses application,  Up: Curses Programming with Python

10.3.1 What is curses?
----------------------

The curses library supplies a terminal-independent screen-painting and
keyboard-handling facility for text-based terminals; such terminals
include VT100s, the Linux console, and the simulated terminal provided
by various programs.  Display terminals support various control codes to
perform common operations such as moving the cursor, scrolling the
screen, and erasing areas.  Different terminals use widely differing
codes, and often have their own minor quirks.

In a world of graphical displays, one might ask "why bother"?  It’s true
that character-cell display terminals are an obsolete technology, but
there are niches in which being able to do fancy things with them are
still valuable.  One niche is on small-footprint or embedded Unixes that
don’t run an X server.  Another is tools such as OS installers and
kernel configurators that may have to run before any graphical support
is available.

The curses library provides fairly basic functionality, providing the
programmer with an abstraction of a display containing multiple
non-overlapping windows of text.  The contents of a window can be
changed in various ways—adding text, erasing it, changing its
appearance—and the curses library will figure out what control codes
need to be sent to the terminal to produce the right output.  curses
doesn’t provide many user-interface concepts such as buttons,
checkboxes, or dialogs; if you need such features, consider a user
interface library such as Urwid(1).

The curses library was originally written for BSD Unix; the later System
V versions of Unix from AT&T added many enhancements and new functions.
BSD curses is no longer maintained, having been replaced by ncurses,
which is an open-source implementation of the AT&T interface.  If you’re
using an open-source Unix such as Linux or FreeBSD, your system almost
certainly uses ncurses.  Since most current commercial Unix versions are
based on System V code, all the functions described here will probably
be available.  The older versions of curses carried by some proprietary
Unixes may not support everything, though.

The Windows version of Python doesn’t include the *note curses: 2b.
module.  A ported version called UniCurses(2) is available.  You could
also try the Console module(3) written by Fredrik Lundh, which doesn’t
use the same API as curses but provides cursor-addressable text output
and full support for mouse and keyboard input.

* Menu:

* The Python curses module:: 

   ---------- Footnotes ----------

   (1) https://pypi.python.org/pypi/urwid/

   (2) https://pypi.python.org/pypi/UniCurses

   (3) http://effbot.org/zone/console-index.htm


File: python.info,  Node: The Python curses module,  Up: What is curses?

10.3.1.1 The Python curses module
.................................

Thy Python module is a fairly simple wrapper over the C functions
provided by curses; if you’re already familiar with curses programming
in C, it’s really easy to transfer that knowledge to Python.  The
biggest difference is that the Python interface makes things simpler by
merging different C functions such as ‘addstr()’, ‘mvaddstr()’, and
‘mvwaddstr()’ into a single *note addstr(): 1af7. method.  You’ll see
this covered in more detail later.

This HOWTO is an introduction to writing text-mode programs with curses
and Python.  It doesn’t attempt to be a complete guide to the curses
API; for that, see the Python library guide’s section on ncurses, and
the C manual pages for ncurses.  It will, however, give you the basic
ideas.


File: python.info,  Node: Starting and ending a curses application,  Next: Windows and Pads,  Prev: What is curses?,  Up: Curses Programming with Python

10.3.2 Starting and ending a curses application
-----------------------------------------------

Before doing anything, curses must be initialized.  This is done by
calling the *note initscr(): 1abe. function, which will determine the
terminal type, send any required setup codes to the terminal, and create
various internal data structures.  If successful, ‘initscr()’ returns a
window object representing the entire screen; this is usually called
‘stdscr’ after the name of the corresponding C variable.

     import curses
     stdscr = curses.initscr()

Usually curses applications turn off automatic echoing of keys to the
screen, in order to be able to read keys and only display them under
certain circumstances.  This requires calling the *note noecho(): 1ad9.
function.

     curses.noecho()

Applications will also commonly need to react to keys instantly, without
requiring the Enter key to be pressed; this is called cbreak mode, as
opposed to the usual buffered input mode.

     curses.cbreak()

Terminals usually return special keys, such as the cursor keys or
navigation keys such as Page Up and Home, as a multibyte escape
sequence.  While you could write your application to expect such
sequences and process them accordingly, curses can do it for you,
returning a special value such as ‘curses.KEY_LEFT’.  To get curses to
do the job, you’ll have to enable keypad mode.

     stdscr.keypad(True)

Terminating a curses application is much easier than starting one.
You’ll need to call:

     curses.nocbreak()
     stdscr.keypad(False)
     curses.echo()

to reverse the curses-friendly terminal settings.  Then call the *note
endwin(): 1abb. function to restore the terminal to its original
operating mode.

     curses.endwin()

A common problem when debugging a curses application is to get your
terminal messed up when the application dies without restoring the
terminal to its previous state.  In Python this commonly happens when
your code is buggy and raises an uncaught exception.  Keys are no longer
echoed to the screen when you type them, for example, which makes using
the shell difficult.

In Python you can avoid these complications and make debugging much
easier by importing the *note curses.wrapper(): 1af2. function and using
it like this:

     from curses import wrapper

     def main(stdscr):
         # Clear screen
         stdscr.clear()

         # This raises ZeroDivisionError when i == 10.
         for i in range(0, 11):
             v = i-10
             stdscr.addstr(i, 0, '10 divided by {} is {}'.format(v, 10/v))

         stdscr.refresh()
         stdscr.getkey()

     wrapper(main)

The *note wrapper(): 1af2. function takes a callable object and does the
initializations described above, also initializing colors if color
support is present.  ‘wrapper()’ then runs your provided callable.  Once
the callable returns, ‘wrapper()’ will restore the original state of the
terminal.  The callable is called inside a *note try: 9e9...*note
except: 785. that catches exceptions, restores the state of the
terminal, and then re-raises the exception.  Therefore your terminal
won’t be left in a funny state on exception and you’ll be able to read
the exception’s message and traceback.

