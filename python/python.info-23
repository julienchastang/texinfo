This is python.info, produced by makeinfo version 6.0 from python.texi.

     Python 3.6.0a0, May 06, 2016

     Georg Brandl

     Copyright © 2001-2016, Python Software Foundation

INFO-DIR-SECTION Documentation tools
START-INFO-DIR-ENTRY
* Python: (python.info). The Python Programming Language
END-INFO-DIR-ENTRY


   Generated by Sphinx 1.4.1.


File: python.info,  Node: telnetlib --- Telnet client,  Next: uuid --- UUID objects according to RFC 4122,  Prev: smtpd --- SMTP Server,  Up: Internet Protocols and Support

5.21.19 ‘telnetlib’ — Telnet client
-----------------------------------

`Source code:' Lib/telnetlib.py(1)

__________________________________________________________________

The *note telnetlib: 100. module provides a *note Telnet: 16f. class
that implements the Telnet protocol.  See RFC 854(2) for details about
the protocol.  In addition, it provides symbolic constants for the
protocol characters (see below), and for the telnet options.  The
symbolic names of the telnet options follow the definitions in
‘arpa/telnet.h’, with the leading ‘TELOPT_’ removed.  For symbolic names
of options which are traditionally not included in ‘arpa/telnet.h’, see
the module source itself.

The symbolic constants for the telnet commands are: IAC, DONT, DO, WONT,
WILL, SE (Subnegotiation End), NOP (No Operation), DM (Data Mark), BRK
(Break), IP (Interrupt process), AO (Abort output), AYT (Are You There),
EC (Erase Character), EL (Erase Line), GA (Go Ahead), SB (Subnegotiation
Begin).

 -- Class: telnetlib.Telnet (host=None, port=0[, timeout])

     *note Telnet: 16f. represents a connection to a Telnet server.  The
     instance is initially not connected by default; the *note open():
     1e8. method must be used to establish a connection.  Alternatively,
     the host name and optional port number can be passed to the
     constructor too, in which case the connection to the server will be
     established before the constructor returns.  The optional `timeout'
     parameter specifies a timeout in seconds for blocking operations
     like the connection attempt (if not specified, the global default
     timeout setting will be used).

     Do not reopen an already connected instance.

     This class has many ‘read_*()’ methods.  Note that some of them
     raise *note EOFError: 8d8. when the end of the connection is read,
     because they can return an empty string for other reasons.  See the
     individual descriptions below.

     A *note Telnet: 16f. object is a context manager and can be used in
     a *note with: 29d. statement.  When the *note with: 29d. block
     ends, the *note close(): 2690. method is called:

          >>> from telnetlib import Telnet
          >>> with Telnet('localhost', 23) as tn:
          ...     tn.interact()
          ...

     Changed in version 3.6: Context manager support added

See also
........

RFC 854(3) - Telnet Protocol Specification

     Definition of the Telnet protocol.

* Menu:

* Telnet Objects:: 
* Telnet Example:: 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/telnetlib.py

   (2) https://tools.ietf.org/html/rfc854.html

   (3) https://tools.ietf.org/html/rfc854.html


File: python.info,  Node: Telnet Objects,  Next: Telnet Example,  Up: telnetlib --- Telnet client

5.21.19.1 Telnet Objects
........................

*note Telnet: 16f. instances have the following methods:

 -- Method: Telnet.read_until (expected, timeout=None)

     Read until a given byte string, `expected', is encountered or until
     `timeout' seconds have passed.

     When no match is found, return whatever is available instead,
     possibly empty bytes.  Raise *note EOFError: 8d8. if the connection
     is closed and no cooked data is available.

 -- Method: Telnet.read_all ()

     Read all data until EOF as bytes; block until connection closed.

 -- Method: Telnet.read_some ()

     Read at least one byte of cooked data unless EOF is hit.  Return
     ‘b''’ if EOF is hit.  Block if no data is immediately available.

 -- Method: Telnet.read_very_eager ()

     Read everything that can be without blocking in I/O (eager).

     Raise *note EOFError: 8d8. if connection closed and no cooked data
     available.  Return ‘b''’ if no cooked data available otherwise.  Do
     not block unless in the midst of an IAC sequence.

 -- Method: Telnet.read_eager ()

     Read readily available data.

     Raise *note EOFError: 8d8. if connection closed and no cooked data
     available.  Return ‘b''’ if no cooked data available otherwise.  Do
     not block unless in the midst of an IAC sequence.

 -- Method: Telnet.read_lazy ()

     Process and return data already in the queues (lazy).

     Raise *note EOFError: 8d8. if connection closed and no data
     available.  Return ‘b''’ if no cooked data available otherwise.  Do
     not block unless in the midst of an IAC sequence.

 -- Method: Telnet.read_very_lazy ()

     Return any data available in the cooked queue (very lazy).

     Raise *note EOFError: 8d8. if connection closed and no data
     available.  Return ‘b''’ if no cooked data available otherwise.
     This method never blocks.

 -- Method: Telnet.read_sb_data ()

     Return the data collected between a SB/SE pair (suboption
     begin/end).  The callback should access these data when it was
     invoked with a ‘SE’ command.  This method never blocks.

 -- Method: Telnet.open (host, port=0[, timeout])

     Connect to a host.  The optional second argument is the port
     number, which defaults to the standard Telnet port (23).  The
     optional `timeout' parameter specifies a timeout in seconds for
     blocking operations like the connection attempt (if not specified,
     the global default timeout setting will be used).

     Do not try to reopen an already connected instance.

 -- Method: Telnet.msg (msg, *args)

     Print a debug message when the debug level is ‘>’ 0.  If extra
     arguments are present, they are substituted in the message using
     the standard string formatting operator.

 -- Method: Telnet.set_debuglevel (debuglevel)

     Set the debug level.  The higher the value of `debuglevel', the
     more debug output you get (on ‘sys.stdout’).

 -- Method: Telnet.close ()

     Close the connection.

 -- Method: Telnet.get_socket ()

     Return the socket object used internally.

 -- Method: Telnet.fileno ()

     Return the file descriptor of the socket object used internally.

 -- Method: Telnet.write (buffer)

     Write a byte string to the socket, doubling any IAC characters.
     This can block if the connection is blocked.  May raise *note
     OSError: 4b6. if the connection is closed.

     Changed in version 3.3: This method used to raise *note
     socket.error: 5b3, which is now an alias of *note OSError: 4b6.

 -- Method: Telnet.interact ()

     Interaction function, emulates a very dumb Telnet client.

 -- Method: Telnet.mt_interact ()

     Multithreaded version of *note interact(): 26a1.

 -- Method: Telnet.expect (list, timeout=None)

     Read until one from a list of a regular expressions matches.

     The first argument is a list of regular expressions, either
     compiled (*note regex objects: 499.) or uncompiled (byte strings).
     The optional second argument is a timeout, in seconds; the default
     is to block indefinitely.

     Return a tuple of three items: the index in the list of the first
     regular expression that matches; the match object returned; and the
     bytes read up till and including the match.

     If end of file is found and no bytes were read, raise *note
     EOFError: 8d8.  Otherwise, when nothing matches, return ‘(-1, None,
     data)’ where `data' is the bytes received so far (may be empty
     bytes if a timeout happened).

     If a regular expression ends with a greedy match (such as ‘.*’) or
     if more than one expression can match the same input, the results
     are non-deterministic, and may depend on the I/O timing.

 -- Method: Telnet.set_option_negotiation_callback (callback)

     Each time a telnet option is read on the input flow, this
     `callback' (if set) is called with the following parameters:
     callback(telnet socket, command (DO/DONT/WILL/WONT), option).  No
     other action is done afterwards by telnetlib.


File: python.info,  Node: Telnet Example,  Prev: Telnet Objects,  Up: telnetlib --- Telnet client

5.21.19.2 Telnet Example
........................

A simple example illustrating typical use:

     import getpass
     import telnetlib

     HOST = "localhost"
     user = input("Enter your remote account: ")
     password = getpass.getpass()

     tn = telnetlib.Telnet(HOST)

     tn.read_until(b"login: ")
     tn.write(user.encode('ascii') + b"\n")
     if password:
         tn.read_until(b"Password: ")
         tn.write(password.encode('ascii') + b"\n")

     tn.write(b"ls\n")
     tn.write(b"exit\n")

     print(tn.read_all().decode('ascii'))


File: python.info,  Node: uuid --- UUID objects according to RFC 4122,  Next: socketserver --- A framework for network servers,  Prev: telnetlib --- Telnet client,  Up: Internet Protocols and Support

5.21.20 ‘uuid’ — UUID objects according to RFC 4122
---------------------------------------------------

This module provides immutable *note UUID: 26a9. objects (the *note
UUID: 26a9. class) and the functions *note uuid1(): 26aa, *note uuid3():
26ab, *note uuid4(): 26ac, *note uuid5(): 26ad. for generating version
1, 3, 4, and 5 UUIDs as specified in RFC 4122(1).

If all you want is a unique ID, you should probably call *note uuid1():
26aa. or *note uuid4(): 26ac.  Note that *note uuid1(): 26aa. may
compromise privacy since it creates a UUID containing the computer’s
network address.  *note uuid4(): 26ac. creates a random UUID.

 -- Class: uuid.UUID (hex=None, bytes=None, bytes_le=None, fields=None,
          int=None, version=None)

     Create a UUID from either a string of 32 hexadecimal digits, a
     string of 16 bytes as the `bytes' argument, a string of 16 bytes in
     little-endian order as the `bytes_le' argument, a tuple of six
     integers (32-bit `time_low', 16-bit `time_mid', 16-bit
     `time_hi_version', 8-bit `clock_seq_hi_variant', 8-bit
     `clock_seq_low', 48-bit `node') as the `fields' argument, or a
     single 128-bit integer as the `int' argument.  When a string of hex
     digits is given, curly braces, hyphens, and a URN prefix are all
     optional.  For example, these expressions all yield the same UUID:

          UUID('{12345678-1234-5678-1234-567812345678}')
          UUID('12345678123456781234567812345678')
          UUID('urn:uuid:12345678-1234-5678-1234-567812345678')
          UUID(bytes=b'\x12\x34\x56\x78'*4)
          UUID(bytes_le=b'\x78\x56\x34\x12\x34\x12\x78\x56' +
                        b'\x12\x34\x56\x78\x12\x34\x56\x78')
          UUID(fields=(0x12345678, 0x1234, 0x5678, 0x12, 0x34, 0x567812345678))
          UUID(int=0x12345678123456781234567812345678)

     Exactly one of `hex', `bytes', `bytes_le', `fields', or `int' must
     be given.  The `version' argument is optional; if given, the
     resulting UUID will have its variant and version number set
     according to RFC 4122, overriding bits in the given `hex', `bytes',
     `bytes_le', `fields', or `int'.

*note UUID: 26a9. instances have these read-only attributes:

 -- Attribute: UUID.bytes

     The UUID as a 16-byte string (containing the six integer fields in
     big-endian byte order).

 -- Attribute: UUID.bytes_le

     The UUID as a 16-byte string (with `time_low', `time_mid', and
     `time_hi_version' in little-endian byte order).

 -- Attribute: UUID.fields

     A tuple of the six integer fields of the UUID, which are also
     available as six individual attributes and two derived attributes:

     Field                              Meaning
                                        
     -----------------------------------------------------------------------
                                        
     ‘time_low’                         the first 32 bits of the UUID
                                        
                                        
     ‘time_mid’                         the next 16 bits of the UUID
                                        
                                        
     ‘time_hi_version’                  the next 16 bits of the UUID
                                        
                                        
     ‘clock_seq_hi_variant’             the next 8 bits of the UUID
                                        
                                        
     ‘clock_seq_low’                    the next 8 bits of the UUID
                                        
                                        
     ‘node’                             the last 48 bits of the UUID
                                        
                                        
     *note time: 107.                   the 60-bit timestamp
                                        
                                        
     ‘clock_seq’                        the 14-bit sequence number
                                        

 -- Attribute: UUID.hex

     The UUID as a 32-character hexadecimal string.

 -- Attribute: UUID.int

     The UUID as a 128-bit integer.

 -- Attribute: UUID.urn

     The UUID as a URN as specified in RFC 4122.

 -- Attribute: UUID.variant

     The UUID variant, which determines the internal layout of the UUID.
     This will be one of the integer constants *note RESERVED_NCS: 26b5,
     *note RFC_4122: 26b6, *note RESERVED_MICROSOFT: 26b7, or *note
     RESERVED_FUTURE: 26b8.

 -- Attribute: UUID.version

     The UUID version number (1 through 5, meaningful only when the
     variant is *note RFC_4122: 26b6.).

The *note uuid: 121. module defines the following functions:

 -- Function: uuid.getnode ()

     Get the hardware address as a 48-bit positive integer.  The first
     time this runs, it may launch a separate program, which could be
     quite slow.  If all attempts to obtain the hardware address fail,
     we choose a random 48-bit number with its eighth bit set to 1 as
     recommended in RFC 4122.  "Hardware address" means the MAC address
     of a network interface, and on a machine with multiple network
     interfaces the MAC address of any one of them may be returned.

 -- Function: uuid.uuid1 (node=None, clock_seq=None)

     Generate a UUID from a host ID, sequence number, and the current
     time.  If `node' is not given, *note getnode(): 26ba. is used to
     obtain the hardware address.  If `clock_seq' is given, it is used
     as the sequence number; otherwise a random 14-bit sequence number
     is chosen.

 -- Function: uuid.uuid3 (namespace, name)

     Generate a UUID based on the MD5 hash of a namespace identifier
     (which is a UUID) and a name (which is a string).

 -- Function: uuid.uuid4 ()

     Generate a random UUID.

 -- Function: uuid.uuid5 (namespace, name)

     Generate a UUID based on the SHA-1 hash of a namespace identifier
     (which is a UUID) and a name (which is a string).

The *note uuid: 121. module defines the following namespace identifiers
for use with *note uuid3(): 26ab. or *note uuid5(): 26ad.

 -- Data: uuid.NAMESPACE_DNS

     When this namespace is specified, the `name' string is a
     fully-qualified domain name.

 -- Data: uuid.NAMESPACE_URL

     When this namespace is specified, the `name' string is a URL.

 -- Data: uuid.NAMESPACE_OID

     When this namespace is specified, the `name' string is an ISO OID.

 -- Data: uuid.NAMESPACE_X500

     When this namespace is specified, the `name' string is an X.500 DN
     in DER or a text output format.

The *note uuid: 121. module defines the following constants for the
possible values of the ‘variant’ attribute:

 -- Data: uuid.RESERVED_NCS

     Reserved for NCS compatibility.

 -- Data: uuid.RFC_4122

     Specifies the UUID layout given in RFC 4122(2).

 -- Data: uuid.RESERVED_MICROSOFT

     Reserved for Microsoft compatibility.

 -- Data: uuid.RESERVED_FUTURE

     Reserved for future definition.

See also
........

RFC 4122(3) - A Universally Unique IDentifier (UUID) URN Namespace

     This specification defines a Uniform Resource Name namespace for
     UUIDs, the internal format of UUIDs, and methods of generating
     UUIDs.

* Menu:

* Example: Example<11>. 

   ---------- Footnotes ----------

   (1) https://tools.ietf.org/html/rfc4122.html

   (2) https://tools.ietf.org/html/rfc4122.html

   (3) https://tools.ietf.org/html/rfc4122.html


File: python.info,  Node: Example<11>,  Up: uuid --- UUID objects according to RFC 4122

5.21.20.1 Example
.................

Here are some examples of typical usage of the *note uuid: 121. module:

     >>> import uuid

     >>> # make a UUID based on the host ID and current time
     >>> uuid.uuid1()
     UUID('a8098c1a-f86e-11da-bd1a-00112444be1e')

     >>> # make a UUID using an MD5 hash of a namespace UUID and a name
     >>> uuid.uuid3(uuid.NAMESPACE_DNS, 'python.org')
     UUID('6fa459ea-ee8a-3ca4-894e-db77e160355e')

     >>> # make a random UUID
     >>> uuid.uuid4()
     UUID('16fd2706-8baf-433b-82eb-8c7fada847da')

     >>> # make a UUID using a SHA-1 hash of a namespace UUID and a name
     >>> uuid.uuid5(uuid.NAMESPACE_DNS, 'python.org')
     UUID('886313e1-3b8a-5372-9b90-0c9aee199e5d')

     >>> # make a UUID from a string of hex digits (braces and hyphens ignored)
     >>> x = uuid.UUID('{00010203-0405-0607-0809-0a0b0c0d0e0f}')

     >>> # convert a UUID to a string of hex digits in standard form
     >>> str(x)
     '00010203-0405-0607-0809-0a0b0c0d0e0f'

     >>> # get the raw 16 bytes of the UUID
     >>> x.bytes
     b'\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f'

     >>> # make a UUID from a 16-byte string
     >>> uuid.UUID(bytes=x.bytes)
     UUID('00010203-0405-0607-0809-0a0b0c0d0e0f')


File: python.info,  Node: socketserver --- A framework for network servers,  Next: http server --- HTTP servers,  Prev: uuid --- UUID objects according to RFC 4122,  Up: Internet Protocols and Support

5.21.21 ‘socketserver’ — A framework for network servers
--------------------------------------------------------

`Source code:' Lib/socketserver.py(1)

__________________________________________________________________

The *note socketserver: ee. module simplifies the task of writing
network servers.

There are four basic concrete server classes:

 -- Class: socketserver.TCPServer (server_address, RequestHandlerClass,
          bind_and_activate=True)

     This uses the Internet TCP protocol, which provides for continuous
     streams of data between the client and server.  If
     `bind_and_activate' is true, the constructor automatically attempts
     to invoke *note server_bind(): 26c4. and *note server_activate():
     26c5.  The other parameters are passed to the *note BaseServer:
     6c1. base class.

 -- Class: socketserver.UDPServer (server_address, RequestHandlerClass,
          bind_and_activate=True)

     This uses datagrams, which are discrete packets of information that
     may arrive out of order or be lost while in transit.  The
     parameters are the same as for *note TCPServer: 26c3.

 -- Class: socketserver.UnixStreamServer (server_address,
          RequestHandlerClass, bind_and_activate=True)
 -- Class: socketserver.UnixDatagramServer (server_address,
          RequestHandlerClass, bind_and_activate=True)

     These more infrequently used classes are similar to the TCP and UDP
     classes, but use Unix domain sockets; they’re not available on
     non-Unix platforms.  The parameters are the same as for *note
     TCPServer: 26c3.

These four classes process requests `synchronously'; each request must
be completed before the next request can be started.  This isn’t
suitable if each request takes a long time to complete, because it
requires a lot of computation, or because it returns a lot of data which
the client is slow to process.  The solution is to create a separate
process or thread to handle each request; the *note ForkingMixIn: 6c4.
and *note ThreadingMixIn: 26c9. mix-in classes can be used to support
asynchronous behaviour.

Creating a server requires several steps.  First, you must create a
request handler class by subclassing the *note BaseRequestHandler: 26ca.
class and overriding its *note handle(): 26cb. method; this method will
process incoming requests.  Second, you must instantiate one of the
server classes, passing it the server’s address and the request handler
class.  It is recommended to use the server in a *note with: 29d.
statement.  Then call the *note handle_request(): 26cc. or *note
serve_forever(): 6c3. method of the server object to process one or many
requests.  Finally, call *note server_close(): 26cd. to close the socket
(unless you used a *note with: 29d. statement).

When inheriting from *note ThreadingMixIn: 26c9. for threaded connection
behavior, you should explicitly declare how you want your threads to
behave on an abrupt shutdown.  The *note ThreadingMixIn: 26c9. class
defines an attribute `daemon_threads', which indicates whether or not
the server should wait for thread termination.  You should set the flag
explicitly if you would like threads to behave autonomously; the default
is *note False: 60d, meaning that Python will not exit until all threads
created by *note ThreadingMixIn: 26c9. have exited.

Server classes have the same external methods and attributes, no matter
what network protocol they use.

* Menu:

* Server Creation Notes:: 
* Server Objects:: 
* Request Handler Objects:: 
* Examples: Examples<17>. 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/socketserver.py


File: python.info,  Node: Server Creation Notes,  Next: Server Objects,  Up: socketserver --- A framework for network servers

5.21.21.1 Server Creation Notes
...............................

There are five classes in an inheritance diagram, four of which
represent synchronous servers of four types:

     +------------+
     | BaseServer |
     +------------+
           |
           v
     +-----------+        +------------------+
     | TCPServer |------->| UnixStreamServer |
     +-----------+        +------------------+
           |
           v
     +-----------+        +--------------------+
     | UDPServer |------->| UnixDatagramServer |
     +-----------+        +--------------------+

Note that *note UnixDatagramServer: 26c8. derives from *note UDPServer:
26c6, not from *note UnixStreamServer: 26c7. — the only difference
between an IP and a Unix stream server is the address family, which is
simply repeated in both Unix server classes.

 -- Class: socketserver.ForkingMixIn
 -- Class: socketserver.ThreadingMixIn

     Forking and threading versions of each type of server can be
     created using these mix-in classes.  For instance, *note
     ThreadingUDPServer: 26cf. is created as follows:

          class ThreadingUDPServer(ThreadingMixIn, UDPServer):
              pass

     The mix-in class comes first, since it overrides a method defined
     in *note UDPServer: 26c6.  Setting the various attributes also
     changes the behavior of the underlying server mechanism.

 -- Class: socketserver.ForkingTCPServer
 -- Class: socketserver.ForkingUDPServer
 -- Class: socketserver.ThreadingTCPServer
 -- Class: socketserver.ThreadingUDPServer

     These classes are pre-defined using the mix-in classes.

To implement a service, you must derive a class from *note
BaseRequestHandler: 26ca. and redefine its *note handle(): 26cb. method.
You can then run various versions of the service by combining one of the
server classes with your request handler class.  The request handler
class must be different for datagram or stream services.  This can be
hidden by using the handler subclasses *note StreamRequestHandler: 26d3.
or *note DatagramRequestHandler: 26d4.

Of course, you still have to use your head!  For instance, it makes no
sense to use a forking server if the service contains state in memory
that can be modified by different requests, since the modifications in
the child process would never reach the initial state kept in the parent
process and passed to each child.  In this case, you can use a threading
server, but you will probably have to use locks to protect the integrity
of the shared data.

On the other hand, if you are building an HTTP server where all data is
stored externally (for instance, in the file system), a synchronous
class will essentially render the service "deaf" while one request is
being handled – which may be for a very long time if a client is slow to
receive all the data it has requested.  Here a threading or forking
server is appropriate.

In some cases, it may be appropriate to process part of a request
synchronously, but to finish processing in a forked child depending on
the request data.  This can be implemented by using a synchronous server
and doing an explicit fork in the request handler class *note handle():
26cb. method.

Another approach to handling multiple simultaneous requests in an
environment that supports neither threads nor *note fork(): 57b. (or
where these are too expensive or inappropriate for the service) is to
maintain an explicit table of partially finished requests and to use
*note selectors: e4. to decide which request to work on next (or whether
to handle a new incoming request).  This is particularly important for
stream services where each client can potentially be connected for a
long time (if threads or subprocesses cannot be used).  See *note
asyncore: b. for another way to manage this.


File: python.info,  Node: Server Objects,  Next: Request Handler Objects,  Prev: Server Creation Notes,  Up: socketserver --- A framework for network servers

5.21.21.2 Server Objects
........................

 -- Class: socketserver.BaseServer (server_address, RequestHandlerClass)

     This is the superclass of all Server objects in the module.  It
     defines the interface, given below, but does not implement most of
     the methods, which is done in subclasses.  The two parameters are
     stored in the respective *note server_address: 26d6. and *note
     RequestHandlerClass: 26d7. attributes.

      -- Method: fileno ()

          Return an integer file descriptor for the socket on which the
          server is listening.  This function is most commonly passed to
          *note selectors: e4, to allow monitoring multiple servers in
          the same process.

      -- Method: handle_request ()

          Process a single request.  This function calls the following
          methods in order: *note get_request(): 26d9, *note
          verify_request(): 26da, and *note process_request(): 26db.  If
          the user-provided *note handle(): 26cb. method of the handler
          class raises an exception, the server’s *note handle_error():
          1a4. method will be called.  If no request is received within
          *note timeout: 26dc. seconds, *note handle_timeout(): 26dd.
          will be called and *note handle_request(): 26cc. will return.

      -- Method: serve_forever (poll_interval=0.5)

          Handle requests until an explicit *note shutdown(): 26de.
          request.  Poll for shutdown every `poll_interval' seconds.
          Ignores the *note timeout: 26dc. attribute.  It also calls
          *note service_actions(): 6c2, which may be used by a subclass
          or mixin to provide actions specific to a given service.  For
          example, the *note ForkingMixIn: 6c4. class uses *note
          service_actions(): 6c2. to clean up zombie child processes.

          Changed in version 3.3: Added ‘service_actions’ call to the
          ‘serve_forever’ method.

      -- Method: service_actions ()

          This is called in the *note serve_forever(): 6c3. loop.  This
          method can be overridden by subclasses or mixin classes to
          perform actions specific to a given service, such as cleanup
          actions.

          New in version 3.3.

      -- Method: shutdown ()

          Tell the *note serve_forever(): 6c3. loop to stop and wait
          until it does.

      -- Method: server_close ()

          Clean up the server.  May be overridden.

      -- Attribute: address_family

          The family of protocols to which the server’s socket belongs.
          Common examples are *note socket.AF_INET: 1e1a. and *note
          socket.AF_UNIX: 1e19.

      -- Attribute: RequestHandlerClass

          The user-provided request handler class; an instance of this
          class is created for each request.

      -- Attribute: server_address

          The address on which the server is listening.  The format of
          addresses varies depending on the protocol family; see the
          documentation for the *note socket: ed. module for details.
          For Internet protocols, this is a tuple containing a string
          giving the address, and an integer port number: ‘('127.0.0.1',
          80)’, for example.

      -- Attribute: socket

          The socket object on which the server will listen for incoming
          requests.

     The server classes support the following class variables:

      -- Attribute: allow_reuse_address

          Whether the server will allow the reuse of an address.  This
          defaults to *note False: 60d, and can be set in subclasses to
          change the policy.

      -- Attribute: request_queue_size

          The size of the request queue.  If it takes a long time to
          process a single request, any requests that arrive while the
          server is busy are placed into a queue, up to *note
          request_queue_size: 26e2. requests.  Once the queue is full,
          further requests from clients will get a "Connection denied"
          error.  The default value is usually 5, but this can be
          overridden by subclasses.

      -- Attribute: socket_type

          The type of socket used by the server; *note
          socket.SOCK_STREAM: 8fb. and *note socket.SOCK_DGRAM: 8fa. are
          two common values.

      -- Attribute: timeout

          Timeout duration, measured in seconds, or *note None: 19d. if
          no timeout is desired.  If *note handle_request(): 26cc.
          receives no incoming requests within the timeout period, the
          *note handle_timeout(): 26dd. method is called.

     There are various server methods that can be overridden by
     subclasses of base server classes like *note TCPServer: 26c3.;
     these methods aren’t useful to external users of the server object.

      -- Method: finish_request ()

          Actually processes the request by instantiating *note
          RequestHandlerClass: 26d7. and calling its *note handle():
          26cb. method.

      -- Method: get_request ()

          Must accept a request from the socket, and return a 2-tuple
          containing the `new' socket object to be used to communicate
          with the client, and the client’s address.

      -- Method: handle_error (request, client_address)

          This function is called if the *note handle(): 26cb. method of
          a *note RequestHandlerClass: 26d7. instance raises an
          exception.  The default action is to print the traceback to
          standard error and continue handling further requests.

          Changed in version 3.6: Now only called for exceptions derived
          from the *note Exception: 1a1. class.

      -- Method: handle_timeout ()

          This function is called when the *note timeout: 26dc.
          attribute has been set to a value other than *note None: 19d.
          and the timeout period has passed with no requests being
          received.  The default action for forking servers is to
          collect the status of any child processes that have exited,
          while in threading servers this method does nothing.

      -- Method: process_request (request, client_address)

          Calls *note finish_request(): 26e4. to create an instance of
          the *note RequestHandlerClass: 26d7.  If desired, this
          function can create a new process or thread to handle the
          request; the *note ForkingMixIn: 6c4. and *note
          ThreadingMixIn: 26c9. classes do this.

      -- Method: server_activate ()

          Called by the server’s constructor to activate the server.
          The default behavior for a TCP server just invokes *note
          listen(): 316. on the server’s socket.  May be overridden.

      -- Method: server_bind ()

          Called by the server’s constructor to bind the socket to the
          desired address.  May be overridden.

      -- Method: verify_request (request, client_address)

          Must return a Boolean value; if the value is *note True: 9ff,
          the request will be processed, and if it’s *note False: 60d,
          the request will be denied.  This function can be overridden
          to implement access controls for a server.  The default
          implementation always returns *note True: 9ff.

     Changed in version 3.6: Support for the *note context manager: 165.
     protocol was added.  Exiting the context manager is equivalent to
     calling *note server_close(): 26cd.


File: python.info,  Node: Request Handler Objects,  Next: Examples<17>,  Prev: Server Objects,  Up: socketserver --- A framework for network servers

5.21.21.3 Request Handler Objects
.................................

 -- Class: socketserver.BaseRequestHandler

     This is the superclass of all request handler objects.  It defines
     the interface, given below.  A concrete request handler subclass
     must define a new *note handle(): 26cb. method, and can override
     any of the other methods.  A new instance of the subclass is
     created for each request.

      -- Method: setup ()

          Called before the *note handle(): 26cb. method to perform any
          initialization actions required.  The default implementation
          does nothing.

      -- Method: handle ()

          This function must do all the work required to service a
          request.  The default implementation does nothing.  Several
          instance attributes are available to it; the request is
          available as ‘self.request’; the client address as
          ‘self.client_address’; and the server instance as
          ‘self.server’, in case it needs access to per-server
          information.

          The type of ‘self.request’ is different for datagram or stream
          services.  For stream services, ‘self.request’ is a socket
          object; for datagram services, ‘self.request’ is a pair of
          string and socket.

      -- Method: finish ()

          Called after the *note handle(): 26cb. method to perform any
          clean-up actions required.  The default implementation does
          nothing.  If *note setup(): 26e6. raises an exception, this
          function will not be called.

 -- Class: socketserver.StreamRequestHandler
 -- Class: socketserver.DatagramRequestHandler

     These *note BaseRequestHandler: 26ca. subclasses override the *note
     setup(): 26e6. and *note finish(): 26e7. methods, and provide
     ‘self.rfile’ and ‘self.wfile’ attributes.  The ‘self.rfile’ and
     ‘self.wfile’ attributes can be read or written, respectively, to
     get the request data or return data to the client.


File: python.info,  Node: Examples<17>,  Prev: Request Handler Objects,  Up: socketserver --- A framework for network servers

5.21.21.4 Examples
..................

* Menu:

* socketserver.TCPServer Example: socketserver TCPServer Example. 
* socketserver.UDPServer Example: socketserver UDPServer Example. 
* Asynchronous Mixins:: 


File: python.info,  Node: socketserver TCPServer Example,  Next: socketserver UDPServer Example,  Up: Examples<17>

5.21.21.5 ‘socketserver.TCPServer’ Example
..........................................

This is the server side:

     import socketserver

     class MyTCPHandler(socketserver.BaseRequestHandler):
         """
         The request handler class for our server.

         It is instantiated once per connection to the server, and must
         override the handle() method to implement communication to the
         client.
         """

         def handle(self):
             # self.request is the TCP socket connected to the client
             self.data = self.request.recv(1024).strip()
             print("{} wrote:".format(self.client_address[0]))
             print(self.data)
             # just send back the same data, but upper-cased
             self.request.sendall(self.data.upper())

     if __name__ == "__main__":
         HOST, PORT = "localhost", 9999

         # Create the server, binding to localhost on port 9999
         with socketserver.TCPServer((HOST, PORT), MyTCPHandler) as server:
             # Activate the server; this will keep running until you
             # interrupt the program with Ctrl-C
             server.serve_forever()

An alternative request handler class that makes use of streams
(file-like objects that simplify communication by providing the standard
file interface):

     class MyTCPHandler(socketserver.StreamRequestHandler):

         def handle(self):
             # self.rfile is a file-like object created by the handler;
             # we can now use e.g. readline() instead of raw recv() calls
             self.data = self.rfile.readline().strip()
             print("{} wrote:".format(self.client_address[0]))
             print(self.data)
             # Likewise, self.wfile is a file-like object used to write back
             # to the client
             self.wfile.write(self.data.upper())

The difference is that the ‘readline()’ call in the second handler will
call ‘recv()’ multiple times until it encounters a newline character,
while the single ‘recv()’ call in the first handler will just return
what has been sent from the client in one ‘sendall()’ call.

This is the client side:

     import socket
     import sys

     HOST, PORT = "localhost", 9999
     data = " ".join(sys.argv[1:])

     # Create a socket (SOCK_STREAM means a TCP socket)
     with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
         # Connect to server and send data
         sock.connect((HOST, PORT))
         sock.sendall(bytes(data + "\n", "utf-8"))

         # Receive data from the server and shut down
         received = str(sock.recv(1024), "utf-8")

     print("Sent:     {}".format(data))
     print("Received: {}".format(received))

The output of the example should look something like this:

Server:

     $ python TCPServer.py
     127.0.0.1 wrote:
     b'hello world with TCP'
     127.0.0.1 wrote:
     b'python is nice'

Client:

     $ python TCPClient.py hello world with TCP
     Sent:     hello world with TCP
     Received: HELLO WORLD WITH TCP
     $ python TCPClient.py python is nice
     Sent:     python is nice
     Received: PYTHON IS NICE


File: python.info,  Node: socketserver UDPServer Example,  Next: Asynchronous Mixins,  Prev: socketserver TCPServer Example,  Up: Examples<17>

5.21.21.6 ‘socketserver.UDPServer’ Example
..........................................

This is the server side:

     import socketserver

     class MyUDPHandler(socketserver.BaseRequestHandler):
         """
         This class works similar to the TCP handler class, except that
         self.request consists of a pair of data and client socket, and since
         there is no connection the client address must be given explicitly
         when sending data back via sendto().
         """

         def handle(self):
             data = self.request[0].strip()
             socket = self.request[1]
             print("{} wrote:".format(self.client_address[0]))
             print(data)
             socket.sendto(data.upper(), self.client_address)

     if __name__ == "__main__":
         HOST, PORT = "localhost", 9999
         with socketserver.UDPServer((HOST, PORT), MyUDPHandler) as server:
             server.serve_forever()

This is the client side:

     import socket
     import sys

     HOST, PORT = "localhost", 9999
     data = " ".join(sys.argv[1:])

     # SOCK_DGRAM is the socket type to use for UDP sockets
     sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

     # As you can see, there is no connect() call; UDP has no connections.
     # Instead, data is directly sent to the recipient via sendto().
     sock.sendto(bytes(data + "\n", "utf-8"), (HOST, PORT))
     received = str(sock.recv(1024), "utf-8")

     print("Sent:     {}".format(data))
     print("Received: {}".format(received))

The output of the example should look exactly like for the TCP server
example.


File: python.info,  Node: Asynchronous Mixins,  Prev: socketserver UDPServer Example,  Up: Examples<17>

5.21.21.7 Asynchronous Mixins
.............................

To build asynchronous handlers, use the *note ThreadingMixIn: 26c9. and
*note ForkingMixIn: 6c4. classes.

An example for the *note ThreadingMixIn: 26c9. class:

     import socket
     import threading
     import socketserver

     class ThreadedTCPRequestHandler(socketserver.BaseRequestHandler):

         def handle(self):
             data = str(self.request.recv(1024), 'ascii')
             cur_thread = threading.current_thread()
             response = bytes("{}: {}".format(cur_thread.name, data), 'ascii')
             self.request.sendall(response)

     class ThreadedTCPServer(socketserver.ThreadingMixIn, socketserver.TCPServer):
         pass

     def client(ip, port, message):
         with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
             sock.connect((ip, port))
             sock.sendall(bytes(message, 'ascii'))
             response = str(sock.recv(1024), 'ascii')
             print("Received: {}".format(response))

     if __name__ == "__main__":
         # Port 0 means to select an arbitrary unused port
         HOST, PORT = "localhost", 0

         server = ThreadedTCPServer((HOST, PORT), ThreadedTCPRequestHandler)
         with server:
             ip, port = server.server_address

             # Start a thread with the server -- that thread will then start one
             # more thread for each request
             server_thread = threading.Thread(target=server.serve_forever)
             # Exit the server thread when the main thread terminates
             server_thread.daemon = True
             server_thread.start()
             print("Server loop running in thread:", server_thread.name)

             client(ip, port, "Hello World 1")
             client(ip, port, "Hello World 2")
             client(ip, port, "Hello World 3")

             server.shutdown()

The output of the example should look something like this:

     $ python ThreadedTCPServer.py
     Server loop running in thread: Thread-1
     Received: Thread-2: Hello World 1
     Received: Thread-3: Hello World 2
     Received: Thread-4: Hello World 3

The *note ForkingMixIn: 6c4. class is used in the same way, except that
the server will spawn a new process for each request.


File: python.info,  Node: http server --- HTTP servers,  Next: http cookies --- HTTP state management,  Prev: socketserver --- A framework for network servers,  Up: Internet Protocols and Support

5.21.22 ‘http.server’ — HTTP servers
------------------------------------

`Source code:' Lib/http/server.py(1)

__________________________________________________________________

This module defines classes for implementing HTTP servers (Web servers).

One class, *note HTTPServer: 24b9, is a *note socketserver.TCPServer:
26c3. subclass.  It creates and listens at the HTTP socket, dispatching
the requests to a handler.  Code to create and run the server looks like
this:

     def run(server_class=HTTPServer, handler_class=BaseHTTPRequestHandler):
         server_address = ('', 8000)
         httpd = server_class(server_address, handler_class)
         httpd.serve_forever()

 -- Class: http.server.HTTPServer (server_address, RequestHandlerClass)

     This class builds on the *note TCPServer: 26c3. class by storing
     the server address as instance variables named ‘server_name’ and
     ‘server_port’.  The server is accessible by the handler, typically
     through the handler’s ‘server’ instance variable.

The *note HTTPServer: 24b9. must be given a `RequestHandlerClass' on
instantiation, of which this module provides three different variants:

 -- Class: http.server.BaseHTTPRequestHandler (request, client_address,
          server)

     This class is used to handle the HTTP requests that arrive at the
     server.  By itself, it cannot respond to any actual HTTP requests;
     it must be subclassed to handle each request method (e.g.  GET or
     POST). *note BaseHTTPRequestHandler: 63b. provides a number of
     class and instance variables, and methods for use by subclasses.

     The handler will parse the request and the headers, then call a
     method specific to the request type.  The method name is
     constructed from the request.  For example, for the request method
     ‘SPAM’, the ‘do_SPAM()’ method will be called with no arguments.
     All of the relevant information is stored in instance variables of
     the handler.  Subclasses should not need to override or extend the
     *note __init__(): 9d5. method.

     *note BaseHTTPRequestHandler: 63b. has the following instance
     variables:

      -- Attribute: client_address

          Contains a tuple of the form ‘(host, port)’ referring to the
          client’s address.

      -- Attribute: server

          Contains the server instance.

      -- Attribute: close_connection

          Boolean that should be set before *note handle_one_request():
          26f1. returns, indicating if another request may be expected,
          or if the connection should be shut down.

      -- Attribute: requestline

          Contains the string representation of the HTTP request line.
          The terminating CRLF is stripped.  This attribute should be
          set by *note handle_one_request(): 26f1.  If no valid request
          line was processed, it should be set to the empty string.

      -- Attribute: command

          Contains the command (request type).  For example, ‘'GET'’.

      -- Attribute: path

          Contains the request path.

      -- Attribute: request_version

          Contains the version string from the request.  For example,
          ‘'HTTP/1.0'’.

      -- Attribute: headers

          Holds an instance of the class specified by the *note
          MessageClass: 26f7. class variable.  This instance parses and
          manages the headers in the HTTP request.  The
          ‘parse_headers()’ function from *note http.client: 93. is used
          to parse the headers and it requires that the HTTP request
          provide a valid RFC 2822(2) style header.

      -- Attribute: rfile

          Contains an input stream, positioned at the start of the
          optional input data.

      -- Attribute: wfile

          Contains the output stream for writing a response back to the
          client.  Proper adherence to the HTTP protocol must be used
          when writing to this stream.

     *note BaseHTTPRequestHandler: 63b. has the following attributes:

      -- Attribute: server_version

          Specifies the server software version.  You may want to
          override this.  The format is multiple whitespace-separated
          strings, where each string is of the form name[/version].  For
          example, ‘'BaseHTTP/0.2'’.

      -- Attribute: sys_version

          Contains the Python system version, in a form usable by the
          *note version_string: 26fc. method and the *note
          server_version: 26fa. class variable.  For example,
          ‘'Python/1.4'’.

      -- Attribute: error_message_format

          Specifies a format string that should be used by *note
          send_error(): 451. method for building an error response to
          the client.  The string is filled by default with variables
          from *note responses: 2584. based on the status code that
          passed to *note send_error(): 451.

      -- Attribute: error_content_type

          Specifies the Content-Type HTTP header of error responses sent
          to the client.  The default value is ‘'text/html'’.

      -- Attribute: protocol_version

          This specifies the HTTP protocol version used in responses.
          If set to ‘'HTTP/1.1'’, the server will permit HTTP persistent
          connections; however, your server `must' then include an
          accurate ‘Content-Length’ header (using *note send_header():
          2700.) in all of its responses to clients.  For backwards
          compatibility, the setting defaults to ‘'HTTP/1.0'’.

      -- Attribute: MessageClass

          Specifies an *note email.message.Message: 3d2.-like class to
          parse HTTP headers.  Typically, this is not overridden, and it
          defaults to ‘http.client.HTTPMessage’.

      -- Attribute: responses

          This attribute contains a mapping of error code integers to
          two-element tuples containing a short and long message.  For
          example, ‘{code: (shortmessage, longmessage)}’.  The
          `shortmessage' is usually used as the `message' key in an
          error response, and `longmessage' as the `explain' key.  It is
          used by *note send_response_only(): 2701. and *note
          send_error(): 451. methods.

     A *note BaseHTTPRequestHandler: 63b. instance has the following
     methods:

      -- Method: handle ()

          Calls *note handle_one_request(): 26f1. once (or, if
          persistent connections are enabled, multiple times) to handle
          incoming HTTP requests.  You should never need to override it;
          instead, implement appropriate ‘do_*()’ methods.

      -- Method: handle_one_request ()

          This method will parse and dispatch the request to the
          appropriate ‘do_*()’ method.  You should never need to
          override it.

      -- Method: handle_expect_100 ()

          When a HTTP/1.1 compliant server receives an ‘Expect:
          100-continue’ request header it responds back with a ‘100
          Continue’ followed by ‘200 OK’ headers.  This method can be
          overridden to raise an error if the server does not want the
          client to continue.  For e.g.  server can chose to send ‘417
          Expectation Failed’ as a response header and ‘return False’.

          New in version 3.2.

      -- Method: send_error (code, message=None, explain=None)

          Sends and logs a complete error reply to the client.  The
          numeric `code' specifies the HTTP error code, with `message'
          as an optional, short, human readable description of the
          error.  The `explain' argument can be used to provide more
          detailed information about the error; it will be formatted
          using the *note error_message_format: 26fd. attribute and
          emitted, after a complete set of headers, as the response
          body.  The *note responses: 2584. attribute holds the default
          values for `message' and `explain' that will be used if no
          value is provided; for unknown codes the default value for
          both is the string ‘???’.

          Changed in version 3.4: The error response includes a
          Content-Length header.  Added the `explain' argument.

      -- Method: send_response (code, message=None)

          Adds a response header to the headers buffer and logs the
          accepted request.  The HTTP response line is written to the
          internal buffer, followed by `Server' and `Date' headers.  The
          values for these two headers are picked up from the *note
          version_string(): 26fc. and *note date_time_string(): 2705.
          methods, respectively.  If the server does not intend to send
          any other headers using the *note send_header(): 2700. method,
          then *note send_response(): 2704. should be followed by an
          *note end_headers(): 63c. call.

          Changed in version 3.3: Headers are stored to an internal
          buffer and *note end_headers(): 63c. needs to be called
          explicitly.

      -- Method: send_header (keyword, value)

          Adds the HTTP header to an internal buffer which will be
          written to the output stream when either *note end_headers():
          63c. or *note flush_headers(): 63d. is invoked.  `keyword'
          should specify the header keyword, with `value' specifying its
          value.  Note that, after the send_header calls are done, *note
          end_headers(): 63c. MUST BE called in order to complete the
          operation.

          Changed in version 3.2: Headers are stored in an internal
          buffer.

      -- Method: send_response_only (code, message=None)

          Sends the response header only, used for the purposes when
          ‘100 Continue’ response is sent by the server to the client.
          The headers not buffered and sent directly the output
          stream.If the `message' is not specified, the HTTP message
          corresponding the response `code' is sent.

          New in version 3.2.

      -- Method: end_headers ()

          Adds a blank line (indicating the end of the HTTP headers in
          the response) to the headers buffer and calls *note
          flush_headers(): 63d.

          Changed in version 3.2: The buffered headers are written to
          the output stream.

      -- Method: flush_headers ()

          Finally send the headers to the output stream and flush the
          internal headers buffer.

          New in version 3.3.

      -- Method: log_request (code='-', size='-')

          Logs an accepted (successful) request.  `code' should specify
          the numeric HTTP code associated with the response.  If a size
          of the response is available, then it should be passed as the
          `size' parameter.

      -- Method: log_error (...)

          Logs an error when a request cannot be fulfilled.  By default,
          it passes the message to *note log_message(): 2708, so it
          takes the same arguments (`format' and additional values).

      -- Method: log_message (format, ...)

          Logs an arbitrary message to ‘sys.stderr’.  This is typically
          overridden to create custom error logging mechanisms.  The
          `format' argument is a standard printf-style format string,
          where the additional arguments to *note log_message(): 2708.
          are applied as inputs to the formatting.  The client ip
          address and current date and time are prefixed to every
          message logged.

      -- Method: version_string ()

          Returns the server software’s version string.  This is a
          combination of the *note server_version: 26fa. and *note
          sys_version: 26fb. attributes.

      -- Method: date_time_string (timestamp=None)

          Returns the date and time given by `timestamp' (which must be
          None or in the format returned by *note time.time(): 6a5.),
          formatted for a message header.  If `timestamp' is omitted, it
          uses the current date and time.

          The result looks like ‘'Sun, 06 Nov 1994 08:49:37 GMT'’.

      -- Method: log_date_time_string ()

          Returns the current date and time, formatted for logging.

      -- Method: address_string ()

          Returns the client address.

          Changed in version 3.3: Previously, a name lookup was
          performed.  To avoid name resolution delays, it now always
          returns the IP address.

 -- Class: http.server.SimpleHTTPRequestHandler (request,
          client_address, server)

     This class serves files from the current directory and below,
     directly mapping the directory structure to HTTP requests.

     A lot of the work, such as parsing the request, is done by the base
     class *note BaseHTTPRequestHandler: 63b.  This class implements the
     *note do_GET(): 270c. and *note do_HEAD(): 270d. functions.

     The following are defined as class-level attributes of *note
     SimpleHTTPRequestHandler: 270b.:

      -- Attribute: server_version

          This will be ‘"SimpleHTTP/" + __version__’, where
          ‘__version__’ is defined at the module level.

      -- Attribute: extensions_map

          A dictionary mapping suffixes into MIME types.  The default is
          signified by an empty string, and is considered to be
          ‘application/octet-stream’.  The mapping is used
          case-insensitively, and so should contain only lower-cased
          keys.

     The *note SimpleHTTPRequestHandler: 270b. class defines the
     following methods:

      -- Method: do_HEAD ()

          This method serves the ‘'HEAD'’ request type: it sends the
          headers it would send for the equivalent ‘GET’ request.  See
          the *note do_GET(): 270c. method for a more complete
          explanation of the possible headers.

      -- Method: do_GET ()

          The request is mapped to a local file by interpreting the
          request as a path relative to the current working directory.

          If the request was mapped to a directory, the directory is
          checked for a file named ‘index.html’ or ‘index.htm’ (in that
          order).  If found, the file’s contents are returned; otherwise
          a directory listing is generated by calling the
          ‘list_directory()’ method.  This method uses *note
          os.listdir(): 675. to scan the directory, and returns a ‘404’
          error response if the *note listdir(): 675. fails.

          If the request was mapped to a file, it is opened and the
          contents are returned.  Any *note OSError: 4b6. exception in
          opening the requested file is mapped to a ‘404’, ‘'File not
          found'’ error.  Otherwise, the content type is guessed by
          calling the ‘guess_type()’ method, which in turn uses the
          `extensions_map' variable.

          A ‘'Content-type:'’ header with the guessed content type is
          output, followed by a ‘'Content-Length:'’ header with the
          file’s size and a ‘'Last-Modified:'’ header with the file’s
          modification time.

          Then follows a blank line signifying the end of the headers,
          and then the contents of the file are output.  If the file’s
          MIME type starts with ‘text/’ the file is opened in text mode;
          otherwise binary mode is used.

          For example usage, see the implementation of the *note test():
          103. function invocation in the *note http.server: 96. module.

The *note SimpleHTTPRequestHandler: 270b. class can be used in the
following manner in order to create a very basic webserver serving files
relative to the current directory:

     import http.server
     import socketserver

     PORT = 8000

     Handler = http.server.SimpleHTTPRequestHandler

     with socketserver.TCPServer(("", PORT), Handler) as httpd:
         print("serving at port", PORT)
         httpd.serve_forever()
*note http.server: 96. can also be invoked directly using the *note -m:
8b4. switch of the interpreter with a ‘port number’ argument.  Similar
to the previous example, this serves files relative to the current
directory:

     python -m http.server 8000

By default, server binds itself to all interfaces.  The option
‘-b/--bind’ specifies a specific address to which it should bind.  For
example, the following command causes the server to bind to localhost
only:

     python -m http.server 8000 --bind 127.0.0.1

New in version 3.4: ‘--bind’ argument was introduced.

 -- Class: http.server.CGIHTTPRequestHandler (request, client_address,
          server)

     This class is used to serve either files or output of CGI scripts
     from the current directory and below.  Note that mapping HTTP
     hierarchic structure to local directory structure is exactly as in
     *note SimpleHTTPRequestHandler: 270b.

          Note: CGI scripts run by the *note CGIHTTPRequestHandler:
          2710. class cannot execute redirects (HTTP code 302), because
          code 200 (script output follows) is sent prior to execution of
          the CGI script.  This pre-empts the status code.

     The class will however, run the CGI script, instead of serving it
     as a file, if it guesses it to be a CGI script.  Only
     directory-based CGI are used — the other common server
     configuration is to treat special extensions as denoting CGI
     scripts.

     The ‘do_GET()’ and ‘do_HEAD()’ functions are modified to run CGI
     scripts and serve the output, instead of serving files, if the
     request leads to somewhere below the ‘cgi_directories’ path.

     The *note CGIHTTPRequestHandler: 2710. defines the following data
     member:

      -- Attribute: cgi_directories

          This defaults to ‘['/cgi-bin', '/htbin']’ and describes
          directories to treat as containing CGI scripts.

     The *note CGIHTTPRequestHandler: 2710. defines the following
     method:

      -- Method: do_POST ()

          This method serves the ‘'POST'’ request type, only allowed for
          CGI scripts.  Error 501, "Can only POST to CGI scripts", is
          output when trying to POST to a non-CGI url.

     Note that CGI scripts will be run with UID of user nobody, for
     security reasons.  Problems with the CGI script will be translated
     to error 403.

*note CGIHTTPRequestHandler: 2710. can be enabled in the command line by
passing the ‘--cgi’ option:

     python -m http.server --cgi 8000

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/http/server.py

   (2) https://tools.ietf.org/html/rfc2822.html


File: python.info,  Node: http cookies --- HTTP state management,  Next: http cookiejar --- Cookie handling for HTTP clients,  Prev: http server --- HTTP servers,  Up: Internet Protocols and Support

5.21.23 ‘http.cookies’ — HTTP state management
----------------------------------------------

`Source code:' Lib/http/cookies.py(1)

__________________________________________________________________

The *note http.cookies: 95. module defines classes for abstracting the
concept of cookies, an HTTP state management mechanism.  It supports
both simple string-only cookies, and provides an abstraction for having
any serializable data-type as cookie value.

The module formerly strictly applied the parsing rules described in the
RFC 2109(2) and RFC 2068(3) specifications.  It has since been
discovered that MSIE 3.0x doesn’t follow the character rules outlined in
those specs and also many current day browsers and servers have relaxed
parsing rules when comes to Cookie handling.  As a result, the parsing
rules used are a bit less strict.

The character set, *note string.ascii_letters: 8c6, *note string.digits:
10d8. and ‘!#$%&'*+-.^_`|~:’ denote the set of valid characters allowed
by this module in Cookie name (as *note key: 391.).

Changed in version 3.3: Allowed ’:’ as a valid Cookie name character.

     Note: On encountering an invalid cookie, *note CookieError: 2715.
     is raised, so if your cookie data comes from a browser you should
     always prepare for invalid data and catch *note CookieError: 2715.
     on parsing.

 -- Exception: http.cookies.CookieError

     Exception failing because of RFC 2109(4) invalidity: incorrect
     attributes, incorrect ‘Set-Cookie’ header, etc.

 -- Class: http.cookies.BaseCookie ([input])

     This class is a dictionary-like object whose keys are strings and
     whose values are *note Morsel: 394. instances.  Note that upon
     setting a key to a value, the value is first converted to a *note
     Morsel: 394. containing the key and the value.

     If `input' is given, it is passed to the *note load(): 2717.
     method.

 -- Class: http.cookies.SimpleCookie ([input])

     This class derives from *note BaseCookie: 2716. and overrides
     ‘value_decode()’ and ‘value_encode()’ to be the identity and *note
     str(): 25a. respectively.

See also
........

Module *note http.cookiejar: 94.

     HTTP cookie handling for web `clients'.  The *note http.cookiejar:
     94. and *note http.cookies: 95. modules do not depend on each
     other.

RFC 2109(5) - HTTP State Management Mechanism

     This is the state management specification implemented by this
     module.

* Menu:

* Cookie Objects:: 
* Morsel Objects:: 
* Example: Example<12>. 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/http/cookies.py

   (2) https://tools.ietf.org/html/rfc2109.html

   (3) https://tools.ietf.org/html/rfc2068.html

   (4) https://tools.ietf.org/html/rfc2109.html

   (5) https://tools.ietf.org/html/rfc2109.html


File: python.info,  Node: Cookie Objects,  Next: Morsel Objects,  Up: http cookies --- HTTP state management

5.21.23.1 Cookie Objects
........................

 -- Method: BaseCookie.value_decode (val)

     Return a decoded value from a string representation.  Return value
     can be any type.  This method does nothing in *note BaseCookie:
     2716. — it exists so it can be overridden.

 -- Method: BaseCookie.value_encode (val)

     Return an encoded value.  `val' can be any type, but return value
     must be a string.  This method does nothing in *note BaseCookie:
     2716. — it exists so it can be overridden.

     In general, it should be the case that *note value_encode(): 271c.
     and *note value_decode(): 271b. are inverses on the range of
     `value_decode'.

 -- Method: BaseCookie.output (attrs=None, header='Set-Cookie:',
          sep='\r\n')

     Return a string representation suitable to be sent as HTTP headers.
     `attrs' and `header' are sent to each *note Morsel: 394.’s *note
     output(): 271d. method.  `sep' is used to join the headers
     together, and is by default the combination ‘'\r\n'’ (CRLF).

 -- Method: BaseCookie.js_output (attrs=None)

     Return an embeddable JavaScript snippet, which, if run on a browser
     which supports JavaScript, will act the same as if the HTTP headers
     was sent.

     The meaning for `attrs' is the same as in *note output(): 271d.

 -- Method: BaseCookie.load (rawdata)

     If `rawdata' is a string, parse it as an ‘HTTP_COOKIE’ and add the
     values found there as *note Morsel: 394.s.  If it is a dictionary,
     it is equivalent to:

          for k, v in rawdata.items():
              cookie[k] = v


File: python.info,  Node: Morsel Objects,  Next: Example<12>,  Prev: Cookie Objects,  Up: http cookies --- HTTP state management

5.21.23.2 Morsel Objects
........................

 -- Class: http.cookies.Morsel

     Abstract a key/value pair, which has some RFC 2109(1) attributes.

     Morsels are dictionary-like objects, whose set of keys is constant
     — the valid RFC 2109(2) attributes, which are

        * ‘expires’

        * ‘path’

        * ‘comment’

        * ‘domain’

        * ‘max-age’

        * ‘secure’

        * ‘version’

        * ‘httponly’

     The attribute ‘httponly’ specifies that the cookie is only
     transferred in HTTP requests, and is not accessible through
     JavaScript.  This is intended to mitigate some forms of cross-site
     scripting.

     The keys are case-insensitive and their default value is ‘''’.

     Changed in version 3.5: ‘__eq__()’ now takes *note key: 391. and
     *note value: 392. into account.

 -- Attribute: Morsel.value

     The value of the cookie.

     Deprecated since version 3.5: assigning to ‘value’; use *note
     set(): 395. instead.

 -- Attribute: Morsel.coded_value

     The encoded value of the cookie — this is what should be sent.

     Deprecated since version 3.5: assigning to ‘coded_value’; use *note
     set(): 395. instead.

 -- Attribute: Morsel.key

     The name of the cookie.

     Deprecated since version 3.5: assigning to ‘key’; use *note set():
     395. instead.

 -- Method: Morsel.set (key, value, coded_value)

     Set the `key', `value' and `coded_value' attributes.

     Deprecated since version 3.5: The undocumented `LegalChars'
     parameter is ignored and will be removed in a future version.

 -- Method: Morsel.isReservedKey (K)

     Whether `K' is a member of the set of keys of a *note Morsel: 394.

 -- Method: Morsel.output (attrs=None, header='Set-Cookie:')

     Return a string representation of the Morsel, suitable to be sent
     as an HTTP header.  By default, all the attributes are included,
     unless `attrs' is given, in which case it should be a list of
     attributes to use.  `header' is by default ‘"Set-Cookie:"’.

 -- Method: Morsel.js_output (attrs=None)

     Return an embeddable JavaScript snippet, which, if run on a browser
     which supports JavaScript, will act the same as if the HTTP header
     was sent.

     The meaning for `attrs' is the same as in *note output(): 2722.

 -- Method: Morsel.OutputString (attrs=None)

     Return a string representing the Morsel, without any surrounding
     HTTP or JavaScript.

     The meaning for `attrs' is the same as in *note output(): 2722.

 -- Method: Morsel.update (values)

     Update the values in the Morsel dictionary with the values in the
     dictionary `values'.  Raise an error if any of the keys in the
     `values' dict is not a valid RFC 2109(3) attribute.

     Changed in version 3.5: an error is raised for invalid keys.

 -- Method: Morsel.copy (value)

     Return a shallow copy of the Morsel object.

     Changed in version 3.5: return a Morsel object instead of a dict.

 -- Method: Morsel.setdefault (key, value=None)

     Raise an error if key is not a valid RFC 2109(4) attribute,
     otherwise behave the same as *note dict.setdefault(): 5e1.

   ---------- Footnotes ----------

   (1) https://tools.ietf.org/html/rfc2109.html

   (2) https://tools.ietf.org/html/rfc2109.html

   (3) https://tools.ietf.org/html/rfc2109.html

   (4) https://tools.ietf.org/html/rfc2109.html


File: python.info,  Node: Example<12>,  Prev: Morsel Objects,  Up: http cookies --- HTTP state management

5.21.23.3 Example
.................

The following example demonstrates how to use the *note http.cookies:
95. module.

     >>> from http import cookies
     >>> C = cookies.SimpleCookie()
     >>> C["fig"] = "newton"
     >>> C["sugar"] = "wafer"
     >>> print(C) # generate HTTP headers
     Set-Cookie: fig=newton
     Set-Cookie: sugar=wafer
     >>> print(C.output()) # same thing
     Set-Cookie: fig=newton
     Set-Cookie: sugar=wafer
     >>> C = cookies.SimpleCookie()
     >>> C["rocky"] = "road"
     >>> C["rocky"]["path"] = "/cookie"
     >>> print(C.output(header="Cookie:"))
     Cookie: rocky=road; Path=/cookie
     >>> print(C.output(attrs=[], header="Cookie:"))
     Cookie: rocky=road
     >>> C = cookies.SimpleCookie()
     >>> C.load("chips=ahoy; vienna=finger") # load from a string (HTTP header)
     >>> print(C)
     Set-Cookie: chips=ahoy
     Set-Cookie: vienna=finger
     >>> C = cookies.SimpleCookie()
     >>> C.load('keebler="E=everybody; L=\\"Loves\\"; fudge=\\012;";')
     >>> print(C)
     Set-Cookie: keebler="E=everybody; L=\"Loves\"; fudge=\012;"
     >>> C = cookies.SimpleCookie()
     >>> C["oreo"] = "doublestuff"
     >>> C["oreo"]["path"] = "/"
     >>> print(C)
     Set-Cookie: oreo=doublestuff; Path=/
     >>> C = cookies.SimpleCookie()
     >>> C["twix"] = "none for you"
     >>> C["twix"].value
     'none for you'
     >>> C = cookies.SimpleCookie()
     >>> C["number"] = 7 # equivalent to C["number"] = str(7)
     >>> C["string"] = "seven"
     >>> C["number"].value
     '7'
     >>> C["string"].value
     'seven'
     >>> print(C)
     Set-Cookie: number=7
     Set-Cookie: string=seven


File: python.info,  Node: http cookiejar --- Cookie handling for HTTP clients,  Next: xmlrpc --- XMLRPC server and client modules,  Prev: http cookies --- HTTP state management,  Up: Internet Protocols and Support

5.21.24 ‘http.cookiejar’ — Cookie handling for HTTP clients
-----------------------------------------------------------

`Source code:' Lib/http/cookiejar.py(1)

__________________________________________________________________

The *note http.cookiejar: 94. module defines classes for automatic
handling of HTTP cookies.  It is useful for accessing web sites that
require small pieces of data – `cookies' – to be set on the client
machine by an HTTP response from a web server, and then returned to the
server in later HTTP requests.

Both the regular Netscape cookie protocol and the protocol defined by
RFC 2965(2) are handled.  RFC 2965 handling is switched off by default.
RFC 2109(3) cookies are parsed as Netscape cookies and subsequently
treated either as Netscape or RFC 2965 cookies according to the ’policy’
in effect.  Note that the great majority of cookies on the Internet are
Netscape cookies.  *note http.cookiejar: 94. attempts to follow the
de-facto Netscape cookie protocol (which differs substantially from that
set out in the original Netscape specification), including taking note
of the ‘max-age’ and ‘port’ cookie-attributes introduced with RFC 2965.

     Note: The various named parameters found in ‘Set-Cookie’ and
     ‘Set-Cookie2’ headers (eg.  ‘domain’ and ‘expires’) are
     conventionally referred to as `attributes'.  To distinguish them
     from Python attributes, the documentation for this module uses the
     term `cookie-attribute' instead.

The module defines the following exception:

 -- Exception: http.cookiejar.LoadError

     Instances of *note FileCookieJar: 272b. raise this exception on
     failure to load cookies from a file.  *note LoadError: 272a. is a
     subclass of *note OSError: 4b6.

     Changed in version 3.3: LoadError was made a subclass of *note
     OSError: 4b6. instead of *note IOError: 5b0.

The following classes are provided:

 -- Class: http.cookiejar.CookieJar (policy=None)

     `policy' is an object implementing the *note CookiePolicy: 272c.
     interface.

     The *note CookieJar: 252a. class stores HTTP cookies.  It extracts
     cookies from HTTP requests, and returns them in HTTP responses.
     *note CookieJar: 252a. instances automatically expire contained
     cookies when necessary.  Subclasses are also responsible for
     storing and retrieving cookies from a file or database.

 -- Class: http.cookiejar.FileCookieJar (filename, delayload=None,
          policy=None)

     `policy' is an object implementing the *note CookiePolicy: 272c.
     interface.  For the other arguments, see the documentation for the
     corresponding attributes.

     A *note CookieJar: 252a. which can load cookies from, and perhaps
     save cookies to, a file on disk.  Cookies are `NOT' loaded from the
     named file until either the *note load(): 272d. or *note revert():
     272e. method is called.  Subclasses of this class are documented in
     section *note FileCookieJar subclasses and co-operation with web
     browsers: 272f.

 -- Class: http.cookiejar.CookiePolicy

     This class is responsible for deciding whether each cookie should
     be accepted from / returned to the server.

 -- Class: http.cookiejar.DefaultCookiePolicy (blocked_domains=None,
          allowed_domains=None, netscape=True, rfc2965=False,
          rfc2109_as_netscape=None, hide_cookie2=False,
          strict_domain=False, strict_rfc2965_unverifiable=True,
          strict_ns_unverifiable=False,
          strict_ns_domain=DefaultCookiePolicy.DomainLiberal,
          strict_ns_set_initial_dollar=False, strict_ns_set_path=False)

     Constructor arguments should be passed as keyword arguments only.
     `blocked_domains' is a sequence of domain names that we never
     accept cookies from, nor return cookies to.  `allowed_domains' if
     not *note None: 19d, this is a sequence of the only domains for
     which we accept and return cookies.  For all other arguments, see
     the documentation for *note CookiePolicy: 272c. and *note
     DefaultCookiePolicy: 2730. objects.

     *note DefaultCookiePolicy: 2730. implements the standard accept /
     reject rules for Netscape and RFC 2965 cookies.  By default, RFC
     2109 cookies (ie.  cookies received in a ‘Set-Cookie’ header with a
     version cookie-attribute of 1) are treated according to the RFC
     2965 rules.  However, if RFC 2965 handling is turned off or *note
     rfc2109_as_netscape: 2731. is ‘True’, RFC 2109 cookies are
     ’downgraded’ by the *note CookieJar: 252a. instance to Netscape
     cookies, by setting the ‘version’ attribute of the *note Cookie:
     2732. instance to 0.  *note DefaultCookiePolicy: 2730. also
     provides some parameters to allow some fine-tuning of policy.

 -- Class: http.cookiejar.Cookie

     This class represents Netscape, RFC 2109 and RFC 2965 cookies.  It
     is not expected that users of *note http.cookiejar: 94. construct
     their own *note Cookie: 2732. instances.  Instead, if necessary,
     call ‘make_cookies()’ on a *note CookieJar: 252a. instance.

See also
........

Module *note urllib.request: 11d.

     URL opening with automatic cookie handling.

Module *note http.cookies: 95.

     HTTP cookie classes, principally useful for server-side code.  The
     *note http.cookiejar: 94. and *note http.cookies: 95. modules do
     not depend on each other.

‘http://curl.haxx.se/rfc/cookie_spec.html’

     The specification of the original Netscape cookie protocol.  Though
     this is still the dominant protocol, the ’Netscape cookie protocol’
     implemented by all the major browsers (and *note http.cookiejar:
     94.) only bears a passing resemblance to the one sketched out in
     ‘cookie_spec.html’.

RFC 2109(4) - HTTP State Management Mechanism

     Obsoleted by RFC 2965.  Uses ‘Set-Cookie’ with version=1.

RFC 2965(5) - HTTP State Management Mechanism

     The Netscape protocol with the bugs fixed.  Uses ‘Set-Cookie2’ in
     place of ‘Set-Cookie’.  Not widely used.

‘http://kristol.org/cookie/errata.html’

     Unfinished errata to RFC 2965.

RFC 2964(6) - Use of HTTP State Management

* Menu:

* CookieJar and FileCookieJar Objects:: 
* FileCookieJar subclasses and co-operation with web browsers:: 
* CookiePolicy Objects:: 
* DefaultCookiePolicy Objects:: 
* Cookie Objects: Cookie Objects<2>. 
* Examples: Examples<18>. 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/http/cookiejar.py

   (2) https://tools.ietf.org/html/rfc2965.html

   (3) https://tools.ietf.org/html/rfc2109.html

   (4) https://tools.ietf.org/html/rfc2109.html

   (5) https://tools.ietf.org/html/rfc2965.html

   (6) https://tools.ietf.org/html/rfc2964.html


File: python.info,  Node: CookieJar and FileCookieJar Objects,  Next: FileCookieJar subclasses and co-operation with web browsers,  Up: http cookiejar --- Cookie handling for HTTP clients

5.21.24.1 CookieJar and FileCookieJar Objects
.............................................

*note CookieJar: 252a. objects support the *note iterator: e4f. protocol
for iterating over contained *note Cookie: 2732. objects.

*note CookieJar: 252a. has the following methods:

 -- Method: CookieJar.add_cookie_header (request)

     Add correct ‘Cookie’ header to `request'.

     If policy allows (ie.  the ‘rfc2965’ and ‘hide_cookie2’ attributes
     of the *note CookieJar: 252a.’s *note CookiePolicy: 272c. instance
     are true and false respectively), the ‘Cookie2’ header is also
     added when appropriate.

     The `request' object (usually a ‘urllib.request..Request’ instance)
     must support the methods ‘get_full_url()’, ‘get_host()’,
     ‘get_type()’, ‘unverifiable()’, ‘has_header()’, ‘get_header()’,
     ‘header_items()’, ‘add_unredirected_header()’ and ‘origin_req_host’
     attribute as documented by *note urllib.request: 11d.

     Changed in version 3.3: `request' object needs ‘origin_req_host’
     attribute.  Dependency on a deprecated method
     ‘get_origin_req_host()’ has been removed.

 -- Method: CookieJar.extract_cookies (response, request)

     Extract cookies from HTTP `response' and store them in the *note
     CookieJar: 252a, where allowed by policy.

     The *note CookieJar: 252a. will look for allowable ‘Set-Cookie’ and
     ‘Set-Cookie2’ headers in the `response' argument, and store cookies
     as appropriate (subject to the *note CookiePolicy.set_ok(): 2737.
     method’s approval).

     The `response' object (usually the result of a call to *note
     urllib.request.urlopen(): 35f, or similar) should support an
     ‘info()’ method, which returns an *note email.message.Message: 3d2.
     instance.

     The `request' object (usually a *note urllib.request.Request: 4f8.
     instance) must support the methods ‘get_full_url()’, ‘get_host()’,
     ‘unverifiable()’, and ‘origin_req_host’ attribute, as documented by
     *note urllib.request: 11d.  The request is used to set default
     values for cookie-attributes as well as for checking that the
     cookie is allowed to be set.

     Changed in version 3.3: `request' object needs ‘origin_req_host’
     attribute.  Dependency on a deprecated method
     ‘get_origin_req_host()’ has been removed.

 -- Method: CookieJar.set_policy (policy)

     Set the *note CookiePolicy: 272c. instance to be used.

 -- Method: CookieJar.make_cookies (response, request)

     Return sequence of *note Cookie: 2732. objects extracted from
     `response' object.

     See the documentation for *note extract_cookies(): 2736. for the
     interfaces required of the `response' and `request' arguments.

 -- Method: CookieJar.set_cookie_if_ok (cookie, request)

     Set a *note Cookie: 2732. if policy says it’s OK to do so.

 -- Method: CookieJar.set_cookie (cookie)

     Set a *note Cookie: 2732, without checking with policy to see
     whether or not it should be set.

 -- Method: CookieJar.clear ([domain[, path[, name]]])

     Clear some cookies.

     If invoked without arguments, clear all cookies.  If given a single
     argument, only cookies belonging to that `domain' will be removed.
     If given two arguments, cookies belonging to the specified `domain'
     and URL `path' are removed.  If given three arguments, then the
     cookie with the specified `domain', `path' and `name' is removed.

     Raises *note KeyError: 1a7. if no matching cookie exists.

 -- Method: CookieJar.clear_session_cookies ()

     Discard all session cookies.

     Discards all contained cookies that have a true ‘discard’ attribute
     (usually because they had either no ‘max-age’ or ‘expires’
     cookie-attribute, or an explicit ‘discard’ cookie-attribute).  For
     interactive browsers, the end of a session usually corresponds to
     closing the browser window.

     Note that the ‘save()’ method won’t save session cookies anyway,
     unless you ask otherwise by passing a true `ignore_discard'
     argument.

*note FileCookieJar: 272b. implements the following additional methods:

 -- Method: FileCookieJar.save (filename=None, ignore_discard=False,
          ignore_expires=False)

     Save cookies to a file.

     This base class raises *note NotImplementedError: 569.  Subclasses
     may leave this method unimplemented.

     `filename' is the name of file in which to save cookies.  If
     `filename' is not specified, ‘self.filename’ is used (whose default
     is the value passed to the constructor, if any); if ‘self.filename’
     is *note None: 19d, *note ValueError: 19c. is raised.

     `ignore_discard': save even cookies set to be discarded.
     `ignore_expires': save even cookies that have expired

     The file is overwritten if it already exists, thus wiping all the
     cookies it contains.  Saved cookies can be restored later using the
     *note load(): 272d. or *note revert(): 272e. methods.

 -- Method: FileCookieJar.load (filename=None, ignore_discard=False,
          ignore_expires=False)

     Load cookies from a file.

     Old cookies are kept unless overwritten by newly loaded ones.

     Arguments are as for *note save(): 273e.

     The named file must be in the format understood by the class, or
     *note LoadError: 272a. will be raised.  Also, *note OSError: 4b6.
     may be raised, for example if the file does not exist.

     Changed in version 3.3: *note IOError: 5b0. used to be raised, it
     is now an alias of *note OSError: 4b6.

 -- Method: FileCookieJar.revert (filename=None, ignore_discard=False,
          ignore_expires=False)

     Clear all cookies and reload cookies from a saved file.

     *note revert(): 272e. can raise the same exceptions as *note
     load(): 272d.  If there is a failure, the object’s state will not
     be altered.

*note FileCookieJar: 272b. instances have the following public
attributes:

 -- Attribute: FileCookieJar.filename

     Filename of default file in which to keep cookies.  This attribute
     may be assigned to.

 -- Attribute: FileCookieJar.delayload

     If true, load cookies lazily from disk.  This attribute should not
     be assigned to.  This is only a hint, since this only affects
     performance, not behaviour (unless the cookies on disk are
     changing).  A *note CookieJar: 252a. object may ignore it.  None of
     the *note FileCookieJar: 272b. classes included in the standard
     library lazily loads cookies.


File: python.info,  Node: FileCookieJar subclasses and co-operation with web browsers,  Next: CookiePolicy Objects,  Prev: CookieJar and FileCookieJar Objects,  Up: http cookiejar --- Cookie handling for HTTP clients

5.21.24.2 FileCookieJar subclasses and co-operation with web browsers
.....................................................................

The following *note CookieJar: 252a. subclasses are provided for reading
and writing.

 -- Class: http.cookiejar.MozillaCookieJar (filename, delayload=None,
          policy=None)

     A *note FileCookieJar: 272b. that can load from and save cookies to
     disk in the Mozilla ‘cookies.txt’ file format (which is also used
     by the Lynx and Netscape browsers).

          Note: This loses information about RFC 2965 cookies, and also
          about newer or non-standard cookie-attributes such as ‘port’.

          Warning: Back up your cookies before saving if you have
          cookies whose loss / corruption would be inconvenient (there
          are some subtleties which may lead to slight changes in the
          file over a load / save round-trip).

     Also note that cookies saved while Mozilla is running will get
     clobbered by Mozilla.

 -- Class: http.cookiejar.LWPCookieJar (filename, delayload=None,
          policy=None)

     A *note FileCookieJar: 272b. that can load from and save cookies to
     disk in format compatible with the libwww-perl library’s
     ‘Set-Cookie3’ file format.  This is convenient if you want to store
     cookies in a human-readable file.


File: python.info,  Node: CookiePolicy Objects,  Next: DefaultCookiePolicy Objects,  Prev: FileCookieJar subclasses and co-operation with web browsers,  Up: http cookiejar --- Cookie handling for HTTP clients

5.21.24.3 CookiePolicy Objects
..............................

Objects implementing the *note CookiePolicy: 272c. interface have the
following methods:

 -- Method: CookiePolicy.set_ok (cookie, request)

     Return boolean value indicating whether cookie should be accepted
     from server.

     `cookie' is a *note Cookie: 2732. instance.  `request' is an object
     implementing the interface defined by the documentation for *note
     CookieJar.extract_cookies(): 2736.

 -- Method: CookiePolicy.return_ok (cookie, request)

     Return boolean value indicating whether cookie should be returned
     to server.

     `cookie' is a *note Cookie: 2732. instance.  `request' is an object
     implementing the interface defined by the documentation for *note
     CookieJar.add_cookie_header(): 2735.

 -- Method: CookiePolicy.domain_return_ok (domain, request)

     Return false if cookies should not be returned, given cookie
     domain.

     This method is an optimization.  It removes the need for checking
     every cookie with a particular domain (which might involve reading
     many files).  Returning true from *note domain_return_ok(): 2747.
     and *note path_return_ok(): 2748. leaves all the work to *note
     return_ok(): 2746.

     If *note domain_return_ok(): 2747. returns true for the cookie
     domain, *note path_return_ok(): 2748. is called for the cookie
     path.  Otherwise, *note path_return_ok(): 2748. and *note
     return_ok(): 2746. are never called for that cookie domain.  If
     *note path_return_ok(): 2748. returns true, *note return_ok():
     2746. is called with the *note Cookie: 2732. object itself for a
     full check.  Otherwise, *note return_ok(): 2746. is never called
     for that cookie path.

     Note that *note domain_return_ok(): 2747. is called for every
     `cookie' domain, not just for the `request' domain.  For example,
     the function might be called with both ‘".example.com"’ and
     ‘"www.example.com"’ if the request domain is ‘"www.example.com"’.
     The same goes for *note path_return_ok(): 2748.

     The `request' argument is as documented for *note return_ok():
     2746.

 -- Method: CookiePolicy.path_return_ok (path, request)

     Return false if cookies should not be returned, given cookie path.

     See the documentation for *note domain_return_ok(): 2747.

In addition to implementing the methods above, implementations of the
*note CookiePolicy: 272c. interface must also supply the following
attributes, indicating which protocols should be used, and how.  All of
these attributes may be assigned to.

 -- Attribute: CookiePolicy.netscape

     Implement Netscape protocol.

 -- Attribute: CookiePolicy.rfc2965

     Implement RFC 2965 protocol.

 -- Attribute: CookiePolicy.hide_cookie2

     Don’t add ‘Cookie2’ header to requests (the presence of this header
     indicates to the server that we understand RFC 2965 cookies).

The most useful way to define a *note CookiePolicy: 272c. class is by
subclassing from *note DefaultCookiePolicy: 2730. and overriding some or
all of the methods above.  *note CookiePolicy: 272c. itself may be used
as a ’null policy’ to allow setting and receiving any and all cookies
(this is unlikely to be useful).


File: python.info,  Node: DefaultCookiePolicy Objects,  Next: Cookie Objects<2>,  Prev: CookiePolicy Objects,  Up: http cookiejar --- Cookie handling for HTTP clients

5.21.24.4 DefaultCookiePolicy Objects
.....................................

Implements the standard rules for accepting and returning cookies.

Both RFC 2965 and Netscape cookies are covered.  RFC 2965 handling is
switched off by default.

The easiest way to provide your own policy is to override this class and
call its methods in your overridden implementations before adding your
own additional checks:

     import http.cookiejar
     class MyCookiePolicy(http.cookiejar.DefaultCookiePolicy):
         def set_ok(self, cookie, request):
             if not http.cookiejar.DefaultCookiePolicy.set_ok(self, cookie, request):
                 return False
             if i_dont_want_to_store_this_cookie(cookie):
                 return False
             return True

In addition to the features required to implement the *note
CookiePolicy: 272c. interface, this class allows you to block and allow
domains from setting and receiving cookies.  There are also some
strictness switches that allow you to tighten up the rather loose
Netscape protocol rules a little bit (at the cost of blocking some
benign cookies).

A domain blacklist and whitelist is provided (both off by default).
Only domains not in the blacklist and present in the whitelist (if the
whitelist is active) participate in cookie setting and returning.  Use
the `blocked_domains' constructor argument, and ‘blocked_domains()’ and
‘set_blocked_domains()’ methods (and the corresponding argument and
methods for `allowed_domains').  If you set a whitelist, you can turn it
off again by setting it to *note None: 19d.

Domains in block or allow lists that do not start with a dot must equal
the cookie domain to be matched.  For example, ‘"example.com"’ matches a
blacklist entry of ‘"example.com"’, but ‘"www.example.com"’ does not.
Domains that do start with a dot are matched by more specific domains
too.  For example, both ‘"www.example.com"’ and
‘"www.coyote.example.com"’ match ‘".example.com"’ (but ‘"example.com"’
itself does not).  IP addresses are an exception, and must match
exactly.  For example, if blocked_domains contains ‘"192.168.1.2"’ and
‘".168.1.2"’, 192.168.1.2 is blocked, but 193.168.1.2 is not.

*note DefaultCookiePolicy: 2730. implements the following additional
methods:

 -- Method: DefaultCookiePolicy.blocked_domains ()

     Return the sequence of blocked domains (as a tuple).

 -- Method: DefaultCookiePolicy.set_blocked_domains (blocked_domains)

     Set the sequence of blocked domains.

 -- Method: DefaultCookiePolicy.is_blocked (domain)

     Return whether `domain' is on the blacklist for setting or
     receiving cookies.

 -- Method: DefaultCookiePolicy.allowed_domains ()

     Return *note None: 19d, or the sequence of allowed domains (as a
     tuple).

 -- Method: DefaultCookiePolicy.set_allowed_domains (allowed_domains)

     Set the sequence of allowed domains, or *note None: 19d.

 -- Method: DefaultCookiePolicy.is_not_allowed (domain)

     Return whether `domain' is not on the whitelist for setting or
     receiving cookies.

*note DefaultCookiePolicy: 2730. instances have the following
attributes, which are all initialised from the constructor arguments of
the same name, and which may all be assigned to.

 -- Attribute: DefaultCookiePolicy.rfc2109_as_netscape

     If true, request that the *note CookieJar: 252a. instance downgrade
     RFC 2109 cookies (ie.  cookies received in a ‘Set-Cookie’ header
     with a version cookie-attribute of 1) to Netscape cookies by
     setting the version attribute of the *note Cookie: 2732. instance
     to 0.  The default value is *note None: 19d, in which case RFC 2109
     cookies are downgraded if and only if RFC 2965 handling is turned
     off.  Therefore, RFC 2109 cookies are downgraded by default.

General strictness switches:

 -- Attribute: DefaultCookiePolicy.strict_domain

     Don’t allow sites to set two-component domains with country-code
     top-level domains like ‘.co.uk’, ‘.gov.uk’, ‘.co.nz’.etc.  This is
     far from perfect and isn’t guaranteed to work!

RFC 2965 protocol strictness switches:

 -- Attribute: DefaultCookiePolicy.strict_rfc2965_unverifiable

     Follow RFC 2965 rules on unverifiable transactions (usually, an
     unverifiable transaction is one resulting from a redirect or a
     request for an image hosted on another site).  If this is false,
     cookies are `never' blocked on the basis of verifiability

Netscape protocol strictness switches:

 -- Attribute: DefaultCookiePolicy.strict_ns_unverifiable

     Apply RFC 2965 rules on unverifiable transactions even to Netscape
     cookies.

 -- Attribute: DefaultCookiePolicy.strict_ns_domain

     Flags indicating how strict to be with domain-matching rules for
     Netscape cookies.  See below for acceptable values.

 -- Attribute: DefaultCookiePolicy.strict_ns_set_initial_dollar

     Ignore cookies in Set-Cookie: headers that have names starting with
     ‘'$'’.

 -- Attribute: DefaultCookiePolicy.strict_ns_set_path

     Don’t allow setting cookies whose path doesn’t path-match request
     URI.

‘strict_ns_domain’ is a collection of flags.  Its value is constructed
by or-ing together (for example,
‘DomainStrictNoDots|DomainStrictNonDomain’ means both flags are set).

 -- Attribute: DefaultCookiePolicy.DomainStrictNoDots

     When setting cookies, the ’host prefix’ must not contain a dot (eg.
     ‘www.foo.bar.com’ can’t set a cookie for ‘.bar.com’, because
     ‘www.foo’ contains a dot).

 -- Attribute: DefaultCookiePolicy.DomainStrictNonDomain

     Cookies that did not explicitly specify a ‘domain’ cookie-attribute
     can only be returned to a domain equal to the domain that set the
     cookie (eg.  ‘spam.example.com’ won’t be returned cookies from
     ‘example.com’ that had no ‘domain’ cookie-attribute).

 -- Attribute: DefaultCookiePolicy.DomainRFC2965Match

     When setting cookies, require a full RFC 2965 domain-match.

The following attributes are provided for convenience, and are the most
useful combinations of the above flags:

 -- Attribute: DefaultCookiePolicy.DomainLiberal

     Equivalent to 0 (ie.  all of the above Netscape domain strictness
     flags switched off).

 -- Attribute: DefaultCookiePolicy.DomainStrict

     Equivalent to ‘DomainStrictNoDots|DomainStrictNonDomain’.


File: python.info,  Node: Cookie Objects<2>,  Next: Examples<18>,  Prev: DefaultCookiePolicy Objects,  Up: http cookiejar --- Cookie handling for HTTP clients

5.21.24.5 Cookie Objects
........................

*note Cookie: 2732. instances have Python attributes roughly
corresponding to the standard cookie-attributes specified in the various
cookie standards.  The correspondence is not one-to-one, because there
are complicated rules for assigning default values, because the
‘max-age’ and ‘expires’ cookie-attributes contain equivalent
information, and because RFC 2109 cookies may be ’downgraded’ by *note
http.cookiejar: 94. from version 1 to version 0 (Netscape) cookies.

Assignment to these attributes should not be necessary other than in
rare circumstances in a *note CookiePolicy: 272c. method.  The class
does not enforce internal consistency, so you should know what you’re
doing if you do that.

 -- Attribute: Cookie.version

     Integer or *note None: 19d.  Netscape cookies have *note version:
     2760. 0.  RFC 2965 and RFC 2109 cookies have a ‘version’
     cookie-attribute of 1.  However, note that *note http.cookiejar:
     94. may ’downgrade’ RFC 2109 cookies to Netscape cookies, in which
     case *note version: 2760. is 0.

 -- Attribute: Cookie.name

     Cookie name (a string).

 -- Attribute: Cookie.value

     Cookie value (a string), or *note None: 19d.

 -- Attribute: Cookie.port

     String representing a port or a set of ports (eg.  ’80’, or
     ’80,8080’), or *note None: 19d.

 -- Attribute: Cookie.path

     Cookie path (a string, eg.  ‘'/acme/rocket_launchers'’).

 -- Attribute: Cookie.secure

     ‘True’ if cookie should only be returned over a secure connection.

 -- Attribute: Cookie.expires

     Integer expiry date in seconds since epoch, or *note None: 19d.
     See also the *note is_expired(): 2767. method.

 -- Attribute: Cookie.discard

     ‘True’ if this is a session cookie.

 -- Attribute: Cookie.comment

     String comment from the server explaining the function of this
     cookie, or *note None: 19d.

 -- Attribute: Cookie.comment_url

     URL linking to a comment from the server explaining the function of
     this cookie, or *note None: 19d.

 -- Attribute: Cookie.rfc2109

     ‘True’ if this cookie was received as an RFC 2109 cookie (ie.  the
     cookie arrived in a ‘Set-Cookie’ header, and the value of the
     Version cookie-attribute in that header was 1).  This attribute is
     provided because *note http.cookiejar: 94. may ’downgrade’ RFC 2109
     cookies to Netscape cookies, in which case *note version: 2760. is
     0.

 -- Attribute: Cookie.port_specified

     ‘True’ if a port or set of ports was explicitly specified by the
     server (in the ‘Set-Cookie’ / ‘Set-Cookie2’ header).

 -- Attribute: Cookie.domain_specified

     ‘True’ if a domain was explicitly specified by the server.

 -- Attribute: Cookie.domain_initial_dot

     ‘True’ if the domain explicitly specified by the server began with
     a dot (‘'.'’).

Cookies may have additional non-standard cookie-attributes.  These may
be accessed using the following methods:

 -- Method: Cookie.has_nonstandard_attr (name)

     Return true if cookie has the named cookie-attribute.

 -- Method: Cookie.get_nonstandard_attr (name, default=None)

     If cookie has the named cookie-attribute, return its value.
     Otherwise, return `default'.

 -- Method: Cookie.set_nonstandard_attr (name, value)

     Set the value of the named cookie-attribute.

The *note Cookie: 2732. class also defines the following method:

 -- Method: Cookie.is_expired (now=None)

     ‘True’ if cookie has passed the time at which the server requested
     it should expire.  If `now' is given (in seconds since the epoch),
     return whether the cookie has expired at the specified time.


File: python.info,  Node: Examples<18>,  Prev: Cookie Objects<2>,  Up: http cookiejar --- Cookie handling for HTTP clients

5.21.24.6 Examples
..................

The first example shows the most common usage of *note http.cookiejar:
94.:

     import http.cookiejar, urllib.request
     cj = http.cookiejar.CookieJar()
     opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(cj))
     r = opener.open("http://example.com/")

This example illustrates how to open a URL using your Netscape, Mozilla,
or Lynx cookies (assumes Unix/Netscape convention for location of the
cookies file):

     import os, http.cookiejar, urllib.request
     cj = http.cookiejar.MozillaCookieJar()
     cj.load(os.path.join(os.path.expanduser("~"), ".netscape", "cookies.txt"))
     opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(cj))
     r = opener.open("http://example.com/")

The next example illustrates the use of *note DefaultCookiePolicy: 2730.
Turn on RFC 2965 cookies, be more strict about domains when setting and
returning Netscape cookies, and block some domains from setting cookies
or having them returned:

     import urllib.request
     from http.cookiejar import CookieJar, DefaultCookiePolicy
     policy = DefaultCookiePolicy(
         rfc2965=True, strict_ns_domain=Policy.DomainStrict,
         blocked_domains=["ads.net", ".ads.net"])
     cj = CookieJar(policy)
     opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(cj))
     r = opener.open("http://example.com/")


File: python.info,  Node: xmlrpc --- XMLRPC server and client modules,  Next: xmlrpc client --- XML-RPC client access,  Prev: http cookiejar --- Cookie handling for HTTP clients,  Up: Internet Protocols and Support

5.21.25 ‘xmlrpc’ — XMLRPC server and client modules
---------------------------------------------------

XML-RPC is a Remote Procedure Call method that uses XML passed via HTTP
as a transport.  With it, a client can call methods with parameters on a
remote server (the server is named by a URI) and get back structured
data.

‘xmlrpc’ is a package that collects server and client modules
implementing XML-RPC. The modules are:

   * *note xmlrpc.client: 13c.

   * *note xmlrpc.server: 13d.


File: python.info,  Node: xmlrpc client --- XML-RPC client access,  Next: xmlrpc server --- Basic XML-RPC servers,  Prev: xmlrpc --- XMLRPC server and client modules,  Up: Internet Protocols and Support

5.21.26 ‘xmlrpc.client’ — XML-RPC client access
-----------------------------------------------

`Source code:' Lib/xmlrpc/client.py(1)

__________________________________________________________________

XML-RPC is a Remote Procedure Call method that uses XML passed via HTTP
as a transport.  With it, a client can call methods with parameters on a
remote server (the server is named by a URI) and get back structured
data.  This module supports writing XML-RPC client code; it handles all
the details of translating between conformable Python objects and XML on
the wire.

     Warning: The *note xmlrpc.client: 13c. module is not secure against
     maliciously constructed data.  If you need to parse untrusted or
     unauthenticated data see *note XML vulnerabilities: 22a9.

Changed in version 3.5: For https URIs, *note xmlrpc.client: 13c. now
performs all the necessary certificate and hostname checks by default

 -- Class: xmlrpc.client.ServerProxy (uri, transport=None,
          encoding=None, verbose=False, allow_none=False,
          use_datetime=False, use_builtin_types=False, *, context=None)

     Changed in version 3.3: The `use_builtin_types' flag was added.

     A *note ServerProxy: 364. instance is an object that manages
     communication with a remote XML-RPC server.  The required first
     argument is a URI (Uniform Resource Indicator), and will normally
     be the URL of the server.  The optional second argument is a
     transport factory instance; by default it is an internal
     ‘SafeTransport’ instance for https: URLs and an internal HTTP
     ‘Transport’ instance otherwise.  The optional third argument is an
     encoding, by default UTF-8.  The optional fourth argument is a
     debugging flag.  If `allow_none' is true, the Python constant
     ‘None’ will be translated into XML; the default behaviour is for
     ‘None’ to raise a *note TypeError: 562.  This is a commonly-used
     extension to the XML-RPC specification, but isn’t supported by all
     clients and servers; see
     ‘http://ontosys.com/xml-rpc/extensions.php’ for a description.  The
     `use_builtin_types' flag can be used to cause date/time values to
     be presented as *note datetime.datetime: 60c. objects and binary
     data to be presented as *note bytes: 1db. objects; this flag is
     false by default.  *note datetime.datetime: 60c. and *note bytes:
     1db. objects may be passed to calls.

     The obsolete `use_datetime' flag is similar to `use_builtin_types'
     but it applies only to date/time values.

     Both the HTTP and HTTPS transports support the URL syntax extension
     for HTTP Basic Authentication: ‘http://user:pass@host:port/path’.
     The ‘user:pass’ portion will be base64-encoded as an HTTP
     ’Authorization’ header, and sent to the remote server as part of
     the connection process when invoking an XML-RPC method.  You only
     need to use this if the remote server requires a Basic
     Authentication user and password.  If an HTTPS url is provided,
     `context' may be *note ssl.SSLContext: 1c6. and configures the SSL
     settings of the underlying HTTPS connection.

     The returned instance is a proxy object with methods that can be
     used to invoke corresponding RPC calls on the remote server.  If
     the remote server supports the introspection API, the proxy can
     also be used to query the remote server for the methods it supports
     (service discovery) and fetch other server-associated metadata.

     *note ServerProxy: 364. instance methods take Python basic types
     and objects as arguments and return Python basic types and classes.
     Types that are conformable (e.g.  that can be marshalled through
     XML), include the following (and except where noted, they are
     unmarshalled as the same Python type):

     Name                                  Meaning
                                           
     ----------------------------------------------------------------------------------------
                                           
     ‘boolean’                             The *note True: 9ff. and *note False: 60d.
                                           constants
                                           
                                           
     ‘integers’                            Pass in directly
                                           
                                           
     ‘floating-point numbers’              Pass in directly
                                           
                                           
     ‘strings’                             Pass in directly
                                           
                                           
     ‘arrays’                              Any Python sequence type containing conformable
                                           elements.  Arrays are returned as lists
                                           
                                           
     ‘structures’                          A Python dictionary.  Keys must be strings,
                                           values may be any conformable type.  Objects of
                                           user-defined classes can be passed in; only
                                           their `__dict__' attribute is transmitted.
                                           
                                           
     ‘dates’                               In seconds since the epoch.  Pass in an
                                           instance of the ‘DateTime’ class or a
                                           *note datetime.datetime: 60c. instance.
                                           
                                           
     ‘binary data’                         Pass in an instance of the ‘Binary’ wrapper
                                           class or a *note bytes: 1db. instance.
                                           

     This is the full set of data types supported by XML-RPC. Method
     calls may also raise a special ‘Fault’ instance, used to signal
     XML-RPC server errors, or ‘ProtocolError’ used to signal an error
     in the HTTP/HTTPS transport layer.  Both ‘Fault’ and
     ‘ProtocolError’ derive from a base class called ‘Error’.  Note that
     the xmlrpc client module currently does not marshal instances of
     subclasses of built-in types.

     When passing strings, characters special to XML such as ‘<’, ‘>’,
     and ‘&’ will be automatically escaped.  However, it’s the caller’s
     responsibility to ensure that the string is free of characters that
     aren’t allowed in XML, such as the control characters with ASCII
     values between 0 and 31 (except, of course, tab, newline and
     carriage return); failing to do this will result in an XML-RPC
     request that isn’t well-formed XML. If you have to pass arbitrary
     bytes via XML-RPC, use the *note bytes: 1db. class or the
     class:‘Binary’ wrapper class described below.

     ‘Server’ is retained as an alias for *note ServerProxy: 364. for
     backwards compatibility.  New code should use *note ServerProxy:
     364.

     Changed in version 3.5: Added the `context' argument.

See also
........

XML-RPC HOWTO(2)

     A good description of XML-RPC operation and client software in
     several languages.  Contains pretty much everything an XML-RPC
     client developer needs to know.

XML-RPC Introspection(3)

     Describes the XML-RPC protocol extension for introspection.

XML-RPC Specification(4)

     The official specification.

Unofficial XML-RPC Errata(5)

     Fredrik Lundh’s "unofficial errata, intended to clarify certain
     details in the XML-RPC specification, as well as hint at ’best
     practices’ to use when designing your own XML-RPC implementations."

* Menu:

* ServerProxy Objects:: 
* DateTime Objects:: 
* Binary Objects:: 
* Fault Objects:: 
* ProtocolError Objects:: 
* MultiCall Objects:: 
* Convenience Functions:: 
* Example of Client Usage:: 
* Example of Client and Server Usage:: 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/xmlrpc/client.py

   (2) http://www.tldp.org/HOWTO/XML-RPC-HOWTO/index.html

   (3) http://xmlrpc-c.sourceforge.net/introspection.html

   (4) http://xmlrpc.scripting.com/spec.html

   (5) http://effbot.org/zone/xmlrpc-errata.htm


File: python.info,  Node: ServerProxy Objects,  Next: DateTime Objects,  Up: xmlrpc client --- XML-RPC client access

5.21.26.1 ServerProxy Objects
.............................

A *note ServerProxy: 364. instance has a method corresponding to each
remote procedure call accepted by the XML-RPC server.  Calling the
method performs an RPC, dispatched by both name and argument signature
(e.g.  the same method name can be overloaded with multiple argument
signatures).  The RPC finishes by returning a value, which may be either
returned data in a conformant type or a ‘Fault’ or ‘ProtocolError’
object indicating an error.

Servers that support the XML introspection API support some common
methods grouped under the reserved ‘system’ attribute:

 -- Method: ServerProxy.system.listMethods ()

     This method returns a list of strings, one for each (non-system)
     method supported by the XML-RPC server.

 -- Method: ServerProxy.system.methodSignature (name)

     This method takes one parameter, the name of a method implemented
     by the XML-RPC server.  It returns an array of possible signatures
     for this method.  A signature is an array of types.  The first of
     these types is the return type of the method, the rest are
     parameters.

     Because multiple signatures (ie.  overloading) is permitted, this
     method returns a list of signatures rather than a singleton.

     Signatures themselves are restricted to the top level parameters
     expected by a method.  For instance if a method expects one array
     of structs as a parameter, and it returns a string, its signature
     is simply "string, array".  If it expects three integers and
     returns a string, its signature is "string, int, int, int".

     If no signature is defined for the method, a non-array value is
     returned.  In Python this means that the type of the returned value
     will be something other than list.

 -- Method: ServerProxy.system.methodHelp (name)

     This method takes one parameter, the name of a method implemented
     by the XML-RPC server.  It returns a documentation string
     describing the use of that method.  If no such string is available,
     an empty string is returned.  The documentation string may contain
     HTML markup.

Changed in version 3.5: Instances of *note ServerProxy: 364. support the
*note context manager: 165. protocol for closing the underlying
transport.

A working example follows.  The server code:

     from xmlrpc.server import SimpleXMLRPCServer

     def is_even(n):
         return n%2 == 0

     server = SimpleXMLRPCServer(("localhost", 8000))
     print("Listening on port 8000...")
     server.register_function(is_even, "is_even")
     server.serve_forever()

The client code for the preceding server:

     import xmlrpc.client

     with xmlrpc.client.ServerProxy("http://localhost:8000/") as proxy:
         print("3 is even: %s" % str(proxy.is_even(3)))
         print("100 is even: %s" % str(proxy.is_even(100)))


File: python.info,  Node: DateTime Objects,  Next: Binary Objects,  Prev: ServerProxy Objects,  Up: xmlrpc client --- XML-RPC client access

5.21.26.2 DateTime Objects
..........................

This class may be initialized with seconds since the epoch, a time
tuple, an ISO 8601 time/date string, or a *note datetime.datetime: 60c.
instance.  It has the following methods, supported mainly for internal
use by the marshalling/unmarshalling code:

 -- Method: DateTime.decode (string)

     Accept a string as the instance’s new time value.

 -- Method: DateTime.encode (out)

     Write the XML-RPC encoding of this ‘DateTime’ item to the `out'
     stream object.

It also supports certain of Python’s built-in operators through rich
comparison and *note __repr__(): 7bd. methods.

A working example follows.  The server code:

     import datetime
     from xmlrpc.server import SimpleXMLRPCServer
     import xmlrpc.client

     def today():
         today = datetime.datetime.today()
         return xmlrpc.client.DateTime(today)

     server = SimpleXMLRPCServer(("localhost", 8000))
     print("Listening on port 8000...")
     server.register_function(today, "today")
     server.serve_forever()

The client code for the preceding server:

     import xmlrpc.client
     import datetime

     proxy = xmlrpc.client.ServerProxy("http://localhost:8000/")

     today = proxy.today()
     # convert the ISO8601 string to a datetime object
     converted = datetime.datetime.strptime(today.value, "%Y%m%dT%H:%M:%S")
     print("Today: %s" % converted.strftime("%d.%m.%Y, %H:%M"))


File: python.info,  Node: Binary Objects,  Next: Fault Objects,  Prev: DateTime Objects,  Up: xmlrpc client --- XML-RPC client access

5.21.26.3 Binary Objects
........................

This class may be initialized from bytes data (which may include NULs).
The primary access to the content of a ‘Binary’ object is provided by an
attribute:

 -- Attribute: Binary.data

     The binary data encapsulated by the ‘Binary’ instance.  The data is
     provided as a *note bytes: 1db. object.

‘Binary’ objects have the following methods, supported mainly for
internal use by the marshalling/unmarshalling code:

 -- Method: Binary.decode (bytes)

     Accept a base64 *note bytes: 1db. object and decode it as the
     instance’s new data.

 -- Method: Binary.encode (out)

     Write the XML-RPC base 64 encoding of this binary item to the out
     stream object.

     The encoded data will have newlines every 76 characters as per RFC
     2045 section 6.8(1), which was the de facto standard base64
     specification when the XML-RPC spec was written.

It also supports certain of Python’s built-in operators through *note
__eq__(): 89a. and *note __ne__(): adb. methods.

Example usage of the binary objects.  We’re going to transfer an image
over XMLRPC:

     from xmlrpc.server import SimpleXMLRPCServer
     import xmlrpc.client

     def python_logo():
         with open("python_logo.jpg", "rb") as handle:
             return xmlrpc.client.Binary(handle.read())

     server = SimpleXMLRPCServer(("localhost", 8000))
     print("Listening on port 8000...")
     server.register_function(python_logo, 'python_logo')

     server.serve_forever()

The client gets the image and saves it to a file:

     import xmlrpc.client

     proxy = xmlrpc.client.ServerProxy("http://localhost:8000/")
     with open("fetched_python_logo.jpg", "wb") as handle:
         handle.write(proxy.python_logo().data)

   ---------- Footnotes ----------

   (1) http://tools.ietf.org/html/rfc2045#section-6.8


File: python.info,  Node: Fault Objects,  Next: ProtocolError Objects,  Prev: Binary Objects,  Up: xmlrpc client --- XML-RPC client access

5.21.26.4 Fault Objects
.......................

A ‘Fault’ object encapsulates the content of an XML-RPC fault tag.
Fault objects have the following attributes:

 -- Attribute: Fault.faultCode

     A string indicating the fault type.

 -- Attribute: Fault.faultString

     A string containing a diagnostic message associated with the fault.

In the following example we’re going to intentionally cause a ‘Fault’ by
returning a complex type object.  The server code:

     from xmlrpc.server import SimpleXMLRPCServer

     # A marshalling error is going to occur because we're returning a
     # complex number
     def add(x,y):
         return x+y+0j

     server = SimpleXMLRPCServer(("localhost", 8000))
     print("Listening on port 8000...")
     server.register_function(add, 'add')

     server.serve_forever()

The client code for the preceding server:

     import xmlrpc.client

     proxy = xmlrpc.client.ServerProxy("http://localhost:8000/")
     try:
         proxy.add(2, 5)
     except xmlrpc.client.Fault as err:
         print("A fault occurred")
         print("Fault code: %d" % err.faultCode)
         print("Fault string: %s" % err.faultString)


File: python.info,  Node: ProtocolError Objects,  Next: MultiCall Objects,  Prev: Fault Objects,  Up: xmlrpc client --- XML-RPC client access

5.21.26.5 ProtocolError Objects
...............................

A ‘ProtocolError’ object describes a protocol error in the underlying
transport layer (such as a 404 ’not found’ error if the server named by
the URI does not exist).  It has the following attributes:

 -- Attribute: ProtocolError.url

     The URI or URL that triggered the error.

 -- Attribute: ProtocolError.errcode

     The error code.

 -- Attribute: ProtocolError.errmsg

     The error message or diagnostic string.

 -- Attribute: ProtocolError.headers

     A dict containing the headers of the HTTP/HTTPS request that
     triggered the error.

In the following example we’re going to intentionally cause a
‘ProtocolError’ by providing an invalid URI:

     import xmlrpc.client

     # create a ServerProxy with a URI that doesn't respond to XMLRPC requests
     proxy = xmlrpc.client.ServerProxy("http://google.com/")

     try:
         proxy.some_method()
     except xmlrpc.client.ProtocolError as err:
         print("A protocol error occurred")
         print("URL: %s" % err.url)
         print("HTTP/HTTPS headers: %s" % err.headers)
         print("Error code: %d" % err.errcode)
         print("Error message: %s" % err.errmsg)


File: python.info,  Node: MultiCall Objects,  Next: Convenience Functions,  Prev: ProtocolError Objects,  Up: xmlrpc client --- XML-RPC client access

5.21.26.6 MultiCall Objects
...........................

The *note MultiCall: 2790. object provides a way to encapsulate multiple
calls to a remote server into a single request (1).

 -- Class: xmlrpc.client.MultiCall (server)

     Create an object used to boxcar method calls.  `server' is the
     eventual target of the call.  Calls can be made to the result
     object, but they will immediately return ‘None’, and only store the
     call name and parameters in the *note MultiCall: 2790. object.
     Calling the object itself causes all stored calls to be transmitted
     as a single ‘system.multicall’ request.  The result of this call is
     a *note generator: 5c0.; iterating over this generator yields the
     individual results.

A usage example of this class follows.  The server code:

     from xmlrpc.server import SimpleXMLRPCServer

     def add(x, y):
         return x + y

     def subtract(x, y):
         return x - y

     def multiply(x, y):
         return x * y

     def divide(x, y):
         return x // y

     # A simple server with simple arithmetic functions
     server = SimpleXMLRPCServer(("localhost", 8000))
     print("Listening on port 8000...")
     server.register_multicall_functions()
     server.register_function(add, 'add')
     server.register_function(subtract, 'subtract')
     server.register_function(multiply, 'multiply')
     server.register_function(divide, 'divide')
     server.serve_forever()

The client code for the preceding server:

     import xmlrpc.client

     proxy = xmlrpc.client.ServerProxy("http://localhost:8000/")
     multicall = xmlrpc.client.MultiCall(proxy)
     multicall.add(7, 3)
     multicall.subtract(7, 3)
     multicall.multiply(7, 3)
     multicall.divide(7, 3)
     result = multicall()

     print("7+3=%d, 7-3=%d, 7*3=%d, 7//3=%d" % tuple(result))

   ---------- Footnotes ----------

   (1) This approach has been first presented in a discussion on
xmlrpc.com
(http://web.archive.org/web/20060624230303/http://www.xmlrpc.com/discuss/msgReader$1208?mode=topic).


File: python.info,  Node: Convenience Functions,  Next: Example of Client Usage,  Prev: MultiCall Objects,  Up: xmlrpc client --- XML-RPC client access

5.21.26.7 Convenience Functions
...............................

 -- Function: xmlrpc.client.dumps (params, methodname=None,
          methodresponse=None, encoding=None, allow_none=False)

     Convert `params' into an XML-RPC request.  or into a response if
     `methodresponse' is true.  `params' can be either a tuple of
     arguments or an instance of the ‘Fault’ exception class.  If
     `methodresponse' is true, only a single value can be returned,
     meaning that `params' must be of length 1.  `encoding', if
     supplied, is the encoding to use in the generated XML; the default
     is UTF-8.  Python’s *note None: 19d. value cannot be used in
     standard XML-RPC; to allow using it via an extension, provide a
     true value for `allow_none'.

 -- Function: xmlrpc.client.loads (data, use_datetime=False,
          use_builtin_types=False)

     Convert an XML-RPC request or response into Python objects, a
     ‘(params, methodname)’.  `params' is a tuple of argument;
     `methodname' is a string, or ‘None’ if no method name is present in
     the packet.  If the XML-RPC packet represents a fault condition,
     this function will raise a ‘Fault’ exception.  The
     `use_builtin_types' flag can be used to cause date/time values to
     be presented as *note datetime.datetime: 60c. objects and binary
     data to be presented as *note bytes: 1db. objects; this flag is
     false by default.

     The obsolete `use_datetime' flag is similar to `use_builtin_types'
     but it applies only to date/time values.

     Changed in version 3.3: The `use_builtin_types' flag was added.


File: python.info,  Node: Example of Client Usage,  Next: Example of Client and Server Usage,  Prev: Convenience Functions,  Up: xmlrpc client --- XML-RPC client access

5.21.26.8 Example of Client Usage
.................................

     # simple test program (from the XML-RPC specification)
     from xmlrpc.client import ServerProxy, Error

     # server = ServerProxy("http://localhost:8000") # local server
     with ServerProxy("http://betty.userland.com") as proxy:

         print(proxy)

         try:
             print(proxy.examples.getStateName(41))
         except Error as v:
             print("ERROR", v)

To access an XML-RPC server through a HTTP proxy, you need to define a
custom transport.  The following example shows how:

     import xmlrpc.client, http.client

     class ProxiedTransport(xmlrpc.client.Transport):
         def set_proxy(self, proxy):
             self.proxy = proxy
         def make_connection(self, host):
             self.realhost = host
             h = http.client.HTTPConnection(self.proxy)
             return h
         def send_request(self, connection, handler, request_body, debug):
             connection.putrequest("POST", 'http://%s%s' % (self.realhost, handler))
         def send_host(self, connection, host):
             connection.putheader('Host', self.realhost)

     p = ProxiedTransport()
     p.set_proxy('proxy-server:8080')
     server = xmlrpc.client.ServerProxy('http://time.xmlrpc.com/RPC2', transport=p)
     print(server.currentTime.getCurrentTime())


File: python.info,  Node: Example of Client and Server Usage,  Prev: Example of Client Usage,  Up: xmlrpc client --- XML-RPC client access

5.21.26.9 Example of Client and Server Usage
............................................

See *note SimpleXMLRPCServer Example: 2797.


File: python.info,  Node: xmlrpc server --- Basic XML-RPC servers,  Next: ipaddress --- IPv4/IPv6 manipulation library,  Prev: xmlrpc client --- XML-RPC client access,  Up: Internet Protocols and Support

5.21.27 ‘xmlrpc.server’ — Basic XML-RPC servers
-----------------------------------------------

`Source code:' Lib/xmlrpc/server.py(1)

__________________________________________________________________

The *note xmlrpc.server: 13d. module provides a basic server framework
for XML-RPC servers written in Python.  Servers can either be free
standing, using *note SimpleXMLRPCServer: 279a, or embedded in a CGI
environment, using *note CGIXMLRPCRequestHandler: 279b.

     Warning: The *note xmlrpc.server: 13d. module is not secure against
     maliciously constructed data.  If you need to parse untrusted or
     unauthenticated data see *note XML vulnerabilities: 22a9.

 -- Class: xmlrpc.server.SimpleXMLRPCServer (addr,
          requestHandler=SimpleXMLRPCRequestHandler, logRequests=True,
          allow_none=False, encoding=None, bind_and_activate=True,
          use_builtin_types=False)

     Create a new server instance.  This class provides methods for
     registration of functions that can be called by the XML-RPC
     protocol.  The `requestHandler' parameter should be a factory for
     request handler instances; it defaults to *note
     SimpleXMLRPCRequestHandler: 279c.  The `addr' and `requestHandler'
     parameters are passed to the *note socketserver.TCPServer: 26c3.
     constructor.  If `logRequests' is true (the default), requests will
     be logged; setting this parameter to false will turn off logging.
     The `allow_none' and `encoding' parameters are passed on to *note
     xmlrpc.client: 13c. and control the XML-RPC responses that will be
     returned from the server.  The `bind_and_activate' parameter
     controls whether ‘server_bind()’ and ‘server_activate()’ are called
     immediately by the constructor; it defaults to true.  Setting it to
     false allows code to manipulate the `allow_reuse_address' class
     variable before the address is bound.  The `use_builtin_types'
     parameter is passed to the *note loads(): 2793. function and
     controls which types are processed when date/times values or binary
     data are received; it defaults to false.

     Changed in version 3.3: The `use_builtin_types' flag was added.

 -- Class: xmlrpc.server.CGIXMLRPCRequestHandler (allow_none=False,
          encoding=None, use_builtin_types=False)

     Create a new instance to handle XML-RPC requests in a CGI
     environment.  The `allow_none' and `encoding' parameters are passed
     on to *note xmlrpc.client: 13c. and control the XML-RPC responses
     that will be returned from the server.  The `use_builtin_types'
     parameter is passed to the *note loads(): 2793. function and
     controls which types are processed when date/times values or binary
     data are received; it defaults to false.

     Changed in version 3.3: The `use_builtin_types' flag was added.

 -- Class: xmlrpc.server.SimpleXMLRPCRequestHandler

     Create a new request handler instance.  This request handler
     supports ‘POST’ requests and modifies logging so that the
     `logRequests' parameter to the *note SimpleXMLRPCServer: 279a.
     constructor parameter is honored.

* Menu:

* SimpleXMLRPCServer Objects:: 
* CGIXMLRPCRequestHandler:: 
* Documenting XMLRPC server:: 
* DocXMLRPCServer Objects:: 
* DocCGIXMLRPCRequestHandler:: 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/xmlrpc/server.py


File: python.info,  Node: SimpleXMLRPCServer Objects,  Next: CGIXMLRPCRequestHandler,  Up: xmlrpc server --- Basic XML-RPC servers

5.21.27.1 SimpleXMLRPCServer Objects
....................................

The *note SimpleXMLRPCServer: 279a. class is based on *note
socketserver.TCPServer: 26c3. and provides a means of creating simple,
stand alone XML-RPC servers.

 -- Method: SimpleXMLRPCServer.register_function (function, name=None)

     Register a function that can respond to XML-RPC requests.  If
     `name' is given, it will be the method name associated with
     `function', otherwise ‘function.__name__’ will be used.  `name' can
     be either a normal or Unicode string, and may contain characters
     not legal in Python identifiers, including the period character.

 -- Method: SimpleXMLRPCServer.register_instance (instance,
          allow_dotted_names=False)

     Register an object which is used to expose method names which have
     not been registered using *note register_function(): 279f.  If
     `instance' contains a ‘_dispatch()’ method, it is called with the
     requested method name and the parameters from the request.  Its API
     is ‘def _dispatch(self, method, params)’ (note that `params' does
     not represent a variable argument list).  If it calls an underlying
     function to perform its task, that function is called as
     ‘func(*params)’, expanding the parameter list.  The return value
     from ‘_dispatch()’ is returned to the client as the result.  If
     `instance' does not have a ‘_dispatch()’ method, it is searched for
     an attribute matching the name of the requested method.

     If the optional `allow_dotted_names' argument is true and the
     instance does not have a ‘_dispatch()’ method, then if the
     requested method name contains periods, each component of the
     method name is searched for individually, with the effect that a
     simple hierarchical search is performed.  The value found from this
     search is then called with the parameters from the request, and the
     return value is passed back to the client.

          Warning: Enabling the `allow_dotted_names' option allows
          intruders to access your module’s global variables and may
          allow intruders to execute arbitrary code on your machine.
          Only use this option on a secure, closed network.

 -- Method: SimpleXMLRPCServer.register_introspection_functions ()

     Registers the XML-RPC introspection functions ‘system.listMethods’,
     ‘system.methodHelp’ and ‘system.methodSignature’.

 -- Method: SimpleXMLRPCServer.register_multicall_functions ()

     Registers the XML-RPC multicall function system.multicall.

 -- Attribute: SimpleXMLRPCRequestHandler.rpc_paths

     An attribute value that must be a tuple listing valid path portions
     of the URL for receiving XML-RPC requests.  Requests posted to
     other paths will result in a 404 "no such page" HTTP error.  If
     this tuple is empty, all paths will be considered valid.  The
     default value is ‘('/', '/RPC2')’.

* Menu:

* SimpleXMLRPCServer Example:: 


File: python.info,  Node: SimpleXMLRPCServer Example,  Up: SimpleXMLRPCServer Objects

5.21.27.2 SimpleXMLRPCServer Example
....................................

Server code:

     from xmlrpc.server import SimpleXMLRPCServer
     from xmlrpc.server import SimpleXMLRPCRequestHandler

     # Restrict to a particular path.
     class RequestHandler(SimpleXMLRPCRequestHandler):
         rpc_paths = ('/RPC2',)

     # Create server
     with SimpleXMLRPCServer(("localhost", 8000),
                             requestHandler=RequestHandler) as server:
         server.register_introspection_functions()

         # Register pow() function; this will use the value of
         # pow.__name__ as the name, which is just 'pow'.
         server.register_function(pow)

         # Register a function under a different name
         def adder_function(x,y):
             return x + y
         server.register_function(adder_function, 'add')

         # Register an instance; all the methods of the instance are
         # published as XML-RPC methods (in this case, just 'mul').
         class MyFuncs:
             def mul(self, x, y):
                 return x * y

         server.register_instance(MyFuncs())

         # Run the server's main loop
         server.serve_forever()

The following client code will call the methods made available by the
preceding server:

     import xmlrpc.client

     s = xmlrpc.client.ServerProxy('http://localhost:8000')
     print(s.pow(2,3))  # Returns 2**3 = 8
     print(s.add(2,3))  # Returns 5
     print(s.mul(5,2))  # Returns 5*2 = 10

     # Print list of available methods
     print(s.system.listMethods())

The following example included in the ‘Lib/xmlrpc/server.py’ module
shows a server allowing dotted names and registering a multicall
function.

     Warning: Enabling the `allow_dotted_names' option allows intruders
     to access your module’s global variables and may allow intruders to
     execute arbitrary code on your machine.  Only use this example only
     within a secure, closed network.

     import datetime

     class ExampleService:
         def getData(self):
             return '42'

         class currentTime:
             @staticmethod
             def getCurrentTime():
                 return datetime.datetime.now()

     with SimpleXMLRPCServer(("localhost", 8000)) as server:
         server.register_function(pow)
         server.register_function(lambda x,y: x+y, 'add')
         server.register_instance(ExampleService(), allow_dotted_names=True)
         server.register_multicall_functions()
         print('Serving XML-RPC on localhost port 8000')
         try:
             server.serve_forever()
         except KeyboardInterrupt:
             print("\nKeyboard interrupt received, exiting.")
             sys.exit(0)

This ExampleService demo can be invoked from the command line:

     python -m xmlrpc.server

The client that interacts with the above server is included in
‘Lib/xmlrpc/client.py’:

     server = ServerProxy("http://localhost:8000")

     try:
         print(server.currentTime.getCurrentTime())
     except Error as v:
         print("ERROR", v)

     multi = MultiCall(server)
     multi.getData()
     multi.pow(2,9)
     multi.add(1,2)
     try:
         for response in multi():
             print(response)
     except Error as v:
         print("ERROR", v)

This client which interacts with the demo XMLRPC server can be invoked
as:

     python -m xmlrpc.client


File: python.info,  Node: CGIXMLRPCRequestHandler,  Next: Documenting XMLRPC server,  Prev: SimpleXMLRPCServer Objects,  Up: xmlrpc server --- Basic XML-RPC servers

5.21.27.3 CGIXMLRPCRequestHandler
.................................

The *note CGIXMLRPCRequestHandler: 279b. class can be used to handle
XML-RPC requests sent to Python CGI scripts.

 -- Method: CGIXMLRPCRequestHandler.register_function (function,
          name=None)

     Register a function that can respond to XML-RPC requests.  If
     `name' is given, it will be the method name associated with
     function, otherwise `function.__name__' will be used.  `name' can
     be either a normal or Unicode string, and may contain characters
     not legal in Python identifiers, including the period character.

 -- Method: CGIXMLRPCRequestHandler.register_instance (instance)

     Register an object which is used to expose method names which have
     not been registered using *note register_function(): 27a6.  If
     instance contains a ‘_dispatch()’ method, it is called with the
     requested method name and the parameters from the request; the
     return value is returned to the client as the result.  If instance
     does not have a ‘_dispatch()’ method, it is searched for an
     attribute matching the name of the requested method; if the
     requested method name contains periods, each component of the
     method name is searched for individually, with the effect that a
     simple hierarchical search is performed.  The value found from this
     search is then called with the parameters from the request, and the
     return value is passed back to the client.

 -- Method: CGIXMLRPCRequestHandler.register_introspection_functions ()

     Register the XML-RPC introspection functions ‘system.listMethods’,
     ‘system.methodHelp’ and ‘system.methodSignature’.

 -- Method: CGIXMLRPCRequestHandler.register_multicall_functions ()

     Register the XML-RPC multicall function ‘system.multicall’.

 -- Method: CGIXMLRPCRequestHandler.handle_request (request_text=None)

     Handle a XML-RPC request.  If `request_text' is given, it should be
     the POST data provided by the HTTP server, otherwise the contents
     of stdin will be used.

Example:

     class MyFuncs:
         def mul(self, x, y):
             return x * y


     handler = CGIXMLRPCRequestHandler()
     handler.register_function(pow)
     handler.register_function(lambda x,y: x+y, 'add')
     handler.register_introspection_functions()
     handler.register_instance(MyFuncs())
     handler.handle_request()


File: python.info,  Node: Documenting XMLRPC server,  Next: DocXMLRPCServer Objects,  Prev: CGIXMLRPCRequestHandler,  Up: xmlrpc server --- Basic XML-RPC servers

5.21.27.4 Documenting XMLRPC server
...................................

These classes extend the above classes to serve HTML documentation in
response to HTTP GET requests.  Servers can either be free standing,
using *note DocXMLRPCServer: 27ac, or embedded in a CGI environment,
using *note DocCGIXMLRPCRequestHandler: 27ad.

 -- Class: xmlrpc.server.DocXMLRPCServer (addr,
          requestHandler=DocXMLRPCRequestHandler, logRequests=True,
          allow_none=False, encoding=None, bind_and_activate=True,
          use_builtin_types=True)

     Create a new server instance.  All parameters have the same meaning
     as for *note SimpleXMLRPCServer: 279a.; `requestHandler' defaults
     to *note DocXMLRPCRequestHandler: 27ae.

     Changed in version 3.3: The `use_builtin_types' flag was added.

 -- Class: xmlrpc.server.DocCGIXMLRPCRequestHandler

     Create a new instance to handle XML-RPC requests in a CGI
     environment.

 -- Class: xmlrpc.server.DocXMLRPCRequestHandler

     Create a new request handler instance.  This request handler
     supports XML-RPC POST requests, documentation GET requests, and
     modifies logging so that the `logRequests' parameter to the *note
     DocXMLRPCServer: 27ac. constructor parameter is honored.


File: python.info,  Node: DocXMLRPCServer Objects,  Next: DocCGIXMLRPCRequestHandler,  Prev: Documenting XMLRPC server,  Up: xmlrpc server --- Basic XML-RPC servers

5.21.27.5 DocXMLRPCServer Objects
.................................

The *note DocXMLRPCServer: 27ac. class is derived from *note
SimpleXMLRPCServer: 279a. and provides a means of creating
self-documenting, stand alone XML-RPC servers.  HTTP POST requests are
handled as XML-RPC method calls.  HTTP GET requests are handled by
generating pydoc-style HTML documentation.  This allows a server to
provide its own web-based documentation.

 -- Method: DocXMLRPCServer.set_server_title (server_title)

     Set the title used in the generated HTML documentation.  This title
     will be used inside the HTML "title" element.

 -- Method: DocXMLRPCServer.set_server_name (server_name)

     Set the name used in the generated HTML documentation.  This name
     will appear at the top of the generated documentation inside a "h1"
     element.

 -- Method: DocXMLRPCServer.set_server_documentation
          (server_documentation)

     Set the description used in the generated HTML documentation.  This
     description will appear as a paragraph, below the server name, in
     the documentation.


File: python.info,  Node: DocCGIXMLRPCRequestHandler,  Prev: DocXMLRPCServer Objects,  Up: xmlrpc server --- Basic XML-RPC servers

5.21.27.6 DocCGIXMLRPCRequestHandler
....................................

The *note DocCGIXMLRPCRequestHandler: 27ad. class is derived from *note
CGIXMLRPCRequestHandler: 279b. and provides a means of creating
self-documenting, XML-RPC CGI scripts.  HTTP POST requests are handled
as XML-RPC method calls.  HTTP GET requests are handled by generating
pydoc-style HTML documentation.  This allows a server to provide its own
web-based documentation.

 -- Method: DocCGIXMLRPCRequestHandler.set_server_title (server_title)

     Set the title used in the generated HTML documentation.  This title
     will be used inside the HTML "title" element.

 -- Method: DocCGIXMLRPCRequestHandler.set_server_name (server_name)

     Set the name used in the generated HTML documentation.  This name
     will appear at the top of the generated documentation inside a "h1"
     element.

 -- Method: DocCGIXMLRPCRequestHandler.set_server_documentation
          (server_documentation)

     Set the description used in the generated HTML documentation.  This
     description will appear as a paragraph, below the server name, in
     the documentation.


File: python.info,  Node: ipaddress --- IPv4/IPv6 manipulation library,  Prev: xmlrpc server --- Basic XML-RPC servers,  Up: Internet Protocols and Support

5.21.28 ‘ipaddress’ — IPv4/IPv6 manipulation library
----------------------------------------------------

`Source code:' Lib/ipaddress.py(1)

__________________________________________________________________

*note ipaddress: a0. provides the capabilities to create, manipulate and
operate on IPv4 and IPv6 addresses and networks.

The functions and classes in this module make it straightforward to
handle various tasks related to IP addresses, including checking whether
or not two hosts are on the same subnet, iterating over all hosts in a
particular subnet, checking whether or not a string represents a valid
IP address or network definition, and so on.

This is the full module API reference—for an overview and introduction,
see *note An introduction to the ipaddress module: 27ba.

New in version 3.3.

* Menu:

* Convenience factory functions:: 
* IP Addresses:: 
* IP Network definitions:: 
* Interface objects:: 
* Other Module Level Functions:: 
* Custom Exceptions:: 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/ipaddress.py


File: python.info,  Node: Convenience factory functions,  Next: IP Addresses,  Up: ipaddress --- IPv4/IPv6 manipulation library

5.21.28.1 Convenience factory functions
.......................................

The *note ipaddress: a0. module provides factory functions to
conveniently create IP addresses, networks and interfaces:

 -- Function: ipaddress.ip_address (address)

     Return an *note IPv4Address: 27bd. or *note IPv6Address: 27be.
     object depending on the IP address passed as argument.  Either IPv4
     or IPv6 addresses may be supplied; integers less than 2**32 will be
     considered to be IPv4 by default.  A *note ValueError: 19c. is
     raised if `address' does not represent a valid IPv4 or IPv6
     address.

     >>> ipaddress.ip_address('192.168.0.1')
     IPv4Address('192.168.0.1')
     >>> ipaddress.ip_address('2001:db8::')
     IPv6Address('2001:db8::')

 -- Function: ipaddress.ip_network (address, strict=True)

     Return an *note IPv4Network: 2bc. or *note IPv6Network: 2bd. object
     depending on the IP address passed as argument.  `address' is a
     string or integer representing the IP network.  Either IPv4 or IPv6
     networks may be supplied; integers less than 2**32 will be
     considered to be IPv4 by default.  `strict' is passed to *note
     IPv4Network: 2bc. or *note IPv6Network: 2bd. constructor.  A *note
     ValueError: 19c. is raised if `address' does not represent a valid
     IPv4 or IPv6 address, or if the network has host bits set.

          >>> ipaddress.ip_network('192.168.0.0/28')
          IPv4Network('192.168.0.0/28')

 -- Function: ipaddress.ip_interface (address)

     Return an *note IPv4Interface: 27c1. or *note IPv6Interface: 27c2.
     object depending on the IP address passed as argument.  `address'
     is a string or integer representing the IP address.  Either IPv4 or
     IPv6 addresses may be supplied; integers less than 2**32 will be
     considered to be IPv4 by default.  A *note ValueError: 19c. is
     raised if `address' does not represent a valid IPv4 or IPv6
     address.

One downside of these convenience functions is that the need to handle
both IPv4 and IPv6 formats means that error messages provide minimal
information on the precise error, as the functions don’t know whether
the IPv4 or IPv6 format was intended.  More detailed error reporting can
be obtained by calling the appropriate version specific class
constructors directly.


File: python.info,  Node: IP Addresses,  Next: IP Network definitions,  Prev: Convenience factory functions,  Up: ipaddress --- IPv4/IPv6 manipulation library

5.21.28.2 IP Addresses
......................

* Menu:

* Address objects:: 
* Conversion to Strings and Integers:: 
* Operators: Operators<3>. 


File: python.info,  Node: Address objects,  Next: Conversion to Strings and Integers,  Up: IP Addresses

5.21.28.3 Address objects
.........................

The *note IPv4Address: 27bd. and *note IPv6Address: 27be. objects share
a lot of common attributes.  Some attributes that are only meaningful
for IPv6 addresses are also implemented by *note IPv4Address: 27bd.
objects, in order to make it easier to write code that handles both IP
versions correctly.

 -- Class: ipaddress.IPv4Address (address)

     Construct an IPv4 address.  An *note AddressValueError: 27c5. is
     raised if `address' is not a valid IPv4 address.

     The following constitutes a valid IPv4 address:

       1. A string in decimal-dot notation, consisting of four decimal
          integers in the inclusive range 0-255, separated by dots (e.g.
          ‘192.168.0.1’).  Each integer represents an octet (byte) in
          the address.  Leading zeroes are tolerated only for values
          less than 8 (as there is no ambiguity between the decimal and
          octal interpretations of such strings).

       2. An integer that fits into 32 bits.

       3. An integer packed into a *note bytes: 1db. object of length 4
          (most significant octet first).

          >>> ipaddress.IPv4Address('192.168.0.1')
          IPv4Address('192.168.0.1')
          >>> ipaddress.IPv4Address(3232235521)
          IPv4Address('192.168.0.1')
          >>> ipaddress.IPv4Address(b'\xC0\xA8\x00\x01')
          IPv4Address('192.168.0.1')

      -- Attribute: version

          The appropriate version number: ‘4’ for IPv4, ‘6’ for IPv6.

      -- Attribute: max_prefixlen

          The total number of bits in the address representation for
          this version: ‘32’ for IPv4, ‘128’ for IPv6.

          The prefix defines the number of leading bits in an address
          that are compared to determine whether or not an address is
          part of a network.

      -- Attribute: compressed

      -- Attribute: exploded

          The string representation in dotted decimal notation.  Leading
          zeroes are never included in the representation.

          As IPv4 does not define a shorthand notation for addresses
          with octets set to zero, these two attributes are always the
          same as ‘str(addr)’ for IPv4 addresses.  Exposing these
          attributes makes it easier to write display code that can
          handle both IPv4 and IPv6 addresses.

      -- Attribute: packed

          The binary representation of this address - a *note bytes:
          1db. object of the appropriate length (most significant octet
          first).  This is 4 bytes for IPv4 and 16 bytes for IPv6.

      -- Attribute: reverse_pointer

          The name of the reverse DNS PTR record for the IP address,
          e.g.:

               >>> ipaddress.ip_address("127.0.0.1").reverse_pointer
               '1.0.0.127.in-addr.arpa'
               >>> ipaddress.ip_address("2001:db8::1").reverse_pointer
               '1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8.b.d.0.1.0.0.2.ip6.arpa'

          This is the name that could be used for performing a PTR
          lookup, not the resolved hostname itself.

     New in version 3.5.

      -- Attribute: is_multicast

          ‘True’ if the address is reserved for multicast use.  See RFC
          3171(1) (for IPv4) or RFC 2373(2) (for IPv6).

      -- Attribute: is_private

          ‘True’ if the address is allocated for private networks.  See
          iana-ipv4-special-registry(3) (for IPv4) or
          iana-ipv6-special-registry(4) (for IPv6).

      -- Attribute: is_global

          ‘True’ if the address is allocated for public networks.  See
          iana-ipv4-special-registry(5) (for IPv4) or
          iana-ipv6-special-registry(6) (for IPv6).

          New in version 3.4.

      -- Attribute: is_unspecified

          ‘True’ if the address is unspecified.  See RFC 5735(7) (for
          IPv4) or RFC 2373(8) (for IPv6).

      -- Attribute: is_reserved

          ‘True’ if the address is otherwise IETF reserved.

      -- Attribute: is_loopback

          ‘True’ if this is a loopback address.  See RFC 3330(9) (for
          IPv4) or RFC 2373(10) (for IPv6).

      -- Attribute: is_link_local

          ‘True’ if the address is reserved for link-local usage.  See
          RFC 3927(11).

 -- Class: ipaddress.IPv6Address (address)

     Construct an IPv6 address.  An *note AddressValueError: 27c5. is
     raised if `address' is not a valid IPv6 address.

     The following constitutes a valid IPv6 address:

       1. A string consisting of eight groups of four hexadecimal
          digits, each group representing 16 bits.  The groups are
          separated by colons.  This describes an `exploded' (longhand)
          notation.  The string can also be `compressed' (shorthand
          notation) by various means.  See RFC 4291(12) for details.
          For example, ‘"0000:0000:0000:0000:0000:0abc:0007:0def"’ can
          be compressed to ‘"::abc:7:def"’.

       2. An integer that fits into 128 bits.

       3. An integer packed into a *note bytes: 1db. object of length
          16, big-endian.

          >>> ipaddress.IPv6Address('2001:db8::1000')
          IPv6Address('2001:db8::1000')

      -- Attribute: compressed

     The short form of the address representation, with leading zeroes
     in groups omitted and the longest sequence of groups consisting
     entirely of zeroes collapsed to a single empty group.

     This is also the value returned by ‘str(addr)’ for IPv6 addresses.

      -- Attribute: exploded

     The long form of the address representation, with all leading
     zeroes and groups consisting entirely of zeroes included.

     For the following attributes, see the corresponding documention of
     the *note IPv4Address: 27bd. class:

      -- Attribute: packed

      -- Attribute: reverse_pointer

      -- Attribute: version

      -- Attribute: max_prefixlen

      -- Attribute: is_multicast

      -- Attribute: is_private

      -- Attribute: is_global

      -- Attribute: is_unspecified

      -- Attribute: is_reserved

      -- Attribute: is_loopback

      -- Attribute: is_link_local

          New in version 3.4: is_global

      -- Attribute: is_site_local

          ‘True’ if the address is reserved for site-local usage.  Note
          that the site-local address space has been deprecated by RFC
          3879(13).  Use *note is_private: 27cd. to test if this address
          is in the space of unique local addresses as defined by RFC
          4193(14).

      -- Attribute: ipv4_mapped

          For addresses that appear to be IPv4 mapped addresses
          (starting with ‘::FFFF/96’), this property will report the
          embedded IPv4 address.  For any other address, this property
          will be ‘None’.

      -- Attribute: sixtofour

          For addresses that appear to be 6to4 addresses (starting with
          ‘2002::/16’) as defined by RFC 3056(15), this property will
          report the embedded IPv4 address.  For any other address, this
          property will be ‘None’.

      -- Attribute: teredo

          For addresses that appear to be Teredo addresses (starting
          with ‘2001::/32’) as defined by RFC 4380(16), this property
          will report the embedded ‘(server, client)’ IP address pair.
          For any other address, this property will be ‘None’.

   ---------- Footnotes ----------

   (1) https://tools.ietf.org/html/rfc3171.html

   (2) https://tools.ietf.org/html/rfc2373.html

   (3) 
http://www.iana.org/assignments/iana-ipv4-special-registry/iana-ipv4-special-registry.xhtml

   (4) 
http://www.iana.org/assignments/iana-ipv6-special-registry/iana-ipv6-special-registry.xhtml

   (5) 
http://www.iana.org/assignments/iana-ipv4-special-registry/iana-ipv4-special-registry.xhtml

   (6) 
http://www.iana.org/assignments/iana-ipv6-special-registry/iana-ipv6-special-registry.xhtml

   (7) https://tools.ietf.org/html/rfc5735.html

   (8) https://tools.ietf.org/html/rfc2373.html

   (9) https://tools.ietf.org/html/rfc3330.html

   (10) https://tools.ietf.org/html/rfc2373.html

   (11) https://tools.ietf.org/html/rfc3927.html

   (12) https://tools.ietf.org/html/rfc4291.html

   (13) https://tools.ietf.org/html/rfc3879.html

   (14) https://tools.ietf.org/html/rfc4193.html

   (15) https://tools.ietf.org/html/rfc3056.html

   (16) https://tools.ietf.org/html/rfc4380.html


File: python.info,  Node: Conversion to Strings and Integers,  Next: Operators<3>,  Prev: Address objects,  Up: IP Addresses

5.21.28.4 Conversion to Strings and Integers
............................................

To interoperate with networking interfaces such as the socket module,
addresses must be converted to strings or integers.  This is handled
using the *note str(): 25a. and *note int(): 227. builtin functions:

     >>> str(ipaddress.IPv4Address('192.168.0.1'))
     '192.168.0.1'
     >>> int(ipaddress.IPv4Address('192.168.0.1'))
     3232235521
     >>> str(ipaddress.IPv6Address('::1'))
     '::1'
     >>> int(ipaddress.IPv6Address('::1'))
     1


File: python.info,  Node: Operators<3>,  Prev: Conversion to Strings and Integers,  Up: IP Addresses

5.21.28.5 Operators
...................

Address objects support some operators.  Unless stated otherwise,
operators can only be applied between compatible objects (i.e.  IPv4
with IPv4, IPv6 with IPv6).

* Menu:

* Comparison operators:: 
* Arithmetic operators:: 


File: python.info,  Node: Comparison operators,  Next: Arithmetic operators,  Up: Operators<3>

5.21.28.6 Comparison operators
..............................

Address objects can be compared with the usual set of comparison
operators.  Some examples:

     >>> IPv4Address('127.0.0.2') > IPv4Address('127.0.0.1')
     True
     >>> IPv4Address('127.0.0.2') == IPv4Address('127.0.0.1')
     False
     >>> IPv4Address('127.0.0.2') != IPv4Address('127.0.0.1')
     True


File: python.info,  Node: Arithmetic operators,  Prev: Comparison operators,  Up: Operators<3>

5.21.28.7 Arithmetic operators
..............................

Integers can be added to or subtracted from address objects.  Some
examples:

     >>> IPv4Address('127.0.0.2') + 3
     IPv4Address('127.0.0.5')
     >>> IPv4Address('127.0.0.2') - 3
     IPv4Address('126.255.255.255')
     >>> IPv4Address('255.255.255.255') + 1
     Traceback (most recent call last):
       File "<stdin>", line 1, in <module>
     ipaddress.AddressValueError: 4294967296 (>= 2**32) is not permitted as an IPv4 address


File: python.info,  Node: IP Network definitions,  Next: Interface objects,  Prev: IP Addresses,  Up: ipaddress --- IPv4/IPv6 manipulation library

5.21.28.8 IP Network definitions
................................

The *note IPv4Network: 2bc. and *note IPv6Network: 2bd. objects provide
a mechanism for defining and inspecting IP network definitions.  A
network definition consists of a `mask' and a `network address', and as
such defines a range of IP addresses that equal the network address when
masked (binary AND) with the mask.  For example, a network definition
with the mask ‘255.255.255.0’ and the network address ‘192.168.1.0’
consists of IP addresses in the inclusive range ‘192.168.1.0’ to
‘192.168.1.255’.

* Menu:

* Prefix, net mask and host mask: Prefix net mask and host mask. 
* Network objects:: 
* Operators: Operators<4>. 


File: python.info,  Node: Prefix net mask and host mask,  Next: Network objects,  Up: IP Network definitions

5.21.28.9 Prefix, net mask and host mask
........................................

There are several equivalent ways to specify IP network masks.  A
`prefix' ‘/<nbits>’ is a notation that denotes how many high-order bits
are set in the network mask.  A `net mask' is an IP address with some
number of high-order bits set.  Thus the prefix ‘/24’ is equivalent to
the net mask ‘255.255.255.0’ in IPv4, or ‘ffff:ff00::’ in IPv6.  In
addition, a `host mask' is the logical inverse of a `net mask', and is
sometimes used (for example in Cisco access control lists) to denote a
network mask.  The host mask equivalent to ‘/24’ in IPv4 is ‘0.0.0.255’.


File: python.info,  Node: Network objects,  Next: Operators<4>,  Prev: Prefix net mask and host mask,  Up: IP Network definitions

5.21.28.10 Network objects
..........................

All attributes implemented by address objects are implemented by network
objects as well.  In addition, network objects implement additional
attributes.  All of these are common between *note IPv4Network: 2bc. and
*note IPv6Network: 2bd, so to avoid duplication they are only documented
for *note IPv4Network: 2bc.

 -- Class: ipaddress.IPv4Network (address, strict=True)

     Construct an IPv4 network definition.  `address' can be one of the
     following:

       1. A string consisting of an IP address and an optional mask,
          separated by a slash (‘/’).  The IP address is the network
          address, and the mask can be either a single number, which
          means it’s a `prefix', or a string representation of an IPv4
          address.  If it’s the latter, the mask is interpreted as a
          `net mask' if it starts with a non-zero field, or as a `host
          mask' if it starts with a zero field.  If no mask is provided,
          it’s considered to be ‘/32’.

          For example, the following `address' specifications are
          equivalent: ‘192.168.1.0/24’, ‘192.168.1.0/255.255.255.0’ and
          ‘192.168.1.0/0.0.0.255’.

       2. An integer that fits into 32 bits.  This is equivalent to a
          single-address network, with the network address being
          `address' and the mask being ‘/32’.

       3. An integer packed into a *note bytes: 1db. object of length 4,
          big-endian.  The interpretation is similar to an integer
          `address'.

       4. A two-tuple of an address description and a netmask, where the
          address description is either a string, a 32-bits integer, a
          4-bytes packed integer, or an existing IPv4Address object; and
          the netmask is either an integer representing the prefix
          length (e.g.  ‘24’) or a string representing the prefix mask
          (e.g.  ‘255.255.255.0’).

     An *note AddressValueError: 27c5. is raised if `address' is not a
     valid IPv4 address.  A *note NetmaskValueError: 27ea. is raised if
     the mask is not valid for an IPv4 address.

     If `strict' is ‘True’ and host bits are set in the supplied
     address, then *note ValueError: 19c. is raised.  Otherwise, the
     host bits are masked out to determine the appropriate network
     address.

     Unless stated otherwise, all network methods accepting other
     network/address objects will raise *note TypeError: 562. if the
     argument’s IP version is incompatible to ‘self’

     Changed in version 3.5: Added the two-tuple form for the `address'
     constructor parameter.

      -- Attribute: version

      -- Attribute: max_prefixlen

          Refer to the corresponding attribute documentation in *note
          IPv4Address: 27bd.

      -- Attribute: is_multicast

      -- Attribute: is_private

      -- Attribute: is_unspecified

      -- Attribute: is_reserved

      -- Attribute: is_loopback

      -- Attribute: is_link_local

          These attributes are true for the network as a whole if they
          are true for both the network address and the broadcast
          address

      -- Attribute: network_address

          The network address for the network.  The network address and
          the prefix length together uniquely define a network.

      -- Attribute: broadcast_address

          The broadcast address for the network.  Packets sent to the
          broadcast address should be received by every host on the
          network.

      -- Attribute: hostmask

          The host mask, as a string.

      -- Attribute: with_prefixlen

      -- Attribute: compressed

      -- Attribute: exploded

          A string representation of the network, with the mask in
          prefix notation.

          ‘with_prefixlen’ and ‘compressed’ are always the same as
          ‘str(network)’.  ‘exploded’ uses the exploded form the network
          address.

      -- Attribute: with_netmask

          A string representation of the network, with the mask in net
          mask notation.

      -- Attribute: with_hostmask

          A string representation of the network, with the mask in host
          mask notation.

      -- Attribute: num_addresses

          The total number of addresses in the network.

      -- Attribute: prefixlen

          Length of the network prefix, in bits.

      -- Method: hosts ()

          Returns an iterator over the usable hosts in the network.  The
          usable hosts are all the IP addresses that belong to the
          network, except the network address itself and the network
          broadcast address.

               >>> list(ip_network('192.0.2.0/29').hosts())  #doctest: +NORMALIZE_WHITESPACE
               [IPv4Address('192.0.2.1'), IPv4Address('192.0.2.2'),
                IPv4Address('192.0.2.3'), IPv4Address('192.0.2.4'),
                IPv4Address('192.0.2.5'), IPv4Address('192.0.2.6')]

      -- Method: overlaps (other)

          ‘True’ if this network is partly or wholly contained in
          `other' or `other' is wholly contained in this network.

      -- Method: address_exclude (network)

          Computes the network definitions resulting from removing the
          given `network' from this one.  Returns an iterator of network
          objects.  Raises *note ValueError: 19c. if `network' is not
          completely contained in this network.

               >>> n1 = ip_network('192.0.2.0/28')
               >>> n2 = ip_network('192.0.2.1/32')
               >>> list(n1.address_exclude(n2))  #doctest: +NORMALIZE_WHITESPACE
               [IPv4Network('192.0.2.8/29'), IPv4Network('192.0.2.4/30'),
                IPv4Network('192.0.2.2/31'), IPv4Network('192.0.2.0/32')]

      -- Method: subnets (prefixlen_diff=1, new_prefix=None)

          The subnets that join to make the current network definition,
          depending on the argument values.  `prefixlen_diff' is the
          amount our prefix length should be increased by.  `new_prefix'
          is the desired new prefix of the subnets; it must be larger
          than our prefix.  One and only one of `prefixlen_diff' and
          `new_prefix' must be set.  Returns an iterator of network
          objects.

               >>> list(ip_network('192.0.2.0/24').subnets())
               [IPv4Network('192.0.2.0/25'), IPv4Network('192.0.2.128/25')]
               >>> list(ip_network('192.0.2.0/24').subnets(prefixlen_diff=2))  #doctest: +NORMALIZE_WHITESPACE
               [IPv4Network('192.0.2.0/26'), IPv4Network('192.0.2.64/26'),
                IPv4Network('192.0.2.128/26'), IPv4Network('192.0.2.192/26')]
               >>> list(ip_network('192.0.2.0/24').subnets(new_prefix=26))  #doctest: +NORMALIZE_WHITESPACE
               [IPv4Network('192.0.2.0/26'), IPv4Network('192.0.2.64/26'),
                IPv4Network('192.0.2.128/26'), IPv4Network('192.0.2.192/26')]
               >>> list(ip_network('192.0.2.0/24').subnets(new_prefix=23))
               Traceback (most recent call last):
                 File "<stdin>", line 1, in <module>
                   raise ValueError('new prefix must be longer')
               ValueError: new prefix must be longer
               >>> list(ip_network('192.0.2.0/24').subnets(new_prefix=25))
               [IPv4Network('192.0.2.0/25'), IPv4Network('192.0.2.128/25')]

      -- Method: supernet (prefixlen_diff=1, new_prefix=None)

          The supernet containing this network definition, depending on
          the argument values.  `prefixlen_diff' is the amount our
          prefix length should be decreased by.  `new_prefix' is the
          desired new prefix of the supernet; it must be smaller than
          our prefix.  One and only one of `prefixlen_diff' and
          `new_prefix' must be set.  Returns a single network object.

               >>> ip_network('192.0.2.0/24').supernet()
               IPv4Network('192.0.2.0/23')
               >>> ip_network('192.0.2.0/24').supernet(prefixlen_diff=2)
               IPv4Network('192.0.0.0/22')
               >>> ip_network('192.0.2.0/24').supernet(new_prefix=20)
               IPv4Network('192.0.0.0/20')

      -- Method: compare_networks (other)

          Compare this network to `other'.  In this comparison only the
          network addresses are considered; host bits aren’t.  Returns
          either ‘-1’, ‘0’ or ‘1’.

               >>> ip_network('192.0.2.1/32').compare_networks(ip_network('192.0.2.2/32'))
               -1
               >>> ip_network('192.0.2.1/32').compare_networks(ip_network('192.0.2.0/32'))
               1
               >>> ip_network('192.0.2.1/32').compare_networks(ip_network('192.0.2.1/32'))
               0

 -- Class: ipaddress.IPv6Network (address, strict=True)

     Construct an IPv6 network definition.  `address' can be one of the
     following:

       1. A string consisting of an IP address and an optional mask,
          separated by a slash (‘/’).  The IP address is the network
          address, and the mask can be either a single number, which
          means it’s a `prefix', or a string representation of an IPv6
          address.  If it’s the latter, the mask is interpreted as a
          `net mask'.  If no mask is provided, it’s considered to be
          ‘/128’.

          For example, the following `address' specifications are
          equivalent: ‘2001:db00::0/24’ and ‘2001:db00::0/ffff:ff00::’.

       2. An integer that fits into 128 bits.  This is equivalent to a
          single-address network, with the network address being
          `address' and the mask being ‘/128’.

       3. An integer packed into a *note bytes: 1db. object of length
          16, big-endian.  The interpretation is similar to an integer
          `address'.

       4. A two-tuple of an address description and a netmask, where the
          address description is either a string, a 128-bits integer, a
          16-bytes packed integer, or an existing IPv4Address object;
          and the netmask is an integer representing the prefix length.

     An *note AddressValueError: 27c5. is raised if `address' is not a
     valid IPv6 address.  A *note NetmaskValueError: 27ea. is raised if
     the mask is not valid for an IPv6 address.

     If `strict' is ‘True’ and host bits are set in the supplied
     address, then *note ValueError: 19c. is raised.  Otherwise, the
     host bits are masked out to determine the appropriate network
     address.

     Changed in version 3.5: Added the two-tuple form for the `address'
     constructor parameter.

      -- Attribute: version

      -- Attribute: max_prefixlen

      -- Attribute: is_multicast

      -- Attribute: is_private

      -- Attribute: is_unspecified

      -- Attribute: is_reserved

      -- Attribute: is_loopback

      -- Attribute: is_link_local

      -- Attribute: network_address

      -- Attribute: broadcast_address

      -- Attribute: hostmask

      -- Attribute: with_prefixlen

      -- Attribute: compressed

      -- Attribute: exploded

      -- Attribute: with_netmask

      -- Attribute: with_hostmask

      -- Attribute: num_addresses

      -- Attribute: prefixlen

      -- Method: hosts ()

      -- Method: overlaps (other)

      -- Method: address_exclude (network)

      -- Method: subnets (prefixlen_diff=1, new_prefix=None)

      -- Method: supernet (prefixlen_diff=1, new_prefix=None)

      -- Method: compare_networks (other)

          Refer to the corresponding attribute documentation in *note
          IPv4Network: 2bc.

      -- Attribute: is_site_local

          These attribute is true for the network as a whole if it is
          true for both the network address and the broadcast address


File: python.info,  Node: Operators<4>,  Prev: Network objects,  Up: IP Network definitions

5.21.28.11 Operators
....................

Network objects support some operators.  Unless stated otherwise,
operators can only be applied between compatible objects (i.e.  IPv4
with IPv4, IPv6 with IPv6).

* Menu:

* Logical operators:: 
* Iteration: Iteration<2>. 
* Networks as containers of addresses:: 


File: python.info,  Node: Logical operators,  Next: Iteration<2>,  Up: Operators<4>

5.21.28.12 Logical operators
............................

Network objects can be compared with the usual set of logical operators,
similarly to address objects.


File: python.info,  Node: Iteration<2>,  Next: Networks as containers of addresses,  Prev: Logical operators,  Up: Operators<4>

5.21.28.13 Iteration
....................

Network objects can be iterated to list all the addresses belonging to
the network.  For iteration, `all' hosts are returned, including
unusable hosts (for usable hosts, use the *note hosts(): 27fd. method).
An example:

     >>> for addr in IPv4Network('192.0.2.0/28'):
     ...   addr
     ...
     IPv4Address('192.0.2.0')
     IPv4Address('192.0.2.1')
     IPv4Address('192.0.2.2')
     IPv4Address('192.0.2.3')
     IPv4Address('192.0.2.4')
     IPv4Address('192.0.2.5')
     IPv4Address('192.0.2.6')
     IPv4Address('192.0.2.7')
     IPv4Address('192.0.2.8')
     IPv4Address('192.0.2.9')
     IPv4Address('192.0.2.10')
     IPv4Address('192.0.2.11')
     IPv4Address('192.0.2.12')
     IPv4Address('192.0.2.13')
     IPv4Address('192.0.2.14')
     IPv4Address('192.0.2.15')


File: python.info,  Node: Networks as containers of addresses,  Prev: Iteration<2>,  Up: Operators<4>

5.21.28.14 Networks as containers of addresses
..............................................

Network objects can act as containers of addresses.  Some examples:

     >>> IPv4Network('192.0.2.0/28')[0]
     IPv4Address('192.0.2.0')
     >>> IPv4Network('192.0.2.0/28')[15]
     IPv4Address('192.0.2.15')
     >>> IPv4Address('192.0.2.6') in IPv4Network('192.0.2.0/28')
     True
     >>> IPv4Address('192.0.3.6') in IPv4Network('192.0.2.0/28')
     False


File: python.info,  Node: Interface objects,  Next: Other Module Level Functions,  Prev: IP Network definitions,  Up: ipaddress --- IPv4/IPv6 manipulation library

5.21.28.15 Interface objects
............................

 -- Class: ipaddress.IPv4Interface (address)

     Construct an IPv4 interface.  The meaning of `address' is as in the
     constructor of *note IPv4Network: 2bc, except that arbitrary host
     addresses are always accepted.

     *note IPv4Interface: 27c1. is a subclass of *note IPv4Address:
     27bd, so it inherits all the attributes from that class.  In
     addition, the following attributes are available:

      -- Attribute: ip

          The address (*note IPv4Address: 27bd.) without network
          information.

               >>> interface = IPv4Interface('192.0.2.5/24')
               >>> interface.ip
               IPv4Address('192.0.2.5')

      -- Attribute: network

          The network (*note IPv4Network: 2bc.) this interface belongs
          to.

               >>> interface = IPv4Interface('192.0.2.5/24')
               >>> interface.network
               IPv4Network('192.0.2.0/24')

      -- Attribute: with_prefixlen

          A string representation of the interface with the mask in
          prefix notation.

               >>> interface = IPv4Interface('192.0.2.5/24')
               >>> interface.with_prefixlen
               '192.0.2.5/24'

      -- Attribute: with_netmask

          A string representation of the interface with the network as a
          net mask.

               >>> interface = IPv4Interface('192.0.2.5/24')
               >>> interface.with_netmask
               '192.0.2.5/255.255.255.0'

      -- Attribute: with_hostmask

          A string representation of the interface with the network as a
          host mask.

               >>> interface = IPv4Interface('192.0.2.5/24')
               >>> interface.with_hostmask
               '192.0.2.5/0.0.0.255'

 -- Class: ipaddress.IPv6Interface (address)

     Construct an IPv6 interface.  The meaning of `address' is as in the
     constructor of *note IPv6Network: 2bd, except that arbitrary host
     addresses are always accepted.

     *note IPv6Interface: 27c2. is a subclass of *note IPv6Address:
     27be, so it inherits all the attributes from that class.  In
     addition, the following attributes are available:

      -- Attribute: ip

      -- Attribute: network

      -- Attribute: with_prefixlen

      -- Attribute: with_netmask

      -- Attribute: with_hostmask

          Refer to the corresponding attribute documentation in *note
          IPv4Interface: 27c1.


File: python.info,  Node: Other Module Level Functions,  Next: Custom Exceptions,  Prev: Interface objects,  Up: ipaddress --- IPv4/IPv6 manipulation library

5.21.28.16 Other Module Level Functions
.......................................

The module also provides the following module level functions:

 -- Function: ipaddress.v4_int_to_packed (address)

     Represent an address as 4 packed bytes in network (big-endian)
     order.  `address' is an integer representation of an IPv4 IP
     address.  A *note ValueError: 19c. is raised if the integer is
     negative or too large to be an IPv4 IP address.

          >>> ipaddress.ip_address(3221225985)
          IPv4Address('192.0.2.1')
          >>> ipaddress.v4_int_to_packed(3221225985)
          b'\xc0\x00\x02\x01'

 -- Function: ipaddress.v6_int_to_packed (address)

     Represent an address as 16 packed bytes in network (big-endian)
     order.  `address' is an integer representation of an IPv6 IP
     address.  A *note ValueError: 19c. is raised if the integer is
     negative or too large to be an IPv6 IP address.

 -- Function: ipaddress.summarize_address_range (first, last)

     Return an iterator of the summarized network range given the first
     and last IP addresses.  `first' is the first *note IPv4Address:
     27bd. or *note IPv6Address: 27be. in the range and `last' is the
     last *note IPv4Address: 27bd. or *note IPv6Address: 27be. in the
     range.  A *note TypeError: 562. is raised if `first' or `last' are
     not IP addresses or are not of the same version.  A *note
     ValueError: 19c. is raised if `last' is not greater than `first' or
     if `first' address version is not 4 or 6.

          >>> [ipaddr for ipaddr in ipaddress.summarize_address_range(
          ...    ipaddress.IPv4Address('192.0.2.0'),
          ...    ipaddress.IPv4Address('192.0.2.130'))]
          [IPv4Network('192.0.2.0/25'), IPv4Network('192.0.2.128/31'), IPv4Network('192.0.2.130/32')]

 -- Function: ipaddress.collapse_addresses (addresses)

     Return an iterator of the collapsed *note IPv4Network: 2bc. or
     *note IPv6Network: 2bd. objects.  `addresses' is an iterator of
     *note IPv4Network: 2bc. or *note IPv6Network: 2bd. objects.  A
     *note TypeError: 562. is raised if `addresses' contains mixed
     version objects.

          >>> [ipaddr for ipaddr in
          ... ipaddress.collapse_addresses([ipaddress.IPv4Network('192.0.2.0/25'),
          ... ipaddress.IPv4Network('192.0.2.128/25')])]
          [IPv4Network('192.0.2.0/24')]

 -- Function: ipaddress.get_mixed_type_key (obj)

     Return a key suitable for sorting between networks and addresses.
     Address and Network objects are not sortable by default; they’re
     fundamentally different, so the expression:

          IPv4Address('192.0.2.0') <= IPv4Network('192.0.2.0/24')

     doesn’t make sense.  There are some times however, where you may
     wish to have *note ipaddress: a0. sort these anyway.  If you need
     to do this, you can use this function as the ‘key’ argument to
     *note sorted(): 84e.

     `obj' is either a network or address object.


File: python.info,  Node: Custom Exceptions,  Prev: Other Module Level Functions,  Up: ipaddress --- IPv4/IPv6 manipulation library

5.21.28.17 Custom Exceptions
............................

To support more specific error reporting from class constructors, the
module defines the following exceptions:

 -- Exception: ipaddress.AddressValueError (ValueError)

     Any value error related to the address.

 -- Exception: ipaddress.NetmaskValueError (ValueError)

     Any value error related to the netmask.


File: python.info,  Node: Multimedia Services,  Next: Internationalization,  Prev: Internet Protocols and Support,  Up: The Python Standard Library

5.22 Multimedia Services
========================

The modules described in this chapter implement various algorithms or
interfaces that are mainly useful for multimedia applications.  They are
available at the discretion of the installation.  Here’s an overview:

* Menu:

* audioop: audioop --- Manipulate raw audio data. Manipulate raw audio data
* aifc: aifc --- Read and write AIFF and AIFC files. Read and write AIFF and AIFC files
* sunau: sunau --- Read and write Sun AU files. Read and write Sun AU files
* wave: wave --- Read and write WAV files. Read and write WAV files
* chunk: chunk --- Read IFF chunked data. Read IFF chunked data
* colorsys: colorsys --- Conversions between color systems. Conversions between color systems
* imghdr: imghdr --- Determine the type of an image. Determine the type of an image
* sndhdr: sndhdr --- Determine type of sound file. Determine type of sound file
* ossaudiodev: ossaudiodev --- Access to OSS-compatible audio devices. Access to OSS-compatible audio devices


File: python.info,  Node: audioop --- Manipulate raw audio data,  Next: aifc --- Read and write AIFF and AIFC files,  Up: Multimedia Services

5.22.1 ‘audioop’ — Manipulate raw audio data
--------------------------------------------

The *note audioop: d. module contains some useful operations on sound
fragments.  It operates on sound fragments consisting of signed integer
samples 8, 16, 24 or 32 bits wide, stored in *note bytes-like object:
36b.s.  All scalar items are integers, unless specified otherwise.

Changed in version 3.4: Support for 24-bit samples was added.  All
functions now accept any *note bytes-like object: 36b.  String input now
results in an immediate error.

This module provides support for a-LAW, u-LAW and Intel/DVI ADPCM
encodings.

A few of the more complicated operations only take 16-bit samples,
otherwise the sample size (in bytes) is always a parameter of the
operation.

The module defines the following variables and functions:

 -- Exception: audioop.error

     This exception is raised on all errors, such as unknown number of
     bytes per sample, etc.

 -- Function: audioop.add (fragment1, fragment2, width)

     Return a fragment which is the addition of the two samples passed
     as parameters.  `width' is the sample width in bytes, either ‘1’,
     ‘2’, ‘3’ or ‘4’.  Both fragments should have the same length.
     Samples are truncated in case of overflow.

 -- Function: audioop.adpcm2lin (adpcmfragment, width, state)

     Decode an Intel/DVI ADPCM coded fragment to a linear fragment.  See
     the description of *note lin2adpcm(): 2836. for details on ADPCM
     coding.  Return a tuple ‘(sample, newstate)’ where the sample has
     the width specified in `width'.

 -- Function: audioop.alaw2lin (fragment, width)

     Convert sound fragments in a-LAW encoding to linearly encoded sound
     fragments.  a-LAW encoding always uses 8 bits samples, so `width'
     refers only to the sample width of the output fragment here.

 -- Function: audioop.avg (fragment, width)

     Return the average over all samples in the fragment.

 -- Function: audioop.avgpp (fragment, width)

     Return the average peak-peak value over all samples in the
     fragment.  No filtering is done, so the usefulness of this routine
     is questionable.

 -- Function: audioop.bias (fragment, width, bias)

     Return a fragment that is the original fragment with a bias added
     to each sample.  Samples wrap around in case of overflow.

 -- Function: audioop.byteswap (fragment, width)

     "Byteswap" all samples in a fragment and returns the modified
     fragment.  Converts big-endian samples to little-endian and vice
     versa.

     New in version 3.4.

 -- Function: audioop.cross (fragment, width)

     Return the number of zero crossings in the fragment passed as an
     argument.

 -- Function: audioop.findfactor (fragment, reference)

     Return a factor `F' such that ‘rms(add(fragment, mul(reference,
     -F)))’ is minimal, i.e., return the factor with which you should
     multiply `reference' to make it match as well as possible to
     `fragment'.  The fragments should both contain 2-byte samples.

     The time taken by this routine is proportional to ‘len(fragment)’.

 -- Function: audioop.findfit (fragment, reference)

     Try to match `reference' as well as possible to a portion of
     `fragment' (which should be the longer fragment).  This is
     (conceptually) done by taking slices out of `fragment', using *note
     findfactor(): 283c. to compute the best match, and minimizing the
     result.  The fragments should both contain 2-byte samples.  Return
     a tuple ‘(offset, factor)’ where `offset' is the (integer) offset
     into `fragment' where the optimal match started and `factor' is the
     (floating-point) factor as per *note findfactor(): 283c.

 -- Function: audioop.findmax (fragment, length)

     Search `fragment' for a slice of length `length' samples (not
     bytes!)  with maximum energy, i.e., return `i' for which
     ‘rms(fragment[i*2:(i+length)*2])’ is maximal.  The fragments should
     both contain 2-byte samples.

     The routine takes time proportional to ‘len(fragment)’.

 -- Function: audioop.getsample (fragment, width, index)

     Return the value of sample `index' from the fragment.

 -- Function: audioop.lin2adpcm (fragment, width, state)

     Convert samples to 4 bit Intel/DVI ADPCM encoding.  ADPCM coding is
     an adaptive coding scheme, whereby each 4 bit number is the
     difference between one sample and the next, divided by a (varying)
     step.  The Intel/DVI ADPCM algorithm has been selected for use by
     the IMA, so it may well become a standard.

     `state' is a tuple containing the state of the coder.  The coder
     returns a tuple ‘(adpcmfrag, newstate)’, and the `newstate' should
     be passed to the next call of *note lin2adpcm(): 2836.  In the
     initial call, ‘None’ can be passed as the state.  `adpcmfrag' is
     the ADPCM coded fragment packed 2 4-bit values per byte.

 -- Function: audioop.lin2alaw (fragment, width)

     Convert samples in the audio fragment to a-LAW encoding and return
     this as a bytes object.  a-LAW is an audio encoding format whereby
     you get a dynamic range of about 13 bits using only 8 bit samples.
     It is used by the Sun audio hardware, among others.

 -- Function: audioop.lin2lin (fragment, width, newwidth)

     Convert samples between 1-, 2-, 3- and 4-byte formats.

          Note: In some audio formats, such as .WAV files, 16, 24 and 32
          bit samples are signed, but 8 bit samples are unsigned.  So
          when converting to 8 bit wide samples for these formats, you
          need to also add 128 to the result:

               new_frames = audioop.lin2lin(frames, old_width, 1)
               new_frames = audioop.bias(new_frames, 1, 128)

          The same, in reverse, has to be applied when converting from 8
          to 16, 24 or 32 bit width samples.

 -- Function: audioop.lin2ulaw (fragment, width)

     Convert samples in the audio fragment to u-LAW encoding and return
     this as a bytes object.  u-LAW is an audio encoding format whereby
     you get a dynamic range of about 14 bits using only 8 bit samples.
     It is used by the Sun audio hardware, among others.

 -- Function: audioop.max (fragment, width)

     Return the maximum of the `absolute value' of all samples in a
     fragment.

 -- Function: audioop.maxpp (fragment, width)

     Return the maximum peak-peak value in the sound fragment.

 -- Function: audioop.minmax (fragment, width)

     Return a tuple consisting of the minimum and maximum values of all
     samples in the sound fragment.

 -- Function: audioop.mul (fragment, width, factor)

     Return a fragment that has all samples in the original fragment
     multiplied by the floating-point value `factor'.  Samples are
     truncated in case of overflow.

 -- Function: audioop.ratecv (fragment, width, nchannels, inrate,
          outrate, state[, weightA[, weightB]])

     Convert the frame rate of the input fragment.

     `state' is a tuple containing the state of the converter.  The
     converter returns a tuple ‘(newfragment, newstate)’, and `newstate'
     should be passed to the next call of *note ratecv(): 2847.  The
     initial call should pass ‘None’ as the state.

     The `weightA' and `weightB' arguments are parameters for a simple
     digital filter and default to ‘1’ and ‘0’ respectively.

 -- Function: audioop.reverse (fragment, width)

     Reverse the samples in a fragment and returns the modified
     fragment.

 -- Function: audioop.rms (fragment, width)

     Return the root-mean-square of the fragment, i.e.
     ‘sqrt(sum(S_i^2)/n)’.

     This is a measure of the power in an audio signal.

 -- Function: audioop.tomono (fragment, width, lfactor, rfactor)

     Convert a stereo fragment to a mono fragment.  The left channel is
     multiplied by `lfactor' and the right channel by `rfactor' before
     adding the two channels to give a mono signal.

 -- Function: audioop.tostereo (fragment, width, lfactor, rfactor)

     Generate a stereo fragment from a mono fragment.  Each pair of
     samples in the stereo fragment are computed from the mono sample,
     whereby left channel samples are multiplied by `lfactor' and right
     channel samples by `rfactor'.

 -- Function: audioop.ulaw2lin (fragment, width)

     Convert sound fragments in u-LAW encoding to linearly encoded sound
     fragments.  u-LAW encoding always uses 8 bits samples, so `width'
     refers only to the sample width of the output fragment here.

Note that operations such as *note mul(): 2846. or *note max(): 2843.
make no distinction between mono and stereo fragments, i.e.  all samples
are treated equal.  If this is a problem the stereo fragment should be
split into two mono fragments first and recombined later.  Here is an
example of how to do that:

     def mul_stereo(sample, width, lfactor, rfactor):
         lsample = audioop.tomono(sample, width, 1, 0)
         rsample = audioop.tomono(sample, width, 0, 1)
         lsample = audioop.mul(lsample, width, lfactor)
         rsample = audioop.mul(rsample, width, rfactor)
         lsample = audioop.tostereo(lsample, width, 1, 0)
         rsample = audioop.tostereo(rsample, width, 0, 1)
         return audioop.add(lsample, rsample, width)

If you use the ADPCM coder to build network packets and you want your
protocol to be stateless (i.e.  to be able to tolerate packet loss) you
should not only transmit the data but also the state.  Note that you
should send the `initial' state (the one you passed to *note
lin2adpcm(): 2836.) along to the decoder, not the final state (as
returned by the coder).  If you want to use *note struct.Struct: 11bc.
to store the state in binary you can code the first element (the
predicted value) in 16 bits and the second (the delta index) in 8.

The ADPCM coders have never been tried against other ADPCM coders, only
against themselves.  It could well be that I misinterpreted the
standards in which case they will not be interoperable with the
respective standards.

The ‘find*()’ routines might look a bit funny at first sight.  They are
primarily meant to do echo cancellation.  A reasonably fast way to do
this is to pick the most energetic piece of the output sample, locate
that in the input sample and subtract the whole output sample from the
input sample:

     def echocancel(outputdata, inputdata):
         pos = audioop.findmax(outputdata, 800)    # one tenth second
         out_test = outputdata[pos*2:]
         in_test = inputdata[pos*2:]
         ipos, factor = audioop.findfit(in_test, out_test)
         # Optional (for better cancellation):
         # factor = audioop.findfactor(in_test[ipos*2:ipos*2+len(out_test)],
         #              out_test)
         prefill = '\0'*(pos+ipos)*2
         postfill = '\0'*(len(inputdata)-len(prefill)-len(outputdata))
         outputdata = prefill + audioop.mul(outputdata,2,-factor) + postfill
         return audioop.add(inputdata, outputdata, 2)


File: python.info,  Node: aifc --- Read and write AIFF and AIFC files,  Next: sunau --- Read and write Sun AU files,  Prev: audioop --- Manipulate raw audio data,  Up: Multimedia Services

5.22.2 ‘aifc’ — Read and write AIFF and AIFC files
--------------------------------------------------

`Source code:' Lib/aifc.py(1)

__________________________________________________________________

This module provides support for reading and writing AIFF and AIFF-C
files.  AIFF is Audio Interchange File Format, a format for storing
digital audio samples in a file.  AIFF-C is a newer version of the
format that includes the ability to compress the audio data.

     Note: Some operations may only work under IRIX; these will raise
     *note ImportError: 19f. when attempting to import the ‘cl’ module,
     which is only available on IRIX.

Audio files have a number of parameters that describe the audio data.
The sampling rate or frame rate is the number of times per second the
sound is sampled.  The number of channels indicate if the audio is mono,
stereo, or quadro.  Each frame consists of one sample per channel.  The
sample size is the size in bytes of each sample.  Thus a frame consists
of ‘nchannels * samplesize’ bytes, and a second’s worth of audio
consists of ‘nchannels * samplesize * framerate’ bytes.

For example, CD quality audio has a sample size of two bytes (16 bits),
uses two channels (stereo) and has a frame rate of 44,100 frames/second.
This gives a frame size of 4 bytes (2*2), and a second’s worth occupies
2*2*44100 bytes (176,400 bytes).

Module *note aifc: 5. defines the following function:

 -- Function: aifc.open (file, mode=None)

     Open an AIFF or AIFF-C file and return an object instance with
     methods that are described below.  The argument `file' is either a
     string naming a file or a *note file object: 78b.  `mode' must be
     ‘'r'’ or ‘'rb'’ when the file must be opened for reading, or ‘'w'’
     or ‘'wb'’ when the file must be opened for writing.  If omitted,
     ‘file.mode’ is used if it exists, otherwise ‘'rb'’ is used.  When
     used for writing, the file object should be seekable, unless you
     know ahead of time how many samples you are going to write in total
     and use ‘writeframesraw()’ and ‘setnframes()’.  The *note open():
     40c. function may be used in a *note with: 29d. statement.  When
     the *note with: 29d. block completes, the *note close(): 40d.
     method is called.

     Changed in version 3.4: Support for the *note with: 29d. statement
     was added.

Objects returned by *note open(): 40c. when a file is opened for reading
have the following methods:

 -- Method: aifc.getnchannels ()

     Return the number of audio channels (1 for mono, 2 for stereo).

 -- Method: aifc.getsampwidth ()

     Return the size in bytes of individual samples.

 -- Method: aifc.getframerate ()

     Return the sampling rate (number of audio frames per second).

 -- Method: aifc.getnframes ()

     Return the number of audio frames in the file.

 -- Method: aifc.getcomptype ()

     Return a bytes array of length 4 describing the type of compression
     used in the audio file.  For AIFF files, the returned value is
     ‘b'NONE'’.

 -- Method: aifc.getcompname ()

     Return a bytes array convertible to a human-readable description of
     the type of compression used in the audio file.  For AIFF files,
     the returned value is ‘b'not compressed'’.

 -- Method: aifc.getparams ()

     Returns a *note namedtuple(): 229. ‘(nchannels, sampwidth,
     framerate, nframes, comptype, compname)’, equivalent to output of
     the ‘get*()’ methods.

 -- Method: aifc.getmarkers ()

     Return a list of markers in the audio file.  A marker consists of a
     tuple of three elements.  The first is the mark ID (an integer),
     the second is the mark position in frames from the beginning of the
     data (an integer), the third is the name of the mark (a string).

 -- Method: aifc.getmark (id)

     Return the tuple as described in *note getmarkers(): 2855. for the
     mark with the given `id'.

 -- Method: aifc.readframes (nframes)

     Read and return the next `nframes' frames from the audio file.  The
     returned data is a string containing for each frame the
     uncompressed samples of all channels.

 -- Method: aifc.rewind ()

     Rewind the read pointer.  The next *note readframes(): 2857. will
     start from the beginning.

 -- Method: aifc.setpos (pos)

     Seek to the specified frame number.

 -- Method: aifc.tell ()

     Return the current frame number.

 -- Method: aifc.close ()

     Close the AIFF file.  After calling this method, the object can no
     longer be used.

Objects returned by *note open(): 40c. when a file is opened for writing
have all the above methods, except for ‘readframes()’ and ‘setpos()’.
In addition the following methods exist.  The ‘get*()’ methods can only
be called after the corresponding ‘set*()’ methods have been called.
Before the first ‘writeframes()’ or ‘writeframesraw()’, all parameters
except for the number of frames must be filled in.

 -- Method: aifc.aiff ()

     Create an AIFF file.  The default is that an AIFF-C file is
     created, unless the name of the file ends in ‘'.aiff'’ in which
     case the default is an AIFF file.

 -- Method: aifc.aifc ()

     Create an AIFF-C file.  The default is that an AIFF-C file is
     created, unless the name of the file ends in ‘'.aiff'’ in which
     case the default is an AIFF file.

 -- Method: aifc.setnchannels (nchannels)

     Specify the number of channels in the audio file.

 -- Method: aifc.setsampwidth (width)

     Specify the size in bytes of audio samples.

 -- Method: aifc.setframerate (rate)

     Specify the sampling frequency in frames per second.

 -- Method: aifc.setnframes (nframes)

     Specify the number of frames that are to be written to the audio
     file.  If this parameter is not set, or not set correctly, the file
     needs to support seeking.

 -- Method: aifc.setcomptype (type, name)

     Specify the compression type.  If not specified, the audio data
     will not be compressed.  In AIFF files, compression is not
     possible.  The name parameter should be a human-readable
     description of the compression type as a bytes array, the type
     parameter should be a bytes array of length 4.  Currently the
     following compression types are supported: ‘b'NONE'’, ‘b'ULAW'’,
     ‘b'ALAW'’, ‘b'G722'’.

 -- Method: aifc.setparams (nchannels, sampwidth, framerate, comptype,
          compname)

     Set all the above parameters at once.  The argument is a tuple
     consisting of the various parameters.  This means that it is
     possible to use the result of a *note getparams(): 40b. call as
     argument to *note setparams(): 2862.

 -- Method: aifc.setmark (id, pos, name)

     Add a mark with the given id (larger than 0), and the given name at
     the given position.  This method can be called at any time before
     *note close(): 40d.

 -- Method: aifc.tell ()

     Return the current write position in the output file.  Useful in
     combination with *note setmark(): 2863.

 -- Method: aifc.writeframes (data)

     Write data to the output file.  This method can only be called
     after the audio file parameters have been set.

     Changed in version 3.4: Any *note bytes-like object: 36b. is now
     accepted.

 -- Method: aifc.writeframesraw (data)

     Like *note writeframes(): 40f, except that the header of the audio
     file is not updated.

     Changed in version 3.4: Any *note bytes-like object: 36b. is now
     accepted.

 -- Method: aifc.close ()

     Close the AIFF file.  The header of the file is updated to reflect
     the actual size of the audio data.  After calling this method, the
     object can no longer be used.

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/aifc.py


File: python.info,  Node: sunau --- Read and write Sun AU files,  Next: wave --- Read and write WAV files,  Prev: aifc --- Read and write AIFF and AIFC files,  Up: Multimedia Services

5.22.3 ‘sunau’ — Read and write Sun AU files
--------------------------------------------

`Source code:' Lib/sunau.py(1)

__________________________________________________________________

The *note sunau: f8. module provides a convenient interface to the Sun
AU sound format.  Note that this module is interface-compatible with the
modules *note aifc: 5. and *note wave: 124.

An audio file consists of a header followed by the data.  The fields of
the header are:

Field               Contents
                    
------------------------------------------------------------------------
                    
magic word          The four bytes ‘.snd’.
                    
                    
header size         Size of the header, including info, in bytes.
                    
                    
data size           Physical size of the data, in bytes.
                    
                    
encoding            Indicates how the audio samples are encoded.
                    
                    
sample rate         The sampling rate.
                    
                    
# of channels       The number of channels in the samples.
                    
                    
info                ASCII string giving a description of the audio
                    file (padded with null bytes).
                    

Apart from the info field, all header fields are 4 bytes in size.  They
are all 32-bit unsigned integers encoded in big-endian byte order.

The *note sunau: f8. module defines the following functions:

 -- Function: sunau.open (file, mode)

     If `file' is a string, open the file by that name, otherwise treat
     it as a seekable file-like object.  `mode' can be any of

     ‘'r'’

          Read only mode.

     ‘'w'’

          Write only mode.

     Note that it does not allow read/write files.

     A `mode' of ‘'r'’ returns an ‘AU_read’ object, while a `mode' of
     ‘'w'’ or ‘'wb'’ returns an ‘AU_write’ object.

 -- Function: sunau.openfp (file, mode)

     A synonym for *note open(): 4de, maintained for backwards
     compatibility.

The *note sunau: f8. module defines the following exception:

 -- Exception: sunau.Error

     An error raised when something is impossible because of Sun AU
     specs or implementation deficiency.

The *note sunau: f8. module defines the following data items:

 -- Data: sunau.AUDIO_FILE_MAGIC

     An integer every valid Sun AU file begins with, stored in
     big-endian form.  This is the string ‘.snd’ interpreted as an
     integer.

 -- Data: sunau.AUDIO_FILE_ENCODING_MULAW_8
 -- Data: sunau.AUDIO_FILE_ENCODING_LINEAR_8
 -- Data: sunau.AUDIO_FILE_ENCODING_LINEAR_16
 -- Data: sunau.AUDIO_FILE_ENCODING_LINEAR_24
 -- Data: sunau.AUDIO_FILE_ENCODING_LINEAR_32
 -- Data: sunau.AUDIO_FILE_ENCODING_ALAW_8

     Values of the encoding field from the AU header which are supported
     by this module.

 -- Data: sunau.AUDIO_FILE_ENCODING_FLOAT
 -- Data: sunau.AUDIO_FILE_ENCODING_DOUBLE
 -- Data: sunau.AUDIO_FILE_ENCODING_ADPCM_G721
 -- Data: sunau.AUDIO_FILE_ENCODING_ADPCM_G722
 -- Data: sunau.AUDIO_FILE_ENCODING_ADPCM_G723_3
 -- Data: sunau.AUDIO_FILE_ENCODING_ADPCM_G723_5

     Additional known values of the encoding field from the AU header,
     but which are not supported by this module.

* Menu:

* AU_read Objects:: 
* AU_write Objects:: 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/sunau.py


File: python.info,  Node: AU_read Objects,  Next: AU_write Objects,  Up: sunau --- Read and write Sun AU files

5.22.3.1 AU_read Objects
........................

AU_read objects, as returned by *note open(): 4de. above, have the
following methods:

 -- Method: AU_read.close ()

     Close the stream, and make the instance unusable.  (This is called
     automatically on deletion.)

 -- Method: AU_read.getnchannels ()

     Returns number of audio channels (1 for mone, 2 for stereo).

 -- Method: AU_read.getsampwidth ()

     Returns sample width in bytes.

 -- Method: AU_read.getframerate ()

     Returns sampling frequency.

 -- Method: AU_read.getnframes ()

     Returns number of audio frames.

 -- Method: AU_read.getcomptype ()

     Returns compression type.  Supported compression types are
     ‘'ULAW'’, ‘'ALAW'’ and ‘'NONE'’.

 -- Method: AU_read.getcompname ()

     Human-readable version of *note getcomptype(): 287c.  The supported
     types have the respective names ‘'CCITT G.711 u-law'’, ‘'CCITT
     G.711 A-law'’ and ‘'not compressed'’.

 -- Method: AU_read.getparams ()

     Returns a *note namedtuple(): 229. ‘(nchannels, sampwidth,
     framerate, nframes, comptype, compname)’, equivalent to output of
     the ‘get*()’ methods.

 -- Method: AU_read.readframes (n)

     Reads and returns at most `n' frames of audio, as a string of
     bytes.  The data will be returned in linear format.  If the
     original data is in u-LAW format, it will be converted.

 -- Method: AU_read.rewind ()

     Rewind the file pointer to the beginning of the audio stream.

The following two methods define a term "position" which is compatible
between them, and is otherwise implementation dependent.

 -- Method: AU_read.setpos (pos)

     Set the file pointer to the specified position.  Only values
     returned from *note tell(): 2882. should be used for `pos'.

 -- Method: AU_read.tell ()

     Return current file pointer position.  Note that the returned value
     has nothing to do with the actual position in the file.

The following two functions are defined for compatibility with the *note
aifc: 5, and don’t do anything interesting.

 -- Method: AU_read.getmarkers ()

     Returns ‘None’.

 -- Method: AU_read.getmark (id)

     Raise an error.


File: python.info,  Node: AU_write Objects,  Prev: AU_read Objects,  Up: sunau --- Read and write Sun AU files

5.22.3.2 AU_write Objects
.........................

AU_write objects, as returned by *note open(): 4de. above, have the
following methods:

 -- Method: AU_write.setnchannels (n)

     Set the number of channels.

 -- Method: AU_write.setsampwidth (n)

     Set the sample width (in bytes.)

     Changed in version 3.4: Added support for 24-bit samples.

 -- Method: AU_write.setframerate (n)

     Set the frame rate.

 -- Method: AU_write.setnframes (n)

     Set the number of frames.  This can be later changed, when and if
     more frames are written.

 -- Method: AU_write.setcomptype (type, name)

     Set the compression type and description.  Only ‘'NONE'’ and
     ‘'ULAW'’ are supported on output.

 -- Method: AU_write.setparams (tuple)

     The `tuple' should be ‘(nchannels, sampwidth, framerate, nframes,
     comptype, compname)’, with values valid for the ‘set*()’ methods.
     Set all parameters.

 -- Method: AU_write.tell ()

     Return current position in the file, with the same disclaimer for
     the *note AU_read.tell(): 2882. and *note AU_read.setpos(): 2881.
     methods.

 -- Method: AU_write.writeframesraw (data)

     Write audio frames, without correcting `nframes'.

     Changed in version 3.4: Any *note bytes-like object: 36b. is now
     accepted.

 -- Method: AU_write.writeframes (data)

     Write audio frames and make sure `nframes' is correct.

     Changed in version 3.4: Any *note bytes-like object: 36b. is now
     accepted.

 -- Method: AU_write.close ()

     Make sure `nframes' is correct, and close the file.

     This method is called upon deletion.

Note that it is invalid to set any parameters after calling
‘writeframes()’ or ‘writeframesraw()’.


File: python.info,  Node: wave --- Read and write WAV files,  Next: chunk --- Read IFF chunked data,  Prev: sunau --- Read and write Sun AU files,  Up: Multimedia Services

5.22.4 ‘wave’ — Read and write WAV files
----------------------------------------

`Source code:' Lib/wave.py(1)

__________________________________________________________________

The *note wave: 124. module provides a convenient interface to the WAV
sound format.  It does not support compression/decompression, but it
does support mono/stereo.

The *note wave: 124. module defines the following function and
exception:

 -- Function: wave.open (file, mode=None)

     If `file' is a string, open the file by that name, otherwise treat
     it as a file-like object.  `mode' can be:

     ‘'rb'’

          Read only mode.

     ‘'wb'’

          Write only mode.

     Note that it does not allow read/write WAV files.

     A `mode' of ‘'rb'’ returns a ‘Wave_read’ object, while a `mode' of
     ‘'wb'’ returns a ‘Wave_write’ object.  If `mode' is omitted and a
     file-like object is passed as `file', ‘file.mode’ is used as the
     default value for `mode'.

     If you pass in a file-like object, the wave object will not close
     it when its ‘close()’ method is called; it is the caller’s
     responsibility to close the file object.

     The *note open(): 50d. function may be used in a *note with: 29d.
     statement.  When the *note with: 29d. block completes, the *note
     Wave_read.close(): 2890. or *note Wave_write.close(): 2891. method
     is called.

     Changed in version 3.4: Added support for unseekable files.

 -- Function: wave.openfp (file, mode)

     A synonym for *note open(): 50d, maintained for backwards
     compatibility.

 -- Exception: wave.Error

     An error raised when something is impossible because it violates
     the WAV specification or hits an implementation deficiency.

* Menu:

* Wave_read Objects:: 
* Wave_write Objects:: 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/wave.py


File: python.info,  Node: Wave_read Objects,  Next: Wave_write Objects,  Up: wave --- Read and write WAV files

5.22.4.1 Wave_read Objects
..........................

Wave_read objects, as returned by *note open(): 50d, have the following
methods:

 -- Method: Wave_read.close ()

     Close the stream if it was opened by *note wave: 124, and make the
     instance unusable.  This is called automatically on object
     collection.

 -- Method: Wave_read.getnchannels ()

     Returns number of audio channels (‘1’ for mono, ‘2’ for stereo).

 -- Method: Wave_read.getsampwidth ()

     Returns sample width in bytes.

 -- Method: Wave_read.getframerate ()

     Returns sampling frequency.

 -- Method: Wave_read.getnframes ()

     Returns number of audio frames.

 -- Method: Wave_read.getcomptype ()

     Returns compression type (‘'NONE'’ is the only supported type).

 -- Method: Wave_read.getcompname ()

     Human-readable version of *note getcomptype(): 289a.  Usually ‘'not
     compressed'’ parallels ‘'NONE'’.

 -- Method: Wave_read.getparams ()

     Returns a *note namedtuple(): 229. ‘(nchannels, sampwidth,
     framerate, nframes, comptype, compname)’, equivalent to output of
     the ‘get*()’ methods.

 -- Method: Wave_read.readframes (n)

     Reads and returns at most `n' frames of audio, as a string of
     bytes.

 -- Method: Wave_read.rewind ()

     Rewind the file pointer to the beginning of the audio stream.

The following two methods are defined for compatibility with the *note
aifc: 5. module, and don’t do anything interesting.

 -- Method: Wave_read.getmarkers ()

     Returns ‘None’.

 -- Method: Wave_read.getmark (id)

     Raise an error.

The following two methods define a term "position" which is compatible
between them, and is otherwise implementation dependent.

 -- Method: Wave_read.setpos (pos)

     Set the file pointer to the specified position.

 -- Method: Wave_read.tell ()

     Return current file pointer position.


File: python.info,  Node: Wave_write Objects,  Prev: Wave_read Objects,  Up: wave --- Read and write WAV files

5.22.4.2 Wave_write Objects
...........................

For seekable output streams, the ‘wave’ header will automatically be
updated to reflect the number of frames actually written.  For
unseekable streams, the `nframes' value must be accurate when the first
frame data is written.  An accurate `nframes' value can be achieved
either by calling *note setnframes(): 28a4. or *note setparams(): 28a5.
with the number of frames that will be written before *note close():
2891. is called and then using *note writeframesraw(): 50f. to write the
frame data, or by calling *note writeframes(): 510. with all of the
frame data to be written.  In the latter case *note writeframes(): 510.
will calculate the number of frames in the data and set `nframes'
accordingly before writing the frame data.

Wave_write objects, as returned by *note open(): 50d, have the following
methods:

Changed in version 3.4: Added support for unseekable files.

 -- Method: Wave_write.close ()

     Make sure `nframes' is correct, and close the file if it was opened
     by *note wave: 124.  This method is called upon object collection.
     It will raise an exception if the output stream is not seekable and
     `nframes' does not match the number of frames actually written.

 -- Method: Wave_write.setnchannels (n)

     Set the number of channels.

 -- Method: Wave_write.setsampwidth (n)

     Set the sample width to `n' bytes.

 -- Method: Wave_write.setframerate (n)

     Set the frame rate to `n'.

     Changed in version 3.2: A non-integral input to this method is
     rounded to the nearest integer.

 -- Method: Wave_write.setnframes (n)

     Set the number of frames to `n'.  This will be changed later if the
     number of frames actually written is different (this update attempt
     will raise an error if the output stream is not seekable).

 -- Method: Wave_write.setcomptype (type, name)

     Set the compression type and description.  At the moment, only
     compression type ‘NONE’ is supported, meaning no compression.

 -- Method: Wave_write.setparams (tuple)

     The `tuple' should be ‘(nchannels, sampwidth, framerate, nframes,
     comptype, compname)’, with values valid for the ‘set*()’ methods.
     Sets all parameters.

 -- Method: Wave_write.tell ()

     Return current position in the file, with the same disclaimer for
     the *note Wave_read.tell(): 28a2. and *note Wave_read.setpos():
     28a1. methods.

 -- Method: Wave_write.writeframesraw (data)

     Write audio frames, without correcting `nframes'.

     Changed in version 3.4: Any *note bytes-like object: 36b. is now
     accepted.

 -- Method: Wave_write.writeframes (data)

     Write audio frames and make sure `nframes' is correct.  It will
     raise an error if the output stream is not seekable and the total
     number of frames that have been written after `data' has been
     written does not match the previously set value for `nframes'.

     Changed in version 3.4: Any *note bytes-like object: 36b. is now
     accepted.

Note that it is invalid to set any parameters after calling
‘writeframes()’ or ‘writeframesraw()’, and any attempt to do so will
raise *note wave.Error: 2893.


File: python.info,  Node: chunk --- Read IFF chunked data,  Next: colorsys --- Conversions between color systems,  Prev: wave --- Read and write WAV files,  Up: Multimedia Services

5.22.5 ‘chunk’ — Read IFF chunked data
--------------------------------------

This module provides an interface for reading files that use EA IFF 85
chunks.  (1) This format is used in at least the Audio Interchange File
Format (AIFF/AIFF-C) and the Real Media File Format (RMFF). The WAVE
audio file format is closely related and can also be read using this
module.

A chunk has the following structure:

Offset        Length       Contents
                           
---------------------------------------------------------------
                           
0             4            Chunk ID
                           
                           
4             4            Size of chunk in big-endian byte
                           order, not including the header
                           
                           
8             `n'          Data bytes, where `n' is the size
                           given in the preceding field
                           
                           
8 + `n'       0 or 1       Pad byte needed if `n' is odd and
                           chunk alignment is used
                           

The ID is a 4-byte string which identifies the type of chunk.

The size field (a 32-bit value, encoded using big-endian byte order)
gives the size of the chunk data, not including the 8-byte header.

Usually an IFF-type file consists of one or more chunks.  The proposed
usage of the *note Chunk: 28ad. class defined here is to instantiate an
instance at the start of each chunk and read from the instance until it
reaches the end, after which a new instance can be instantiated.  At the
end of the file, creating a new instance will fail with an *note
EOFError: 8d8. exception.

 -- Class: chunk.Chunk (file, align=True, bigendian=True,
          inclheader=False)

     Class which represents a chunk.  The `file' argument is expected to
     be a file-like object.  An instance of this class is specifically
     allowed.  The only method that is needed is ‘read()’.  If the
     methods *note seek(): 194c. and *note tell(): 194e. are present and
     don’t raise an exception, they are also used.  If these methods are
     present and raise an exception, they are expected to not have
     altered the object.  If the optional argument `align' is true,
     chunks are assumed to be aligned on 2-byte boundaries.  If `align'
     is false, no alignment is assumed.  The default value is true.  If
     the optional argument `bigendian' is false, the chunk size is
     assumed to be in little-endian order.  This is needed for WAVE
     audio files.  The default value is true.  If the optional argument
     `inclheader' is true, the size given in the chunk header includes
     the size of the header.  The default value is false.

     A *note Chunk: 28ad. object supports the following methods:

      -- Method: getname ()

          Returns the name (ID) of the chunk.  This is the first 4 bytes
          of the chunk.

      -- Method: getsize ()

          Returns the size of the chunk.

      -- Method: close ()

          Close and skip to the end of the chunk.  This does not close
          the underlying file.

     The remaining methods will raise *note OSError: 4b6. if called
     after the *note close(): 28b0. method has been called.  Before
     Python 3.3, they used to raise *note IOError: 5b0, now an alias of
     *note OSError: 4b6.

      -- Method: isatty ()

          Returns ‘False’.

      -- Method: seek (pos, whence=0)

          Set the chunk’s current position.  The `whence' argument is
          optional and defaults to ‘0’ (absolute file positioning);
          other values are ‘1’ (seek relative to the current position)
          and ‘2’ (seek relative to the file’s end).  There is no return
          value.  If the underlying file does not allow seek, only
          forward seeks are allowed.

      -- Method: tell ()

          Return the current position into the chunk.

      -- Method: read (size=-1)

          Read at most `size' bytes from the chunk (less if the read
          hits the end of the chunk before obtaining `size' bytes).  If
          the `size' argument is negative or omitted, read all data
          until the end of the chunk.  An empty bytes object is returned
          when the end of the chunk is encountered immediately.

      -- Method: skip ()

          Skip to the end of the chunk.  All further calls to *note
          read(): 28b4. for the chunk will return ‘b''’.  If you are not
          interested in the contents of the chunk, this method should be
          called so that the file points to the start of the next chunk.

   ---------- Footnotes ----------

   (1) "EA IFF 85" Standard for Interchange Format Files, Jerry
Morrison, Electronic Arts, January 1985.


File: python.info,  Node: colorsys --- Conversions between color systems,  Next: imghdr --- Determine the type of an image,  Prev: chunk --- Read IFF chunked data,  Up: Multimedia Services

5.22.6 ‘colorsys’ — Conversions between color systems
-----------------------------------------------------

`Source code:' Lib/colorsys.py(1)

__________________________________________________________________

The *note colorsys: 20. module defines bidirectional conversions of
color values between colors expressed in the RGB (Red Green Blue) color
space used in computer monitors and three other coordinate systems: YIQ,
HLS (Hue Lightness Saturation) and HSV (Hue Saturation Value).
Coordinates in all of these color spaces are floating point values.  In
the YIQ space, the Y coordinate is between 0 and 1, but the I and Q
coordinates can be positive or negative.  In all other spaces, the
coordinates are all between 0 and 1.

See also
........

More information about color spaces can be found at
‘http://www.poynton.com/ColorFAQ.html’ and
‘http://www.cambridgeincolour.com/tutorials/color-spaces.htm’.

The *note colorsys: 20. module defines the following functions:

 -- Function: colorsys.rgb_to_yiq (r, g, b)

     Convert the color from RGB coordinates to YIQ coordinates.

 -- Function: colorsys.yiq_to_rgb (y, i, q)

     Convert the color from YIQ coordinates to RGB coordinates.

 -- Function: colorsys.rgb_to_hls (r, g, b)

     Convert the color from RGB coordinates to HLS coordinates.

 -- Function: colorsys.hls_to_rgb (h, l, s)

     Convert the color from HLS coordinates to RGB coordinates.

 -- Function: colorsys.rgb_to_hsv (r, g, b)

     Convert the color from RGB coordinates to HSV coordinates.

 -- Function: colorsys.hsv_to_rgb (h, s, v)

     Convert the color from HSV coordinates to RGB coordinates.

Example:

     >>> import colorsys
     >>> colorsys.rgb_to_hsv(0.2, 0.4, 0.4)
     (0.5, 0.5, 0.4)
     >>> colorsys.hsv_to_rgb(0.5, 0.5, 0.4)
     (0.2, 0.4, 0.4)

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/colorsys.py


File: python.info,  Node: imghdr --- Determine the type of an image,  Next: sndhdr --- Determine type of sound file,  Prev: colorsys --- Conversions between color systems,  Up: Multimedia Services

5.22.7 ‘imghdr’ — Determine the type of an image
------------------------------------------------

`Source code:' Lib/imghdr.py(1)

__________________________________________________________________

The *note imghdr: 98. module determines the type of image contained in a
file or byte stream.

The *note imghdr: 98. module defines the following function:

 -- Function: imghdr.what (filename, h=None)

     Tests the image data contained in the file named by `filename', and
     returns a string describing the image type.  If optional `h' is
     provided, the `filename' is ignored and `h' is assumed to contain
     the byte stream to test.

The following image types are recognized, as listed below with the
return value from *note what(): 2a1.:

Value            Image format
                 
---------------------------------------------------------
                 
‘'rgb'’          SGI ImgLib Files
                 
                 
‘'gif'’          GIF 87a and 89a Files
                 
                 
‘'pbm'’          Portable Bitmap Files
                 
                 
‘'pgm'’          Portable Graymap Files
                 
                 
‘'ppm'’          Portable Pixmap Files
                 
                 
‘'tiff'’         TIFF Files
                 
                 
‘'rast'’         Sun Raster Files
                 
                 
‘'xbm'’          X Bitmap Files
                 
                 
‘'jpeg'’         JPEG data in JFIF or Exif formats
                 
                 
‘'bmp'’          BMP files
                 
                 
‘'png'’          Portable Network Graphics
                 
                 
‘'webp'’         WebP files
                 
                 
‘'exr'’          OpenEXR Files
                 

New in version 3.5: The `exr' and `webp' formats were added.

You can extend the list of file types *note imghdr: 98. can recognize by
appending to this variable:

 -- Data: imghdr.tests

     A list of functions performing the individual tests.  Each function
     takes two arguments: the byte-stream and an open file-like object.
     When *note what(): 2a1. is called with a byte-stream, the file-like
     object will be ‘None’.

     The test function should return a string describing the image type
     if the test succeeded, or ‘None’ if it failed.

Example:

     >>> import imghdr
     >>> imghdr.what('bass.gif')
     'gif'

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/imghdr.py


File: python.info,  Node: sndhdr --- Determine type of sound file,  Next: ossaudiodev --- Access to OSS-compatible audio devices,  Prev: imghdr --- Determine the type of an image,  Up: Multimedia Services

5.22.8 ‘sndhdr’ — Determine type of sound file
----------------------------------------------

`Source code:' Lib/sndhdr.py(1)

__________________________________________________________________

The *note sndhdr: ec. provides utility functions which attempt to
determine the type of sound data which is in a file.  When these
functions are able to determine what type of sound data is stored in a
file, they return a *note namedtuple(): 229, containing five attributes:
(‘filetype’, ‘framerate’, ‘nchannels’, ‘nframes’, ‘sampwidth’).  The
value for `type' indicates the data type and will be one of the strings
‘'aifc'’, ‘'aiff'’, ‘'au'’, ‘'hcom'’, ‘'sndr'’, ‘'sndt'’, ‘'voc'’,
‘'wav'’, ‘'8svx'’, ‘'sb'’, ‘'ub'’, or ‘'ul'’.  The `sampling_rate' will
be either the actual value or ‘0’ if unknown or difficult to decode.
Similarly, `channels' will be either the number of channels or ‘0’ if it
cannot be determined or if the value is difficult to decode.  The value
for `frames' will be either the number of frames or ‘-1’.  The last item
in the tuple, `bits_per_sample', will either be the sample size in bits
or ‘'A'’ for A-LAW or ‘'U'’ for u-LAW.

 -- Function: sndhdr.what (filename)

     Determines the type of sound data stored in the file `filename'
     using *note whathdr(): 313.  If it succeeds, returns a namedtuple
     as described above, otherwise ‘None’ is returned.

     Changed in version 3.5: Result changed from a tuple to a
     namedtuple.

 -- Function: sndhdr.whathdr (filename)

     Determines the type of sound data stored in a file based on the
     file header.  The name of the file is given by `filename'.  This
     function returns a namedtuple as described above on success, or
     ‘None’.

     Changed in version 3.5: Result changed from a tuple to a
     namedtuple.

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/sndhdr.py


File: python.info,  Node: ossaudiodev --- Access to OSS-compatible audio devices,  Prev: sndhdr --- Determine type of sound file,  Up: Multimedia Services

5.22.9 ‘ossaudiodev’ — Access to OSS-compatible audio devices
-------------------------------------------------------------

This module allows you to access the OSS (Open Sound System) audio
interface.  OSS is available for a wide range of open-source and
commercial Unices, and is the standard audio interface for Linux and
recent versions of FreeBSD.

Changed in version 3.3: Operations in this module now raise *note
OSError: 4b6. where *note IOError: 5b0. was raised.

See also
........

Open Sound System Programmer’s Guide(1)

     the official documentation for the OSS C API

The module defines a large number of constants supplied by the OSS
device driver; see ‘<sys/soundcard.h>’ on either Linux or FreeBSD for a
listing.

*note ossaudiodev: c4. defines the following variables and functions:

 -- Exception: ossaudiodev.OSSAudioError

     This exception is raised on certain errors.  The argument is a
     string describing what went wrong.

     (If *note ossaudiodev: c4. receives an error from a system call
     such as ‘open()’, ‘write()’, or ‘ioctl()’, it raises *note OSError:
     4b6.  Errors detected directly by *note ossaudiodev: c4. result in
     *note OSSAudioError: 28c5.)

     (For backwards compatibility, the exception class is also available
     as ‘ossaudiodev.error’.)

 -- Function: ossaudiodev.open (mode)

 -- Function: ossaudiodev.open (device, mode)

     Open an audio device and return an OSS audio device object.  This
     object supports many file-like methods, such as ‘read()’,
     ‘write()’, and ‘fileno()’ (although there are subtle differences
     between conventional Unix read/write semantics and those of OSS
     audio devices).  It also supports a number of audio-specific
     methods; see below for the complete list of methods.

     `device' is the audio device filename to use.  If it is not
     specified, this module first looks in the environment variable
     ‘AUDIODEV’ for a device to use.  If not found, it falls back to
     ‘/dev/dsp’.

     `mode' is one of ‘'r'’ for read-only (record) access, ‘'w'’ for
     write-only (playback) access and ‘'rw'’ for both.  Since many sound
     cards only allow one process to have the recorder or player open at
     a time, it is a good idea to open the device only for the activity
     needed.  Further, some sound cards are half-duplex: they can be
     opened for reading or writing, but not both at once.

     Note the unusual calling syntax: the `first' argument is optional,
     and the second is required.  This is a historical artifact for
     compatibility with the older ‘linuxaudiodev’ module which *note
     ossaudiodev: c4. supersedes.

 -- Function: ossaudiodev.openmixer ([device])

     Open a mixer device and return an OSS mixer device object.
     `device' is the mixer device filename to use.  If it is not
     specified, this module first looks in the environment variable
     ‘MIXERDEV’ for a device to use.  If not found, it falls back to
     ‘/dev/mixer’.

* Menu:

* Audio Device Objects:: 
* Mixer Device Objects:: 

   ---------- Footnotes ----------

   (1) http://www.opensound.com/pguide/oss.pdf


File: python.info,  Node: Audio Device Objects,  Next: Mixer Device Objects,  Up: ossaudiodev --- Access to OSS-compatible audio devices

5.22.9.1 Audio Device Objects
.............................

Before you can write to or read from an audio device, you must call
three methods in the correct order:

  1. ‘setfmt()’ to set the output format

  2. ‘channels()’ to set the number of channels

  3. ‘speed()’ to set the sample rate

Alternately, you can use the ‘setparameters()’ method to set all three
audio parameters at once.  This is more convenient, but may not be as
flexible in all cases.

The audio device objects returned by *note open(): 28c6. define the
following methods and (read-only) attributes:

 -- Method: oss_audio_device.close ()

     Explicitly close the audio device.  When you are done writing to or
     reading from an audio device, you should explicitly close it.  A
     closed device cannot be used again.

 -- Method: oss_audio_device.fileno ()

     Return the file descriptor associated with the device.

 -- Method: oss_audio_device.read (size)

     Read `size' bytes from the audio input and return them as a Python
     string.  Unlike most Unix device drivers, OSS audio devices in
     blocking mode (the default) will block *note read(): 28cc. until
     the entire requested amount of data is available.

 -- Method: oss_audio_device.write (data)

     Write a *note bytes-like object: 36b. `data' to the audio device
     and return the number of bytes written.  If the audio device is in
     blocking mode (the default), the entire data is always written
     (again, this is different from usual Unix device semantics).  If
     the device is in non-blocking mode, some data may not be written
     —see *note writeall(): 28ce.

     Changed in version 3.5: Writable *note bytes-like object: 36b. is
     now accepted.

 -- Method: oss_audio_device.writeall (data)

     Write a *note bytes-like object: 36b. `data' to the audio device:
     waits until the audio device is able to accept data, writes as much
     data as it will accept, and repeats until `data' has been
     completely written.  If the device is in blocking mode (the
     default), this has the same effect as *note write(): 28cd.; *note
     writeall(): 28ce. is only useful in non-blocking mode.  Has no
     return value, since the amount of data written is always equal to
     the amount of data supplied.

     Changed in version 3.5: Writable *note bytes-like object: 36b. is
     now accepted.

Changed in version 3.2: Audio device objects also support the context
management protocol, i.e.  they can be used in a *note with: 29d.
statement.

The following methods each map to exactly one ‘ioctl()’ system call.
The correspondence is obvious: for example, ‘setfmt()’ corresponds to
the ‘SNDCTL_DSP_SETFMT’ ioctl, and ‘sync()’ to ‘SNDCTL_DSP_SYNC’ (this
can be useful when consulting the OSS documentation).  If the underlying
‘ioctl()’ fails, they all raise *note OSError: 4b6.

 -- Method: oss_audio_device.nonblock ()

     Put the device into non-blocking mode.  Once in non-blocking mode,
     there is no way to return it to blocking mode.

 -- Method: oss_audio_device.getfmts ()

     Return a bitmask of the audio output formats supported by the
     soundcard.  Some of the formats supported by OSS are:

     Format                        Description
                                   
     --------------------------------------------------------------------------------
                                   
     ‘AFMT_MU_LAW’                 a logarithmic encoding (used by Sun ‘.au’ files
                                   and ‘/dev/audio’)
                                   
                                   
     ‘AFMT_A_LAW’                  a logarithmic encoding
                                   
                                   
     ‘AFMT_IMA_ADPCM’              a 4:1 compressed format defined by the
                                   Interactive Multimedia Association
                                   
                                   
     ‘AFMT_U8’                     Unsigned, 8-bit audio
                                   
                                   
     ‘AFMT_S16_LE’                 Signed, 16-bit audio, little-endian byte order
                                   (as used by Intel processors)
                                   
                                   
     ‘AFMT_S16_BE’                 Signed, 16-bit audio, big-endian byte order (as
                                   used by 68k, PowerPC, Sparc)
                                   
                                   
     ‘AFMT_S8’                     Signed, 8 bit audio
                                   
                                   
     ‘AFMT_U16_LE’                 Unsigned, 16-bit little-endian audio
                                   
                                   
     ‘AFMT_U16_BE’                 Unsigned, 16-bit big-endian audio
                                   

     Consult the OSS documentation for a full list of audio formats, and
     note that most devices support only a subset of these formats.
     Some older devices only support ‘AFMT_U8’; the most common format
     used today is ‘AFMT_S16_LE’.

 -- Method: oss_audio_device.setfmt (format)

     Try to set the current audio format to `format'—see *note
     getfmts(): 28d0. for a list.  Returns the audio format that the
     device was set to, which may not be the requested format.  May also
     be used to return the current audio format—do this by passing an
     "audio format" of ‘AFMT_QUERY’.

 -- Method: oss_audio_device.channels (nchannels)

     Set the number of output channels to `nchannels'.  A value of 1
     indicates monophonic sound, 2 stereophonic.  Some devices may have
     more than 2 channels, and some high-end devices may not support
     mono.  Returns the number of channels the device was set to.

 -- Method: oss_audio_device.speed (samplerate)

     Try to set the audio sampling rate to `samplerate' samples per
     second.  Returns the rate actually set.  Most sound devices don’t
     support arbitrary sampling rates.  Common rates are:

     Rate        Description
                 
     ------------------------------------------------------------
                 
     8000        default rate for ‘/dev/audio’
                 
                 
     11025       speech recording
                 
                 
     22050

     44100       CD quality audio (at 16 bits/sample and 2
                 channels)
                 
                 
     96000       DVD quality audio (at 24 bits/sample)
                 

 -- Method: oss_audio_device.sync ()

     Wait until the sound device has played every byte in its buffer.
     (This happens implicitly when the device is closed.)  The OSS
     documentation recommends closing and re-opening the device rather
     than using *note sync(): 28d4.

 -- Method: oss_audio_device.reset ()

     Immediately stop playing or recording and return the device to a
     state where it can accept commands.  The OSS documentation
     recommends closing and re-opening the device after calling *note
     reset(): 28d5.

 -- Method: oss_audio_device.post ()

     Tell the driver that there is likely to be a pause in the output,
     making it possible for the device to handle the pause more
     intelligently.  You might use this after playing a spot sound
     effect, before waiting for user input, or before doing disk I/O.

The following convenience methods combine several ioctls, or one ioctl
and some simple calculations.

 -- Method: oss_audio_device.setparameters (format, nchannels,
          samplerate[, strict=False])

     Set the key audio sampling parameters—sample format, number of
     channels, and sampling rate—in one method call.  `format',
     `nchannels', and `samplerate' should be as specified in the *note
     setfmt(): 28d1, *note channels(): 28d2, and *note speed(): 28d3.
     methods.  If `strict' is true, *note setparameters(): 28d7. checks
     to see if each parameter was actually set to the requested value,
     and raises *note OSSAudioError: 28c5. if not.  Returns a tuple
     (`format', `nchannels', `samplerate') indicating the parameter
     values that were actually set by the device driver (i.e., the same
     as the return values of *note setfmt(): 28d1, *note channels():
     28d2, and *note speed(): 28d3.).

     For example,

          (fmt, channels, rate) = dsp.setparameters(fmt, channels, rate)

     is equivalent to

          fmt = dsp.setfmt(fmt)
          channels = dsp.channels(channels)
          rate = dsp.rate(rate)

 -- Method: oss_audio_device.bufsize ()

     Returns the size of the hardware buffer, in samples.

 -- Method: oss_audio_device.obufcount ()

     Returns the number of samples that are in the hardware buffer yet
     to be played.

 -- Method: oss_audio_device.obuffree ()

     Returns the number of samples that could be queued into the
     hardware buffer to be played without blocking.

Audio device objects also support several read-only attributes:

 -- Attribute: oss_audio_device.closed

     Boolean indicating whether the device has been closed.

 -- Attribute: oss_audio_device.name

     String containing the name of the device file.

 -- Attribute: oss_audio_device.mode

     The I/O mode for the file, either ‘"r"’, ‘"rw"’, or ‘"w"’.


File: python.info,  Node: Mixer Device Objects,  Prev: Audio Device Objects,  Up: ossaudiodev --- Access to OSS-compatible audio devices

5.22.9.2 Mixer Device Objects
.............................

The mixer object provides two file-like methods:

 -- Method: oss_mixer_device.close ()

     This method closes the open mixer device file.  Any further
     attempts to use the mixer after this file is closed will raise an
     *note OSError: 4b6.

 -- Method: oss_mixer_device.fileno ()

     Returns the file handle number of the open mixer device file.

Changed in version 3.2: Mixer objects also support the context
management protocol.

The remaining methods are specific to audio mixing:

 -- Method: oss_mixer_device.controls ()

     This method returns a bitmask specifying the available mixer
     controls ("Control" being a specific mixable "channel", such as
     ‘SOUND_MIXER_PCM’ or ‘SOUND_MIXER_SYNTH’).  This bitmask indicates
     a subset of all available mixer controls—the ‘SOUND_MIXER_*’
     constants defined at module level.  To determine if, for example,
     the current mixer object supports a PCM mixer, use the following
     Python code:

          mixer=ossaudiodev.openmixer()
          if mixer.controls() & (1 << ossaudiodev.SOUND_MIXER_PCM):
              # PCM is supported
              ... code ...

     For most purposes, the ‘SOUND_MIXER_VOLUME’ (master volume) and
     ‘SOUND_MIXER_PCM’ controls should suffice—but code that uses the
     mixer should be flexible when it comes to choosing mixer controls.
     On the Gravis Ultrasound, for example, ‘SOUND_MIXER_VOLUME’ does
     not exist.

 -- Method: oss_mixer_device.stereocontrols ()

     Returns a bitmask indicating stereo mixer controls.  If a bit is
     set, the corresponding control is stereo; if it is unset, the
     control is either monophonic or not supported by the mixer (use in
     combination with *note controls(): 28e2. to determine which).

     See the code example for the *note controls(): 28e2. function for
     an example of getting data from a bitmask.

 -- Method: oss_mixer_device.reccontrols ()

     Returns a bitmask specifying the mixer controls that may be used to
     record.  See the code example for *note controls(): 28e2. for an
     example of reading from a bitmask.

 -- Method: oss_mixer_device.get (control)

     Returns the volume of a given mixer control.  The returned volume
     is a 2-tuple ‘(left_volume,right_volume)’.  Volumes are specified
     as numbers from 0 (silent) to 100 (full volume).  If the control is
     monophonic, a 2-tuple is still returned, but both volumes are the
     same.

     Raises *note OSSAudioError: 28c5. if an invalid control is
     specified, or *note OSError: 4b6. if an unsupported control is
     specified.

 -- Method: oss_mixer_device.set (control, (left, right))

     Sets the volume for a given mixer control to ‘(left,right)’.
     ‘left’ and ‘right’ must be ints and between 0 (silent) and 100
     (full volume).  On success, the new volume is returned as a
     2-tuple.  Note that this may not be exactly the same as the volume
     specified, because of the limited resolution of some soundcard’s
     mixers.

     Raises *note OSSAudioError: 28c5. if an invalid mixer control was
     specified, or if the specified volumes were out-of-range.

 -- Method: oss_mixer_device.get_recsrc ()

     This method returns a bitmask indicating which control(s) are
     currently being used as a recording source.

 -- Method: oss_mixer_device.set_recsrc (bitmask)

     Call this function to specify a recording source.  Returns a
     bitmask indicating the new recording source (or sources) if
     successful; raises *note OSError: 4b6. if an invalid source was
     specified.  To set the current recording source to the microphone
     input:

          mixer.setrecsrc (1 << ossaudiodev.SOUND_MIXER_MIC)


File: python.info,  Node: Internationalization,  Next: Program Frameworks,  Prev: Multimedia Services,  Up: The Python Standard Library

5.23 Internationalization
=========================

The modules described in this chapter help you write software that is
independent of language and locale by providing mechanisms for selecting
a language to be used in program messages or by tailoring output to
match local conventions.

The list of modules described in this chapter is:

* Menu:

* gettext: gettext --- Multilingual internationalization services. Multilingual internationalization services
* locale: locale --- Internationalization services. Internationalization services


File: python.info,  Node: gettext --- Multilingual internationalization services,  Next: locale --- Internationalization services,  Up: Internationalization

5.23.1 ‘gettext’ — Multilingual internationalization services
-------------------------------------------------------------

`Source code:' Lib/gettext.py(1)

__________________________________________________________________

The *note gettext: 88. module provides internationalization (I18N) and
localization (L10N) services for your Python modules and applications.
It supports both the GNU ‘gettext’ message catalog API and a higher
level, class-based API that may be more appropriate for Python files.
The interface described below allows you to write your module and
application messages in one natural language, and provide a catalog of
translated messages for running under different natural languages.

Some hints on localizing your Python modules and applications are also
given.

* Menu:

* GNU gettext API:: 
* Class-based API:: 
* Internationalizing your programs and modules:: 
* Acknowledgements: Acknowledgements<9>. 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/gettext.py


File: python.info,  Node: GNU gettext API,  Next: Class-based API,  Up: gettext --- Multilingual internationalization services

5.23.1.1 GNU ‘gettext’ API
..........................

The *note gettext: 88. module defines the following API, which is very
similar to the GNU ‘gettext’ API. If you use this API you will affect
the translation of your entire application globally.  Often this is what
you want if your application is monolingual, with the choice of language
dependent on the locale of your user.  If you are localizing a Python
module, or if your application needs to switch languages on the fly, you
probably want to use the class-based API instead.

 -- Function: gettext.bindtextdomain (domain, localedir=None)

     Bind the `domain' to the locale directory `localedir'.  More
     concretely, *note gettext: 88. will look for binary ‘.mo’ files for
     the given domain using the path (on Unix):
     ‘localedir/language/LC_MESSAGES/domain.mo’, where `languages' is
     searched for in the environment variables ‘LANGUAGE’, ‘LC_ALL’,
     ‘LC_MESSAGES’, and ‘LANG’ respectively.

     If `localedir' is omitted or ‘None’, then the current binding for
     `domain' is returned.  (1)

 -- Function: gettext.bind_textdomain_codeset (domain, codeset=None)

     Bind the `domain' to `codeset', changing the encoding of strings
     returned by the *note gettext(): 88. family of functions.  If
     `codeset' is omitted, then the current binding is returned.

 -- Function: gettext.textdomain (domain=None)

     Change or query the current global domain.  If `domain' is ‘None’,
     then the current global domain is returned, otherwise the global
     domain is set to `domain', which is returned.

 -- Function: gettext.gettext (message)

     Return the localized translation of `message', based on the current
     global domain, language, and locale directory.  This function is
     usually aliased as ‘_()’ in the local namespace (see examples
     below).

 -- Function: gettext.lgettext (message)

     Equivalent to *note gettext(): 88, but the translation is returned
     in the preferred system encoding, if no other encoding was
     explicitly set with *note bind_textdomain_codeset(): 28f0.

 -- Function: gettext.dgettext (domain, message)

     Like *note gettext(): 88, but look the message up in the specified
     `domain'.

 -- Function: gettext.ldgettext (domain, message)

     Equivalent to *note dgettext(): 28f3, but the translation is
     returned in the preferred system encoding, if no other encoding was
     explicitly set with *note bind_textdomain_codeset(): 28f0.

 -- Function: gettext.ngettext (singular, plural, n)

     Like *note gettext(): 88, but consider plural forms.  If a
     translation is found, apply the plural formula to `n', and return
     the resulting message (some languages have more than two plural
     forms).  If no translation is found, return `singular' if `n' is 1;
     return `plural' otherwise.

     The Plural formula is taken from the catalog header.  It is a C or
     Python expression that has a free variable `n'; the expression
     evaluates to the index of the plural in the catalog.  See the GNU
     gettext documentation(2) for the precise syntax to be used in ‘.po’
     files and the formulas for a variety of languages.

 -- Function: gettext.lngettext (singular, plural, n)

     Equivalent to *note ngettext(): 28f5, but the translation is
     returned in the preferred system encoding, if no other encoding was
     explicitly set with *note bind_textdomain_codeset(): 28f0.

 -- Function: gettext.dngettext (domain, singular, plural, n)

     Like *note ngettext(): 28f5, but look the message up in the
     specified `domain'.

 -- Function: gettext.ldngettext (domain, singular, plural, n)

     Equivalent to *note dngettext(): 28f7, but the translation is
     returned in the preferred system encoding, if no other encoding was
     explicitly set with *note bind_textdomain_codeset(): 28f0.

Note that GNU ‘gettext’ also defines a ‘dcgettext()’ method, but this
was deemed not useful and so it is currently unimplemented.

Here’s an example of typical usage for this API:

     import gettext
     gettext.bindtextdomain('myapplication', '/path/to/my/language/directory')
     gettext.textdomain('myapplication')
     _ = gettext.gettext
     # ...
     print(_('This is a translatable string.'))

   ---------- Footnotes ----------

   (1) The default locale directory is system dependent; for example, on
RedHat Linux it is ‘/usr/share/locale’, but on Solaris it is
‘/usr/lib/locale’.  The *note gettext: 88. module does not try to
support these system dependent defaults; instead its default is
‘sys.prefix/share/locale’.  For this reason, it is always best to call
*note bindtextdomain(): 28ef. with an explicit absolute path at the
start of your application.

   (2) https://www.gnu.org/software/gettext/manual/gettext.html


File: python.info,  Node: Class-based API,  Next: Internationalizing your programs and modules,  Prev: GNU gettext API,  Up: gettext --- Multilingual internationalization services

5.23.1.2 Class-based API
........................

The class-based API of the *note gettext: 88. module gives you more
flexibility and greater convenience than the GNU ‘gettext’ API. It is
the recommended way of localizing your Python applications and modules.
*note gettext: 88. defines a "translations" class which implements the
parsing of GNU ‘.mo’ format files, and has methods for returning
strings.  Instances of this "translations" class can also install
themselves in the built-in namespace as the function ‘_()’.

 -- Function: gettext.find (domain, localedir=None, languages=None,
          all=False)

     This function implements the standard ‘.mo’ file search algorithm.
     It takes a `domain', identical to what *note textdomain(): 28f1.
     takes.  Optional `localedir' is as in *note bindtextdomain(): 28ef.
     Optional `languages' is a list of strings, where each string is a
     language code.

     If `localedir' is not given, then the default system locale
     directory is used.  (1) If `languages' is not given, then the
     following environment variables are searched: ‘LANGUAGE’, ‘LC_ALL’,
     ‘LC_MESSAGES’, and ‘LANG’.  The first one returning a non-empty
     value is used for the `languages' variable.  The environment
     variables should contain a colon separated list of languages, which
     will be split on the colon to produce the expected list of language
     code strings.

     *note find(): 28fa. then expands and normalizes the languages, and
     then iterates through them, searching for an existing file built of
     these components:

     ‘`localedir'/`language'/LC_MESSAGES/`domain'.mo’

     The first such file name that exists is returned by *note find():
     28fa.  If no such file is found, then ‘None’ is returned.  If `all'
     is given, it returns a list of all file names, in the order in
     which they appear in the languages list or the environment
     variables.

 -- Function: gettext.translation (domain, localedir=None,
          languages=None, class_=None, fallback=False, codeset=None)

     Return a ‘Translations’ instance based on the `domain',
     `localedir', and `languages', which are first passed to *note
     find(): 28fa. to get a list of the associated ‘.mo’ file paths.
     Instances with identical ‘.mo’ file names are cached.  The actual
     class instantiated is either `class_' if provided, otherwise
     ‘GNUTranslations’.  The class’s constructor must take a single
     *note file object: 78b. argument.  If provided, `codeset' will
     change the charset used to encode translated strings in the *note
     lgettext(): 28f2. and *note lngettext(): 28f6. methods.

     If multiple files are found, later files are used as fallbacks for
     earlier ones.  To allow setting the fallback, *note copy.copy():
     136a. is used to clone each translation object from the cache; the
     actual instance data is still shared with the cache.

     If no ‘.mo’ file is found, this function raises *note OSError: 4b6.
     if `fallback' is false (which is the default), and returns a *note
     NullTranslations: 28fc. instance if `fallback' is true.

     Changed in version 3.3: *note IOError: 5b0. used to be raised
     instead of *note OSError: 4b6.

 -- Function: gettext.install (domain, localedir=None, codeset=None,
          names=None)

     This installs the function ‘_()’ in Python’s builtins namespace,
     based on `domain', `localedir', and `codeset' which are passed to
     the function *note translation(): 28fb.

     For the `names' parameter, please see the description of the
     translation object’s *note install(): 28fe. method.

     As seen below, you usually mark the strings in your application
     that are candidates for translation, by wrapping them in a call to
     the ‘_()’ function, like this:

          print(_('This string will be translated.'))

     For convenience, you want the ‘_()’ function to be installed in
     Python’s builtins namespace, so it is easily accessible in all
     modules of your application.

* Menu:

* The NullTranslations class:: 
* The GNUTranslations class:: 
* Solaris message catalog support:: 
* The Catalog constructor:: 

   ---------- Footnotes ----------

   (1) See the footnote for *note bindtextdomain(): 28ef. above.


File: python.info,  Node: The NullTranslations class,  Next: The GNUTranslations class,  Up: Class-based API

5.23.1.3 The ‘NullTranslations’ class
.....................................

Translation classes are what actually implement the translation of
original source file message strings to translated message strings.  The
base class used by all translation classes is *note NullTranslations:
28fc.; this provides the basic interface you can use to write your own
specialized translation classes.  Here are the methods of *note
NullTranslations: 28fc.:

 -- Class: gettext.NullTranslations (fp=None)

     Takes an optional *note file object: 78b. `fp', which is ignored by
     the base class.  Initializes "protected" instance variables `_info'
     and `_charset' which are set by derived classes, as well as
     `_fallback', which is set through *note add_fallback(): 2900.  It
     then calls ‘self._parse(fp)’ if `fp' is not ‘None’.

      -- Method: _parse (fp)

          No-op’d in the base class, this method takes file object `fp',
          and reads the data from the file, initializing its message
          catalog.  If you have an unsupported message catalog file
          format, you should override this method to parse your format.

      -- Method: add_fallback (fallback)

          Add `fallback' as the fallback object for the current
          translation object.  A translation object should consult the
          fallback if it cannot provide a translation for a given
          message.

      -- Method: gettext (message)

          If a fallback has been set, forward *note gettext(): 88. to
          the fallback.  Otherwise, return the translated message.
          Overridden in derived classes.

      -- Method: lgettext (message)

          If a fallback has been set, forward *note lgettext(): 28f2. to
          the fallback.  Otherwise, return the translated message.
          Overridden in derived classes.

      -- Method: ngettext (singular, plural, n)

          If a fallback has been set, forward *note ngettext(): 28f5. to
          the fallback.  Otherwise, return the translated message.
          Overridden in derived classes.

      -- Method: lngettext (singular, plural, n)

          If a fallback has been set, forward *note lngettext(): 28f6.
          to the fallback.  Otherwise, return the translated message.
          Overridden in derived classes.

      -- Method: info ()

          Return the "protected" ‘_info’ variable.

      -- Method: charset ()

          Return the "protected" ‘_charset’ variable, which is the
          encoding of the message catalog file.

      -- Method: output_charset ()

          Return the "protected" ‘_output_charset’ variable, which
          defines the encoding used to return translated messages in
          *note lgettext(): 28f2. and *note lngettext(): 28f6.

      -- Method: set_output_charset (charset)

          Change the "protected" ‘_output_charset’ variable, which
          defines the encoding used to return translated messages.

      -- Method: install (names=None)

          This method installs ‘self.gettext()’ into the built-in
          namespace, binding it to ‘_’.

          If the `names' parameter is given, it must be a sequence
          containing the names of functions you want to install in the
          builtins namespace in addition to ‘_()’.  Supported names are
          ‘'gettext'’ (bound to ‘self.gettext()’), ‘'ngettext'’ (bound
          to ‘self.ngettext()’), ‘'lgettext'’ and ‘'lngettext'’.

          Note that this is only one way, albeit the most convenient
          way, to make the ‘_()’ function available to your application.
          Because it affects the entire application globally, and
          specifically the built-in namespace, localized modules should
          never install ‘_()’.  Instead, they should use this code to
          make ‘_()’ available to their module:

               import gettext
               t = gettext.translation('mymodule', ...)
               _ = t.gettext

          This puts ‘_()’ only in the module’s global namespace and so
          only affects calls within this module.


File: python.info,  Node: The GNUTranslations class,  Next: Solaris message catalog support,  Prev: The NullTranslations class,  Up: Class-based API

5.23.1.4 The ‘GNUTranslations’ class
....................................

The *note gettext: 88. module provides one additional class derived from
*note NullTranslations: 28fc.: ‘GNUTranslations’.  This class overrides
‘_parse()’ to enable reading GNU ‘gettext’ format ‘.mo’ files in both
big-endian and little-endian format.

‘GNUTranslations’ parses optional meta-data out of the translation
catalog.  It is convention with GNU ‘gettext’ to include meta-data as
the translation for the empty string.  This meta-data is in RFC
822(1)-style ‘key: value’ pairs, and should contain the
‘Project-Id-Version’ key.  If the key ‘Content-Type’ is found, then the
‘charset’ property is used to initialize the "protected" ‘_charset’
instance variable, defaulting to ‘None’ if not found.  If the charset
encoding is specified, then all message ids and message strings read
from the catalog are converted to Unicode using this encoding, else
ASCII encoding is assumed.

Since message ids are read as Unicode strings too, all ‘*gettext()’
methods will assume message ids as Unicode strings, not byte strings.

The entire set of key/value pairs are placed into a dictionary and set
as the "protected" ‘_info’ instance variable.

If the ‘.mo’ file’s magic number is invalid, the major version number is
unexpected, or if other problems occur while reading the file,
instantiating a ‘GNUTranslations’ class can raise *note OSError: 4b6.

The following methods are overridden from the base class implementation:

 -- Method: GNUTranslations.gettext (message)

     Look up the `message' id in the catalog and return the
     corresponding message string, as a Unicode string.  If there is no
     entry in the catalog for the `message' id, and a fallback has been
     set, the look up is forwarded to the fallback’s *note gettext():
     88. method.  Otherwise, the `message' id is returned.

 -- Method: GNUTranslations.lgettext (message)

     Equivalent to *note gettext(): 88, but the translation is returned
     as a bytestring encoded in the selected output charset, or in the
     preferred system encoding if no encoding was explicitly set with
     ‘set_output_charset()’.

 -- Method: GNUTranslations.ngettext (singular, plural, n)

     Do a plural-forms lookup of a message id.  `singular' is used as
     the message id for purposes of lookup in the catalog, while `n' is
     used to determine which plural form to use.  The returned message
     string is a Unicode string.

     If the message id is not found in the catalog, and a fallback is
     specified, the request is forwarded to the fallback’s *note
     ngettext(): 28f5. method.  Otherwise, when `n' is 1 `singular' is
     returned, and `plural' is returned in all other cases.

     Here is an example:

          n = len(os.listdir('.'))
          cat = GNUTranslations(somefile)
          message = cat.ngettext(
              'There is %(num)d file in this directory',
              'There are %(num)d files in this directory',
              n) % {'num': n}

 -- Method: GNUTranslations.lngettext (singular, plural, n)

     Equivalent to *note gettext(): 88, but the translation is returned
     as a bytestring encoded in the selected output charset, or in the
     preferred system encoding if no encoding was explicitly set with
     ‘set_output_charset()’.

   ---------- Footnotes ----------

   (1) https://tools.ietf.org/html/rfc822.html


File: python.info,  Node: Solaris message catalog support,  Next: The Catalog constructor,  Prev: The GNUTranslations class,  Up: Class-based API

5.23.1.5 Solaris message catalog support
........................................

The Solaris operating system defines its own binary ‘.mo’ file format,
but since no documentation can be found on this format, it is not
supported at this time.


File: python.info,  Node: The Catalog constructor,  Prev: Solaris message catalog support,  Up: Class-based API

5.23.1.6 The Catalog constructor
................................

GNOME uses a version of the *note gettext: 88. module by James
Henstridge, but this version has a slightly different API. Its
documented usage was:

     import gettext
     cat = gettext.Catalog(domain, localedir)
     _ = cat.gettext
     print(_('hello world'))

For compatibility with this older module, the function ‘Catalog()’ is an
alias for the *note translation(): 28fb. function described above.

One difference between this module and Henstridge’s: his catalog objects
supported access through a mapping API, but this appears to be unused
and so is not currently supported.


File: python.info,  Node: Internationalizing your programs and modules,  Next: Acknowledgements<9>,  Prev: Class-based API,  Up: gettext --- Multilingual internationalization services

5.23.1.7 Internationalizing your programs and modules
.....................................................

Internationalization (I18N) refers to the operation by which a program
is made aware of multiple languages.  Localization (L10N) refers to the
adaptation of your program, once internationalized, to the local
language and cultural habits.  In order to provide multilingual messages
for your Python programs, you need to take the following steps:

  1. prepare your program or module by specially marking translatable
     strings

  2. run a suite of tools over your marked files to generate raw
     messages catalogs

  3. create language specific translations of the message catalogs

  4. use the *note gettext: 88. module so that message strings are
     properly translated

In order to prepare your code for I18N, you need to look at all the
strings in your files.  Any string that needs to be translated should be
marked by wrapping it in ‘_('...')’ — that is, a call to the function
‘_()’.  For example:

     filename = 'mylog.txt'
     message = _('writing a log message')
     fp = open(filename, 'w')
     fp.write(message)
     fp.close()

In this example, the string ‘'writing a log message'’ is marked as a
candidate for translation, while the strings ‘'mylog.txt'’ and ‘'w'’ are
not.

There are a few tools to extract the strings meant for translation.  The
original GNU ‘gettext’ only supported C or C++ source code but its
extended version ‘xgettext’ scans code written in a number of languages,
including Python, to find strings marked as translatable.  Babel(1) is a
Python internationalization library that includes a ‘pybabel’ script to
extract and compile message catalogs.  François Pinard’s program called
‘xpot’ does a similar job and is available as part of his po-utils
package(2).

(Python also includes pure-Python versions of these programs, called
‘pygettext.py’ and ‘msgfmt.py’; some Python distributions will install
them for you.  ‘pygettext.py’ is similar to ‘xgettext’, but only
understands Python source code and cannot handle other programming
languages such as C or C++.  ‘pygettext.py’ supports a command-line
interface similar to ‘xgettext’; for details on its use, run
‘pygettext.py --help’.  ‘msgfmt.py’ is binary compatible with GNU
‘msgfmt’.  With these two programs, you may not need the GNU ‘gettext’
package to internationalize your Python applications.)

‘xgettext’, ‘pygettext’, and similar tools generate ‘.po’ files that are
message catalogs.  They are structured human-readable files that contain
every marked string in the source code, along with a placeholder for the
translated versions of these strings.

Copies of these ‘.po’ files are then handed over to the individual human
translators who write translations for every supported natural language.
They send back the completed language-specific versions as a
‘<language-name>.po’ file that’s compiled into a machine-readable ‘.mo’
binary catalog file using the ‘msgfmt’ program.  The ‘.mo’ files are
used by the *note gettext: 88. module for the actual translation
processing at run-time.

How you use the *note gettext: 88. module in your code depends on
whether you are internationalizing a single module or your entire
application.  The next two sections will discuss each case.

* Menu:

* Localizing your module:: 
* Localizing your application:: 
* Changing languages on the fly:: 
* Deferred translations:: 

   ---------- Footnotes ----------

   (1) http://babel.pocoo.org/

   (2) https://github.com/pinard/po-utils


File: python.info,  Node: Localizing your module,  Next: Localizing your application,  Up: Internationalizing your programs and modules

5.23.1.8 Localizing your module
...............................

If you are localizing your module, you must take care not to make global
changes, e.g.  to the built-in namespace.  You should not use the GNU
‘gettext’ API but instead the class-based API.

Let’s say your module is called "spam" and the module’s various natural
language translation ‘.mo’ files reside in ‘/usr/share/locale’ in GNU
‘gettext’ format.  Here’s what you would put at the top of your module:

     import gettext
     t = gettext.translation('spam', '/usr/share/locale')
     _ = t.lgettext


File: python.info,  Node: Localizing your application,  Next: Changing languages on the fly,  Prev: Localizing your module,  Up: Internationalizing your programs and modules

5.23.1.9 Localizing your application
....................................

If you are localizing your application, you can install the ‘_()’
function globally into the built-in namespace, usually in the main
driver file of your application.  This will let all your
application-specific files just use ‘_('...')’ without having to
explicitly install it in each file.

In the simple case then, you need only add the following bit of code to
the main driver file of your application:

     import gettext
     gettext.install('myapplication')

If you need to set the locale directory, you can pass it into the *note
install(): 28fd. function:

     import gettext
     gettext.install('myapplication', '/usr/share/locale')


File: python.info,  Node: Changing languages on the fly,  Next: Deferred translations,  Prev: Localizing your application,  Up: Internationalizing your programs and modules

5.23.1.10 Changing languages on the fly
.......................................

If your program needs to support many languages at the same time, you
may want to create multiple translation instances and then switch
between them explicitly, like so:

     import gettext

     lang1 = gettext.translation('myapplication', languages=['en'])
     lang2 = gettext.translation('myapplication', languages=['fr'])
     lang3 = gettext.translation('myapplication', languages=['de'])

     # start by using language1
     lang1.install()

     # ... time goes by, user selects language 2
     lang2.install()

     # ... more time goes by, user selects language 3
     lang3.install()


File: python.info,  Node: Deferred translations,  Prev: Changing languages on the fly,  Up: Internationalizing your programs and modules

5.23.1.11 Deferred translations
...............................

In most coding situations, strings are translated where they are coded.
Occasionally however, you need to mark strings for translation, but
defer actual translation until later.  A classic example is:

     animals = ['mollusk',
                'albatross',
                'rat',
                'penguin',
                'python', ]
     # ...
     for a in animals:
         print(a)

Here, you want to mark the strings in the ‘animals’ list as being
translatable, but you don’t actually want to translate them until they
are printed.

Here is one way you can handle this situation:

     def _(message): return message

     animals = [_('mollusk'),
                _('albatross'),
                _('rat'),
                _('penguin'),
                _('python'), ]

     del _

     # ...
     for a in animals:
         print(_(a))

This works because the dummy definition of ‘_()’ simply returns the
string unchanged.  And this dummy definition will temporarily override
any definition of ‘_()’ in the built-in namespace (until the *note del:
c30. command).  Take care, though if you have a previous definition of
‘_()’ in the local namespace.

Note that the second use of ‘_()’ will not identify "a" as being
translatable to the ‘gettext’ program, because the parameter is not a
string literal.

Another way to handle this is with the following example:

     def N_(message): return message

     animals = [N_('mollusk'),
                N_('albatross'),
                N_('rat'),
                N_('penguin'),
                N_('python'), ]

     # ...
     for a in animals:
         print(_(a))

In this case, you are marking translatable strings with the function
‘N_()’, which won’t conflict with any definition of ‘_()’.  However, you
will need to teach your message extraction program to look for
translatable strings marked with ‘N_()’.  ‘xgettext’, ‘pygettext’,
‘pybabel extract’, and ‘xpot’ all support this through the use of the
‘-k’ command-line switch.  The choice of ‘N_()’ here is totally
arbitrary; it could have just as easily been
‘MarkThisStringForTranslation()’.


File: python.info,  Node: Acknowledgements<9>,  Prev: Internationalizing your programs and modules,  Up: gettext --- Multilingual internationalization services

5.23.1.12 Acknowledgements
..........................

The following people contributed code, feedback, design suggestions,
previous implementations, and valuable experience to the creation of
this module:

   * Peter Funk

   * James Henstridge

   * Juan David Ibáñez Palomar

   * Marc-André Lemburg

   * Martin von Löwis

   * François Pinard

   * Barry Warsaw

   * Gustavo Niemeyer


File: python.info,  Node: locale --- Internationalization services,  Prev: gettext --- Multilingual internationalization services,  Up: Internationalization

5.23.2 ‘locale’ — Internationalization services
-----------------------------------------------

The *note locale: a7. module opens access to the POSIX locale database
and functionality.  The POSIX locale mechanism allows programmers to
deal with certain cultural issues in an application, without requiring
the programmer to know all the specifics of each country where the
software is executed.

The *note locale: a7. module is implemented on top of the ‘_locale’
module, which in turn uses an ANSI C locale implementation if available.

The *note locale: a7. module defines the following exception and
functions:

 -- Exception: locale.Error

     Exception raised when the locale passed to *note setlocale(): 196a.
     is not recognized.

 -- Function: locale.setlocale (category, locale=None)

     If `locale' is given and not ‘None’, *note setlocale(): 196a.
     modifies the locale setting for the `category'.  The available
     categories are listed in the data description below.  `locale' may
     be a string, or an iterable of two strings (language code and
     encoding).  If it’s an iterable, it’s converted to a locale name
     using the locale aliasing engine.  An empty string specifies the
     user’s default settings.  If the modification of the locale fails,
     the exception *note Error: 2919. is raised.  If successful, the new
     locale setting is returned.

     If `locale' is omitted or ‘None’, the current setting for
     `category' is returned.

     *note setlocale(): 196a. is not thread-safe on most systems.
     Applications typically start with a call of

          import locale
          locale.setlocale(locale.LC_ALL, '')

     This sets the locale for all categories to the user’s default
     setting (typically specified in the ‘LANG’ environment variable).
     If the locale is not changed thereafter, using multithreading
     should not cause problems.

 -- Function: locale.localeconv ()

     Returns the database of the local conventions as a dictionary.
     This dictionary has the following strings as keys:

     Category                   Key                                       Meaning
                                                                          
     ----------------------------------------------------------------------------------------------------------
                                                                          
     *note LC_NUMERIC: 291b.    ‘'decimal_point'’                         Decimal point character.
                                                                          
                                                                          
                                ‘'grouping'’                              Sequence of numbers specifying
                                                                          which relative positions the
                                                                          ‘'thousands_sep'’ is expected.  If
                                                                          the sequence is terminated with
                                                                          *note CHAR_MAX: 291c, no further
                                                                          grouping is performed.  If the
                                                                          sequence terminates with a ‘0’,
                                                                          the last group size is repeatedly
                                                                          used.
                                                                          
                                                                          
                                ‘'thousands_sep'’                         Character used between groups.
                                                                          
                                                                          
     *note LC_MONETARY: 291d.   ‘'int_curr_symbol'’                       International currency symbol.
                                                                          
                                                                          
                                ‘'currency_symbol'’                       Local currency symbol.
                                                                          
                                                                          
                                ‘'p_cs_precedes/n_cs_precedes'’           Whether the currency symbol
                                                                          precedes the value (for positive
                                                                          resp.  negative values).
                                                                          
                                                                          
                                ‘'p_sep_by_space/n_sep_by_space'’         Whether the currency symbol is
                                                                          separated from the value by a
                                                                          space (for positive resp.
                                                                          negative values).
                                                                          
                                                                          
                                ‘'mon_decimal_point'’                     Decimal point used for monetary
                                                                          values.
                                                                          
                                                                          
                                ‘'frac_digits'’                           Number of fractional digits used
                                                                          in local formatting of monetary
                                                                          values.
                                                                          
                                                                          
                                ‘'int_frac_digits'’                       Number of fractional digits used
                                                                          in international formatting of
                                                                          monetary values.
                                                                          
                                                                          
                                ‘'mon_thousands_sep'’                     Group separator used for monetary
                                                                          values.
                                                                          
                                                                          
                                ‘'mon_grouping'’                          Equivalent to ‘'grouping'’, used
                                                                          for monetary values.
                                                                          
                                                                          
                                ‘'positive_sign'’                         Symbol used to annotate a positive
                                                                          monetary value.
                                                                          
                                                                          
                                ‘'negative_sign'’                         Symbol used to annotate a negative
                                                                          monetary value.
                                                                          
                                                                          
                                ‘'p_sign_posn/n_sign_posn'’               The position of the sign (for
                                                                          positive resp.  negative values),
                                                                          see below.
                                                                          

     All numeric values can be set to *note CHAR_MAX: 291c. to indicate
     that there is no value specified in this locale.

     The possible values for ‘'p_sign_posn'’ and ‘'n_sign_posn'’ are
     given below.

     Value              Explanation
                        
     -----------------------------------------------------------------
                        
     ‘0’                Currency and value are surrounded by
                        parentheses.
                        
                        
     ‘1’                The sign should precede the value and
                        currency symbol.
                        
                        
     ‘2’                The sign should follow the value and
                        currency symbol.
                        
                        
     ‘3’                The sign should immediately precede the
                        value.
                        
                        
     ‘4’                The sign should immediately follow the
                        value.
                        
                        
     ‘CHAR_MAX’         Nothing is specified in this locale.
                        

 -- Function: locale.nl_langinfo (option)

     Return some locale-specific information as a string.  This function
     is not available on all systems, and the set of possible options
     might also vary across platforms.  The possible argument values are
     numbers, for which symbolic constants are available in the locale
     module.

     The *note nl_langinfo(): 291e. function accepts one of the
     following keys.  Most descriptions are taken from the corresponding
     description in the GNU C library.

      -- Data: locale.CODESET

          Get a string with the name of the character encoding used in
          the selected locale.

      -- Data: locale.D_T_FMT

          Get a string that can be used as a format string for *note
          time.strftime(): 7b1. to represent date and time in a
          locale-specific way.

      -- Data: locale.D_FMT

          Get a string that can be used as a format string for *note
          time.strftime(): 7b1. to represent a date in a locale-specific
          way.

      -- Data: locale.T_FMT

          Get a string that can be used as a format string for *note
          time.strftime(): 7b1. to represent a time in a locale-specific
          way.

      -- Data: locale.T_FMT_AMPM

          Get a format string for *note time.strftime(): 7b1. to
          represent time in the am/pm format.

      -- Data: DAY_1 ... DAY_7

          Get the name of the n-th day of the week.

               Note: This follows the US convention of ‘DAY_1’ being
               Sunday, not the international convention (ISO 8601) that
               Monday is the first day of the week.

      -- Data: ABDAY_1 ... ABDAY_7

          Get the abbreviated name of the n-th day of the week.

      -- Data: MON_1 ... MON_12

          Get the name of the n-th month.

      -- Data: ABMON_1 ... ABMON_12

          Get the abbreviated name of the n-th month.

      -- Data: locale.RADIXCHAR

          Get the radix character (decimal dot, decimal comma, etc.).

      -- Data: locale.THOUSEP

          Get the separator character for thousands (groups of three
          digits).

      -- Data: locale.YESEXPR

          Get a regular expression that can be used with the regex
          function to recognize a positive response to a yes/no
          question.

               Note: The expression is in the syntax suitable for the
               ‘regex()’ function from the C library, which might differ
               from the syntax used in *note re: db.

      -- Data: locale.NOEXPR

          Get a regular expression that can be used with the regex(3)
          function to recognize a negative response to a yes/no
          question.

      -- Data: locale.CRNCYSTR

          Get the currency symbol, preceded by "-" if the symbol should
          appear before the value, "+" if the symbol should appear after
          the value, or "."  if the symbol should replace the radix
          character.

      -- Data: locale.ERA

          Get a string that represents the era used in the current
          locale.

          Most locales do not define this value.  An example of a locale
          which does define this value is the Japanese one.  In Japan,
          the traditional representation of dates includes the name of
          the era corresponding to the then-emperor’s reign.

          Normally it should not be necessary to use this value
          directly.  Specifying the ‘E’ modifier in their format strings
          causes the *note time.strftime(): 7b1. function to use this
          information.  The format of the returned string is not
          specified, and therefore you should not assume knowledge of it
          on different systems.

      -- Data: locale.ERA_D_T_FMT

          Get a format string for *note time.strftime(): 7b1. to
          represent date and time in a locale-specific era-based way.

      -- Data: locale.ERA_D_FMT

          Get a format string for *note time.strftime(): 7b1. to
          represent a date in a locale-specific era-based way.

      -- Data: locale.ERA_T_FMT

          Get a format string for *note time.strftime(): 7b1. to
          represent a time in a locale-specific era-based way.

      -- Data: locale.ALT_DIGITS

          Get a representation of up to 100 values used to represent the
          values 0 to 99.

 -- Function: locale.getdefaultlocale ([envvars])

     Tries to determine the default locale settings and returns them as
     a tuple of the form ‘(language code, encoding)’.

     According to POSIX, a program which has not called
     ‘setlocale(LC_ALL, '')’ runs using the portable ‘'C'’ locale.
     Calling ‘setlocale(LC_ALL, '')’ lets it use the default locale as
     defined by the ‘LANG’ variable.  Since we do not want to interfere
     with the current locale setting we thus emulate the behavior in the
     way described above.

     To maintain compatibility with other platforms, not only the ‘LANG’
     variable is tested, but a list of variables given as envvars
     parameter.  The first found to be defined will be used.  `envvars'
     defaults to the search path used in GNU gettext; it must always
     contain the variable name ‘'LANG'’.  The GNU gettext search path
     contains ‘'LC_ALL'’, ‘'LC_CTYPE'’, ‘'LANG'’ and ‘'LANGUAGE'’, in
     that order.

     Except for the code ‘'C'’, the language code corresponds to RFC
     1766(1).  `language code' and `encoding' may be ‘None’ if their
     values cannot be determined.

 -- Function: locale.getlocale (category=LC_CTYPE)

     Returns the current setting for the given locale category as
     sequence containing `language code', `encoding'.  `category' may be
     one of the ‘LC_*’ values except *note LC_ALL: 292f.  It defaults to
     *note LC_CTYPE: 2930.

     Except for the code ‘'C'’, the language code corresponds to RFC
     1766(2).  `language code' and `encoding' may be ‘None’ if their
     values cannot be determined.

 -- Function: locale.getpreferredencoding (do_setlocale=True)

     Return the encoding used for text data, according to user
     preferences.  User preferences are expressed differently on
     different systems, and might not be available programmatically on
     some systems, so this function only returns a guess.

     On some systems, it is necessary to invoke *note setlocale(): 196a.
     to obtain the user preferences, so this function is not
     thread-safe.  If invoking setlocale is not necessary or desired,
     `do_setlocale' should be set to ‘False’.

 -- Function: locale.normalize (localename)

     Returns a normalized locale code for the given locale name.  The
     returned locale code is formatted for use with *note setlocale():
     196a.  If normalization fails, the original name is returned
     unchanged.

     If the given encoding is not known, the function defaults to the
     default encoding for the locale code just like *note setlocale():
     196a.

 -- Function: locale.resetlocale (category=LC_ALL)

     Sets the locale for `category' to the default setting.

     The default setting is determined by calling *note
     getdefaultlocale(): 292e.  `category' defaults to *note LC_ALL:
     292f.

 -- Function: locale.strcoll (string1, string2)

     Compares two strings according to the current *note LC_COLLATE:
     2934. setting.  As any other compare function, returns a negative,
     or a positive value, or ‘0’, depending on whether `string1'
     collates before or after `string2' or is equal to it.

 -- Function: locale.strxfrm (string)

     Transforms a string to one that can be used in locale-aware
     comparisons.  For example, ‘strxfrm(s1) < strxfrm(s2)’ is
     equivalent to ‘strcoll(s1, s2) < 0’.  This function can be used
     when the same string is compared repeatedly, e.g.  when collating a
     sequence of strings.

 -- Function: locale.format (format, val, grouping=False,
          monetary=False)

     Formats a number `val' according to the current *note LC_NUMERIC:
     291b. setting.  The format follows the conventions of the ‘%’
     operator.  For floating point values, the decimal point is modified
     if appropriate.  If `grouping' is true, also takes the grouping
     into account.

     If `monetary' is true, the conversion uses monetary thousands
     separator and grouping strings.

     Please note that this function will only work for exactly one %char
     specifier.  For whole format strings, use *note format_string():
     2937.

 -- Function: locale.format_string (format, val, grouping=False)

     Processes formatting specifiers as in ‘format % val’, but takes the
     current locale settings into account.

 -- Function: locale.currency (val, symbol=True, grouping=False,
          international=False)

     Formats a number `val' according to the current *note LC_MONETARY:
     291d. settings.

     The returned string includes the currency symbol if `symbol' is
     true, which is the default.  If `grouping' is true (which is not
     the default), grouping is done with the value.  If `international'
     is true (which is not the default), the international currency
     symbol is used.

     Note that this function will not work with the ’C’ locale, so you
     have to set a locale via *note setlocale(): 196a. first.

 -- Function: locale.str (float)

     Formats a floating point number using the same format as the
     built-in function ‘str(float)’, but takes the decimal point into
     account.

 -- Function: locale.delocalize (string)

     Converts a string into a normalized number string, following the
     *note LC_NUMERIC: 291b. settings.

     New in version 3.5.

 -- Function: locale.atof (string)

     Converts a string to a floating point number, following the *note
     LC_NUMERIC: 291b. settings.

 -- Function: locale.atoi (string)

     Converts a string to an integer, following the *note LC_NUMERIC:
     291b. conventions.

 -- Data: locale.LC_CTYPE

     Locale category for the character type functions.  Depending on the
     settings of this category, the functions of module *note string:
     f4. dealing with case change their behaviour.

 -- Data: locale.LC_COLLATE

     Locale category for sorting strings.  The functions *note
     strcoll(): 2933. and *note strxfrm(): 2935. of the *note locale:
     a7. module are affected.

 -- Data: locale.LC_TIME

     Locale category for the formatting of time.  The function *note
     time.strftime(): 7b1. follows these conventions.

 -- Data: locale.LC_MONETARY

     Locale category for formatting of monetary values.  The available
     options are available from the *note localeconv(): 291a. function.

 -- Data: locale.LC_MESSAGES

     Locale category for message display.  Python currently does not
     support application specific locale-aware messages.  Messages
     displayed by the operating system, like those returned by *note
     os.strerror(): 1873. might be affected by this category.

 -- Data: locale.LC_NUMERIC

     Locale category for formatting numbers.  The functions *note
     format(): 2936, *note atoi(): 293b, *note atof(): 293a. and *note
     str(): 2939. of the *note locale: a7. module are affected by that
     category.  All other numeric formatting operations are not
     affected.

 -- Data: locale.LC_ALL

     Combination of all locale settings.  If this flag is used when the
     locale is changed, setting the locale for all categories is
     attempted.  If that fails for any category, no category is changed
     at all.  When the locale is retrieved using this flag, a string
     indicating the setting for all categories is returned.  This string
     can be later used to restore the settings.

 -- Data: locale.CHAR_MAX

     This is a symbolic constant used for different values returned by
     *note localeconv(): 291a.

Example:

     >>> import locale
     >>> loc = locale.getlocale() # get current locale
     # use German locale; name might vary with platform
     >>> locale.setlocale(locale.LC_ALL, 'de_DE')
     >>> locale.strcoll('f\xe4n', 'foo') # compare a string containing an umlaut
     >>> locale.setlocale(locale.LC_ALL, '') # use user's preferred locale
     >>> locale.setlocale(locale.LC_ALL, 'C') # use default (C) locale
     >>> locale.setlocale(locale.LC_ALL, loc) # restore saved locale

* Menu:

* Background, details, hints, tips and caveats: Background details hints tips and caveats. 
* For extension writers and programs that embed Python:: 
* Access to message catalogs:: 

   ---------- Footnotes ----------

   (1) https://tools.ietf.org/html/rfc1766.html

   (2) https://tools.ietf.org/html/rfc1766.html

