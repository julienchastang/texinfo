This is python.info, produced by makeinfo version 6.0 from python.texi.

     Python 3.6.0a0, May 06, 2016

     Georg Brandl

     Copyright © 2001-2016, Python Software Foundation

INFO-DIR-SECTION Documentation tools
START-INFO-DIR-ENTRY
* Python: (python.info). The Python Programming Language
END-INFO-DIR-ENTRY


   Generated by Sphinx 1.4.1.


File: python.info,  Node: Functions<6>,  Next: Caring about security,  Prev: Higher Level Interface,  Up: cgi --- Common Gateway Interface support

5.21.2.4 Functions
..................

These are useful if you want more control, or if you want to employ some
of the algorithms implemented in this module in other circumstances.

 -- Function: cgi.parse (fp=None, environ=os.environ,
          keep_blank_values=False, strict_parsing=False)

     Parse a query in the environment or from a file (the file defaults
     to ‘sys.stdin’).  The `keep_blank_values' and `strict_parsing'
     parameters are passed to *note urllib.parse.parse_qs(): 2492.
     unchanged.

 -- Function: cgi.parse_qs (qs, keep_blank_values=False,
          strict_parsing=False)

     This function is deprecated in this module.  Use *note
     urllib.parse.parse_qs(): 2492. instead.  It is maintained here only
     for backward compatibility.

 -- Function: cgi.parse_qsl (qs, keep_blank_values=False,
          strict_parsing=False)

     This function is deprecated in this module.  Use *note
     urllib.parse.parse_qsl(): 2495. instead.  It is maintained here
     only for backward compatibility.

 -- Function: cgi.parse_multipart (fp, pdict)

     Parse input of type ‘multipart/form-data’ (for file uploads).
     Arguments are `fp' for the input file and `pdict' for a dictionary
     containing other parameters in the ‘Content-Type’ header.

     Returns a dictionary just like *note urllib.parse.parse_qs(): 2492.
     keys are the field names, each value is a list of values for that
     field.  This is easy to use but not much good if you are expecting
     megabytes to be uploaded — in that case, use the ‘FieldStorage’
     class instead which is much more flexible.

     Note that this does not parse nested multipart parts — use
     ‘FieldStorage’ for that.

 -- Function: cgi.parse_header (string)

     Parse a MIME header (such as ‘Content-Type’) into a main value and
     a dictionary of parameters.

 -- Function: cgi.test ()

     Robust test CGI script, usable as main program.  Writes minimal
     HTTP headers and formats all information provided to the script in
     HTML form.

 -- Function: cgi.print_environ ()

     Format the shell environment in HTML.

 -- Function: cgi.print_form (form)

     Format a form in HTML.

 -- Function: cgi.print_directory ()

     Format the current directory in HTML.

 -- Function: cgi.print_environ_usage ()

     Print a list of useful (used by CGI) environment variables in HTML.

 -- Function: cgi.escape (s, quote=False)

     Convert the characters ‘'&'’, ‘'<'’ and ‘'>'’ in string `s' to
     HTML-safe sequences.  Use this if you need to display text that
     might contain such characters in HTML. If the optional flag `quote'
     is true, the quotation mark character (‘"’) is also translated;
     this helps for inclusion in an HTML attribute value delimited by
     double quotes, as in ‘<a href="...">’.  Note that single quotes are
     never translated.

     Deprecated since version 3.2: This function is unsafe because
     `quote' is false by default, and therefore deprecated.  Use *note
     html.escape(): 53c. instead.


File: python.info,  Node: Caring about security,  Next: Installing your CGI script on a Unix system,  Prev: Functions<6>,  Up: cgi --- Common Gateway Interface support

5.21.2.5 Caring about security
..............................

There’s one important rule: if you invoke an external program (via the
*note os.system(): a3d. or *note os.popen(): 7d7. functions.  or others
with similar functionality), make very sure you don’t pass arbitrary
strings received from the client to the shell.  This is a well-known
security hole whereby clever hackers anywhere on the Web can exploit a
gullible CGI script to invoke arbitrary shell commands.  Even parts of
the URL or field names cannot be trusted, since the request doesn’t have
to come from your form!

To be on the safe side, if you must pass a string gotten from a form to
a shell command, you should make sure the string contains only
alphanumeric characters, dashes, underscores, and periods.


File: python.info,  Node: Installing your CGI script on a Unix system,  Next: Testing your CGI script,  Prev: Caring about security,  Up: cgi --- Common Gateway Interface support

5.21.2.6 Installing your CGI script on a Unix system
....................................................

Read the documentation for your HTTP server and check with your local
system administrator to find the directory where CGI scripts should be
installed; usually this is in a directory ‘cgi-bin’ in the server tree.

Make sure that your script is readable and executable by "others"; the
Unix file mode should be ‘0o755’ octal (use ‘chmod 0755 filename’).
Make sure that the first line of the script contains ‘#!’ starting in
column 1 followed by the pathname of the Python interpreter, for
instance:

     #!/usr/local/bin/python

Make sure the Python interpreter exists and is executable by "others".

Make sure that any files your script needs to read or write are readable
or writable, respectively, by "others" — their mode should be ‘0o644’
for readable and ‘0o666’ for writable.  This is because, for security
reasons, the HTTP server executes your script as user "nobody", without
any special privileges.  It can only read (write, execute) files that
everybody can read (write, execute).  The current directory at execution
time is also different (it is usually the server’s cgi-bin directory)
and the set of environment variables is also different from what you get
when you log in.  In particular, don’t count on the shell’s search path
for executables ( ‘PATH’) or the Python module search path ( *note
PYTHONPATH: 567.) to be set to anything interesting.

If you need to load modules from a directory which is not on Python’s
default module search path, you can change the path in your script,
before importing other modules.  For example:

     import sys
     sys.path.insert(0, "/usr/home/joe/lib/python")
     sys.path.insert(0, "/usr/local/lib/python")

(This way, the directory inserted last will be searched first!)

Instructions for non-Unix systems will vary; check your HTTP server’s
documentation (it will usually have a section on CGI scripts).


File: python.info,  Node: Testing your CGI script,  Next: Debugging CGI scripts,  Prev: Installing your CGI script on a Unix system,  Up: cgi --- Common Gateway Interface support

5.21.2.7 Testing your CGI script
................................

Unfortunately, a CGI script will generally not run when you try it from
the command line, and a script that works perfectly from the command
line may fail mysteriously when run from the server.  There’s one reason
why you should still test your script from the command line: if it
contains a syntax error, the Python interpreter won’t execute it at all,
and the HTTP server will most likely send a cryptic error to the client.

Assuming your script has no syntax errors, yet it does not work, you
have no choice but to read the next section.


File: python.info,  Node: Debugging CGI scripts,  Next: Common problems and solutions,  Prev: Testing your CGI script,  Up: cgi --- Common Gateway Interface support

5.21.2.8 Debugging CGI scripts
..............................

First of all, check for trivial installation errors — reading the
section above on installing your CGI script carefully can save you a lot
of time.  If you wonder whether you have understood the installation
procedure correctly, try installing a copy of this module file
(‘cgi.py’) as a CGI script.  When invoked as a script, the file will
dump its environment and the contents of the form in HTML form.  Give it
the right mode etc, and send it a request.  If it’s installed in the
standard ‘cgi-bin’ directory, it should be possible to send it a request
by entering a URL into your browser of the form:

     http://yourhostname/cgi-bin/cgi.py?name=Joe+Blow&addr=At+Home

If this gives an error of type 404, the server cannot find the script –
perhaps you need to install it in a different directory.  If it gives
another error, there’s an installation problem that you should fix
before trying to go any further.  If you get a nicely formatted listing
of the environment and form content (in this example, the fields should
be listed as "addr" with value "At Home" and "name" with value "Joe
Blow"), the ‘cgi.py’ script has been installed correctly.  If you follow
the same procedure for your own script, you should now be able to debug
it.

The next step could be to call the *note cgi: 16. module’s *note test():
103. function from your script: replace its main code with the single
statement

     cgi.test()

This should produce the same results as those gotten from installing the
‘cgi.py’ file itself.

When an ordinary Python script raises an unhandled exception (for
whatever reason: of a typo in a module name, a file that can’t be
opened, etc.), the Python interpreter prints a nice traceback and exits.
While the Python interpreter will still do this when your CGI script
raises an exception, most likely the traceback will end up in one of the
HTTP server’s log files, or be discarded altogether.

Fortunately, once you have managed to get your script to execute `some'
code, you can easily send tracebacks to the Web browser using the *note
cgitb: 17. module.  If you haven’t done so already, just add the lines:

     import cgitb
     cgitb.enable()

to the top of your script.  Then try running it again; when a problem
occurs, you should see a detailed report that will likely make apparent
the cause of the crash.

If you suspect that there may be a problem in importing the *note cgitb:
17. module, you can use an even more robust approach (which only uses
built-in modules):

     import sys
     sys.stderr = sys.stdout
     print("Content-Type: text/plain")
     print()
     ...your code here...

This relies on the Python interpreter to print the traceback.  The
content type of the output is set to plain text, which disables all HTML
processing.  If your script works, the raw HTML will be displayed by
your client.  If it raises an exception, most likely after the first two
lines have been printed, a traceback will be displayed.  Because no HTML
interpretation is going on, the traceback will be readable.


File: python.info,  Node: Common problems and solutions,  Prev: Debugging CGI scripts,  Up: cgi --- Common Gateway Interface support

5.21.2.9 Common problems and solutions
......................................

   * Most HTTP servers buffer the output from CGI scripts until the
     script is completed.  This means that it is not possible to display
     a progress report on the client’s display while the script is
     running.

   * Check the installation instructions above.

   * Check the HTTP server’s log files.  (‘tail -f logfile’ in a
     separate window may be useful!)

   * Always check a script for syntax errors first, by doing something
     like ‘python script.py’.

   * If your script does not have any syntax errors, try adding ‘import
     cgitb; cgitb.enable()’ to the top of the script.

   * When invoking external programs, make sure they can be found.
     Usually, this means using absolute path names — ‘PATH’ is usually
     not set to a very useful value in a CGI script.

   * When reading or writing external files, make sure they can be read
     or written by the userid under which your CGI script will be
     running: this is typically the userid under which the web server is
     running, or some explicitly specified userid for a web server’s
     ‘suexec’ feature.

   * Don’t try to give a CGI script a set-uid mode.  This doesn’t work
     on most systems, and is a security liability as well.


File: python.info,  Node: cgitb --- Traceback manager for CGI scripts,  Next: wsgiref --- WSGI Utilities and Reference Implementation,  Prev: cgi --- Common Gateway Interface support,  Up: Internet Protocols and Support

5.21.3 ‘cgitb’ — Traceback manager for CGI scripts
--------------------------------------------------

The *note cgitb: 17. module provides a special exception handler for
Python scripts.  (Its name is a bit misleading.  It was originally
designed to display extensive traceback information in HTML for CGI
scripts.  It was later generalized to also display this information in
plain text.)  After this module is activated, if an uncaught exception
occurs, a detailed, formatted report will be displayed.  The report
includes a traceback showing excerpts of the source code for each level,
as well as the values of the arguments and local variables to currently
running functions, to help you debug the problem.  Optionally, you can
save this information to a file instead of sending it to the browser.

To enable this feature, simply add this to the top of your CGI script:

     import cgitb
     cgitb.enable()

The options to the *note enable(): 24a6. function control whether the
report is displayed in the browser and whether the report is logged to a
file for later analysis.

 -- Function: cgitb.enable (display=1, logdir=None, context=5,
          format="html")

     This function causes the *note cgitb: 17. module to take over the
     interpreter’s default handling for exceptions by setting the value
     of *note sys.excepthook: ae9.

     The optional argument `display' defaults to ‘1’ and can be set to
     ‘0’ to suppress sending the traceback to the browser.  If the
     argument `logdir' is present, the traceback reports are written to
     files.  The value of `logdir' should be a directory where these
     files will be placed.  The optional argument `context' is the
     number of lines of context to display around the current line of
     source code in the traceback; this defaults to ‘5’.  If the
     optional argument `format' is ‘"html"’, the output is formatted as
     HTML. Any other value forces plain text output.  The default value
     is ‘"html"’.

 -- Function: cgitb.handler (info=None)

     This function handles an exception using the default settings (that
     is, show a report in the browser, but don’t log to a file).  This
     can be used when you’ve caught an exception and want to report it
     using *note cgitb: 17.  The optional `info' argument should be a
     3-tuple containing an exception type, exception value, and
     traceback object, exactly like the tuple returned by *note
     sys.exc_info(): 8ca.  If the `info' argument is not supplied, the
     current exception is obtained from *note sys.exc_info(): 8ca.


File: python.info,  Node: wsgiref --- WSGI Utilities and Reference Implementation,  Next: urllib --- URL handling modules,  Prev: cgitb --- Traceback manager for CGI scripts,  Up: Internet Protocols and Support

5.21.4 ‘wsgiref’ — WSGI Utilities and Reference Implementation
--------------------------------------------------------------

The Web Server Gateway Interface (WSGI) is a standard interface between
web server software and web applications written in Python.  Having a
standard interface makes it easy to use an application that supports
WSGI with a number of different web servers.

Only authors of web servers and programming frameworks need to know
every detail and corner case of the WSGI design.  You don’t need to
understand every detail of WSGI just to install a WSGI application or to
write a web application using an existing framework.

*note wsgiref: 129. is a reference implementation of the WSGI
specification that can be used to add WSGI support to a web server or
framework.  It provides utilities for manipulating WSGI environment
variables and response headers, base classes for implementing WSGI
servers, a demo HTTP server that serves WSGI applications, and a
validation tool that checks WSGI servers and applications for
conformance to the WSGI specification ( PEP 3333(1)).

See ‘https://wsgi.readthedocs.org/’ for more information about WSGI, and
links to tutorials and other resources.

* Menu:

* wsgiref.util: wsgiref util -- WSGI environment utilities. WSGI environment utilities
* wsgiref.headers: wsgiref headers -- WSGI response header tools. WSGI response header tools
* wsgiref.simple_server: wsgiref simple_server -- a simple WSGI HTTP server. a simple WSGI HTTP server
* wsgiref.validate: wsgiref validate --- WSGI conformance checker. WSGI conformance checker
* wsgiref.handlers: wsgiref handlers -- server/gateway base classes. server/gateway base classes
* Examples: Examples<14>. 

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3333


File: python.info,  Node: wsgiref util -- WSGI environment utilities,  Next: wsgiref headers -- WSGI response header tools,  Up: wsgiref --- WSGI Utilities and Reference Implementation

5.21.4.1 ‘wsgiref.util’ – WSGI environment utilities
....................................................

This module provides a variety of utility functions for working with
WSGI environments.  A WSGI environment is a dictionary containing HTTP
request variables as described in PEP 3333(1).  All of the functions
taking an `environ' parameter expect a WSGI-compliant dictionary to be
supplied; please see PEP 3333(2) for a detailed specification.

 -- Function: wsgiref.util.guess_scheme (environ)

     Return a guess for whether ‘wsgi.url_scheme’ should be "http" or
     "https", by checking for a ‘HTTPS’ environment variable in the
     `environ' dictionary.  The return value is a string.

     This function is useful when creating a gateway that wraps CGI or a
     CGI-like protocol such as FastCGI. Typically, servers providing
     such protocols will include a ‘HTTPS’ variable with a value of "1"
     "yes", or "on" when a request is received via SSL. So, this
     function returns "https" if such a value is found, and "http"
     otherwise.

 -- Function: wsgiref.util.request_uri (environ, include_query=True)

     Return the full request URI, optionally including the query string,
     using the algorithm found in the "URL Reconstruction" section of
     PEP 3333(3).  If `include_query' is false, the query string is not
     included in the resulting URI.

 -- Function: wsgiref.util.application_uri (environ)

     Similar to *note request_uri(): 24ac, except that the ‘PATH_INFO’
     and ‘QUERY_STRING’ variables are ignored.  The result is the base
     URI of the application object addressed by the request.

 -- Function: wsgiref.util.shift_path_info (environ)

     Shift a single name from ‘PATH_INFO’ to ‘SCRIPT_NAME’ and return
     the name.  The `environ' dictionary is `modified' in-place; use a
     copy if you need to keep the original ‘PATH_INFO’ or ‘SCRIPT_NAME’
     intact.

     If there are no remaining path segments in ‘PATH_INFO’, ‘None’ is
     returned.

     Typically, this routine is used to process each portion of a
     request URI path, for example to treat the path as a series of
     dictionary keys.  This routine modifies the passed-in environment
     to make it suitable for invoking another WSGI application that is
     located at the target URI. For example, if there is a WSGI
     application at ‘/foo’, and the request URI path is ‘/foo/bar/baz’,
     and the WSGI application at ‘/foo’ calls *note shift_path_info():
     24ae, it will receive the string "bar", and the environment will be
     updated to be suitable for passing to a WSGI application at
     ‘/foo/bar’.  That is, ‘SCRIPT_NAME’ will change from ‘/foo’ to
     ‘/foo/bar’, and ‘PATH_INFO’ will change from ‘/bar/baz’ to ‘/baz’.

     When ‘PATH_INFO’ is just a "/", this routine returns an empty
     string and appends a trailing slash to ‘SCRIPT_NAME’, even though
     empty path segments are normally ignored, and ‘SCRIPT_NAME’ doesn’t
     normally end in a slash.  This is intentional behavior, to ensure
     that an application can tell the difference between URIs ending in
     ‘/x’ from ones ending in ‘/x/’ when using this routine to do object
     traversal.

 -- Function: wsgiref.util.setup_testing_defaults (environ)

     Update `environ' with trivial defaults for testing purposes.

     This routine adds various parameters required for WSGI, including
     ‘HTTP_HOST’, ‘SERVER_NAME’, ‘SERVER_PORT’, ‘REQUEST_METHOD’,
     ‘SCRIPT_NAME’, ‘PATH_INFO’, and all of the PEP 3333(4)-defined
     ‘wsgi.*’ variables.  It only supplies default values, and does not
     replace any existing settings for these variables.

     This routine is intended to make it easier for unit tests of WSGI
     servers and applications to set up dummy environments.  It should
     NOT be used by actual WSGI servers or applications, since the data
     is fake!

     Example usage:

          from wsgiref.util import setup_testing_defaults
          from wsgiref.simple_server import make_server

          # A relatively simple WSGI application. It's going to print out the
          # environment dictionary after being updated by setup_testing_defaults
          def simple_app(environ, start_response):
              setup_testing_defaults(environ)

              status = '200 OK'
              headers = [('Content-type', 'text/plain; charset=utf-8')]

              start_response(status, headers)

              ret = [("%s: %s\n" % (key, value)).encode("utf-8")
                     for key, value in environ.items()]
              return ret

          with make_server('', 8000, simple_app) as httpd:
              print("Serving on port 8000...")
              httpd.serve_forever()

In addition to the environment functions above, the *note wsgiref.util:
12d. module also provides these miscellaneous utilities:

 -- Function: wsgiref.util.is_hop_by_hop (header_name)

     Return true if ’header_name’ is an HTTP/1.1 "Hop-by-Hop" header, as
     defined by RFC 2616(5).

 -- Class: wsgiref.util.FileWrapper (filelike, blksize=8192)

     A wrapper to convert a file-like object to an *note iterator: e4f.
     The resulting objects support both *note __getitem__(): a84. and
     *note __iter__(): 99b. iteration styles, for compatibility with
     Python 2.1 and Jython.  As the object is iterated over, the
     optional `blksize' parameter will be repeatedly passed to the
     `filelike' object’s ‘read()’ method to obtain bytestrings to yield.
     When ‘read()’ returns an empty bytestring, iteration is ended and
     is not resumable.

     If `filelike' has a ‘close()’ method, the returned object will also
     have a ‘close()’ method, and it will invoke the `filelike' object’s
     ‘close()’ method when called.

     Example usage:

          from io import StringIO
          from wsgiref.util import FileWrapper

          # We're using a StringIO-buffer for as the file-like object
          filelike = StringIO("This is an example file-like object"*10)
          wrapper = FileWrapper(filelike, blksize=5)

          for chunk in wrapper:
              print(chunk)

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3333

   (2) https://www.python.org/dev/peps/pep-3333

   (3) https://www.python.org/dev/peps/pep-3333

   (4) https://www.python.org/dev/peps/pep-3333

   (5) https://tools.ietf.org/html/rfc2616.html


File: python.info,  Node: wsgiref headers -- WSGI response header tools,  Next: wsgiref simple_server -- a simple WSGI HTTP server,  Prev: wsgiref util -- WSGI environment utilities,  Up: wsgiref --- WSGI Utilities and Reference Implementation

5.21.4.2 ‘wsgiref.headers’ – WSGI response header tools
.......................................................

This module provides a single class, *note Headers: 362, for convenient
manipulation of WSGI response headers using a mapping-like interface.

 -- Class: wsgiref.headers.Headers ([headers])

     Create a mapping-like object wrapping `headers', which must be a
     list of header name/value tuples as described in PEP 3333(1).  The
     default value of `headers' is an empty list.

     *note Headers: 362. objects support typical mapping operations
     including *note __getitem__(): a84, ‘get()’, *note __setitem__():
     8cd, ‘setdefault()’, *note __delitem__(): 8ce. and *note
     __contains__(): 99c.  For each of these methods, the key is the
     header name (treated case-insensitively), and the value is the
     first value associated with that header name.  Setting a header
     deletes any existing values for that header, then adds a new value
     at the end of the wrapped header list.  Headers’ existing order is
     generally maintained, with new headers added to the end of the
     wrapped list.

     Unlike a dictionary, *note Headers: 362. objects do not raise an
     error when you try to get or delete a key that isn’t in the wrapped
     header list.  Getting a nonexistent header just returns ‘None’, and
     deleting a nonexistent header does nothing.

     *note Headers: 362. objects also support ‘keys()’, ‘values()’, and
     ‘items()’ methods.  The lists returned by ‘keys()’ and ‘items()’
     can include the same key more than once if there is a multi-valued
     header.  The ‘len()’ of a *note Headers: 362. object is the same as
     the length of its ‘items()’, which is the same as the length of the
     wrapped header list.  In fact, the ‘items()’ method just returns a
     copy of the wrapped header list.

     Calling ‘bytes()’ on a *note Headers: 362. object returns a
     formatted bytestring suitable for transmission as HTTP response
     headers.  Each header is placed on a line with its value, separated
     by a colon and a space.  Each line is terminated by a carriage
     return and line feed, and the bytestring is terminated with a blank
     line.

     In addition to their mapping interface and formatting features,
     *note Headers: 362. objects also have the following methods for
     querying and adding multi-valued headers, and for adding headers
     with MIME parameters:

      -- Method: get_all (name)

          Return a list of all the values for the named header.

          The returned list will be sorted in the order they appeared in
          the original header list or were added to this instance, and
          may contain duplicates.  Any fields deleted and re-inserted
          are always appended to the header list.  If no fields exist
          with the given name, returns an empty list.

      -- Method: add_header (name, value, **_params)

          Add a (possibly multi-valued) header, with optional MIME
          parameters specified via keyword arguments.

          `name' is the header field to add.  Keyword arguments can be
          used to set MIME parameters for the header field.  Each
          parameter must be a string or ‘None’.  Underscores in
          parameter names are converted to dashes, since dashes are
          illegal in Python identifiers, but many MIME parameter names
          include dashes.  If the parameter value is a string, it is
          added to the header value parameters in the form
          ‘name="value"’.  If it is ‘None’, only the parameter name is
          added.  (This is used for MIME parameters without a value.)
          Example usage:

               h.add_header('content-disposition', 'attachment', filename='bud.gif')

          The above will add a header that looks like this:

               Content-Disposition: attachment; filename="bud.gif"

     Changed in version 3.5: `headers' parameter is optional.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3333


File: python.info,  Node: wsgiref simple_server -- a simple WSGI HTTP server,  Next: wsgiref validate --- WSGI conformance checker,  Prev: wsgiref headers -- WSGI response header tools,  Up: wsgiref --- WSGI Utilities and Reference Implementation

5.21.4.3 ‘wsgiref.simple_server’ – a simple WSGI HTTP server
............................................................

This module implements a simple HTTP server (based on *note http.server:
96.) that serves WSGI applications.  Each server instance serves a
single WSGI application on a given host and port.  If you want to serve
multiple applications on a single host and port, you should create a
WSGI application that parses ‘PATH_INFO’ to select which application to
invoke for each request.  (E.g., using the ‘shift_path_info()’ function
from *note wsgiref.util: 12d.)

 -- Function: wsgiref.simple_server.make_server (host, port, app,
          server_class=WSGIServer, handler_class=WSGIRequestHandler)

     Create a new WSGI server listening on `host' and `port', accepting
     connections for `app'.  The return value is an instance of the
     supplied `server_class', and will process requests using the
     specified `handler_class'.  `app' must be a WSGI application
     object, as defined by PEP 3333(1).

     Example usage:

          from wsgiref.simple_server import make_server, demo_app

          with make_server('', 8000, demo_app) as httpd:
              print("Serving HTTP on port 8000...")

              # Respond to requests until process is killed
              httpd.serve_forever()

              # Alternative: serve one request, then exit
              httpd.handle_request()

 -- Function: wsgiref.simple_server.demo_app (environ, start_response)

     This function is a small but complete WSGI application that returns
     a text page containing the message "Hello world!"  and a list of
     the key/value pairs provided in the `environ' parameter.  It’s
     useful for verifying that a WSGI server (such as *note
     wsgiref.simple_server: 12c.) is able to run a simple WSGI
     application correctly.

 -- Class: wsgiref.simple_server.WSGIServer (server_address,
          RequestHandlerClass)

     Create a *note WSGIServer: 24b8. instance.  `server_address' should
     be a ‘(host,port)’ tuple, and `RequestHandlerClass' should be the
     subclass of *note http.server.BaseHTTPRequestHandler: 63b. that
     will be used to process requests.

     You do not normally need to call this constructor, as the *note
     make_server(): 24b6. function can handle all the details for you.

     *note WSGIServer: 24b8. is a subclass of *note
     http.server.HTTPServer: 24b9, so all of its methods (such as
     ‘serve_forever()’ and ‘handle_request()’) are available.  *note
     WSGIServer: 24b8. also provides these WSGI-specific methods:

      -- Method: set_app (application)

          Sets the callable `application' as the WSGI application that
          will receive requests.

      -- Method: get_app ()

          Returns the currently-set application callable.

     Normally, however, you do not need to use these additional methods,
     as *note set_app(): 24ba. is normally called by *note
     make_server(): 24b6, and the *note get_app(): 24bb. exists mainly
     for the benefit of request handler instances.

 -- Class: wsgiref.simple_server.WSGIRequestHandler (request,
          client_address, server)

     Create an HTTP handler for the given `request' (i.e.  a socket),
     `client_address' (a ‘(host,port)’ tuple), and `server' (*note
     WSGIServer: 24b8. instance).

     You do not need to create instances of this class directly; they
     are automatically created as needed by *note WSGIServer: 24b8.
     objects.  You can, however, subclass this class and supply it as a
     `handler_class' to the *note make_server(): 24b6. function.  Some
     possibly relevant methods for overriding in subclasses:

      -- Method: get_environ ()

          Returns a dictionary containing the WSGI environment for a
          request.  The default implementation copies the contents of
          the *note WSGIServer: 24b8. object’s ‘base_environ’ dictionary
          attribute and then adds various headers derived from the HTTP
          request.  Each call to this method should return a new
          dictionary containing all of the relevant CGI environment
          variables as specified in PEP 3333(2).

      -- Method: get_stderr ()

          Return the object that should be used as the ‘wsgi.errors’
          stream.  The default implementation just returns ‘sys.stderr’.

      -- Method: handle ()

          Process the HTTP request.  The default implementation creates
          a handler instance using a *note wsgiref.handlers: 12a. class
          to implement the actual WSGI application interface.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3333

   (2) https://www.python.org/dev/peps/pep-3333


File: python.info,  Node: wsgiref validate --- WSGI conformance checker,  Next: wsgiref handlers -- server/gateway base classes,  Prev: wsgiref simple_server -- a simple WSGI HTTP server,  Up: wsgiref --- WSGI Utilities and Reference Implementation

5.21.4.4 ‘wsgiref.validate’ — WSGI conformance checker
......................................................

When creating new WSGI application objects, frameworks, servers, or
middleware, it can be useful to validate the new code’s conformance
using *note wsgiref.validate: 12e.  This module provides a function that
creates WSGI application objects that validate communications between a
WSGI server or gateway and a WSGI application object, to check both
sides for protocol conformance.

Note that this utility does not guarantee complete PEP 3333(1)
compliance; an absence of errors from this module does not necessarily
mean that errors do not exist.  However, if this module does produce an
error, then it is virtually certain that either the server or
application is not 100% compliant.

This module is based on the ‘paste.lint’ module from Ian Bicking’s
"Python Paste" library.

 -- Function: wsgiref.validate.validator (application)

     Wrap `application' and return a new WSGI application object.  The
     returned application will forward all requests to the original
     `application', and will check that both the `application' and the
     server invoking it are conforming to the WSGI specification and to
     RFC 2616.

     Any detected nonconformance results in an *note AssertionError:
     f30. being raised; note, however, that how these errors are handled
     is server-dependent.  For example, *note wsgiref.simple_server:
     12c. and other servers based on *note wsgiref.handlers: 12a. (that
     don’t override the error handling methods to do something else)
     will simply output a message that an error has occurred, and dump
     the traceback to ‘sys.stderr’ or some other error stream.

     This wrapper may also generate output using the *note warnings:
     123. module to indicate behaviors that are questionable but which
     may not actually be prohibited by PEP 3333(2).  Unless they are
     suppressed using Python command-line options or the *note warnings:
     123. API, any such warnings will be written to ‘sys.stderr’ (`not'
     ‘wsgi.errors’, unless they happen to be the same object).

     Example usage:

          from wsgiref.validate import validator
          from wsgiref.simple_server import make_server

          # Our callable object which is intentionally not compliant to the
          # standard, so the validator is going to break
          def simple_app(environ, start_response):
              status = '200 OK' # HTTP Status
              headers = [('Content-type', 'text/plain')] # HTTP Headers
              start_response(status, headers)

              # This is going to break because we need to return a list, and
              # the validator is going to inform us
              return b"Hello World"

          # This is the application wrapped in a validator
          validator_app = validator(simple_app)

          with make_server('', 8000, validator_app) as httpd:
              print("Listening on port 8000....")
              httpd.serve_forever()

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3333

   (2) https://www.python.org/dev/peps/pep-3333


File: python.info,  Node: wsgiref handlers -- server/gateway base classes,  Next: Examples<14>,  Prev: wsgiref validate --- WSGI conformance checker,  Up: wsgiref --- WSGI Utilities and Reference Implementation

5.21.4.5 ‘wsgiref.handlers’ – server/gateway base classes
.........................................................

This module provides base handler classes for implementing WSGI servers
and gateways.  These base classes handle most of the work of
communicating with a WSGI application, as long as they are given a
CGI-like environment, along with input, output, and error streams.

 -- Class: wsgiref.handlers.CGIHandler

     CGI-based invocation via ‘sys.stdin’, ‘sys.stdout’, ‘sys.stderr’
     and ‘os.environ’.  This is useful when you have a WSGI application
     and want to run it as a CGI script.  Simply invoke
     ‘CGIHandler().run(app)’, where ‘app’ is the WSGI application object
     you wish to invoke.

     This class is a subclass of *note BaseCGIHandler: 24c4. that sets
     ‘wsgi.run_once’ to true, ‘wsgi.multithread’ to false, and
     ‘wsgi.multiprocess’ to true, and always uses *note sys: fb. and
     *note os: c2. to obtain the necessary CGI streams and environment.

 -- Class: wsgiref.handlers.IISCGIHandler

     A specialized alternative to *note CGIHandler: 24c3, for use when
     deploying on Microsoft’s IIS web server, without having set the
     config allowPathInfo option (IIS>=7) or metabase
     allowPathInfoForScriptMappings (IIS<7).

     By default, IIS gives a ‘PATH_INFO’ that duplicates the
     ‘SCRIPT_NAME’ at the front, causing problems for WSGI applications
     that wish to implement routing.  This handler strips any such
     duplicated path.

     IIS can be configured to pass the correct ‘PATH_INFO’, but this
     causes another bug where ‘PATH_TRANSLATED’ is wrong.  Luckily this
     variable is rarely used and is not guaranteed by WSGI. On IIS<7,
     though, the setting can only be made on a vhost level, affecting
     all other script mappings, many of which break when exposed to the
     ‘PATH_TRANSLATED’ bug.  For this reason IIS<7 is almost never
     deployed with the fix.  (Even IIS7 rarely uses it because there is
     still no UI for it.)

     There is no way for CGI code to tell whether the option was set, so
     a separate handler class is provided.  It is used in the same way
     as *note CGIHandler: 24c3, i.e., by calling
     ‘IISCGIHandler().run(app)’, where ‘app’ is the WSGI application
     object you wish to invoke.

     New in version 3.2.

 -- Class: wsgiref.handlers.BaseCGIHandler (stdin, stdout, stderr,
          environ, multithread=True, multiprocess=False)

     Similar to *note CGIHandler: 24c3, but instead of using the *note
     sys: fb. and *note os: c2. modules, the CGI environment and I/O
     streams are specified explicitly.  The `multithread' and
     `multiprocess' values are used to set the ‘wsgi.multithread’ and
     ‘wsgi.multiprocess’ flags for any applications run by the handler
     instance.

     This class is a subclass of *note SimpleHandler: 24c6. intended for
     use with software other than HTTP "origin servers".  If you are
     writing a gateway protocol implementation (such as CGI, FastCGI,
     SCGI, etc.)  that uses a ‘Status:’ header to send an HTTP status,
     you probably want to subclass this instead of *note SimpleHandler:
     24c6.

 -- Class: wsgiref.handlers.SimpleHandler (stdin, stdout, stderr,
          environ, multithread=True, multiprocess=False)

     Similar to *note BaseCGIHandler: 24c4, but designed for use with
     HTTP origin servers.  If you are writing an HTTP server
     implementation, you will probably want to subclass this instead of
     *note BaseCGIHandler: 24c4.

     This class is a subclass of *note BaseHandler: 24c7.  It overrides
     the *note __init__(): 9d5, ‘get_stdin()’, ‘get_stderr()’,
     ‘add_cgi_vars()’, ‘_write()’, and ‘_flush()’ methods to support
     explicitly setting the environment and streams via the constructor.
     The supplied environment and streams are stored in the ‘stdin’,
     ‘stdout’, ‘stderr’, and ‘environ’ attributes.

 -- Class: wsgiref.handlers.BaseHandler

     This is an abstract base class for running WSGI applications.  Each
     instance will handle a single HTTP request, although in principle
     you could create a subclass that was reusable for multiple
     requests.

     *note BaseHandler: 24c7. instances have only one method intended
     for external use:

      -- Method: run (app)

          Run the specified WSGI application, `app'.

     All of the other *note BaseHandler: 24c7. methods are invoked by
     this method in the process of running the application, and thus
     exist primarily to allow customizing the process.

     The following methods MUST be overridden in a subclass:

      -- Method: _write (data)

          Buffer the bytes `data' for transmission to the client.  It’s
          okay if this method actually transmits the data; *note
          BaseHandler: 24c7. just separates write and flush operations
          for greater efficiency when the underlying system actually has
          such a distinction.

      -- Method: _flush ()

          Force buffered data to be transmitted to the client.  It’s
          okay if this method is a no-op (i.e., if *note _write(): 24c9.
          actually sends the data).

      -- Method: get_stdin ()

          Return an input stream object suitable for use as the
          ‘wsgi.input’ of the request currently being processed.

      -- Method: get_stderr ()

          Return an output stream object suitable for use as the
          ‘wsgi.errors’ of the request currently being processed.

      -- Method: add_cgi_vars ()

          Insert CGI variables for the current request into the
          ‘environ’ attribute.

     Here are some other methods and attributes you may wish to
     override.  This list is only a summary, however, and does not
     include every method that can be overridden.  You should consult
     the docstrings and source code for additional information before
     attempting to create a customized *note BaseHandler: 24c7.
     subclass.

     Attributes and methods for customizing the WSGI environment:

      -- Attribute: wsgi_multithread

          The value to be used for the ‘wsgi.multithread’ environment
          variable.  It defaults to true in *note BaseHandler: 24c7, but
          may have a different default (or be set by the constructor) in
          the other subclasses.

      -- Attribute: wsgi_multiprocess

          The value to be used for the ‘wsgi.multiprocess’ environment
          variable.  It defaults to true in *note BaseHandler: 24c7, but
          may have a different default (or be set by the constructor) in
          the other subclasses.

      -- Attribute: wsgi_run_once

          The value to be used for the ‘wsgi.run_once’ environment
          variable.  It defaults to false in *note BaseHandler: 24c7,
          but *note CGIHandler: 24c3. sets it to true by default.

      -- Attribute: os_environ

          The default environment variables to be included in every
          request’s WSGI environment.  By default, this is a copy of
          ‘os.environ’ at the time that *note wsgiref.handlers: 12a. was
          imported, but subclasses can either create their own at the
          class or instance level.  Note that the dictionary should be
          considered read-only, since the default value is shared
          between multiple classes and instances.

      -- Attribute: server_software

          If the *note origin_server: 24d3. attribute is set, this
          attribute’s value is used to set the default ‘SERVER_SOFTWARE’
          WSGI environment variable, and also to set a default ‘Server:’
          header in HTTP responses.  It is ignored for handlers (such as
          *note BaseCGIHandler: 24c4. and *note CGIHandler: 24c3.) that
          are not HTTP origin servers.

          Changed in version 3.3: The term "Python" is replaced with
          implementation specific term like "CPython", "Jython" etc.

      -- Method: get_scheme ()

          Return the URL scheme being used for the current request.  The
          default implementation uses the ‘guess_scheme()’ function from
          *note wsgiref.util: 12d. to guess whether the scheme should be
          "http" or "https", based on the current request’s ‘environ’
          variables.

      -- Method: setup_environ ()

          Set the ‘environ’ attribute to a fully-populated WSGI
          environment.  The default implementation uses all of the above
          methods and attributes, plus the *note get_stdin(): 24cb,
          *note get_stderr(): 24cc, and *note add_cgi_vars(): 24cd.
          methods and the *note wsgi_file_wrapper: 24d6. attribute.  It
          also inserts a ‘SERVER_SOFTWARE’ key if not present, as long
          as the *note origin_server: 24d3. attribute is a true value
          and the *note server_software: 24d2. attribute is set.

     Methods and attributes for customizing exception handling:

      -- Method: log_exception (exc_info)

          Log the `exc_info' tuple in the server log.  `exc_info' is a
          ‘(type, value, traceback)’ tuple.  The default implementation
          simply writes the traceback to the request’s ‘wsgi.errors’
          stream and flushes it.  Subclasses can override this method to
          change the format or retarget the output, mail the traceback
          to an administrator, or whatever other action may be deemed
          suitable.

      -- Attribute: traceback_limit

          The maximum number of frames to include in tracebacks output
          by the default *note log_exception(): 24d7. method.  If
          ‘None’, all frames are included.

      -- Method: error_output (environ, start_response)

          This method is a WSGI application to generate an error page
          for the user.  It is only invoked if an error occurs before
          headers are sent to the client.

          This method can access the current error information using
          ‘sys.exc_info()’, and should pass that information to
          `start_response' when calling it (as described in the "Error
          Handling" section of PEP 3333(1)).

          The default implementation just uses the *note error_status:
          24da, *note error_headers: 24db, and *note error_body: 24dc.
          attributes to generate an output page.  Subclasses can
          override this to produce more dynamic error output.

          Note, however, that it’s not recommended from a security
          perspective to spit out diagnostics to any old user; ideally,
          you should have to do something special to enable diagnostic
          output, which is why the default implementation doesn’t
          include any.

      -- Attribute: error_status

          The HTTP status used for error responses.  This should be a
          status string as defined in PEP 3333(2); it defaults to a 500
          code and message.

      -- Attribute: error_headers

          The HTTP headers used for error responses.  This should be a
          list of WSGI response headers (‘(name, value)’ tuples), as
          described in PEP 3333(3).  The default list just sets the
          content type to ‘text/plain’.

      -- Attribute: error_body

          The error response body.  This should be an HTTP response body
          bytestring.  It defaults to the plain text, "A server error
          occurred.  Please contact the administrator."

     Methods and attributes for PEP 3333(4)’s "Optional
     Platform-Specific File Handling" feature:

      -- Attribute: wsgi_file_wrapper

          A ‘wsgi.file_wrapper’ factory, or ‘None’.  The default value
          of this attribute is the *note wsgiref.util.FileWrapper: 24b1.
          class.

      -- Method: sendfile ()

          Override to implement platform-specific file transmission.
          This method is called only if the application’s return value
          is an instance of the class specified by the *note
          wsgi_file_wrapper: 24d6. attribute.  It should return a true
          value if it was able to successfully transmit the file, so
          that the default transmission code will not be executed.  The
          default implementation of this method just returns a false
          value.

     Miscellaneous methods and attributes:

      -- Attribute: origin_server

          This attribute should be set to a true value if the handler’s
          *note _write(): 24c9. and *note _flush(): 24ca. are being used
          to communicate directly to the client, rather than via a
          CGI-like gateway protocol that wants the HTTP status in a
          special ‘Status:’ header.

          This attribute’s default value is true in *note BaseHandler:
          24c7, but false in *note BaseCGIHandler: 24c4. and *note
          CGIHandler: 24c3.

      -- Attribute: http_version

          If *note origin_server: 24d3. is true, this string attribute
          is used to set the HTTP version of the response set to the
          client.  It defaults to ‘"1.0"’.

 -- Function: wsgiref.handlers.read_environ ()

     Transcode CGI variables from ‘os.environ’ to PEP 3333 "bytes in
     unicode" strings, returning a new dictionary.  This function is
     used by *note CGIHandler: 24c3. and *note IISCGIHandler: 24c5. in
     place of directly using ‘os.environ’, which is not necessarily
     WSGI-compliant on all platforms and web servers using Python 3 –
     specifically, ones where the OS’s actual environment is Unicode
     (i.e.  Windows), or ones where the environment is bytes, but the
     system encoding used by Python to decode it is anything other than
     ISO-8859-1 (e.g.  Unix systems using UTF-8).

     If you are implementing a CGI-based handler of your own, you
     probably want to use this routine instead of just copying values
     out of ‘os.environ’ directly.

     New in version 3.2.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3333

   (2) https://www.python.org/dev/peps/pep-3333

   (3) https://www.python.org/dev/peps/pep-3333

   (4) https://www.python.org/dev/peps/pep-3333


File: python.info,  Node: Examples<14>,  Prev: wsgiref handlers -- server/gateway base classes,  Up: wsgiref --- WSGI Utilities and Reference Implementation

5.21.4.6 Examples
.................

This is a working "Hello World" WSGI application:

     from wsgiref.simple_server import make_server

     # Every WSGI application must have an application object - a callable
     # object that accepts two arguments. For that purpose, we're going to
     # use a function (note that you're not limited to a function, you can
     # use a class for example). The first argument passed to the function
     # is a dictionary containing CGI-style environment variables and the
     # second variable is the callable object (see PEP 333).
     def hello_world_app(environ, start_response):
         status = '200 OK' # HTTP Status
         headers = [('Content-type', 'text/plain; charset=utf-8')] # HTTP Headers
         start_response(status, headers)

         # The returned object is going to be printed
         return [b"Hello World"]

     with make_server('', 8000, hello_world_app) as httpd:
         print("Serving on port 8000...")

         # Serve until process is killed
         httpd.serve_forever()


File: python.info,  Node: urllib --- URL handling modules,  Next: urllib request --- Extensible library for opening URLs,  Prev: wsgiref --- WSGI Utilities and Reference Implementation,  Up: Internet Protocols and Support

5.21.5 ‘urllib’ — URL handling modules
--------------------------------------

‘urllib’ is a package that collects several modules for working with
URLs:

   * *note urllib.request: 11d. for opening and reading URLs

   * *note urllib.error: 11b. containing the exceptions raised by *note
     urllib.request: 11d.

   * *note urllib.parse: 11c. for parsing URLs

   * *note urllib.robotparser: 11f. for parsing ‘robots.txt’ files


File: python.info,  Node: urllib request --- Extensible library for opening URLs,  Next: urllib response --- Response classes used by urllib,  Prev: urllib --- URL handling modules,  Up: Internet Protocols and Support

5.21.6 ‘urllib.request’ — Extensible library for opening URLs
-------------------------------------------------------------

The *note urllib.request: 11d. module defines functions and classes
which help in opening URLs (mostly HTTP) in a complex world — basic and
digest authentication, redirections, cookies and more.

See also
........

The Requests package(1) is recommended for a higher-level http client
interface.

The *note urllib.request: 11d. module defines the following functions:

 -- Function: urllib.request.urlopen (url, data=None[, timeout], *,
          cafile=None, capath=None, cadefault=False, context=None)

     Open the URL `url', which can be either a string or a *note
     Request: 4f8. object.

     `data' must be a bytes object specifying additional data to be sent
     to the server, or ‘None’ if no such data is needed.  `data' may
     also be an iterable object and in that case Content-Length value
     must be specified in the headers.  Currently HTTP requests are the
     only ones that use `data'; the HTTP request will be a POST instead
     of a GET when the `data' parameter is provided.

     `data' should be a buffer in the standard
     ‘application/x-www-form-urlencoded’ format.  The *note
     urllib.parse.urlencode(): 35e. function takes a mapping or sequence
     of 2-tuples and returns an ASCII text string in this format.  It
     should be encoded to bytes before being used as the `data'
     parameter.

     urllib.request module uses HTTP/1.1 and includes ‘Connection:close’
     header in its HTTP requests.

     The optional `timeout' parameter specifies a timeout in seconds for
     blocking operations like the connection attempt (if not specified,
     the global default timeout setting will be used).  This actually
     only works for HTTP, HTTPS and FTP connections.

     If `context' is specified, it must be a *note ssl.SSLContext: 1c6.
     instance describing the various SSL options.  See *note
     HTTPSConnection: 560. for more details.

     The optional `cafile' and `capath' parameters specify a set of
     trusted CA certificates for HTTPS requests.  `cafile' should point
     to a single file containing a bundle of CA certificates, whereas
     `capath' should point to a directory of hashed certificate files.
     More information can be found in *note
     ssl.SSLContext.load_verify_locations(): 3da.

     The `cadefault' parameter is ignored.

     This function always returns an object which can work as *note
     context manager: 165. and has methods such as

        * ‘geturl()’ — return the URL of the resource retrieved,
          commonly used to determine if a redirect was followed

        * ‘info()’ — return the meta-information of the page, such as
          headers, in the form of an *note email.message_from_string():
          20d8. instance (see Quick Reference to HTTP Headers(2))

        * ‘getcode()’ – return the HTTP status code of the response.

     For http and https urls, this function returns a *note
     http.client.HTTPResponse: 63e. object slightly modified.  In
     addition to the three new methods above, the msg attribute contains
     the same information as the *note reason: 24e4. attribute — the
     reason phrase returned by server — instead of the response headers
     as it is specified in the documentation for *note HTTPResponse:
     63e.

     For ftp, file, and data urls and requests explicitly handled by
     legacy *note URLopener: 24e5. and *note FancyURLopener: 24e6.
     classes, this function returns a ‘urllib.response.addinfourl’
     object.

     Raises *note URLError: 24e7. on errors.

     Note that ‘None’ may be returned if no handler handles the request
     (though the default installed global *note OpenerDirector: 24e8.
     uses *note UnknownHandler: 24e9. to ensure this never happens).

     In addition, if proxy settings are detected (for example, when a
     ‘*_proxy’ environment variable like ‘http_proxy’ is set), *note
     ProxyHandler: 24ea. is default installed and makes sure the
     requests are handled through the proxy.

     The legacy ‘urllib.urlopen’ function from Python 2.6 and earlier
     has been discontinued; *note urllib.request.urlopen(): 35f.
     corresponds to the old ‘urllib2.urlopen’.  Proxy handling, which
     was done by passing a dictionary parameter to ‘urllib.urlopen’, can
     be obtained by using *note ProxyHandler: 24ea. objects.

     Changed in version 3.2: `cafile' and `capath' were added.

     Changed in version 3.2: HTTPS virtual hosts are now supported if
     possible (that is, if *note ssl.HAS_SNI: 1e8d. is true).

     New in version 3.2: `data' can be an iterable object.

     Changed in version 3.3: `cadefault' was added.

     Changed in version 3.4.3: `context' was added.

 -- Function: urllib.request.install_opener (opener)

     Install an *note OpenerDirector: 24e8. instance as the default
     global opener.  Installing an opener is only necessary if you want
     urlopen to use that opener; otherwise, simply call *note
     OpenerDirector.open(): 4fc. instead of *note urlopen(): 35f.  The
     code does not check for a real *note OpenerDirector: 24e8, and any
     class with the appropriate interface will work.

 -- Function: urllib.request.build_opener ([handler, ...])

     Return an *note OpenerDirector: 24e8. instance, which chains the
     handlers in the order given.  `handler's can be either instances of
     *note BaseHandler: 24ed, or subclasses of *note BaseHandler: 24ed.
     (in which case it must be possible to call the constructor without
     any parameters).  Instances of the following classes will be in
     front of the `handler's, unless the `handler's contain them,
     instances of them or subclasses of them: *note ProxyHandler: 24ea.
     (if proxy settings are detected), *note UnknownHandler: 24e9, *note
     HTTPHandler: 24ee, *note HTTPDefaultErrorHandler: 24ef, *note
     HTTPRedirectHandler: 24f0, *note FTPHandler: 24f1, *note
     FileHandler: 24f2, *note HTTPErrorProcessor: 24f3.

     If the Python installation has SSL support (i.e., if the *note ssl:
     f1. module can be imported), *note HTTPSHandler: 805. will also be
     added.

     A *note BaseHandler: 24ed. subclass may also change its
     ‘handler_order’ attribute to modify its position in the handlers
     list.

 -- Function: urllib.request.pathname2url (path)

     Convert the pathname `path' from the local syntax for a path to the
     form used in the path component of a URL. This does not produce a
     complete URL. The return value will already be quoted using the
     *note quote(): 24f5. function.

 -- Function: urllib.request.url2pathname (path)

     Convert the path component `path' from a percent-encoded URL to the
     local syntax for a path.  This does not accept a complete URL. This
     function uses *note unquote(): 24f7. to decode `path'.

 -- Function: urllib.request.getproxies ()

     This helper function returns a dictionary of scheme to proxy server
     URL mappings.  It scans the environment for variables named
     ‘<scheme>_proxy’, in a case insensitive approach, for all operating
     systems first, and when it cannot find it, looks for proxy
     information from Mac OSX System Configuration for Mac OS X and
     Windows Systems Registry for Windows.  If both lowercase and
     uppercase environment variables exist (and disagree), lowercase is
     preferred.

The following classes are provided:

 -- Class: urllib.request.Request (url, data=None, headers={},
          origin_req_host=None, unverifiable=False, method=None)

     This class is an abstraction of a URL request.

     `url' should be a string containing a valid URL.

     `data' must be a bytes object specifying additional data to send to
     the server, or ‘None’ if no such data is needed.  Currently HTTP
     requests are the only ones that use `data'; the HTTP request will
     be a POST instead of a GET when the `data' parameter is provided.
     `data' should be a buffer in the standard
     ‘application/x-www-form-urlencoded’ format.  The *note
     urllib.parse.urlencode(): 35e. function takes a mapping or sequence
     of 2-tuples and returns an ASCII string in this format.  It should
     be encoded to bytes before being used as the `data' parameter.

     `headers' should be a dictionary, and will be treated as if *note
     add_header(): 24f9. was called with each key and value as
     arguments.  This is often used to "spoof" the ‘User-Agent’ header,
     which is used by a browser to identify itself – some HTTP servers
     only allow requests coming from common browsers as opposed to
     scripts.  For example, Mozilla Firefox may identify itself as
     ‘"Mozilla/5.0 (X11; U; Linux i686) Gecko/20071127
     Firefox/2.0.0.11"’, while *note urllib: 11a.’s default user agent
     string is ‘"Python-urllib/2.6"’ (on Python 2.6).

     An example of using ‘Content-Type’ header with `data' argument
     would be sending a dictionary like ‘{"Content-Type":
     "application/x-www-form-urlencoded"}’.

     The final two arguments are only of interest for correct handling
     of third-party HTTP cookies:

     `origin_req_host' should be the request-host of the origin
     transaction, as defined by RFC 2965(3).  It defaults to
     ‘http.cookiejar.request_host(self)’.  This is the host name or IP
     address of the original request that was initiated by the user.
     For example, if the request is for an image in an HTML document,
     this should be the request-host of the request for the page
     containing the image.

     `unverifiable' should indicate whether the request is unverifiable,
     as defined by RFC 2965.  It defaults to ‘False’.  An unverifiable
     request is one whose URL the user did not have the option to
     approve.  For example, if the request is for an image in an HTML
     document, and the user had no option to approve the automatic
     fetching of the image, this should be true.

     `method' should be a string that indicates the HTTP request method
     that will be used (e.g.  ‘'HEAD'’).  If provided, its value is
     stored in the *note method: 4f9. attribute and is used by *note
     get_method(): 6fd.  Subclasses may indicate a default method by
     setting the *note method: 4f9. attribute in the class itself.

     Changed in version 3.3: *note Request.method: 4f9. argument is
     added to the Request class.

     Changed in version 3.4: Default *note Request.method: 4f9. may be
     indicated at the class level.

 -- Class: urllib.request.OpenerDirector

     The *note OpenerDirector: 24e8. class opens URLs via *note
     BaseHandler: 24ed.s chained together.  It manages the chaining of
     handlers, and recovery from errors.

 -- Class: urllib.request.BaseHandler

     This is the base class for all registered handlers — and handles
     only the simple mechanics of registration.

 -- Class: urllib.request.HTTPDefaultErrorHandler

     A class which defines a default handler for HTTP error responses;
     all responses are turned into *note HTTPError: 4fe. exceptions.

 -- Class: urllib.request.HTTPRedirectHandler

     A class to handle redirections.

 -- Class: urllib.request.HTTPCookieProcessor (cookiejar=None)

     A class to handle HTTP Cookies.

 -- Class: urllib.request.ProxyHandler (proxies=None)

     Cause requests to go through a proxy.  If `proxies' is given, it
     must be a dictionary mapping protocol names to URLs of proxies.
     The default is to read the list of proxies from the environment
     variables ‘<protocol>_proxy’.  If no proxy environment variables
     are set, then in a Windows environment proxy settings are obtained
     from the registry’s Internet Settings section, and in a Mac OS X
     environment proxy information is retrieved from the OS X System
     Configuration Framework.

     To disable autodetected proxy pass an empty dictionary.

     The ‘no_proxy’ environment variable can be used to specify hosts
     which shouldn’t be reached via proxy; if set, it should be a
     comma-separated list of hostname suffixes, optionally with ‘:port’
     appended, for example ‘cern.ch,ncsa.uiuc.edu,some.host:8080’.

 -- Class: urllib.request.HTTPPasswordMgr

     Keep a database of ‘(realm, uri) -> (user, password)’ mappings.

 -- Class: urllib.request.HTTPPasswordMgrWithDefaultRealm

     Keep a database of ‘(realm, uri) -> (user, password)’ mappings.  A
     realm of ‘None’ is considered a catch-all realm, which is searched
     if no other realm fits.

 -- Class: urllib.request.HTTPPasswordMgrWithPriorAuth

     A variant of *note HTTPPasswordMgrWithDefaultRealm: 24fc. that also
     has a database of ‘uri -> is_authenticated’ mappings.  Can be used
     by a BasicAuth handler to determine when to send authentication
     credentials immediately instead of waiting for a ‘401’ response
     first.

     New in version 3.5.

 -- Class: urllib.request.AbstractBasicAuthHandler (password_mgr=None)

     This is a mixin class that helps with HTTP authentication, both to
     the remote host and to a proxy.  `password_mgr', if given, should
     be something that is compatible with *note HTTPPasswordMgr: 24fb.;
     refer to section *note HTTPPasswordMgr Objects: 24fe. for
     information on the interface that must be supported.  If
     `passwd_mgr' also provides ‘is_authenticated’ and
     ‘update_authenticated’ methods (see *note
     HTTPPasswordMgrWithPriorAuth Objects: 24ff.), then the handler will
     use the ‘is_authenticated’ result for a given URI to determine
     whether or not to send authentication credentials with the request.
     If ‘is_authenticated’ returns ‘True’ for the URI, credentials are
     sent.  If ‘is_authenticated’ is ‘False’, credentials are not sent,
     and then if a ‘401’ response is received the request is re-sent
     with the authentication credentials.  If authentication succeeds,
     ‘update_authenticated’ is called to set ‘is_authenticated’ ‘True’
     for the URI, so that subsequent requests to the URI or any of its
     super-URIs will automatically include the authentication
     credentials.

     New in version 3.5: Added ‘is_authenticated’ support.

 -- Class: urllib.request.HTTPBasicAuthHandler (password_mgr=None)

     Handle authentication with the remote host.  `password_mgr', if
     given, should be something that is compatible with *note
     HTTPPasswordMgr: 24fb.; refer to section *note HTTPPasswordMgr
     Objects: 24fe. for information on the interface that must be
     supported.  HTTPBasicAuthHandler will raise a *note ValueError:
     19c. when presented with a wrong Authentication scheme.

 -- Class: urllib.request.ProxyBasicAuthHandler (password_mgr=None)

     Handle authentication with the proxy.  `password_mgr', if given,
     should be something that is compatible with *note HTTPPasswordMgr:
     24fb.; refer to section *note HTTPPasswordMgr Objects: 24fe. for
     information on the interface that must be supported.

 -- Class: urllib.request.AbstractDigestAuthHandler (password_mgr=None)

     This is a mixin class that helps with HTTP authentication, both to
     the remote host and to a proxy.  `password_mgr', if given, should
     be something that is compatible with *note HTTPPasswordMgr: 24fb.;
     refer to section *note HTTPPasswordMgr Objects: 24fe. for
     information on the interface that must be supported.

 -- Class: urllib.request.HTTPDigestAuthHandler (password_mgr=None)

     Handle authentication with the remote host.  `password_mgr', if
     given, should be something that is compatible with *note
     HTTPPasswordMgr: 24fb.; refer to section *note HTTPPasswordMgr
     Objects: 24fe. for information on the interface that must be
     supported.  When both Digest Authentication Handler and Basic
     Authentication Handler are both added, Digest Authentication is
     always tried first.  If the Digest Authentication returns a 40x
     response again, it is sent to Basic Authentication handler to
     Handle.  This Handler method will raise a *note ValueError: 19c.
     when presented with an authentication scheme other than Digest or
     Basic.

     Changed in version 3.3: Raise *note ValueError: 19c. on unsupported
     Authentication Scheme.

 -- Class: urllib.request.ProxyDigestAuthHandler (password_mgr=None)

     Handle authentication with the proxy.  `password_mgr', if given,
     should be something that is compatible with *note HTTPPasswordMgr:
     24fb.; refer to section *note HTTPPasswordMgr Objects: 24fe. for
     information on the interface that must be supported.

 -- Class: urllib.request.HTTPHandler

     A class to handle opening of HTTP URLs.

 -- Class: urllib.request.HTTPSHandler (debuglevel=0, context=None,
          check_hostname=None)

     A class to handle opening of HTTPS URLs.  `context' and
     `check_hostname' have the same meaning as in *note
     http.client.HTTPSConnection: 560.

     Changed in version 3.2: `context' and `check_hostname' were added.

 -- Class: urllib.request.FileHandler

     Open local files.

 -- Class: urllib.request.DataHandler

     Open data URLs.

     New in version 3.4.

 -- Class: urllib.request.FTPHandler

     Open FTP URLs.

 -- Class: urllib.request.CacheFTPHandler

     Open FTP URLs, keeping a cache of open FTP connections to minimize
     delays.

 -- Class: urllib.request.UnknownHandler

     A catch-all class to handle unknown URLs.

 -- Class: urllib.request.HTTPErrorProcessor

     Process HTTP error responses.

* Menu:

* Request Objects:: 
* OpenerDirector Objects:: 
* BaseHandler Objects:: 
* HTTPRedirectHandler Objects:: 
* HTTPCookieProcessor Objects:: 
* ProxyHandler Objects:: 
* HTTPPasswordMgr Objects:: 
* HTTPPasswordMgrWithPriorAuth Objects:: 
* AbstractBasicAuthHandler Objects:: 
* HTTPBasicAuthHandler Objects:: 
* ProxyBasicAuthHandler Objects:: 
* AbstractDigestAuthHandler Objects:: 
* HTTPDigestAuthHandler Objects:: 
* ProxyDigestAuthHandler Objects:: 
* HTTPHandler Objects:: 
* HTTPSHandler Objects:: 
* FileHandler Objects:: 
* DataHandler Objects:: 
* FTPHandler Objects:: 
* CacheFTPHandler Objects:: 
* UnknownHandler Objects:: 
* HTTPErrorProcessor Objects:: 
* Examples: Examples<15>. 
* Legacy interface:: 
* urllib.request Restrictions: urllib request Restrictions. 

   ---------- Footnotes ----------

   (1) https://requests.readthedocs.org/

   (2) http://www.cs.tut.fi/~jkorpela/http.html

   (3) https://tools.ietf.org/html/rfc2965.html


File: python.info,  Node: Request Objects,  Next: OpenerDirector Objects,  Up: urllib request --- Extensible library for opening URLs

5.21.6.1 Request Objects
........................

The following methods describe *note Request: 4f8.’s public interface,
and so all may be overridden in subclasses.  It also defines several
public attributes that can be used by clients to inspect the parsed
request.

 -- Attribute: Request.full_url

     The original URL passed to the constructor.

     Changed in version 3.4.

     Request.full_url is a property with setter, getter and a deleter.
     Getting *note full_url: 4fa. returns the original request URL with
     the fragment, if it was present.

 -- Attribute: Request.type

     The URI scheme.

 -- Attribute: Request.host

     The URI authority, typically a host, but may also contain a port
     separated by a colon.

 -- Attribute: Request.origin_req_host

     The original host for the request, without port.

 -- Attribute: Request.selector

     The URI path.  If the *note Request: 4f8. uses a proxy, then
     selector will be the full url that is passed to the proxy.

 -- Attribute: Request.data

     The entity body for the request, or None if not specified.

     Changed in version 3.4: Changing value of *note Request.data: 4fb.
     now deletes "Content-Length" header if it was previously set or
     calculated.

 -- Attribute: Request.unverifiable

     boolean, indicates whether the request is unverifiable as defined
     by RFC 2965.

 -- Attribute: Request.method

     The HTTP request method to use.  By default its value is *note
     None: 19d, which means that *note get_method(): 6fd. will do its
     normal computation of the method to be used.  Its value can be set
     (thus overriding the default computation in *note get_method():
     6fd.) either by providing a default value by setting it at the
     class level in a *note Request: 4f8. subclass, or by passing a
     value in to the *note Request: 4f8. constructor via the `method'
     argument.

     New in version 3.3.

     Changed in version 3.4: A default value can now be set in
     subclasses; previously it could only be set via the constructor
     argument.

 -- Method: Request.get_method ()

     Return a string indicating the HTTP request method.  If *note
     Request.method: 4f9. is not ‘None’, return its value, otherwise
     return ‘'GET'’ if *note Request.data: 4fb. is ‘None’, or ‘'POST'’
     if it’s not.  This is only meaningful for HTTP requests.

     Changed in version 3.3: get_method now looks at the value of *note
     Request.method: 4f9.

 -- Method: Request.add_header (key, val)

     Add another header to the request.  Headers are currently ignored
     by all handlers except HTTP handlers, where they are added to the
     list of headers sent to the server.  Note that there cannot be more
     than one header with the same name, and later calls will overwrite
     previous calls in case the `key' collides.  Currently, this is no
     loss of HTTP functionality, since all headers which have meaning
     when used more than once have a (header-specific) way of gaining
     the same functionality using only one header.

 -- Method: Request.add_unredirected_header (key, header)

     Add a header that will not be added to a redirected request.

 -- Method: Request.has_header (header)

     Return whether the instance has the named header (checks both
     regular and unredirected).

 -- Method: Request.remove_header (header)

     Remove named header from the request instance (both from regular
     and unredirected headers).

     New in version 3.4.

 -- Method: Request.get_full_url ()

     Return the URL given in the constructor.

     Changed in version 3.4.

     Returns *note Request.full_url: 4fa.

 -- Method: Request.set_proxy (host, type)

     Prepare the request by connecting to a proxy server.  The `host'
     and `type' will replace those of the instance, and the instance’s
     selector will be the original URL given in the constructor.

 -- Method: Request.get_header (header_name, default=None)

     Return the value of the given header.  If the header is not
     present, return the default value.

 -- Method: Request.header_items ()

     Return a list of tuples (header_name, header_value) of the Request
     headers.

Changed in version 3.4: The request methods add_data, has_data,
get_data, get_type, get_host, get_selector, get_origin_req_host and
is_unverifiable that were deprecated since 3.3 have been removed.


File: python.info,  Node: OpenerDirector Objects,  Next: BaseHandler Objects,  Prev: Request Objects,  Up: urllib request --- Extensible library for opening URLs

5.21.6.2 OpenerDirector Objects
...............................

*note OpenerDirector: 24e8. instances have the following methods:

 -- Method: OpenerDirector.add_handler (handler)

     `handler' should be an instance of *note BaseHandler: 24ed.  The
     following methods are searched, and added to the possible chains
     (note that HTTP errors are a special case).

        * ‘protocol_open()’ — signal that the handler knows how to open
          `protocol' URLs.

        * ‘http_error_type()’ — signal that the handler knows how to
          handle HTTP errors with HTTP error code `type'.

        * ‘protocol_error()’ — signal that the handler knows how to
          handle errors from (non-‘http’) `protocol'.

        * ‘protocol_request()’ — signal that the handler knows how to
          pre-process `protocol' requests.

        * ‘protocol_response()’ — signal that the handler knows how to
          post-process `protocol' responses.

 -- Method: OpenerDirector.open (url, data=None[, timeout])

     Open the given `url' (which can be a request object or a string),
     optionally passing the given `data'.  Arguments, return values and
     exceptions raised are the same as those of *note urlopen(): 35f.
     (which simply calls the *note open(): 1e8. method on the currently
     installed global *note OpenerDirector: 24e8.).  The optional
     `timeout' parameter specifies a timeout in seconds for blocking
     operations like the connection attempt (if not specified, the
     global default timeout setting will be used).  The timeout feature
     actually works only for HTTP, HTTPS and FTP connections).

 -- Method: OpenerDirector.error (proto, *args)

     Handle an error of the given protocol.  This will call the
     registered error handlers for the given protocol with the given
     arguments (which are protocol specific).  The HTTP protocol is a
     special case which uses the HTTP response code to determine the
     specific error handler; refer to the ‘http_error_*()’ methods of
     the handler classes.

     Return values and exceptions raised are the same as those of *note
     urlopen(): 35f.

OpenerDirector objects open URLs in three stages:

The order in which these methods are called within each stage is
determined by sorting the handler instances.

  1. Every handler with a method named like ‘protocol_request()’ has
     that method called to pre-process the request.

  2. Handlers with a method named like ‘protocol_open()’ are called to
     handle the request.  This stage ends when a handler either returns
     a non-*note None: 19d. value (ie.  a response), or raises an
     exception (usually *note URLError: 24e7.).  Exceptions are allowed
     to propagate.

     In fact, the above algorithm is first tried for methods named
     ‘default_open()’.  If all such methods return *note None: 19d, the
     algorithm is repeated for methods named like ‘protocol_open()’.  If
     all such methods return *note None: 19d, the algorithm is repeated
     for methods named ‘unknown_open()’.

     Note that the implementation of these methods may involve calls of
     the parent *note OpenerDirector: 24e8. instance’s *note open():
     4fc. and *note error(): 2516. methods.

  3. Every handler with a method named like ‘protocol_response()’ has
     that method called to post-process the response.


File: python.info,  Node: BaseHandler Objects,  Next: HTTPRedirectHandler Objects,  Prev: OpenerDirector Objects,  Up: urllib request --- Extensible library for opening URLs

5.21.6.3 BaseHandler Objects
............................

*note BaseHandler: 24ed. objects provide a couple of methods that are
directly useful, and others that are meant to be used by derived
classes.  These are intended for direct use:

 -- Method: BaseHandler.add_parent (director)

     Add a director as parent.

 -- Method: BaseHandler.close ()

     Remove any parents.

The following attribute and methods should only be used by classes
derived from *note BaseHandler: 24ed.

     Note: The convention has been adopted that subclasses defining
     ‘protocol_request()’ or ‘protocol_response()’ methods are named
     ‘*Processor’; all others are named ‘*Handler’.

 -- Attribute: BaseHandler.parent

     A valid *note OpenerDirector: 24e8, which can be used to open using
     a different protocol, or handle errors.

 -- Method: BaseHandler.default_open (req)

     This method is `not' defined in *note BaseHandler: 24ed, but
     subclasses should define it if they want to catch all URLs.

     This method, if implemented, will be called by the parent *note
     OpenerDirector: 24e8.  It should return a file-like object as
     described in the return value of the *note open(): 1e8. of *note
     OpenerDirector: 24e8, or ‘None’.  It should raise *note URLError:
     24e7, unless a truly exceptional thing happens (for example, *note
     MemoryError: 10b9. should not be mapped to ‘URLError’).

     This method will be called before any protocol-specific open
     method.

 -- Method: BaseHandler.protocol_open (req)

     This method is `not' defined in *note BaseHandler: 24ed, but
     subclasses should define it if they want to handle URLs with the
     given protocol.

     This method, if defined, will be called by the parent *note
     OpenerDirector: 24e8.  Return values should be the same as for
     *note default_open(): 251c.

 -- Method: BaseHandler.unknown_open (req)

     This method is `not' defined in *note BaseHandler: 24ed, but
     subclasses should define it if they want to catch all URLs with no
     specific registered handler to open it.

     This method, if implemented, will be called by the *note parent:
     251b. *note OpenerDirector: 24e8.  Return values should be the same
     as for *note default_open(): 251c.

 -- Method: BaseHandler.http_error_default (req, fp, code, msg, hdrs)

     This method is `not' defined in *note BaseHandler: 24ed, but
     subclasses should override it if they intend to provide a catch-all
     for otherwise unhandled HTTP errors.  It will be called
     automatically by the *note OpenerDirector: 24e8. getting the error,
     and should not normally be called in other circumstances.

     `req' will be a *note Request: 4f8. object, `fp' will be a
     file-like object with the HTTP error body, `code' will be the
     three-digit code of the error, `msg' will be the user-visible
     explanation of the code and `hdrs' will be a mapping object with
     the headers of the error.

     Return values and exceptions raised should be the same as those of
     *note urlopen(): 35f.

 -- Method: BaseHandler.http_error_nnn (req, fp, code, msg, hdrs)

     `nnn' should be a three-digit HTTP error code.  This method is also
     not defined in *note BaseHandler: 24ed, but will be called, if it
     exists, on an instance of a subclass, when an HTTP error with code
     `nnn' occurs.

     Subclasses should override this method to handle specific HTTP
     errors.

     Arguments, return values and exceptions raised should be the same
     as for *note http_error_default(): 251e.

 -- Method: BaseHandler.protocol_request (req)

     This method is `not' defined in *note BaseHandler: 24ed, but
     subclasses should define it if they want to pre-process requests of
     the given protocol.

     This method, if defined, will be called by the parent *note
     OpenerDirector: 24e8.  `req' will be a *note Request: 4f8. object.
     The return value should be a *note Request: 4f8. object.

 -- Method: BaseHandler.protocol_response (req, response)

     This method is `not' defined in *note BaseHandler: 24ed, but
     subclasses should define it if they want to post-process responses
     of the given protocol.

     This method, if defined, will be called by the parent *note
     OpenerDirector: 24e8.  `req' will be a *note Request: 4f8. object.
     `response' will be an object implementing the same interface as the
     return value of *note urlopen(): 35f.  The return value should
     implement the same interface as the return value of *note
     urlopen(): 35f.


File: python.info,  Node: HTTPRedirectHandler Objects,  Next: HTTPCookieProcessor Objects,  Prev: BaseHandler Objects,  Up: urllib request --- Extensible library for opening URLs

5.21.6.4 HTTPRedirectHandler Objects
....................................

     Note: Some HTTP redirections require action from this module’s
     client code.  If this is the case, *note HTTPError: 4fe. is raised.
     See RFC 2616(1) for details of the precise meanings of the various
     redirection codes.

     An ‘HTTPError’ exception raised as a security consideration if the
     HTTPRedirectHandler is presented with a redirected url which is not
     an HTTP, HTTPS or FTP url.

 -- Method: HTTPRedirectHandler.redirect_request (req, fp, code, msg,
          hdrs, newurl)

     Return a *note Request: 4f8. or ‘None’ in response to a redirect.
     This is called by the default implementations of the
     ‘http_error_30*()’ methods when a redirection is received from the
     server.  If a redirection should take place, return a new *note
     Request: 4f8. to allow ‘http_error_30*()’ to perform the redirect
     to `newurl'.  Otherwise, raise *note HTTPError: 4fe. if no other
     handler should try to handle this URL, or return ‘None’ if you
     can’t but another handler might.

          Note: The default implementation of this method does not
          strictly follow RFC 2616(2), which says that 301 and 302
          responses to ‘POST’ requests must not be automatically
          redirected without confirmation by the user.  In reality,
          browsers do allow automatic redirection of these responses,
          changing the POST to a ‘GET’, and the default implementation
          reproduces this behavior.

 -- Method: HTTPRedirectHandler.http_error_301 (req, fp, code, msg,
          hdrs)

     Redirect to the ‘Location:’ or ‘URI:’ URL. This method is called by
     the parent *note OpenerDirector: 24e8. when getting an HTTP ’moved
     permanently’ response.

 -- Method: HTTPRedirectHandler.http_error_302 (req, fp, code, msg,
          hdrs)

     The same as *note http_error_301(): 2523, but called for the
     ’found’ response.

 -- Method: HTTPRedirectHandler.http_error_303 (req, fp, code, msg,
          hdrs)

     The same as *note http_error_301(): 2523, but called for the ’see
     other’ response.

 -- Method: HTTPRedirectHandler.http_error_307 (req, fp, code, msg,
          hdrs)

     The same as *note http_error_301(): 2523, but called for the
     ’temporary redirect’ response.

   ---------- Footnotes ----------

   (1) https://tools.ietf.org/html/rfc2616.html

   (2) https://tools.ietf.org/html/rfc2616.html


File: python.info,  Node: HTTPCookieProcessor Objects,  Next: ProxyHandler Objects,  Prev: HTTPRedirectHandler Objects,  Up: urllib request --- Extensible library for opening URLs

5.21.6.5 HTTPCookieProcessor Objects
....................................

*note HTTPCookieProcessor: 24fa. instances have one attribute:

 -- Attribute: HTTPCookieProcessor.cookiejar

     The *note http.cookiejar.CookieJar: 252a. in which cookies are
     stored.


File: python.info,  Node: ProxyHandler Objects,  Next: HTTPPasswordMgr Objects,  Prev: HTTPCookieProcessor Objects,  Up: urllib request --- Extensible library for opening URLs

5.21.6.6 ProxyHandler Objects
.............................

 -- Method: ProxyHandler.protocol_open (request)

     The *note ProxyHandler: 24ea. will have a method ‘protocol_open()’
     for every `protocol' which has a proxy in the `proxies' dictionary
     given in the constructor.  The method will modify requests to go
     through the proxy, by calling ‘request.set_proxy()’, and call the
     next handler in the chain to actually execute the protocol.


File: python.info,  Node: HTTPPasswordMgr Objects,  Next: HTTPPasswordMgrWithPriorAuth Objects,  Prev: ProxyHandler Objects,  Up: urllib request --- Extensible library for opening URLs

5.21.6.7 HTTPPasswordMgr Objects
................................

These methods are available on *note HTTPPasswordMgr: 24fb. and *note
HTTPPasswordMgrWithDefaultRealm: 24fc. objects.

 -- Method: HTTPPasswordMgr.add_password (realm, uri, user, passwd)

     `uri' can be either a single URI, or a sequence of URIs.  `realm',
     `user' and `passwd' must be strings.  This causes ‘(user, passwd)’
     to be used as authentication tokens when authentication for `realm'
     and a super-URI of any of the given URIs is given.

 -- Method: HTTPPasswordMgr.find_user_password (realm, authuri)

     Get user/password for given realm and URI, if any.  This method
     will return ‘(None, None)’ if there is no matching user/password.

     For *note HTTPPasswordMgrWithDefaultRealm: 24fc. objects, the realm
     ‘None’ will be searched if the given `realm' has no matching
     user/password.


File: python.info,  Node: HTTPPasswordMgrWithPriorAuth Objects,  Next: AbstractBasicAuthHandler Objects,  Prev: HTTPPasswordMgr Objects,  Up: urllib request --- Extensible library for opening URLs

5.21.6.8 HTTPPasswordMgrWithPriorAuth Objects
.............................................

This password manager extends *note HTTPPasswordMgrWithDefaultRealm:
24fc. to support tracking URIs for which authentication credentials
should always be sent.

 -- Method: HTTPPasswordMgrWithPriorAuth.add_password (realm, uri, user,
          passwd, is_authenticated=False)

     `realm', `uri', `user', `passwd' are as for *note
     HTTPPasswordMgr.add_password(): 252e.  `is_authenticated' sets the
     initial value of the ‘is_authenticated’ flag for the given URI or
     list of URIs.  If `is_authenticated' is specified as ‘True’,
     `realm' is ignored.

 -- Method: HTTPPasswordMgr.find_user_password (realm, authuri)

     Same as for *note HTTPPasswordMgrWithDefaultRealm: 24fc. objects

 -- Method: HTTPPasswordMgrWithPriorAuth.update_authenticated (self,
          uri, is_authenticated=False)

     Update the ‘is_authenticated’ flag for the given `uri' or list of
     URIs.

 -- Method: HTTPPasswordMgrWithPriorAuth.is_authenticated (self,
          authuri)

     Returns the current state of the ‘is_authenticated’ flag for the
     given URI.


File: python.info,  Node: AbstractBasicAuthHandler Objects,  Next: HTTPBasicAuthHandler Objects,  Prev: HTTPPasswordMgrWithPriorAuth Objects,  Up: urllib request --- Extensible library for opening URLs

5.21.6.9 AbstractBasicAuthHandler Objects
.........................................

 -- Method: AbstractBasicAuthHandler.http_error_auth_reqed (authreq,
          host, req, headers)

     Handle an authentication request by getting a user/password pair,
     and re-trying the request.  `authreq' should be the name of the
     header where the information about the realm is included in the
     request, `host' specifies the URL and path to authenticate for,
     `req' should be the (failed) *note Request: 4f8. object, and
     `headers' should be the error headers.

     `host' is either an authority (e.g.  ‘"python.org"’) or a URL
     containing an authority component (e.g.  ‘"http://python.org/"’).
     In either case, the authority must not contain a userinfo component
     (so, ‘"python.org"’ and ‘"python.org:80"’ are fine,
     ‘"joe:password@python.org"’ is not).


File: python.info,  Node: HTTPBasicAuthHandler Objects,  Next: ProxyBasicAuthHandler Objects,  Prev: AbstractBasicAuthHandler Objects,  Up: urllib request --- Extensible library for opening URLs

5.21.6.10 HTTPBasicAuthHandler Objects
......................................

 -- Method: HTTPBasicAuthHandler.http_error_401 (req, fp, code, msg,
          hdrs)

     Retry the request with authentication information, if available.


File: python.info,  Node: ProxyBasicAuthHandler Objects,  Next: AbstractDigestAuthHandler Objects,  Prev: HTTPBasicAuthHandler Objects,  Up: urllib request --- Extensible library for opening URLs

5.21.6.11 ProxyBasicAuthHandler Objects
.......................................

 -- Method: ProxyBasicAuthHandler.http_error_407 (req, fp, code, msg,
          hdrs)

     Retry the request with authentication information, if available.


File: python.info,  Node: AbstractDigestAuthHandler Objects,  Next: HTTPDigestAuthHandler Objects,  Prev: ProxyBasicAuthHandler Objects,  Up: urllib request --- Extensible library for opening URLs

5.21.6.12 AbstractDigestAuthHandler Objects
...........................................

 -- Method: AbstractDigestAuthHandler.http_error_auth_reqed (authreq,
          host, req, headers)

     `authreq' should be the name of the header where the information
     about the realm is included in the request, `host' should be the
     host to authenticate to, `req' should be the (failed) *note
     Request: 4f8. object, and `headers' should be the error headers.


File: python.info,  Node: HTTPDigestAuthHandler Objects,  Next: ProxyDigestAuthHandler Objects,  Prev: AbstractDigestAuthHandler Objects,  Up: urllib request --- Extensible library for opening URLs

5.21.6.13 HTTPDigestAuthHandler Objects
.......................................

 -- Method: HTTPDigestAuthHandler.http_error_401 (req, fp, code, msg,
          hdrs)

     Retry the request with authentication information, if available.


File: python.info,  Node: ProxyDigestAuthHandler Objects,  Next: HTTPHandler Objects,  Prev: HTTPDigestAuthHandler Objects,  Up: urllib request --- Extensible library for opening URLs

5.21.6.14 ProxyDigestAuthHandler Objects
........................................

 -- Method: ProxyDigestAuthHandler.http_error_407 (req, fp, code, msg,
          hdrs)

     Retry the request with authentication information, if available.


File: python.info,  Node: HTTPHandler Objects,  Next: HTTPSHandler Objects,  Prev: ProxyDigestAuthHandler Objects,  Up: urllib request --- Extensible library for opening URLs

5.21.6.15 HTTPHandler Objects
.............................

 -- Method: HTTPHandler.http_open (req)

     Send an HTTP request, which can be either GET or POST, depending on
     ‘req.has_data()’.


File: python.info,  Node: HTTPSHandler Objects,  Next: FileHandler Objects,  Prev: HTTPHandler Objects,  Up: urllib request --- Extensible library for opening URLs

5.21.6.16 HTTPSHandler Objects
..............................

 -- Method: HTTPSHandler.https_open (req)

     Send an HTTPS request, which can be either GET or POST, depending
     on ‘req.has_data()’.


File: python.info,  Node: FileHandler Objects,  Next: DataHandler Objects,  Prev: HTTPSHandler Objects,  Up: urllib request --- Extensible library for opening URLs

5.21.6.17 FileHandler Objects
.............................

 -- Method: FileHandler.file_open (req)

     Open the file locally, if there is no host name, or the host name
     is ‘'localhost'’.

     Changed in version 3.2: This method is applicable only for local
     hostnames.  When a remote hostname is given, an *note URLError:
     24e7. is raised.


File: python.info,  Node: DataHandler Objects,  Next: FTPHandler Objects,  Prev: FileHandler Objects,  Up: urllib request --- Extensible library for opening URLs

5.21.6.18 DataHandler Objects
.............................

 -- Method: DataHandler.data_open (req)

     Read a data URL. This kind of URL contains the content encoded in
     the URL itself.  The data URL syntax is specified in RFC 2397(1).
     This implementation ignores white spaces in base64 encoded data
     URLs so the URL may be wrapped in whatever source file it comes
     from.  But even though some browsers don’t mind about a missing
     padding at the end of a base64 encoded data URL, this
     implementation will raise an *note ValueError: 19c. in that case.

   ---------- Footnotes ----------

   (1) https://tools.ietf.org/html/rfc2397.html


File: python.info,  Node: FTPHandler Objects,  Next: CacheFTPHandler Objects,  Prev: DataHandler Objects,  Up: urllib request --- Extensible library for opening URLs

5.21.6.19 FTPHandler Objects
............................

 -- Method: FTPHandler.ftp_open (req)

     Open the FTP file indicated by `req'.  The login is always done
     with empty username and password.


File: python.info,  Node: CacheFTPHandler Objects,  Next: UnknownHandler Objects,  Prev: FTPHandler Objects,  Up: urllib request --- Extensible library for opening URLs

5.21.6.20 CacheFTPHandler Objects
.................................

*note CacheFTPHandler: 2505. objects are *note FTPHandler: 24f1. objects
with the following additional methods:

 -- Method: CacheFTPHandler.setTimeout (t)

     Set timeout of connections to `t' seconds.

 -- Method: CacheFTPHandler.setMaxConns (m)

     Set maximum number of cached connections to `m'.


File: python.info,  Node: UnknownHandler Objects,  Next: HTTPErrorProcessor Objects,  Prev: CacheFTPHandler Objects,  Up: urllib request --- Extensible library for opening URLs

5.21.6.21 UnknownHandler Objects
................................

 -- Method: UnknownHandler.unknown_open ()

     Raise a *note URLError: 24e7. exception.


File: python.info,  Node: HTTPErrorProcessor Objects,  Next: Examples<15>,  Prev: UnknownHandler Objects,  Up: urllib request --- Extensible library for opening URLs

5.21.6.22 HTTPErrorProcessor Objects
....................................

 -- Method: HTTPErrorProcessor.http_response ()

     Process HTTP error responses.

     For 200 error codes, the response object is returned immediately.

     For non-200 error codes, this simply passes the job on to the
     ‘protocol_error_code()’ handler methods, via *note
     OpenerDirector.error(): 2516.  Eventually, *note
     HTTPDefaultErrorHandler: 24ef. will raise an *note HTTPError: 4fe.
     if no other handler handles the error.

 -- Method: HTTPErrorProcessor.https_response ()

     Process HTTPS error responses.

     The behavior is same as *note http_response(): 255e.


File: python.info,  Node: Examples<15>,  Next: Legacy interface,  Prev: HTTPErrorProcessor Objects,  Up: urllib request --- Extensible library for opening URLs

5.21.6.23 Examples
..................

This example gets the python.org main page and displays the first 300
bytes of it.

     >>> import urllib.request
     >>> with urllib.request.urlopen('http://www.python.org/') as f:
     ...     print(f.read(300))
     ...
     b'<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">\n\n\n<html
     xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">\n\n<head>\n
     <meta http-equiv="content-type" content="text/html; charset=utf-8" />\n
     <title>Python Programming '

Note that urlopen returns a bytes object.  This is because there is no
way for urlopen to automatically determine the encoding of the byte
stream it receives from the http server.  In general, a program will
decode the returned bytes object to string once it determines or guesses
the appropriate encoding.

The following W3C document, ‘http://www.w3.org/International/O-charset’,
lists the various ways in which a (X)HTML or a XML document could have
specified its encoding information.

As the python.org website uses `utf-8' encoding as specified in its meta
tag, we will use the same for decoding the bytes object.

     >>> with urllib.request.urlopen('http://www.python.org/') as f:
     ...     print(f.read(100).decode('utf-8'))
     ...
     <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtm

It is also possible to achieve the same result without using the *note
context manager: 165. approach.

     >>> import urllib.request
     >>> f = urllib.request.urlopen('http://www.python.org/')
     >>> print(f.read(100).decode('utf-8'))
     <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtm

In the following example, we are sending a data-stream to the stdin of a
CGI and reading the data it returns to us.  Note that this example will
only work when the Python installation supports SSL.

     >>> import urllib.request
     >>> req = urllib.request.Request(url='https://localhost/cgi-bin/test.cgi',
     ...                       data=b'This data is passed to stdin of the CGI')
     >>> with urllib.request.urlopen(req) as f:
     ...     print(f.read().decode('utf-8'))
     ...
     Got Data: "This data is passed to stdin of the CGI"

The code for the sample CGI used in the above example is:

     #!/usr/bin/env python
     import sys
     data = sys.stdin.read()
     print('Content-type: text/plain\n\nGot Data: "%s"' % data)

Here is an example of doing a ‘PUT’ request using *note Request: 4f8.:

     import urllib.request
     DATA=b'some data'
     req = urllib.request.Request(url='http://localhost:8080', data=DATA,method='PUT')
     with urllib.request.urlopen(req) as f:
         pass
     print(f.status)
     print(f.reason)

Use of Basic HTTP Authentication:

     import urllib.request
     # Create an OpenerDirector with support for Basic HTTP Authentication...
     auth_handler = urllib.request.HTTPBasicAuthHandler()
     auth_handler.add_password(realm='PDQ Application',
                               uri='https://mahler:8092/site-updates.py',
                               user='klem',
                               passwd='kadidd!ehopper')
     opener = urllib.request.build_opener(auth_handler)
     # ...and install it globally so it can be used with urlopen.
     urllib.request.install_opener(opener)
     urllib.request.urlopen('http://www.example.com/login.html')

*note build_opener(): 24ec. provides many handlers by default, including
a *note ProxyHandler: 24ea.  By default, *note ProxyHandler: 24ea. uses
the environment variables named ‘<scheme>_proxy’, where ‘<scheme>’ is
the URL scheme involved.  For example, the ‘http_proxy’ environment
variable is read to obtain the HTTP proxy’s URL.

This example replaces the default *note ProxyHandler: 24ea. with one
that uses programmatically-supplied proxy URLs, and adds proxy
authorization support with *note ProxyBasicAuthHandler: 2501.

     proxy_handler = urllib.request.ProxyHandler({'http': 'http://www.example.com:3128/'})
     proxy_auth_handler = urllib.request.ProxyBasicAuthHandler()
     proxy_auth_handler.add_password('realm', 'host', 'username', 'password')

     opener = urllib.request.build_opener(proxy_handler, proxy_auth_handler)
     # This time, rather than install the OpenerDirector, we use it directly:
     opener.open('http://www.example.com/login.html')

Adding HTTP headers:

Use the `headers' argument to the *note Request: 4f8. constructor, or:

     import urllib.request
     req = urllib.request.Request('http://www.example.com/')
     req.add_header('Referer', 'http://www.python.org/')
     r = urllib.request.urlopen(req)

*note OpenerDirector: 24e8. automatically adds a ‘User-Agent’ header to
every *note Request: 4f8.  To change this:

     import urllib.request
     opener = urllib.request.build_opener()
     opener.addheaders = [('User-agent', 'Mozilla/5.0')]
     opener.open('http://www.example.com/')

Also, remember that a few standard headers (‘Content-Length’,
‘Content-Type’ and ‘Host’) are added when the *note Request: 4f8. is
passed to *note urlopen(): 35f. (or *note OpenerDirector.open(): 4fc.).
Here is an example session that uses the ‘GET’ method to retrieve a URL
containing parameters:

     >>> import urllib.request
     >>> import urllib.parse
     >>> params = urllib.parse.urlencode({'spam': 1, 'eggs': 2, 'bacon': 0})
     >>> url = "http://www.musi-cal.com/cgi-bin/query?%s" % params
     >>> with urllib.request.urlopen(url) as f:
     ...     print(f.read().decode('utf-8'))
     ...

The following example uses the ‘POST’ method instead.  Note that params
output from urlencode is encoded to bytes before it is sent to urlopen
as data:

     >>> import urllib.request
     >>> import urllib.parse
     >>> data = urllib.parse.urlencode({'spam': 1, 'eggs': 2, 'bacon': 0})
     >>> data = data.encode('ascii')
     >>> with urllib.request.urlopen("http://requestb.in/xrbl82xr", data) as f:
     ...     print(f.read().decode('utf-8'))
     ...

The following example uses an explicitly specified HTTP proxy,
overriding environment settings:

     >>> import urllib.request
     >>> proxies = {'http': 'http://proxy.example.com:8080/'}
     >>> opener = urllib.request.FancyURLopener(proxies)
     >>> with opener.open("http://www.python.org") as f:
     ...     f.read().decode('utf-8')
     ...

The following example uses no proxies at all, overriding environment
settings:

     >>> import urllib.request
     >>> opener = urllib.request.FancyURLopener({})
     >>> with opener.open("http://www.python.org/") as f:
     ...     f.read().decode('utf-8')
     ...


File: python.info,  Node: Legacy interface,  Next: urllib request Restrictions,  Prev: Examples<15>,  Up: urllib request --- Extensible library for opening URLs

5.21.6.24 Legacy interface
..........................

The following functions and classes are ported from the Python 2 module
‘urllib’ (as opposed to ‘urllib2’).  They might become deprecated at
some point in the future.

 -- Function: urllib.request.urlretrieve (url, filename=None,
          reporthook=None, data=None)

     Copy a network object denoted by a URL to a local file.  If the URL
     points to a local file, the object will not be copied unless
     filename is supplied.  Return a tuple ‘(filename, headers)’ where
     `filename' is the local file name under which the object can be
     found, and `headers' is whatever the ‘info()’ method of the object
     returned by *note urlopen(): 35f. returned (for a remote object).
     Exceptions are the same as for *note urlopen(): 35f.

     The second argument, if present, specifies the file location to
     copy to (if absent, the location will be a tempfile with a
     generated name).  The third argument, if present, is a hook
     function that will be called once on establishment of the network
     connection and once after each block read thereafter.  The hook
     will be passed three arguments; a count of blocks transferred so
     far, a block size in bytes, and the total size of the file.  The
     third argument may be ‘-1’ on older FTP servers which do not return
     a file size in response to a retrieval request.

     The following example illustrates the most common usage scenario:

          >>> import urllib.request
          >>> local_filename, headers = urllib.request.urlretrieve('http://python.org/')
          >>> html = open(local_filename)
          >>> html.close()

     If the `url' uses the ‘http:’ scheme identifier, the optional
     `data' argument may be given to specify a ‘POST’ request (normally
     the request type is ‘GET’).  The `data' argument must be a bytes
     object in standard ‘application/x-www-form-urlencoded’ format; see
     the *note urllib.parse.urlencode(): 35e. function.

     *note urlretrieve(): 2564. will raise ‘ContentTooShortError’ when
     it detects that the amount of data available was less than the
     expected amount (which is the size reported by a `Content-Length'
     header).  This can occur, for example, when the download is
     interrupted.

     The `Content-Length' is treated as a lower bound: if there’s more
     data to read, urlretrieve reads more data, but if less data is
     available, it raises the exception.

     You can still retrieve the downloaded data in this case, it is
     stored in the ‘content’ attribute of the exception instance.

     If no `Content-Length' header was supplied, urlretrieve can not
     check the size of the data it has downloaded, and just returns it.
     In this case you just have to assume that the download was
     successful.

 -- Function: urllib.request.urlcleanup ()

     Cleans up temporary files that may have been left behind by
     previous calls to *note urlretrieve(): 2564.

 -- Class: urllib.request.URLopener (proxies=None, **x509)

     Deprecated since version 3.3.

     Base class for opening and reading URLs.  Unless you need to
     support opening objects using schemes other than ‘http:’, ‘ftp:’,
     or ‘file:’, you probably want to use *note FancyURLopener: 24e6.

     By default, the *note URLopener: 24e5. class sends a ‘User-Agent’
     header of ‘urllib/VVV’, where `VVV' is the *note urllib: 11a.
     version number.  Applications can define their own ‘User-Agent’
     header by subclassing *note URLopener: 24e5. or *note
     FancyURLopener: 24e6. and setting the class attribute *note
     version: 2566. to an appropriate string value in the subclass
     definition.

     The optional `proxies' parameter should be a dictionary mapping
     scheme names to proxy URLs, where an empty dictionary turns proxies
     off completely.  Its default value is ‘None’, in which case
     environmental proxy settings will be used if present, as discussed
     in the definition of *note urlopen(): 35f, above.

     Additional keyword parameters, collected in `x509', may be used for
     authentication of the client when using the ‘https:’ scheme.  The
     keywords `key_file' and `cert_file' are supported to provide an SSL
     key and certificate; both are needed to support client
     authentication.

     *note URLopener: 24e5. objects will raise an *note OSError: 4b6.
     exception if the server returns an error code.

           -- Method: open (fullurl, data=None)

               Open `fullurl' using the appropriate protocol.  This
               method sets up cache and proxy information, then calls
               the appropriate open method with its input arguments.  If
               the scheme is not recognized, *note open_unknown(): 2568.
               is called.  The `data' argument has the same meaning as
               the `data' argument of *note urlopen(): 35f.

           -- Method: open_unknown (fullurl, data=None)

               Overridable interface to open unknown URL types.

           -- Method: retrieve (url, filename=None, reporthook=None,
                    data=None)

               Retrieves the contents of `url' and places it in
               `filename'.  The return value is a tuple consisting of a
               local filename and either an *note email.message.Message:
               3d2. object containing the response headers (for remote
               URLs) or ‘None’ (for local URLs).  The caller must then
               open and read the contents of `filename'.  If `filename'
               is not given and the URL refers to a local file, the
               input filename is returned.  If the URL is non-local and
               `filename' is not given, the filename is the output of
               *note tempfile.mktemp(): 1618. with a suffix that matches
               the suffix of the last path component of the input URL.
               If `reporthook' is given, it must be a function accepting
               three numeric parameters: A chunk number, the maximum
               size chunks are read in and the total size of the
               download (-1 if unknown).  It will be called once at the
               start and after each chunk of data is read from the
               network.  `reporthook' is ignored for local URLs.

               If the `url' uses the ‘http:’ scheme identifier, the
               optional `data' argument may be given to specify a ‘POST’
               request (normally the request type is ‘GET’).  The `data'
               argument must in standard
               ‘application/x-www-form-urlencoded’ format; see the *note
               urllib.parse.urlencode(): 35e. function.

           -- Attribute: version

               Variable that specifies the user agent of the opener
               object.  To get *note urllib: 11a. to tell servers that
               it is a particular user agent, set this in a subclass as
               a class variable or in the constructor before calling the
               base constructor.

 -- Class: urllib.request.FancyURLopener (...)

     Deprecated since version 3.3.

     *note FancyURLopener: 24e6. subclasses *note URLopener: 24e5.
     providing default handling for the following HTTP response codes:
     301, 302, 303, 307 and 401.  For the 30x response codes listed
     above, the ‘Location’ header is used to fetch the actual URL. For
     401 response codes (authentication required), basic HTTP
     authentication is performed.  For the 30x response codes, recursion
     is bounded by the value of the `maxtries' attribute, which defaults
     to 10.

     For all other response codes, the method ‘http_error_default()’ is
     called which you can override in subclasses to handle the error
     appropriately.

          Note: According to the letter of RFC 2616(1), 301 and 302
          responses to POST requests must not be automatically
          redirected without confirmation by the user.  In reality,
          browsers do allow automatic redirection of these responses,
          changing the POST to a GET, and *note urllib: 11a. reproduces
          this behaviour.

     The parameters to the constructor are the same as those for *note
     URLopener: 24e5.

          Note: When performing basic authentication, a *note
          FancyURLopener: 24e6. instance calls its *note
          prompt_user_passwd(): 256a. method.  The default
          implementation asks the users for the required information on
          the controlling terminal.  A subclass may override this method
          to support more appropriate behavior if needed.

     The *note FancyURLopener: 24e6. class offers one additional method
     that should be overloaded to provide the appropriate behavior:

      -- Method: prompt_user_passwd (host, realm)

          Return information needed to authenticate the user at the
          given host in the specified security realm.  The return value
          should be a tuple, ‘(user, password)’, which can be used for
          basic authentication.

          The implementation prompts for this information on the
          terminal; an application should override this method to use an
          appropriate interaction model in the local environment.

   ---------- Footnotes ----------

   (1) https://tools.ietf.org/html/rfc2616.html


File: python.info,  Node: urllib request Restrictions,  Prev: Legacy interface,  Up: urllib request --- Extensible library for opening URLs

5.21.6.25 ‘urllib.request’ Restrictions
.......................................

   * Currently, only the following protocols are supported: HTTP
     (versions 0.9 and 1.0), FTP, local files, and data URLs.

     Changed in version 3.4: Added support for data URLs.

   * The caching feature of *note urlretrieve(): 2564. has been disabled
     until someone finds the time to hack proper processing of
     Expiration time headers.

   * There should be a function to query whether a particular URL is in
     the cache.

   * For backward compatibility, if a URL appears to point to a local
     file but the file can’t be opened, the URL is re-interpreted using
     the FTP protocol.  This can sometimes cause confusing error
     messages.

   * The *note urlopen(): 35f. and *note urlretrieve(): 2564. functions
     can cause arbitrarily long delays while waiting for a network
     connection to be set up.  This means that it is difficult to build
     an interactive Web client using these functions without using
     threads.

   * The data returned by *note urlopen(): 35f. or *note urlretrieve():
     2564. is the raw data returned by the server.  This may be binary
     data (such as an image), plain text or (for example) HTML. The HTTP
     protocol provides type information in the reply header, which can
     be inspected by looking at the ‘Content-Type’ header.  If the
     returned data is HTML, you can use the module *note html.parser:
     91. to parse it.

   * The code handling the FTP protocol cannot differentiate between a
     file and a directory.  This can lead to unexpected behavior when
     attempting to read a URL that points to a file that is not
     accessible.  If the URL ends in a ‘/’, it is assumed to refer to a
     directory and will be handled accordingly.  But if an attempt to
     read a file leads to a 550 error (meaning the URL cannot be found
     or is not accessible, often for permission reasons), then the path
     is treated as a directory in order to handle the case when a
     directory is specified by a URL but the trailing ‘/’ has been left
     off.  This can cause misleading results when you try to fetch a
     file whose read permissions make it inaccessible; the FTP code will
     try to read it, fail with a 550 error, and then perform a directory
     listing for the unreadable file.  If fine-grained control is
     needed, consider using the *note ftplib: 83. module, subclassing
     *note FancyURLopener: 24e6, or changing `_urlopener' to meet your
     needs.


File: python.info,  Node: urllib response --- Response classes used by urllib,  Next: urllib parse --- Parse URLs into components,  Prev: urllib request --- Extensible library for opening URLs,  Up: Internet Protocols and Support

5.21.7 ‘urllib.response’ — Response classes used by urllib
----------------------------------------------------------

The *note urllib.response: 11e. module defines functions and classes
which define a minimal file like interface, including ‘read()’ and
‘readline()’.  The typical response object is an addinfourl instance,
which defines an ‘info()’ method and that returns headers and a
‘geturl()’ method that returns the url.  Functions defined by this
module are used internally by the *note urllib.request: 11d. module.


File: python.info,  Node: urllib parse --- Parse URLs into components,  Next: urllib error --- Exception classes raised by urllib request,  Prev: urllib response --- Response classes used by urllib,  Up: Internet Protocols and Support

5.21.8 ‘urllib.parse’ — Parse URLs into components
--------------------------------------------------

`Source code:' Lib/urllib/parse.py(1)

__________________________________________________________________

This module defines a standard interface to break Uniform Resource
Locator (URL) strings up in components (addressing scheme, network
location, path etc.), to combine the components back into a URL string,
and to convert a "relative URL" to an absolute URL given a "base URL."

The module has been designed to match the Internet RFC on Relative
Uniform Resource Locators.  It supports the following URL schemes:
‘file’, ‘ftp’, ‘gopher’, ‘hdl’, ‘http’, ‘https’, ‘imap’, ‘mailto’,
‘mms’, ‘news’, ‘nntp’, ‘prospero’, ‘rsync’, ‘rtsp’, ‘rtspu’, ‘sftp’,
‘shttp’, ‘sip’, ‘sips’, ‘snews’, ‘svn’, ‘svn+ssh’, ‘telnet’, ‘wais’.

The *note urllib.parse: 11c. module defines functions that fall into two
broad categories: URL parsing and URL quoting.  These are covered in
detail in the following sections.

* Menu:

* URL Parsing:: 
* Parsing ASCII Encoded Bytes:: 
* Structured Parse Results:: 
* URL Quoting:: 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/urllib/parse.py


File: python.info,  Node: URL Parsing,  Next: Parsing ASCII Encoded Bytes,  Up: urllib parse --- Parse URLs into components

5.21.8.1 URL Parsing
....................

The URL parsing functions focus on splitting a URL string into its
components, or on combining URL components into a URL string.

 -- Function: urllib.parse.urlparse (urlstring, scheme='',
          allow_fragments=True)

     Parse a URL into six components, returning a 6-tuple.  This
     corresponds to the general structure of a URL:
     ‘scheme://netloc/path;parameters?query#fragment’.  Each tuple item
     is a string, possibly empty.  The components are not broken up in
     smaller parts (for example, the network location is a single
     string), and % escapes are not expanded.  The delimiters as shown
     above are not part of the result, except for a leading slash in the
     `path' component, which is retained if present.  For example:

          >>> from urllib.parse import urlparse
          >>> o = urlparse('http://www.cwi.nl:80/%7Eguido/Python.html')
          >>> o   # doctest: +NORMALIZE_WHITESPACE
          ParseResult(scheme='http', netloc='www.cwi.nl:80', path='/%7Eguido/Python.html',
                      params='', query='', fragment='')
          >>> o.scheme
          'http'
          >>> o.port
          80
          >>> o.geturl()
          'http://www.cwi.nl:80/%7Eguido/Python.html'

     Following the syntax specifications in RFC 1808(1), urlparse
     recognizes a netloc only if it is properly introduced by ’//’.
     Otherwise the input is presumed to be a relative URL and thus to
     start with a path component.

          >>> from urllib.parse import urlparse
          >>> urlparse('//www.cwi.nl:80/%7Eguido/Python.html')
          ParseResult(scheme='', netloc='www.cwi.nl:80', path='/%7Eguido/Python.html',
                     params='', query='', fragment='')
          >>> urlparse('www.cwi.nl/%7Eguido/Python.html')
          ParseResult(scheme='', netloc='', path='www.cwi.nl/%7Eguido/Python.html',
                     params='', query='', fragment='')
          >>> urlparse('help/Python.html')
          ParseResult(scheme='', netloc='', path='help/Python.html', params='',
                     query='', fragment='')

     The `scheme' argument gives the default addressing scheme, to be
     used only if the URL does not specify one.  It should be the same
     type (text or bytes) as `urlstring', except that the default value
     ‘''’ is always allowed, and is automatically converted to ‘b''’ if
     appropriate.

     If the `allow_fragments' argument is false, fragment identifiers
     are not recognized.  Instead, they are parsed as part of the path,
     parameters or query component, and ‘fragment’ is set to the empty
     string in the return value.

     The return value is actually an instance of a subclass of *note
     tuple: 25c.  This class has the following additional read-only
     convenience attributes:

     Attribute              Index       Value                          Value if not present
                                                                       
     ---------------------------------------------------------------------------------------------
                                                                       
     ‘scheme’               0           URL scheme specifier           `scheme' parameter
                                                                       
                                                                       
     ‘netloc’               1           Network location part          empty string
                                                                       
                                                                       
     ‘path’                 2           Hierarchical path              empty string
                                                                       
                                                                       
     ‘params’               3           Parameters for last path       empty string
                                        element                        
                                        
                                                                       
     ‘query’                4           Query component                empty string
                                                                       
                                                                       
     ‘fragment’             5           Fragment identifier            empty string
                                                                       
                                                                       
     ‘username’                         User name                      *note None: 19d.
                                                                       
                                                                       
     ‘password’                         Password                       *note None: 19d.
                                                                       
                                                                       
     ‘hostname’                         Host name (lower case)         *note None: 19d.
                                                                       
                                                                       
     ‘port’                             Port number as integer, if     *note None: 19d.
                                        present                        
                                        

     Reading the ‘port’ attribute will raise a *note ValueError: 19c. if
     an invalid port is specified in the URL. See section *note
     Structured Parse Results: 2570. for more information on the result
     object.

     Changed in version 3.2: Added IPv6 URL parsing capabilities.

     Changed in version 3.3: The fragment is now parsed for all URL
     schemes (unless `allow_fragment' is false), in accordance with RFC
     3986(2).  Previously, a whitelist of schemes that support fragments
     existed.

     Changed in version 3.6: Out-of-range port numbers now raise *note
     ValueError: 19c, instead of returning *note None: 19d.

 -- Function: urllib.parse.parse_qs (qs, keep_blank_values=False,
          strict_parsing=False, encoding='utf-8', errors='replace')

     Parse a query string given as a string argument (data of type
     ‘application/x-www-form-urlencoded’).  Data are returned as a
     dictionary.  The dictionary keys are the unique query variable
     names and the values are lists of values for each name.

     The optional argument `keep_blank_values' is a flag indicating
     whether blank values in percent-encoded queries should be treated
     as blank strings.  A true value indicates that blanks should be
     retained as blank strings.  The default false value indicates that
     blank values are to be ignored and treated as if they were not
     included.

     The optional argument `strict_parsing' is a flag indicating what to
     do with parsing errors.  If false (the default), errors are
     silently ignored.  If true, errors raise a *note ValueError: 19c.
     exception.

     The optional `encoding' and `errors' parameters specify how to
     decode percent-encoded sequences into Unicode characters, as
     accepted by the *note bytes.decode(): 89e. method.

     Use the *note urllib.parse.urlencode(): 35e. function (with the
     ‘doseq’ parameter set to ‘True’) to convert such dictionaries into
     query strings.

     Changed in version 3.2: Add `encoding' and `errors' parameters.

 -- Function: urllib.parse.parse_qsl (qs, keep_blank_values=False,
          strict_parsing=False, encoding='utf-8', errors='replace')

     Parse a query string given as a string argument (data of type
     ‘application/x-www-form-urlencoded’).  Data are returned as a list
     of name, value pairs.

     The optional argument `keep_blank_values' is a flag indicating
     whether blank values in percent-encoded queries should be treated
     as blank strings.  A true value indicates that blanks should be
     retained as blank strings.  The default false value indicates that
     blank values are to be ignored and treated as if they were not
     included.

     The optional argument `strict_parsing' is a flag indicating what to
     do with parsing errors.  If false (the default), errors are
     silently ignored.  If true, errors raise a *note ValueError: 19c.
     exception.

     The optional `encoding' and `errors' parameters specify how to
     decode percent-encoded sequences into Unicode characters, as
     accepted by the *note bytes.decode(): 89e. method.

     Use the *note urllib.parse.urlencode(): 35e. function to convert
     such lists of pairs into query strings.

     Changed in version 3.2: Add `encoding' and `errors' parameters.

 -- Function: urllib.parse.urlunparse (parts)

     Construct a URL from a tuple as returned by ‘urlparse()’.  The
     `parts' argument can be any six-item iterable.  This may result in
     a slightly different, but equivalent URL, if the URL that was
     parsed originally had unnecessary delimiters (for example, a ‘?’
     with an empty query; the RFC states that these are equivalent).

 -- Function: urllib.parse.urlsplit (urlstring, scheme='',
          allow_fragments=True)

     This is similar to *note urlparse(): 19b, but does not split the
     params from the URL. This should generally be used instead of *note
     urlparse(): 19b. if the more recent URL syntax allowing parameters
     to be applied to each segment of the `path' portion of the URL (see
     RFC 2396(3)) is wanted.  A separate function is needed to separate
     the path segments and parameters.  This function returns a 5-tuple:
     (addressing scheme, network location, path, query, fragment
     identifier).

     The return value is actually an instance of a subclass of *note
     tuple: 25c.  This class has the following additional read-only
     convenience attributes:

     Attribute              Index       Value                         Value if not present
                                                                      
     --------------------------------------------------------------------------------------------
                                                                      
     ‘scheme’               0           URL scheme specifier          `scheme' parameter
                                                                      
                                                                      
     ‘netloc’               1           Network location part         empty string
                                                                      
                                                                      
     ‘path’                 2           Hierarchical path             empty string
                                                                      
                                                                      
     ‘query’                3           Query component               empty string
                                                                      
                                                                      
     ‘fragment’             4           Fragment identifier           empty string
                                                                      
                                                                      
     ‘username’                         User name                     *note None: 19d.
                                                                      
                                                                      
     ‘password’                         Password                      *note None: 19d.
                                                                      
                                                                      
     ‘hostname’                         Host name (lower case)        *note None: 19d.
                                                                      
                                                                      
     ‘port’                             Port number as integer, if    *note None: 19d.
                                        present                       
                                        

     Reading the ‘port’ attribute will raise a *note ValueError: 19c. if
     an invalid port is specified in the URL. See section *note
     Structured Parse Results: 2570. for more information on the result
     object.

     Changed in version 3.6: Out-of-range port numbers now raise *note
     ValueError: 19c, instead of returning *note None: 19d.

 -- Function: urllib.parse.urlunsplit (parts)

     Combine the elements of a tuple as returned by *note urlsplit():
     19a. into a complete URL as a string.  The `parts' argument can be
     any five-item iterable.  This may result in a slightly different,
     but equivalent URL, if the URL that was parsed originally had
     unnecessary delimiters (for example, a ?  with an empty query; the
     RFC states that these are equivalent).

 -- Function: urllib.parse.urljoin (base, url, allow_fragments=True)

     Construct a full ("absolute") URL by combining a "base URL"
     (`base') with another URL (`url').  Informally, this uses
     components of the base URL, in particular the addressing scheme,
     the network location and (part of) the path, to provide missing
     components in the relative URL. For example:

          >>> from urllib.parse import urljoin
          >>> urljoin('http://www.cwi.nl/%7Eguido/Python.html', 'FAQ.html')
          'http://www.cwi.nl/%7Eguido/FAQ.html'

     The `allow_fragments' argument has the same meaning and default as
     for *note urlparse(): 19b.

          Note: If `url' is an absolute URL (that is, starting with ‘//’
          or ‘scheme://’), the `url'’s host name and/or scheme will be
          present in the result.  For example:

          >>> urljoin('http://www.cwi.nl/%7Eguido/Python.html',
          ...         '//www.python.org/%7Eguido')
          'http://www.python.org/%7Eguido'

     If you do not want that behavior, preprocess the `url' with *note
     urlsplit(): 19a. and *note urlunsplit(): 2572, removing possible
     `scheme' and `netloc' parts.

     Changed in version 3.5: Behaviour updated to match the semantics
     defined in RFC 3986(4).

 -- Function: urllib.parse.urldefrag (url)

     If `url' contains a fragment identifier, return a modified version
     of `url' with no fragment identifier, and the fragment identifier
     as a separate string.  If there is no fragment identifier in `url',
     return `url' unmodified and an empty string.

     The return value is actually an instance of a subclass of *note
     tuple: 25c.  This class has the following additional read-only
     convenience attributes:

     Attribute              Index       Value                         Value if not present
                                                                      
     --------------------------------------------------------------------------------------------
                                                                      
     ‘url’                  0           URL with no fragment          empty string
                                                                      
                                                                      
     ‘fragment’             1           Fragment identifier           empty string
                                                                      

     See section *note Structured Parse Results: 2570. for more
     information on the result object.

     Changed in version 3.2: Result is a structured object rather than a
     simple 2-tuple.

   ---------- Footnotes ----------

   (1) https://tools.ietf.org/html/rfc1808.html

   (2) https://tools.ietf.org/html/rfc3986.html

   (3) https://tools.ietf.org/html/rfc2396.html

   (4) https://tools.ietf.org/html/rfc3986.html


File: python.info,  Node: Parsing ASCII Encoded Bytes,  Next: Structured Parse Results,  Prev: URL Parsing,  Up: urllib parse --- Parse URLs into components

5.21.8.2 Parsing ASCII Encoded Bytes
....................................

The URL parsing functions were originally designed to operate on
character strings only.  In practice, it is useful to be able to
manipulate properly quoted and encoded URLs as sequences of ASCII bytes.
Accordingly, the URL parsing functions in this module all operate on
*note bytes: 1db. and *note bytearray: 1dc. objects in addition to *note
str: 25a. objects.

If *note str: 25a. data is passed in, the result will also contain only
*note str: 25a. data.  If *note bytes: 1db. or *note bytearray: 1dc.
data is passed in, the result will contain only *note bytes: 1db. data.

Attempting to mix *note str: 25a. data with *note bytes: 1db. or *note
bytearray: 1dc. in a single function call will result in a *note
TypeError: 562. being raised, while attempting to pass in non-ASCII byte
values will trigger *note UnicodeDecodeError: 571.

To support easier conversion of result objects between *note str: 25a.
and *note bytes: 1db, all return values from URL parsing functions
provide either an ‘encode()’ method (when the result contains *note str:
25a. data) or a ‘decode()’ method (when the result contains *note bytes:
1db. data).  The signatures of these methods match those of the
corresponding *note str: 25a. and *note bytes: 1db. methods (except that
the default encoding is ‘'ascii'’ rather than ‘'utf-8'’).  Each produces
a value of a corresponding type that contains either *note bytes: 1db.
data (for ‘encode()’ methods) or *note str: 25a. data (for ‘decode()’
methods).

Applications that need to operate on potentially improperly quoted URLs
that may contain non-ASCII data will need to do their own decoding from
bytes to characters before invoking the URL parsing methods.

The behaviour described in this section applies only to the URL parsing
functions.  The URL quoting functions use their own rules when producing
or consuming byte sequences as detailed in the documentation of the
individual URL quoting functions.

Changed in version 3.2: URL parsing functions now accept ASCII encoded
byte sequences


File: python.info,  Node: Structured Parse Results,  Next: URL Quoting,  Prev: Parsing ASCII Encoded Bytes,  Up: urllib parse --- Parse URLs into components

5.21.8.3 Structured Parse Results
.................................

The result objects from the *note urlparse(): 19b, *note urlsplit():
19a. and *note urldefrag(): 83c. functions are subclasses of the *note
tuple: 25c. type.  These subclasses add the attributes listed in the
documentation for those functions, the encoding and decoding support
described in the previous section, as well as an additional method:

 -- Method: urllib.parse.SplitResult.geturl ()

     Return the re-combined version of the original URL as a string.
     This may differ from the original URL in that the scheme may be
     normalized to lower case and empty components may be dropped.
     Specifically, empty parameters, queries, and fragment identifiers
     will be removed.

     For *note urldefrag(): 83c. results, only empty fragment
     identifiers will be removed.  For *note urlsplit(): 19a. and *note
     urlparse(): 19b. results, all noted changes will be made to the URL
     returned by this method.

     The result of this method remains unchanged if passed back through
     the original parsing function:

          >>> from urllib.parse import urlsplit
          >>> url = 'HTTP://www.Python.org/doc/#'
          >>> r1 = urlsplit(url)
          >>> r1.geturl()
          'http://www.Python.org/doc/'
          >>> r2 = urlsplit(r1.geturl())
          >>> r2.geturl()
          'http://www.Python.org/doc/'

The following classes provide the implementations of the structured
parse results when operating on *note str: 25a. objects:

 -- Class: urllib.parse.DefragResult (url, fragment)

     Concrete class for *note urldefrag(): 83c. results containing *note
     str: 25a. data.  The ‘encode()’ method returns a *note
     DefragResultBytes: 2577. instance.

     New in version 3.2.

 -- Class: urllib.parse.ParseResult (scheme, netloc, path, params,
          query, fragment)

     Concrete class for *note urlparse(): 19b. results containing *note
     str: 25a. data.  The ‘encode()’ method returns a *note
     ParseResultBytes: 2579. instance.

 -- Class: urllib.parse.SplitResult (scheme, netloc, path, query,
          fragment)

     Concrete class for *note urlsplit(): 19a. results containing *note
     str: 25a. data.  The ‘encode()’ method returns a *note
     SplitResultBytes: 257b. instance.

The following classes provide the implementations of the parse results
when operating on *note bytes: 1db. or *note bytearray: 1dc. objects:

 -- Class: urllib.parse.DefragResultBytes (url, fragment)

     Concrete class for *note urldefrag(): 83c. results containing *note
     bytes: 1db. data.  The ‘decode()’ method returns a *note
     DefragResult: 2576. instance.

     New in version 3.2.

 -- Class: urllib.parse.ParseResultBytes (scheme, netloc, path, params,
          query, fragment)

     Concrete class for *note urlparse(): 19b. results containing *note
     bytes: 1db. data.  The ‘decode()’ method returns a *note
     ParseResult: 2578. instance.

     New in version 3.2.

 -- Class: urllib.parse.SplitResultBytes (scheme, netloc, path, query,
          fragment)

     Concrete class for *note urlsplit(): 19a. results containing *note
     bytes: 1db. data.  The ‘decode()’ method returns a *note
     SplitResult: 257a. instance.

     New in version 3.2.


File: python.info,  Node: URL Quoting,  Prev: Structured Parse Results,  Up: urllib parse --- Parse URLs into components

5.21.8.4 URL Quoting
....................

The URL quoting functions focus on taking program data and making it
safe for use as URL components by quoting special characters and
appropriately encoding non-ASCII text.  They also support reversing
these operations to recreate the original data from the contents of a
URL component if that task isn’t already covered by the URL parsing
functions above.

 -- Function: urllib.parse.quote (string, safe='/', encoding=None,
          errors=None)

     Replace special characters in `string' using the ‘%xx’ escape.
     Letters, digits, and the characters ‘'_.-'’ are never quoted.  By
     default, this function is intended for quoting the path section of
     URL. The optional `safe' parameter specifies additional ASCII
     characters that should not be quoted — its default value is ‘'/'’.

     `string' may be either a *note str: 25a. or a *note bytes: 1db.

     The optional `encoding' and `errors' parameters specify how to deal
     with non-ASCII characters, as accepted by the *note str.encode():
     89d. method.  `encoding' defaults to ‘'utf-8'’.  `errors' defaults
     to ‘'strict'’, meaning unsupported characters raise a *note
     UnicodeEncodeError: 852.  `encoding' and `errors' must not be
     supplied if `string' is a *note bytes: 1db, or a *note TypeError:
     562. is raised.

     Note that ‘quote(string, safe, encoding, errors)’ is equivalent to
     ‘quote_from_bytes(string.encode(encoding, errors), safe)’.

     Example: ‘quote('/El Niño/')’ yields ‘'/El%20Ni%C3%B1o/'’.

 -- Function: urllib.parse.quote_plus (string, safe='', encoding=None,
          errors=None)

     Like *note quote(): 24f5, but also replace spaces by plus signs, as
     required for quoting HTML form values when building up a query
     string to go into a URL. Plus signs in the original string are
     escaped unless they are included in `safe'.  It also does not have
     `safe' default to ‘'/'’.

     Example: ‘quote_plus('/El Niño/')’ yields ‘'%2FEl+Ni%C3%B1o%2F'’.

 -- Function: urllib.parse.quote_from_bytes (bytes, safe='/')

     Like *note quote(): 24f5, but accepts a *note bytes: 1db. object
     rather than a *note str: 25a, and does not perform string-to-bytes
     encoding.

     Example: ‘quote_from_bytes(b'a&\xef')’ yields ‘'a%26%EF'’.

 -- Function: urllib.parse.unquote (string, encoding='utf-8',
          errors='replace')

     Replace ‘%xx’ escapes by their single-character equivalent.  The
     optional `encoding' and `errors' parameters specify how to decode
     percent-encoded sequences into Unicode characters, as accepted by
     the *note bytes.decode(): 89e. method.

     `string' must be a *note str: 25a.

     `encoding' defaults to ‘'utf-8'’.  `errors' defaults to
     ‘'replace'’, meaning invalid sequences are replaced by a
     placeholder character.

     Example: ‘unquote('/El%20Ni%C3%B1o/')’ yields ‘'/El Niño/'’.

 -- Function: urllib.parse.unquote_plus (string, encoding='utf-8',
          errors='replace')

     Like *note unquote(): 24f7, but also replace plus signs by spaces,
     as required for unquoting HTML form values.

     `string' must be a *note str: 25a.

     Example: ‘unquote_plus('/El+Ni%C3%B1o/')’ yields ‘'/El Niño/'’.

 -- Function: urllib.parse.unquote_to_bytes (string)

     Replace ‘%xx’ escapes by their single-octet equivalent, and return
     a *note bytes: 1db. object.

     `string' may be either a *note str: 25a. or a *note bytes: 1db.

     If it is a *note str: 25a, unescaped non-ASCII characters in
     `string' are encoded into UTF-8 bytes.

     Example: ‘unquote_to_bytes('a%26%EF')’ yields ‘b'a&\xef'’.

 -- Function: urllib.parse.urlencode (query, doseq=False, safe='',
          encoding=None, errors=None, quote_via=quote_plus)

     Convert a mapping object or a sequence of two-element tuples, which
     may contain *note str: 25a. or *note bytes: 1db. objects, to a
     percent-encoded ASCII text string.  If the resultant string is to
     be used as a `data' for POST operation with the *note urlopen():
     35f. function, then it should be encoded to bytes, otherwise it
     would result in a *note TypeError: 562.

     The resulting string is a series of ‘key=value’ pairs separated by
     ‘'&'’ characters, where both `key' and `value' are quoted using the
     `quote_via' function.  By default, *note quote_plus(): 83d. is used
     to quote the values, which means spaces are quoted as a ‘'+'’
     character and ’/’ characters are encoded as ‘%2F’, which follows
     the standard for GET requests
     (‘application/x-www-form-urlencoded’).  An alternate function that
     can be passed as `quote_via' is *note quote(): 24f5, which will
     encode spaces as ‘%20’ and not encode ’/’ characters.  For maximum
     control of what is quoted, use ‘quote’ and specify a value for
     `safe'.

     When a sequence of two-element tuples is used as the `query'
     argument, the first element of each tuple is a key and the second
     is a value.  The value element in itself can be a sequence and in
     that case, if the optional parameter `doseq' is evaluates to
     `True', individual ‘key=value’ pairs separated by ‘'&'’ are
     generated for each element of the value sequence for the key.  The
     order of parameters in the encoded string will match the order of
     parameter tuples in the sequence.

     The `safe', `encoding', and `errors' parameters are passed down to
     `quote_via' (the `encoding' and `errors' parameters are only passed
     when a query element is a *note str: 25a.).

     To reverse this encoding process, *note parse_qs(): 2492. and *note
     parse_qsl(): 2495. are provided in this module to parse query
     strings into Python data structures.

     Refer to *note urllib examples: 2562. to find out how urlencode
     method can be used for generating query string for a URL or data
     for POST.

     Changed in version 3.2: Query parameter supports bytes and string
     objects.

     New in version 3.5: `quote_via' parameter.

See also
........

RFC 3986(1) - Uniform Resource Identifiers

     This is the current standard (STD66).  Any changes to urllib.parse
     module should conform to this.  Certain deviations could be
     observed, which are mostly for backward compatibility purposes and
     for certain de-facto parsing requirements as commonly observed in
     major browsers.

RFC 2732(2) - Format for Literal IPv6 Addresses in URL’s.

     This specifies the parsing requirements of IPv6 URLs.

RFC 2396(3) - Uniform Resource Identifiers (URI): Generic Syntax

     Document describing the generic syntactic requirements for both
     Uniform Resource Names (URNs) and Uniform Resource Locators (URLs).

RFC 2368(4) - The mailto URL scheme.

     Parsing requirements for mailto url schemes.

RFC 1808(5) - Relative Uniform Resource Locators

     This Request For Comments includes the rules for joining an
     absolute and a relative URL, including a fair number of "Abnormal
     Examples" which govern the treatment of border cases.

RFC 1738(6) - Uniform Resource Locators (URL)

     This specifies the formal syntax and semantics of absolute URLs.

   ---------- Footnotes ----------

   (1) https://tools.ietf.org/html/rfc3986.html

   (2) https://tools.ietf.org/html/rfc2732.html

   (3) https://tools.ietf.org/html/rfc2396.html

   (4) https://tools.ietf.org/html/rfc2368.html

   (5) https://tools.ietf.org/html/rfc1808.html

   (6) https://tools.ietf.org/html/rfc1738.html


File: python.info,  Node: urllib error --- Exception classes raised by urllib request,  Next: urllib robotparser --- Parser for robots txt,  Prev: urllib parse --- Parse URLs into components,  Up: Internet Protocols and Support

5.21.9 ‘urllib.error’ — Exception classes raised by urllib.request
------------------------------------------------------------------

The *note urllib.error: 11b. module defines the exception classes for
exceptions raised by *note urllib.request: 11d.  The base exception
class is *note URLError: 24e7.

The following exceptions are raised by *note urllib.error: 11b. as
appropriate:

 -- Exception: urllib.error.URLError

     The handlers raise this exception (or derived exceptions) when they
     run into a problem.  It is a subclass of *note OSError: 4b6.

      -- Attribute: reason

          The reason for this error.  It can be a message string or
          another exception instance.

     Changed in version 3.3: *note URLError: 24e7. has been made a
     subclass of *note OSError: 4b6. instead of *note IOError: 5b0.

 -- Exception: urllib.error.HTTPError

     Though being an exception (a subclass of *note URLError: 24e7.), an
     *note HTTPError: 4fe. can also function as a non-exceptional
     file-like return value (the same thing that *note urlopen(): 35f.
     returns).  This is useful when handling exotic HTTP errors, such as
     requests for authentication.

      -- Attribute: code

          An HTTP status code as defined in RFC 2616(1).  This numeric
          value corresponds to a value found in the dictionary of codes
          as found in *note
          http.server.BaseHTTPRequestHandler.responses: 2584.

      -- Attribute: reason

          This is usually a string explaining the reason for this error.

      -- Attribute: headers

          The HTTP response headers for the HTTP request that caused the
          *note HTTPError: 4fe.

          New in version 3.4.

 -- Exception: urllib.error.ContentTooShortError (msg, content)

     This exception is raised when the *note urlretrieve(): 2564.
     function detects that the amount of the downloaded data is less
     than the expected amount (given by the `Content-Length' header).
     The ‘content’ attribute stores the downloaded (and supposedly
     truncated) data.

   ---------- Footnotes ----------

   (1) http://www.faqs.org/rfcs/rfc2616.html


File: python.info,  Node: urllib robotparser --- Parser for robots txt,  Next: http --- HTTP modules,  Prev: urllib error --- Exception classes raised by urllib request,  Up: Internet Protocols and Support

5.21.10 ‘urllib.robotparser’ — Parser for robots.txt
----------------------------------------------------

This module provides a single class, *note RobotFileParser: 176, which
answers questions about whether or not a particular user agent can fetch
a URL on the Web site that published the ‘robots.txt’ file.  For more
details on the structure of ‘robots.txt’ files, see
‘http://www.robotstxt.org/orig.html’.

 -- Class: urllib.robotparser.RobotFileParser (url='')

     This class provides methods to read, parse and answer questions
     about the ‘robots.txt’ file at `url'.

      -- Method: set_url (url)

          Sets the URL referring to a ‘robots.txt’ file.

      -- Method: read ()

          Reads the ‘robots.txt’ URL and feeds it to the parser.

      -- Method: parse (lines)

          Parses the lines argument.

      -- Method: can_fetch (useragent, url)

          Returns ‘True’ if the `useragent' is allowed to fetch the
          `url' according to the rules contained in the parsed
          ‘robots.txt’ file.

      -- Method: mtime ()

          Returns the time the ‘robots.txt’ file was last fetched.  This
          is useful for long-running web spiders that need to check for
          new ‘robots.txt’ files periodically.

      -- Method: modified ()

          Sets the time the ‘robots.txt’ file was last fetched to the
          current time.

      -- Method: crawl_delay (useragent)

          Returns the value of the ‘Crawl-delay’ parameter from
          ‘robots.txt’ for the `useragent' in question.  If there is no
          such parameter or it doesn’t apply to the `useragent'
          specified or the ‘robots.txt’ entry for this parameter has
          invalid syntax, return ‘None’.

          New in version 3.6.

      -- Method: request_rate (useragent)

          Returns the contents of the ‘Request-rate’ parameter from
          ‘robots.txt’ in the form of a *note namedtuple(): 229.
          ‘(requests, seconds)’.  If there is no such parameter or it
          doesn’t apply to the `useragent' specified or the ‘robots.txt’
          entry for this parameter has invalid syntax, return ‘None’.

          New in version 3.6.

The following example demonstrates basic use of the *note
RobotFileParser: 176. class:

     >>> import urllib.robotparser
     >>> rp = urllib.robotparser.RobotFileParser()
     >>> rp.set_url("http://www.musi-cal.com/robots.txt")
     >>> rp.read()
     >>> rrate = rp.request_rate("*")
     >>> rrate.requests
     3
     >>> rrate.seconds
     20
     >>> rp.crawl_delay("*")
     6
     >>> rp.can_fetch("*", "http://www.musi-cal.com/cgi-bin/search?city=San+Francisco")
     False
     >>> rp.can_fetch("*", "http://www.musi-cal.com/")
     True


File: python.info,  Node: http --- HTTP modules,  Next: http client --- HTTP protocol client,  Prev: urllib robotparser --- Parser for robots txt,  Up: Internet Protocols and Support

5.21.11 ‘http’ — HTTP modules
-----------------------------

`Source code:' Lib/http/__init__.py(1)

*note http: 92. is a package that collects several modules for working
with the HyperText Transfer Protocol:

   * *note http.client: 93. is a low-level HTTP protocol client; for
     high-level URL opening use *note urllib.request: 11d.

   * *note http.server: 96. contains basic HTTP server classes based on
     *note socketserver: ee.

   * *note http.cookies: 95. has utilities for implementing state
     management with cookies

   * *note http.cookiejar: 94. provides persistence of cookies

*note http: 92. is also a module that defines a number of HTTP status
codes and associated messages through the *note http.HTTPStatus: 295.
enum:

 -- Class: http.HTTPStatus

     New in version 3.5.

     A subclass of *note enum.IntEnum: 1393. that defines a set of HTTP
     status codes, reason phrases and long descriptions written in
     English.

     Usage:

          >>> from http import HTTPStatus
          >>> HTTPStatus.OK
          <HTTPStatus.OK: 200>
          >>> HTTPStatus.OK == 200
          True
          >>> http.HTTPStatus.OK.value
          200
          >>> HTTPStatus.OK.phrase
          'OK'
          >>> HTTPStatus.OK.description
          'Request fulfilled, document follows'
          >>> list(HTTPStatus)
          [<HTTPStatus.CONTINUE: 100>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>, ...]

* Menu:

* HTTP status codes:: 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/http/__init__.py


File: python.info,  Node: HTTP status codes,  Up: http --- HTTP modules

5.21.11.1 HTTP status codes
...........................

Supported, IANA-registered(1) status codes available in *note
http.HTTPStatus: 295. are:

Code        Enum Name                               Details
                                                    
----------------------------------------------------------------------------------------------------------------------------------------
                                                    
‘100’       ‘CONTINUE’                              HTTP/1.1 RFC 7231(2), Section 6.2.1
                                                    
                                                    
‘101’       ‘SWITCHING_PROTOCOLS’                   HTTP/1.1 RFC 7231(3), Section 6.2.2
                                                    
                                                    
‘102’       ‘PROCESSING’                            WebDAV RFC 2518(4), Section 10.1
                                                    
                                                    
‘200’       ‘OK’                                    HTTP/1.1 RFC 7231(5), Section 6.3.1
                                                    
                                                    
‘201’       ‘CREATED’                               HTTP/1.1 RFC 7231(6), Section 6.3.2
                                                    
                                                    
‘202’       ‘ACCEPTED’                              HTTP/1.1 RFC 7231(7), Section 6.3.3
                                                    
                                                    
‘203’       ‘NON_AUTHORITATIVE_INFORMATION’         HTTP/1.1 RFC 7231(8), Section 6.3.4
                                                    
                                                    
‘204’       ‘NO_CONTENT’                            HTTP/1.1 RFC 7231(9), Section 6.3.5
                                                    
                                                    
‘205’       ‘RESET_CONTENT’                         HTTP/1.1 RFC 7231(10), Section 6.3.6
                                                    
                                                    
‘206’       ‘PARTIAL_CONTENT’                       HTTP/1.1 RFC 7233(11), Section 4.1
                                                    
                                                    
‘207’       ‘MULTI_STATUS’                          WebDAV RFC 4918(12), Section 11.1
                                                    
                                                    
‘208’       ‘ALREADY_REPORTED’                      WebDAV Binding Extensions RFC 5842(13), Section 7.1 (Experimental)
                                                    
                                                    
‘226’       ‘IM_USED’                               Delta Encoding in HTTP RFC 3229(14), Section 10.4.1
                                                    
                                                    
‘300’       ‘MULTIPLE_CHOICES’                      HTTP/1.1 RFC 7231(15), Section 6.4.1
                                                    
                                                    
‘301’       ‘MOVED_PERMANENTLY’                     HTTP/1.1 RFC 7231(16), Section 6.4.2
                                                    
                                                    
‘302’       ‘FOUND’                                 HTTP/1.1 RFC 7231(17), Section 6.4.3
                                                    
                                                    
‘303’       ‘SEE_OTHER’                             HTTP/1.1 RFC 7231(18), Section 6.4.4
                                                    
                                                    
‘304’       ‘NOT_MODIFIED’                          HTTP/1.1 RFC 7232(19), Section 4.1
                                                    
                                                    
‘305’       ‘USE_PROXY’                             HTTP/1.1 RFC 7231(20), Section 6.4.5
                                                    
                                                    
‘307’       ‘TEMPORARY_REDIRECT’                    HTTP/1.1 RFC 7231(21), Section 6.4.7
                                                    
                                                    
‘308’       ‘PERMANENT_REDIRECT’                    Permanent Redirect RFC 7238(22), Section 3 (Experimental)
                                                    
                                                    
‘400’       ‘BAD_REQUEST’                           HTTP/1.1 RFC 7231(23), Section 6.5.1
                                                    
                                                    
‘401’       ‘UNAUTHORIZED’                          HTTP/1.1 Authentication RFC 7235(24), Section 3.1
                                                    
                                                    
‘402’       ‘PAYMENT_REQUIRED’                      HTTP/1.1 RFC 7231(25), Section 6.5.2
                                                    
                                                    
‘403’       ‘FORBIDDEN’                             HTTP/1.1 RFC 7231(26), Section 6.5.3
                                                    
                                                    
‘404’       ‘NOT_FOUND’                             HTTP/1.1 RFC 7231(27), Section 6.5.4
                                                    
                                                    
‘405’       ‘METHOD_NOT_ALLOWED’                    HTTP/1.1 RFC 7231(28), Section 6.5.5
                                                    
                                                    
‘406’       ‘NOT_ACCEPTABLE’                        HTTP/1.1 RFC 7231(29), Section 6.5.6
                                                    
                                                    
‘407’       ‘PROXY_AUTHENTICATION_REQUIRED’         HTTP/1.1 Authentication RFC 7235(30), Section 3.2
                                                    
                                                    
‘408’       ‘REQUEST_TIMEOUT’                       HTTP/1.1 RFC 7231(31), Section 6.5.7
                                                    
                                                    
‘409’       ‘CONFLICT’                              HTTP/1.1 RFC 7231(32), Section 6.5.8
                                                    
                                                    
‘410’       ‘GONE’                                  HTTP/1.1 RFC 7231(33), Section 6.5.9
                                                    
                                                    
‘411’       ‘LENGTH_REQUIRED’                       HTTP/1.1 RFC 7231(34), Section 6.5.10
                                                    
                                                    
‘412’       ‘PRECONDITION_FAILED’                   HTTP/1.1 RFC 7232(35), Section 4.2
                                                    
                                                    
‘413’       ‘REQUEST_ENTITY_TOO_LARGE’              HTTP/1.1 RFC 7231(36), Section 6.5.11
                                                    
                                                    
‘414’       ‘REQUEST_URI_TOO_LONG’                  HTTP/1.1 RFC 7231(37), Section 6.5.12
                                                    
                                                    
‘415’       ‘UNSUPPORTED_MEDIA_TYPE’                HTTP/1.1 RFC 7231(38), Section 6.5.13
                                                    
                                                    
‘416’       ‘REQUEST_RANGE_NOT_SATISFIABLE’         HTTP/1.1 Range Requests RFC 7233(39), Section 4.4
                                                    
                                                    
‘417’       ‘EXPECTATION_FAILED’                    HTTP/1.1 RFC 7231(40), Section 6.5.14
                                                    
                                                    
‘422’       ‘UNPROCESSABLE_ENTITY’                  WebDAV RFC 4918(41), Section 11.2
                                                    
                                                    
‘423’       ‘LOCKED’                                WebDAV RFC 4918(42), Section 11.3
                                                    
                                                    
‘424’       ‘FAILED_DEPENDENCY’                     WebDAV RFC 4918(43), Section 11.4
                                                    
                                                    
‘426’       ‘UPGRADE_REQUIRED’                      HTTP/1.1 RFC 7231(44), Section 6.5.15
                                                    
                                                    
‘428’       ‘PRECONDITION_REQUIRED’                 Additional HTTP Status Codes RFC 6585(45)
                                                    
                                                    
‘429’       ‘TOO_MANY_REQUESTS’                     Additional HTTP Status Codes RFC 6585(46)
                                                    
                                                    
‘431’       ‘REQUEST_HEADER_FIELDS_TOO_LARGE’       Additional HTTP Status Codes RFC 6585(47)
                                                    
                                                    
‘500’       ‘INTERNAL_SERVER_ERROR’                 HTTP/1.1 RFC 7231(48), Section 6.6.1
                                                    
                                                    
‘501’       ‘NOT_IMPLEMENTED’                       HTTP/1.1 RFC 7231(49), Section 6.6.2
                                                    
                                                    
‘502’       ‘BAD_GATEWAY’                           HTTP/1.1 RFC 7231(50), Section 6.6.3
                                                    
                                                    
‘503’       ‘SERVICE_UNAVAILABLE’                   HTTP/1.1 RFC 7231(51), Section 6.6.4
                                                    
                                                    
‘504’       ‘GATEWAY_TIMEOUT’                       HTTP/1.1 RFC 7231(52), Section 6.6.5
                                                    
                                                    
‘505’       ‘HTTP_VERSION_NOT_SUPPORTED’            HTTP/1.1 RFC 7231(53), Section 6.6.6
                                                    
                                                    
‘506’       ‘VARIANT_ALSO_NEGOTIATES’               Transparent Content Negotiation in HTTP RFC 2295(54), Section 8.1 (Experimental)
                                                    
                                                    
‘507’       ‘INSUFFICIENT_STORAGE’                  WebDAV RFC 4918(55), Section 11.5
                                                    
                                                    
‘508’       ‘LOOP_DETECTED’                         WebDAV Binding Extensions RFC 5842(56), Section 7.2 (Experimental)
                                                    
                                                    
‘510’       ‘NOT_EXTENDED’                          An HTTP Extension Framework RFC 2774(57), Section 7 (Experimental)
                                                    
                                                    
‘511’       ‘NETWORK_AUTHENTICATION_REQUIRED’       Additional HTTP Status Codes RFC 6585(58), Section 6
                                                    

In order to preserve backwards compatibility, enum values are also
present in the *note http.client: 93. module in the form of constants.
The enum name is equal to the constant name (i.e.  ‘http.HTTPStatus.OK’
is also available as ‘http.client.OK’).

   ---------- Footnotes ----------

   (1) 
http://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml

   (2) https://tools.ietf.org/html/rfc7231.html

   (3) https://tools.ietf.org/html/rfc7231.html

   (4) https://tools.ietf.org/html/rfc2518.html

   (5) https://tools.ietf.org/html/rfc7231.html

   (6) https://tools.ietf.org/html/rfc7231.html

   (7) https://tools.ietf.org/html/rfc7231.html

   (8) https://tools.ietf.org/html/rfc7231.html

   (9) https://tools.ietf.org/html/rfc7231.html

   (10) https://tools.ietf.org/html/rfc7231.html

   (11) https://tools.ietf.org/html/rfc7233.html

   (12) https://tools.ietf.org/html/rfc4918.html

   (13) https://tools.ietf.org/html/rfc5842.html

   (14) https://tools.ietf.org/html/rfc3229.html

   (15) https://tools.ietf.org/html/rfc7231.html

   (16) https://tools.ietf.org/html/rfc7231.html

   (17) https://tools.ietf.org/html/rfc7231.html

   (18) https://tools.ietf.org/html/rfc7231.html

   (19) https://tools.ietf.org/html/rfc7232.html

   (20) https://tools.ietf.org/html/rfc7231.html

   (21) https://tools.ietf.org/html/rfc7231.html

   (22) https://tools.ietf.org/html/rfc7238.html

   (23) https://tools.ietf.org/html/rfc7231.html

   (24) https://tools.ietf.org/html/rfc7235.html

   (25) https://tools.ietf.org/html/rfc7231.html

   (26) https://tools.ietf.org/html/rfc7231.html

   (27) https://tools.ietf.org/html/rfc7231.html

   (28) https://tools.ietf.org/html/rfc7231.html

   (29) https://tools.ietf.org/html/rfc7231.html

   (30) https://tools.ietf.org/html/rfc7235.html

   (31) https://tools.ietf.org/html/rfc7231.html

   (32) https://tools.ietf.org/html/rfc7231.html

   (33) https://tools.ietf.org/html/rfc7231.html

   (34) https://tools.ietf.org/html/rfc7231.html

   (35) https://tools.ietf.org/html/rfc7232.html

   (36) https://tools.ietf.org/html/rfc7231.html

   (37) https://tools.ietf.org/html/rfc7231.html

   (38) https://tools.ietf.org/html/rfc7231.html

   (39) https://tools.ietf.org/html/rfc7233.html

   (40) https://tools.ietf.org/html/rfc7231.html

   (41) https://tools.ietf.org/html/rfc4918.html

   (42) https://tools.ietf.org/html/rfc4918.html

   (43) https://tools.ietf.org/html/rfc4918.html

   (44) https://tools.ietf.org/html/rfc7231.html

   (45) https://tools.ietf.org/html/rfc6585.html

   (46) https://tools.ietf.org/html/rfc6585.html

   (47) https://tools.ietf.org/html/rfc6585.html

   (48) https://tools.ietf.org/html/rfc7231.html

   (49) https://tools.ietf.org/html/rfc7231.html

   (50) https://tools.ietf.org/html/rfc7231.html

   (51) https://tools.ietf.org/html/rfc7231.html

   (52) https://tools.ietf.org/html/rfc7231.html

   (53) https://tools.ietf.org/html/rfc7231.html

   (54) https://tools.ietf.org/html/rfc2295.html

   (55) https://tools.ietf.org/html/rfc4918.html

   (56) https://tools.ietf.org/html/rfc5842.html

   (57) https://tools.ietf.org/html/rfc2774.html

   (58) https://tools.ietf.org/html/rfc6585.html


File: python.info,  Node: http client --- HTTP protocol client,  Next: ftplib --- FTP protocol client,  Prev: http --- HTTP modules,  Up: Internet Protocols and Support

5.21.12 ‘http.client’ — HTTP protocol client
--------------------------------------------

`Source code:' Lib/http/client.py(1)

__________________________________________________________________

This module defines classes which implement the client side of the HTTP
and HTTPS protocols.  It is normally not used directly — the module
*note urllib.request: 11d. uses it to handle URLs that use HTTP and
HTTPS.

See also
........

The Requests package(2) is recommended for a higher-level http client
interface.

     Note: HTTPS support is only available if Python was compiled with
     SSL support (through the *note ssl: f1. module).

The module provides the following classes:

 -- Class: http.client.HTTPConnection (host, port=None[, timeout],
          source_address=None)

     An *note HTTPConnection: 55f. instance represents one transaction
     with an HTTP server.  It should be instantiated passing it a host
     and optional port number.  If no port number is passed, the port is
     extracted from the host string if it has the form ‘host:port’, else
     the default HTTP port (80) is used.  If the optional `timeout'
     parameter is given, blocking operations (like connection attempts)
     will timeout after that many seconds (if it is not given, the
     global default timeout setting is used).  The optional
     `source_address' parameter may be a tuple of a (host, port) to use
     as the source address the HTTP connection is made from.

     For example, the following calls all create instances that connect
     to the server at the same host and port:

          >>> h1 = http.client.HTTPConnection('www.python.org')
          >>> h2 = http.client.HTTPConnection('www.python.org:80')
          >>> h3 = http.client.HTTPConnection('www.python.org', 80)
          >>> h4 = http.client.HTTPConnection('www.python.org', 80, timeout=10)

     Changed in version 3.2: `source_address' was added.

     Changed in version 3.4: The `strict' parameter was removed.  HTTP
     0.9-style "Simple Responses" are not longer supported.

 -- Class: http.client.HTTPSConnection (host, port=None, key_file=None,
          cert_file=None[, timeout], source_address=None, *,
          context=None, check_hostname=None)

     A subclass of *note HTTPConnection: 55f. that uses SSL for
     communication with secure servers.  Default port is ‘443’.  If
     `context' is specified, it must be a *note ssl.SSLContext: 1c6.
     instance describing the various SSL options.

     `key_file' and `cert_file' are deprecated, please use *note
     ssl.SSLContext.load_cert_chain(): 6cb. instead, or let *note
     ssl.create_default_context(): 4c1. select the system’s trusted CA
     certificates for you.  The `check_hostname' parameter is also
     deprecated; the *note ssl.SSLContext.check_hostname: 1e94.
     attribute of `context' should be used instead.

     Please read *note Security considerations: 1e6a. for more
     information on best practices.

     Changed in version 3.2: `source_address', `context' and
     `check_hostname' were added.

     Changed in version 3.2: This class now supports HTTPS virtual hosts
     if possible (that is, if *note ssl.HAS_SNI: 1e8d. is true).

     Changed in version 3.4: The `strict' parameter was removed.  HTTP
     0.9-style "Simple Responses" are no longer supported.

     Changed in version 3.4.3: This class now performs all the necessary
     certificate and hostname checks by default.  To revert to the
     previous, unverified, behavior ‘ssl._create_unverified_context()’
     can be passed to the `context' parameter.

 -- Class: http.client.HTTPResponse (sock, debuglevel=0, method=None,
          url=None)

     Class whose instances are returned upon successful connection.  Not
     instantiated directly by user.

     Changed in version 3.4: The `strict' parameter was removed.  HTTP
     0.9 style "Simple Responses" are no longer supported.

The following exceptions are raised as appropriate:

 -- Exception: http.client.HTTPException

     The base class of the other exceptions in this module.  It is a
     subclass of *note Exception: 1a1.

 -- Exception: http.client.NotConnected

     A subclass of *note HTTPException: 2597.

 -- Exception: http.client.InvalidURL

     A subclass of *note HTTPException: 2597, raised if a port is given
     and is either non-numeric or empty.

 -- Exception: http.client.UnknownProtocol

     A subclass of *note HTTPException: 2597.

 -- Exception: http.client.UnknownTransferEncoding

     A subclass of *note HTTPException: 2597.

 -- Exception: http.client.UnimplementedFileMode

     A subclass of *note HTTPException: 2597.

 -- Exception: http.client.IncompleteRead

     A subclass of *note HTTPException: 2597.

 -- Exception: http.client.ImproperConnectionState

     A subclass of *note HTTPException: 2597.

 -- Exception: http.client.CannotSendRequest

     A subclass of *note ImproperConnectionState: 259e.

 -- Exception: http.client.CannotSendHeader

     A subclass of *note ImproperConnectionState: 259e.

 -- Exception: http.client.ResponseNotReady

     A subclass of *note ImproperConnectionState: 259e.

 -- Exception: http.client.BadStatusLine

     A subclass of *note HTTPException: 2597.  Raised if a server
     responds with a HTTP status code that we don’t understand.

 -- Exception: http.client.LineTooLong

     A subclass of *note HTTPException: 2597.  Raised if an excessively
     long line is received in the HTTP protocol from the server.

 -- Exception: http.client.RemoteDisconnected

     A subclass of *note ConnectionResetError: 5be. and *note
     BadStatusLine: 25a2.  Raised by *note HTTPConnection.getresponse():
     297. when the attempt to read the response results in no data read
     from the connection, indicating that the remote end has closed the
     connection.

     New in version 3.5: Previously, *note BadStatusLine: 25a2.‘('')’
     was raised.

The constants defined in this module are:

 -- Data: http.client.HTTP_PORT

     The default port for the HTTP protocol (always ‘80’).

 -- Data: http.client.HTTPS_PORT

     The default port for the HTTPS protocol (always ‘443’).

 -- Data: http.client.responses

     This dictionary maps the HTTP 1.1 status codes to the W3C names.

     Example: ‘http.client.responses[http.client.NOT_FOUND]’ is ‘'Not
     Found'’.

See *note HTTP status codes: 2594. for a list of HTTP status codes that
are available in this module as constants.

* Menu:

* HTTPConnection Objects:: 
* HTTPResponse Objects:: 
* Examples: Examples<16>. 
* HTTPMessage Objects:: 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/http/client.py

   (2) https://requests.readthedocs.org/


File: python.info,  Node: HTTPConnection Objects,  Next: HTTPResponse Objects,  Up: http client --- HTTP protocol client

5.21.12.1 HTTPConnection Objects
................................

*note HTTPConnection: 55f. instances have the following methods:

 -- Method: HTTPConnection.request (method, url, body=None, headers={})

     This will send a request to the server using the HTTP request
     method `method' and the selector `url'.

     If `body' is specified, the specified data is sent after the
     headers are finished.  It may be a string, a *note bytes-like
     object: 36b, an open *note file object: 78b, or an iterable of
     *note bytes-like object: 36b.s.  If `body' is a string, it is
     encoded as ISO-8851-1, the default for HTTP. If it is a bytes-like
     object the bytes are sent as is.  If it is a *note file object:
     78b, the contents of the file is sent; this file object should
     support at least the ‘read()’ method.  If the file object has a
     ‘mode’ attribute, the data returned by the ‘read()’ method will be
     encoded as ISO-8851-1 unless the ‘mode’ attribute contains the
     substring ‘b’, otherwise the data returned by ‘read()’ is sent as
     is.  If `body' is an iterable, the elements of the iterable are
     sent as is until the iterable is exhausted.

     The `headers' argument should be a mapping of extra HTTP headers to
     send with the request.

     If `headers' does not contain a Content-Length item, one is added
     automatically if possible.  If `body' is ‘None’, the Content-Length
     header is set to ‘0’ for methods that expect a body (‘PUT’, ‘POST’,
     and ‘PATCH’).  If `body' is a string or bytes object, the
     Content-Length header is set to its length.  If `body' is a *note
     file object: 78b. and it works to call *note fstat(): 1ee. on the
     result of its ‘fileno()’ method, then the Content-Length header is
     set to the ‘st_size’ reported by the ‘fstat’ call.  Otherwise no
     Content-Length header is added.

     New in version 3.2: `body' can now be an iterable.

 -- Method: HTTPConnection.getresponse ()

     Should be called after a request is sent to get the response from
     the server.  Returns an *note HTTPResponse: 63e. instance.

          Note: Note that you must have read the whole response before
          you can send a new request to the server.

     Changed in version 3.5: If a *note ConnectionError: 299. or
     subclass is raised, the *note HTTPConnection: 55f. object will be
     ready to reconnect when a new request is sent.

 -- Method: HTTPConnection.set_debuglevel (level)

     Set the debugging level.  The default debug level is ‘0’, meaning
     no debugging output is printed.  Any value greater than ‘0’ will
     cause all currently defined debug output to be printed to stdout.
     The ‘debuglevel’ is passed to any new *note HTTPResponse: 63e.
     objects that are created.

     New in version 3.1.

 -- Method: HTTPConnection.set_tunnel (host, port=None, headers=None)

     Set the host and the port for HTTP Connect Tunnelling.  This allows
     running the connection through a proxy server.

     The host and port arguments specify the endpoint of the tunneled
     connection (i.e.  the address included in the CONNECT request,
     `not' the address of the proxy server).

     The headers argument should be a mapping of extra HTTP headers to
     send with the CONNECT request.

     For example, to tunnel through a HTTPS proxy server running locally
     on port 8080, we would pass the address of the proxy to the *note
     HTTPSConnection: 560. constructor, and the address of the host that
     we eventually want to reach to the *note set_tunnel(): 80b. method:

          >>> import http.client
          >>> conn = http.client.HTTPSConnection("localhost", 8080)
          >>> conn.set_tunnel("www.python.org")
          >>> conn.request("HEAD","/index.html")

     New in version 3.2.

 -- Method: HTTPConnection.connect ()

     Connect to the server specified when the object was created.  By
     default, this is called automatically when making a request if the
     client does not already have a connection.

 -- Method: HTTPConnection.close ()

     Close the connection to the server.

As an alternative to using the ‘request()’ method described above, you
can also send your request step by step, by using the four functions
below.

 -- Method: HTTPConnection.putrequest (request, selector,
          skip_host=False, skip_accept_encoding=False)

     This should be the first call after the connection to the server
     has been made.  It sends a line to the server consisting of the
     `request' string, the `selector' string, and the HTTP version
     (‘HTTP/1.1’).  To disable automatic sending of ‘Host:’ or
     ‘Accept-Encoding:’ headers (for example to accept additional
     content encodings), specify `skip_host' or `skip_accept_encoding'
     with non-False values.

 -- Method: HTTPConnection.putheader (header, argument[, ...])

     Send an RFC 822(1)-style header to the server.  It sends a line to
     the server consisting of the header, a colon and a space, and the
     first argument.  If more arguments are given, continuation lines
     are sent, each consisting of a tab and an argument.

 -- Method: HTTPConnection.endheaders (message_body=None)

     Send a blank line to the server, signalling the end of the headers.
     The optional `message_body' argument can be used to pass a message
     body associated with the request.  The message body will be sent in
     the same packet as the message headers if it is string, otherwise
     it is sent in a separate packet.

 -- Method: HTTPConnection.send (data)

     Send data to the server.  This should be used directly only after
     the *note endheaders(): 25ae. method has been called and before
     *note getresponse(): 297. is called.

   ---------- Footnotes ----------

   (1) https://tools.ietf.org/html/rfc822.html


File: python.info,  Node: HTTPResponse Objects,  Next: Examples<16>,  Prev: HTTPConnection Objects,  Up: http client --- HTTP protocol client

5.21.12.2 HTTPResponse Objects
..............................

An *note HTTPResponse: 63e. instance wraps the HTTP response from the
server.  It provides access to the request headers and the entity body.
The response is an iterable object and can be used in a with statement.

Changed in version 3.5: The *note io.BufferedIOBase: 5fe. interface is
now implemented and all of its reader operations are supported.

 -- Method: HTTPResponse.read ([amt])

     Reads and returns the response body, or up to the next `amt' bytes.

 -- Method: HTTPResponse.readinto (b)

     Reads up to the next len(b) bytes of the response body into the
     buffer `b'.  Returns the number of bytes read.

     New in version 3.3.

 -- Method: HTTPResponse.getheader (name, default=None)

     Return the value of the header `name', or `default' if there is no
     header matching `name'.  If there is more than one header with the
     name `name', return all of the values joined by ’, ’.  If ’default’
     is any iterable other than a single string, its elements are
     similarly returned joined by commas.

 -- Method: HTTPResponse.getheaders ()

     Return a list of (header, value) tuples.

 -- Method: HTTPResponse.fileno ()

     Return the ‘fileno’ of the underlying socket.

 -- Attribute: HTTPResponse.msg

     A ‘http.client.HTTPMessage’ instance containing the response
     headers.  ‘http.client.HTTPMessage’ is a subclass of *note
     email.message.Message: 3d2.

 -- Attribute: HTTPResponse.version

     HTTP protocol version used by server.  10 for HTTP/1.0, 11 for
     HTTP/1.1.

 -- Attribute: HTTPResponse.status

     Status code returned by server.

 -- Attribute: HTTPResponse.reason

     Reason phrase returned by server.

 -- Attribute: HTTPResponse.debuglevel

     A debugging hook.  If *note debuglevel: 25b9. is greater than zero,
     messages will be printed to stdout as the response is read and
     parsed.

 -- Attribute: HTTPResponse.closed

     Is ‘True’ if the stream is closed.


File: python.info,  Node: Examples<16>,  Next: HTTPMessage Objects,  Prev: HTTPResponse Objects,  Up: http client --- HTTP protocol client

5.21.12.3 Examples
..................

Here is an example session that uses the ‘GET’ method:

     >>> import http.client
     >>> conn = http.client.HTTPSConnection("www.python.org")
     >>> conn.request("GET", "/")
     >>> r1 = conn.getresponse()
     >>> print(r1.status, r1.reason)
     200 OK
     >>> data1 = r1.read()  # This will return entire content.
     >>> # The following example demonstrates reading data in chunks.
     >>> conn.request("GET", "/")
     >>> r1 = conn.getresponse()
     >>> while not r1.closed:
     ...     print(r1.read(200)) # 200 bytes
     b'<!doctype html>\n<!--[if"...
     ...
     >>> # Example of an invalid request
     >>> conn.request("GET", "/parrot.spam")
     >>> r2 = conn.getresponse()
     >>> print(r2.status, r2.reason)
     404 Not Found
     >>> data2 = r2.read()
     >>> conn.close()

Here is an example session that uses the ‘HEAD’ method.  Note that the
‘HEAD’ method never returns any data.

     >>> import http.client
     >>> conn = http.client.HTTPSConnection("www.python.org")
     >>> conn.request("HEAD", "/")
     >>> res = conn.getresponse()
     >>> print(res.status, res.reason)
     200 OK
     >>> data = res.read()
     >>> print(len(data))
     0
     >>> data == b''
     True

Here is an example session that shows how to ‘POST’ requests:

     >>> import http.client, urllib.parse
     >>> params = urllib.parse.urlencode({'@number': 12524, '@type': 'issue', '@action': 'show'})
     >>> headers = {"Content-type": "application/x-www-form-urlencoded",
     ...            "Accept": "text/plain"}
     >>> conn = http.client.HTTPConnection("bugs.python.org")
     >>> conn.request("POST", "", params, headers)
     >>> response = conn.getresponse()
     >>> print(response.status, response.reason)
     302 Found
     >>> data = response.read()
     >>> data
     b'Redirecting to <a href="http://bugs.python.org/issue12524">http://bugs.python.org/issue12524</a>'
     >>> conn.close()

Client side ‘HTTP PUT’ requests are very similar to ‘POST’ requests.
The difference lies only the server side where HTTP server will allow
resources to be created via ‘PUT’ request.  It should be noted that
custom HTTP methods +are also handled in *note urllib.request.Request:
4f8. by sending the appropriate +method attribute.Here is an example
session that shows how to do ‘PUT’ request using http.client:

     >>> # This creates an HTTP message
     >>> # with the content of BODY as the enclosed representation
     >>> # for the resource http://localhost:8080/file
     ...
     >>> import http.client
     >>> BODY = "***filecontents***"
     >>> conn = http.client.HTTPConnection("localhost", 8080)
     >>> conn.request("PUT", "/file", BODY)
     >>> response = conn.getresponse()
     >>> print(response.status, response.reason)
     200, OK


File: python.info,  Node: HTTPMessage Objects,  Prev: Examples<16>,  Up: http client --- HTTP protocol client

5.21.12.4 HTTPMessage Objects
.............................

An ‘http.client.HTTPMessage’ instance holds the headers from an HTTP
response.  It is implemented using the *note email.message.Message: 3d2.
class.


File: python.info,  Node: ftplib --- FTP protocol client,  Next: poplib --- POP3 protocol client,  Prev: http client --- HTTP protocol client,  Up: Internet Protocols and Support

5.21.13 ‘ftplib’ — FTP protocol client
--------------------------------------

`Source code:' Lib/ftplib.py(1)

__________________________________________________________________

This module defines the class *note FTP: 62f. and a few related items.
The *note FTP: 62f. class implements the client side of the FTP
protocol.  You can use this to write Python programs that perform a
variety of automated FTP jobs, such as mirroring other ftp servers.  It
is also used by the module *note urllib.request: 11d. to handle URLs
that use FTP. For more information on FTP (File Transfer Protocol), see
Internet RFC 959(2).

Here’s a sample session using the *note ftplib: 83. module:

     >>> from ftplib import FTP
     >>> ftp = FTP('ftp.debian.org')     # connect to host, default port
     >>> ftp.login()                     # user anonymous, passwd anonymous@
     '230 Login successful.'
     >>> ftp.cwd('debian')               # change into "debian" directory
     >>> ftp.retrlines('LIST')           # list directory contents
     -rw-rw-r--    1 1176     1176         1063 Jun 15 10:18 README
     ...
     drwxr-sr-x    5 1176     1176         4096 Dec 19  2000 pool
     drwxr-sr-x    4 1176     1176         4096 Nov 17  2008 project
     drwxr-xr-x    3 1176     1176         4096 Oct 10  2012 tools
     '226 Directory send OK.'
     >>> ftp.retrbinary('RETR README', open('README', 'wb').write)
     '226 Transfer complete.'
     >>> ftp.quit()

The module defines the following items:

 -- Class: ftplib.FTP (host='', user='', passwd='', acct='',
          timeout=None, source_address=None)

     Return a new instance of the *note FTP: 62f. class.  When `host' is
     given, the method call ‘connect(host)’ is made.  When `user' is
     given, additionally the method call ‘login(user, passwd, acct)’ is
     made (where `passwd' and `acct' default to the empty string when
     not given).  The optional `timeout' parameter specifies a timeout
     in seconds for blocking operations like the connection attempt (if
     is not specified, the global default timeout setting will be used).
     `source_address' is a 2-tuple ‘(host, port)’ for the socket to bind
     to as its source address before connecting.

     The *note FTP: 62f. class supports the *note with: 29d. statement,
     e.g.:

          >>> from ftplib import FTP
          >>> with FTP("ftp1.at.proftpd.org") as ftp:
          ...     ftp.login()
          ...     ftp.dir()
          ...
          '230 Anonymous login ok, restrictions apply.'
          dr-xr-xr-x   9 ftp      ftp           154 May  6 10:43 .
          dr-xr-xr-x   9 ftp      ftp           154 May  6 10:43 ..
          dr-xr-xr-x   5 ftp      ftp          4096 May  6 10:43 CentOS
          dr-xr-xr-x   3 ftp      ftp            18 Jul 10  2008 Fedora
          >>>

     Changed in version 3.2: Support for the *note with: 29d. statement
     was added.

     Changed in version 3.3: `source_address' parameter was added.

 -- Class: ftplib.FTP_TLS (host='', user='', passwd='', acct='',
          keyfile=None, certfile=None, context=None, timeout=None,
          source_address=None)

     A *note FTP: 62f. subclass which adds TLS support to FTP as
     described in RFC 4217(3).  Connect as usual to port 21 implicitly
     securing the FTP control connection before authenticating.
     Securing the data connection requires the user to explicitly ask
     for it by calling the *note prot_p(): 25c0. method.  `context' is a
     *note ssl.SSLContext: 1c6. object which allows bundling SSL
     configuration options, certificates and private keys into a single
     (potentially long-lived) structure.  Please read *note Security
     considerations: 1e6a. for best practices.

     `keyfile' and `certfile' are a legacy alternative to `context' –
     they can point to PEM-formatted private key and certificate chain
     files (respectively) for the SSL connection.

     New in version 3.2.

     Changed in version 3.3: `source_address' parameter was added.

     Changed in version 3.4: The class now supports hostname check with
     *note ssl.SSLContext.check_hostname: 1e94. and `Server Name
     Indication' (see *note ssl.HAS_SNI: 1e8d.).

     Here’s a sample session using the *note FTP_TLS: 630. class:

          >>> ftps = FTP_TLS('ftp.pureftpd.org')
          >>> ftps.login()
          '230 Anonymous user logged in'
          >>> ftps.prot_p()
          '200 Data protection level set to "private"'
          >>> ftps.nlst()
          ['6jack', 'OpenBSD', 'antilink', 'blogbench', 'bsdcam', 'clockspeed', 'djbdns-jedi', 'docs', 'eaccelerator-jedi', 'favicon.ico', 'francotone', 'fugu', 'ignore', 'libpuzzle', 'metalog', 'minidentd', 'misc', 'mysql-udf-global-user-variables', 'php-jenkins-hash', 'php-skein-hash', 'php-webdav', 'phpaudit', 'phpbench', 'pincaster', 'ping', 'posto', 'pub', 'public', 'public_keys', 'pure-ftpd', 'qscan', 'qtc', 'sharedance', 'skycache', 'sound', 'tmp', 'ucarp']

 -- Exception: ftplib.error_reply

     Exception raised when an unexpected reply is received from the
     server.

 -- Exception: ftplib.error_temp

     Exception raised when an error code signifying a temporary error
     (response codes in the range 400–499) is received.

 -- Exception: ftplib.error_perm

     Exception raised when an error code signifying a permanent error
     (response codes in the range 500–599) is received.

 -- Exception: ftplib.error_proto

     Exception raised when a reply is received from the server that does
     not fit the response specifications of the File Transfer Protocol,
     i.e.  begin with a digit in the range 1–5.

 -- Data: ftplib.all_errors

     The set of all exceptions (as a tuple) that methods of *note FTP:
     62f. instances may raise as a result of problems with the FTP
     connection (as opposed to programming errors made by the caller).
     This set includes the four exceptions listed above as well as *note
     OSError: 4b6.

See also
........

Module *note netrc: bc.

     Parser for the ‘.netrc’ file format.  The file ‘.netrc’ is
     typically used by FTP clients to load user authentication
     information before prompting the user.

* Menu:

* FTP Objects:: 
* FTP_TLS Objects:: 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/ftplib.py

   (2) https://tools.ietf.org/html/rfc959.html

   (3) https://tools.ietf.org/html/rfc4217.html


File: python.info,  Node: FTP Objects,  Next: FTP_TLS Objects,  Up: ftplib --- FTP protocol client

5.21.13.1 FTP Objects
.....................

Several methods are available in two flavors: one for handling text
files and another for binary files.  These are named for the command
which is used followed by ‘lines’ for the text version or ‘binary’ for
the binary version.

*note FTP: 62f. instances have the following methods:

 -- Method: FTP.set_debuglevel (level)

     Set the instance’s debugging level.  This controls the amount of
     debugging output printed.  The default, ‘0’, produces no debugging
     output.  A value of ‘1’ produces a moderate amount of debugging
     output, generally a single line per request.  A value of ‘2’ or
     higher produces the maximum amount of debugging output, logging
     each line sent and received on the control connection.

 -- Method: FTP.connect (host='', port=0, timeout=None,
          source_address=None)

     Connect to the given host and port.  The default port number is
     ‘21’, as specified by the FTP protocol specification.  It is rarely
     needed to specify a different port number.  This function should be
     called only once for each instance; it should not be called at all
     if a host was given when the instance was created.  All other
     methods can only be used after a connection has been made.  The
     optional `timeout' parameter specifies a timeout in seconds for the
     connection attempt.  If no `timeout' is passed, the global default
     timeout setting will be used.  `source_address' is a 2-tuple
     ‘(host, port)’ for the socket to bind to as its source address
     before connecting.

     Changed in version 3.3: `source_address' parameter was added.

 -- Method: FTP.getwelcome ()

     Return the welcome message sent by the server in reply to the
     initial connection.  (This message sometimes contains disclaimers
     or help information that may be relevant to the user.)

 -- Method: FTP.login (user='anonymous', passwd='', acct='')

     Log in as the given `user'.  The `passwd' and `acct' parameters are
     optional and default to the empty string.  If no `user' is
     specified, it defaults to ‘'anonymous'’.  If `user' is
     ‘'anonymous'’, the default `passwd' is ‘'anonymous@'’.  This
     function should be called only once for each instance, after a
     connection has been established; it should not be called at all if
     a host and user were given when the instance was created.  Most FTP
     commands are only allowed after the client has logged in.  The
     `acct' parameter supplies "accounting information"; few systems
     implement this.

 -- Method: FTP.abort ()

     Abort a file transfer that is in progress.  Using this does not
     always work, but it’s worth a try.

 -- Method: FTP.sendcmd (cmd)

     Send a simple command string to the server and return the response
     string.

 -- Method: FTP.voidcmd (cmd)

     Send a simple command string to the server and handle the response.
     Return nothing if a response code corresponding to success (codes
     in the range 200–299) is received.  Raise *note error_reply: 25c1.
     otherwise.

 -- Method: FTP.retrbinary (cmd, callback, blocksize=8192, rest=None)

     Retrieve a file in binary transfer mode.  `cmd' should be an
     appropriate ‘RETR’ command: ‘'RETR filename'’.  The `callback'
     function is called for each block of data received, with a single
     string argument giving the data block.  The optional `blocksize'
     argument specifies the maximum chunk size to read on the low-level
     socket object created to do the actual transfer (which will also be
     the largest size of the data blocks passed to `callback').  A
     reasonable default is chosen.  `rest' means the same thing as in
     the *note transfercmd(): 25d0. method.

 -- Method: FTP.retrlines (cmd, callback=None)

     Retrieve a file or directory listing in ASCII transfer mode.  `cmd'
     should be an appropriate ‘RETR’ command (see *note retrbinary():
     25cf.) or a command such as ‘LIST’ or ‘NLST’ (usually just the
     string ‘'LIST'’).  ‘LIST’ retrieves a list of files and information
     about those files.  ‘NLST’ retrieves a list of file names.  The
     `callback' function is called for each line with a string argument
     containing the line with the trailing CRLF stripped.  The default
     `callback' prints the line to ‘sys.stdout’.

 -- Method: FTP.set_pasv (boolean)

     Enable "passive" mode if `boolean' is true, other disable passive
     mode.  Passive mode is on by default.

 -- Method: FTP.storbinary (cmd, fp, blocksize=8192, callback=None,
          rest=None)

     Store a file in binary transfer mode.  `cmd' should be an
     appropriate ‘STOR’ command: ‘"STOR filename"’.  `fp' is a *note
     file object: 78b. (opened in binary mode) which is read until EOF
     using its ‘read()’ method in blocks of size `blocksize' to provide
     the data to be stored.  The `blocksize' argument defaults to 8192.
     `callback' is an optional single parameter callable that is called
     on each block of data after it is sent.  `rest' means the same
     thing as in the *note transfercmd(): 25d0. method.

     Changed in version 3.2: `rest' parameter added.

 -- Method: FTP.storlines (cmd, fp, callback=None)

     Store a file in ASCII transfer mode.  `cmd' should be an
     appropriate ‘STOR’ command (see *note storbinary(): 912.).  Lines
     are read until EOF from the *note file object: 78b. `fp' (opened in
     binary mode) using its *note readline(): 10b8. method to provide
     the data to be stored.  `callback' is an optional single parameter
     callable that is called on each line after it is sent.

 -- Method: FTP.transfercmd (cmd, rest=None)

     Initiate a transfer over the data connection.  If the transfer is
     active, send an ‘EPRT’ or ‘PORT’ command and the transfer command
     specified by `cmd', and accept the connection.  If the server is
     passive, send an ‘EPSV’ or ‘PASV’ command, connect to it, and start
     the transfer command.  Either way, return the socket for the
     connection.

     If optional `rest' is given, a ‘REST’ command is sent to the
     server, passing `rest' as an argument.  `rest' is usually a byte
     offset into the requested file, telling the server to restart
     sending the file’s bytes at the requested offset, skipping over the
     initial bytes.  Note however that RFC 959 requires only that `rest'
     be a string containing characters in the printable range from ASCII
     code 33 to ASCII code 126.  The *note transfercmd(): 25d0. method,
     therefore, converts `rest' to a string, but no check is performed
     on the string’s contents.  If the server does not recognize the
     ‘REST’ command, an *note error_reply: 25c1. exception will be
     raised.  If this happens, simply call *note transfercmd(): 25d0.
     without a `rest' argument.

 -- Method: FTP.ntransfercmd (cmd, rest=None)

     Like *note transfercmd(): 25d0, but returns a tuple of the data
     connection and the expected size of the data.  If the expected size
     could not be computed, ‘None’ will be returned as the expected
     size.  `cmd' and `rest' means the same thing as in *note
     transfercmd(): 25d0.

 -- Method: FTP.mlsd (path="", facts=[])

     List a directory in a standardized format by using ‘MLSD’ command (
     RFC 3659(1)).  If `path' is omitted the current directory is
     assumed.  `facts' is a list of strings representing the type of
     information desired (e.g.  ‘["type", "size", "perm"]’).  Return a
     generator object yielding a tuple of two elements for every file
     found in path.  First element is the file name, the second one is a
     dictionary containing facts about the file name.  Content of this
     dictionary might be limited by the `facts' argument but server is
     not guaranteed to return all requested facts.

     New in version 3.3.

 -- Method: FTP.nlst (argument[, ...])

     Return a list of file names as returned by the ‘NLST’ command.  The
     optional `argument' is a directory to list (default is the current
     server directory).  Multiple arguments can be used to pass
     non-standard options to the ‘NLST’ command.

          Note: If your server supports the command, *note mlsd(): 632.
          offers a better API.

 -- Method: FTP.dir (argument[, ...])

     Produce a directory listing as returned by the ‘LIST’ command,
     printing it to standard output.  The optional `argument' is a
     directory to list (default is the current server directory).
     Multiple arguments can be used to pass non-standard options to the
     ‘LIST’ command.  If the last argument is a function, it is used as
     a `callback' function as for *note retrlines(): 25d1.; the default
     prints to ‘sys.stdout’.  This method returns ‘None’.

          Note: If your server supports the command, *note mlsd(): 632.
          offers a better API.

 -- Method: FTP.rename (fromname, toname)

     Rename file `fromname' on the server to `toname'.

 -- Method: FTP.delete (filename)

     Remove the file named `filename' from the server.  If successful,
     returns the text of the response, otherwise raises *note
     error_perm: 25c3. on permission errors or *note error_reply: 25c1.
     on other errors.

 -- Method: FTP.cwd (pathname)

     Set the current directory on the server.

 -- Method: FTP.mkd (pathname)

     Create a new directory on the server.

 -- Method: FTP.pwd ()

     Return the pathname of the current directory on the server.

 -- Method: FTP.rmd (dirname)

     Remove the directory named `dirname' on the server.

 -- Method: FTP.size (filename)

     Request the size of the file named `filename' on the server.  On
     success, the size of the file is returned as an integer, otherwise
     ‘None’ is returned.  Note that the ‘SIZE’ command is not
     standardized, but is supported by many common server
     implementations.

 -- Method: FTP.quit ()

     Send a ‘QUIT’ command to the server and close the connection.  This
     is the "polite" way to close a connection, but it may raise an
     exception if the server responds with an error to the ‘QUIT’
     command.  This implies a call to the *note close(): 25dd. method
     which renders the *note FTP: 62f. instance useless for subsequent
     calls (see below).

 -- Method: FTP.close ()

     Close the connection unilaterally.  This should not be applied to
     an already closed connection such as after a successful call to
     *note quit(): 25dc.  After this call the *note FTP: 62f. instance
     should not be used any more (after a call to *note close(): 25dd.
     or *note quit(): 25dc. you cannot reopen the connection by issuing
     another *note login(): 25cb. method).

   ---------- Footnotes ----------

   (1) https://tools.ietf.org/html/rfc3659.html


File: python.info,  Node: FTP_TLS Objects,  Prev: FTP Objects,  Up: ftplib --- FTP protocol client

5.21.13.2 FTP_TLS Objects
.........................

*note FTP_TLS: 630. class inherits from *note FTP: 62f, defining these
additional objects:

 -- Attribute: FTP_TLS.ssl_version

     The SSL version to use (defaults to *note ssl.PROTOCOL_SSLv23:
     1e76.).

 -- Method: FTP_TLS.auth ()

     Set up a secure control connection by using TLS or SSL, depending
     on what is specified in the *note ssl_version: 25df. attribute.

     Changed in version 3.4: The method now supports hostname check with
     *note ssl.SSLContext.check_hostname: 1e94. and `Server Name
     Indication' (see *note ssl.HAS_SNI: 1e8d.).

 -- Method: FTP_TLS.ccc ()

     Revert control channel back to plaintext.  This can be useful to
     take advantage of firewalls that know how to handle NAT with
     non-secure FTP without opening fixed ports.

     New in version 3.3.

 -- Method: FTP_TLS.prot_p ()

     Set up secure data connection.

 -- Method: FTP_TLS.prot_c ()

     Set up clear text data connection.


File: python.info,  Node: poplib --- POP3 protocol client,  Next: imaplib --- IMAP4 protocol client,  Prev: ftplib --- FTP protocol client,  Up: Internet Protocols and Support

5.21.14 ‘poplib’ — POP3 protocol client
---------------------------------------

`Source code:' Lib/poplib.py(1)

__________________________________________________________________

This module defines a class, *note POP3: 25e4, which encapsulates a
connection to a POP3 server and implements the protocol as defined in
RFC 1939(2).  The *note POP3: 25e4. class supports both the minimal and
optional command sets from RFC 1939(3).  The *note POP3: 25e4. class
also supports the ‘STLS’ command introduced in RFC 2595(4) to enable
encrypted communication on an already established connection.

Additionally, this module provides a class *note POP3_SSL: 81f, which
provides support for connecting to POP3 servers that use SSL as an
underlying protocol layer.

Note that POP3, though widely supported, is obsolescent.  The
implementation quality of POP3 servers varies widely, and too many are
quite poor.  If your mailserver supports IMAP, you would be better off
using the *note imaplib.IMAP4: 29c. class, as IMAP servers tend to be
better implemented.

The *note poplib: ce. module provides two classes:

 -- Class: poplib.POP3 (host, port=POP3_PORT[, timeout])

     This class implements the actual POP3 protocol.  The connection is
     created when the instance is initialized.  If `port' is omitted,
     the standard POP3 port (110) is used.  The optional `timeout'
     parameter specifies a timeout in seconds for the connection attempt
     (if not specified, the global default timeout setting will be
     used).

 -- Class: poplib.POP3_SSL (host, port=POP3_SSL_PORT, keyfile=None,
          certfile=None, timeout=None, context=None)

     This is a subclass of *note POP3: 25e4. that connects to the server
     over an SSL encrypted socket.  If `port' is not specified, 995, the
     standard POP3-over-SSL port is used.  `timeout' works as in the
     *note POP3: 25e4. constructor.  `context' is an optional *note
     ssl.SSLContext: 1c6. object which allows bundling SSL configuration
     options, certificates and private keys into a single (potentially
     long-lived) structure.  Please read *note Security considerations:
     1e6a. for best practices.

     `keyfile' and `certfile' are a legacy alternative to `context' -
     they can point to PEM-formatted private key and certificate chain
     files, respectively, for the SSL connection.

     Changed in version 3.2: `context' parameter added.

     Changed in version 3.4: The class now supports hostname check with
     *note ssl.SSLContext.check_hostname: 1e94. and `Server Name
     Indication' (see *note ssl.HAS_SNI: 1e8d.).

One exception is defined as an attribute of the *note poplib: ce.
module:

 -- Exception: poplib.error_proto

     Exception raised on any errors from this module (errors from *note
     socket: ed. module are not caught).  The reason for the exception
     is passed to the constructor as a string.

See also
........

Module *note imaplib: 97.

     The standard Python IMAP module.

Frequently Asked Questions About Fetchmail(5)

     The FAQ for the ‘fetchmail’ POP/IMAP client collects information on
     POP3 server variations and RFC noncompliance that may be useful if
     you need to write an application based on the POP protocol.

* Menu:

* POP3 Objects:: 
* POP3 Example:: 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/poplib.py

   (2) https://tools.ietf.org/html/rfc1939.html

   (3) https://tools.ietf.org/html/rfc1939.html

   (4) https://tools.ietf.org/html/rfc2595.html

   (5) http://www.catb.org/~esr/fetchmail/fetchmail-FAQ.html


File: python.info,  Node: POP3 Objects,  Next: POP3 Example,  Up: poplib --- POP3 protocol client

5.21.14.1 POP3 Objects
......................

All POP3 commands are represented by methods of the same name, in
lower-case; most return the response text sent by the server.

An *note POP3: 25e4. instance has the following methods:

 -- Method: POP3.set_debuglevel (level)

     Set the instance’s debugging level.  This controls the amount of
     debugging output printed.  The default, ‘0’, produces no debugging
     output.  A value of ‘1’ produces a moderate amount of debugging
     output, generally a single line per request.  A value of ‘2’ or
     higher produces the maximum amount of debugging output, logging
     each line sent and received on the control connection.

 -- Method: POP3.getwelcome ()

     Returns the greeting string sent by the POP3 server.

 -- Method: POP3.capa ()

     Query the server’s capabilities as specified in RFC 2449(1).
     Returns a dictionary in the form ‘{'name': ['param'...]}’.

     New in version 3.4.

 -- Method: POP3.user (username)

     Send user command, response should indicate that a password is
     required.

 -- Method: POP3.pass_ (password)

     Send password, response includes message count and mailbox size.
     Note: the mailbox on the server is locked until ‘quit()’ is called.

 -- Method: POP3.apop (user, secret)

     Use the more secure APOP authentication to log into the POP3
     server.

 -- Method: POP3.rpop (user)

     Use RPOP authentication (similar to UNIX r-commands) to log into
     POP3 server.

 -- Method: POP3.stat ()

     Get mailbox status.  The result is a tuple of 2 integers: ‘(message
     count, mailbox size)’.

 -- Method: POP3.list ([which])

     Request message list, result is in the form ‘(response, ['mesg_num
     octets', ...], octets)’.  If `which' is set, it is the message to
     list.

 -- Method: POP3.retr (which)

     Retrieve whole message number `which', and set its seen flag.
     Result is in form ‘(response, ['line', ...], octets)’.

 -- Method: POP3.dele (which)

     Flag message number `which' for deletion.  On most servers
     deletions are not actually performed until QUIT (the major
     exception is Eudora QPOP, which deliberately violates the RFCs by
     doing pending deletes on any disconnect).

 -- Method: POP3.rset ()

     Remove any deletion marks for the mailbox.

 -- Method: POP3.noop ()

     Do nothing.  Might be used as a keep-alive.

 -- Method: POP3.quit ()

     Signoff: commit changes, unlock mailbox, drop connection.

 -- Method: POP3.top (which, howmuch)

     Retrieves the message header plus `howmuch' lines of the message
     after the header of message number `which'.  Result is in form
     ‘(response, ['line', ...], octets)’.

     The POP3 TOP command this method uses, unlike the RETR command,
     doesn’t set the message’s seen flag; unfortunately, TOP is poorly
     specified in the RFCs and is frequently broken in off-brand
     servers.  Test this method by hand against the POP3 servers you
     will use before trusting it.

 -- Method: POP3.uidl (which=None)

     Return message digest (unique id) list.  If `which' is specified,
     result contains the unique id for that message in the form
     ‘'response mesgnum uid’, otherwise result is list ‘(response,
     ['mesgnum uid', ...], octets)’.

 -- Method: POP3.utf8 ()

     Try to switch to UTF-8 mode.  Returns the server response if
     successful, raises *note error_proto: 759. if not.  Specified in
     RFC 6856(2).

     New in version 3.5.

 -- Method: POP3.stls (context=None)

     Start a TLS session on the active connection as specified in RFC
     2595(3).  This is only allowed before user authentication

     `context' parameter is a *note ssl.SSLContext: 1c6. object which
     allows bundling SSL configuration options, certificates and private
     keys into a single (potentially long-lived) structure.  Please read
     *note Security considerations: 1e6a. for best practices.

     This method supports hostname checking via *note
     ssl.SSLContext.check_hostname: 1e94. and `Server Name Indication'
     (see *note ssl.HAS_SNI: 1e8d.).

     New in version 3.4.

Instances of *note POP3_SSL: 81f. have no additional methods.  The
interface of this subclass is identical to its parent.

   ---------- Footnotes ----------

   (1) https://tools.ietf.org/html/rfc2449.html

   (2) https://tools.ietf.org/html/rfc6856.html

   (3) https://tools.ietf.org/html/rfc2595.html


File: python.info,  Node: POP3 Example,  Prev: POP3 Objects,  Up: poplib --- POP3 protocol client

5.21.14.2 POP3 Example
......................

Here is a minimal example (without error checking) that opens a mailbox
and retrieves and prints all messages:

     import getpass, poplib

     M = poplib.POP3('localhost')
     M.user(getpass.getuser())
     M.pass_(getpass.getpass())
     numMessages = len(M.list()[1])
     for i in range(numMessages):
         for j in M.retr(i+1)[1]:
             print(j)

At the end of the module, there is a test section that contains a more
extensive example of usage.


File: python.info,  Node: imaplib --- IMAP4 protocol client,  Next: nntplib --- NNTP protocol client,  Prev: poplib --- POP3 protocol client,  Up: Internet Protocols and Support

5.21.15 ‘imaplib’ — IMAP4 protocol client
-----------------------------------------

`Source code:' Lib/imaplib.py(1)

__________________________________________________________________

This module defines three classes, *note IMAP4: 29c, *note IMAP4_SSL:
644. and *note IMAP4_stream: 25f9, which encapsulate a connection to an
IMAP4 server and implement a large subset of the IMAP4rev1 client
protocol as defined in RFC 2060(2).  It is backward compatible with
IMAP4 ( RFC 1730(3)) servers, but note that the ‘STATUS’ command is not
supported in IMAP4.

Three classes are provided by the *note imaplib: 97. module, *note
IMAP4: 29c. is the base class:

 -- Class: imaplib.IMAP4 (host='', port=IMAP4_PORT)

     This class implements the actual IMAP4 protocol.  The connection is
     created and protocol version (IMAP4 or IMAP4rev1) is determined
     when the instance is initialized.  If `host' is not specified, ‘''’
     (the local host) is used.  If `port' is omitted, the standard IMAP4
     port (143) is used.

     The *note IMAP4: 29c. class supports the *note with: 29d.
     statement.  When used like this, the IMAP4 ‘LOGOUT’ command is
     issued automatically when the *note with: 29d. statement exits.
     E.g.:

          >>> from imaplib import IMAP4
          >>> with IMAP4("domain.org") as M:
          ...     M.noop()
          ...
          ('OK', [b'Nothing Accomplished. d25if65hy903weo.87'])

     Changed in version 3.5: Support for the *note with: 29d. statement
     was added.

Three exceptions are defined as attributes of the *note IMAP4: 29c.
class:

 -- Exception: IMAP4.error

     Exception raised on any errors.  The reason for the exception is
     passed to the constructor as a string.

 -- Exception: IMAP4.abort

     IMAP4 server errors cause this exception to be raised.  This is a
     sub-class of *note IMAP4.error: 25fa.  Note that closing the
     instance and instantiating a new one will usually allow recovery
     from this exception.

 -- Exception: IMAP4.readonly

     This exception is raised when a writable mailbox has its status
     changed by the server.  This is a sub-class of *note IMAP4.error:
     25fa.  Some other client now has write permission, and the mailbox
     will need to be re-opened to re-obtain write permission.

There’s also a subclass for secure connections:

 -- Class: imaplib.IMAP4_SSL (host='', port=IMAP4_SSL_PORT,
          keyfile=None, certfile=None, ssl_context=None)

     This is a subclass derived from *note IMAP4: 29c. that connects
     over an SSL encrypted socket (to use this class you need a socket
     module that was compiled with SSL support).  If `host' is not
     specified, ‘''’ (the local host) is used.  If `port' is omitted,
     the standard IMAP4-over-SSL port (993) is used.  `ssl_context' is a
     *note ssl.SSLContext: 1c6. object which allows bundling SSL
     configuration options, certificates and private keys into a single
     (potentially long-lived) structure.  Please read *note Security
     considerations: 1e6a. for best practices.

     `keyfile' and `certfile' are a legacy alternative to `ssl_context'
     - they can point to PEM-formatted private key and certificate chain
     files for the SSL connection.  Note that the `keyfile'/`certfile'
     parameters are mutually exclusive with `ssl_context', a *note
     ValueError: 19c. is raised if `keyfile'/`certfile' is provided
     along with `ssl_context'.

     Changed in version 3.3: `ssl_context' parameter added.

     Changed in version 3.4: The class now supports hostname check with
     *note ssl.SSLContext.check_hostname: 1e94. and `Server Name
     Indication' (see *note ssl.HAS_SNI: 1e8d.).

The second subclass allows for connections created by a child process:

 -- Class: imaplib.IMAP4_stream (command)

     This is a subclass derived from *note IMAP4: 29c. that connects to
     the ‘stdin/stdout’ file descriptors created by passing `command' to
     ‘subprocess.Popen()’.

The following utility functions are defined:

 -- Function: imaplib.Internaldate2tuple (datestr)

     Parse an IMAP4 ‘INTERNALDATE’ string and return corresponding local
     time.  The return value is a *note time.struct_time: 125c. tuple or
     None if the string has wrong format.

 -- Function: imaplib.Int2AP (num)

     Converts an integer into a string representation using characters
     from the set [‘A’ ..  ‘P’].

 -- Function: imaplib.ParseFlags (flagstr)

     Converts an IMAP4 ‘FLAGS’ response to a tuple of individual flags.

 -- Function: imaplib.Time2Internaldate (date_time)

     Convert `date_time' to an IMAP4 ‘INTERNALDATE’ representation.  The
     return value is a string in the form: ‘"DD-Mmm-YYYY HH:MM:SS
     +HHMM"’ (including double-quotes).  The `date_time' argument can be
     a number (int or float) representing seconds since epoch (as
     returned by *note time.time(): 6a5.), a 9-tuple representing local
     time an instance of *note time.struct_time: 125c. (as returned by
     *note time.localtime(): 125d.), an aware instance of *note
     datetime.datetime: 60c, or a double-quoted string.  In the last
     case, it is assumed to already be in the correct format.

Note that IMAP4 message numbers change as the mailbox changes; in
particular, after an ‘EXPUNGE’ command performs deletions the remaining
messages are renumbered.  So it is highly advisable to use UIDs instead,
with the UID command.

At the end of the module, there is a test section that contains a more
extensive example of usage.

See also
........

Documents describing the protocol, and sources and binaries for servers
implementing it, can all be found at the University of Washington’s
`IMAP Information Center' (‘http://www.washington.edu/imap/’).

* Menu:

* IMAP4 Objects:: 
* IMAP4 Example:: 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/imaplib.py

   (2) https://tools.ietf.org/html/rfc2060.html

   (3) https://tools.ietf.org/html/rfc1730.html


File: python.info,  Node: IMAP4 Objects,  Next: IMAP4 Example,  Up: imaplib --- IMAP4 protocol client

5.21.15.1 IMAP4 Objects
.......................

All IMAP4rev1 commands are represented by methods of the same name,
either upper-case or lower-case.

All arguments to commands are converted to strings, except for
‘AUTHENTICATE’, and the last argument to ‘APPEND’ which is passed as an
IMAP4 literal.  If necessary (the string contains IMAP4
protocol-sensitive characters and isn’t enclosed with either parentheses
or double quotes) each string is quoted.  However, the `password'
argument to the ‘LOGIN’ command is always quoted.  If you want to avoid
having an argument string quoted (eg: the `flags' argument to ‘STORE’)
then enclose the string in parentheses (eg: ‘r'(\Deleted)'’).

Each command returns a tuple: ‘(type, [data, ...])’ where `type' is
usually ‘'OK'’ or ‘'NO'’, and `data' is either the text from the command
response, or mandated results from the command.  Each `data' is either a
string, or a tuple.  If a tuple, then the first part is the header of
the response, and the second part contains the data (ie: ’literal’
value).

The `message_set' options to commands below is a string specifying one
or more messages to be acted upon.  It may be a simple message number
(‘'1'’), a range of message numbers (‘'2:4'’), or a group of
non-contiguous ranges separated by commas (‘'1:3,6:9'’).  A range can
contain an asterisk to indicate an infinite upper bound (‘'3:*'’).

An *note IMAP4: 29c. instance has the following methods:

 -- Method: IMAP4.append (mailbox, flags, date_time, message)

     Append `message' to named mailbox.

 -- Method: IMAP4.authenticate (mechanism, authobject)

     Authenticate command — requires response processing.

     `mechanism' specifies which authentication mechanism is to be used
     - it should appear in the instance variable ‘capabilities’ in the
     form ‘AUTH=mechanism’.

     `authobject' must be a callable object:

          data = authobject(response)

     It will be called to process server continuation responses; the
     `response' argument it is passed will be ‘bytes’.  It should return
     ‘bytes’ `data' that will be base64 encoded and sent to the server.
     It should return ‘None’ if the client abort response ‘*’ should be
     sent instead.

     Changed in version 3.5: string usernames and passwords are now
     encoded to ‘utf-8’ instead of being limited to ASCII.

 -- Method: IMAP4.check ()

     Checkpoint mailbox on server.

 -- Method: IMAP4.close ()

     Close currently selected mailbox.  Deleted messages are removed
     from writable mailbox.  This is the recommended command before
     ‘LOGOUT’.

 -- Method: IMAP4.copy (message_set, new_mailbox)

     Copy `message_set' messages onto end of `new_mailbox'.

 -- Method: IMAP4.create (mailbox)

     Create new mailbox named `mailbox'.

 -- Method: IMAP4.delete (mailbox)

     Delete old mailbox named `mailbox'.

 -- Method: IMAP4.deleteacl (mailbox, who)

     Delete the ACLs (remove any rights) set for who on mailbox.

 -- Method: IMAP4.enable (capability)

     Enable `capability' (see RFC 5161(1)).  Most capabilities do not
     need to be enabled.  Currently only the ‘UTF8=ACCEPT’ capability is
     supported (see RFC 6855(2)).

     New in version 3.5: The *note enable(): 29e. method itself, and RFC
     6855(3) support.

 -- Method: IMAP4.expunge ()

     Permanently remove deleted items from selected mailbox.  Generates
     an ‘EXPUNGE’ response for each deleted message.  Returned data
     contains a list of ‘EXPUNGE’ message numbers in order received.

 -- Method: IMAP4.fetch (message_set, message_parts)

     Fetch (parts of) messages.  `message_parts' should be a string of
     message part names enclosed within parentheses, eg: ‘"(UID
     BODY[TEXT])"’.  Returned data are tuples of message part envelope
     and data.

 -- Method: IMAP4.getacl (mailbox)

     Get the ‘ACL’s for `mailbox'.  The method is non-standard, but is
     supported by the ‘Cyrus’ server.

 -- Method: IMAP4.getannotation (mailbox, entry, attribute)

     Retrieve the specified ‘ANNOTATION’s for `mailbox'.  The method is
     non-standard, but is supported by the ‘Cyrus’ server.

 -- Method: IMAP4.getquota (root)

     Get the ‘quota’ `root'’s resource usage and limits.  This method is
     part of the IMAP4 QUOTA extension defined in rfc2087.

 -- Method: IMAP4.getquotaroot (mailbox)

     Get the list of ‘quota’ ‘roots’ for the named `mailbox'.  This
     method is part of the IMAP4 QUOTA extension defined in rfc2087.

 -- Method: IMAP4.list ([directory[, pattern]])

     List mailbox names in `directory' matching `pattern'.  `directory'
     defaults to the top-level mail folder, and `pattern' defaults to
     match anything.  Returned data contains a list of ‘LIST’ responses.

 -- Method: IMAP4.login (user, password)

     Identify the client using a plaintext password.  The `password'
     will be quoted.

 -- Method: IMAP4.login_cram_md5 (user, password)

     Force use of ‘CRAM-MD5’ authentication when identifying the client
     to protect the password.  Will only work if the server ‘CAPABILITY’
     response includes the phrase ‘AUTH=CRAM-MD5’.

 -- Method: IMAP4.logout ()

     Shutdown connection to server.  Returns server ‘BYE’ response.

 -- Method: IMAP4.lsub (directory='""', pattern='*')

     List subscribed mailbox names in directory matching pattern.
     `directory' defaults to the top level directory and `pattern'
     defaults to match any mailbox.  Returned data are tuples of message
     part envelope and data.

 -- Method: IMAP4.myrights (mailbox)

     Show my ACLs for a mailbox (i.e.  the rights that I have on
     mailbox).

 -- Method: IMAP4.namespace ()

     Returns IMAP namespaces as defined in RFC2342.

 -- Method: IMAP4.noop ()

     Send ‘NOOP’ to server.

 -- Method: IMAP4.open (host, port)

     Opens socket to `port' at `host'.  This method is implicitly called
     by the *note IMAP4: 29c. constructor.  The connection objects
     established by this method will be used in the *note IMAP4.read():
     261a, *note IMAP4.readline(): 261b, *note IMAP4.send(): 261c, and
     *note IMAP4.shutdown(): 261d. methods.  You may override this
     method.

 -- Method: IMAP4.partial (message_num, message_part, start, length)

     Fetch truncated part of a message.  Returned data is a tuple of
     message part envelope and data.

 -- Method: IMAP4.proxyauth (user)

     Assume authentication as `user'.  Allows an authorised
     administrator to proxy into any user’s mailbox.

 -- Method: IMAP4.read (size)

     Reads `size' bytes from the remote server.  You may override this
     method.

 -- Method: IMAP4.readline ()

     Reads one line from the remote server.  You may override this
     method.

 -- Method: IMAP4.recent ()

     Prompt server for an update.  Returned data is ‘None’ if no new
     messages, else value of ‘RECENT’ response.

 -- Method: IMAP4.rename (oldmailbox, newmailbox)

     Rename mailbox named `oldmailbox' to `newmailbox'.

 -- Method: IMAP4.response (code)

     Return data for response `code' if received, or ‘None’.  Returns
     the given code, instead of the usual type.

 -- Method: IMAP4.search (charset, criterion[, ...])

     Search mailbox for matching messages.  `charset' may be ‘None’, in
     which case no ‘CHARSET’ will be specified in the request to the
     server.  The IMAP protocol requires that at least one criterion be
     specified; an exception will be raised when the server returns an
     error.  `charset' must be ‘None’ if the ‘UTF8=ACCEPT’ capability
     was enabled using the *note enable(): 29e. command.

     Example:

          # M is a connected IMAP4 instance...
          typ, msgnums = M.search(None, 'FROM', '"LDJ"')

          # or:
          typ, msgnums = M.search(None, '(FROM "LDJ")')

 -- Method: IMAP4.select (mailbox='INBOX', readonly=False)

     Select a mailbox.  Returned data is the count of messages in
     `mailbox' (‘EXISTS’ response).  The default `mailbox' is ‘'INBOX'’.
     If the `readonly' flag is set, modifications to the mailbox are not
     allowed.

 -- Method: IMAP4.send (data)

     Sends ‘data’ to the remote server.  You may override this method.

 -- Method: IMAP4.setacl (mailbox, who, what)

     Set an ‘ACL’ for `mailbox'.  The method is non-standard, but is
     supported by the ‘Cyrus’ server.

 -- Method: IMAP4.setannotation (mailbox, entry, attribute[, ...])

     Set ‘ANNOTATION’s for `mailbox'.  The method is non-standard, but
     is supported by the ‘Cyrus’ server.

 -- Method: IMAP4.setquota (root, limits)

     Set the ‘quota’ `root'’s resource `limits'.  This method is part of
     the IMAP4 QUOTA extension defined in rfc2087.

 -- Method: IMAP4.shutdown ()

     Close connection established in ‘open’.  This method is implicitly
     called by *note IMAP4.logout(): 2614.  You may override this
     method.

 -- Method: IMAP4.socket ()

     Returns socket instance used to connect to server.

 -- Method: IMAP4.sort (sort_criteria, charset, search_criterion[, ...])

     The ‘sort’ command is a variant of ‘search’ with sorting semantics
     for the results.  Returned data contains a space separated list of
     matching message numbers.

     Sort has two arguments before the `search_criterion' argument(s); a
     parenthesized list of `sort_criteria', and the searching `charset'.
     Note that unlike ‘search’, the searching `charset' argument is
     mandatory.  There is also a ‘uid sort’ command which corresponds to
     ‘sort’ the way that ‘uid search’ corresponds to ‘search’.  The
     ‘sort’ command first searches the mailbox for messages that match
     the given searching criteria using the charset argument for the
     interpretation of strings in the searching criteria.  It then
     returns the numbers of matching messages.

     This is an ‘IMAP4rev1’ extension command.

 -- Method: IMAP4.starttls (ssl_context=None)

     Send a ‘STARTTLS’ command.  The `ssl_context' argument is optional
     and should be a *note ssl.SSLContext: 1c6. object.  This will
     enable encryption on the IMAP connection.  Please read *note
     Security considerations: 1e6a. for best practices.

     New in version 3.2.

     Changed in version 3.4: The method now supports hostname check with
     *note ssl.SSLContext.check_hostname: 1e94. and `Server Name
     Indication' (see *note ssl.HAS_SNI: 1e8d.).

 -- Method: IMAP4.status (mailbox, names)

     Request named status conditions for `mailbox'.

 -- Method: IMAP4.store (message_set, command, flag_list)

     Alters flag dispositions for messages in mailbox.  `command' is
     specified by section 6.4.6 of RFC 2060(4) as being one of "FLAGS",
     "+FLAGS", or "-FLAGS", optionally with a suffix of ".SILENT".

     For example, to set the delete flag on all messages:

          typ, data = M.search(None, 'ALL')
          for num in data[0].split():
             M.store(num, '+FLAGS', '\\Deleted')
          M.expunge()

          Note: Creating flags containing ’]’ (for example: "[test]")
          violates RFC 3501(5) (the IMAP protocol).  However, imaplib
          has historically allowed creation of such tags, and popular
          IMAP servers, such as Gmail, accept and produce such flags.
          There are non-Python programs which also create such tags.
          Although it is an RFC violation and IMAP clients and servers
          are supposed to be strict, imaplib nontheless continues to
          allow such tags to be created for backward compatibility
          reasons, and as of python 3.6, handles them if they are sent
          from the server, since this improves real-world compatibility.

 -- Method: IMAP4.subscribe (mailbox)

     Subscribe to new mailbox.

 -- Method: IMAP4.thread (threading_algorithm, charset,
          search_criterion[, ...])

     The ‘thread’ command is a variant of ‘search’ with threading
     semantics for the results.  Returned data contains a space
     separated list of thread members.

     Thread members consist of zero or more messages numbers, delimited
     by spaces, indicating successive parent and child.

     Thread has two arguments before the `search_criterion' argument(s);
     a `threading_algorithm', and the searching `charset'.  Note that
     unlike ‘search’, the searching `charset' argument is mandatory.
     There is also a ‘uid thread’ command which corresponds to ‘thread’
     the way that ‘uid search’ corresponds to ‘search’.  The ‘thread’
     command first searches the mailbox for messages that match the
     given searching criteria using the charset argument for the
     interpretation of strings in the searching criteria.  It then
     returns the matching messages threaded according to the specified
     threading algorithm.

     This is an ‘IMAP4rev1’ extension command.

 -- Method: IMAP4.uid (command, arg[, ...])

     Execute command args with messages identified by UID, rather than
     message number.  Returns response appropriate to command.  At least
     one argument must be supplied; if none are provided, the server
     will return an error and an exception will be raised.

 -- Method: IMAP4.unsubscribe (mailbox)

     Unsubscribe from old mailbox.

 -- Method: IMAP4.xatom (name[, ...])

     Allow simple extension commands notified by server in ‘CAPABILITY’
     response.

The following attributes are defined on instances of *note IMAP4: 29c.:

 -- Attribute: IMAP4.PROTOCOL_VERSION

     The most recent supported protocol in the ‘CAPABILITY’ response
     from the server.

 -- Attribute: IMAP4.debug

     Integer value to control debugging output.  The initialize value is
     taken from the module variable ‘Debug’.  Values greater than three
     trace each command.

 -- Attribute: IMAP4.utf8_enabled

     Boolean value that is normally ‘False’, but is set to ‘True’ if an
     *note enable(): 29e. command is successfully issued for the
     ‘UTF8=ACCEPT’ capability.

     New in version 3.5.

   ---------- Footnotes ----------

   (1) https://tools.ietf.org/html/rfc5161.html

   (2) https://tools.ietf.org/html/rfc6855.html

   (3) https://tools.ietf.org/html/rfc6855.html

   (4) https://tools.ietf.org/html/rfc2060.html

   (5) https://tools.ietf.org/html/rfc3501.html


File: python.info,  Node: IMAP4 Example,  Prev: IMAP4 Objects,  Up: imaplib --- IMAP4 protocol client

5.21.15.2 IMAP4 Example
.......................

Here is a minimal example (without error checking) that opens a mailbox
and retrieves and prints all messages:

     import getpass, imaplib

     M = imaplib.IMAP4()
     M.login(getpass.getuser(), getpass.getpass())
     M.select()
     typ, data = M.search(None, 'ALL')
     for num in data[0].split():
         typ, data = M.fetch(num, '(RFC822)')
         print('Message %s\n%s\n' % (num, data[0][1]))
     M.close()
     M.logout()


File: python.info,  Node: nntplib --- NNTP protocol client,  Next: smtplib --- SMTP protocol client,  Prev: imaplib --- IMAP4 protocol client,  Up: Internet Protocols and Support

5.21.16 ‘nntplib’ — NNTP protocol client
----------------------------------------

`Source code:' Lib/nntplib.py(1)

__________________________________________________________________

This module defines the class *note NNTP: 65d. which implements the
client side of the Network News Transfer Protocol.  It can be used to
implement a news reader or poster, or automated news processors.  It is
compatible with RFC 3977(2) as well as the older RFC 977(3) and RFC
2980(4).

Here are two small examples of how it can be used.  To list some
statistics about a newsgroup and print the subjects of the last 10
articles:

     >>> s = nntplib.NNTP('news.gmane.org')
     >>> resp, count, first, last, name = s.group('gmane.comp.python.committers')
     >>> print('Group', name, 'has', count, 'articles, range', first, 'to', last)
     Group gmane.comp.python.committers has 1096 articles, range 1 to 1096
     >>> resp, overviews = s.over((last - 9, last))
     >>> for id, over in overviews:
     ...     print(id, nntplib.decode_header(over['subject']))
     ...
     1087 Re: Commit privileges for Łukasz Langa
     1088 Re: 3.2 alpha 2 freeze
     1089 Re: 3.2 alpha 2 freeze
     1090 Re: Commit privileges for Łukasz Langa
     1091 Re: Commit privileges for Łukasz Langa
     1092 Updated ssh key
     1093 Re: Updated ssh key
     1094 Re: Updated ssh key
     1095 Hello fellow committers!
     1096 Re: Hello fellow committers!
     >>> s.quit()
     '205 Bye!'

To post an article from a binary file (this assumes that the article has
valid headers, and that you have right to post on the particular
newsgroup):

     >>> s = nntplib.NNTP('news.gmane.org')
     >>> f = open('article.txt', 'rb')
     >>> s.post(f)
     '240 Article posted successfully.'
     >>> s.quit()
     '205 Bye!'

The module itself defines the following classes:

 -- Class: nntplib.NNTP (host, port=119, user=None, password=None,
          readermode=None, usenetrc=False[, timeout])

     Return a new *note NNTP: 65d. object, representing a connection to
     the NNTP server running on host `host', listening at port `port'.
     An optional `timeout' can be specified for the socket connection.
     If the optional `user' and `password' are provided, or if suitable
     credentials are present in ‘/.netrc’ and the optional flag
     `usenetrc' is true, the ‘AUTHINFO USER’ and ‘AUTHINFO PASS’
     commands are used to identify and authenticate the user to the
     server.  If the optional flag `readermode' is true, then a ‘mode
     reader’ command is sent before authentication is performed.  Reader
     mode is sometimes necessary if you are connecting to an NNTP server
     on the local machine and intend to call reader-specific commands,
     such as ‘group’.  If you get unexpected *note NNTPPermanentError:
     2637.s, you might need to set `readermode'.  The *note NNTP: 65d.
     class supports the *note with: 29d. statement to unconditionally
     consume *note OSError: 4b6. exceptions and to close the NNTP
     connection when done, e.g.:

          >>> from nntplib import NNTP
          >>> with NNTP('news.gmane.org') as n:
          ...     n.group('gmane.comp.python.committers')
          ...
          ('211 1755 1 1755 gmane.comp.python.committers', 1755, 1, 1755, 'gmane.comp.python.committers')
          >>>

     Changed in version 3.2: `usenetrc' is now ‘False’ by default.

     Changed in version 3.3: Support for the *note with: 29d. statement
     was added.

 -- Class: nntplib.NNTP_SSL (host, port=563, user=None, password=None,
          ssl_context=None, readermode=None, usenetrc=False[, timeout])

     Return a new *note NNTP_SSL: 802. object, representing an encrypted
     connection to the NNTP server running on host `host', listening at
     port `port'.  *note NNTP_SSL: 802. objects have the same methods as
     *note NNTP: 65d. objects.  If `port' is omitted, port 563 (NNTPS)
     is used.  `ssl_context' is also optional, and is a *note
     SSLContext: 1c6. object.  Please read *note Security
     considerations: 1e6a. for best practices.  All other parameters
     behave the same as for *note NNTP: 65d.

     Note that SSL-on-563 is discouraged per RFC 4642(5), in favor of
     STARTTLS as described below.  However, some servers only support
     the former.

     New in version 3.2.

     Changed in version 3.4: The class now supports hostname check with
     *note ssl.SSLContext.check_hostname: 1e94. and `Server Name
     Indication' (see *note ssl.HAS_SNI: 1e8d.).

 -- Exception: nntplib.NNTPError

     Derived from the standard exception *note Exception: 1a1, this is
     the base class for all exceptions raised by the *note nntplib: be.
     module.  Instances of this class have the following attribute:

      -- Attribute: response

          The response of the server if available, as a *note str: 25a.
          object.

 -- Exception: nntplib.NNTPReplyError

     Exception raised when an unexpected reply is received from the
     server.

 -- Exception: nntplib.NNTPTemporaryError

     Exception raised when a response code in the range 400–499 is
     received.

 -- Exception: nntplib.NNTPPermanentError

     Exception raised when a response code in the range 500–599 is
     received.

 -- Exception: nntplib.NNTPProtocolError

     Exception raised when a reply is received from the server that does
     not begin with a digit in the range 1–5.

 -- Exception: nntplib.NNTPDataError

     Exception raised when there is some error in the response data.

* Menu:

* NNTP Objects:: 
* Utility functions: Utility functions<2>. 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/nntplib.py

   (2) https://tools.ietf.org/html/rfc3977.html

   (3) https://tools.ietf.org/html/rfc977.html

   (4) https://tools.ietf.org/html/rfc2980.html

   (5) https://tools.ietf.org/html/rfc4642.html


File: python.info,  Node: NNTP Objects,  Next: Utility functions<2>,  Up: nntplib --- NNTP protocol client

5.21.16.1 NNTP Objects
......................

When connected, *note NNTP: 65d. and *note NNTP_SSL: 802. objects
support the following methods and attributes.

* Menu:

* Attributes:: 
* Methods: Methods<3>. 


File: python.info,  Node: Attributes,  Next: Methods<3>,  Up: NNTP Objects

5.21.16.2 Attributes
....................

 -- Attribute: NNTP.nntp_version

     An integer representing the version of the NNTP protocol supported
     by the server.  In practice, this should be ‘2’ for servers
     advertising RFC 3977(1) compliance and ‘1’ for others.

     New in version 3.2.

 -- Attribute: NNTP.nntp_implementation

     A string describing the software name and version of the NNTP
     server, or *note None: 19d. if not advertised by the server.

     New in version 3.2.

   ---------- Footnotes ----------

   (1) https://tools.ietf.org/html/rfc3977.html


File: python.info,  Node: Methods<3>,  Prev: Attributes,  Up: NNTP Objects

5.21.16.3 Methods
.................

The `response' that is returned as the first item in the return tuple of
almost all methods is the server’s response: a string beginning with a
three-digit code.  If the server’s response indicates an error, the
method raises one of the above exceptions.

Many of the following methods take an optional keyword-only argument
`file'.  When the `file' argument is supplied, it must be either a *note
file object: 78b. opened for binary writing, or the name of an on-disk
file to be written to.  The method will then write any data returned by
the server (except for the response line and the terminating dot) to the
file; any list of lines, tuples or objects that the method normally
returns will be empty.

Changed in version 3.2: Many of the following methods have been reworked
and fixed, which makes them incompatible with their 3.1 counterparts.

 -- Method: NNTP.quit ()

     Send a ‘QUIT’ command and close the connection.  Once this method
     has been called, no other methods of the NNTP object should be
     called.

 -- Method: NNTP.getwelcome ()

     Return the welcome message sent by the server in reply to the
     initial connection.  (This message sometimes contains disclaimers
     or help information that may be relevant to the user.)

 -- Method: NNTP.getcapabilities ()

     Return the RFC 3977(1) capabilities advertised by the server, as a
     *note dict: 3b0. instance mapping capability names to (possibly
     empty) lists of values.  On legacy servers which don’t understand
     the ‘CAPABILITIES’ command, an empty dictionary is returned
     instead.

          >>> s = NNTP('news.gmane.org')
          >>> 'POST' in s.getcapabilities()
          True

     New in version 3.2.

 -- Method: NNTP.login (user=None, password=None, usenetrc=True)

     Send ‘AUTHINFO’ commands with the user name and password.  If
     `user' and `password' are None and `usenetrc' is true, credentials
     from ‘~/.netrc’ will be used if possible.

     Unless intentionally delayed, login is normally performed during
     the *note NNTP: 65d. object initialization and separately calling
     this function is unnecessary.  To force authentication to be
     delayed, you must not set `user' or `password' when creating the
     object, and must set `usenetrc' to False.

     New in version 3.2.

 -- Method: NNTP.starttls (ssl_context=None)

     Send a ‘STARTTLS’ command.  This will enable encryption on the NNTP
     connection.  The `ssl_context' argument is optional and should be a
     *note ssl.SSLContext: 1c6. object.  Please read *note Security
     considerations: 1e6a. for best practices.

     Note that this may not be done after authentication information has
     been transmitted, and authentication occurs by default if possible
     during a *note NNTP: 65d. object initialization.  See *note
     NNTP.login(): 2647. for information on suppressing this behavior.

     New in version 3.2.

     Changed in version 3.4: The method now supports hostname check with
     *note ssl.SSLContext.check_hostname: 1e94. and `Server Name
     Indication' (see *note ssl.HAS_SNI: 1e8d.).

 -- Method: NNTP.newgroups (date, *, file=None)

     Send a ‘NEWGROUPS’ command.  The `date' argument should be a *note
     datetime.date: 9c0. or *note datetime.datetime: 60c. object.
     Return a pair ‘(response, groups)’ where `groups' is a list
     representing the groups that are new since the given `date'.  If
     `file' is supplied, though, then `groups' will be empty.

          >>> from datetime import date, timedelta
          >>> resp, groups = s.newgroups(date.today() - timedelta(days=3))
          >>> len(groups)
          85
          >>> groups[0]
          GroupInfo(group='gmane.network.tor.devel', last='4', first='1', flag='m')

 -- Method: NNTP.newnews (group, date, *, file=None)

     Send a ‘NEWNEWS’ command.  Here, `group' is a group name or ‘'*'’,
     and `date' has the same meaning as for *note newgroups(): 2648.
     Return a pair ‘(response, articles)’ where `articles' is a list of
     message ids.

     This command is frequently disabled by NNTP server administrators.

 -- Method: NNTP.list (group_pattern=None, *, file=None)

     Send a ‘LIST’ or ‘LIST ACTIVE’ command.  Return a pair ‘(response,
     list)’ where `list' is a list of tuples representing all the groups
     available from this NNTP server, optionally matching the pattern
     string `group_pattern'.  Each tuple has the form ‘(group, last,
     first, flag)’, where `group' is a group name, `last' and `first'
     are the last and first article numbers, and `flag' usually takes
     one of these values:

        * ‘y’: Local postings and articles from peers are allowed.

        * ‘m’: The group is moderated and all postings must be approved.

        * ‘n’: No local postings are allowed, only articles from peers.

        * ‘j’: Articles from peers are filed in the junk group instead.

        * ‘x’: No local postings, and articles from peers are ignored.

        * ‘=foo.bar’: Articles are filed in the ‘foo.bar’ group instead.

     If `flag' has another value, then the status of the newsgroup
     should be considered unknown.

     This command can return very large results, especially if
     `group_pattern' is not specified.  It is best to cache the results
     offline unless you really need to refresh them.

     Changed in version 3.2: `group_pattern' was added.

 -- Method: NNTP.descriptions (grouppattern)

     Send a ‘LIST NEWSGROUPS’ command, where `grouppattern' is a wildmat
     string as specified in RFC 3977(2) (it’s essentially the same as
     DOS or UNIX shell wildcard strings).  Return a pair ‘(response,
     descriptions)’, where `descriptions' is a dictionary mapping group
     names to textual descriptions.

          >>> resp, descs = s.descriptions('gmane.comp.python.*')
          >>> len(descs)
          295
          >>> descs.popitem()
          ('gmane.comp.python.bio.general', 'BioPython discussion list (Moderated)')

 -- Method: NNTP.description (group)

     Get a description for a single group `group'.  If more than one
     group matches (if ’group’ is a real wildmat string), return the
     first match.  If no group matches, return an empty string.

     This elides the response code from the server.  If the response
     code is needed, use *note descriptions(): 264b.

 -- Method: NNTP.group (name)

     Send a ‘GROUP’ command, where `name' is the group name.  The group
     is selected as the current group, if it exists.  Return a tuple
     ‘(response, count, first, last, name)’ where `count' is the
     (estimated) number of articles in the group, `first' is the first
     article number in the group, `last' is the last article number in
     the group, and `name' is the group name.

 -- Method: NNTP.over (message_spec, *, file=None)

     Send an ‘OVER’ command, or an ‘XOVER’ command on legacy servers.
     `message_spec' can be either a string representing a message id, or
     a ‘(first, last)’ tuple of numbers indicating a range of articles
     in the current group, or a ‘(first, None)’ tuple indicating a range
     of articles starting from `first' to the last article in the
     current group, or *note None: 19d. to select the current article in
     the current group.

     Return a pair ‘(response, overviews)’.  `overviews' is a list of
     ‘(article_number, overview)’ tuples, one for each article selected
     by `message_spec'.  Each `overview' is a dictionary with the same
     number of items, but this number depends on the server.  These
     items are either message headers (the key is then the lower-cased
     header name) or metadata items (the key is then the metadata name
     prepended with ‘":"’).  The following items are guaranteed to be
     present by the NNTP specification:

        * the ‘subject’, ‘from’, ‘date’, ‘message-id’ and ‘references’
          headers

        * the ‘:bytes’ metadata: the number of bytes in the entire raw
          article (including headers and body)

        * the ‘:lines’ metadata: the number of lines in the article body

     The value of each item is either a string, or *note None: 19d. if
     not present.

     It is advisable to use the *note decode_header(): 264f. function on
     header values when they may contain non-ASCII characters:

          >>> _, _, first, last, _ = s.group('gmane.comp.python.devel')
          >>> resp, overviews = s.over((last, last))
          >>> art_num, over = overviews[0]
          >>> art_num
          117216
          >>> list(over.keys())
          ['xref', 'from', ':lines', ':bytes', 'references', 'date', 'message-id', 'subject']
          >>> over['from']
          '=?UTF-8?B?Ik1hcnRpbiB2LiBMw7Z3aXMi?= <martin@v.loewis.de>'
          >>> nntplib.decode_header(over['from'])
          '"Martin v. Löwis" <martin@v.loewis.de>'

     New in version 3.2.

 -- Method: NNTP.help (*, file=None)

     Send a ‘HELP’ command.  Return a pair ‘(response, list)’ where
     `list' is a list of help strings.

 -- Method: NNTP.stat (message_spec=None)

     Send a ‘STAT’ command, where `message_spec' is either a message id
     (enclosed in ‘'<'’ and ‘'>'’) or an article number in the current
     group.  If `message_spec' is omitted or *note None: 19d, the
     current article in the current group is considered.  Return a
     triple ‘(response, number, id)’ where `number' is the article
     number and `id' is the message id.

          >>> _, _, first, last, _ = s.group('gmane.comp.python.devel')
          >>> resp, number, message_id = s.stat(first)
          >>> number, message_id
          (9099, '<20030112190404.GE29873@epoch.metaslash.com>')

 -- Method: NNTP.next ()

     Send a ‘NEXT’ command.  Return as for *note stat(): 2651.

 -- Method: NNTP.last ()

     Send a ‘LAST’ command.  Return as for *note stat(): 2651.

 -- Method: NNTP.article (message_spec=None, *, file=None)

     Send an ‘ARTICLE’ command, where `message_spec' has the same
     meaning as for *note stat(): 2651.  Return a tuple ‘(response,
     info)’ where `info' is a *note namedtuple: 229. with three
     attributes `number', `message_id' and `lines' (in that order).
     `number' is the article number in the group (or 0 if the
     information is not available), `message_id' the message id as a
     string, and `lines' a list of lines (without terminating newlines)
     comprising the raw message including headers and body.

          >>> resp, info = s.article('<20030112190404.GE29873@epoch.metaslash.com>')
          >>> info.number
          0
          >>> info.message_id
          '<20030112190404.GE29873@epoch.metaslash.com>'
          >>> len(info.lines)
          65
          >>> info.lines[0]
          b'Path: main.gmane.org!not-for-mail'
          >>> info.lines[1]
          b'From: Neal Norwitz <neal@metaslash.com>'
          >>> info.lines[-3:]
          [b'There is a patch for 2.3 as well as 2.2.', b'', b'Neal']

 -- Method: NNTP.head (message_spec=None, *, file=None)

     Same as *note article(): 2654, but sends a ‘HEAD’ command.  The
     `lines' returned (or written to `file') will only contain the
     message headers, not the body.

 -- Method: NNTP.body (message_spec=None, *, file=None)

     Same as *note article(): 2654, but sends a ‘BODY’ command.  The
     `lines' returned (or written to `file') will only contain the
     message body, not the headers.

 -- Method: NNTP.post (data)

     Post an article using the ‘POST’ command.  The `data' argument is
     either a *note file object: 78b. opened for binary reading, or any
     iterable of bytes objects (representing raw lines of the article to
     be posted).  It should represent a well-formed news article,
     including the required headers.  The *note post(): 2657. method
     automatically escapes lines beginning with ‘.’ and appends the
     termination line.

     If the method succeeds, the server’s response is returned.  If the
     server refuses posting, a *note NNTPReplyError: 263a. is raised.

 -- Method: NNTP.ihave (message_id, data)

     Send an ‘IHAVE’ command.  `message_id' is the id of the message to
     send to the server (enclosed in ‘'<'’ and ‘'>'’).  The `data'
     parameter and the return value are the same as for *note post():
     2657.

 -- Method: NNTP.date ()

     Return a pair ‘(response, date)’.  `date' is a *note datetime: 60c.
     object containing the current date and time of the server.

 -- Method: NNTP.slave ()

     Send a ‘SLAVE’ command.  Return the server’s `response'.

 -- Method: NNTP.set_debuglevel (level)

     Set the instance’s debugging level.  This controls the amount of
     debugging output printed.  The default, ‘0’, produces no debugging
     output.  A value of ‘1’ produces a moderate amount of debugging
     output, generally a single line per request or response.  A value
     of ‘2’ or higher produces the maximum amount of debugging output,
     logging each line sent and received on the connection (including
     message text).

The following are optional NNTP extensions defined in RFC 2980(3).  Some
of them have been superseded by newer commands in RFC 3977(4).

 -- Method: NNTP.xhdr (hdr, str, *, file=None)

     Send an ‘XHDR’ command.  The `hdr' argument is a header keyword,
     e.g.  ‘'subject'’.  The `str' argument should have the form
     ‘'first-last'’ where `first' and `last' are the first and last
     article numbers to search.  Return a pair ‘(response, list)’, where
     `list' is a list of pairs ‘(id, text)’, where `id' is an article
     number (as a string) and `text' is the text of the requested header
     for that article.  If the `file' parameter is supplied, then the
     output of the ‘XHDR’ command is stored in a file.  If `file' is a
     string, then the method will open a file with that name, write to
     it then close it.  If `file' is a *note file object: 78b, then it
     will start calling ‘write()’ on it to store the lines of the
     command output.  If `file' is supplied, then the returned `list' is
     an empty list.

 -- Method: NNTP.xover (start, end, *, file=None)

     Send an ‘XOVER’ command.  `start' and `end' are article numbers
     delimiting the range of articles to select.  The return value is
     the same of for *note over(): 264e.  It is recommended to use *note
     over(): 264e. instead, since it will automatically use the newer
     ‘OVER’ command if available.

 -- Method: NNTP.xpath (id)

     Return a pair ‘(resp, path)’, where `path' is the directory path to
     the article with message ID `id'.  Most of the time, this extension
     is not enabled by NNTP server administrators.

     Deprecated since version 3.3: The XPATH extension is not actively
     used.

   ---------- Footnotes ----------

   (1) https://tools.ietf.org/html/rfc3977.html

   (2) https://tools.ietf.org/html/rfc3977.html

   (3) https://tools.ietf.org/html/rfc2980.html

   (4) https://tools.ietf.org/html/rfc3977.html


File: python.info,  Node: Utility functions<2>,  Prev: NNTP Objects,  Up: nntplib --- NNTP protocol client

5.21.16.4 Utility functions
...........................

The module also defines the following utility function:

 -- Function: nntplib.decode_header (header_str)

     Decode a header value, un-escaping any escaped non-ASCII
     characters.  `header_str' must be a *note str: 25a. object.  The
     unescaped value is returned.  Using this function is recommended to
     display some headers in a human readable form:

          >>> decode_header("Some subject")
          'Some subject'
          >>> decode_header("=?ISO-8859-15?Q?D=E9buter_en_Python?=")
          'Débuter en Python'
          >>> decode_header("Re: =?UTF-8?B?cHJvYmzDqG1lIGRlIG1hdHJpY2U=?=")
          'Re: problème de matrice'


File: python.info,  Node: smtplib --- SMTP protocol client,  Next: smtpd --- SMTP Server,  Prev: nntplib --- NNTP protocol client,  Up: Internet Protocols and Support

5.21.17 ‘smtplib’ — SMTP protocol client
----------------------------------------

`Source code:' Lib/smtplib.py(1)

__________________________________________________________________

The *note smtplib: eb. module defines an SMTP client session object that
can be used to send mail to any Internet machine with an SMTP or ESMTP
listener daemon.  For details of SMTP and ESMTP operation, consult RFC
821(2) (Simple Mail Transfer Protocol) and RFC 1869(3) (SMTP Service
Extensions).

 -- Class: smtplib.SMTP (host='', port=0, local_hostname=None[,
          timeout], source_address=None)

     An *note SMTP: 6b9. instance encapsulates an SMTP connection.  It
     has methods that support a full repertoire of SMTP and ESMTP
     operations.  If the optional host and port parameters are given,
     the SMTP *note connect(): 2662. method is called with those
     parameters during initialization.  If specified, `local_hostname'
     is used as the FQDN of the local host in the HELO/EHLO command.
     Otherwise, the local hostname is found using *note
     socket.getfqdn(): 1e42.  If the *note connect(): 2662. call returns
     anything other than a success code, an *note SMTPConnectError:
     2663. is raised.  The optional `timeout' parameter specifies a
     timeout in seconds for blocking operations like the connection
     attempt (if not specified, the global default timeout setting will
     be used).  If the timeout expires, *note socket.timeout: 86f. is
     raised.  The optional source_address parameter allows binding to
     some specific source address in a machine with multiple network
     interfaces, and/or to some specific source TCP port.  It takes a
     2-tuple (host, port), for the socket to bind to as its source
     address before connecting.  If omitted (or if host or port are ‘''’
     and/or 0 respectively) the OS default behavior will be used.

     For normal use, you should only require the initialization/connect,
     *note sendmail(): 30f, and ‘quit()’ methods.  An example is
     included below.

     The *note SMTP: 6b9. class supports the *note with: 29d. statement.
     When used like this, the SMTP ‘QUIT’ command is issued
     automatically when the *note with: 29d. statement exits.  E.g.:

          >>> from smtplib import SMTP
          >>> with SMTP("domain.org") as smtp:
          ...     smtp.noop()
          ...
          (250, b'Ok')
          >>>

     Changed in version 3.3: Support for the *note with: 29d. statement
     was added.

     Changed in version 3.3: source_address argument was added.

     New in version 3.5: The SMTPUTF8 extension ( RFC 6531(4)) is now
     supported.

 -- Class: smtplib.SMTP_SSL (host='', port=0, local_hostname=None,
          keyfile=None, certfile=None[, timeout], context=None,
          source_address=None)

     An *note SMTP_SSL: 6ba. instance behaves exactly the same as
     instances of *note SMTP: 6b9.  *note SMTP_SSL: 6ba. should be used
     for situations where SSL is required from the beginning of the
     connection and using ‘starttls()’ is not appropriate.  If `host' is
     not specified, the local host is used.  If `port' is zero, the
     standard SMTP-over-SSL port (465) is used.  The optional arguments
     `local_hostname', `timeout' and `source_address' have the same
     meaning as they do in the *note SMTP: 6b9. class.  `context', also
     optional, can contain a *note SSLContext: 1c6. and allows
     configuring various aspects of the secure connection.  Please read
     *note Security considerations: 1e6a. for best practices.

     `keyfile' and `certfile' are a legacy alternative to `context', and
     can point to a PEM formatted private key and certificate chain file
     for the SSL connection.

     Changed in version 3.3: `context' was added.

     Changed in version 3.3: source_address argument was added.

     Changed in version 3.4: The class now supports hostname check with
     *note ssl.SSLContext.check_hostname: 1e94. and `Server Name
     Indication' (see *note ssl.HAS_SNI: 1e8d.).

 -- Class: smtplib.LMTP (host='', port=LMTP_PORT, local_hostname=None,
          source_address=None)

     The LMTP protocol, which is very similar to ESMTP, is heavily based
     on the standard SMTP client.  It’s common to use Unix sockets for
     LMTP, so our ‘connect()’ method must support that as well as a
     regular host:port server.  The optional arguments local_hostname
     and source_address have the same meaning as they do in the *note
     SMTP: 6b9. class.  To specify a Unix socket, you must use an
     absolute path for `host', starting with a ’/’.

     Authentication is supported, using the regular SMTP mechanism.
     When using a Unix socket, LMTP generally don’t support or require
     any authentication, but your mileage might vary.

A nice selection of exceptions is defined as well:

 -- Exception: smtplib.SMTPException

     Subclass of *note OSError: 4b6. that is the base exception class
     for all the other exceptions provided by this module.

     Changed in version 3.4: SMTPException became subclass of *note
     OSError: 4b6.

 -- Exception: smtplib.SMTPServerDisconnected

     This exception is raised when the server unexpectedly disconnects,
     or when an attempt is made to use the *note SMTP: 6b9. instance
     before connecting it to a server.

 -- Exception: smtplib.SMTPResponseException

     Base class for all exceptions that include an SMTP error code.
     These exceptions are generated in some instances when the SMTP
     server returns an error code.  The error code is stored in the
     ‘smtp_code’ attribute of the error, and the ‘smtp_error’ attribute
     is set to the error message.

 -- Exception: smtplib.SMTPSenderRefused

     Sender address refused.  In addition to the attributes set by on
     all *note SMTPResponseException: 2665. exceptions, this sets
     ’sender’ to the string that the SMTP server refused.

 -- Exception: smtplib.SMTPRecipientsRefused

     All recipient addresses refused.  The errors for each recipient are
     accessible through the attribute ‘recipients’, which is a
     dictionary of exactly the same sort as *note SMTP.sendmail(): 30f.
     returns.

 -- Exception: smtplib.SMTPDataError

     The SMTP server refused to accept the message data.

 -- Exception: smtplib.SMTPConnectError

     Error occurred during establishment of a connection with the
     server.

 -- Exception: smtplib.SMTPHeloError

     The server refused our ‘HELO’ message.

 -- Exception: smtplib.SMTPNotSupportedError

     The command or option attempted is not supported by the server.

     New in version 3.5.

 -- Exception: smtplib.SMTPAuthenticationError

     SMTP authentication went wrong.  Most probably the server didn’t
     accept the username/password combination provided.

See also
........

RFC 821(5) - Simple Mail Transfer Protocol

     Protocol definition for SMTP. This document covers the model,
     operating procedure, and protocol details for SMTP.

RFC 1869(6) - SMTP Service Extensions

     Definition of the ESMTP extensions for SMTP. This describes a
     framework for extending SMTP with new commands, supporting dynamic
     discovery of the commands provided by the server, and defines a few
     additional commands.

* Menu:

* SMTP Objects:: 
* SMTP Example:: 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/smtplib.py

   (2) https://tools.ietf.org/html/rfc821.html

   (3) https://tools.ietf.org/html/rfc1869.html

   (4) https://tools.ietf.org/html/rfc6531.html

   (5) https://tools.ietf.org/html/rfc821.html

   (6) https://tools.ietf.org/html/rfc1869.html


File: python.info,  Node: SMTP Objects,  Next: SMTP Example,  Up: smtplib --- SMTP protocol client

5.21.17.1 SMTP Objects
......................

An *note SMTP: 6b9. instance has the following methods:

 -- Method: SMTP.set_debuglevel (level)

     Set the debug output level.  A value of 1 or ‘True’ for `level'
     results in debug messages for connection and for all messages sent
     to and received from the server.  A value of 2 for `level' results
     in these messages being timestamped.

     Changed in version 3.5: Added debuglevel 2.

 -- Method: SMTP.docmd (cmd, args='')

     Send a command `cmd' to the server.  The optional argument `args'
     is simply concatenated to the command, separated by a space.

     This returns a 2-tuple composed of a numeric response code and the
     actual response line (multiline responses are joined into one long
     line.)

     In normal operation it should not be necessary to call this method
     explicitly.  It is used to implement other methods and may be
     useful for testing private extensions.

     If the connection to the server is lost while waiting for the
     reply, *note SMTPServerDisconnected: 2664. will be raised.

 -- Method: SMTP.connect (host='localhost', port=0)

     Connect to a host on a given port.  The defaults are to connect to
     the local host at the standard SMTP port (25).  If the hostname
     ends with a colon (‘':'’) followed by a number, that suffix will be
     stripped off and the number interpreted as the port number to use.
     This method is automatically invoked by the constructor if a host
     is specified during instantiation.  Returns a 2-tuple of the
     response code and message sent by the server in its connection
     response.

 -- Method: SMTP.helo (name='')

     Identify yourself to the SMTP server using ‘HELO’.  The hostname
     argument defaults to the fully qualified domain name of the local
     host.  The message returned by the server is stored as the
     ‘helo_resp’ attribute of the object.

     In normal operation it should not be necessary to call this method
     explicitly.  It will be implicitly called by the *note sendmail():
     30f. when necessary.

 -- Method: SMTP.ehlo (name='')

     Identify yourself to an ESMTP server using ‘EHLO’.  The hostname
     argument defaults to the fully qualified domain name of the local
     host.  Examine the response for ESMTP option and store them for use
     by *note has_extn(): 2671.  Also sets several informational
     attributes: the message returned by the server is stored as the
     ‘ehlo_resp’ attribute, ‘does_esmtp’ is set to true or false
     depending on whether the server supports ESMTP, and
     ‘esmtp_features’ will be a dictionary containing the names of the
     SMTP service extensions this server supports, and their parameters
     (if any).

     Unless you wish to use *note has_extn(): 2671. before sending mail,
     it should not be necessary to call this method explicitly.  It will
     be implicitly called by *note sendmail(): 30f. when necessary.

 -- Method: SMTP.ehlo_or_helo_if_needed ()

     This method call *note ehlo(): 2670. and or *note helo(): 266f. if
     there has been no previous ‘EHLO’ or ‘HELO’ command this session.
     It tries ESMTP ‘EHLO’ first.

     *note SMTPHeloError: 2669.

          The server didn’t reply properly to the ‘HELO’ greeting.

 -- Method: SMTP.has_extn (name)

     Return *note True: 9ff. if `name' is in the set of SMTP service
     extensions returned by the server, *note False: 60d. otherwise.
     Case is ignored.

 -- Method: SMTP.verify (address)

     Check the validity of an address on this server using SMTP ‘VRFY’.
     Returns a tuple consisting of code 250 and a full RFC 822(1)
     address (including human name) if the user address is valid.
     Otherwise returns an SMTP error code of 400 or greater and an error
     string.

          Note: Many sites disable SMTP ‘VRFY’ in order to foil
          spammers.

 -- Method: SMTP.login (user, password, *, initial_response_ok=True)

     Log in on an SMTP server that requires authentication.  The
     arguments are the username and the password to authenticate with.
     If there has been no previous ‘EHLO’ or ‘HELO’ command this
     session, this method tries ESMTP ‘EHLO’ first.  This method will
     return normally if the authentication was successful, or may raise
     the following exceptions:

     *note SMTPHeloError: 2669.

          The server didn’t reply properly to the ‘HELO’ greeting.

     *note SMTPAuthenticationError: 266b.

          The server didn’t accept the username/password combination.

     *note SMTPNotSupportedError: 266a.

          The ‘AUTH’ command is not supported by the server.

     *note SMTPException: 4b5.

          No suitable authentication method was found.

     Each of the authentication methods supported by *note smtplib: eb.
     are tried in turn if they are advertised as supported by the
     server.  See *note auth(): 30d. for a list of supported
     authentication methods.  `initial_response_ok' is passed through to
     *note auth(): 30d.

     Optional keyword argument `initial_response_ok' specifies whether,
     for authentication methods that support it, an "initial response"
     as specified in RFC 4954(2) can be sent along with the ‘AUTH’
     command, rather than requiring a challenge/response.

     Changed in version 3.5: *note SMTPNotSupportedError: 266a. may be
     raised, and the `initial_response_ok' parameter was added.

 -- Method: SMTP.auth (mechanism, authobject, *,
          initial_response_ok=True)

     Issue an ‘SMTP’ ‘AUTH’ command for the specified authentication
     `mechanism', and handle the challenge response via `authobject'.

     `mechanism' specifies which authentication mechanism is to be used
     as argument to the ‘AUTH’ command; the valid values are those
     listed in the ‘auth’ element of ‘esmtp_features’.

     `authobject' must be a callable object taking an optional single
     argument:

          data = authobject(challenge=None)

     If optional keyword argument `initial_response_ok' is true,
     ‘authobject()’ will be called first with no argument.  It can
     return the RFC 4954(3) "initial response" bytes which will be
     encoded and sent with the ‘AUTH’ command as below.  If the
     ‘authobject()’ does not support an initial response (e.g.  because
     it requires a challenge), it should return None when called with
     ‘challenge=None’.  If `initial_response_ok' is false, then
     ‘authobject()’ will not be called first with None.

     If the initial response check returns None, or if
     `initial_response_ok' is false, ‘authobject()’ will be called to
     process the server’s challenge response; the `challenge' argument
     it is passed will be a ‘bytes’.  It should return ‘bytes’ `data'
     that will be base64 encoded and sent to the server.

     The ‘SMTP’ class provides ‘authobjects’ for the ‘CRAM-MD5’,
     ‘PLAIN’, and ‘LOGIN’ mechanisms; they are named
     ‘SMTP.auth_cram_md5’, ‘SMTP.auth_plain’, and ‘SMTP.auth_login’
     respectively.  They all require that the ‘user’ and ‘password’
     properties of the ‘SMTP’ instance are set to appropriate values.

     User code does not normally need to call ‘auth’ directly, but can
     instead call the *note login(): 2674. method, which will try each
     of the above mechanisms in turn, in the order listed.  ‘auth’ is
     exposed to facilitate the implementation of authentication methods
     not (or not yet) supported directly by *note smtplib: eb.

     New in version 3.5.

 -- Method: SMTP.starttls (keyfile=None, certfile=None, context=None)

     Put the SMTP connection in TLS (Transport Layer Security) mode.
     All SMTP commands that follow will be encrypted.  You should then
     call *note ehlo(): 2670. again.

     If `keyfile' and `certfile' are provided, these are passed to the
     *note socket: ed. module’s *note ssl(): f1. function.

     Optional `context' parameter is a *note ssl.SSLContext: 1c6.
     object; This is an alternative to using a keyfile and a certfile
     and if specified both `keyfile' and `certfile' should be None.

     If there has been no previous ‘EHLO’ or ‘HELO’ command this
     session, this method tries ESMTP ‘EHLO’ first.

     *note SMTPHeloError: 2669.

          The server didn’t reply properly to the ‘HELO’ greeting.

     *note SMTPNotSupportedError: 266a.

          The server does not support the STARTTLS extension.

     *note RuntimeError: 193.

          SSL/TLS support is not available to your Python interpreter.

     Changed in version 3.3: `context' was added.

     Changed in version 3.4: The method now supports hostname check with
     ‘SSLContext.check_hostname’ and `Server Name Indicator' (see *note
     HAS_SNI: 1e8d.).

     Changed in version 3.5: The error raised for lack of STARTTLS
     support is now the *note SMTPNotSupportedError: 266a. subclass
     instead of the base *note SMTPException: 4b5.

 -- Method: SMTP.sendmail (from_addr, to_addrs, msg, mail_options=[],
          rcpt_options=[])

     Send mail.  The required arguments are an RFC 822(4) from-address
     string, a list of RFC 822(5) to-address strings (a bare string will
     be treated as a list with 1 address), and a message string.  The
     caller may pass a list of ESMTP options (such as ‘8bitmime’) to be
     used in ‘MAIL FROM’ commands as `mail_options'.  ESMTP options
     (such as ‘DSN’ commands) that should be used with all ‘RCPT’
     commands can be passed as `rcpt_options'.  (If you need to use
     different ESMTP options to different recipients you have to use the
     low-level methods such as ‘mail()’, ‘rcpt()’ and ‘data()’ to send
     the message.)

          Note: The `from_addr' and `to_addrs' parameters are used to
          construct the message envelope used by the transport agents.
          ‘sendmail’ does not modify the message headers in any way.

     `msg' may be a string containing characters in the ASCII range, or
     a byte string.  A string is encoded to bytes using the ascii codec,
     and lone ‘\r’ and ‘\n’ characters are converted to ‘\r\n’
     characters.  A byte string is not modified.

     If there has been no previous ‘EHLO’ or ‘HELO’ command this
     session, this method tries ESMTP ‘EHLO’ first.  If the server does
     ESMTP, message size and each of the specified options will be
     passed to it (if the option is in the feature set the server
     advertises).  If ‘EHLO’ fails, ‘HELO’ will be tried and ESMTP
     options suppressed.

     This method will return normally if the mail is accepted for at
     least one recipient.  Otherwise it will raise an exception.  That
     is, if this method does not raise an exception, then someone should
     get your mail.  If this method does not raise an exception, it
     returns a dictionary, with one entry for each recipient that was
     refused.  Each entry contains a tuple of the SMTP error code and
     the accompanying error message sent by the server.

     If ‘SMTPUTF8’ is included in `mail_options', and the server
     supports it, `from_addr' and `to_addr' may contain non-ASCII
     characters.

     This method may raise the following exceptions:

     *note SMTPRecipientsRefused: 2667.

          All recipients were refused.  Nobody got the mail.  The
          ‘recipients’ attribute of the exception object is a dictionary
          with information about the refused recipients (like the one
          returned when at least one recipient was accepted).

     *note SMTPHeloError: 2669.

          The server didn’t reply properly to the ‘HELO’ greeting.

     *note SMTPSenderRefused: 2666.

          The server didn’t accept the `from_addr'.

     *note SMTPDataError: 2668.

          The server replied with an unexpected error code (other than a
          refusal of a recipient).

     *note SMTPNotSupportedError: 266a.

          ‘SMTPUTF8’ was given in the `mail_options' but is not
          supported by the server.

     Unless otherwise noted, the connection will be open even after an
     exception is raised.

     Changed in version 3.2: `msg' may be a byte string.

     Changed in version 3.5: ‘SMTPUTF8’ support added, and *note
     SMTPNotSupportedError: 266a. may be raised if ‘SMTPUTF8’ is
     specified but the server does not support it.

 -- Method: SMTP.send_message (msg, from_addr=None, to_addrs=None,
          mail_options=[], rcpt_options=[])

     This is a convenience method for calling *note sendmail(): 30f.
     with the message represented by an *note email.message.Message:
     3d2. object.  The arguments have the same meaning as for *note
     sendmail(): 30f, except that `msg' is a ‘Message’ object.

     If `from_addr' is ‘None’ or `to_addrs' is ‘None’, ‘send_message’
     fills those arguments with addresses extracted from the headers of
     `msg' as specified in RFC 5322(6): `from_addr' is set to the
     ‘Sender’ field if it is present, and otherwise to the ‘From’ field.
     `to_adresses' combines the values (if any) of the ‘To’, ‘Cc’, and
     ‘Bcc’ fields from `msg'.  If exactly one set of ‘Resent-*’ headers
     appear in the message, the regular headers are ignored and the
     ‘Resent-*’ headers are used instead.  If the message contains more
     than one set of ‘Resent-*’ headers, a *note ValueError: 19c. is
     raised, since there is no way to unambiguously detect the most
     recent set of ‘Resent-’ headers.

     ‘send_message’ serializes `msg' using *note BytesGenerator: 796.
     with ‘\r\n’ as the `linesep', and calls *note sendmail(): 30f. to
     transmit the resulting message.  Regardless of the values of
     `from_addr' and `to_addrs', ‘send_message’ does not transmit any
     ‘Bcc’ or ‘Resent-Bcc’ headers that may appear in `msg'.  If any of
     the addresses in `from_addr' and `to_addrs' contain non-ASCII
     characters and the server does not advertise ‘SMTPUTF8’ support, an
     ‘SMTPNotSupported’ error is raised.  Otherwise the ‘Message’ is
     serialized with a clone of its *note policy: 73. with the *note
     utf8: 282. attribute set to ‘True’, and ‘SMTPUTF8’ and
     ‘BODY=8BITMIME’ are added to `mail_options'.

     New in version 3.2.

     New in version 3.5: Support for internationalized addresses
     (‘SMTPUTF8’).

 -- Method: SMTP.quit ()

     Terminate the SMTP session and close the connection.  Return the
     result of the SMTP ‘QUIT’ command.

Low-level methods corresponding to the standard SMTP/ESMTP commands
‘HELP’, ‘RSET’, ‘NOOP’, ‘MAIL’, ‘RCPT’, and ‘DATA’ are also supported.
Normally these do not need to be called directly, so they are not
documented here.  For details, consult the module code.

   ---------- Footnotes ----------

   (1) https://tools.ietf.org/html/rfc822.html

   (2) https://tools.ietf.org/html/rfc4954.html

   (3) https://tools.ietf.org/html/rfc4954.html

   (4) https://tools.ietf.org/html/rfc822.html

   (5) https://tools.ietf.org/html/rfc822.html

   (6) https://tools.ietf.org/html/rfc5322.html


File: python.info,  Node: SMTP Example,  Prev: SMTP Objects,  Up: smtplib --- SMTP protocol client

5.21.17.2 SMTP Example
......................

This example prompts the user for addresses needed in the message
envelope (’To’ and ’From’ addresses), and the message to be delivered.
Note that the headers to be included with the message must be included
in the message as entered; this example doesn’t do any processing of the
RFC 822(1) headers.  In particular, the ’To’ and ’From’ addresses must
be included in the message headers explicitly.

     import smtplib

     def prompt(prompt):
         return input(prompt).strip()

     fromaddr = prompt("From: ")
     toaddrs  = prompt("To: ").split()
     print("Enter message, end with ^D (Unix) or ^Z (Windows):")

     # Add the From: and To: headers at the start!
     msg = ("From: %s\r\nTo: %s\r\n\r\n"
            % (fromaddr, ", ".join(toaddrs)))
     while True:
         try:
             line = input()
         except EOFError:
             break
         if not line:
             break
         msg = msg + line

     print("Message length is", len(msg))

     server = smtplib.SMTP('localhost')
     server.set_debuglevel(1)
     server.sendmail(fromaddr, toaddrs, msg)
     server.quit()

     Note: In general, you will want to use the *note email: 67.
     package’s features to construct an email message, which you can
     then send via *note send_message(): 310.; see *note email;
     Examples: 218a.

   ---------- Footnotes ----------

   (1) https://tools.ietf.org/html/rfc822.html


File: python.info,  Node: smtpd --- SMTP Server,  Next: telnetlib --- Telnet client,  Prev: smtplib --- SMTP protocol client,  Up: Internet Protocols and Support

5.21.18 ‘smtpd’ — SMTP Server
-----------------------------

`Source code:' Lib/smtpd.py(1)

__________________________________________________________________

This module offers several classes to implement SMTP (email) servers.

Several server implementations are present; one is a generic do-nothing
implementation, which can be overridden, while the other two offer
specific mail-sending strategies.

Additionally the SMTPChannel may be extended to implement very specific
interaction behaviour with SMTP clients.

The code supports RFC 5321(2), plus the RFC 1870(3) SIZE and RFC 6531(4)
SMTPUTF8 extensions.

* Menu:

* SMTPServer Objects:: 
* DebuggingServer Objects:: 
* PureProxy Objects:: 
* MailmanProxy Objects:: 
* SMTPChannel Objects:: 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/smtpd.py

   (2) https://tools.ietf.org/html/rfc5321.html

   (3) https://tools.ietf.org/html/rfc1870.html

   (4) https://tools.ietf.org/html/rfc6531.html


File: python.info,  Node: SMTPServer Objects,  Next: DebuggingServer Objects,  Up: smtpd --- SMTP Server

5.21.18.1 SMTPServer Objects
............................

 -- Class: smtpd.SMTPServer (localaddr, remoteaddr,
          data_size_limit=33554432, map=None, enable_SMTPUTF8=False,
          decode_data=True)

     Create a new *note SMTPServer: 309. object, which binds to local
     address `localaddr'.  It will treat `remoteaddr' as an upstream
     SMTP relayer.  It inherits from *note asyncore.dispatcher: 821, and
     so will insert itself into *note asyncore: b.’s event loop on
     instantiation.

     `data_size_limit' specifies the maximum number of bytes that will
     be accepted in a ‘DATA’ command.  A value of ‘None’ or ‘0’ means no
     limit.

     `map' is the socket map to use for connections (an initially empty
     dictionary is a suitable value).  If not specified the *note
     asyncore: b. global socket map is used.

     `enable_SMTPUTF8' determins whether the ‘SMTPUTF8’ extension (as
     defined in RFC 6531(1)) should be enabled.  The default is ‘False’.
     If set to ‘True’, `decode_data' must be ‘False’ (otherwise an error
     is raised).  When ‘True’, ‘SMTPUTF8’ is accepted as a parameter to
     the ‘MAIL’ command and when present is passed to *note
     process_message(): 30b. in the ‘kwargs['mail_options']’ list.

     `decode_data' specifies whether the data portion of the SMTP
     transaction should be decoded using UTF-8.  The default is ‘True’
     for backward compatibility reasons, but will change to ‘False’ in
     Python 3.6; specify the keyword value explicitly to avoid the *note
     DeprecationWarning: 192.  When `decode_data' is set to ‘False’ the
     server advertises the ‘8BITMIME’ extension ( RFC 6152(2)), accepts
     the ‘BODY=8BITMIME’ parameter to the ‘MAIL’ command, and when
     present passes it to *note process_message(): 30b. in the
     ‘kwargs['mail_options']’ list.

      -- Method: process_message (peer, mailfrom, rcpttos, data,
               **kwargs)

          Raise a *note NotImplementedError: 569. exception.  Override
          this in subclasses to do something useful with this message.
          Whatever was passed in the constructor as `remoteaddr' will be
          available as the ‘_remoteaddr’ attribute.  `peer' is the
          remote host’s address, `mailfrom' is the envelope originator,
          `rcpttos' are the envelope recipients and `data' is a string
          containing the contents of the e-mail (which should be in RFC
          5321(3) format).

          If the `decode_data' constructor keyword is set to ‘True’, the
          `data' argument will be a unicode string.  If it is set to
          ‘False’, it will be a bytes object.

          `kwargs' is a dictionary containing additional information.
          It is empty unless at least one of ‘decode_data=False’ or
          ‘enable_SMTPUTF8=True’ was given as an init parameter, in
          which case it contains the following keys:

               `mail_options':

                    a list of all received parameters to the ‘MAIL’
                    command (the elements are uppercase strings;
                    example: ‘['BODY=8BITMIME', 'SMTPUTF8']’).

               `rcpt_options':

                    same as `mail_options' but for the ‘RCPT’ command.
                    Currently no ‘RCPT TO’ options are supported, so for
                    now this will always be an empty list.

          Implementations of ‘process_message’ should use the ‘**kwargs’
          signature to accept arbitrary keyword arguments, since future
          feature enhancements may add keys to the kwargs dictionary.

          Return ‘None’ to request a normal ‘250 Ok’ response; otherwise
          return the desired response string in RFC 5321(4) format.

      -- Attribute: channel_class

          Override this in subclasses to use a custom *note SMTPChannel:
          30a. for managing SMTP clients.

     New in version 3.4: The `map' constructor argument.

     Changed in version 3.5: `localaddr' and `remoteaddr' may now
     contain IPv6 addresses.

     New in version 3.5: the `decode_data' and `enable_SMTPUTF8'
     constructor arguments, and the `kwargs' argument to *note
     process_message(): 30b. when one or more of these is specified.

   ---------- Footnotes ----------

   (1) https://tools.ietf.org/html/rfc6531.html

   (2) https://tools.ietf.org/html/rfc6152.html

   (3) https://tools.ietf.org/html/rfc5321.html

   (4) https://tools.ietf.org/html/rfc5321.html


File: python.info,  Node: DebuggingServer Objects,  Next: PureProxy Objects,  Prev: SMTPServer Objects,  Up: smtpd --- SMTP Server

5.21.18.2 DebuggingServer Objects
.................................

 -- Class: smtpd.DebuggingServer (localaddr, remoteaddr)

     Create a new debugging server.  Arguments are as per *note
     SMTPServer: 309.  Messages will be discarded, and printed on
     stdout.


File: python.info,  Node: PureProxy Objects,  Next: MailmanProxy Objects,  Prev: DebuggingServer Objects,  Up: smtpd --- SMTP Server

5.21.18.3 PureProxy Objects
...........................

 -- Class: smtpd.PureProxy (localaddr, remoteaddr)

     Create a new pure proxy server.  Arguments are as per *note
     SMTPServer: 309.  Everything will be relayed to `remoteaddr'.  Note
     that running this has a good chance to make you into an open relay,
     so please be careful.


File: python.info,  Node: MailmanProxy Objects,  Next: SMTPChannel Objects,  Prev: PureProxy Objects,  Up: smtpd --- SMTP Server

5.21.18.4 MailmanProxy Objects
..............................

 -- Class: smtpd.MailmanProxy (localaddr, remoteaddr)

     Create a new pure proxy server.  Arguments are as per *note
     SMTPServer: 309.  Everything will be relayed to `remoteaddr',
     unless local mailman configurations knows about an address, in
     which case it will be handled via mailman.  Note that running this
     has a good chance to make you into an open relay, so please be
     careful.


File: python.info,  Node: SMTPChannel Objects,  Prev: MailmanProxy Objects,  Up: smtpd --- SMTP Server

5.21.18.5 SMTPChannel Objects
.............................

 -- Class: smtpd.SMTPChannel (server, conn, addr,
          data_size_limit=33554432, map=None, enable_SMTPUTF8=False,
          decode_data=True)

     Create a new *note SMTPChannel: 30a. object which manages the
     communication between the server and a single SMTP client.

     `conn' and `addr' are as per the instance variables described
     below.

     `data_size_limit' specifies the maximum number of bytes that will
     be accepted in a ‘DATA’ command.  A value of ‘None’ or ‘0’ means no
     limit.

     `enable_SMTPUTF8' determins whether the ‘SMTPUTF8’ extension (as
     defined in RFC 6531(1)) should be enabled.  The default is ‘False’.
     A *note ValueError: 19c. is raised if both `enable_SMTPUTF8' and
     `decode_data' are set to ‘True’ at the same time.

     A dictionary can be specified in `map' to avoid using a global
     socket map.

     `decode_data' specifies whether the data portion of the SMTP
     transaction should be decoded using UTF-8.  The default is ‘True’
     for backward compatibility reasons, but will change to ‘False’ in
     Python 3.6.  Specify the keyword value explicitly to avoid the
     *note DeprecationWarning: 192.

     To use a custom SMTPChannel implementation you need to override the
     *note SMTPServer.channel_class: 267b. of your *note SMTPServer:
     309.

     Changed in version 3.5: the `decode_data' and `enable_SMTPUTF8'
     arguments were added.

     The *note SMTPChannel: 30a. has the following instance variables:

      -- Attribute: smtp_server

          Holds the *note SMTPServer: 309. that spawned this channel.

      -- Attribute: conn

          Holds the socket object connecting to the client.

      -- Attribute: addr

          Holds the address of the client, the second value returned by
          *note socket.accept: 20b.

      -- Attribute: received_lines

          Holds a list of the line strings (decoded using UTF-8)
          received from the client.  The lines have their ‘"\r\n"’ line
          ending translated to ‘"\n"’.

      -- Attribute: smtp_state

          Holds the current state of the channel.  This will be either
          ‘COMMAND’ initially and then ‘DATA’ after the client sends a
          "DATA" line.

      -- Attribute: seen_greeting

          Holds a string containing the greeting sent by the client in
          its "HELO".

      -- Attribute: mailfrom

          Holds a string containing the address identified in the "MAIL
          FROM:" line from the client.

      -- Attribute: rcpttos

          Holds a list of strings containing the addresses identified in
          the "RCPT TO:" lines from the client.

      -- Attribute: received_data

          Holds a string containing all of the data sent by the client
          during the DATA state, up to but not including the terminating
          ‘"\r\n.\r\n"’.

      -- Attribute: fqdn

          Holds the fully-qualified domain name of the server as
          returned by *note socket.getfqdn(): 1e42.

      -- Attribute: peer

          Holds the name of the client peer as returned by
          ‘conn.getpeername()’ where ‘conn’ is *note conn: 2684.

     The *note SMTPChannel: 30a. operates by invoking methods named
     ‘smtp_<command>’ upon reception of a command line from the client.
     Built into the base *note SMTPChannel: 30a. class are methods for
     handling the following commands (and responding to them
     appropriately):

     Command      Action taken
                  
     -------------------------------------------------------------------------------------
                  
     HELO         Accepts the greeting from the client and stores it in
                  *note seen_greeting: 2688.  Sets server to base command mode.
                  
                  
     EHLO         Accepts the greeting from the client and stores it in
                  *note seen_greeting: 2688.  Sets server to extended command mode.
                  
                  
     NOOP         Takes no action.
                  
                  
     QUIT         Closes the connection cleanly.
                  
                  
     MAIL         Accepts the "MAIL FROM:" syntax and stores the supplied address as
                  *note mailfrom: 2689.  In extended command mode, accepts the RFC
                  1870(2) SIZE attribute and responds appropriately based on the value
                  of `data_size_limit'.
                  
                  
     RCPT         Accepts the "RCPT TO:" syntax and stores the supplied addresses in
                  the *note rcpttos: 268a. list.
                  
                  
     RSET         Resets the *note mailfrom: 2689, *note rcpttos: 268a, and
                  *note received_data: 268b, but not the greeting.
                  
                  
     DATA         Sets the internal state to ‘DATA’ and stores remaining lines from the
                  client in *note received_data: 268b. until the terminator
                  ‘"\r\n.\r\n"’ is received.
                  
                  
     HELP         Returns minimal information on command syntax
                  
                  
     VRFY         Returns code 252 (the server doesn’t know if the address is valid)
                  
                  
     EXPN         Reports that the command is not implemented.
                  

   ---------- Footnotes ----------

   (1) https://tools.ietf.org/html/rfc6531.html

   (2) https://tools.ietf.org/html/rfc1870.html

