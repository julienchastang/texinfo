This is python.info, produced by makeinfo version 6.0 from python.texi.

     Python 3.6.0a0, May 06, 2016

     Georg Brandl

     Copyright © 2001-2016, Python Software Foundation

INFO-DIR-SECTION Documentation tools
START-INFO-DIR-ENTRY
* Python: (python.info). The Python Programming Language
END-INFO-DIR-ENTRY


   Generated by Sphinx 1.4.1.


File: python.info,  Node: Python 3 4 0,  Next: Python 3 4 0 release candidate 3,  Prev: Python 3 5 alpha 1,  Up: Changelog

1.16.17 Python 3.4.0
--------------------

Release date: 2014-03-16

* Menu:

* Library: Library<15>. 
* Documentation: Documentation<8>. 


File: python.info,  Node: Library<15>,  Next: Documentation<8>,  Up: Python 3 4 0

1.16.17.1 Library
.................

   - Issue #20939(1): Fix test_geturl failure in test_urllibnet due to
     new redirect of ‘http://www.python.org/’ to
     ‘https://www.python.org’.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/20939


File: python.info,  Node: Documentation<8>,  Prev: Library<15>,  Up: Python 3 4 0

1.16.17.2 Documentation
.......................

   - Merge in all documentation changes since branching 3.4.0rc1.


File: python.info,  Node: Python 3 4 0 release candidate 3,  Next: Python 3 4 0 release candidate 2,  Prev: Python 3 4 0,  Up: Changelog

1.16.18 Python 3.4.0 release candidate 3
----------------------------------------

Release date: 2014-03-09

* Menu:

* Core and Builtins: Core and Builtins<15>. 
* Library: Library<16>. 
* Build: Build<11>. 


File: python.info,  Node: Core and Builtins<15>,  Next: Library<16>,  Up: Python 3 4 0 release candidate 3

1.16.18.1 Core and Builtins
...........................

   - Issue #20786(1): Fix signatures for dict.__delitem__ and
     property.__delete__ builtins.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/20786


File: python.info,  Node: Library<16>,  Next: Build<11>,  Prev: Core and Builtins<15>,  Up: Python 3 4 0 release candidate 3

1.16.18.2 Library
.................

   - Issue #20839(1): Don’t trigger a DeprecationWarning in the still
     supported pkgutil.get_loader() API when __loader__ isn’t set on a
     module (nor when pkgutil.find_loader() is called directly).

   ---------- Footnotes ----------

   (1) https://bugs.python.org/20839


File: python.info,  Node: Build<11>,  Prev: Library<16>,  Up: Python 3 4 0 release candidate 3

1.16.18.3 Build
...............

   - Issue #14512(1): Launch pydoc -b instead of pydocgui.pyw on
     Windows.

   - Issue #20748(2): Uninstalling pip does not leave behind the pyc of
     the uninstaller anymore.

   - Issue #20568(3): The Windows installer now installs the unversioned
     ‘pip’ command in addition to the versioned ‘pip3’ and ‘pip3.4’
     commands.

   - Issue #20757(4): The ensurepip helper for the Windows uninstaller
     now skips uninstalling pip (rather than failing) if the user has
     updated pip to a different version from the one bundled with
     ensurepip.

   - Issue #20465(5): Update OS X and Windows installer builds to use
     SQLite 3.8.3.1.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/14512

   (2) https://bugs.python.org/20748

   (3) https://bugs.python.org/20568

   (4) https://bugs.python.org/20757

   (5) https://bugs.python.org/20465


File: python.info,  Node: Python 3 4 0 release candidate 2,  Next: Python 3 4 0 release candidate 1,  Prev: Python 3 4 0 release candidate 3,  Up: Changelog

1.16.19 Python 3.4.0 release candidate 2
----------------------------------------

Release date: 2014-02-23

* Menu:

* Core and Builtins: Core and Builtins<16>. 
* Library: Library<17>. 
* Build: Build<12>. 


File: python.info,  Node: Core and Builtins<16>,  Next: Library<17>,  Up: Python 3 4 0 release candidate 2

1.16.19.1 Core and Builtins
...........................

   - Issue #20625(1): Parameter names in __annotations__ were not
     mangled properly.  Discovered by Jonas Wielicki, patch by Yury
     Selivanov.

   - Issue #20261(2): In pickle, lookup __getnewargs__ and
     __getnewargs_ex__ on the type of the object.

   - Issue #20619(3): Give the AST nodes of keyword-only arguments a
     column and line number.

   - Issue #20526(4): Revert changes of issue #19466(5) which introduces
     a regression: don’t clear anymore the state of Python threads early
     during the Python shutdown.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/20625

   (2) https://bugs.python.org/20261

   (3) https://bugs.python.org/20619

   (4) https://bugs.python.org/20526

   (5) https://bugs.python.org/19466


File: python.info,  Node: Library<17>,  Next: Build<12>,  Prev: Core and Builtins<16>,  Up: Python 3 4 0 release candidate 2

1.16.19.2 Library
.................

   - Issue #20710(1): The pydoc summary line no longer displays the
     "self" parameter for bound methods.

   - Issue #20566(2): Change asyncio.as_completed() to use a Queue, to
     avoid O(N**2) behavior.

   - Issue #20704(3): Implement new debug API in asyncio.  Add new
     methods BaseEventLoop.set_debug() and BaseEventLoop.get_debug().
     Add support for setting ’asyncio.tasks._DEBUG’ variable with
     ’PYTHONASYNCIODEBUG’ environment variable.

   - asyncio: Refactoring and fixes: BaseEventLoop.sock_connect() raises
     an error if the address is not resolved; use __slots__ in Handle
     and TimerHandle; as_completed() and wait() raise TypeError if the
     passed list of Futures is a single Future; call_soon() and other
     ’call_*()’ functions raise TypeError if the passed callback is a
     coroutine function; _ProactorBasePipeTransport uses
     _FlowControlMixin; WriteTransport.set_write_buffer_size() calls
     _maybe_pause_protocol() to consider pausing receiving if the
     watermark limits have changed; fix _check_resolved_address() for
     IPv6 address; and other minor improvements, along with multiple
     documentation updates.

   - Issue #20684(4): Fix inspect.getfullargspec() to not to follow
     __wrapped__ chains.  Make its behaviour consistent with bound
     methods first argument.  Patch by Nick Coghlan and Yury Selivanov.

   - Issue #20681(5): Add new error handling API in asyncio.  New APIs:
     loop.set_exception_handler(), loop.default_exception_handler(), and
     loop.call_exception_handler().

   - Issue #20673(6): Implement support for UNIX Domain Sockets in
     asyncio.  New APIs: loop.create_unix_connection(),
     loop.create_unix_server(), streams.open_unix_connection(), and
     streams.start_unix_server().

   - Issue #20616(7): Add a format() method to tracemalloc.Traceback.

   - Issue #19744(8): the ensurepip installation step now just prints a
     warning to stderr rather than failing outright if SSL/TLS is
     unavailable.  This allows local installation of POSIX builds
     without SSL/TLS support.

   - Issue #20594(9): Avoid name clash with the libc function
     posix_close.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/20710

   (2) https://bugs.python.org/20566

   (3) https://bugs.python.org/20704

   (4) https://bugs.python.org/20684

   (5) https://bugs.python.org/20681

   (6) https://bugs.python.org/20673

   (7) https://bugs.python.org/20616

   (8) https://bugs.python.org/19744

   (9) https://bugs.python.org/20594


File: python.info,  Node: Build<12>,  Prev: Library<17>,  Up: Python 3 4 0 release candidate 2

1.16.19.3 Build
...............

   - Issue #20641(1): Run MSI custom actions (pip installation, pyc
     compilation) with the NoImpersonate flag, to support elevated
     execution (UAC).

   - Issue #20221(2): Removed conflicting (or circular) hypot definition
     when compiled with VS 2010 or above.  Initial patch by Tabrez
     Mohammed.

   - Issue #20609(3): Restored the ability to build 64-bit Windows
     binaries on 32-bit Windows, which was broken by the change in issue
     #19788(4).

   ---------- Footnotes ----------

   (1) https://bugs.python.org/20641

   (2) https://bugs.python.org/20221

   (3) https://bugs.python.org/20609

   (4) https://bugs.python.org/19788


File: python.info,  Node: Python 3 4 0 release candidate 1,  Next: Python 3 4 0 Beta 3,  Prev: Python 3 4 0 release candidate 2,  Up: Changelog

1.16.20 Python 3.4.0 release candidate 1
----------------------------------------

Release date: 2014-02-10

* Menu:

* Core and Builtins: Core and Builtins<17>. 
* Library: Library<18>. 
* IDLE: IDLE<8>. 
* Tests: Tests<9>. 
* Tools/Demos: Tools/Demos<7>. 
* Build: Build<13>. 
* C-API:: 
* Documentation: Documentation<9>. 


File: python.info,  Node: Core and Builtins<17>,  Next: Library<18>,  Up: Python 3 4 0 release candidate 1

1.16.20.1 Core and Builtins
...........................

   - Issue #19255(1): The builtins module is restored to initial value
     before cleaning other modules.  The sys and builtins modules are
     cleaned last.

   - Issue #20588(2): Make Python-ast.c C89 compliant.

   - Issue #20437(3): Fixed 22 potential bugs when deleting objects
     references.

   - Issue #20500(4): Displaying an exception at interpreter shutdown no
     longer risks triggering an assertion failure in PyObject_Str.

   - Issue #20538(5): UTF-7 incremental decoder produced inconsistent
     string when input was truncated in BASE64 section.

   - Issue #20404(6): io.TextIOWrapper (and hence the open() builtin)
     now uses the internal codec marking system added for issue
     #19619(7) to throw LookupError for known non-text encodings at
     stream construction time.  The existing output type checks remain
     in place to deal with unmarked third party codecs.

   - Issue #17162(8): Add PyType_GetSlot.

   - Issue #20162(9): Fix an alignment issue in the siphash24() hash
     function which caused a crash on PowerPC 64-bit (ppc64).

   ---------- Footnotes ----------

   (1) https://bugs.python.org/19255

   (2) https://bugs.python.org/20588

   (3) https://bugs.python.org/20437

   (4) https://bugs.python.org/20500

   (5) https://bugs.python.org/20538

   (6) https://bugs.python.org/20404

   (7) https://bugs.python.org/19619

   (8) https://bugs.python.org/17162

   (9) https://bugs.python.org/20162


File: python.info,  Node: Library<18>,  Next: IDLE<8>,  Prev: Core and Builtins<17>,  Up: Python 3 4 0 release candidate 1

1.16.20.2 Library
.................

   - Issue #20530(1): The signatures for slot builtins have been updated
     to reflect the fact that they only accept positional-only
     arguments.

   - Issue #20517(2): Functions in the os module that accept two
     filenames now register both filenames in the exception on failure.

   - Issue #20563(3): The ipaddress module API is now considered stable.

   - Issue #14983(4): email.generator now always adds a line end after
     each MIME boundary marker, instead of doing so only when there is
     an epilogue.  This fixes an RFC compliance bug and solves an issue
     with signed MIME parts.

   - Issue #20540(5): Fix a performance regression (vs.  Python 3.2)
     when layering a multiprocessing Connection over a TCP socket.  For
     small payloads, Nagle’s algorithm would introduce idle delays
     before the entire transmission of a message.

   - Issue #16983(6): the new email header parsing code will now decode
     encoded words that are (incorrectly) surrounded by quotes, and
     register a defect.

   - Issue #19772(7): email.generator no longer mutates the message
     object when doing a down-transform from 8bit to 7bit CTEs.

   - Issue #20536(8): the statistics module now correctly handle Decimal
     instances with positive exponents

   - Issue #18805(9): the netmask/hostmask parsing in ipaddress now more
     reliably filters out illegal values and correctly allows any valid
     prefix length.

   - Issue #20481(10): For at least Python 3.4, the statistics module
     will require that all inputs for a single operation be of a single
     consistent type, or else a mixed of ints and a single other
     consistent type.  This avoids some interoperability issues that
     arose with the previous approach of coercing to a suitable common
     type.

   - Issue #20478(11): the statistics module now treats
     collections.Counter inputs like any other iterable.

   - Issue #17369(12): get_filename was raising an exception if the
     filename parameter’s RFC2231 encoding was broken in certain ways.
     This was a regression relative to python2.

   - Issue #20013(13): Some imap servers disconnect if the current
     mailbox is deleted, and imaplib did not handle that case
     gracefully.  Now it handles the ’bye’ correctly.

   - Issue #20531(14): Revert 3.4 version of fix for #19063, and apply
     the 3.3 version.  That is, do `not' raise an error if unicode is
     passed to email.message.Message.set_payload.

   - Issue #20476(15): If a non-compat32 policy is used with any of the
     email parsers, EmailMessage is now used as the factory class.  The
     factory class should really come from the policy; that will get
     fixed in 3.5.

   - Issue #19920(16): TarFile.list() no longer fails when outputs a
     listing containing non-encodable characters.  Based on patch by
     Vajrasky Kok.

   - Issue #20515(17): Fix NULL pointer dereference introduced by issue
     #20368(18).

   - Issue #19186(19): Restore namespacing of expat symbols inside the
     pyexpat module.

   - Issue #20053(20): ensurepip (and hence venv) are no longer affected
     by the settings in the default pip configuration file.

   - Issue #20426(21): When passing the re.DEBUG flag, re.compile()
     displays the debug output every time it is called, regardless of
     the compilation cache.

   - Issue #20368(22): The null character now correctly passed from Tcl
     to Python.  Improved error handling in variables-related commands.

   - Issue #20435(23): Fix _pyio.StringIO.getvalue() to take into
     account newline translation settings.

   - tracemalloc: Fix slicing traces and fix slicing a traceback.

   - Issue #20354(24): Fix an alignment issue in the tracemalloc module
     on 64-bit platforms.  Bug seen on 64-bit Linux when using "make
     profile-opt".

   - Issue #17159(25): inspect.signature now accepts duck types of
     functions, which adds support for Cython functions.  Initial patch
     by Stefan Behnel.

   - Issue #18801(26): Fix inspect.classify_class_attrs to correctly
     classify object.__new__ and object.__init__.

   - Fixed cmath.isinf’s name in its argument parsing code.

   - Issue #20311(27), #20452: poll and epoll now round the timeout away
     from zero, instead of rounding towards zero, in select and
     selectors modules: select.epoll.poll(),
     selectors.PollSelector.poll() and selectors.EpollSelector.poll().
     For example, a timeout of one microsecond (1e-6) is now rounded to
     one millisecondi (1e-3), instead of being rounded to zero.
     However, the granularity property and asyncio’s resolution feature
     were removed again.

   - asyncio: Some refactoring; various fixes; add write flow control to
     unix pipes; Future.set_exception() instantiates the exception
     argument if it is a class; improved proactor pipe transport;
     support wait_for(f, None); don’t log broken/disconnected pipes; use
     ValueError instead of assert for forbidden subprocess_{shell,exec}
     arguments; added a convenience API for subprocess management; added
     StreamReader.at_eof(); properly handle duplicate coroutines/futures
     in gather(), wait(), as_completed(); use a bytearray for buffering
     in StreamReader; and more.

   - Issue #20288(28): fix handling of invalid numeric charrefs in
     HTMLParser.

   - Issue #20424(29): Python implementation of io.StringIO now supports
     lone surrogates.

   - Issue #20308(30): inspect.signature now works on classes without
     user-defined __init__ or __new__ methods.

   - Issue #20372(31): inspect.getfile (and a bunch of other inspect
     functions that use it) doesn’t crash with unexpected AttributeError
     on classes defined in C without __module__.

   - Issue #20356(32): inspect.signature formatting uses ’/’ to separate
     positional-only parameters from others.

   - Issue #20223(33): inspect.signature now supports methods defined
     with functools.partialmethods.

   - Issue #19456(34): ntpath.join() now joins relative paths correctly
     when a drive is present.

   - Issue #19077(35): tempfile.TemporaryDirectory cleanup no longer
     fails when called during shutdown.  Emitting resource warning in
     __del__ no longer fails.  Original patch by Antoine Pitrou.

   - Issue #20394(36): Silence Coverity warning in audioop module.

   - Issue #20367(37): Fix behavior of concurrent.futures.as_completed()
     for duplicate arguments.  Patch by Glenn Langford.

   - Issue #8260(38): The read(), readline() and readlines() methods of
     codecs.StreamReader returned incomplete data when were called after
     readline() or read(size).  Based on patch by Amaury Forgeot d’Arc.

   - Issue #20105(39): the codec exception chaining now correctly sets
     the traceback of the original exception as its __traceback__
     attribute.

   - Issue #17481(40): inspect.getfullargspec() now uses
     inspect.signature() API.

   - Issue #15304(41): concurrent.futures.wait() can block forever even
     if Futures have completed.  Patch by Glenn Langford.

   - Issue #14455(42): plistlib: fix serializing integers in the range
     of an unsigned long long but outside of the range of signed long
     long for binary plist files.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/20530

   (2) https://bugs.python.org/20517

   (3) https://bugs.python.org/20563

   (4) https://bugs.python.org/14983

   (5) https://bugs.python.org/20540

   (6) https://bugs.python.org/16983

   (7) https://bugs.python.org/19772

   (8) https://bugs.python.org/20536

   (9) https://bugs.python.org/18805

   (10) https://bugs.python.org/20481

   (11) https://bugs.python.org/20478

   (12) https://bugs.python.org/17369

   (13) https://bugs.python.org/20013

   (14) https://bugs.python.org/20531

   (15) https://bugs.python.org/20476

   (16) https://bugs.python.org/19920

   (17) https://bugs.python.org/20515

   (18) https://bugs.python.org/20368

   (19) https://bugs.python.org/19186

   (20) https://bugs.python.org/20053

   (21) https://bugs.python.org/20426

   (22) https://bugs.python.org/20368

   (23) https://bugs.python.org/20435

   (24) https://bugs.python.org/20354

   (25) https://bugs.python.org/17159

   (26) https://bugs.python.org/18801

   (27) https://bugs.python.org/20311

   (28) https://bugs.python.org/20288

   (29) https://bugs.python.org/20424

   (30) https://bugs.python.org/20308

   (31) https://bugs.python.org/20372

   (32) https://bugs.python.org/20356

   (33) https://bugs.python.org/20223

   (34) https://bugs.python.org/19456

   (35) https://bugs.python.org/19077

   (36) https://bugs.python.org/20394

   (37) https://bugs.python.org/20367

   (38) https://bugs.python.org/8260

   (39) https://bugs.python.org/20105

   (40) https://bugs.python.org/17481

   (41) https://bugs.python.org/15304

   (42) https://bugs.python.org/14455


File: python.info,  Node: IDLE<8>,  Next: Tests<9>,  Prev: Library<18>,  Up: Python 3 4 0 release candidate 1

1.16.20.3 IDLE
..............

   - Issue #20406(1): Use Python application icons for Idle window title
     bars.  Patch mostly by Serhiy Storchaka.

   - Update the python.gif icon for the Idle classbrowser and pathbowser
     from the old green snake to the new blue and yellow snakes.

   - Issue #17721(2): Remove non-functional configuration dialog help
     button until we make it actually gives some help when clicked.
     Patch by Guilherme Simões.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/20406

   (2) https://bugs.python.org/17721


File: python.info,  Node: Tests<9>,  Next: Tools/Demos<7>,  Prev: IDLE<8>,  Up: Python 3 4 0 release candidate 1

1.16.20.4 Tests
...............

   - Issue #20532(1): Tests which use _testcapi now are marked as
     CPython only.

   - Issue #19920(2): Added tests for TarFile.list().  Based on patch by
     Vajrasky Kok.

   - Issue #19990(3): Added tests for the imghdr module.  Based on patch
     by Claudiu Popa.

   - Issue #20474(4): Fix test_socket "unexpected success" failures on
     OS X 10.7+.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/20532

   (2) https://bugs.python.org/19920

   (3) https://bugs.python.org/19990

   (4) https://bugs.python.org/20474


File: python.info,  Node: Tools/Demos<7>,  Next: Build<13>,  Prev: Tests<9>,  Up: Python 3 4 0 release candidate 1

1.16.20.5 Tools/Demos
.....................

   - Issue #20530(1): Argument Clinic’s signature format has been
     revised again.  The new syntax is highly human readable while still
     preventing false positives.  The syntax also extends Python syntax
     to denote "self" and positional-only parameters, allowing
     inspect.Signature objects to be totally accurate for all supported
     builtins in Python 3.4.

   - Issue #20456(2): Argument Clinic now observes the C preprocessor
     conditional compilation statements of the C files it parses.  When
     a Clinic block is inside a conditional code, it adjusts its output
     to match, including automatically generating an empty methoddef
     macro.

   - Issue #20456(3): Cloned functions in Argument Clinic now use the
     correct name, not the name of the function they were cloned from,
     for text strings inside generated code.

   - Issue #20456(4): Fixed Argument Clinic’s test suite and
     "–converters" feature.

   - Issue #20456(5): Argument Clinic now allows specifying different
     names for a parameter in Python and C, using "as" on the parameter
     line.

   - Issue #20326(6): Argument Clinic now uses a simple, unique
     signature to annotate text signatures in docstrings, resulting in
     fewer false positives.  "self" parameters are also explicitly
     marked, allowing inspect.Signature() to authoritatively detect (and
     skip) said parameters.

   - Issue #20326(7): Argument Clinic now generates separate checksums
     for the input and output sections of the block, allowing external
     tools to verify that the input has not changed (and thus the output
     is not out-of-date).

   ---------- Footnotes ----------

   (1) https://bugs.python.org/20530

   (2) https://bugs.python.org/20456

   (3) https://bugs.python.org/20456

   (4) https://bugs.python.org/20456

   (5) https://bugs.python.org/20456

   (6) https://bugs.python.org/20326

   (7) https://bugs.python.org/20326


File: python.info,  Node: Build<13>,  Next: C-API,  Prev: Tools/Demos<7>,  Up: Python 3 4 0 release candidate 1

1.16.20.6 Build
...............

   - Issue #20465(1): Update SQLite shipped with OS X installer to
     3.8.3.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/20465


File: python.info,  Node: C-API,  Next: Documentation<9>,  Prev: Build<13>,  Up: Python 3 4 0 release candidate 1

1.16.20.7 C-API
...............

   - Issue #20517(1): Added new functions allowing OSError exceptions to
     reference two filenames instead of one:
     PyErr_SetFromErrnoWithFilenameObjects() and
     PyErr_SetExcFromWindowsErrWithFilenameObjects().

   ---------- Footnotes ----------

   (1) https://bugs.python.org/20517


File: python.info,  Node: Documentation<9>,  Prev: C-API,  Up: Python 3 4 0 release candidate 1

1.16.20.8 Documentation
.......................

   - Issue #20488(1): Change wording to say importlib is `the'
     implementation of import instead of just `an' implementation.

   - Issue #6386(2): Clarify in the tutorial that specifying a symlink
     to execute means the directory containing the executed script and
     not the symlink is added to sys.path.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/20488

   (2) https://bugs.python.org/6386


File: python.info,  Node: Python 3 4 0 Beta 3,  Next: Python 3 4 0 Beta 2,  Prev: Python 3 4 0 release candidate 1,  Up: Changelog

1.16.21 Python 3.4.0 Beta 3
---------------------------

Release date: 2014-01-26

* Menu:

* Core and Builtins: Core and Builtins<18>. 
* Library: Library<19>. 
* IDLE: IDLE<9>. 
* Tests: Tests<10>. 
* Tools/Demos: Tools/Demos<8>. 
* Build: Build<14>. 


File: python.info,  Node: Core and Builtins<18>,  Next: Library<19>,  Up: Python 3 4 0 Beta 3

1.16.21.1 Core and Builtins
...........................

   - Issue #20189(1): Four additional builtin types (PyTypeObject,
     PyMethodDescr_Type, _PyMethodWrapper_Type, and PyWrapperDescr_Type)
     have been modified to provide introspection information for
     builtins.

   - Issue #17825(2): Cursor "^" is correctly positioned for SyntaxError
     and IndentationError.

   - Issue #2382(3): SyntaxError cursor "^" is now written at correct
     position in most cases when multibyte characters are in line
     (before "^").  This still not works correctly with wide East Asian
     characters.

   - Issue #18960(4): The first line of Python script could be executed
     twice when the source encoding was specified on the second line.
     Now the source encoding declaration on the second line isn’t
     effective if the first line contains anything except a comment.
     ’python -x’ works now again with files with the source encoding
     declarations, and can be used to make Python batch files on
     Windows.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/20189

   (2) https://bugs.python.org/17825

   (3) https://bugs.python.org/2382

   (4) https://bugs.python.org/18960


File: python.info,  Node: Library<19>,  Next: IDLE<9>,  Prev: Core and Builtins<18>,  Up: Python 3 4 0 Beta 3

1.16.21.2 Library
.................

   - asyncio: Various improvements and small changes not all covered by
     issues listed below.  E.g.  wait_for() now cancels the inner task
     if the timeout occcurs; tweaked the set of exported symbols;
     renamed Empty/Full to QueueEmpty/QueueFull; "with (yield from
     lock)" now uses a separate context manager; readexactly() raises if
     not enough data was read; PTY support tweaks.

   - Issue #20311(1): asyncio: Add a granularity attribute to
     BaseEventLoop: maximum between the resolution of the
     BaseEventLoop.time() method and the resolution of the selector.
     The granuarility is used in the scheduler to round time and
     deadline.

   - Issue #20311(2): selectors: Add a resolution attribute to
     BaseSelector.

   - Issue #20189(3): unittest.mock now no longer assumes that any
     object for which it could get an inspect.Signature is a callable
     written in Python.  Fix courtesy of Michael Foord.

   - Issue #20317(4): ExitStack.__exit__ could create a self-referential
     loop if an exception raised by a cleanup operation already had its
     context set correctly (for example, by the @contextmanager
     decorator).  The infinite loop this caused is now avoided by
     checking if the expected context is already set before trying to
     fix it.

   - Issue #20374(5): Fix build with GNU readline >= 6.3.

   - Issue #20262(6): Warnings are raised now when duplicate names are
     added in the ZIP file or too long ZIP file comment is truncated.

   - Issue #20165(7): The unittest module no longer considers tests
     marked with @expectedFailure successful if they pass.

   - Issue #18574(8): Added missing newline in 100-Continue reply from
     http.server.BaseHTTPRequestHandler.  Patch by Nikolaus Rath.

   - Issue #20270(9): urllib.urlparse now supports empty ports.

   - Issue #20243(10): TarFile no longer raise ReadError when opened in
     write mode.

   - Issue #20238(11): TarFile opened with external fileobj and "w:gz"
     mode didn’t write complete output on close.

   - Issue #20245(12): The open functions in the tarfile module now
     correctly handle empty mode.

   - Issue #20242(13): Fixed basicConfig() format strings for the
     alternative formatting styles.  Thanks to kespindler for the bug
     report and patch.

   - Issue #20246(14): Fix buffer overflow in socket.recvfrom_into.

   - Issues #20206 and #5803: Fix edge case in email.quoprimime.encode
     where it truncated lines ending in a character needing encoding but
     no newline by using a more efficient algorithm that doesn’t have
     the bug.

   - Issue #19082(15): Working xmlrpc.server and xmlrpc.client examples.
     Both in modules and in documentation.  Initial patch contributed by
     Vajrasky Kok.

   - Issue #20138(16): The wsgiref.application_uri() and
     wsgiref.request_uri() functions now conform to PEP 3333 when handle
     non-ASCII URLs.

   - Issue #19097(17): Raise the correct Exception when cgi.FieldStorage
     is given an invalid fileobj.

   - Issue #20152(18): Ported Python/import.c over to Argument Clinic.

   - Issue #13107(19): argparse and optparse no longer raises an
     exception when output a help on environment with too small COLUMNS.
     Based on patch by Elazar Gershuni.

   - Issue #20207(20): Always disable SSLv2 except when PROTOCOL_SSLv2
     is explicitly asked for.

   - Issue #18960(21): The tokenize module now ignore the source
     encoding declaration on the second line if the first line contains
     anything except a comment.

   - Issue #20078(22): Reading malformed zipfiles no longer hangs with
     100% CPU consumption.

   - Issue #20113(23): os.readv() and os.writev() now raise an OSError
     exception on error instead of returning -1.

   - Issue #19719(24): Make importlib.abc.MetaPathFinder.find_module(),
     PathEntryFinder.find_loader(), and Loader.load_module() use PEP 451
     APIs to help with backwards-compatibility.

   - Issue #20144(25): inspect.Signature now supports parsing simple
     symbolic constants as parameter default values in
     __text_signature__.

   - Issue #20072(26): Fixed multiple errors in tkinter with wantobjects
     is False.

   - Issue #20229(27): Avoid plistlib deprecation warning in
     platform.mac_ver().

   - Issue #14455(28): Fix some problems with the new binary plist
     support in plistlib.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/20311

   (2) https://bugs.python.org/20311

   (3) https://bugs.python.org/20189

   (4) https://bugs.python.org/20317

   (5) https://bugs.python.org/20374

   (6) https://bugs.python.org/20262

   (7) https://bugs.python.org/20165

   (8) https://bugs.python.org/18574

   (9) https://bugs.python.org/20270

   (10) https://bugs.python.org/20243

   (11) https://bugs.python.org/20238

   (12) https://bugs.python.org/20245

   (13) https://bugs.python.org/20242

   (14) https://bugs.python.org/20246

   (15) https://bugs.python.org/19082

   (16) https://bugs.python.org/20138

   (17) https://bugs.python.org/19097

   (18) https://bugs.python.org/20152

   (19) https://bugs.python.org/13107

   (20) https://bugs.python.org/20207

   (21) https://bugs.python.org/18960

   (22) https://bugs.python.org/20078

   (23) https://bugs.python.org/20113

   (24) https://bugs.python.org/19719

   (25) https://bugs.python.org/20144

   (26) https://bugs.python.org/20072

   (27) https://bugs.python.org/20229

   (28) https://bugs.python.org/14455


File: python.info,  Node: IDLE<9>,  Next: Tests<10>,  Prev: Library<19>,  Up: Python 3 4 0 Beta 3

1.16.21.3 IDLE
..............

   - Issue #17390(1): Add Python version to Idle editor window title
     bar.  Original patches by Edmond Burnett and Kent Johnson.

   - Issue #18960(2): IDLE now ignores the source encoding declaration
     on the second line if the first line contains anything except a
     comment.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/17390

   (2) https://bugs.python.org/18960


File: python.info,  Node: Tests<10>,  Next: Tools/Demos<8>,  Prev: IDLE<9>,  Up: Python 3 4 0 Beta 3

1.16.21.4 Tests
...............

   - Issue #20358(1): Tests for curses.window.overlay and
     curses.window.overwrite no longer specify min{row,col} >
     max{row,col}.

   - Issue #19804(2): The test_find_mac test in test_uuid is now skipped
     if the ifconfig executable is not available.

   - Issue #19886(3): Use better estimated memory requirements for
     bigmem tests.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/20358

   (2) https://bugs.python.org/19804

   (3) https://bugs.python.org/19886


File: python.info,  Node: Tools/Demos<8>,  Next: Build<14>,  Prev: Tests<10>,  Up: Python 3 4 0 Beta 3

1.16.21.5 Tools/Demos
.....................

   - Issue #20390(1): Argument Clinic’s "file" output preset now
     defaults to "{dirname}/clinic/{basename}.h".

   - Issue #20390(2): Argument Clinic’s "class" directive syntax has
     been extended with two new required arguments: "typedef" and
     "type_object".

   - Issue #20390(3): Argument Clinic: If __new__ or __init__ functions
     didn’t use kwargs (or args), the PyArg_NoKeywords (or
     PyArg_NoPositional) calls generated are only run when the type
     object is an exact match.

   - Issue #20390(4): Argument Clinic now fails if you have required
     parameters after optional parameters.

   - Issue #20390(5): Argument Clinic converters now have a new template
     they can inject code into: "modifiers".  Code put there is run in
     the parsing function after argument parsing but before the call to
     the impl.

   - Issue #20376(6): Argument Clinic now escapes backslashes in
     docstrings.

   - Issue #20381(7): Argument Clinic now sanity checks the default
     argument when c_default is also specified, providing a nice failure
     message for disallowed values.

   - Issue #20189(8): Argument Clinic now ensures that parser functions
     for __new__ are always of type newfunc, the type of the tp_new
     slot.  Similarly, parser functions for __init__ are now always of
     type initproc, the type of tp_init.

   - Issue #20189(9): Argument Clinic now suppresses the docstring for
     __new__ and __init__ functions if no docstring is provided in the
     input.

   - Issue #20189(10): Argument Clinic now suppresses the "self"
     parameter in the impl for @staticmethod functions.

   - Issue #20294(11): Argument Clinic now supports argument parsing for
     __new__ and __init__ functions.

   - Issue #20299(12): Argument Clinic custom converters may now change
     the default value of c_default and py_default with a class member.

   - Issue #20287(13): Argument Clinic’s output is now configurable,
     allowing delaying its output or even redirecting it to a separate
     file.

   - Issue #20226(14): Argument Clinic now permits simple expressions
     (e.g.  "sys.maxsize - 1") as default values for parameters.

   - Issue #19936(15): Added executable bits or shebang lines to Python
     scripts which requires them.  Disable executable bits and shebang
     lines in test and benchmark files in order to prevent using a
     random system python, and in source files of modules which don’t
     provide command line interface.  Fixed shebang lines in the
     unittestgui and checkpip scripts.

   - Issue #20268(16): Argument Clinic now supports cloning the
     parameters and return converter of existing functions.

   - Issue #20228(17): Argument Clinic now has special support for class
     special methods.

   - Issue #20214(18): Fixed a number of small issues and documentation
     errors in Argument Clinic (see issue for details).

   - Issue #20196(19): Fixed a bug where Argument Clinic did not
     generate correct parsing code for functions with positional-only
     parameters where all arguments are optional.

   - Issue #18960(20): 2to3 and the findnocoding.py script now ignore
     the source encoding declaration on the second line if the first
     line contains anything except a comment.

   - Issue #19723(21): The marker comments Argument Clinic uses have
     been changed to improve readability.

   - Issue #20157(22): When Argument Clinic renames a parameter because
     its name collides with a C keyword, it no longer exposes that
     rename to PyArg_Parse.

   - Issue #20141(23): Improved Argument Clinic’s support for the
     PyArg_Parse "O!" format unit.

   - Issue #20144(24): Argument Clinic now supports simple symbolic
     constants as parameter default values.

   - Issue #20143(25): The line numbers reported in Argument Clinic
     errors are now more accurate.

   - Issue #20142(26): Py_buffer variables generated by Argument Clinic
     are now initialized with a default value.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/20390

   (2) https://bugs.python.org/20390

   (3) https://bugs.python.org/20390

   (4) https://bugs.python.org/20390

   (5) https://bugs.python.org/20390

   (6) https://bugs.python.org/20376

   (7) https://bugs.python.org/20381

   (8) https://bugs.python.org/20189

   (9) https://bugs.python.org/20189

   (10) https://bugs.python.org/20189

   (11) https://bugs.python.org/20294

   (12) https://bugs.python.org/20299

   (13) https://bugs.python.org/20287

   (14) https://bugs.python.org/20226

   (15) https://bugs.python.org/19936

   (16) https://bugs.python.org/20268

   (17) https://bugs.python.org/20228

   (18) https://bugs.python.org/20214

   (19) https://bugs.python.org/20196

   (20) https://bugs.python.org/18960

   (21) https://bugs.python.org/19723

   (22) https://bugs.python.org/20157

   (23) https://bugs.python.org/20141

   (24) https://bugs.python.org/20144

   (25) https://bugs.python.org/20143

   (26) https://bugs.python.org/20142


File: python.info,  Node: Build<14>,  Prev: Tools/Demos<8>,  Up: Python 3 4 0 Beta 3

1.16.21.6 Build
...............

   - Issue #12837(1): Silence a tautological comparison warning on OS X
     under Clang in socketmodule.c.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/12837


File: python.info,  Node: Python 3 4 0 Beta 2,  Next: Python 3 4 0 Beta 1,  Prev: Python 3 4 0 Beta 3,  Up: Changelog

1.16.22 Python 3.4.0 Beta 2
---------------------------

Release date: 2014-01-05

* Menu:

* Core and Builtins: Core and Builtins<19>. 
* Library: Library<20>. 
* IDLE: IDLE<10>. 
* Tests: Tests<11>. 
* Build: Build<15>. 
* Documentation: Documentation<10>. 
* Tools/Demos: Tools/Demos<9>. 


File: python.info,  Node: Core and Builtins<19>,  Next: Library<20>,  Up: Python 3 4 0 Beta 2

1.16.22.1 Core and Builtins
...........................

   - Issue #17432(1): Drop UCS2 from names of Unicode functions in
     python3.def.

   - Issue #19526(2): Exclude all new API from the stable ABI.
     Exceptions can be made if a need is demonstrated.

   - Issue #19969(3): PyBytes_FromFormatV() now raises an OverflowError
     if "%c" argument is not in range [0; 255].

   - Issue #19995(4): %c, %o, %x, and %X now issue a DeprecationWarning
     on non-integer input; reworded docs to clarify that an integer type
     should define both __int__ and __index__.

   - Issue #19787(5): PyThread_set_key_value() now always set the value.
     In Python 3.3, the function did nothing if the key already exists
     (if the current value is a non-NULL pointer).

   - Issue #14432(6): Remove the thread state field from the frame
     structure.  Fix a crash when a generator is created in a C thread
     that is destroyed while the generator is still used.  The issue was
     that a generator contains a frame, and the frame kept a reference
     to the Python state of the destroyed C thread.  The crash occurs
     when a trace function is setup.

   - Issue #19576(7): PyGILState_Ensure() now initializes threads.  At
     startup, Python has no concrete GIL. If PyGILState_Ensure() is
     called from a new thread for the first time and
     PyEval_InitThreads() was not called yet, a GIL needs to be created.

   - Issue #17576(8): Deprecation warning emitted now when __int__() or
     __index__() return not int instance.

   - Issue #19932(9): Fix typo in import.h, missing whitespaces in
     function prototypes.

   - Issue #19736(10): Add module-level statvfs constants defined for
     GNU/glibc based systems.

   - Issue #20097(11): Fix bad use of "self" in importlib’s
     WindowsRegistryFinder.

   - Issue #19729(12): In str.format(), fix recursive expansion in
     format spec.

   - Issue #19638(13): Fix possible crash / undefined behaviour from
     huge (more than 2 billion characters) input strings in
     _Py_dg_strtod.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/17432

   (2) https://bugs.python.org/19526

   (3) https://bugs.python.org/19969

   (4) https://bugs.python.org/19995

   (5) https://bugs.python.org/19787

   (6) https://bugs.python.org/14432

   (7) https://bugs.python.org/19576

   (8) https://bugs.python.org/17576

   (9) https://bugs.python.org/19932

   (10) https://bugs.python.org/19736

   (11) https://bugs.python.org/20097

   (12) https://bugs.python.org/19729

   (13) https://bugs.python.org/19638


File: python.info,  Node: Library<20>,  Next: IDLE<10>,  Prev: Core and Builtins<19>,  Up: Python 3 4 0 Beta 2

1.16.22.2 Library
.................

   - Issue #20154(1): Deadlock in asyncio.StreamReader.readexactly().

   - Issue #16113(2): Remove sha3 module again.

   - Issue #20111(3): pathlib.Path.with_suffix() now sanity checks the
     given suffix.

   - Fix breakage in TestSuite.countTestCases() introduced by issue
     #11798(4).

   - Issue #20108(5): Avoid parameter name clash in
     inspect.getcallargs().

   - Issue #19918(6): Fix PurePath.relative_to() under Windows.

   - Issue #19422(7): Explicitly disallow non-SOCK_STREAM sockets in the
     ssl module, rather than silently let them emit clear text data.

   - Issue #20046(8): Locale alias table no longer contains entities
     which can be calculated.  Generalized support of the euro modifier.

   - Issue #20027(9): Fixed locale aliases for devanagari locales.

   - Issue #20067(10): Tkinter variables now work when wantobjects is
     false.

   - Issue #19020(11): Tkinter now uses splitlist() instead of split()
     in configure methods.

   - Issue #19744(12): ensurepip now provides a better error message
     when Python is built without SSL/TLS support (pip currently
     requires that support to run, even if only operating with local
     wheel files)

   - Issue #19734(13): ensurepip now ignores all pip environment
     variables to avoid odd behaviour based on user configuration
     settings

   - Fix TypeError on "setup.py upload –show-response".

   - Issue #20045(14): Fix "setup.py register –list-classifiers".

   - Issue #18879(15): When a method is looked up on a temporary file,
     avoid closing the file before the method is possibly called.

   - Issue #20037(16): Avoid crashes when opening a text file late at
     interpreter shutdown.

   - Issue #19967(17): Thanks to the PEP 442, asyncio.Future now uses a
     destructor to log uncaught exceptions, instead of the dedicated
     _TracebackLogger class.

   - Added a Task.current_task() class method to asyncio.

   - Issue #19850(18): Set SA_RESTART in asyncio when registering a
     signal handler to limit EINTR occurrences.

   - Implemented write flow control in asyncio for proactor event loop
     (Windows).

   - Change write buffer in asyncio use to avoid O(N**2) behavior.  Make
     write()/sendto() accept bytearray/memoryview.

   - Issue #20034(19): Updated alias mapping to most recent locale.alias
     file from X.org distribution using makelocalealias.py.

   - Issue #5815(20): Fixed support for locales with modifiers.  Fixed
     support for locale encodings with hyphens.

   - Issue #20026(21): Fix the sqlite module to handle correctly invalid
     isolation level (wrong type).

   - Issue #18829(22): csv.Dialect() now checks type for delimiter,
     escapechar and quotechar fields.  Original patch by Vajrasky Kok.

   - Issue #19855(23): uuid.getnode() on Unix now looks on the PATH for
     the executables used to find the mac address, with /sbin and
     /usr/sbin as fallbacks.

   - Issue #20007(24): HTTPResponse.read(0) no more prematurely closes
     connection.  Original patch by Simon Sapin.

   - Issue #19946(25): multiprocessing now uses runpy to initialize
     __main__ in child processes when necessary, allowing it to
     correctly handle scripts without suffixes and submodules that use
     explicit relative imports or otherwise rely on parent modules being
     correctly imported prior to execution.

   - Issue #19921(26): When Path.mkdir() is called with parents=True,
     any missing parent is created with the default permissions,
     ignoring the mode argument (mimicking the POSIX "mkdir -p"
     command).

   - Issue #19887(27): Improve the Path.resolve() algorithm to support
     certain symlink chains.

   - Issue #19912(28): Fixed numerous bugs in ntpath.splitunc().

   - Issue #19911(29): ntpath.splitdrive() now correctly processes the
     ’İ’ character (U+0130, LATIN CAPITAL LETTER I WITH DOT ABOVE).

   - Issue #19532(30): python -m compileall with no filename/directory
     arguments now respects the -f and -q flags instead of ignoring
     them.

   - Issue #19623(31): Fixed writing to unseekable files in the aifc
     module.

   - Issue #19946(32): multiprocessing.spawn now raises ImportError when
     the module to be used as the main module cannot be imported.

   - Issue #17919(33): select.poll.register() again works with
     poll.POLLNVAL on AIX. Fixed integer overflow in the eventmask
     parameter.

   - Issue #19063(34): if a Charset’s body_encoding was set to None, the
     email package would generate a message claiming the
     Content-Transfer-Encoding was 7bit, and produce garbage output for
     the content.  This now works.  A couple of other set_payload
     mishandlings of non-ASCII are also fixed.  In addition, calling
     set_payload with a string argument without specifying a charset now
     raises an error (this is a new error in 3.4).

   - Issue #15475(35): Add __sizeof__ implementations for itertools
     objects.

   - Issue #19944(36): Fix importlib.find_spec() so it imports parents
     as needed and move the function to importlib.util.

   - Issue #19880(37): Fix a reference leak in unittest.TestCase.
     Explicitly break reference cycles between frames and the _Outcome
     instance.

   - Issue #17429(38): platform.linux_distribution() now decodes files
     from the UTF-8 encoding with the surrogateescape error handler,
     instead of decoding from the locale encoding in strict mode.  It
     fixes the function on Fedora 19 which is probably the first major
     distribution release with a non-ASCII name.  Patch written by
     Toshio Kuratomi.

   - Issue #19343(39): Expose FreeBSD-specific APIs in resource module.
     Original patch by Koobs.

   - Issue #19929(40): Call os.read with 32768 within
     subprocess.Popen.communicate rather than 4096 for efficiency.  A
     microbenchmark shows Linux and OS X both using ~50% less cpu time
     this way.

   - Issue #19506(41): Use a memoryview to avoid a data copy when piping
     data to stdin within subprocess.Popen.communicate.  5-10% less cpu
     usage.

   - Issue #19876(42): selectors unregister() no longer raises
     ValueError or OSError if the FD is closed (as long as it was
     registered).

   - Issue #19908(43): pathlib now joins relative Windows paths
     correctly when a drive is present.  Original patch by Antoine
     Pitrou.

   - Issue #19296(44): Silence compiler warning in dbm_open

   - Issue #6784(45): Strings from Python 2 can now be unpickled as
     bytes objects by setting the encoding argument of Unpickler to be
     ’bytes’.  Initial patch by Merlijn van Deen.

   - Issue #19839(46): Fix regression in bz2 module’s handling of
     non-bzip2 data at EOF, and analogous bug in lzma module.

   - Issue #19881(47): Fix pickling bug where cpickle would emit bad
     pickle data for large bytes string (i.e., with size greater than
     2**32-1).

   - Issue #19138(48): doctest’s IGNORE_EXCEPTION_DETAIL now allows a
     match when no exception detail exists (no colon following the
     exception’s name, or a colon does follow but no text follows the
     colon).

   - Issue #19927(49): Add __eq__ to path-based loaders in importlib.

   - Issue #19827(50): On UNIX, setblocking() and settimeout() methods
     of socket.socket can now avoid a second syscall if the ioctl()
     function can be used, or if the non-blocking flag of the socket is
     unchanged.

   - Issue #19785(51): smtplib now supports SSLContext.check_hostname
     and server name indication for TLS/SSL connections.

   - Issue #19784(52): poplib now supports SSLContext.check_hostname and
     server name indication for TLS/SSL connections.

   - Issue #19783(53): nntplib now supports SSLContext.check_hostname
     and server name indication for TLS/SSL connections.

   - Issue #19782(54): imaplib now supports SSLContext.check_hostname
     and server name indication for TLS/SSL connections.

   - Issue #20123(55): Fix pydoc.synopsis() for "binary" modules.

   - Issue #19834(56): Support unpickling of exceptions pickled by
     Python 2.

   - Issue #19781(57): ftplib now supports SSLContext.check_hostname and
     server name indication for TLS/SSL connections.

   - Issue #19509(58): Add SSLContext.check_hostname to match the peer’s
     certificate with server_hostname on handshake.

   - Issue #15798(59): Fixed subprocess.Popen() to no longer fail if
     file descriptor 0, 1 or 2 is closed.

   - Issue #17897(60): Optimized unpickle prefetching.

   - Issue #3693(61): Make the error message more helpful when the
     array.array() constructor is given a str.  Move the array module
     typecode documentation to the docstring of the constructor.

   - Issue #19088(62): Fixed incorrect caching of the copyreg module in
     object.__reduce__() and object.__reduce_ex__().

   - Issue #19698(63): Removed exec_module() methods from
     importlib.machinery.BuiltinImporter and ExtensionFileLoader.

   - Issue #18864(64): Added a setter for ModuleSpec.has_location.

   - Fixed _pickle.Unpickler to not fail when loading empty strings as
     persistent IDs.

   - Issue #11480(65): Fixed copy.copy to work with classes with custom
     metaclasses.  Patch by Daniel Urban.

   - Issue #6477(66): Added support for pickling the types of built-in
     singletons (i.e., Ellipsis, NotImplemented, None).

   - Issue #19713(67): Add remaining PEP 451-related deprecations and
     move away from using find_module/find_loaer/load_module.

   - Issue #19708(68): Update pkgutil to use the new importer APIs.

   - Issue #19703(69): Update pydoc to use the new importer APIs.

   - Issue #19851(70): Fixed a regression in reloading sub-modules.

   - ssl.create_default_context() sets OP_NO_COMPRESSION to prevent
     CRIME.

   - Issue #19802(71): Add socket.SO_PRIORITY.

   - Issue #11508(72): Fixed uuid.getnode() and uuid.uuid1() on
     environment with virtual interface.  Original patch by Kent
     Frazier.

   - Issue #11489(73): JSON decoder now accepts lone surrogates.

   - Issue #19545(74): Avoid chained exceptions while passing stray % to
     time.strptime().  Initial patch by Claudiu Popa.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/20154

   (2) https://bugs.python.org/16113

   (3) https://bugs.python.org/20111

   (4) https://bugs.python.org/11798

   (5) https://bugs.python.org/20108

   (6) https://bugs.python.org/19918

   (7) https://bugs.python.org/19422

   (8) https://bugs.python.org/20046

   (9) https://bugs.python.org/20027

   (10) https://bugs.python.org/20067

   (11) https://bugs.python.org/19020

   (12) https://bugs.python.org/19744

   (13) https://bugs.python.org/19734

   (14) https://bugs.python.org/20045

   (15) https://bugs.python.org/18879

   (16) https://bugs.python.org/20037

   (17) https://bugs.python.org/19967

   (18) https://bugs.python.org/19850

   (19) https://bugs.python.org/20034

   (20) https://bugs.python.org/5815

   (21) https://bugs.python.org/20026

   (22) https://bugs.python.org/18829

   (23) https://bugs.python.org/19855

   (24) https://bugs.python.org/20007

   (25) https://bugs.python.org/19946

   (26) https://bugs.python.org/19921

   (27) https://bugs.python.org/19887

   (28) https://bugs.python.org/19912

   (29) https://bugs.python.org/19911

   (30) https://bugs.python.org/19532

   (31) https://bugs.python.org/19623

   (32) https://bugs.python.org/19946

   (33) https://bugs.python.org/17919

   (34) https://bugs.python.org/19063

   (35) https://bugs.python.org/15475

   (36) https://bugs.python.org/19944

   (37) https://bugs.python.org/19880

   (38) https://bugs.python.org/17429

   (39) https://bugs.python.org/19343

   (40) https://bugs.python.org/19929

   (41) https://bugs.python.org/19506

   (42) https://bugs.python.org/19876

   (43) https://bugs.python.org/19908

   (44) https://bugs.python.org/19296

   (45) https://bugs.python.org/6784

   (46) https://bugs.python.org/19839

   (47) https://bugs.python.org/19881

   (48) https://bugs.python.org/19138

   (49) https://bugs.python.org/19927

   (50) https://bugs.python.org/19827

   (51) https://bugs.python.org/19785

   (52) https://bugs.python.org/19784

   (53) https://bugs.python.org/19783

   (54) https://bugs.python.org/19782

   (55) https://bugs.python.org/20123

   (56) https://bugs.python.org/19834

   (57) https://bugs.python.org/19781

   (58) https://bugs.python.org/19509

   (59) https://bugs.python.org/15798

   (60) https://bugs.python.org/17897

   (61) https://bugs.python.org/3693

   (62) https://bugs.python.org/19088

   (63) https://bugs.python.org/19698

   (64) https://bugs.python.org/18864

   (65) https://bugs.python.org/11480

   (66) https://bugs.python.org/6477

   (67) https://bugs.python.org/19713

   (68) https://bugs.python.org/19708

   (69) https://bugs.python.org/19703

   (70) https://bugs.python.org/19851

   (71) https://bugs.python.org/19802

   (72) https://bugs.python.org/11508

   (73) https://bugs.python.org/11489

   (74) https://bugs.python.org/19545


File: python.info,  Node: IDLE<10>,  Next: Tests<11>,  Prev: Library<20>,  Up: Python 3 4 0 Beta 2

1.16.22.3 IDLE
..............

   - Issue #20058(1): sys.stdin.readline() in IDLE now always returns
     only one line.

   - Issue #19481(2): print() of string subclass instance in IDLE no
     longer hangs.

   - Issue #18270(3): Prevent possible IDLE AttributeError on OS X when
     no initial shell window is present.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/20058

   (2) https://bugs.python.org/19481

   (3) https://bugs.python.org/18270


File: python.info,  Node: Tests<11>,  Next: Build<15>,  Prev: IDLE<10>,  Up: Python 3 4 0 Beta 2

1.16.22.4 Tests
...............

   - Issue #20055(1): Fix test_shutil under Windows with symlink
     privileges held.  Patch by Vajrasky Kok.

   - Issue #20070(2): Don’t run test_urllib2net when network resources
     are not enabled.

   - Issue #19938(3): Re-enabled test_bug_1333982 in test_dis, which had
     been disabled since 3.0 due to the changes in listcomp handling.

   - Issue #19320(4): test_tcl no longer fails when wantobjects is
     false.

   - Issue #19919(5): Fix flaky SSL test.  connect_ex() sometimes
     returns EWOULDBLOCK on Windows or VMs hosted on Windows.

   - Issue #19912(6): Added tests for ntpath.splitunc().

   - Issue #19828(7): Fixed test_site when the whole suite is run with
     -S.

   - Issue #19928(8): Implemented a test for repr() of cell objects.

   - Issue #19535(9): Fixed test_docxmlrpc, test_functools,
     test_inspect, and test_statistics when python is run with -OO.

   - Issue #19926(10): Removed unneeded test_main from
     test_abstract_numbers.  Patch by Vajrasky Kok.

   - Issue #19572(11): More skipped tests explicitly marked as skipped.

   - Issue #19595(12), #19987: Re-enabled a long-disabled test in
     test_winsound.

   - Issue #19588(13): Fixed tests in test_random that were silently
     skipped most of the time.  Patch by Julian Gindi.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/20055

   (2) https://bugs.python.org/20070

   (3) https://bugs.python.org/19938

   (4) https://bugs.python.org/19320

   (5) https://bugs.python.org/19919

   (6) https://bugs.python.org/19912

   (7) https://bugs.python.org/19828

   (8) https://bugs.python.org/19928

   (9) https://bugs.python.org/19535

   (10) https://bugs.python.org/19926

   (11) https://bugs.python.org/19572

   (12) https://bugs.python.org/19595

   (13) https://bugs.python.org/19588


File: python.info,  Node: Build<15>,  Next: Documentation<10>,  Prev: Tests<11>,  Up: Python 3 4 0 Beta 2

1.16.22.5 Build
...............

   - Issue #19728(1): Enable pip installation by default on Windows.

   - Issue #16136(2): Remove VMS support

   - Issue #18215(3): Add script Tools/ssl/test_multiple_versions.py to
     compile and run Python’s unit tests with multiple versions of
     OpenSSL.

   - Issue #19922(4): define _INCLUDE__STDC_A1_SOURCE in HP-UX to
     include mbstate_t for mbrtowc().

   - Issue #19788(5): kill_python(_d).exe is now run as a PreBuildEvent
     on the pythoncore sub-project.  This should prevent build errors
     due a previous build’s python(_d).exe still running.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/19728

   (2) https://bugs.python.org/16136

   (3) https://bugs.python.org/18215

   (4) https://bugs.python.org/19922

   (5) https://bugs.python.org/19788


File: python.info,  Node: Documentation<10>,  Next: Tools/Demos<9>,  Prev: Build<15>,  Up: Python 3 4 0 Beta 2

1.16.22.6 Documentation
.......................

   - Issue #20265(1): Updated some parts of the Using Windows document.

   - Issue #20266(2): Updated some parts of the Windows FAQ.

   - Issue #20255(3): Updated the about and bugs pages.

   - Issue #20253(4): Fixed a typo in the ipaddress docs that advertised
     an illegal attribute name.  Found by INADA Naoki.

   - Issue #18840(5): Introduce the json module in the tutorial, and
     de-emphasize the pickle module.

   - Issue #19845(6): Updated the Compiling Python on Windows section.

   - Issue #19795(7): Improved markup of True/False constants.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/20265

   (2) https://bugs.python.org/20266

   (3) https://bugs.python.org/20255

   (4) https://bugs.python.org/20253

   (5) https://bugs.python.org/18840

   (6) https://bugs.python.org/19845

   (7) https://bugs.python.org/19795


File: python.info,  Node: Tools/Demos<9>,  Prev: Documentation<10>,  Up: Python 3 4 0 Beta 2

1.16.22.7 Tools/Demos
.....................

   - Issue #19659(1): Added documentation for Argument Clinic.

   - Issue #19976(2): Argument Clinic METH_NOARGS functions now always
     take two parameters.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/19659

   (2) https://bugs.python.org/19976


File: python.info,  Node: Python 3 4 0 Beta 1,  Next: Python 3 4 0 Alpha 4,  Prev: Python 3 4 0 Beta 2,  Up: Changelog

1.16.23 Python 3.4.0 Beta 1
---------------------------

Release date: 2013-11-24

* Menu:

* Core and Builtins: Core and Builtins<20>. 
* Library: Library<21>. 
* Tests: Tests<12>. 
* Documentation: Documentation<11>. 
* Build: Build<16>. 
* Tools/Demos: Tools/Demos<10>. 


File: python.info,  Node: Core and Builtins<20>,  Next: Library<21>,  Up: Python 3 4 0 Beta 1

1.16.23.1 Core and Builtins
...........................

   - Use the repr of a module name in more places in import, especially
     exceptions.

   - Issue #19619(1): str.encode, bytes.decode and bytearray.decode now
     use an internal API to throw LookupError for known non-text
     encodings, rather than attempting the encoding or decoding
     operation and then throwing a TypeError for an unexpected output
     type.  (The latter mechanism remains in place for third party
     non-text encodings)

   - Issue #19183(2): Implement PEP 456 ’secure and interchangeable hash
     algorithm’.  Python now uses SipHash24 on all major platforms.

   - Issue #12892(3): The utf-16* and utf-32* encoders no longer allow
     surrogate code points (U+D800-U+DFFF) to be encoded.  The utf-32*
     decoders no longer decode byte sequences that correspond to
     surrogate code points.  The surrogatepass error handler now works
     with the utf-16* and utf-32* codecs.  Based on patches by Victor
     Stinner and Kang-Hao (Kenny) Lu.

   - Issue #17806(4): Added keyword-argument support for "tabsize" to
     str/bytes.expandtabs().

   - Issue #17828(5): Output type errors in str.encode(), bytes.decode()
     and bytearray.decode() now direct users to codecs.encode() or
     codecs.decode() as appropriate.

   - Issue #17828(6): The interpreter now attempts to chain errors that
     occur in codec processing with a replacement exception of the same
     type that includes the codec name in the error message.  It ensures
     it only does this when the creation of the replacement exception
     won’t lose any information.

   - Issue #19466(7): Clear the frames of daemon threads earlier during
     the Python shutdown to call objects destructors.  So "unclosed
     file" resource warnings are now corretly emitted for daemon
     threads.

   - Issue #19514(8): Deduplicate some _Py_IDENTIFIER declarations.
     Patch by Andrei Dorian Duma.

   - Issue #17936(9): Fix O(n**2) behaviour when adding or removing many
     subclasses of a given type.

   - Issue #19428(10): zipimport now handles errors when reading
     truncated or invalid ZIP archive.

   - Issue #18408(11): Add a new PyFrame_FastToLocalsWithError()
     function to handle exceptions when merging fast locals into
     f_locals of a frame.  PyEval_GetLocals() now raises an exception
     and return NULL on failure.

   - Issue #19369(12): Optimized the usage of __length_hint__().

   - Issue #18603(13): Ensure that PyOS_mystricmp and PyOS_mystrnicmp
     are in the Python executable and not removed by the linker’s
     optimizer.

   - Issue #19306(14): Add extra hints to the faulthandler module’s
     stack dumps that these are "upside down".

   ---------- Footnotes ----------

   (1) https://bugs.python.org/19619

   (2) https://bugs.python.org/19183

   (3) https://bugs.python.org/12892

   (4) https://bugs.python.org/17806

   (5) https://bugs.python.org/17828

   (6) https://bugs.python.org/17828

   (7) https://bugs.python.org/19466

   (8) https://bugs.python.org/19514

   (9) https://bugs.python.org/17936

   (10) https://bugs.python.org/19428

   (11) https://bugs.python.org/18408

   (12) https://bugs.python.org/19369

   (13) https://bugs.python.org/18603

   (14) https://bugs.python.org/19306


File: python.info,  Node: Library<21>,  Next: Tests<12>,  Prev: Core and Builtins<20>,  Up: Python 3 4 0 Beta 1

1.16.23.2 Library
.................

   - Issue #3158(1): doctest can now find doctests in functions and
     methods written in C.

   - Issue #13477(2): Added command line interface to the tarfile
     module.  Original patch by Berker Peksag.

   - Issue #19674(3): inspect.signature() now produces a correct
     signature for some builtins.

   - Issue #19722(4): Added opcode.stack_effect(), which computes the
     stack effect of bytecode instructions.

   - Issue #19735(5): Implement private function
     ssl._create_stdlib_context() to create SSLContext objects in
     Python’s stdlib module.  It provides a single configuration point
     and makes use of SSLContext.load_default_certs().

   - Issue #16203(6): Add re.fullmatch() function and regex.fullmatch()
     method, which anchor the pattern at both ends of the string to
     match.  Original patch by Matthew Barnett.

   - Issue #13592(7): Improved the repr for regular expression pattern
     objects.  Based on patch by Hugo Lopes Tavares.

   - Issue #19641(8): Added the audioop.byteswap() function to convert
     big-endian samples to little-endian and vice versa.

   - Issue #15204(9): Deprecated the ’U’ mode in file-like objects.

   - Issue #17810(10): Implement PEP 3154, pickle protocol 4.

   - Issue #19668(11): Added support for the cp1125 encoding.

   - Issue #19689(12): Add ssl.create_default_context() factory
     function.  It creates a new SSLContext object with secure default
     settings.

   - Issue #19727(13): os.utime(..., None) is now potentially more
     precise under Windows.

   - Issue #17201(14): ZIP64 extensions now are enabled by default.
     Patch by William Mallard.

   - Issue #19292(15): Add SSLContext.load_default_certs() to load
     default root CA certificates from default stores or system stores.
     By default the method loads CA certs for authentication of server
     certs.

   - Issue #19673(16): Add pathlib to the stdlib as a provisional module
     (PEP 428).

   - Issue #16596(17): pdb in a generator now properly skips over yield
     and yield from rather than stepping out of the generator into its
     caller.  (This is essential for stepping through asyncio
     coroutines.)

   - Issue #17916(18): Added dis.Bytecode.from_traceback() and
     dis.Bytecode.current_offset to easily display "current instruction"
     markers in the new disassembly API (Patch by Claudiu Popa).

   - Issue #19552(19): venv now supports bootstrapping pip into virtual
     environments

   - Issue #17134(20): Finalize interface to Windows’ certificate store.
     Cert and CRL enumeration are now two functions.
     enum_certificates() also returns purpose flags as set of OIDs.

   - Issue #19555(21): Restore sysconfig.get_config_var(’SO’), (and the
     distutils equivalent) with a DeprecationWarning pointing people at
     $EXT_SUFFIX.

   - Issue #8813(22): Add SSLContext.verify_flags to change the
     verification flags of the context in order to enable certification
     revocation list (CRL) checks or strict X509 rules.

   - Issue #18294(23): Fix the zlib module to make it 64-bit safe.

   - Issue #19682(24): Fix compatibility issue with old version of
     OpenSSL that was introduced by Issue #18379(25).

   - Issue #14455(26): plistlib now supports binary plists and has an
     updated API.

   - Issue #19633(27): Fixed writing not compressed 16- and 32-bit wave
     files on big-endian platforms.

   - Issue #18379(28): SSLSocket.getpeercert() returns CA issuer AIA
     fields, OCSP and CRL distribution points.

   - Issue #18138(29): Implement cadata argument of
     SSLContext.load_verify_location() to load CA certificates and CRL
     from memory.  It supports PEM and DER encoded strings.

   - Issue #18775(30): Add name and block_size attribute to HMAC object.
     They now provide the same API elements as non-keyed cryptographic
     hash functions.

   - Issue #17276(31): MD5 as default digestmod for HMAC is deprecated.
     The HMAC module supports digestmod names, e.g.  hmac.HMAC(’sha1’).

   - Issue #19449(32): in csv’s writerow, handle non-string keys when
     generating the error message that certain keys are not in the
     ’fieldnames’ list.

   - Issue #13633(33): Added a new convert_charrefs keyword arg to
     HTMLParser that, when True, automatically converts all character
     references.

   - Issue #2927(34): Added the unescape() function to the html module.

   - Issue #8402(35): Added the escape() function to the glob module.

   - Issue #17618(36): Add Base85 and Ascii85 encoding/decoding to the
     base64 module.

   - Issue #19634(37): time.strftime("%y") now raises a ValueError on
     AIX when given a year before 1900.

   - Fix test.support.bind_port() to not cause an error when Python was
     compiled on a system with SO_REUSEPORT defined in the headers but
     run on a system with an OS kernel that does not support that
     reasonably new socket option.

   - Fix compilation error under gcc of the ctypes module bundled libffi
     for arm.

   - Issue #19448(38): Add private API to SSL module to lookup ASN.1
     objects by OID, NID, short name and long name.

   - Issue #19282(39): dbm.open now supports the context management
     protocol.  (Initial patch by Claudiu Popa)

   - Issue #8311(40): Added support for writing any bytes-like objects
     in the aifc, sunau, and wave modules.

   - Issue #5202(41): Added support for unseekable files in the wave
     module.

   - Issue #19544(42) and Issue #1180(43): Restore global option to
     ignore ~/.pydistutils.cfg in Distutils, accidentally removed in
     backout of distutils2 changes.

   - Issue #19523(44): Closed FileHandler leak which occurred when delay
     was set.

   - Issue #19544(45) and Issue #6516(46): Restore support for –user and
     –group parameters to sdist command accidentally rolled back as part
     of the distutils2 rollback.

   - Issue #13674(47): Prevented time.strftime from crashing on Windows
     when given a year before 1900 and a format of %y.

   - Issue #19406(48): implementation of the ensurepip module (part of
     PEP 453).  Patch by Donald Stufft and Nick Coghlan.

   - Issue #19544(49) and Issue #6286(50): Restore use of urllib over
     http allowing use of http_proxy for Distutils upload command, a
     feature accidentally lost in the rollback of distutils2.

   - Issue #19544(51) and Issue #7457(52): Restore the read_pkg_file
     method to distutils.dist.DistributionMetadata accidentally removed
     in the undo of distutils2.

   - Issue #16685(53): Added support for any bytes-like objects in the
     audioop module.  Removed support for strings.

   - Issue #7171(54): Add Windows implementation of ‘inet_ntop’ and
     ‘inet_pton’ to socket module.  Patch by Atsuo Ishimoto.

   - Issue #19261(55): Added support for writing 24-bit samples in the
     sunau module.

   - Issue #1097797(56): Added CP273 encoding, used on IBM mainframes in
     Germany and Austria.  Mapping provided by Michael Bierenfeld.

   - Issue #1575020(57): Fixed support of 24-bit wave files on
     big-endian platforms.

   - Issue #19378(58): Fixed a number of cases in the dis module where
     the new "file" parameter was not being honoured correctly

   - Issue #19378(59): Removed the "dis.Bytecode.show_info" method

   - Issue #19378(60): Renamed the "dis.Bytecode.display_code" method to
     "dis.Bytecode.dis" and converted it to returning a string rather
     than printing output.

   - Issue #19378(61): the "line_offset" parameter in the new
     "dis.get_instructions" API has been renamed to "first_line" (and
     the default value and usage changed accordingly).  This should
     reduce confusion with the more common use of "offset" in the dis
     docs to refer to bytecode offsets.

   - Issue #18678(62): Corrected spwd struct member names in spwd
     module: sp_nam->sp_namp, and sp_pwd->sp_pwdp.  The old names are
     kept as extra structseq members, for backward compatibility.

   - Issue #6157(63): Fixed tkinter.Text.debug().  tkinter.Text.bbox()
     now raises TypeError instead of TclError on wrong number of
     arguments.  Original patch by Guilherme Polo.

   - Issue #10197(64): Rework subprocess.get[status]output to use
     subprocess functionality and thus to work on Windows.  Patch by
     Nick Coghlan

   - Issue #6160(65): The bbox() method of tkinter.Spinbox now returns a
     tuple of integers instead of a string.  Based on patch by Guilherme
     Polo.

   - Issue #19403(66): contextlib.redirect_stdout is now reentrant

   - Issue #19286(67): Directories in ‘package_data’ are no longer added
     to the filelist, preventing failure outlined in the ticket.

   - Issue #19480(68): HTMLParser now accepts all valid start-tag names
     as defined by the HTML5 standard.

   - Issue #15114(69): The html.parser module now raises a
     DeprecationWarning when the strict argument of HTMLParser or the
     HTMLParser.error method are used.

   - Issue #19410(70): Undo the special-casing removal of ’’ for
     importlib.machinery.FileFinder.

   - Issue #19424(71): Fix the warnings module to accept filename
     containing surrogate characters.

   - Issue #19435(72): Fix directory traversal attack on
     CGIHttpRequestHandler.

   - Issue #19227(73): Remove pthread_atfork() handler.  The handler was
     added to solve #18747 but has caused issues.

   - Issue #19420(74): Fix reference leak in module initialization code
     of _hashopenssl.c

   - Issue #19329(75): Optimized compiling charsets in regular
     expressions.

   - Issue #19227(76): Try to fix deadlocks caused by re-seeding then
     OpenSSL pseudo-random number generator on fork().

   - Issue #16037(77): HTTPMessage.readheaders() raises an HTTPException
     when more than 100 headers are read.  Adapted from patch by Jyrki
     Pulliainen.

   - Issue #16040(78): CVE-2013-1752: nntplib: Limit maximum line
     lengths to 2048 to prevent readline() calls from consuming too much
     memory.  Patch by Jyrki Pulliainen.

   - Issue #16041(79): CVE-2013-1752: poplib: Limit maximum line lengths
     to 2048 to prevent readline() calls from consuming too much memory.
     Patch by Jyrki Pulliainen.

   - Issue #17997(80): Change behavior of ‘ssl.match_hostname()’ to
     follow RFC 6125, for security reasons.  It now doesn’t match
     multiple wildcards nor wildcards inside IDN fragments.

   - Issue #16039(81): CVE-2013-1752: Change use of readline in imaplib
     module to limit line length.  Patch by Emil Lind.

   - Issue #19330(82): the unnecessary wrapper functions have been
     removed from the implementations of the new
     contextlib.redirect_stdout and contextlib.suppress context
     managers, which also ensures they provide reasonable help() output
     on instances

   - Issue #19393(83): Fix symtable.symtable function to not be confused
     when there are functions or classes named "top".

   - Issue #18685(84): Restore re performance to pre-PEP 393 levels.

   - Issue #19339(85): telnetlib module is now using time.monotonic()
     when available to compute timeout.

   - Issue #19399(86): fix sporadic test_subprocess failure.

   - Issue #13234(87): Fix os.listdir to work with extended paths on
     Windows.  Patch by Santoso Wijaya.

   - Issue #19375(88): The site module adding a "site-python" directory
     to sys.path, if it exists, is now deprecated.

   - Issue #19379(89): Lazily import linecache in the warnings module,
     to make startup with warnings faster until a warning gets printed.

   - Issue #19288(90): Fixed the "in" operator of dbm.gnu databases for
     string argument.  Original patch by Arfrever Frehtes Taifersar
     Arahesis.

   - Issue #19287(91): Fixed the "in" operator of dbm.ndbm databases for
     string argument.  Original patch by Arfrever Frehtes Taifersar
     Arahesis.

   - Issue #19327(92): Fixed the working of regular expressions with too
     big charset.

   - Issue #17400(93): New ’is_global’ attribute for ipaddress to tell
     if an address is allocated by IANA for global or private networks.

   - Issue #19350(94): Increasing the test coverage of macurl2path.
     Patch by Colin Williams.

   - Issue #19365(95): Optimized the parsing of long replacement string
     in re.sub*() functions.

   - Issue #19352(96): Fix unittest discovery when a module can be
     reached through several paths (e.g.  under Debian/Ubuntu with
     virtualenv).

   - Issue #15207(97): Fix mimetypes to read from correct part of
     Windows registry Original patch by Dave Chambers

   - Issue #16595(98): Add prlimit() to resource module.

   - Issue #19324(99): Expose Linux-specific constants in resource
     module.

   - Load SSL’s error strings in hashlib.

   - Issue #18527(100): Upgrade internal copy of zlib to 1.2.8.

   - Issue #19274(101): Add a filterfunc parameter to PyZipFile.writepy.

   - Issue #8964(102): fix platform._sys_version to handle IronPython
     2.6+.  Patch by Martin Matusiak.

   - Issue #19413(103): Restore pre-3.3 reload() semantics of re-finding
     modules.

   - Issue #18958(104): Improve error message for json.load(s) while
     passing a string that starts with a UTF-8 BOM.

   - Issue #19307(105): Improve error message for json.load(s) while
     passing objects of the wrong type.

   - Issue #16038(106): CVE-2013-1752: ftplib: Limit amount of data read
     by limiting the call to readline().  Original patch by Michał
     Jastrzębski and Giampaolo Rodola.

   - Issue #17087(107): Improved the repr for regular expression match
     objects.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/3158

   (2) https://bugs.python.org/13477

   (3) https://bugs.python.org/19674

   (4) https://bugs.python.org/19722

   (5) https://bugs.python.org/19735

   (6) https://bugs.python.org/16203

   (7) https://bugs.python.org/13592

   (8) https://bugs.python.org/19641

   (9) https://bugs.python.org/15204

   (10) https://bugs.python.org/17810

   (11) https://bugs.python.org/19668

   (12) https://bugs.python.org/19689

   (13) https://bugs.python.org/19727

   (14) https://bugs.python.org/17201

   (15) https://bugs.python.org/19292

   (16) https://bugs.python.org/19673

   (17) https://bugs.python.org/16596

   (18) https://bugs.python.org/17916

   (19) https://bugs.python.org/19552

   (20) https://bugs.python.org/17134

   (21) https://bugs.python.org/19555

   (22) https://bugs.python.org/8813

   (23) https://bugs.python.org/18294

   (24) https://bugs.python.org/19682

   (25) https://bugs.python.org/18379

   (26) https://bugs.python.org/14455

   (27) https://bugs.python.org/19633

   (28) https://bugs.python.org/18379

   (29) https://bugs.python.org/18138

   (30) https://bugs.python.org/18775

   (31) https://bugs.python.org/17276

   (32) https://bugs.python.org/19449

   (33) https://bugs.python.org/13633

   (34) https://bugs.python.org/2927

   (35) https://bugs.python.org/8402

   (36) https://bugs.python.org/17618

   (37) https://bugs.python.org/19634

   (38) https://bugs.python.org/19448

   (39) https://bugs.python.org/19282

   (40) https://bugs.python.org/8311

   (41) https://bugs.python.org/5202

   (42) https://bugs.python.org/19544

   (43) https://bugs.python.org/1180

   (44) https://bugs.python.org/19523

   (45) https://bugs.python.org/19544

   (46) https://bugs.python.org/6516

   (47) https://bugs.python.org/13674

   (48) https://bugs.python.org/19406

   (49) https://bugs.python.org/19544

   (50) https://bugs.python.org/6286

   (51) https://bugs.python.org/19544

   (52) https://bugs.python.org/7457

   (53) https://bugs.python.org/16685

   (54) https://bugs.python.org/7171

   (55) https://bugs.python.org/19261

   (56) https://bugs.python.org/1097797

   (57) https://bugs.python.org/1575020

   (58) https://bugs.python.org/19378

   (59) https://bugs.python.org/19378

   (60) https://bugs.python.org/19378

   (61) https://bugs.python.org/19378

   (62) https://bugs.python.org/18678

   (63) https://bugs.python.org/6157

   (64) https://bugs.python.org/10197

   (65) https://bugs.python.org/6160

   (66) https://bugs.python.org/19403

   (67) https://bugs.python.org/19286

   (68) https://bugs.python.org/19480

   (69) https://bugs.python.org/15114

   (70) https://bugs.python.org/19410

   (71) https://bugs.python.org/19424

   (72) https://bugs.python.org/19435

   (73) https://bugs.python.org/19227

   (74) https://bugs.python.org/19420

   (75) https://bugs.python.org/19329

   (76) https://bugs.python.org/19227

   (77) https://bugs.python.org/16037

   (78) https://bugs.python.org/16040

   (79) https://bugs.python.org/16041

   (80) https://bugs.python.org/17997

   (81) https://bugs.python.org/16039

   (82) https://bugs.python.org/19330

   (83) https://bugs.python.org/19393

   (84) https://bugs.python.org/18685

   (85) https://bugs.python.org/19339

   (86) https://bugs.python.org/19399

   (87) https://bugs.python.org/13234

   (88) https://bugs.python.org/19375

   (89) https://bugs.python.org/19379

   (90) https://bugs.python.org/19288

   (91) https://bugs.python.org/19287

   (92) https://bugs.python.org/19327

   (93) https://bugs.python.org/17400

   (94) https://bugs.python.org/19350

   (95) https://bugs.python.org/19365

   (96) https://bugs.python.org/19352

   (97) https://bugs.python.org/15207

   (98) https://bugs.python.org/16595

   (99) https://bugs.python.org/19324

   (100) https://bugs.python.org/18527

   (101) https://bugs.python.org/19274

   (102) https://bugs.python.org/8964

   (103) https://bugs.python.org/19413

   (104) https://bugs.python.org/18958

   (105) https://bugs.python.org/19307

   (106) https://bugs.python.org/16038

   (107) https://bugs.python.org/17087


File: python.info,  Node: Tests<12>,  Next: Documentation<11>,  Prev: Library<21>,  Up: Python 3 4 0 Beta 1

1.16.23.3 Tests
...............

   - Issue #19664(1): test_userdict’s repr test no longer depends on the
     order of dict elements.

   - Issue #19440(2): Clean up test_capi by removing an unnecessary
     __future__ import, converting from test_main to unittest.main, and
     running the _testcapi module tests as subTests of a unittest
     TestCase method.

   - Issue #19378(3): the main dis module tests are now run with both
     stdout redirection `and' passing an explicit file parameter

   - Issue #19378(4): removed the not-actually-helpful
     assertInstructionMatches and assertBytecodeExactlyMatches helpers
     from bytecode_helper

   - Issue #18702(5): All skipped tests now reported as skipped.

   - Issue #19439(6): interpreter embedding tests are now executed on
     Windows (Patch by Zachary Ware)

   - Issue #19085(7): Added basic tests for all tkinter widget options.

   - Issue #19384(8): Fix test_py_compile for root user, patch by
     Claudiu Popa.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/19664

   (2) https://bugs.python.org/19440

   (3) https://bugs.python.org/19378

   (4) https://bugs.python.org/19378

   (5) https://bugs.python.org/18702

   (6) https://bugs.python.org/19439

   (7) https://bugs.python.org/19085

   (8) https://bugs.python.org/19384


File: python.info,  Node: Documentation<11>,  Next: Build<16>,  Prev: Tests<12>,  Up: Python 3 4 0 Beta 1

1.16.23.4 Documentation
.......................

   - Issue #18326(1): Clarify that list.sort’s arguments are
     keyword-only.  Also, attempt to reduce confusion in the glossary by
     not saying there are different "types" of arguments and parameters.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/18326


File: python.info,  Node: Build<16>,  Next: Tools/Demos<10>,  Prev: Documentation<11>,  Up: Python 3 4 0 Beta 1

1.16.23.5 Build
...............

   - Issue #19358(1): "make clinic" now runs the Argument Clinic
     preprocessor over all CPython source files.

   - Update SQLite to 3.8.1, xz to 5.0.5, and Tcl/Tk to 8.6.1 on
     Windows.

   - Issue #16632(2): Enable DEP and ASLR on Windows.

   - Issue #17791(3): Drop PREFIX and EXEC_PREFIX definitions from
     PC/pyconfig.h

   - Add workaround for VS 2010 nmake clean issue.  VS 2010 doesn’t set
     up PATH for nmake.exe correctly.

   - Issue #19550(4): Implement Windows installer changes of PEP 453
     (ensurepip).

   - Issue #19520(5): Fix compiler warning in the _sha3 module on 32bit
     Windows.

   - Issue #19356(6): Avoid using a C variabled named "_self", it’s a
     reserved word in some C compilers.

   - Issue #15792(7): Correct build options on Win64.  Patch by Jeremy
     Kloth.

   - Issue #19373(8): Apply upstream change to Tk 8.5.15 fixing OS X
     10.9 screen refresh problem for OS X installer build.

   - Issue #19649(9): On OS X, the same set of file names are now
     installed in bin directories for all configurations: non-framework
     vs framework, and single arch vs universal builds.  pythonx.y-32 is
     now always installed for 64-bit/32-bit universal builds.  The
     obsolete and undocumented pythonw* symlinks are no longer installed
     anywhere.

   - Issue #19553(10): PEP 453 - "make install" and "make altinstall"
     now install or upgrade pip by default, using the bundled pip
     provided by the new ensurepip module.  A new configure option,
     –with-ensurepip[=upgrade|install|no], is available to override the
     default ensurepip "–upgrade" option.  The option can also be set
     with "make [alt]install ENSUREPIP=[upgrade|install|no]".

   - Issue #19551(11): PEP 453 - the OS X installer now installs pip by
     default.

   - Update third-party libraries for OS X installers: xz 5.0.3 ->
     5.0.5, SQLite 3.7.13 -> 3.8.1

   - Issue #15663(12): Revert OS X installer built-in Tcl/Tk support for
     3.4.0b1.  Some third-party projects, such as Matplotlib and
     PIL/Pillow, depended on being able to build with Tcl and Tk
     frameworks in /Library/Frameworks.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/19358

   (2) https://bugs.python.org/16632

   (3) https://bugs.python.org/17791

   (4) https://bugs.python.org/19550

   (5) https://bugs.python.org/19520

   (6) https://bugs.python.org/19356

   (7) https://bugs.python.org/15792

   (8) https://bugs.python.org/19373

   (9) https://bugs.python.org/19649

   (10) https://bugs.python.org/19553

   (11) https://bugs.python.org/19551

   (12) https://bugs.python.org/15663


File: python.info,  Node: Tools/Demos<10>,  Prev: Build<16>,  Up: Python 3 4 0 Beta 1

1.16.23.6 Tools/Demos
.....................

   - Issue #19730(1): Argument Clinic now supports all the existing
     PyArg "format units" as legacy converters, as well as two new
     features: "self converters" and the "version" directive.

   - Issue #19552(2): pyvenv now bootstraps pip into virtual
     environments by default (pass –without-pip to request the old
     behaviour)

   - Issue #19390(3): Argument Clinic no longer accepts malformed Python
     and C ids.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/19730

   (2) https://bugs.python.org/19552

   (3) https://bugs.python.org/19390


File: python.info,  Node: Python 3 4 0 Alpha 4,  Next: Python 3 4 0 Alpha 3,  Prev: Python 3 4 0 Beta 1,  Up: Changelog

1.16.24 Python 3.4.0 Alpha 4
----------------------------

Release date: 2013-10-20

* Menu:

* Core and Builtins: Core and Builtins<21>. 
* Library: Library<22>. 
* C API: C API<5>. 
* Tests: Tests<13>. 
* Documentation: Documentation<12>. 
* Build: Build<17>. 


File: python.info,  Node: Core and Builtins<21>,  Next: Library<22>,  Up: Python 3 4 0 Alpha 4

1.16.24.1 Core and Builtins
...........................

   - Issue #19301(1): Give classes and functions that are explicitly
     marked global a global qualname.

   - Issue #19279(2): UTF-7 decoder no longer produces illegal strings.

   - Issue #16612(3): Add "Argument Clinic", a compile-time preprocessor
     for C files to generate argument parsing code.  (See PEP 436.)

   - Issue #18810(4): Shift stat calls in importlib.machinery.FileFinder
     such that the code is optimistic that if something exists in a
     directory named exactly like the possible package being searched
     for that it’s in actuality a directory.

   - Issue #18416(5): importlib.machinery.PathFinder now treats ’’ as
     the cwd and importlib.machinery.FileFinder no longer special-cases
     ’’ to ’.’.  This leads to modules imported from cwd to now possess
     an absolute file path for __file__ (this does not affect modules
     specified by path on the CLI but it does affect -m/runpy).  It also
     allows FileFinder to be more consistent by not having an edge case.

   - Issue #4555(6): All exported C symbols are now prefixed with either
     "Py" or "_Py".

   - Issue #19219(7): Speed up marshal.loads(), and make pyc files
     slightly (5% to 10%) smaller.

   - Issue #19221(8): Upgrade Unicode database to version 6.3.0.

   - Issue #16742(9): The result of the C callback
     PyOS_ReadlineFunctionPointer must now be a string allocated by
     PyMem_RawMalloc() or PyMem_RawRealloc() (or NULL if an error
     occurred), instead of a string allocated by PyMem_Malloc() or
     PyMem_Realloc().

   - Issue #19199(10): Remove ‘PyThreadState.tick_counter’ field

   - Fix macro expansion of _PyErr_OCCURRED(), and make sure to use it
     in at least one place so as to avoid regressions.

   - Issue #19087(11): Improve bytearray allocation in order to allow
     cheap popping of data at the front (slice deletion).

   - Issue #19014(12): memoryview.cast() is now allowed on zero-length
     views.

   - Issue #18690(13): memoryview is now automatically registered with
     collections.abc.Sequence

   - Issue #19078(14): memoryview now correctly supports the reversed
     builtin (Patch by Claudiu Popa)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/19301

   (2) https://bugs.python.org/19279

   (3) https://bugs.python.org/16612

   (4) https://bugs.python.org/18810

   (5) https://bugs.python.org/18416

   (6) https://bugs.python.org/4555

   (7) https://bugs.python.org/19219

   (8) https://bugs.python.org/19221

   (9) https://bugs.python.org/16742

   (10) https://bugs.python.org/19199

   (11) https://bugs.python.org/19087

   (12) https://bugs.python.org/19014

   (13) https://bugs.python.org/18690

   (14) https://bugs.python.org/19078


File: python.info,  Node: Library<22>,  Next: C API<5>,  Prev: Core and Builtins<21>,  Up: Python 3 4 0 Alpha 4

1.16.24.2 Library
.................

   - Issue #17457(1): unittest test discovery now works with namespace
     packages.  Patch by Claudiu Popa.

   - Issue #18235(2): Fix the sysconfig variables LDSHARED and BLDSHARED
     under AIX. Patch by David Edelsohn.

   - Issue #18606(3): Add the new "statistics" module (PEP 450).
     Contributed by Steven D’Aprano.

   - Issue #12866(4): The audioop module now supports 24-bit samples.

   - Issue #19254(5): Provide an optimized Python implementation of
     pbkdf2_hmac.

   - Issues #19201, Issue #19222(6), Issue #19223(7): Add "x" mode
     (exclusive creation) in opening file to bz2, gzip and lzma modules.
     Patches by Tim Heaney and Vajrasky Kok.

   - Fix a reference count leak in _sre.

   - Issue #19262(8): Initial check in of the ’asyncio’ package (a.k.a.
     Tulip, a.k.a.  PEP 3156).  There are no docs yet, and the PEP is
     slightly out of date with the code.  This module will have
     `provisional' status in Python 3.4.

   - Issue #19276(9): Fixed the wave module on 64-bit big-endian
     platforms.

   - Issue #19266(10): Rename the new-in-3.4 ‘contextlib.ignore’ context
     manager to ‘contextlib.suppress’ in order to be more consistent
     with existing descriptions of that operation elsewhere in the
     language and standard library documentation (Patch by Zero
     Piraeus).

   - Issue #18891(11): Completed the new email package (provisional) API
     additions by adding new classes EmailMessage, MIMEPart, and
     ContentManager.

   - Issue #18281(12): Unused stat constants removed from *note tarfile:
     ff.

   - Issue #18999(13): Multiprocessing now supports ’contexts’ with the
     same API as the module, but bound to specified start methods.

   - Issue #18468(14): The re.split, re.findall, and re.sub functions
     and the group() and groups() methods of match object now always
     return a string or a bytes object.

   - Issue #18725(15): The textwrap module now supports truncating
     multiline text.

   - Issue #18776(16): atexit callbacks now display their full traceback
     when they raise an exception.

   - Issue #17827(17): Add the missing documentation for ‘codecs.encode’
     and ‘codecs.decode’.

   - Issue #19218(18): Rename collections.abc to _collections_abc in
     order to speed up interpreter start.

   - Issue #18582(19): Add ’pbkdf2_hmac’ to the hashlib module.  It
     implements PKCS#5 password-based key derivation functions with HMAC
     as pseudorandom function.

   - Issue #19131(20): The aifc module now correctly reads and writes
     sampwidth of compressed streams.

   - Issue #19209(21): Remove import of copyreg from the os module to
     speed up interpreter startup.  stat_result and statvfs_result are
     now hard-coded to reside in the os module.

   - Issue #19205(22): Don’t import the ’re’ module in site and
     sysconfig module to speed up interpreter start.

   - Issue #9548(23): Add a minimal "_bootlocale" module that is
     imported by the _io module instead of the full locale module.

   - Issue #18764(24): Remove the ’print’ alias for the PDB ’p’ command
     so that it no longer shadows the print function.

   - Issue #19158(25): A rare race in BoundedSemaphore could allow
     .release() too often.

   - Issue #15805(26): Add contextlib.redirect_stdout().

   - Issue #18716(27): Deprecate the formatter module.

   - Issue #10712(28): 2to3 has a new "asserts" fixer that replaces
     deprecated names of unittest methods (e.g.  failUnlessEqual ->
     assertEqual).

   - Issue #18037(29): 2to3 now escapes ‘'\u'’ and ‘'\U'’ in native
     strings.

   - Issue #17839(30): base64.decodebytes and base64.encodebytes now
     accept any object that exports a 1 dimensional array of bytes (this
     means the same is now also true for base64_codec)

   - Issue #19132(31): The pprint module now supports compact mode.

   - Issue #19137(32): The pprint module now correctly formats instances
     of set and frozenset subclasses.

   - Issue #10042(33): functools.total_ordering now correctly handles
     NotImplemented being returned by the underlying comparison function
     (Patch by Katie Miller)

   - Issue #19092(34): contextlib.ExitStack now correctly reraises
     exceptions from the __exit__ callbacks of inner context managers
     (Patch by Hrvoje Nikšić)

   - Issue #12641(35): Avoid passing "-mno-cygwin" to the mingw32
     compiler, except when necessary.  Patch by Oscar Benjamin.

   - Issue #5845(36): In site.py, only load readline history from
     ~/.python_history if no history has been read already.  This avoids
     double writes to the history file at shutdown.

   - Properly initialize all fields of a SSL object after allocation.

   - Issue #19095(37): SSLSocket.getpeercert() now raises ValueError
     when the SSL handshake hasn’t been done.

   - Issue #4366(38): Fix building extensions on all platforms when
     –enable-shared is used.

   - Issue #19030(39): Fixed *note inspect.getmembers: b9d. and
     ‘inspect.classify_class_attrs’ to attempt activating descriptors
     before falling back to a __dict__ search for faulty descriptors.
     ‘inspect.classify_class_attrs’ no longer returns Attributes whose
     home class is None.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/17457

   (2) https://bugs.python.org/18235

   (3) https://bugs.python.org/18606

   (4) https://bugs.python.org/12866

   (5) https://bugs.python.org/19254

   (6) https://bugs.python.org/19222

   (7) https://bugs.python.org/19223

   (8) https://bugs.python.org/19262

   (9) https://bugs.python.org/19276

   (10) https://bugs.python.org/19266

   (11) https://bugs.python.org/18891

   (12) https://bugs.python.org/18281

   (13) https://bugs.python.org/18999

   (14) https://bugs.python.org/18468

   (15) https://bugs.python.org/18725

   (16) https://bugs.python.org/18776

   (17) https://bugs.python.org/17827

   (18) https://bugs.python.org/19218

   (19) https://bugs.python.org/18582

   (20) https://bugs.python.org/19131

   (21) https://bugs.python.org/19209

   (22) https://bugs.python.org/19205

   (23) https://bugs.python.org/9548

   (24) https://bugs.python.org/18764

   (25) https://bugs.python.org/19158

   (26) https://bugs.python.org/15805

   (27) https://bugs.python.org/18716

   (28) https://bugs.python.org/10712

   (29) https://bugs.python.org/18037

   (30) https://bugs.python.org/17839

   (31) https://bugs.python.org/19132

   (32) https://bugs.python.org/19137

   (33) https://bugs.python.org/10042

   (34) https://bugs.python.org/19092

   (35) https://bugs.python.org/12641

   (36) https://bugs.python.org/5845

   (37) https://bugs.python.org/19095

   (38) https://bugs.python.org/4366

   (39) https://bugs.python.org/19030


File: python.info,  Node: C API<5>,  Next: Tests<13>,  Prev: Library<22>,  Up: Python 3 4 0 Alpha 4

1.16.24.3 C API
...............

   - Issue #1772673(1): The type of ‘char*’ arguments now changed to
     ‘const char*’.

   - Issue #16129(2): Added a ‘Py_SetStandardStreamEncoding’
     pre-initialization API to allow embedding applications like Blender
     to force a particular encoding and error handler for the standard
     IO streams (initial patch by Bastien Montagne)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/1772673

   (2) https://bugs.python.org/16129


File: python.info,  Node: Tests<13>,  Next: Documentation<12>,  Prev: C API<5>,  Up: Python 3 4 0 Alpha 4

1.16.24.4 Tests
...............

   - Issue #19275(1): Fix test_site on AMD64 Snow Leopard

   - Issue #14407(2): Fix unittest test discovery in
     test_concurrent_futures.

   - Issue #18919(3): Unified and extended tests for audio modules:
     aifc, sunau and wave.

   - Issue #18714(4): Added tests for ‘pdb.find_function()’.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/19275

   (2) https://bugs.python.org/14407

   (3) https://bugs.python.org/18919

   (4) https://bugs.python.org/18714


File: python.info,  Node: Documentation<12>,  Next: Build<17>,  Prev: Tests<13>,  Up: Python 3 4 0 Alpha 4

1.16.24.5 Documentation
.......................

   - Issue #18758(1): Fixed and improved cross-references.

   - Issue #18972(2): Modernize email examples and use the argparse
     module in them.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/18758

   (2) https://bugs.python.org/18972


File: python.info,  Node: Build<17>,  Prev: Documentation<12>,  Up: Python 3 4 0 Alpha 4

1.16.24.6 Build
...............

   - Issue #19130(1): Correct PCbuild/readme.txt, Python 3.3 and 3.4
     require VS 2010.

   - Issue #15663(2): Update OS X 10.6+ installer to use Tcl/Tk 8.5.15.

   - 
     Issue #14499(3): Fix several problems with OS X universal build support:

            1. ppc arch detection for extension module builds broke with
               Xcode 5

            2. ppc arch detection in configure did not work on OS X 10.4

            3. -sysroot and -arch flags were unnecessarily duplicated

            4. there was no obvious way to configure an intel-32 only
               build.

   - Issue #19019(4): Change the OS X installer build script to use
     CFLAGS instead of OPT for special build options.  By setting OPT,
     some compiler-specific options like -fwrapv were overridden and
     thus not used, which could result in broken interpreters when
     building with clang.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/19130

   (2) https://bugs.python.org/15663

   (3) https://bugs.python.org/14499

   (4) https://bugs.python.org/19019


File: python.info,  Node: Python 3 4 0 Alpha 3,  Next: Python 3 4 0 Alpha 2,  Prev: Python 3 4 0 Alpha 4,  Up: Changelog

1.16.25 Python 3.4.0 Alpha 3
----------------------------

Release date: 2013-09-29

* Menu:

* Core and Builtins: Core and Builtins<22>. 
* Library: Library<23>. 
* Tests: Tests<14>. 
* IDLE: IDLE<11>. 
* Documentation: Documentation<13>. 
* Build: Build<18>. 
* Tools/Demos: Tools/Demos<11>. 


File: python.info,  Node: Core and Builtins<22>,  Next: Library<23>,  Up: Python 3 4 0 Alpha 3

1.16.25.1 Core and Builtins
...........................

   - Issue #18818(1): The "encodingname" part of PYTHONIOENCODING is now
     optional.

   - Issue #19098(2): Prevent overflow in the compiler when the
     recursion limit is set absurdly high.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/18818

   (2) https://bugs.python.org/19098


File: python.info,  Node: Library<23>,  Next: Tests<14>,  Prev: Core and Builtins<22>,  Up: Python 3 4 0 Alpha 3

1.16.25.2 Library
.................

   - Issue #18929(1): ‘inspect.classify_class_attrs()’ now correctly
     finds class attributes returned by *note dir(): 16a. that are
     located in the metaclass.

   - Issue #18950(2): Fix miscellaneous bugs in the sunau module.
     Au_read.readframes() now updates current file position and reads
     correct number of frames from multichannel stream.
     Au_write.writeframesraw() now correctly updates current file
     position.  Au_read.getnframes() now returns an integer (as in
     Python 2).  Au_read and Au_write now correctly works with file
     object if start file position is not a zero.

   - Issue #18594(3): The fast path for collections.Counter() was never
     taken due to an over-restrictive type check.

   - Issue #19053(4): ZipExtFile.read1() with non-zero argument no more
     returns empty bytes until end of data.

   - logging: added support for Unix domain sockets to SocketHandler and
     DatagramHandler.

   - Issue #18996(5): TestCase.assertEqual() now more cleverly shorten
     differing strings in error report.

   - Issue #19034(6): repr() for tkinter.Tcl_Obj now exposes string
     reperesentation.

   - Issue #18978(7): ‘urllib.request.Request’ now allows the method to
     be indicated on the class and no longer sets it to None in
     ‘__init__’.

   - Issue #18626(8): the inspect module now offers a basic command line
     introspection interface (Initial patch by Claudiu Popa)

   - Issue #3015(9): Fixed tkinter with wantobject=False.  Any Tcl
     command call returned empty string.

   - Issue #19037(10): The mailbox module now makes all changes to
     maildir files before moving them into place, to avoid race
     conditions with other programs that may be accessing the maildir
     directory.

   - Issue #14984(11): On POSIX systems, when netrc is called without a
     filename argument (and therefore is reading the user’s $HOME/.netrc
     file), it now enforces the same security rules as typical ftp
     clients: the .netrc file must be owned by the user that owns the
     process and must not be readable by any other user.

   - Issue #18873(12): The tokenize module now detects Python source
     code encoding only in comment lines.

   - Issue #17764(13): Enable http.server to bind to a user specified
     network interface.  Patch contributed by Malte Swart.

   - Issue #18937(14): Add an assertLogs() context manager to
     unittest.TestCase to ensure that a block of code emits a message
     using the logging module.

   - Issue #17324(15): Fix http.server’s request handling case on
     trailing ’/’.  Patch contributed by Vajrasky Kok.

   - Issue #19018(16): The heapq.merge() function no longer suppresses
     IndexError in the underlying iterables.

   - Issue #18784(17): The uuid module no longer attempts to load libc
     via ctypes.CDLL if all the necessary functions have already been
     found in libuuid.  Patch by Evgeny Sologubov.

   - The *note PYTHONFAULTHANDLER: 5eb. environment variable now only
     enables the faulthandler module if the variable is non-empty.  Same
     behaviour than other variables like *note PYTHONDONTWRITEBYTECODE:
     9ae.

   - Issue #1565525(18): New function ‘traceback.clear_frames’ will
     clear the local variables of all the stack frames referenced by a
     traceback object.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/18929

   (2) https://bugs.python.org/18950

   (3) https://bugs.python.org/18594

   (4) https://bugs.python.org/19053

   (5) https://bugs.python.org/18996

   (6) https://bugs.python.org/19034

   (7) https://bugs.python.org/18978

   (8) https://bugs.python.org/18626

   (9) https://bugs.python.org/3015

   (10) https://bugs.python.org/19037

   (11) https://bugs.python.org/14984

   (12) https://bugs.python.org/18873

   (13) https://bugs.python.org/17764

   (14) https://bugs.python.org/18937

   (15) https://bugs.python.org/17324

   (16) https://bugs.python.org/19018

   (17) https://bugs.python.org/18784

   (18) https://bugs.python.org/1565525


File: python.info,  Node: Tests<14>,  Next: IDLE<11>,  Prev: Library<23>,  Up: Python 3 4 0 Alpha 3

1.16.25.3 Tests
...............

   - Issue #18952(1): Fix regression in support data downloads
     introduced when test.support was converted to a package.
     Regression noticed by Zachary Ware.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/18952


File: python.info,  Node: IDLE<11>,  Next: Documentation<13>,  Prev: Tests<14>,  Up: Python 3 4 0 Alpha 3

1.16.25.4 IDLE
..............

   - Issue #18873(1): IDLE now detects Python source code encoding only
     in comment lines.

   - Issue #18988(2): The "Tab" key now works when a word is already
     autocompleted.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/18873

   (2) https://bugs.python.org/18988


File: python.info,  Node: Documentation<13>,  Next: Build<18>,  Prev: IDLE<11>,  Up: Python 3 4 0 Alpha 3

1.16.25.5 Documentation
.......................

   - Issue #17003(1): Unified the size argument names in the io module
     with common practice.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/17003


File: python.info,  Node: Build<18>,  Next: Tools/Demos<11>,  Prev: Documentation<13>,  Up: Python 3 4 0 Alpha 3

1.16.25.6 Build
...............

   - Issue #18596(1): Support the use of address sanity checking in
     recent versions of clang and GCC by appropriately marking known
     false alarms in the small object allocator.  Patch contributed by
     Dhiru Kholia.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/18596


File: python.info,  Node: Tools/Demos<11>,  Prev: Build<18>,  Up: Python 3 4 0 Alpha 3

1.16.25.7 Tools/Demos
.....................

   - Issue #18873(1): 2to3 and the findnocoding.py script now detect
     Python source code encoding only in comment lines.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/18873


File: python.info,  Node: Python 3 4 0 Alpha 2,  Next: Python 3 4 0 Alpha 1,  Prev: Python 3 4 0 Alpha 3,  Up: Changelog

1.16.26 Python 3.4.0 Alpha 2
----------------------------

Release date: 2013-09-09

* Menu:

* Core and Builtins: Core and Builtins<23>. 
* Library: Library<24>. 
* Tests: Tests<15>. 
* IDLE: IDLE<12>. 
* Documentation: Documentation<14>. 
* Build: Build<19>. 
* Tools/Demos: Tools/Demos<12>. 


File: python.info,  Node: Core and Builtins<23>,  Next: Library<24>,  Up: Python 3 4 0 Alpha 2

1.16.26.1 Core and Builtins
...........................

   - Issue #18942(1): sys._debugmallocstats() output was damaged on
     Windows.

   - Issue #18571(2): Implementation of the PEP 446: file descriptors
     and file handles are now created non-inheritable; add functions
     os.get/set_inheritable(), os.get/set_handle_inheritable() and
     socket.socket.get/set_inheritable().

   - Issue #11619(3): The parser and the import machinery do not encode
     Unicode filenames anymore on Windows.

   - Issue #18808(4): Non-daemon threads are now automatically joined
     when a sub-interpreter is shutdown (it would previously dump a
     fatal error).

   - Remove support for compiling on systems without getcwd().

   - Issue #18774(5): Remove last bits of GNU PTH thread code and
     thread_pth.h.

   - Issue #18771(6): Add optimization to set object lookups to reduce
     the cost of hash collisions.  The core idea is to inspect a second
     key/hash pair for each cache line retrieved.

   - Issue #16105(7): When a signal handler fails to write to the file
     descriptor registered with ‘signal.set_wakeup_fd()’, report an
     exception instead of ignoring the error.

   - Issue #18722(8): Remove uses of the "register" keyword in C code.

   - Issue #18667(9): Add missing "HAVE_FCHOWNAT" symbol to
     posix._have_functions.

   - Issue #16499(10): Add command line option for isolated mode.

   - Issue #15301(11): Parsing fd, uid, and gid parameters for builtins
     in Modules/posixmodule.c is now far more robust.

   - Issue #18368(12): PyOS_StdioReadline() no longer leaks memory when
     realloc() fail.

   - Issue #17934(13): Add a clear() method to frame objects, to help
     clean up expensive details (local variables) and break reference
     cycles.

   - Issue #18780(14): %-formatting codes %d, %i, and %u now treat
     int-subclasses as int (displays value of int-subclass instead of
     str(int-subclass) ).

   ---------- Footnotes ----------

   (1) https://bugs.python.org/18942

   (2) https://bugs.python.org/18571

   (3) https://bugs.python.org/11619

   (4) https://bugs.python.org/18808

   (5) https://bugs.python.org/18774

   (6) https://bugs.python.org/18771

   (7) https://bugs.python.org/16105

   (8) https://bugs.python.org/18722

   (9) https://bugs.python.org/18667

   (10) https://bugs.python.org/16499

   (11) https://bugs.python.org/15301

   (12) https://bugs.python.org/18368

   (13) https://bugs.python.org/17934

   (14) https://bugs.python.org/18780


File: python.info,  Node: Library<24>,  Next: Tests<15>,  Prev: Core and Builtins<23>,  Up: Python 3 4 0 Alpha 2

1.16.26.2 Library
.................

   - Issue #18808(1): Thread.join() now waits for the underlying thread
     state to be destroyed before returning.  This prevents
     unpredictable aborts in Py_EndInterpreter() when some non-daemon
     threads are still running.

   - Issue #18458(2): Prevent crashes with newer versions of libedit.
     Its readline emulation has changed from 0-based indexing to 1-based
     like gnu readline.

   - Issue #18852(3): Handle case of ‘readline.__doc__’ being ‘None’ in
     the new readline activation code in ‘site.py’.

   - Issue #18672(4): Fixed format specifiers for Py_ssize_t in
     debugging output in the _sre module.

   - Issue #18830(5): inspect.getclasstree() no longer produces
     duplicate entries even when input list contains duplicates.

   - Issue #18878(6): sunau.open now supports the context management
     protocol.  Based on patches by Claudiu Popa and R. David Murray.

   - Issue #18909(7): Fix _tkinter.tkapp.interpaddr() on Windows 64-bit,
     don’t cast 64-bit pointer to long (32 bits).

   - Issue #18876(8): The FileIO.mode attribute now better reflects the
     actual mode under which the file was opened.  Patch by Erik Bray.

   - Issue #16853(9): Add new selectors module.

   - Issue #18882(10): Add threading.main_thread() function.

   - Issue #18901(11): The sunau getparams method now returns a
     namedtuple rather than a plain tuple.  Patch by Claudiu Popa.

   - Issue #17487(12): The result of the wave getparams method now is
     pickleable again.  Patch by Claudiu Popa.

   - Issue #18756(13): os.urandom() now uses a lazily-opened persistent
     file descriptor, so as to avoid using many file descriptors when
     run in parallel from multiple threads.

   - Issue #18418(14): After fork(), reinit all threads states, not only
     active ones.  Patch by A. Jesse Jiryu Davis.

   - Issue #17974(15): Switch unittest from using getopt to using
     argparse.

   - Issue #11798(16): TestSuite now drops references to own tests after
     execution.

   - Issue #16611(17): http.cookie now correctly parses the ’secure’ and
     ’httponly’ cookie flags.

   - Issue #11973(18): Fix a problem in kevent.  The flags and fflags
     fields are now properly handled as unsigned.

   - Issue #18807(19): ‘pyvenv’ now takes a –copies argument allowing
     copies instead of symlinks even where symlinks are available and
     the default.

   - Issue #18538(20): ‘python -m dis’ now uses argparse for argument
     processing.  Patch by Michele Orrù.

   - Issue #18394(21): Close cgi.FieldStorage’s optional file.

   - Issue #17702(22): On error, os.environb now suppresses the
     exception context when raising a new KeyError with the original
     key.

   - Issue #16809(23): Fixed some tkinter incompabilities with Tcl/Tk
     8.6.

   - Issue #16809(24): Tkinter’s splitlist() and split() methods now
     accept Tcl_Obj argument.

   - Issue #18324(25): set_payload now correctly handles binary input.
     This also supersedes the previous fixes for #14360, #1717, and
     #16564.

   - Issue #18794(26): Add a fileno() method and a closed attribute to
     select.devpoll objects.

   - Issue #17119(27): Fixed integer overflows when processing large
     strings and tuples in the tkinter module.

   - Issue #18747(28): Re-seed OpenSSL’s pseudo-random number generator
     after fork.  A pthread_atfork() parent handler is used to seed the
     PRNG with pid, time and some stack data.

   - Issue #8865(29): Concurrent invocation of select.poll.poll() now
     raises a RuntimeError exception.  Patch by Christian Schubert.

   - Issue #18777(30): The ssl module now uses the new CRYPTO_THREADID
     API of OpenSSL 1.0.0+ instead of the deprecated CRYPTO id callback
     function.

   - Issue #18768(31): Correct doc string of RAND_edg().  Patch by
     Vajrasky Kok.

   - Issue #18178(32): Fix ctypes on BSD. dlmalloc.c was compiled twice
     which broke malloc weak symbols.

   - Issue #18709(33): Fix CVE-2013-4238.  The SSL module now handles
     NULL bytes inside subjectAltName correctly.  Formerly the module
     has used OpenSSL’s GENERAL_NAME_print() function to get the string
     represention of ASN.1 strings for ‘rfc822Name’ (email), ‘dNSName’
     (DNS) and ‘uniformResourceIdentifier’ (URI).

   - Issue #18701(34): Remove support of old CPython versions (<3.0)
     from C code.

   - Issue #18756(35): Improve error reporting in os.urandom() when the
     failure is due to something else than /dev/urandom not existing
     (for example, exhausting the file descriptor limit).

   - Issue #18673(36): Add O_TMPFILE to os module.  O_TMPFILE requires
     Linux kernel 3.11 or newer.  It’s only defined on system with 3.11
     uapi headers, too.

   - Issue #18532(37): Change the builtin hash algorithms’ names to
     lower case names as promised by hashlib’s documentation.

   - Issue #8713(38): add new spwan and forkserver start methods, and
     new functions get_all_start_methods, get_start_method, and
     set_start_method, to multiprocessing.

   - Issue #18405(39): Improve the entropy of crypt.mksalt().

   - Issue #12015(40): The tempfile module now uses a suffix of 8 random
     characters instead of 6, to reduce the risk of filename collision.
     The entropy was reduced when uppercase letters were removed from
     the charset used to generate random characters.

   - Issue #18585(41): Add *note textwrap.shorten(): 4ee. to collapse
     and truncate a piece of text to a given length.

   - Issue #18598(42): Tweak exception message for
     importlib.import_module() to include the module name when a key
     argument is missing.

   - Issue #19151(43): Fix docstring and use of
     _get_supported_file_loaders() to reflect 2-tuples.

   - Issue #19152(44): Add ExtensionFileLoader.get_filename().

   - Issue #18676(45): Change ’positive’ to ’non-negative’ in queue.py
     put and get docstrings and ValueError messages.  Patch by Zhongyue
     Luo

   - Fix refcounting issue with extension types in tkinter.

   - Issue #8112(46): xlmrpc.server’s DocXMLRPCServer server no longer
     raises an error if methods have annotations; it now correctly
     displays the annotations.

   - Issue #18600(47): Added policy argument to
     email.message.Message.as_string, and as_bytes and __bytes__ methods
     to Message.

   - Issue #18671(48): Output more information when logging exceptions
     occur.

   - Issue #18621(49): Prevent the site module’s patched builtins from
     keeping too many references alive for too long.

   - Issue #4885(50): Add weakref support to mmap objects.  Patch by
     Valerie Lambert.

   - Issue #8860(51): Fixed rounding in timedelta constructor.

   - Issue #18849(52): Fixed a Windows-specific tempfile bug where
     collision with an existing directory caused mkstemp and related
     APIs to fail instead of retrying.  Report and fix by Vlad
     Shcherbina.

   - Issue #18920(53): argparse’s default destination for the version
     action (-v, –version) has also been changed to stdout, to match the
     Python executable.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/18808

   (2) https://bugs.python.org/18458

   (3) https://bugs.python.org/18852

   (4) https://bugs.python.org/18672

   (5) https://bugs.python.org/18830

   (6) https://bugs.python.org/18878

   (7) https://bugs.python.org/18909

   (8) https://bugs.python.org/18876

   (9) https://bugs.python.org/16853

   (10) https://bugs.python.org/18882

   (11) https://bugs.python.org/18901

   (12) https://bugs.python.org/17487

   (13) https://bugs.python.org/18756

   (14) https://bugs.python.org/18418

   (15) https://bugs.python.org/17974

   (16) https://bugs.python.org/11798

   (17) https://bugs.python.org/16611

   (18) https://bugs.python.org/11973

   (19) https://bugs.python.org/18807

   (20) https://bugs.python.org/18538

   (21) https://bugs.python.org/18394

   (22) https://bugs.python.org/17702

   (23) https://bugs.python.org/16809

   (24) https://bugs.python.org/16809

   (25) https://bugs.python.org/18324

   (26) https://bugs.python.org/18794

   (27) https://bugs.python.org/17119

   (28) https://bugs.python.org/18747

   (29) https://bugs.python.org/8865

   (30) https://bugs.python.org/18777

   (31) https://bugs.python.org/18768

   (32) https://bugs.python.org/18178

   (33) https://bugs.python.org/18709

   (34) https://bugs.python.org/18701

   (35) https://bugs.python.org/18756

   (36) https://bugs.python.org/18673

   (37) https://bugs.python.org/18532

   (38) https://bugs.python.org/8713

   (39) https://bugs.python.org/18405

   (40) https://bugs.python.org/12015

   (41) https://bugs.python.org/18585

   (42) https://bugs.python.org/18598

   (43) https://bugs.python.org/19151

   (44) https://bugs.python.org/19152

   (45) https://bugs.python.org/18676

   (46) https://bugs.python.org/8112

   (47) https://bugs.python.org/18600

   (48) https://bugs.python.org/18671

   (49) https://bugs.python.org/18621

   (50) https://bugs.python.org/4885

   (51) https://bugs.python.org/8860

   (52) https://bugs.python.org/18849

   (53) https://bugs.python.org/18920


File: python.info,  Node: Tests<15>,  Next: IDLE<12>,  Prev: Library<24>,  Up: Python 3 4 0 Alpha 2

1.16.26.3 Tests
...............

   - Issue #18623(1): Factor out the _SuppressCoreFiles context manager
     into test.support.  Patch by Valerie Lambert.

   - Issue #12037(2): Fix test_email for desktop Windows.

   - Issue #15507(3): test_subprocess’s test_send_signal could fail if
     the test runner were run in an environment where the process
     inherited an ignore setting for SIGINT. Restore the SIGINT handler
     to the desired KeyboardInterrupt raising one during that test.

   - Issue #16799(4): Switched from getopt to argparse style in
     regrtest’s argument parsing.  Added more tests for regrtest’s
     argument parsing.

   - Issue #18792(5): Use "127.0.0.1" or "::1" instead of "localhost" as
     much as possible, since "localhost" goes through a DNS lookup under
     recent Windows versions.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/18623

   (2) https://bugs.python.org/12037

   (3) https://bugs.python.org/15507

   (4) https://bugs.python.org/16799

   (5) https://bugs.python.org/18792


File: python.info,  Node: IDLE<12>,  Next: Documentation<14>,  Prev: Tests<15>,  Up: Python 3 4 0 Alpha 2

1.16.26.4 IDLE
..............

   - Issue #18489(1): Add tests for SearchEngine.  Original patch by
     Phil Webster.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/18489


File: python.info,  Node: Documentation<14>,  Next: Build<19>,  Prev: IDLE<12>,  Up: Python 3 4 0 Alpha 2

1.16.26.5 Documentation
.......................

   - Issue #18743(1): Fix references to non-existant "StringIO" module.

   - Issue #18783(2): Removed existing mentions of Python long type in
     docstrings, error messages and comments.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/18743

   (2) https://bugs.python.org/18783


File: python.info,  Node: Build<19>,  Next: Tools/Demos<12>,  Prev: Documentation<14>,  Up: Python 3 4 0 Alpha 2

1.16.26.6 Build
...............

   - Issue #1584(1): Provide configure options to override default
     search paths for Tcl and Tk when building _tkinter.

   - Issue #15663(2): Tcl/Tk 8.5.14 is now included with the OS X 10.6+
     64-/32-bit installer.  It is no longer necessary to install a
     third-party version of Tcl/Tk 8.5 to work around the problems in
     the Apple-supplied Tcl/Tk 8.5 shipped in OS X 10.6 and later
     releases.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/1584

   (2) https://bugs.python.org/15663


File: python.info,  Node: Tools/Demos<12>,  Prev: Build<19>,  Up: Python 3 4 0 Alpha 2

1.16.26.7 Tools/Demos
.....................

   - Issue #18922(1): Now The Lib/smtpd.py and Tools/i18n/msgfmt.py
     scripts write their version strings to stdout, and not to sderr.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/18922


File: python.info,  Node: Python 3 4 0 Alpha 1,  Prev: Python 3 4 0 Alpha 2,  Up: Changelog

1.16.27 Python 3.4.0 Alpha 1
----------------------------

Release date: 2013-08-03

* Menu:

* Core and Builtins: Core and Builtins<24>. 
* Library: Library<25>. 
* IDLE: IDLE<13>. 
* Tests: Tests<16>. 
* Build: Build<20>. 
* C-API: C-API<2>. 
* Documentation: Documentation<15>. 
* Tools/Demos: Tools/Demos<13>. 
* Windows: Windows<6>. 


File: python.info,  Node: Core and Builtins<24>,  Next: Library<25>,  Up: Python 3 4 0 Alpha 1

1.16.27.1 Core and Builtins
...........................

   - Issue #16741(1): Fix an error reporting in int().

   - Issue #17899(2): Fix rare file descriptor leak in os.listdir().

   - Issue #10241(3): Clear extension module dict copies at interpreter
     shutdown.  Patch by Neil Schemenauer, minimally modified.

   - Issue #9035(4): ismount now recognises volumes mounted below a
     drive root on Windows.  Original patch by Atsuo Ishimoto.

   - Issue #18214(5): Improve finalization of Python modules to avoid
     setting their globals to None, in most cases.

   - Issue #18112(6): PEP 442 implementation (safe object finalization).

   - Issue #18552(7): Check return value of PyArena_AddPyObject() in
     obj2ast_object().

   - Issue #18560(8): Fix potential NULL pointer dereference in sum().

   - Issue #18520(9): Add a new PyStructSequence_InitType2() function,
     same than PyStructSequence_InitType() except that it has a return
     value (0 on success, -1 on error).

   - Issue #15905(10): Fix theoretical buffer overflow in handling of
     sys.argv[0], prefix and exec_prefix if the operation system does
     not obey MAXPATHLEN.

   - Issue #18408(11): Fix many various bugs in code handling errors,
     especially on memory allocation failure (MemoryError).

   - Issue #18344(12): Fix potential ref-leaks in
     _bufferedreader_read_all().

   - Issue #18342(13): Use the repr of a module name when an import
     fails when using ‘from ... import ...’.

   - Issue #17872(14): Fix a segfault in marshal.load() when input
     stream returns more bytes than requested.

   - Issue #18338(15): ‘python --version’ now prints version string to
     stdout, and not to stderr.  Patch by Berker Peksag and Michael
     Dickens.

   - Issue #18426(16): Fix NULL pointer dereference in C extension
     import when PyModule_GetDef() returns an error.

   - Issue #17206(17): On Windows, increase the stack size from 2 MB to
     4.2 MB to fix a stack overflow in the marshal module (fix a crash
     in test_marshal).  Patch written by Jeremy Kloth.

   - Issue #3329(18): Implement the PEP 445: Add new APIs to customize
     Python memory allocators.

   - Issue #18328(19): Reorder ops in PyThreadState_Delete*() functions.
     Now the tstate is first removed from TLS and then deallocated.

   - Issue #13483(20): Use VirtualAlloc in obmalloc on Windows.

   - Issue #18184(21): PyUnicode_FromFormat() and
     PyUnicode_FromFormatV() now raise OverflowError when an argument of
     %c format is out of range.

   - Issue #18111(22): The min() and max() functions now support a
     default argument to be returned instead of raising a ValueError on
     an empty sequence.  (Contributed by Julian Berman.)

   - Issue #18137(23): Detect integer overflow on precision in
     float.__format__() and complex.__format__().

   - Issue #18183(24): Fix various unicode operations on strings with
     large unicode codepoints.

   - Issue #18180(25): Fix ref leak in _PyImport_GetDynLoadWindows().

   - Issue #18038(26): SyntaxError raised during compilation sources
     with illegal encoding now always contains an encoding name.

   - Issue #17931(27): Resolve confusion on Windows between pids and
     process handles.

   - Tweak the exception message when the magic number or size value in
     a bytecode file is truncated.

   - Issue #17932(28): Fix an integer overflow issue on Windows 64-bit
     in iterators: change the C type of seqiterobject.it_index from long
     to Py_ssize_t.

   - Issue #18065(29): Don’t set __path__ to the package name for frozen
     packages.

   - Issue #18088(30): When reloading a module, unconditionally reset
     all relevant attributes on the module (e.g.  __name__, __loader__,
     __package__, __file__, __cached__).

   - Issue #17937(31): Try harder to collect cyclic garbage at shutdown.

   - Issue #12370(32): Prevent class bodies from interfering with the
     __class__ closure.

   - Issue #17644(33): Fix a crash in str.format when curly braces are
     used in square brackets.

   - Issue #17237(34): Fix crash in the ASCII decoder on m68k.

   - Issue #17927(35): Frame objects kept arguments alive if they had
     been copied into a cell, even if the cell was cleared.

   - Issue #1545463(36): At shutdown, defer finalization of codec
     modules so that stderr remains usable.

   - Issue #7330(37): Implement width and precision (ex: "%5.3s") for
     the format string of PyUnicode_FromFormat() function, original
     patch written by Ysj Ray.

   - Issue #1545463(38): Global variables caught in reference cycles are
     now garbage-collected at shutdown.

   - Issue #17094(39): Clear stale thread states after fork().  Note
     that this is a potentially disruptive change since it may release
     some system resources which would otherwise remain perpetually
     alive (e.g.  database connections kept in thread-local storage).

   - Issue #17408(40): Avoid using an obsolete instance of the copyreg
     module when the interpreter is shutdown and then started again.

   - Issue #5845(41): Enable tab-completion in the interactive
     interpreter by default, thanks to a new sys.__interactivehook__.

   - Issue #17115(42),17116: Module initialization now includes setting
     __package__ and __loader__ attributes to None.

   - Issue #17853(43): Ensure locals of a class that shadow free
     variables always win over the closures.

   - Issue #17863(44): In the interactive console, don’t loop forever if
     the encoding can’t be fetched from stdin.

   - Issue #17867(45): Raise an ImportError if __import__ is not found
     in __builtins__.

   - Issue #18698(46): Ensure importlib.reload() returns the module out
     of sys.modules.

   - Issue #17857(47): Prevent build failures with pre-3.5.0 versions of
     sqlite3, such as was shipped with Centos 5 and Mac OS X 10.4.

   - Issue #17413(48): sys.settrace callbacks were being passed a string
     instead of an exception instance for the ’value’ element of the arg
     tuple if the exception originated from C code; now an exception
     instance is always provided.

   - Issue #17782(49): Fix undefined behaviour on platforms where
     ‘struct timespec’’s "tv_nsec" member is not a C long.

   - Issue #17722(50): When looking up __round__, resolve descriptors.

   - Issue #16061(51): Speed up str.replace() for replacing 1-character
     strings.

   - Issue #17715(52): Fix segmentation fault from raising an exception
     in a __trunc__ method.

   - Issue #17643(53): Add __callback__ attribute to weakref.ref.

   - Issue #16447(54): Fixed potential segmentation fault when setting
     __name__ on a class.

   - Issue #17669(55): Fix crash involving finalization of generators
     using yield from.

   - Issue #14439(56): Python now prints the traceback on runpy failure
     at startup.

   - Issue #17469(57): Fix _Py_GetAllocatedBlocks() and
     sys.getallocatedblocks() when running on valgrind.

   - Issue #17619(58): Make input() check for Ctrl-C correctly on
     Windows.

   - Issue #17357(59): Add missing verbosity messages for -v/-vv that
     were lost during the importlib transition.

   - Issue #17610(60): Don’t rely on non-standard behavior of the C
     qsort() function.

   - Issue #17323(61): The "[X refs, Y blocks]" printed by debug builds
     has been disabled by default.  It can be re-enabled with the ‘-X
     showrefcount’ option.

   - Issue #17328(62): Fix possible refleak in dict.setdefault.

   - Issue #17275(63): Corrected class name in init error messages of
     the C version of BufferedWriter and BufferedRandom.

   - Issue #7963(64): Fixed misleading error message that issued when
     object is called without arguments.

   - Issue #8745(65): Small speed up zipimport on Windows.  Patch by
     Catalin Iacob.

   - Issue #5308(66): Raise ValueError when marshalling too large object
     (a sequence with size >= 2**31), instead of producing illegal
     marshal data.

   - Issue #12983(67): Bytes literals with invalid ‘\x’ escape now raise
     a SyntaxError and a full traceback including line number.

   - Issue #16967(68): In function definition, evaluate positional
     defaults before keyword-only defaults.

   - Issue #17173(69): Remove uses of locale-dependent C functions
     (isalpha() etc.)  in the interpreter.

   - Issue #17137(70): When a Unicode string is resized, the internal
     wide character string (wstr) format is now cleared.

   - Issue #17043(71): The unicode-internal decoder no longer read past
     the end of input buffer.

   - Issue #17098(72): All modules now have __loader__ set even if they
     pre-exist the bootstrapping of importlib.

   - Issue #16979(73): Fix error handling bugs in the
     unicode-escape-decode decoder.

   - Issue #16772(74): The base argument to the int constructor no
     longer accepts floats, or other non-integer objects with an __int__
     method.  Objects with an __index__ method are now accepted.

   - Issue #10156(75): In the interpreter’s initialization phase,
     unicode globals are now initialized dynamically as needed.

   - Issue #16980(76): Fix processing of escaped non-ascii bytes in the
     unicode-escape-decode decoder.

   - Issue #16975(77): Fix error handling bug in the escape-decode bytes
     decoder.

   - Issue #14850(78): Now a charmap decoder treats U+FFFE as "undefined
     mapping" in any mapping, not only in a string.

   - Issue #16613(79): Add `m' argument to
     ‘collections.Chainmap.new_child’ to allow the new child map to be
     specified explicitly.

   - Issue #16730(80): importlib.machinery.FileFinder now no longers
     raises an exception when trying to populate its cache and it finds
     out the directory is unreadable or has turned into a file.
     Reported and diagnosed by David Pritchard.

   - Issue #16906(81): Fix a logic error that prevented most static
     strings from being cleared.

   - Issue #11461(82): Fix the incremental UTF-16 decoder.  Original
     patch by Amaury Forgeot d’Arc.

   - Issue #16856(83): Fix a segmentation fault from calling repr() on a
     dict with a key whose repr raise an exception.

   - Issue #16367(84): Fix FileIO.readall() on Windows for files larger
     than 2 GB.

   - Issue #16761(85): Calling int() with base argument only now raises
     TypeError.

   - Issue #16759(86): Support the full DWORD (unsigned long) range in
     Reg2Py when retrieving a REG_DWORD value.  This corrects functions
     like winreg.QueryValueEx that may have been returning truncated
     values.

   - Issue #14420(87): Support the full DWORD (unsigned long) range in
     Py2Reg when passed a REG_DWORD value.  Fixes OverflowError in
     winreg.SetValueEx.

   - Issue #11939(88): Set the st_dev attribute of stat_result to allow
     Windows to take advantage of the
     os.path.samefile/sameopenfile/samestat implementations used by
     other platforms.

   - Issue #16772(89): The int() constructor’s second argument (base) no
     longer accepts non integer values.  Consistent with the behavior in
     Python 2.

   - Issue #14470(90): Remove w9xpopen support per PEP 11.

   - Issue #9856(91): Replace deprecation warning with raising TypeError
     in object.__format__.  Patch by Florent Xicluna.

   - Issue #16597(92): In buffered and text IO, call close() on the
     underlying stream if invoking flush() fails.

   - Issue #16722(93): In the bytes() constructor, try to call __bytes__
     on the argument before __index__.

   - Issue #16421(94): loading multiple modules from one shared object
     is now handled correctly (previously, the first module loaded from
     that file was silently returned).  Patch by Václav Šmilauer.

   - Issue #16602(95): When a weakref’s target was part of a long
     deallocation chain, the object could remain reachable through its
     weakref even though its refcount had dropped to zero.

   - Issue #16495(96): Remove extraneous NULL encoding check from
     bytes_decode().

   - Issue #16619(97): Create NameConstant AST class to represent None,
     True, and False literals.  As a result, these constants are never
     loaded at runtime from builtins.

   - Issue #16455(98): On FreeBSD and Solaris, if the locale is C, the
     ASCII/surrogateescape codec is now used (instead of the locale
     encoding) to decode the command line arguments.  This change fixes
     inconsistencies with os.fsencode() and os.fsdecode(), because these
     operating systems announce an ASCII locale encoding, but actually
     use the ISO-8859-1 encoding in practice.

   - Issue #16562(99): Optimize dict equality testing.  Patch by Serhiy
     Storchaka.

   - Issue #16588(100): Silence unused-but-set warnings in
     Python/thread_pthread

   - Issue #16592(101): stringlib_bytes_join doesn’t raise MemoryError
     on allocation failure.

   - Issue #16546(102): Fix: ast.YieldFrom argument is now mandatory.

   - Issue #16514(103): Fix regression causing a traceback when
     sys.path[0] is None (actually, any non-string or non-bytes type).

   - Issue #16306(104): Fix multiple error messages when unknown command
     line parameters where passed to the interpreter.  Patch by Hieu
     Nguyen.

   - Issue #16215(105): Fix potential double memory free in
     str.replace().  Patch by Serhiy Storchaka.

   - Issue #16290(106): A float return value from the __complex__
     special method is no longer accepted in the complex() constructor.

   - Issue #16416(107): On Mac OS X, operating system data are now
     always encoded/decoded to/from UTF-8/surrogateescape, instead of
     the locale encoding (which may be ASCII if no locale environment
     variable is set), to avoid inconsistencies with os.fsencode() and
     os.fsdecode() functions which are already using
     UTF-8/surrogateescape.

   - Issue #16453(108): Fix equality testing of dead weakref objects.

   - Issue #9535(109): Fix pending signals that have been received but
     not yet handled by Python to not persist after os.fork() in the
     child process.

   - Issue #14794(110): Fix slice.indices to return correct results for
     huge values, rather than raising OverflowError.

   - Issue #15001(111): fix segfault on "del sys.modules[’__main__’]".
     Patch by Victor Stinner.

   - Issue #8271(112): the utf-8 decoder now outputs the correct number
     of U+FFFD characters when used with the ’replace’ error handler on
     invalid utf-8 sequences.  Patch by Serhiy Storchaka, tests by Ezio
     Melotti.

   - Issue #5765(113): Apply a hard recursion limit in the compiler
     instead of blowing the stack and segfaulting.  Initial patch by
     Andrea Griffini.

   - Issue #16402(114): When slicing a range, fix shadowing of
     exceptions from __index__.

   - Issue #16336(115): fix input checking in the surrogatepass error
     handler.  Patch by Serhiy Storchaka.

   - Issue #8401(116): assigning an int to a bytearray slice (e.g.
     b[3:4] = 5) now raises an error.

   - Issue #7317(117): Display full tracebacks when an error occurs
     asynchronously.  Patch by Alon Horev with update by Alexey
     Kachayev.

   - Issue #16309(118): Make PYTHONPATH="" behavior the same as if
     PYTHONPATH not set at all.

   - Issue #10189(119): Improve the error reporting of SyntaxErrors
     related to global and nonlocal statements.

   - Fix segfaults on setting __qualname__ on builtin types and
     attempting to delete it on any type.

   - Issue #14625(120): Rewrite the UTF-32 decoder.  It is now 3x to 4x
     faster.  Patch written by Serhiy Storchaka.

   - Issue #16345(121): Fix an infinite loop when ‘fromkeys’ on a dict
     subclass received a nonempty dict from the constructor.

   - Issue #16271(122): Fix strange bugs that resulted from __qualname__
     appearing in a class’s __dict__ and on type.

   - Issue #12805(123): Make bytes.join and bytearray.join faster when
     the separator is empty.  Patch by Serhiy Storchaka.

   - Issue #6074(124): Ensure cached bytecode files can always be
     updated by the user that created them, even when the source file is
     read-only.

   - Issue #15958(125): bytes.join and bytearray.join now accept
     arbitrary buffer objects.

   - Issue #14783(126): Improve int() docstring and switch docstrings
     for str(), range(), and slice() to use multi-line signatures.

   - Issue #16160(127): Subclass support now works for
     types.SimpleNamespace.

   - Issue #16148(128): Implement PEP 424, adding operator.length_hint
     and PyObject_LengthHint.

   - Upgrade Unicode data (UCD) to version 6.2.

   - Issue #15379(129): Fix passing of non-BMP characters as integers
     for the charmap decoder (already working as unicode strings).
     Patch by Serhiy Storchaka.

   - Issue #15144(130): Fix possible integer overflow when handling
     pointers as integer values, by using ‘Py_uintptr_t’ instead of
     ‘size_t’.  Patch by Serhiy Storchaka.

   - Issue #15965(131): Explicitly cast ‘AT_FDCWD’ as (int).  Required
     on Solaris 10 (which defines ‘AT_FDCWD’ as ‘0xffd19553’), harmless
     on other platforms.

   - Issue #15839(132): Convert SystemErrors in *note super(): 56a. to
     RuntimeErrors.

   - Issue #15448(133): Buffered IO now frees the buffer when closed,
     instead of when deallocating.

   - Issue #15846(134): Fix SystemError which happened when using *note
     ast.parse(): bb4. in an exception handler on code with syntax
     errors.

   - Issue #15897(135): zipimport.c doesn’t check return value of
     fseek().  Patch by Felipe Cruz.

   - Issue #15801(136): Make sure mappings passed to ’%’ formatting are
     actually subscriptable.

   - Issue #15111(137): __import__ should propagate ImportError when
     raised as a side-effect of a module triggered from using fromlist.

   - Issue #15022(138): Add pickle and comparison support to
     types.SimpleNamespace.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/16741

   (2) https://bugs.python.org/17899

   (3) https://bugs.python.org/10241

   (4) https://bugs.python.org/9035

   (5) https://bugs.python.org/18214

   (6) https://bugs.python.org/18112

   (7) https://bugs.python.org/18552

   (8) https://bugs.python.org/18560

   (9) https://bugs.python.org/18520

   (10) https://bugs.python.org/15905

   (11) https://bugs.python.org/18408

   (12) https://bugs.python.org/18344

   (13) https://bugs.python.org/18342

   (14) https://bugs.python.org/17872

   (15) https://bugs.python.org/18338

   (16) https://bugs.python.org/18426

   (17) https://bugs.python.org/17206

   (18) https://bugs.python.org/3329

   (19) https://bugs.python.org/18328

   (20) https://bugs.python.org/13483

   (21) https://bugs.python.org/18184

   (22) https://bugs.python.org/18111

   (23) https://bugs.python.org/18137

   (24) https://bugs.python.org/18183

   (25) https://bugs.python.org/18180

   (26) https://bugs.python.org/18038

   (27) https://bugs.python.org/17931

   (28) https://bugs.python.org/17932

   (29) https://bugs.python.org/18065

   (30) https://bugs.python.org/18088

   (31) https://bugs.python.org/17937

   (32) https://bugs.python.org/12370

   (33) https://bugs.python.org/17644

   (34) https://bugs.python.org/17237

   (35) https://bugs.python.org/17927

   (36) https://bugs.python.org/1545463

   (37) https://bugs.python.org/7330

   (38) https://bugs.python.org/1545463

   (39) https://bugs.python.org/17094

   (40) https://bugs.python.org/17408

   (41) https://bugs.python.org/5845

   (42) https://bugs.python.org/17115

   (43) https://bugs.python.org/17853

   (44) https://bugs.python.org/17863

   (45) https://bugs.python.org/17867

   (46) https://bugs.python.org/18698

   (47) https://bugs.python.org/17857

   (48) https://bugs.python.org/17413

   (49) https://bugs.python.org/17782

   (50) https://bugs.python.org/17722

   (51) https://bugs.python.org/16061

   (52) https://bugs.python.org/17715

   (53) https://bugs.python.org/17643

   (54) https://bugs.python.org/16447

   (55) https://bugs.python.org/17669

   (56) https://bugs.python.org/14439

   (57) https://bugs.python.org/17469

   (58) https://bugs.python.org/17619

   (59) https://bugs.python.org/17357

   (60) https://bugs.python.org/17610

   (61) https://bugs.python.org/17323

   (62) https://bugs.python.org/17328

   (63) https://bugs.python.org/17275

   (64) https://bugs.python.org/7963

   (65) https://bugs.python.org/8745

   (66) https://bugs.python.org/5308

   (67) https://bugs.python.org/12983

   (68) https://bugs.python.org/16967

   (69) https://bugs.python.org/17173

   (70) https://bugs.python.org/17137

   (71) https://bugs.python.org/17043

   (72) https://bugs.python.org/17098

   (73) https://bugs.python.org/16979

   (74) https://bugs.python.org/16772

   (75) https://bugs.python.org/10156

   (76) https://bugs.python.org/16980

   (77) https://bugs.python.org/16975

   (78) https://bugs.python.org/14850

   (79) https://bugs.python.org/16613

   (80) https://bugs.python.org/16730

   (81) https://bugs.python.org/16906

   (82) https://bugs.python.org/11461

   (83) https://bugs.python.org/16856

   (84) https://bugs.python.org/16367

   (85) https://bugs.python.org/16761

   (86) https://bugs.python.org/16759

   (87) https://bugs.python.org/14420

   (88) https://bugs.python.org/11939

   (89) https://bugs.python.org/16772

   (90) https://bugs.python.org/14470

   (91) https://bugs.python.org/9856

   (92) https://bugs.python.org/16597

   (93) https://bugs.python.org/16722

   (94) https://bugs.python.org/16421

   (95) https://bugs.python.org/16602

   (96) https://bugs.python.org/16495

   (97) https://bugs.python.org/16619

   (98) https://bugs.python.org/16455

   (99) https://bugs.python.org/16562

   (100) https://bugs.python.org/16588

   (101) https://bugs.python.org/16592

   (102) https://bugs.python.org/16546

   (103) https://bugs.python.org/16514

   (104) https://bugs.python.org/16306

   (105) https://bugs.python.org/16215

   (106) https://bugs.python.org/16290

   (107) https://bugs.python.org/16416

   (108) https://bugs.python.org/16453

   (109) https://bugs.python.org/9535

   (110) https://bugs.python.org/14794

   (111) https://bugs.python.org/15001

   (112) https://bugs.python.org/8271

   (113) https://bugs.python.org/5765

   (114) https://bugs.python.org/16402

   (115) https://bugs.python.org/16336

   (116) https://bugs.python.org/8401

   (117) https://bugs.python.org/7317

   (118) https://bugs.python.org/16309

   (119) https://bugs.python.org/10189

   (120) https://bugs.python.org/14625

   (121) https://bugs.python.org/16345

   (122) https://bugs.python.org/16271

   (123) https://bugs.python.org/12805

   (124) https://bugs.python.org/6074

   (125) https://bugs.python.org/15958

   (126) https://bugs.python.org/14783

   (127) https://bugs.python.org/16160

   (128) https://bugs.python.org/16148

   (129) https://bugs.python.org/15379

   (130) https://bugs.python.org/15144

   (131) https://bugs.python.org/15965

   (132) https://bugs.python.org/15839

   (133) https://bugs.python.org/15448

   (134) https://bugs.python.org/15846

   (135) https://bugs.python.org/15897

   (136) https://bugs.python.org/15801

   (137) https://bugs.python.org/15111

   (138) https://bugs.python.org/15022


File: python.info,  Node: Library<25>,  Next: IDLE<13>,  Prev: Core and Builtins<24>,  Up: Python 3 4 0 Alpha 1

1.16.27.2 Library
.................

   - Issue #4331(1): Added functools.partialmethod (Initial patch by
     Alon Horev)

   - Issue #13461(2): Fix a crash in the TextIOWrapper.tell method on
     64-bit platforms.  Patch by Yogesh Chaudhari.

   - Issue #18681(3): Fix a NameError in importlib.reload() (noticed by
     Weizhao Li).

   - Issue #14323(4): Expanded the number of digits in the coefficients
     for the RGB – YIQ conversions so that they match the FCC NTSC
     versions.

   - Issue #17998(5): Fix an internal error in regular expression
     engine.

   - Issue #17557(6): Fix os.getgroups() to work with the modified
     behavior of getgroups(2) on OS X 10.8.  Original patch by Mateusz
     Lenik.

   - Issue #18608(7): Avoid keeping a strong reference to the locale
     module inside the _io module.

   - Issue #18619(8): Fix atexit leaking callbacks registered from
     sub-interpreters, and make it GC-aware.

   - Issue #15699(9): The readline module now uses PEP 3121-style module
     initialization, so as to reclaim allocated resources (Python
     callbacks) at shutdown.  Original patch by Robin Schreiber.

   - Issue #17616(10): wave.open now supports the context management
     protocol.

   - Issue #18599(11): Fix name attribute of _sha1.sha1() object.  It
     now returns ’SHA1’ instead of ’SHA’.

   - Issue #13266(12): Added inspect.unwrap to easily unravel
     __wrapped__ chains (initial patch by Daniel Urban and Aaron Iles)

   - Issue #18561(13): Skip name in ctypes’ _build_callargs() if name is
     NULL.

   - Issue #18559(14): Fix NULL pointer dereference error in _pickle
     module

   - Issue #18556(15): Check the return type of PyUnicode_AsWideChar()
     in ctype’s U_set().

   - Issue #17818(16): aifc.getparams now returns a namedtuple.

   - Issue #18549(17): Eliminate dead code in socket_ntohl()

   - Issue #18530(18): Remove additional stat call from
     posixpath.ismount.  Patch by Alex Gaynor.

   - Issue #18514(19): Fix unreachable Py_DECREF() call in
     PyCData_FromBaseObj()

   - Issue #9177(20): Calling read() or write() now raises ValueError,
     not AttributeError, on a closed SSL socket.  Patch by Senko Rasic.

   - Issue #18513(21): Fix behaviour of cmath.rect w.r.t.  signed zeros
     on OS X 10.8 + gcc.

   - Issue #18479(22): Changed venv Activate.ps1 to make deactivate a
     function, and removed Deactivate.ps1.

   - Issue #18480(23): Add missing call to PyType_Ready to the
     _elementtree extension.

   - Issue #17778(24): Fix test discovery for test_multiprocessing.
     (Patch by Zachary Ware.)

   - Issue #18393(25): The private module _gestalt and private functions
     platform._mac_ver_gestalt, platform._mac_ver_lookup and
     platform._bcd2str have been removed.  This does not affect the
     public interface of the platform module.

   - Issue #17482(26): functools.update_wrapper (and functools.wraps)
     now set the __wrapped__ attribute correctly even if the underlying
     function has a __wrapped__ attribute set.

   - Issue #18431(27): The new email header parser now decodes RFC2047
     encoded words in structured headers.

   - Issue #18432(28): The sched module’s queue method was incorrectly
     returning an iterator instead of a list.

   - Issue #18044(29): The new email header parser was mis-parsing
     encoded words where an encoded character immediately followed the
     ’?’ that follows the CTE character, resulting in a decoding
     failure.  They are now decoded correctly.

   - Issue #18101(30): Tcl.split() now process strings nested in a tuple
     as it do with byte strings.

   - Issue #18116(31): getpass was always getting an error when testing
     /dev/tty, and thus was always falling back to stdin, and would then
     raise an exception if stdin could not be used (such as /dev/null).
     It also leaked an open file.  All of these issues are now fixed.

   - Issue #17198(32): Fix a NameError in the dbm module.  Patch by
     Valentina Mukhamedzhanova.

   - Issue #18013(33): Fix cgi.FieldStorage to parse the W3C sample
     form.

   - Issue #18020(34): improve html.escape speed by an order of
     magnitude.  Patch by Matt Bryant.

   - Issue #18347(35): ElementTree’s html serializer now preserves the
     case of closing tags.

   - Issue #17261(36): Ensure multiprocessing’s proxies use proper
     address.

   - Issue #18343(37): faulthandler.register() now keeps the previous
     signal handler when the function is called twice, so
     faulthandler.unregister() restores correctly the original signal
     handler.

   - Issue #17097(38): Make multiprocessing ignore EINTR.

   - Issue #18339(39): Negative ints keys in unpickler.memo dict no
     longer cause a segfault inside the _pickle C extension.

   - Issue #18240(40): The HMAC module is no longer restricted to bytes
     and accepts any bytes-like object, e.g.  memoryview.  Original
     patch by Jonas Borgström.

   - Issue #18224(41): Removed pydoc script from created venv, as it
     causes problems on Windows and adds no value over and above python
     -m pydoc ...

   - Issue #18155(42): The csv module now correctly handles csv files
     that use a delimter character that has a special meaning in
     regexes, instead of throwing an exception.

   - Issue #14360(43): encode_quopri can now be successfully used as an
     encoder when constructing a MIMEApplication object.

   - Issue #11390(44): Add -o and -f command line options to the doctest
     CLI to specify doctest options (and convert it to using argparse).

   - Issue #18135(45): ssl.SSLSocket.write() now raises an OverflowError
     if the input string in longer than 2 gigabytes, and
     ssl.SSLContext.load_cert_chain() raises a ValueError if the
     password is longer than 2 gigabytes.  The ssl module does not
     support partial write.

   - Issue #11016(46): Add C implementation of the stat module as _stat.

   - Issue #18248(47): Fix libffi build on AIX.

   - Issue #18259(48): Declare sethostname in socketmodule.c for AIX

   - Issue #18147(49): Add diagnostic functions to ssl.SSLContext().
     get_ca_list() lists all loaded CA certificates and
     cert_store_stats() returns amount of loaded X.509 certs, X.509 CA
     certs and CRLs.

   - Issue #18167(50): cgi.FieldStorage no longer fails to handle
     multipart/form-data when ‘\r\n’ appears at end of 65535 bytes
     without other newlines.

   - Issue #18076(51): Introduce importlib.util.decode_source().

   - Issue #18357(52): add tests for dictview set difference.  Patch by
     Fraser Tweedale.

   - importlib.abc.SourceLoader.get_source() no longer changes
     SyntaxError or UnicodeDecodeError into ImportError.

   - Issue #18058(53), 18057: Make the namespace package loader meet the
     importlib.abc.InspectLoader ABC, allowing for namespace packages to
     work with runpy.

   - Issue #17177(54): The imp module is pending deprecation.

   - subprocess: Prevent a possible double close of parent pipe fds when
     the subprocess exec runs into an error.  Prevent a regular
     multi-close of the /dev/null fd when any of stdin, stdout and
     stderr was set to DEVNULL.

   - Issue #18194(55): Introduce importlib.util.cache_from_source() and
     source_from_cache() while documenting the equivalent functions in
     imp as deprecated.

   - Issue #17907(56): Document imp.new_module() as deprecated in favour
     of types.ModuleType.

   - Issue #18192(57): Introduce importlib.util.MAGIC_NUMBER and
     document as deprecated imp.get_magic().

   - Issue #18149(58): Add filecmp.clear_cache() to manually clear the
     filecmp cache.  Patch by Mark Levitt

   - Issue #18193(59): Add importlib.reload().

   - Issue #18157(60): Stop using imp.load_module() in pydoc.

   - Issue #16102(61): Make uuid._netbios_getnode() work again on Python
     3.

   - Issue #17134(62): Add ssl.enum_cert_store() as interface to
     Windows’ cert store.

   - Issue #18143(63): Implement ssl.get_default_verify_paths() in order
     to debug the default locations for cafile and capath.

   - Issue #17314(64): Move multiprocessing.forking over to importlib.

   - Issue #11959(65): SMTPServer and SMTPChannel now take an optional
     map, use of which avoids affecting global state.

   - Issue #18109(66): os.uname() now decodes fields from the locale
     encoding, and socket.gethostname() now decodes the hostname from
     the locale encoding, instead of using the UTF-8 encoding in strict
     mode.

   - Issue #18089(67): Implement
     importlib.abc.InspectLoader.load_module.

   - Issue #18088(68): Introduce importlib.abc.Loader.init_module_attrs
     for setting module attributes.  Leads to the pending deprecation of
     importlib.util.module_for_loader.

   - Issue #17403(69): urllib.parse.robotparser normalizes the urls
     before adding to ruleline.  This helps in handling certain types
     invalid urls in a conservative manner.  Patch contributed by Mher
     Movsisyan.

   - Issue #18070(70): Have importlib.util.module_for_loader() set
     attributes unconditionally in order to properly support reloading.

   - Added importlib.util.module_to_load to return a context manager to
     provide the proper module object to load.

   - Issue #18025(71): Fixed a segfault in io.BufferedIOBase.readinto()
     when raw stream’s read() returns more bytes than requested.

   - Issue #18011(72): As was originally intended, base64.b32decode()
     now raises a binascii.Error if there are non-b32-alphabet
     characters present in the input string, instead of a TypeError.

   - Issue #18072(73): Implement importlib.abc.InspectLoader.get_code()
     and importlib.abc.ExecutionLoader.get_code().

   - Issue #8240(74): Set the SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER flag
     on SSL sockets.

   - Issue #17269(75): Workaround for socket.getaddrinfo crash on MacOS
     X with port None or "0" and flags AI_NUMERICSERV.

   - Issue #16986(76): ElementTree now correctly works with string input
     when the internal XML encoding is not UTF-8 or US-ASCII.

   - Issue #17996(77): socket module now exposes AF_LINK constant on BSD
     and OSX.

   - Issue #17900(78): Allowed pickling of recursive OrderedDicts.
     Decreased pickled size and pickling time.

   - Issue #17914(79): Add os.cpu_count().  Patch by Yogesh Chaudhari,
     based on an initial patch by Trent Nelson.

   - Issue #17812(80): Fixed quadratic complexity of base64.b32encode().
     Optimize base64.b32encode() and base64.b32decode() (speed up to
     3x).

   - Issue #17980(81): Fix possible abuse of ssl.match_hostname() for
     denial of service using certificates with many wildcards
     (CVE-2013-2099).

   - Issue #15758(82): Fix FileIO.readall() so it no longer has O(n**2)
     complexity.

   - Issue #14596(83): The struct.Struct() objects now use a more
     compact implementation.

   - Issue #17981(84): logging’s SysLogHandler now closes the socket
     when it catches socket OSErrors.

   - Issue #17964(85): Fix os.sysconf(): the return type of the C
     sysconf() function is long, not int.

   - Fix typos in the multiprocessing module.

   - Issue #17754(86): Make ctypes.util.find_library() independent of
     the locale.

   - Issue #17968(87): Fix memory leak in os.listxattr().

   - Issue #17606(88): Fixed support of encoded byte strings in the
     XMLGenerator characters() and ignorableWhitespace() methods.
     Original patch by Sebastian Ortiz Vasquez.

   - Issue #17732(89): Ignore distutils.cfg options pertaining to
     install paths if a virtual environment is active.

   - Issue #17915(90): Fix interoperability of xml.sax with file objects
     returned by codecs.open().

   - Issue #16601(91): Restarting iteration over tarfile really restarts
     rather than continuing from where it left off.  Patch by Michael
     Birtwell.

   - Issue #17289(92): The readline module now plays nicer with external
     modules or applications changing the
     rl_completer_word_break_characters global variable.  Initial patch
     by Bradley Froehle.

   - Issue #12181(93): select module: Fix struct kevent definition on
     OpenBSD 64-bit platforms.  Patch by Federico Schwindt.

   - Issue #11816(94): multiple improvements to the dis module:
     get_instructions generator, ability to redirect output to a file,
     Bytecode and Instruction abstractions.  Patch by Nick Coghlan, Ryan
     Kelly and Thomas Kluyver.

   - Issue #13831(95): Embed stringification of remote traceback in
     local traceback raised when pool task raises an exception.

   - Issue #15528(96): Add weakref.finalize to support finalization
     using weakref callbacks.

   - Issue #14173(97): Avoid crashing when reading a signal handler
     during interpreter shutdown.

   - Issue #15902(98): Fix imp.load_module() accepting None as a file
     when loading an extension module.

   - Issue #13721(99): SSLSocket.getpeercert() and
     SSLSocket.do_handshake() now raise an OSError with ENOTCONN,
     instead of an AttributeError, when the SSLSocket is not connected.

   - Issue #14679(100): add an __all__ (that contains only HTMLParser)
     to html.parser.

   - Issue #17802(101): Fix an UnboundLocalError in html.parser.
     Initial tests by Thomas Barlow.

   - Issue #17358(102): Modules loaded by imp.load_source() and
     load_compiled() (and by extension load_module()) now have a better
     chance of working when reloaded.

   - Issue #17804(103): New function ‘struct.iter_unpack’ allows for
     streaming struct unpacking.

   - Issue #17830(104): When keyword.py is used to update a keyword
     file, it now preserves the line endings of the original file.

   - Issue #17272(105): Making the urllib.request’s Request.full_url a
     descriptor.  Fixes bugs with assignment to full_url.  Patch by
     Demian Brecht.

   - Issue #17353(106): Plistlib emitted empty data tags with deeply
     nested datastructures

   - Issue #11714(107): Use ’with’ statements to assure a Semaphore
     releases a condition variable.  Original patch by Thomas Rachel.

   - Issue #16624(108): *note subprocess.check_output: 4db. now accepts
     an *note input: 8d7. argument, allowing the subprocess’s stdin to
     be provided as a (byte) string.  Patch by Zack Weinberg.

   - Issue #17795(109): Reverted backwards-incompatible change in
     SysLogHandler with Unix domain sockets.

   - Issue #16694(110): Add a pure Python implementation of the operator
     module.  Patch by Zachary Ware.

   - Issue #11182(111): remove the unused and undocumented pydoc.Scanner
     class.  Patch by Martin Morrison.

   - Issue #17741(112): Add ElementTree.XMLPullParser, an event-driven
     parser for non-blocking applications.

   - Issue #17555(113): Fix ForkAwareThreadLock so that size of after
     fork registry does not grow exponentially with generation of
     process.

   - Issue #17707(114): fix regression in multiprocessing.Queue’s get()
     method where it did not block for short timeouts.

   - Issue #17720(115): Fix the Python implementation of
     pickle.Unpickler to correctly process the APPENDS opcode when it is
     used on non-list objects.

   - Issue #17012(116): shutil.which() no longer falls back to the PATH
     environment variable if an empty path argument is specified.  Patch
     by Serhiy Storchaka.

   - Issue #17710(117): Fix pickle raising a SystemError on bogus input.

   - Issue #17341(118): Include the invalid name in the error messages
     from re about invalid group names.

   - Issue #17702(119): os.environ now raises KeyError with the original
     environment variable name (str on UNIX), instead of using the
     encoded name (bytes on UNIX).

   - Issue #16163(120): Make the importlib based version of
     pkgutil.iter_importers work for submodules.  Initial patch by
     Berker Peksag.

   - Issue #16804(121): Fix a bug in the ’site’ module that caused
     running ’python -S -m site’ to incorrectly throw an exception.

   - Issue #15480(122): Remove the deprecated and unused TYPE_INT64 code
     from marshal.  Initial patch by Daniel Riti.

   - Issue #2118(123): SMTPException is now a subclass of OSError.

   - Issue #17016(124): Get rid of possible pointer wraparounds and
     integer overflows in the re module.  Patch by Nickolai Zeldovich.

   - Issue #16658(125): add missing return to HTTPConnection.send().
     Patch by Jeff Knupp.

   - Issue #9556(126): the logging package now allows specifying a
     time-of-day for a TimedRotatingFileHandler to rotate.

   - Issue #14971(127): unittest test discovery no longer gets confused
     when a function has a different __name__ than its name in the
     TestCase class dictionary.

   - Issue #17487(128): The wave getparams method now returns a
     namedtuple rather than a plain tuple.

   - Issue #17675(129): socket repr() provides local and remote
     addresses (if any).  Patch by Giampaolo Rodola’

   - Issue #17093(130): Make the ABCs in importlib.abc provide default
     values or raise reasonable exceptions for their methods to make
     them more amenable to super() calls.

   - Issue #17566(131): Make importlib.abc.Loader.module_repr() optional
     instead of an abstractmethod; now it raises NotImplementedError so
     as to be ignored by default.

   - Issue #17678(132): Remove the use of deprecated method in
     http/cookiejar.py by changing the call to get_origin_req_host() to
     origin_req_host.

   - Issue #17666(133): Fix reading gzip files with an extra field.

   - Issue #16475(134): Support object instancing, recursion and
     interned strings in marshal

   - Issue #17502(135): Process DEFAULT values in mock side_effect that
     returns iterator.

   - Issue #16795(136): On the ast.arguments object, unify vararg with
     varargannotation and kwarg and kwargannotation.  Change the column
     offset of ast.Attribute to be at the attribute name.

   - Issue #17434(137): Properly raise a SyntaxError when a string
     occurs between future imports.

   - Issue #17117(138): Import and @importlib.util.set_loader now set
     __loader__ when it has a value of None or the attribute doesn’t
     exist.

   - Issue #17032(139): The "global" in the "NameError: global name ’x’
     is not defined" error message has been removed.  Patch by Ram
     Rachum.

   - Issue #18080(140): When building a C extension module on OS X, if
     the compiler is overriden with the CC environment variable, use the
     new compiler as the default for linking if LDSHARED is not also
     overriden.  This restores Distutils behavior introduced in 3.2.3
     and inadvertently dropped in 3.3.0.

   - Issue #18113(141): Fixed a refcount leak in the curses.panel
     module’s set_userptr() method.  Reported by Atsuo Ishimoto.

   - Implement PEP 443 "Single-dispatch generic functions".

   - Implement PEP 435 "Adding an Enum type to the Python standard
     library".

   - Issue #15596(142): Faster pickling of unicode strings.

   - Issue #17572(143): Avoid chained exceptions when passing bad
     directives to time.strptime().  Initial patch by Claudiu Popa.

   - Issue #17435(144): threading.Timer’s __init__ method no longer uses
     mutable default values for the args and kwargs parameters.

   - Issue #17526(145): fix an IndexError raised while passing code
     without filename to inspect.findsource().  Initial patch by Tyler
     Doyle.

   - Issue #17540(146): Added style parameter to logging formatter
     configuration by dict.

   - Issue #16692(147): The ssl module now supports TLS 1.1 and TLS 1.2.
     Initial patch by Michele Orrù.

   - Issue #17025(148): multiprocessing: Reduce Queue and SimpleQueue
     contention.

   - Issue #17536(149): Add to webbrowser’s browser list: www-browser,
     x-www-browser, iceweasel, iceape.

   - Issue #17150(150): pprint now uses line continuations to wrap long
     string literals.

   - Issue #17488(151): Change the subprocess.Popen bufsize parameter
     default value from unbuffered (0) to buffering (-1) to match the
     behavior existing code expects and match the behavior of the
     subprocess module in Python 2 to avoid introducing hard to track
     down bugs.

   - Issue #17521(152): Corrected non-enabling of logger following two
     calls to fileConfig().

   - Issue #17508(153): Corrected logging MemoryHandler configuration in
     dictConfig() where the target handler wasn’t configured first.

   - Issue #17209(154): curses.window.get_wch() now correctly handles
     KeyboardInterrupt (CTRL+c).

   - Issue #5713(155): smtplib now handles 421 (closing connection)
     error codes when sending mail by closing the socket and reporting
     the 421 error code via the exception appropriate to the command
     that received the error response.

   - Issue #16997(156): unittest.TestCase now provides a subTest()
     context manager to procedurally generate, in an easy way, small
     test instances.

   - Issue #17485(157): Also delete the Request Content-Length header if
     the data attribute is deleted.  (Follow on to issue Issue
     #16464(158)).

   - Issue #15927(159): CVS now correctly parses escaped newlines and
     carriage when parsing with quoting turned off.

   - Issue #17467(160): add readline and readlines support to mock_open
     in unittest.mock.

   - Issue #13248(161): removed deprecated and undocumented
     difflib.isbjunk, isbpopular.

   - Issue #17192(162): Update the ctypes module’s libffi to v3.0.13.
     This specifically addresses a stack misalignment issue on x86 and
     issues on some more recent platforms.

   - Issue #8862(163): Fixed curses cleanup when getkey is interrputed
     by a signal.

   - Issue #17443(164): imaplib.IMAP4_stream was using the default
     unbuffered IO in subprocess, but the imap code assumes buffered IO.
     In Python2 this worked by accident.  IMAP4_stream now explicitly
     uses buffered IO.

   - Issue #17476(165): Fixed regression relative to Python2 in
     undocumented pydoc ’allmethods’; it was missing unbound methods on
     the class.

   - Issue #17474(166): Remove the deprecated methods of Request class.

   - Issue #16709(167): unittest discover order is no-longer filesystem
     specific.  Patch by Jeff Ramnani.

   - Use the HTTPS PyPI url for upload, overriding any plain HTTP URL in
     pypirc.

   - Issue #5024(168): sndhdr.whichhdr now returns the frame count for
     WAV files rather than -1.

   - Issue #17460(169): Remove the strict argument of HTTPConnection and
     removing the DeprecationWarning being issued from 3.2 onwards.

   - Issue #16880(170): Do not assume _imp.load_dynamic() is defined in
     the imp module.

   - Issue #16389(171): Fixed a performance regression relative to
     Python 3.1 in the caching of compiled regular expressions.

   - Added missing FeedParser and BytesFeedParser to
     email.parser.__all__.

   - Issue #17431(172): Fix missing import of BytesFeedParser in
     email.parser.

   - Issue #12921(173): http.server’s send_error takes an explain
     argument to send more information in response.  Patch contributed
     by Karl.

   - Issue #17414(174): Add timeit, repeat, and default_timer to
     timeit.__all__.

   - Issue #1285086(175): Get rid of the refcounting hack and speed up
     urllib.parse.unquote() and urllib.parse.unquote_to_bytes().

   - Issue #17099(176): Have importlib.find_loader() raise ValueError
     when __loader__ is not set, harmonizing with what happens when the
     attribute is set to None.

   - Expose the O_PATH constant in the os module if it is available.

   - Issue #17368(177): Fix an off-by-one error in the Python JSON
     decoder that caused a failure while decoding empty object literals
     when object_pairs_hook was specified.

   - Issue #17385(178): Fix quadratic behavior in threading.Condition.
     The FIFO queue now uses a deque instead of a list.

   - Issue #15806(179): Add contextlib.ignore().  This creates a context
     manager to ignore specified exceptions, replacing the "except
     SomeException: pass" idiom.

   - Issue #14645(180): The email generator classes now produce output
     using the specified linesep throughout.  Previously if the prolog,
     epilog, or body were stored with a different linesep, that linesep
     was used.  This fix corrects an RFC non-compliance issue with
     smtplib.send_message.

   - Issue #17278(181): Fix a crash in heapq.heappush() and
     heapq.heappop() when the list is being resized concurrently.

   - Issue #16962(182): Use getdents64 instead of the obsolete getdents
     syscall in the subprocess module on Linux.

   - Issue #16935(183): unittest now counts the module as skipped if it
     raises SkipTest, instead of counting it as an error.  Patch by
     Zachary Ware.

   - Issue #17018(184): Make Process.join() retry if os.waitpid() fails
     with EINTR.

   - Issue #17223(185): array module: Fix a crasher when converting an
     array containing invalid characters (outside range [U+0000;
     U+10ffff]) to Unicode: repr(array), str(array) and
     array.tounicode().  Patch written by Manuel Jacob.

   - Issue #17197(186): profile/cProfile modules refactored so that code
     of run() and runctx() utility functions is not duplicated in both
     modules.

   - Issue #14720(187): sqlite3: Convert datetime microseconds
     correctly.  Patch by Lowe Thiderman.

   - Issue #15132(188): Allow a list for the defaultTest argument of
     unittest.TestProgram.  Patch by Jyrki Pulliainen.

   - Issue #17225(189): JSON decoder now counts columns in the first
     line starting with 1, as in other lines.

   - Issue #6623(190): Added explicit DeprecationWarning for
     ftplib.netrc, which has been deprecated and undocumented for a long
     time.

   - Issue #13700(191): Fix byte/string handling in imaplib
     authentication when an authobject is specified.

   - Issue #13153(192): Tkinter functions now raise TclError instead of
     ValueError when a string argument contains non-BMP character.

   - Issue #9669(193): Protect re against infinite loops on zero-width
     matching in non-greedy repeat.  Patch by Matthew Barnett.

   - Issue #13169(194): The maximal repetition number in a regular
     expression has been increased from 65534 to 2147483647 (on 32-bit
     platform) or 4294967294 (on 64-bit).

   - Issue #17143(195): Fix a missing import in the trace module.
     Initial patch by Berker Peksag.

   - Issue #15220(196): email.feedparser’s line splitting algorithm is
     now simpler and faster.

   - Issue #16743(197): Fix mmap overflow check on 32 bit Windows.

   - Issue #16996(198): webbrowser module now uses shutil.which() to
     find a web-browser on the executable search path.

   - Issue #16800(199): tempfile.gettempdir() no longer left temporary
     files when the disk is full.  Original patch by Amir Szekely.

   - Issue #17192(200): Import libffi-3.0.12.

   - Issue #16564(201): Fixed regression relative to Python2 in the
     operation of email.encoders.encode_7or8bit when used with binary
     data.

   - Issue #17052(202): unittest discovery should use self.testLoader.

   - Issue #4591(203): Uid and gid values larger than 2**31 are
     supported now.

   - Issue #17141(204): random.vonmisesvariate() no longer hangs for
     large kappas.

   - Issue #17149(205): Fix random.vonmisesvariate to always return
     results in [0, 2*math.pi].

   - Issue #1470548(206): XMLGenerator now works with binary output
     streams.

   - Issue #6975(207): os.path.realpath() now correctly resolves
     multiple nested symlinks on POSIX platforms.

   - Issue #13773(208): sqlite3.connect() gets a new ‘uri’ parameter to
     pass the filename as a URI, allowing custom options to be passed.

   - Issue #16564(209): Fixed regression relative to Python2 in the
     operation of email.encoders.encode_noop when used with binary data.

   - Issue #10355(210): The mode, name, encoding and newlines properties
     now work on SpooledTemporaryFile objects even when they have not
     yet rolled over.  Obsolete method xreadline (which has never worked
     in Python 3) has been removed.

   - Issue #16686(211): Fixed a lot of bugs in audioop module.  Fixed
     crashes in avgpp(), maxpp() and ratecv().  Fixed an integer
     overflow in add(), bias(), and ratecv().  reverse(), lin2lin() and
     ratecv() no more lose precision for 32-bit samples.  max() and
     rms() no more returns a negative result and various other functions
     now work correctly with 32-bit sample -0x80000000.

   - Issue #17073(212): Fix some integer overflows in sqlite3 module.

   - Issue #16723(213): httplib.HTTPResponse no longer marked closed
     when the connection is automatically closed.

   - Issue #15359(214): Add CAN_BCM protocol support to the socket
     module.  Patch by Brian Thorne.

   - Issue #16948(215): Fix quoted printable body encoding for
     non-latin1 character sets in the email package.

   - Issue #16811(216): Fix folding of headers with no value in the
     provisional email policies.

   - Issue #17132(217): Update symbol for "yield from" grammar changes.

   - Issue #17076(218): Make copying of xattrs more tolerant of missing
     FS support.  Patch by Thomas Wouters.

   - Issue #17089(219): Expat parser now correctly works with string
     input when the internal XML encoding is not UTF-8 or US-ASCII. It
     also now accepts bytes and strings larger than 2 GiB.

   - Issue #6083(220): Fix multiple segmentation faults occured when
     PyArg_ParseTuple parses nested mutating sequence.

   - Issue #5289(221): Fix ctypes.util.find_library on Solaris.

   - Issue #17106(222): Fix a segmentation fault in io.TextIOWrapper
     when an underlying stream or a decoder produces data of an
     unexpected type (i.e.  when io.TextIOWrapper initialized with text
     stream or use bytes-to-bytes codec).

   - Issue #17015(223): When it has a spec, a Mock object now inspects
     its signature when matching calls, so that arguments can be matched
     positionally or by name.

   - Issue #15633(224): httplib.HTTPResponse is now mark closed when the
     server sends less than the advertised Content-Length.

   - Issue #12268(225): The io module file object write methods no
     longer abort early when one of its write system calls is
     interrupted (EINTR).

   - Issue #6972(226): The zipfile module no longer overwrites files
     outside of its destination path when extracting malicious zip
     files.

   - Issue #4844(227): ZipFile now raises BadZipFile when opens a ZIP
     file with an incomplete "End of Central Directory" record.
     Original patch by Guilherme Polo and Alan McIntyre.

   - Issue #17071(228): Signature.bind() now works when one of the
     keyword arguments is named ‘self’.

   - Issue #12004(229): Fix an internal error in PyZipFile when writing
     an invalid Python file.  Patch by Ben Morgan.

   - Have py_compile use importlib as much as possible to avoid code
     duplication.  Code now raises FileExistsError if the file path to
     be used for the byte-compiled file is a symlink or non-regular file
     as a warning that import will not keep the file path type if it
     writes to that path.

   - Issue #16972(230): Have site.addpackage() consider already known
     paths even when none are explicitly passed in.  Bug report and fix
     by Kirill.

   - Issue #1602133(231): on Mac OS X a shared library build
     (‘--enable-shared’) now fills the ‘os.environ’ variable correctly.

   - Issue #15505(232): *note unittest.installHandler: bb6. no longer
     assumes SIGINT handler is set to a callable object.

   - Issue #13454(233): Fix a crash when deleting an iterator created by
     itertools.tee() if all other iterators were very advanced before.

   - Issue #12411(234): Fix to cgi.parse_multipart to correctly use
     bytes boundaries and bytes data.  Patch by Jonas Wagner.

   - Issue #16957(235): shutil.which() no longer searches a bare file
     name in the current directory on Unix and no longer searches a
     relative file path with a directory part in PATH directories.
     Patch by Thomas Kluyver.

   - Issue #1159051(236): GzipFile now raises EOFError when reading a
     corrupted file with truncated header or footer.

   - Issue #16993(237): shutil.which() now preserves the case of the
     path and extension on Windows.

   - Issue #16992(238): On Windows in signal.set_wakeup_fd, validate the
     file descriptor argument.

   - Issue #16422(239): For compatibility with the Python version, the C
     version of decimal now uses strings instead of integers for
     rounding mode constants.

   - Issue #15861(240): tkinter now correctly works with lists and
     tuples containing strings with whitespaces, backslashes or
     unbalanced braces.

   - Issue #9720(241): zipfile now writes correct local headers for
     files larger than 4 GiB.

   - Issue #16955(242): Fix the poll() method for multiprocessing’s
     socket connections on Windows.

   - SSLContext.load_dh_params() now properly closes the input file.

   - Issue #15031(243): Refactor some .pyc management code to cut down
     on code duplication.  Thanks to Ronan Lamy for the report and
     taking an initial stab at the problem.

   - Issue #16398(244): Optimize deque.rotate() so that it only moves
     pointers and doesn’t touch the underlying data with increfs and
     decrefs.

   - Issue #16900(245): Issue a ResourceWarning when an ssl socket is
     left unclosed.

   - Issue #13899(246): ‘\A’, ‘\Z’, and ‘\B’ now correctly match the A,
     Z, and B literals when used inside character classes (e.g.
     ‘'[\A]'’).  Patch by Matthew Barnett.

   - Issue #15545(247): Fix regression in sqlite3’s iterdump method
     where it was failing if the connection used a row factory (such as
     sqlite3.Row) that produced unsortable objects.  (Regression was
     introduced by fix for 9750).

   - fcntl: add F_DUPFD_CLOEXEC constant, available on Linux 2.6.24+.

   - Issue #15972(248): Fix error messages when os functions expecting a
     file name or file descriptor receive the incorrect type.

   - Issue #8109(249): The ssl module now has support for server-side
     SNI, thanks to a ‘SSLContext.set_servername_callback()’ method.
     Patch by Daniel Black.

   - Issue #16860(250): In tempfile, use O_CLOEXEC when available to set
     the close-on-exec flag atomically.

   - Issue #16674(251): random.getrandbits() is now 20-40% faster for
     small integers.

   - Issue #16009(252): JSON error messages now provide more
     information.

   - Issue #16828(253): Fix error incorrectly raised by
     bz2.compress(b’’) and bz2.BZ2Compressor.compress(b’’).  Initial
     patch by Martin Packman.

   - Issue #16833(254): In http.client.HTTPConnection, do not
     concatenate the request headers and body when the payload exceeds
     16 KB, since it can consume more memory for no benefit.  Patch by
     Benno Leslie.

   - Issue #16541(255): tk_setPalette() now works with keyword
     arguments.

   - Issue #16820(256): In configparser, ‘parser.popitem()’ no longer
     raises ValueError.  This makes ‘parser.clean()’ work correctly.

   - Issue #16820(257): In configparser, ‘parser['section'] = {}’ now
     preserves section order within the parser.  This makes
     ‘parser.update()’ preserve section order as well.

   - Issue #16820(258): In configparser, ‘parser['DEFAULT'] = {}’ now
     correctly clears previous values stored in the default section.
     Same goes for ‘parser.update({'DEFAULT': {}})’.

   - Issue #9586(259): Redefine SEM_FAILED on MacOSX to keep compiler
     happy.

   - Issue #16787(260): Increase asyncore and asynchat default output
     buffers size, to decrease CPU usage and increase throughput.

   - Issue #10527(261): make multiprocessing use poll() instead of
     select() if available.

   - Issue #16688(262): Now regexes contained backreferences correctly
     work with non-ASCII strings.  Patch by Matthew Barnett.

   - Issue #16486(263): Make aifc files act as context managers.

   - Issue #16485(264): Now file descriptors are closed if file header
     patching failed on closing an aifc file.

   - Issue #16640(265): Run less code under a lock in sched module.

   - Issue #16165(266): sched.scheduler.run() no longer blocks a
     scheduler for other threads.

   - Issue #16641(267): Default values of sched.scheduler.enter() are no
     longer modifiable.

   - Issue #16618(268): Make glob.glob match consistently across strings
     and bytes regarding leading dots.  Patch by Serhiy Storchaka.

   - Issue #16788(269): Add samestat to Lib/ntpath.py

   - Issue #16713(270): Parsing of ’tel’ urls using urlparse separates
     params from path.

   - Issue #16443(271): Add docstrings to regular expression match
     objects.  Patch by Anton Kasyanov.

   - Issue #15701(272): Fix HTTPError info method call to return the
     headers information.

   - Issue #16752(273): Add a missing import to modulefinder.  Patch by
     Berker Peksag.

   - Issue #16646(274): ftplib.FTP.makeport() might lose socket error
     details.  (patch by Serhiy Storchaka)

   - Issue #16626(275): Fix infinite recursion in glob.glob() on Windows
     when the pattern contains a wildcard in the drive or UNC path.
     Patch by Serhiy Storchaka.

   - Issue #15783(276): Except for the number methods, the C version of
     decimal now supports all None default values present in decimal.py.
     These values were largely undocumented.

   - Issue #11175(277): argparse.FileType now accepts encoding and
     errors arguments.  Patch by Lucas Maystre.

   - Issue #16488(278): epoll() objects now support the ‘with’
     statement.  Patch by Serhiy Storchaka.

   - Issue #16298(279): In HTTPResponse.read(), close the socket when
     there is no Content-Length and the incoming stream is finished.
     Patch by Eran Rundstein.

   - Issue #16049(280): Add abc.ABC class to enable the use of
     inheritance to create ABCs, rather than the more cumbersome
     metaclass=ABCMeta.  Patch by Bruno Dupuis.

   - Expose the TCP_FASTOPEN and MSG_FASTOPEN flags in socket when
     they’re available.

   - Issue #15701(281): Add a .headers attribute to
     urllib.error.HTTPError.  Patch contributed by Berker Peksag.

   - Issue #15872(282): Fix 3.3 regression introduced by the new
     fd-based shutil.rmtree that caused it to not ignore certain errors
     when ignore_errors was set.  Patch by Alessandro Moura and Serhiy
     Storchaka.

   - Issue #16248(283): Disable code execution from the user’s home
     directory by tkinter when the -E flag is passed to Python.  Patch
     by Zachary Ware.

   - Issue #13390(284): New function *note sys.getallocatedblocks():
     4e3. returns the number of memory blocks currently allocated.

   - Issue #16628(285): Fix a memory leak in ctypes.resize().

   - Issue #13614(286): Fix setup.py register failure with invalid rst
     in description.  Patch by Julien Courteau and Pierre Paul Lefebvre.

   - Issue #13512(287): Create ~/.pypirc securely (CVE-2011-4944).
     Initial patch by Philip Jenvey, tested by Mageia and Debian.

   - Issue #7719(288): Make distutils ignore ‘.nfs*’ files instead of
     choking later on.  Initial patch by SilentGhost and Jeff Ramnani.

   - Issue #13120(289): Allow calling pdb.set_trace() from thread.
     Patch by Ilya Sandler.

   - Issue #16585(290): Make CJK encoders support error handlers that
     return bytes per PEP 383.

   - Issue #10182(291): The re module doesn’t truncate indices to 32
     bits anymore.  Patch by Serhiy Storchaka.

   - Issue #16333(292): use (",", ": ") as default separator in json
     when indent is specified, to avoid trailing whitespace.  Patch by
     Serhiy Storchaka.

   - Issue #16573(293): In 2to3, treat enumerate() like a consuming
     call, so superfluous list() calls aren’t added to filter(), map(),
     and zip() which are directly passed enumerate().

   - Issue #16464(294): Reset the Content-Length header when a urllib
     Request is reused with new data.

   - Issue #12848(295): The pure Python pickle implementation now treats
     object lengths as unsigned 32-bit integers, like the C
     implementation does.  Patch by Serhiy Storchaka.

   - Issue #16423(296): urllib.request now has support for ‘data:’ URLs.
     Patch by Mathias Panzenböck.

   - Issue #4473(297): Add a POP3.stls() to switch a clear-text POP3
     session into an encrypted POP3 session, on supported servers.
     Patch by Lorenzo Catucci.

   - Issue #4473(298): Add a POP3.capa() method to query the
     capabilities advertised by the POP3 server.  Patch by Lorenzo
     Catucci.

   - Issue #4473(299): Ensure the socket is shutdown cleanly in
     POP3.close().  Patch by Lorenzo Catucci.

   - Issue #16522(300): added FAIL_FAST flag to doctest.

   - Issue #15627(301): Add the
     importlib.abc.InspectLoader.source_to_code() method.

   - Issue #16408(302): Fix file descriptors not being closed in error
     conditions in the zipfile module.  Patch by Serhiy Storchaka.

   - Issue #14631(303): Add a new *note weakref.WeakMethod: 512. to
     simulate weak references to bound methods.

   - Issue #16469(304): Fix exceptions from float -> Fraction and
     Decimal -> Fraction conversions for special values to be consistent
     with those for float -> int and Decimal -> int.  Patch by Alexey
     Kachayev.

   - Issue #16481(305): multiprocessing no longer leaks process handles
     on Windows.

   - Issue #12428(306): Add a pure Python implementation of
     functools.partial().  Patch by Brian Thorne.

   - Issue #16140(307): The subprocess module no longer double closes
     its child subprocess.PIPE parent file descriptors on child error
     prior to exec().

   - Remove a bare print to stdout from the subprocess module that could
     have happened if the child process wrote garbage to its pre-exec
     error pipe.

   - The subprocess module now raises its own SubprocessError instead of
     a RuntimeError in various error situations which should not
     normally happen.

   - Issue #16327(308): The subprocess module no longer leaks file
     descriptors used for stdin/stdout/stderr pipes to the child when
     fork() fails.

   - Issue #14396(309): Handle the odd rare case of waitpid returning 0
     when not expected in subprocess.Popen.wait().

   - Issue #16411(310): Fix a bug where zlib.decompressobj().flush()
     might try to access previously-freed memory.  Patch by Serhiy
     Storchaka.

   - Issue #16357(311): fix calling accept() on a SSLSocket created
     through SSLContext.wrap_socket().  Original patch by Jeff McNeil.

   - Issue #16409(312): The reporthook callback made by the legacy
     urllib.request.urlretrieve API now properly supplies a constant
     non-zero block_size as it did in Python 3.2 and 2.7.  This matches
     the behavior of urllib.request.URLopener.retrieve.

   - Issue #16431(313): Use the type information when constructing a
     Decimal subtype from a Decimal argument.

   - Issue #15641(314): Clean up deprecated classes from importlib.
     Patch by Taras Lyapun.

   - Issue #16350(315): zlib.decompressobj().decompress() now
     accumulates data from successive calls after EOF in unused_data,
     instead of only saving the argument to the last call.
     decompressobj().flush() now correctly sets unused_data and
     unconsumed_tail.  A bug in the handling of MemoryError when setting
     the unconsumed_tail attribute has also been fixed.  Patch by Serhiy
     Storchaka.

   - Issue #12759(316): sre_parse now raises a proper error when the
     name of the group is missing.  Initial patch by Serhiy Storchaka.

   - Issue #16152(317): fix tokenize to ignore whitespace at the end of
     the code when no newline is found.  Patch by Ned Batchelder.

   - Issue #16284(318): Prevent keeping unnecessary references to worker
     functions in concurrent.futures ThreadPoolExecutor.

   - Issue #16230(319): Fix a crash in select.select() when one of the
     lists changes size while iterated on.  Patch by Serhiy Storchaka.

   - Issue #16228(320): Fix a crash in the json module where a list
     changes size while it is being encoded.  Patch by Serhiy Storchaka.

   - Issue #16351(321): New function gc.get_stats() returns
     per-generation collection statistics.

   - Issue #14897(322): Enhance error messages of struct.pack and
     struct.pack_into.  Patch by Matti Mäki.

   - Issue #16316(323): mimetypes now recognizes the .xz and .txz
     (.tar.xz) extensions.  Patch by Serhiy Storchaka.

   - Issue #12890(324): cgitb no longer prints spurious <p> tags in text
     mode when the logdir option is specified.

   - Issue #16307(325): Fix multiprocessing.Pool.map_async not calling
     its callbacks.  Patch by Janne Karila.

   - Issue #16305(326): Fix a segmentation fault occurring when
     interrupting math.factorial.

   - Issue #16116(327): Fix include and library paths to be correct when
     building C extensions in venvs.

   - Issue #16245(328): Fix the value of a few entities in
     html.entities.html5.

   - Issue #16301(329): Fix the localhost verification in
     urllib/request.py for ‘file://’ urls.

   - Issue #16250(330): Fix the invocations of URLError which had
     misplaced filename attribute for exception.

   - Issue #10836(331): Fix exception raised when file not found in
     urlretrieve Initial patch by Ezio Melotti.

   - Issue #14398(332): Fix size truncation and overflow bugs in the bz2
     module.

   - Issue #12692(333): Fix resource leak in urllib.request when talking
     to an HTTP server that does not include a ‘Connection: close’
     header in its responses.

   - Issue #12034(334): Fix bogus caching of result in
     check_GetFinalPathNameByHandle.  Patch by Atsuo Ishimoto.

   - Improve performance of *note lzma.LZMAFile: 53a. (see also issue
     #16034(335)).

   - Issue #16220(336): wsgiref now always calls close() on an iterable
     response.  Patch by Brent Tubbs.

   - Issue #16270(337): urllib may hang when used for retrieving files
     via FTP by using a context manager.  Patch by Giampaolo Rodola’.

   - Issue #16461(338): Wave library should be able to deal with 4GB wav
     files, and sample rate of 44100 Hz.

   - Issue #16176(339): Properly identify Windows 8 via
     platform.platform()

   - Issue #16088(340): BaseHTTPRequestHandler’s send_error method
     includes a Content-Length header in it’s response now.  Patch by
     Antoine Pitrou.

   - Issue #16114(341): The subprocess module no longer provides a
     misleading error message stating that args[0] did not exist when
     either the cwd or executable keyword arguments specified a path
     that did not exist.

   - Issue #16169(342): Fix ctypes.WinError()’s confusion between errno
     and winerror.

   - Issue #16110(343): logging.fileConfig now accepts a pre-initialised
     ConfigParser instance.

   - Issue #1492704(344): shutil.copyfile() raises a distinct
     SameFileError now if source and destination are the same file.
     Patch by Atsuo Ishimoto.

   - Issue #13896(345): Make shelf instances work with ’with’ as context
     managers.  Original patch by Filip Gruszczyński.

   - Issue #15417(346): Add support for csh and fish in venv activation
     scripts.

   - Issue #14377(347): ElementTree.write and some of the module-level
     functions have a new parameter - `short_empty_elements'.  It
     controls how elements with no contents are emitted.

   - Issue #16089(348): Allow ElementTree.TreeBuilder to work again with
     a non-Element element_factory (fixes a regression in SimpleTAL).

   - Issue #9650(349): List commonly used format codes in time.strftime
     and time.strptime docsttings.  Original patch by Mike Hoy.

   - Issue #15452(350): logging configuration socket listener now has a
     verify option that allows an application to apply a verification
     function to the received configuration data before it is acted
     upon.

   - Issue #16034(351): Fix performance regressions in the new *note
     bz2.BZ2File: 539. implementation.  Initial patch by Serhiy
     Storchaka.

   - *note pty.spawn(): 494. now returns the child process status
     returned by *note os.waitpid(): 200.

   - Issue #15756(352): ‘subprocess.poll()’ now properly handles *note
     errno.ECHILD: bb7. to return a returncode of 0 when the child has
     already exited or cannot be waited on.

   - Issue #15323(353): Improve failure message of
     ‘Mock.assert_called_once_with()’.

   - Issue #16064(354): ‘unittest -m’ claims executable is "python", not
     "python3".

   - Issue #12376(355): Pass on parameters in
     ‘TextTestResult.__init__()’ super call.

   - Issue #15222(356): Insert blank line after each message in mbox
     mailboxes.

   - Issue #16013(357): Fix ‘csv.Reader’ parsing issue with ending quote
     characters.  Patch by Serhiy Storchaka.

   - Issue #15421(358): Fix an OverflowError in
     ‘Calendar.itermonthdates()’ after *note datetime.MAXYEAR: bb8.
     Patch by Cédric Krier.

   - Issue #16112(359): platform.architecture does not correctly escape
     argument to /usr/bin/file.  Patch by David Benjamin.

   - Issue #15970(360): *note xml.etree.ElementTree: 134. now serializes
     correctly the empty HTML elements ’meta’ and ’param’.

   - Issue #15842(361): The ‘SocketIO.{readable,writable,seekable}’
     methods now raise ValueError when the file-like object is closed.
     Patch by Alessandro Moura.

   - Issue #15876(362): Fix a refleak in the *note curses: 2b. module:
     window.encoding.

   - Issue #15881(363): Fix *note atexit: c. hook in *note
     multiprocessing: b6.  Original patch by Chris McDonough.

   - Issue #15841(364): The readable(), writable() and seekable()
     methods of *note io.BytesIO: 371. and *note io.StringIO: 41e.
     objects now raise ValueError when the object has been closed.
     Patch by Alessandro Moura.

   - Issue #15447(365): Use *note subprocess.DEVNULL: 6da. in
     webbrowser, instead of opening *note os.devnull: bb9. explicitly
     and leaving it open.

   - Issue #15509(366): ‘webbrowser.UnixBrowser’ no longer passes empty
     arguments to Popen when ‘%action’ substitutions produce empty
     strings.

   - Issue #12776(367), issue #11839(368): Call *note argparse: 6. type
     function (specified by add_argument) only once.  Before, the type
     function was called twice in the case where the default was
     specified and the argument was given as well.  This was especially
     problematic for the FileType type, as a default file would always
     be opened, even if a file argument was specified on the command
     line.

   - Issue #15906(369): Fix a regression in argparse caused by the
     preceding change, when ‘action='append'’, ‘type='str'’ and
     ‘default=[]’.

   - Issue #16113(370): Added sha3 module based on the Keccak reference
     implementation 3.2.  The *note hashlib: 8c. module has four
     additional hash algorithms: ‘sha3_224’, ‘sha3_256’, ‘sha3_384’ and
     ‘sha3_512’.  As part of the patch some common code was moved from
     _hashopenssl.c to hashlib.h.

   - ctypes.call_commethod was removed, since its only usage was in the
     defunct samples directory.

   - Issue #16692(371): Added TLSv1.1 and TLSv1.2 support for the ssl
     modules.

   - Issue #16832(372): add abc.get_cache_token() to expose cache
     validity checking support in ABCMeta.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/4331

   (2) https://bugs.python.org/13461

   (3) https://bugs.python.org/18681

   (4) https://bugs.python.org/14323

   (5) https://bugs.python.org/17998

   (6) https://bugs.python.org/17557

   (7) https://bugs.python.org/18608

   (8) https://bugs.python.org/18619

   (9) https://bugs.python.org/15699

   (10) https://bugs.python.org/17616

   (11) https://bugs.python.org/18599

   (12) https://bugs.python.org/13266

   (13) https://bugs.python.org/18561

   (14) https://bugs.python.org/18559

   (15) https://bugs.python.org/18556

   (16) https://bugs.python.org/17818

   (17) https://bugs.python.org/18549

   (18) https://bugs.python.org/18530

   (19) https://bugs.python.org/18514

   (20) https://bugs.python.org/9177

   (21) https://bugs.python.org/18513

   (22) https://bugs.python.org/18479

   (23) https://bugs.python.org/18480

   (24) https://bugs.python.org/17778

   (25) https://bugs.python.org/18393

   (26) https://bugs.python.org/17482

   (27) https://bugs.python.org/18431

   (28) https://bugs.python.org/18432

   (29) https://bugs.python.org/18044

   (30) https://bugs.python.org/18101

   (31) https://bugs.python.org/18116

   (32) https://bugs.python.org/17198

   (33) https://bugs.python.org/18013

   (34) https://bugs.python.org/18020

   (35) https://bugs.python.org/18347

   (36) https://bugs.python.org/17261

   (37) https://bugs.python.org/18343

   (38) https://bugs.python.org/17097

   (39) https://bugs.python.org/18339

   (40) https://bugs.python.org/18240

   (41) https://bugs.python.org/18224

   (42) https://bugs.python.org/18155

   (43) https://bugs.python.org/14360

   (44) https://bugs.python.org/11390

   (45) https://bugs.python.org/18135

   (46) https://bugs.python.org/11016

   (47) https://bugs.python.org/18248

   (48) https://bugs.python.org/18259

   (49) https://bugs.python.org/18147

   (50) https://bugs.python.org/18167

   (51) https://bugs.python.org/18076

   (52) https://bugs.python.org/18357

   (53) https://bugs.python.org/18058

   (54) https://bugs.python.org/17177

   (55) https://bugs.python.org/18194

   (56) https://bugs.python.org/17907

   (57) https://bugs.python.org/18192

   (58) https://bugs.python.org/18149

   (59) https://bugs.python.org/18193

   (60) https://bugs.python.org/18157

   (61) https://bugs.python.org/16102

   (62) https://bugs.python.org/17134

   (63) https://bugs.python.org/18143

   (64) https://bugs.python.org/17314

   (65) https://bugs.python.org/11959

   (66) https://bugs.python.org/18109

   (67) https://bugs.python.org/18089

   (68) https://bugs.python.org/18088

   (69) https://bugs.python.org/17403

   (70) https://bugs.python.org/18070

   (71) https://bugs.python.org/18025

   (72) https://bugs.python.org/18011

   (73) https://bugs.python.org/18072

   (74) https://bugs.python.org/8240

   (75) https://bugs.python.org/17269

   (76) https://bugs.python.org/16986

   (77) https://bugs.python.org/17996

   (78) https://bugs.python.org/17900

   (79) https://bugs.python.org/17914

   (80) https://bugs.python.org/17812

   (81) https://bugs.python.org/17980

   (82) https://bugs.python.org/15758

   (83) https://bugs.python.org/14596

   (84) https://bugs.python.org/17981

   (85) https://bugs.python.org/17964

   (86) https://bugs.python.org/17754

   (87) https://bugs.python.org/17968

   (88) https://bugs.python.org/17606

   (89) https://bugs.python.org/17732

   (90) https://bugs.python.org/17915

   (91) https://bugs.python.org/16601

   (92) https://bugs.python.org/17289

   (93) https://bugs.python.org/12181

   (94) https://bugs.python.org/11816

   (95) https://bugs.python.org/13831

   (96) https://bugs.python.org/15528

   (97) https://bugs.python.org/14173

   (98) https://bugs.python.org/15902

   (99) https://bugs.python.org/13721

   (100) https://bugs.python.org/14679

   (101) https://bugs.python.org/17802

   (102) https://bugs.python.org/17358

   (103) https://bugs.python.org/17804

   (104) https://bugs.python.org/17830

   (105) https://bugs.python.org/17272

   (106) https://bugs.python.org/17353

   (107) https://bugs.python.org/11714

   (108) https://bugs.python.org/16624

   (109) https://bugs.python.org/17795

   (110) https://bugs.python.org/16694

   (111) https://bugs.python.org/11182

   (112) https://bugs.python.org/17741

   (113) https://bugs.python.org/17555

   (114) https://bugs.python.org/17707

   (115) https://bugs.python.org/17720

   (116) https://bugs.python.org/17012

   (117) https://bugs.python.org/17710

   (118) https://bugs.python.org/17341

   (119) https://bugs.python.org/17702

   (120) https://bugs.python.org/16163

   (121) https://bugs.python.org/16804

   (122) https://bugs.python.org/15480

   (123) https://bugs.python.org/2118

   (124) https://bugs.python.org/17016

   (125) https://bugs.python.org/16658

   (126) https://bugs.python.org/9556

   (127) https://bugs.python.org/14971

   (128) https://bugs.python.org/17487

   (129) https://bugs.python.org/17675

   (130) https://bugs.python.org/17093

   (131) https://bugs.python.org/17566

   (132) https://bugs.python.org/17678

   (133) https://bugs.python.org/17666

   (134) https://bugs.python.org/16475

   (135) https://bugs.python.org/17502

   (136) https://bugs.python.org/16795

   (137) https://bugs.python.org/17434

   (138) https://bugs.python.org/17117

   (139) https://bugs.python.org/17032

   (140) https://bugs.python.org/18080

   (141) https://bugs.python.org/18113

   (142) https://bugs.python.org/15596

   (143) https://bugs.python.org/17572

   (144) https://bugs.python.org/17435

   (145) https://bugs.python.org/17526

   (146) https://bugs.python.org/17540

   (147) https://bugs.python.org/16692

   (148) https://bugs.python.org/17025

   (149) https://bugs.python.org/17536

   (150) https://bugs.python.org/17150

   (151) https://bugs.python.org/17488

   (152) https://bugs.python.org/17521

   (153) https://bugs.python.org/17508

   (154) https://bugs.python.org/17209

   (155) https://bugs.python.org/5713

   (156) https://bugs.python.org/16997

   (157) https://bugs.python.org/17485

   (158) https://bugs.python.org/16464

   (159) https://bugs.python.org/15927

   (160) https://bugs.python.org/17467

   (161) https://bugs.python.org/13248

   (162) https://bugs.python.org/17192

   (163) https://bugs.python.org/8862

   (164) https://bugs.python.org/17443

   (165) https://bugs.python.org/17476

   (166) https://bugs.python.org/17474

   (167) https://bugs.python.org/16709

   (168) https://bugs.python.org/5024

   (169) https://bugs.python.org/17460

   (170) https://bugs.python.org/16880

   (171) https://bugs.python.org/16389

   (172) https://bugs.python.org/17431

   (173) https://bugs.python.org/12921

   (174) https://bugs.python.org/17414

   (175) https://bugs.python.org/1285086

   (176) https://bugs.python.org/17099

   (177) https://bugs.python.org/17368

   (178) https://bugs.python.org/17385

   (179) https://bugs.python.org/15806

   (180) https://bugs.python.org/14645

   (181) https://bugs.python.org/17278

   (182) https://bugs.python.org/16962

   (183) https://bugs.python.org/16935

   (184) https://bugs.python.org/17018

   (185) https://bugs.python.org/17223

   (186) https://bugs.python.org/17197

   (187) https://bugs.python.org/14720

   (188) https://bugs.python.org/15132

   (189) https://bugs.python.org/17225

   (190) https://bugs.python.org/6623

   (191) https://bugs.python.org/13700

   (192) https://bugs.python.org/13153

   (193) https://bugs.python.org/9669

   (194) https://bugs.python.org/13169

   (195) https://bugs.python.org/17143

   (196) https://bugs.python.org/15220

   (197) https://bugs.python.org/16743

   (198) https://bugs.python.org/16996

   (199) https://bugs.python.org/16800

   (200) https://bugs.python.org/17192

   (201) https://bugs.python.org/16564

   (202) https://bugs.python.org/17052

   (203) https://bugs.python.org/4591

   (204) https://bugs.python.org/17141

   (205) https://bugs.python.org/17149

   (206) https://bugs.python.org/1470548

   (207) https://bugs.python.org/6975

   (208) https://bugs.python.org/13773

   (209) https://bugs.python.org/16564

   (210) https://bugs.python.org/10355

   (211) https://bugs.python.org/16686

   (212) https://bugs.python.org/17073

   (213) https://bugs.python.org/16723

   (214) https://bugs.python.org/15359

   (215) https://bugs.python.org/16948

   (216) https://bugs.python.org/16811

   (217) https://bugs.python.org/17132

   (218) https://bugs.python.org/17076

   (219) https://bugs.python.org/17089

   (220) https://bugs.python.org/6083

   (221) https://bugs.python.org/5289

   (222) https://bugs.python.org/17106

   (223) https://bugs.python.org/17015

   (224) https://bugs.python.org/15633

   (225) https://bugs.python.org/12268

   (226) https://bugs.python.org/6972

   (227) https://bugs.python.org/4844

   (228) https://bugs.python.org/17071

   (229) https://bugs.python.org/12004

   (230) https://bugs.python.org/16972

   (231) https://bugs.python.org/1602133

   (232) https://bugs.python.org/15505

   (233) https://bugs.python.org/13454

   (234) https://bugs.python.org/12411

   (235) https://bugs.python.org/16957

   (236) https://bugs.python.org/1159051

   (237) https://bugs.python.org/16993

   (238) https://bugs.python.org/16992

   (239) https://bugs.python.org/16422

   (240) https://bugs.python.org/15861

   (241) https://bugs.python.org/9720

   (242) https://bugs.python.org/16955

   (243) https://bugs.python.org/15031

   (244) https://bugs.python.org/16398

   (245) https://bugs.python.org/16900

   (246) https://bugs.python.org/13899

   (247) https://bugs.python.org/15545

   (248) https://bugs.python.org/15972

   (249) https://bugs.python.org/8109

   (250) https://bugs.python.org/16860

   (251) https://bugs.python.org/16674

   (252) https://bugs.python.org/16009

   (253) https://bugs.python.org/16828

   (254) https://bugs.python.org/16833

   (255) https://bugs.python.org/16541

   (256) https://bugs.python.org/16820

   (257) https://bugs.python.org/16820

   (258) https://bugs.python.org/16820

   (259) https://bugs.python.org/9586

   (260) https://bugs.python.org/16787

   (261) https://bugs.python.org/10527

   (262) https://bugs.python.org/16688

   (263) https://bugs.python.org/16486

   (264) https://bugs.python.org/16485

   (265) https://bugs.python.org/16640

   (266) https://bugs.python.org/16165

   (267) https://bugs.python.org/16641

   (268) https://bugs.python.org/16618

   (269) https://bugs.python.org/16788

   (270) https://bugs.python.org/16713

   (271) https://bugs.python.org/16443

   (272) https://bugs.python.org/15701

   (273) https://bugs.python.org/16752

   (274) https://bugs.python.org/16646

   (275) https://bugs.python.org/16626

   (276) https://bugs.python.org/15783

   (277) https://bugs.python.org/11175

   (278) https://bugs.python.org/16488

   (279) https://bugs.python.org/16298

   (280) https://bugs.python.org/16049

   (281) https://bugs.python.org/15701

   (282) https://bugs.python.org/15872

   (283) https://bugs.python.org/16248

   (284) https://bugs.python.org/13390

   (285) https://bugs.python.org/16628

   (286) https://bugs.python.org/13614

   (287) https://bugs.python.org/13512

   (288) https://bugs.python.org/7719

   (289) https://bugs.python.org/13120

   (290) https://bugs.python.org/16585

   (291) https://bugs.python.org/10182

   (292) https://bugs.python.org/16333

   (293) https://bugs.python.org/16573

   (294) https://bugs.python.org/16464

   (295) https://bugs.python.org/12848

   (296) https://bugs.python.org/16423

   (297) https://bugs.python.org/4473

   (298) https://bugs.python.org/4473

   (299) https://bugs.python.org/4473

   (300) https://bugs.python.org/16522

   (301) https://bugs.python.org/15627

   (302) https://bugs.python.org/16408

   (303) https://bugs.python.org/14631

   (304) https://bugs.python.org/16469

   (305) https://bugs.python.org/16481

   (306) https://bugs.python.org/12428

   (307) https://bugs.python.org/16140

   (308) https://bugs.python.org/16327

   (309) https://bugs.python.org/14396

   (310) https://bugs.python.org/16411

   (311) https://bugs.python.org/16357

   (312) https://bugs.python.org/16409

   (313) https://bugs.python.org/16431

   (314) https://bugs.python.org/15641

   (315) https://bugs.python.org/16350

   (316) https://bugs.python.org/12759

   (317) https://bugs.python.org/16152

   (318) https://bugs.python.org/16284

   (319) https://bugs.python.org/16230

   (320) https://bugs.python.org/16228

   (321) https://bugs.python.org/16351

   (322) https://bugs.python.org/14897

   (323) https://bugs.python.org/16316

   (324) https://bugs.python.org/12890

   (325) https://bugs.python.org/16307

   (326) https://bugs.python.org/16305

   (327) https://bugs.python.org/16116

   (328) https://bugs.python.org/16245

   (329) https://bugs.python.org/16301

   (330) https://bugs.python.org/16250

   (331) https://bugs.python.org/10836

   (332) https://bugs.python.org/14398

   (333) https://bugs.python.org/12692

   (334) https://bugs.python.org/12034

   (335) https://bugs.python.org/16034

   (336) https://bugs.python.org/16220

   (337) https://bugs.python.org/16270

   (338) https://bugs.python.org/16461

   (339) https://bugs.python.org/16176

   (340) https://bugs.python.org/16088

   (341) https://bugs.python.org/16114

   (342) https://bugs.python.org/16169

   (343) https://bugs.python.org/16110

   (344) https://bugs.python.org/1492704

   (345) https://bugs.python.org/13896

   (346) https://bugs.python.org/15417

   (347) https://bugs.python.org/14377

   (348) https://bugs.python.org/16089

   (349) https://bugs.python.org/9650

   (350) https://bugs.python.org/15452

   (351) https://bugs.python.org/16034

   (352) https://bugs.python.org/15756

   (353) https://bugs.python.org/15323

   (354) https://bugs.python.org/16064

   (355) https://bugs.python.org/12376

   (356) https://bugs.python.org/15222

   (357) https://bugs.python.org/16013

   (358) https://bugs.python.org/15421

   (359) https://bugs.python.org/16112

   (360) https://bugs.python.org/15970

   (361) https://bugs.python.org/15842

   (362) https://bugs.python.org/15876

   (363) https://bugs.python.org/15881

   (364) https://bugs.python.org/15841

   (365) https://bugs.python.org/15447

   (366) https://bugs.python.org/15509

   (367) https://bugs.python.org/12776

   (368) https://bugs.python.org/11839

   (369) https://bugs.python.org/15906

   (370) https://bugs.python.org/16113

   (371) https://bugs.python.org/16692

   (372) https://bugs.python.org/16832


File: python.info,  Node: IDLE<13>,  Next: Tests<16>,  Prev: Library<25>,  Up: Python 3 4 0 Alpha 1

1.16.27.3 IDLE
..............

   - Issue #18429(1): Format / Format Paragraph, now works when comment
     blocks are selected.  As with text blocks, this works best when the
     selection only includes complete lines.

   - Issue #18226(2): Add docstrings and unittests for
     FormatParagraph.py.  Original patches by Todd Rovito and Phil
     Webster.

   - Issue #18279(3): Format - Strip trailing whitespace no longer marks
     a file as changed when it has not been changed.  This fix followed
     the addition of a test file originally written by Phil Webster (the
     issue’s main goal).

   - Issue #7136(4): In the Idle File menu, "New Window" is renamed "New
     File".  Patch by Tal Einat, Roget Serwy, and Todd Rovito.

   - Remove dead imports of imp.

   - Issue #18196(5): Avoid displaying spurious SystemExit tracebacks.

   - Issue #5492(6): Avoid traceback when exiting IDLE caused by a race
     condition.

   - Issue #17511(7): Keep IDLE find dialog open after clicking "Find
     Next".  Original patch by Sarah K.

   - Issue #18055(8): Move IDLE off of imp and on to importlib.

   - Issue #15392(9): Create a unittest framework for IDLE. Initial
     patch by Rajagopalasarma Jayakrishnan.  See
     Lib/idlelib/idle_test/README.txt for how to run Idle tests.

   - Issue #14146(10): Highlight source line while debugging on Windows.

   - Issue #17838(11): Allow sys.stdin to be reassigned.

   - Issue #13495(12): Avoid loading the color delegator twice in IDLE.

   - Issue #17798(13): Allow IDLE to edit new files when specified on
     command line.

   - Issue #14735(14): Update IDLE docs to omit "Control-z on Windows".

   - Issue #17532(15): Always include Options menu for IDLE on OS X.
     Patch by Guilherme Simões.

   - Issue #17585(16): Fixed IDLE regression.  Now closes when using
     exit() or quit().

   - Issue #17657(17): Show full Tk version in IDLE’s about dialog.
     Patch by Todd Rovito.

   - Issue #17613(18): Prevent traceback when removing syntax colorizer
     in IDLE.

   - Issue #1207589(19): Backwards-compatibility patch for right-click
     menu in IDLE.

   - Issue #16887(20): IDLE now accepts Cancel in tabify/untabify dialog
     box.

   - Issue #17625(21): In IDLE, close the replace dialog after it is
     used.

   - Issue #14254(22): IDLE now handles readline correctly across shell
     restarts.

   - Issue #17614(23): IDLE no longer raises exception when quickly
     closing a file.

   - Issue #6698(24): IDLE now opens just an editor window when
     configured to do so.

   - Issue #8900(25): Using keyboard shortcuts in IDLE to open a file no
     longer raises an exception.

   - Issue #6649(26): Fixed missing exit status in IDLE. Patch by
     Guilherme Polo.

   - Issue #17114(27): IDLE now uses non-strict config parser.

   - Issue #9290(28): In IDLE the sys.std* streams now implement
     io.TextIOBase interface and support all mandatory methods and
     properties.

   - Issue #5066(29): Update IDLE docs.  Patch by Todd Rovito.

   - Issue #16829(30): IDLE printing no longer fails if there are spaces
     or other special characters in the file path.

   - Issue #16491(31): IDLE now prints chained exception tracebacks.

   - Issue #16819(32): IDLE method completion now correctly works for
     bytes literals.

   - Issue #16504(33): IDLE now catches SyntaxErrors raised by
     tokenizer.  Patch by Roger Serwy.

   - Issue #16511(34): Use default IDLE width and height if config param
     is not valid.  Patch Serhiy Storchaka.

   - Issue #1207589(35): Add Cut/Copy/Paste items to IDLE right click
     Context Menu.  Patch by Todd Rovito.

   - Issue #16123(36): IDLE - deprecate running without a subprocess.
     Patch by Roger Serwy.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/18429

   (2) https://bugs.python.org/18226

   (3) https://bugs.python.org/18279

   (4) https://bugs.python.org/7136

   (5) https://bugs.python.org/18196

   (6) https://bugs.python.org/5492

   (7) https://bugs.python.org/17511

   (8) https://bugs.python.org/18055

   (9) https://bugs.python.org/15392

   (10) https://bugs.python.org/14146

   (11) https://bugs.python.org/17838

   (12) https://bugs.python.org/13495

   (13) https://bugs.python.org/17798

   (14) https://bugs.python.org/14735

   (15) https://bugs.python.org/17532

   (16) https://bugs.python.org/17585

   (17) https://bugs.python.org/17657

   (18) https://bugs.python.org/17613

   (19) https://bugs.python.org/1207589

   (20) https://bugs.python.org/16887

   (21) https://bugs.python.org/17625

   (22) https://bugs.python.org/14254

   (23) https://bugs.python.org/17614

   (24) https://bugs.python.org/6698

   (25) https://bugs.python.org/8900

   (26) https://bugs.python.org/6649

   (27) https://bugs.python.org/17114

   (28) https://bugs.python.org/9290

   (29) https://bugs.python.org/5066

   (30) https://bugs.python.org/16829

   (31) https://bugs.python.org/16491

   (32) https://bugs.python.org/16819

   (33) https://bugs.python.org/16504

   (34) https://bugs.python.org/16511

   (35) https://bugs.python.org/1207589

   (36) https://bugs.python.org/16123


File: python.info,  Node: Tests<16>,  Next: Build<20>,  Prev: IDLE<13>,  Up: Python 3 4 0 Alpha 1

1.16.27.4 Tests
...............

   - Issue #1666318(1): Add a test that shutil.copytree() retains
     directory permissions.  Patch by Catherine Devlin.

   - Issue #18273(2): move the tests in Lib/test/json_tests to
     Lib/test/test_json and make them discoverable by unittest.  Patch
     by Zachary Ware.

   - Fix a fcntl test case on KFreeBSD, Debian #708653 (Petr Salinger).

   - Issue #18396(3): Fix spurious test failure in test_signal on
     Windows when faulthandler is enabled (Patch by Jeremy Kloth)

   - Issue #17046(4): Fix broken test_executable_without_cwd in
     test_subprocess.

   - Issue #15415(5): Add new temp_dir() and change_cwd() context
     managers to test.support, and refactor temp_cwd() to use them.
     Patch by Chris Jerdonek.

   - Issue #15494(6): test.support is now a package rather than a module
     (Initial patch by Indra Talip)

   - Issue #17944(7): test_zipfile now discoverable and uses subclassing
     to generate tests for different compression types.  Fixed a bug
     with skipping some tests due to use of exhausted iterators.

   - Issue #18266(8): test_largefile now works with unittest test
     discovery and supports running only selected tests.  Patch by
     Zachary Ware.

   - Issue #17767(9): test_locale now works with unittest test
     discovery.  Original patch by Zachary Ware.

   - Issue #18375(10): Assume –randomize when –randseed is used for
     running the testsuite.

   - Issue #11185(11): Fix test_wait4 under AIX. Patch by Sébastien
     Sablé.

   - Issue #18207(12): Fix test_ssl for some versions of OpenSSL that
     ignore seconds in ASN1_TIME fields.

   - Issue #18094(13): test_uuid no longer reports skipped tests as
     passed.

   - Issue #17992(14): Add timeouts to asyncore and asynchat tests so
     that they won’t accidentally hang.

   - Issue #17833(15): Fix test_gdb failures seen on machines where
     debug symbols for glibc are available (seen on PPC64 Linux).

   - Issue #7855(16): Add tests for ctypes/winreg for issues found in
     IronPython.  Initial patch by Dino Viehland.

   - Issue #11078(17): test___all__ now checks for duplicates in
     __all__.  Initial patch by R. David Murray.

   - Issue #17712(18): Fix test_gdb failures on Ubuntu 13.04.

   - Issue #17835(19): Fix test_io when the default OS pipe buffer size
     is larger than one million bytes.

   - Issue #17065(20): Use process-unique key for winreg tests to avoid
     failures if test is run multiple times in parallel (eg: on a
     buildbot host).

   - Issue #12820(21): add tests for the xml.dom.minicompat module.
     Patch by John Chandler and Phil Connell.

   - Issue #17691(22): test_univnewlines now works with unittest test
     discovery.  Patch by Zachary Ware.

   - Issue #17790(23): test_set now works with unittest test discovery.
     Patch by Zachary Ware.

   - Issue #17789(24): test_random now works with unittest test
     discovery.  Patch by Zachary Ware.

   - Issue #17779(25): test_osx_env now works with unittest test
     discovery.  Patch by Zachary Ware.

   - Issue #17766(26): test_iterlen now works with unittest test
     discovery.  Patch by Zachary Ware.

   - Issue #17690(27): test_time now works with unittest test discovery.
     Patch by Zachary Ware.

   - Issue #17692(28): test_sqlite now works with unittest test
     discovery.  Patch by Zachary Ware.

   - Issue #11995(29): test_pydoc doesn’t import all sys.path modules
     anymore.

   - Issue #17448(30): test_sax now skips if there are no xml parsers
     available instead of raising an ImportError.

   - Issue #11420(31): make test suite pass with -B/DONTWRITEBYTECODE
     set.  Initial patch by Thomas Wouters.

   - Issue #10652(32): make tcl/tk tests run after __all__ test, patch
     by Zachary Ware.

   - Issue #11963(33): remove human verification from test_parser and
     test_subprocess.

   - Issue #11732(34): add a new suppress_crash_popup() context manager
     to test.support that disables crash popups on Windows and use it in
     test_faulthandler and test_capi.

   - Issue #13898(35): test_ssl no longer prints a spurious stack trace
     on Ubuntu.

   - Issue #17283(36): Share code between ‘__main__.py’ and
     ‘regrtest.py’ in ‘Lib/test’.

   - Issue #17249(37): convert a test in test_capi to use unittest and
     reap threads.

   - Issue #17107(38): Test client-side SNI support in urllib.request
     thanks to the new server-side SNI support in the ssl module.
     Initial patch by Daniel Black.

   - Issue #17041(39): Fix testing when Python is configured with the
     –without-doc-strings.

   - Issue #16923(40): Fix ResourceWarnings in test_ssl.

   - Issue #15539(41): Added regression tests for
     Tools/scripts/pindent.py.

   - Issue #17479(42): test_io now works with unittest test discovery.
     Patch by Zachary Ware.

   - Issue #17066(43): test_robotparser now works with unittest test
     discovery.  Patch by Zachary Ware.

   - Issue #17334(44): test_index now works with unittest test
     discovery.  Patch by Zachary Ware.

   - Issue #17333(45): test_imaplib now works with unittest test
     discovery.  Patch by Zachary Ware.

   - Issue #17082(46): test_dbm* now work with unittest test discovery.
     Patch by Zachary Ware.

   - Issue #17079(47): test_ctypes now works with unittest test
     discovery.  Patch by Zachary Ware.

   - Issue #17304(48): test_hash now works with unittest test discovery.
     Patch by Zachary Ware.

   - Issue #17303(49): test_future* now work with unittest test
     discovery.  Patch by Zachary Ware.

   - Issue #17163(50): test_file now works with unittest test discovery.
     Patch by Zachary Ware.

   - Issue #16925(51): test_configparser now works with unittest test
     discovery.  Patch by Zachary Ware.

   - Issue #16918(52): test_codecs now works with unittest test
     discovery.  Patch by Zachary Ware.

   - Issue #16919(53): test_crypt now works with unittest test
     discovery.  Patch by Zachary Ware.

   - Issue #16910(54): test_bytes, test_unicode, and test_userstring now
     work with unittest test discovery.  Patch by Zachary Ware.

   - Issue #16905(55): test_warnings now works with unittest test
     discovery.  Initial patch by Berker Peksag.

   - Issue #16898(56): test_bufio now works with unittest test
     discovery.  Patch by Zachary Ware.

   - Issue #16888(57): test_array now works with unittest test
     discovery.  Patch by Zachary Ware.

   - Issue #16896(58): test_asyncore now works with unittest test
     discovery.  Patch by Zachary Ware.

   - Issue #16897(59): test_bisect now works with unittest test
     discovery.  Initial patch by Zachary Ware.

   - Issue #16852(60): test_genericpath, test_posixpath, test_ntpath,
     and test_macpath now work with unittest test discovery.  Patch by
     Zachary Ware.

   - Issue #16748(61): test_heapq now works with unittest test
     discovery.

   - Issue #10646(62): Tests rearranged for os.samefile/samestat to
     check for not just symlinks but also hard links.

   - Issue #15302(63): Switch regrtest from using getopt to using
     argparse.

   - Issue #15324(64): Fix regrtest parsing of –fromfile, –match, and
     –randomize options.

   - Issue #16702(65): test_urllib2_localnet tests now correctly ignores
     proxies for localhost tests.

   - Issue #16664(66): Add regression tests for glob’s behaviour
     concerning entries starting with a ".".  Patch by Sebastian Kreft.

   - Issue #13390(67): The ‘-R’ option to regrtest now also checks for
     memory allocation leaks, using *note sys.getallocatedblocks(): 4e3.

   - Issue #16559(68): Add more tests for the json module, including
     some from the official test suite at json.org.  Patch by Serhiy
     Storchaka.

   - Issue #16661(69): Fix the *note os.getgrouplist(): 690. test by not
     assuming that it gives the same output as ‘id -G’.

   - Issue #16115(70): Add some tests for the executable argument to
     subprocess.Popen().  Initial patch by Kushal Das.

   - Issue #16126(71): PyErr_Format format mismatch in
     _testcapimodule.c.  Patch by Serhiy Storchaka.

   - Issue #15304(72): Fix warning message when *note os.chdir(): 673.
     fails inside *note test.support.temp_cwd(): bbc.  Patch by Chris
     Jerdonek.

   - Issue #15802(73): Fix test logic in
     ‘TestMaildir.test_create_tmp()’.  Patch by Serhiy Storchaka.

   - Issue #15557(74): Added a test suite for the webbrowser module,
     thanks to Anton Barkovsky.

   - Issue #16698(75): Skip posix test_getgroups when built with OS X
     deployment target prior to 10.6.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/1666318

   (2) https://bugs.python.org/18273

   (3) https://bugs.python.org/18396

   (4) https://bugs.python.org/17046

   (5) https://bugs.python.org/15415

   (6) https://bugs.python.org/15494

   (7) https://bugs.python.org/17944

   (8) https://bugs.python.org/18266

   (9) https://bugs.python.org/17767

   (10) https://bugs.python.org/18375

   (11) https://bugs.python.org/11185

   (12) https://bugs.python.org/18207

   (13) https://bugs.python.org/18094

   (14) https://bugs.python.org/17992

   (15) https://bugs.python.org/17833

   (16) https://bugs.python.org/7855

   (17) https://bugs.python.org/11078

   (18) https://bugs.python.org/17712

   (19) https://bugs.python.org/17835

   (20) https://bugs.python.org/17065

   (21) https://bugs.python.org/12820

   (22) https://bugs.python.org/17691

   (23) https://bugs.python.org/17790

   (24) https://bugs.python.org/17789

   (25) https://bugs.python.org/17779

   (26) https://bugs.python.org/17766

   (27) https://bugs.python.org/17690

   (28) https://bugs.python.org/17692

   (29) https://bugs.python.org/11995

   (30) https://bugs.python.org/17448

   (31) https://bugs.python.org/11420

   (32) https://bugs.python.org/10652

   (33) https://bugs.python.org/11963

   (34) https://bugs.python.org/11732

   (35) https://bugs.python.org/13898

   (36) https://bugs.python.org/17283

   (37) https://bugs.python.org/17249

   (38) https://bugs.python.org/17107

   (39) https://bugs.python.org/17041

   (40) https://bugs.python.org/16923

   (41) https://bugs.python.org/15539

   (42) https://bugs.python.org/17479

   (43) https://bugs.python.org/17066

   (44) https://bugs.python.org/17334

   (45) https://bugs.python.org/17333

   (46) https://bugs.python.org/17082

   (47) https://bugs.python.org/17079

   (48) https://bugs.python.org/17304

   (49) https://bugs.python.org/17303

   (50) https://bugs.python.org/17163

   (51) https://bugs.python.org/16925

   (52) https://bugs.python.org/16918

   (53) https://bugs.python.org/16919

   (54) https://bugs.python.org/16910

   (55) https://bugs.python.org/16905

   (56) https://bugs.python.org/16898

   (57) https://bugs.python.org/16888

   (58) https://bugs.python.org/16896

   (59) https://bugs.python.org/16897

   (60) https://bugs.python.org/16852

   (61) https://bugs.python.org/16748

   (62) https://bugs.python.org/10646

   (63) https://bugs.python.org/15302

   (64) https://bugs.python.org/15324

   (65) https://bugs.python.org/16702

   (66) https://bugs.python.org/16664

   (67) https://bugs.python.org/13390

   (68) https://bugs.python.org/16559

   (69) https://bugs.python.org/16661

   (70) https://bugs.python.org/16115

   (71) https://bugs.python.org/16126

   (72) https://bugs.python.org/15304

   (73) https://bugs.python.org/15802

   (74) https://bugs.python.org/15557

   (75) https://bugs.python.org/16698


File: python.info,  Node: Build<20>,  Next: C-API<2>,  Prev: Tests<16>,  Up: Python 3 4 0 Alpha 1

1.16.27.5 Build
...............

   - Issue #16067(1): Add description into MSI file to replace
     installer’s temporary name.

   - Issue #18257(2): Fix readlink usage in python-config.  Install the
     python version again on Darwin.

   - Issue #18481(3): Add C coverage reporting with gcov and lcov.  A
     new make target "coverage-report" creates an instrumented Python
     build, runs unit tests and creates a HTML. The report can be
     updated with "make coverage-lcov".

   - Issue #17845(4): Clarified the message printed when some module are
     not built.

   - Issue #18256(5): Compilation fix for recent AIX releases.  Patch by
     David Edelsohn.

   - Issue #17547(6): In configure, explicitly pass -Wformat for the
     benefit for GCC 4.8.

   - Issue #15172(7): Document NASM 2.10+ as requirement for building
     OpenSSL 1.0.1 on Windows.

   - Issue #17591(8): Use lowercase filenames when including Windows
     header files.  Patch by Roumen Petrov.

   - Issue #17550(9): Fix the –enable-profiling configure switch.

   - Issue #17425(10): Build with openssl 1.0.1d on Windows.

   - Issue #16754(11): Fix the incorrect shared library extension on
     linux.  Introduce two makefile macros SHLIB_SUFFIX and EXT_SUFFIX.
     SO now has the value of SHLIB_SUFFIX again (as in 2.x and 3.1).
     The SO macro is removed in 3.4.

   - Issue #5033(12): Fix building of the sqlite3 extension module when
     the SQLite library version has "beta" in it.  Patch by Andreas
     Pelme.

   - Issue #17228(13): Fix building without pymalloc.

   - Issue #3718(14): Use AC_ARG_VAR to set MACHDEP in configure.ac.

   - Issue #16235(15): Implement python-config as a shell script.

   - Issue #16769(16): Remove outdated Visual Studio projects.

   - Issue #17031(17): Fix running regen in cross builds.

   - Issue #3754(18): fix typo in pthread AC_CACHE_VAL.

   - Issue #15484(19): Fix _PYTHON_PROJECT_BASE for srcdir != builddir
     builds; use _PYTHON_PROJECT_BASE in distutils/sysconfig.py.

   - Drop support for Windows 2000 (changeset e52df05b496a).

   - Issue #17029(20): Let h2py search the multiarch system include
     directory.

   - Issue #16953(21): Fix socket module compilation on platforms with
     HAVE_BROKEN_POLL. Patch by Jeffrey Armstrong.

   - Issue #16320(22): Remove redundant Makefile dependencies for
     strings and bytes.

   - Cross compiling needs host and build settings.  configure no longer
     creates a broken PYTHON_FOR_BUILD variable when –build is missing.

   - Fix cross compiling issue in setup.py, ensure that lib_dirs and
     inc_dirs are defined in cross compiling mode, too.

   - Issue #16836(23): Enable IPv6 support even if IPv6 is disabled on
     the build host.

   - Issue #16593(24): Have BSD ’make -s’ do the right thing, thanks to
     Daniel Shahaf

   - Issue #16262(25): fix out-of-src-tree builds, if mercurial is not
     installed.

   - Issue #15298(26): ensure _sysconfigdata is generated in build
     directory, not source directory.

   - Issue #15833(27): Fix a regression in 3.3 that resulted in
     exceptions being raised if importlib failed to write byte-compiled
     files.  This affected attempts to build Python out-of-tree from a
     read-only source directory.

   - Issue #15923(28): Fix a mistake in ‘asdl_c.py’ that resulted in a
     TypeError after 2801bf875a24 (see #15801).

   - Issue #16135(29): Remove OS/2 support.

   - Issue #15819(30): Make sure we can build Python out-of-tree from a
     read-only source directory.  (Somewhat related to issue #9860(31).)

   - Issue #15587(32): Enable Tk high-resolution text rendering on Macs
     with Retina displays.  Applies to Tkinter apps, such as IDLE, on OS
     X framework builds linked with Cocoa Tk 8.5.

   - Issue #17161(33): make install now also installs a python3 man
     page.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/16067

   (2) https://bugs.python.org/18257

   (3) https://bugs.python.org/18481

   (4) https://bugs.python.org/17845

   (5) https://bugs.python.org/18256

   (6) https://bugs.python.org/17547

   (7) https://bugs.python.org/15172

   (8) https://bugs.python.org/17591

   (9) https://bugs.python.org/17550

   (10) https://bugs.python.org/17425

   (11) https://bugs.python.org/16754

   (12) https://bugs.python.org/5033

   (13) https://bugs.python.org/17228

   (14) https://bugs.python.org/3718

   (15) https://bugs.python.org/16235

   (16) https://bugs.python.org/16769

   (17) https://bugs.python.org/17031

   (18) https://bugs.python.org/3754

   (19) https://bugs.python.org/15484

   (20) https://bugs.python.org/17029

   (21) https://bugs.python.org/16953

   (22) https://bugs.python.org/16320

   (23) https://bugs.python.org/16836

   (24) https://bugs.python.org/16593

   (25) https://bugs.python.org/16262

   (26) https://bugs.python.org/15298

   (27) https://bugs.python.org/15833

   (28) https://bugs.python.org/15923

   (29) https://bugs.python.org/16135

   (30) https://bugs.python.org/15819

   (31) https://bugs.python.org/9860

   (32) https://bugs.python.org/15587

   (33) https://bugs.python.org/17161


File: python.info,  Node: C-API<2>,  Next: Documentation<15>,  Prev: Build<20>,  Up: Python 3 4 0 Alpha 1

1.16.27.6 C-API
...............

   - Issue #18351(1): Fix various issues in a function in importlib
     provided to help PyImport_ExecCodeModuleWithPathnames() (and thus
     by extension PyImport_ExecCodeModule() and
     PyImport_ExecCodeModuleEx()).

   - Issue #9369(2): The types of ‘char*’ arguments of
     PyObject_CallFunction() and PyObject_CallMethod() now changed to
     ‘const char*’.  Based on patches by Jörg Müller and Lars Buitinck.

   - Issue #17206(3): Py_CLEAR(), Py_DECREF(), Py_XINCREF() and
     Py_XDECREF() now expand their arguments once instead of multiple
     times.  Patch written by Illia Polosukhin.

   - Issue #17522(4): Add the PyGILState_Check() API.

   - Issue #17327(5): Add PyDict_SetDefault.

   - Issue #16881(6): Fix Py_ARRAY_LENGTH macro for GCC < 3.1.

   - Issue #16505(7): Remove unused Py_TPFLAGS_INT_SUBCLASS.

   - Issue #16086(8): PyTypeObject.tp_flags and PyType_Spec.flags are
     now unsigned (unsigned long and unsigned int) to avoid an undefined
     behaviour with Py_TPFLAGS_TYPE_SUBCLASS ((1 << 31).
     PyType_GetFlags() result type is now unsigned too (unsigned long,
     instead of long).

   - Issue #16166(9): Add PY_LITTLE_ENDIAN and PY_BIG_ENDIAN macros and
     unified endianness detection and handling.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/18351

   (2) https://bugs.python.org/9369

   (3) https://bugs.python.org/17206

   (4) https://bugs.python.org/17522

   (5) https://bugs.python.org/17327

   (6) https://bugs.python.org/16881

   (7) https://bugs.python.org/16505

   (8) https://bugs.python.org/16086

   (9) https://bugs.python.org/16166


File: python.info,  Node: Documentation<15>,  Next: Tools/Demos<13>,  Prev: C-API<2>,  Up: Python 3 4 0 Alpha 1

1.16.27.7 Documentation
.......................

   - Issue #23006(1): Improve the documentation and indexing of
     dict.__missing__.  Add an entry in the language datamodel special
     methods section.  Revise and index its discussion in the stdtypes
     mapping/dict section.

   - Issue #17701(2): Improving strftime documentation.

   - Issue #18440(3): Clarify that *note hash(): 5e6. can truncate the
     value returned from an object’s custom ‘__hash__()’ method.

   - Issue #17844(4): Add links to encoders and decoders for
     bytes-to-bytes codecs.

   - Issue #14097(5): improve the "introduction" page of the tutorial.

   - Issue #17977(6): The documentation for the cadefault argument’s
     default value in urllib.request.urlopen() is fixed to match the
     code.

   - Issue #6696(7): add documentation for the Profile objects, and
     improve profile/cProfile docs.  Patch by Tom Pinckney.

   - Issue #15940(8): Specify effect of locale on time functions.

   - Issue #17538(9): Document XML vulnerabilties

   - Issue #16642(10): sched.scheduler timefunc initial default is
     time.monotonic.  Patch by Ramchandra Apte

   - Issue #17047(11): remove doubled words in docs and docstrings
     reported by Serhiy Storchaka and Matthew Barnett.

   - Issue #15465(12): Document the versioning macros in the C API docs
     rather than the standard library docs.  Patch by Kushal Das.

   - Issue #16406(13): Combine the pages for uploading and registering
     to PyPI.

   - Issue #16403(14): Document how distutils uses the maintainer field
     in PKG-INFO. Patch by Jyrki Pulliainen.

   - Issue #16695(15): Document how glob handles filenames starting with
     a dot.  Initial patch by Jyrki Pulliainen.

   - Issue #8890(16): Stop advertising an insecure practice by replacing
     uses of the /tmp directory with better alternatives in the
     documentation.  Patch by Geoff Wilson.

   - Issue #17203(17): add long option names to unittest discovery docs.

   - Issue #13094(18): add "Why do lambdas defined in a loop with
     different values all return the same result?"  programming FAQ.

   - Issue #14901(19): Update portions of the Windows FAQ. Patch by
     Ashish Nitin Patil.

   - Issue #16267(20): Better document the 3.3+ approach to combining
     @abstractmethod with @staticmethod, @classmethod and @property

   - Issue #15209(21): Clarify exception chaining description in
     exceptions module documentation

   - Issue #15990(22): Improve argument/parameter documentation.

   - Issue #16209(23): Move the documentation for the str built-in
     function to a new str class entry in the "Text Sequence Type"
     section.

   - Issue #13538(24): Improve str() and object.__str__() documentation.

   - Issue #16489(25): Make it clearer that importlib.find_loader()
     needs parent packages to be explicitly imported.

   - Issue #16400(26): Update the description of which versions of a
     given package PyPI displays.

   - Issue #15677(27): Document that zlib and gzip accept a compression
     level of 0 to mean ’no compression’.  Patch by Brian Brazil.

   - Issue #16197(28): Update winreg docstrings and documentation to
     match code.  Patch by Zachary Ware.

   - Issue #8040(29): added a version switcher to the documentation.
     Patch by Yury Selivanov.

   - Issue #16241(30): Document -X faulthandler command line option.
     Patch by Marek Šuppa.

   - Additional comments and some style changes in the
     concurrent.futures URL retrieval example

   - Issue #16115(31): Improve subprocess.Popen() documentation around
     args, shell, and executable arguments.

   - Issue #13498(32): Clarify docs of os.makedirs()’s exist_ok
     argument.  Done with great native-speaker help from R. David
     Murray.

   - Issue #15533(33): Clarify docs and add tests for *note
     subprocess.Popen(): 7d8.’s cwd argument.

   - Issue #15979(34): Improve timeit documentation.

   - Issue #16036(35): Improve documentation of built-in *note int():
     227.’s signature and arguments.

   - Issue #15935(36): Clarification of *note argparse: 6. docs, re:
     add_argument() type and default arguments.  Patch contributed by
     Chris Jerdonek.

   - Issue #11964(37): Document a change in v3.2 to the behavior of the
     indent parameter of json encoding operations.

   - Issue #15116(38): Remove references to appscript as it is no longer
     being supported.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/23006

   (2) https://bugs.python.org/17701

   (3) https://bugs.python.org/18440

   (4) https://bugs.python.org/17844

   (5) https://bugs.python.org/14097

   (6) https://bugs.python.org/17977

   (7) https://bugs.python.org/6696

   (8) https://bugs.python.org/15940

   (9) https://bugs.python.org/17538

   (10) https://bugs.python.org/16642

   (11) https://bugs.python.org/17047

   (12) https://bugs.python.org/15465

   (13) https://bugs.python.org/16406

   (14) https://bugs.python.org/16403

   (15) https://bugs.python.org/16695

   (16) https://bugs.python.org/8890

   (17) https://bugs.python.org/17203

   (18) https://bugs.python.org/13094

   (19) https://bugs.python.org/14901

   (20) https://bugs.python.org/16267

   (21) https://bugs.python.org/15209

   (22) https://bugs.python.org/15990

   (23) https://bugs.python.org/16209

   (24) https://bugs.python.org/13538

   (25) https://bugs.python.org/16489

   (26) https://bugs.python.org/16400

   (27) https://bugs.python.org/15677

   (28) https://bugs.python.org/16197

   (29) https://bugs.python.org/8040

   (30) https://bugs.python.org/16241

   (31) https://bugs.python.org/16115

   (32) https://bugs.python.org/13498

   (33) https://bugs.python.org/15533

   (34) https://bugs.python.org/15979

   (35) https://bugs.python.org/16036

   (36) https://bugs.python.org/15935

   (37) https://bugs.python.org/11964

   (38) https://bugs.python.org/15116


File: python.info,  Node: Tools/Demos<13>,  Next: Windows<6>,  Prev: Documentation<15>,  Up: Python 3 4 0 Alpha 1

1.16.27.8 Tools/Demos
.....................

   - Issue #18817(1): Fix a resource warning in Lib/aifc.py demo.  Patch
     by Vajrasky Kok.

   - Issue #18439(2): Make patchcheck work on Windows for ACKS, NEWS.

   - Issue #18448(3): Fix a typo in Tools/demo/eiffel.py.

   - Issue #18457(4): Fixed saving of formulas and complex numbers in
     Tools/demo/ss1.py.

   - Issue #18449(5): Make Tools/demo/ss1.py work again on Python 3.
     Patch by Févry Thibault.

   - Issue #12990(6): The "Python Launcher" on OSX could not launch
     python scripts that have paths that include wide characters.

   - Issue #15239(7): Make mkstringprep.py work again on Python 3.

   - Issue #17028(8): Allowed Python arguments to be supplied to the
     Windows launcher.

   - Issue #17156(9): pygettext.py now detects the encoding of source
     files and correctly writes and escapes non-ascii characters.

   - Issue #15539(10): Fix a number of bugs in Tools/scripts/pindent.py.
     Now pindent.py works with a "with" statement.  pindent.py no longer
     produces improper indentation.  pindent.py now works with continued
     lines broken after "class" or "def" keywords and with continuations
     at the start of line.

   - Issue #11797(11): Add a 2to3 fixer that maps reload() to
     imp.reload().

   - Issue #10966(12): Remove the concept of unexpected skipped tests.

   - Issue #9893(13): Removed the Misc/Vim directory.

   - Removed the Misc/TextMate directory.

   - Issue #16245(14): Add the Tools/scripts/parse_html5_entities.py
     script to parse the list of HTML5 entities and update the
     html.entities.html5 dictionary.

   - Issue #15378(15): Fix Tools/unicode/comparecodecs.py.  Patch by
     Serhiy Storchaka.

   - Issue #16549(16): Make json.tool work again on Python 3 and add
     tests.  Initial patch by Berker Peksag and Serhiy Storchaka.

   - Issue #13301(17): use ast.literal_eval() instead of eval() in
     Tools/i18n/msgfmt.py.  Patch by Serhiy Storchaka.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/18817

   (2) https://bugs.python.org/18439

   (3) https://bugs.python.org/18448

   (4) https://bugs.python.org/18457

   (5) https://bugs.python.org/18449

   (6) https://bugs.python.org/12990

   (7) https://bugs.python.org/15239

   (8) https://bugs.python.org/17028

   (9) https://bugs.python.org/17156

   (10) https://bugs.python.org/15539

   (11) https://bugs.python.org/11797

   (12) https://bugs.python.org/10966

   (13) https://bugs.python.org/9893

   (14) https://bugs.python.org/16245

   (15) https://bugs.python.org/15378

   (16) https://bugs.python.org/16549

   (17) https://bugs.python.org/13301


File: python.info,  Node: Windows<6>,  Prev: Tools/Demos<13>,  Up: Python 3 4 0 Alpha 1

1.16.27.9 Windows
.................

   - Issue #18569(1): The installer now adds .py to the PATHEXT variable
     when extensions are registered.  Patch by Paul Moore.

`(For information about older versions, consult the HISTORY file.)'

   ---------- Footnotes ----------

   (1) https://bugs.python.org/18569


File: python.info,  Node: The Python Tutorial,  Next: Python Setup and Usage,  Prev: What's New in Python,  Up: Top

2 The Python Tutorial
*********************

Python is an easy to learn, powerful programming language.  It has
efficient high-level data structures and a simple but effective approach
to object-oriented programming.  Python’s elegant syntax and dynamic
typing, together with its interpreted nature, make it an ideal language
for scripting and rapid application development in many areas on most
platforms.

The Python interpreter and the extensive standard library are freely
available in source or binary form for all major platforms from the
Python Web site, ‘https://www.python.org/’, and may be freely
distributed.  The same site also contains distributions of and pointers
to many free third party Python modules, programs and tools, and
additional documentation.

The Python interpreter is easily extended with new functions and data
types implemented in C or C++ (or other languages callable from C).
Python is also suitable as an extension language for customizable
applications.

This tutorial introduces the reader informally to the basic concepts and
features of the Python language and system.  It helps to have a Python
interpreter handy for hands-on experience, but all examples are
self-contained, so the tutorial can be read off-line as well.

For a description of standard objects and modules, see *note The Python
Standard Library: bc5.  *note The Python Language Reference: bc6. gives
a more formal definition of the language.  To write extensions in C or
C++, read *note Extending and Embedding the Python Interpreter: bc7. and
*note Python/C API Reference Manual: bc8.  There are also several books
covering Python in depth.

This tutorial does not attempt to be comprehensive and cover every
single feature, or even every commonly used feature.  Instead, it
introduces many of Python’s most noteworthy features, and will give you
a good idea of the language’s flavor and style.  After reading it, you
will be able to read and write Python modules and programs, and you will
be ready to learn more about the various Python library modules
described in *note The Python Standard Library: bc5.

The *note Glossary: bc9. is also worth going through.

* Menu:

* Whetting Your Appetite:: 
* Using the Python Interpreter:: 
* An Informal Introduction to Python:: 
* More Control Flow Tools:: 
* Data Structures:: 
* Modules:: 
* Input and Output:: 
* Errors and Exceptions:: 
* Classes:: 
* Brief Tour of the Standard Library:: 
* Brief Tour of the Standard Library: Brief Tour of the Standard Library -- Part II. Part II
* Virtual Environments and Packages:: 
* What Now?:: 
* Interactive Input Editing and History Substitution:: 
* Floating Point Arithmetic; Issues and Limitations: Floating Point Arithmetic Issues and Limitations. 
* Appendix:: 


File: python.info,  Node: Whetting Your Appetite,  Next: Using the Python Interpreter,  Up: The Python Tutorial

2.1 Whetting Your Appetite
==========================

If you do much work on computers, eventually you find that there’s some
task you’d like to automate.  For example, you may wish to perform a
search-and-replace over a large number of text files, or rename and
rearrange a bunch of photo files in a complicated way.  Perhaps you’d
like to write a small custom database, or a specialized GUI application,
or a simple game.

If you’re a professional software developer, you may have to work with
several C/C++/Java libraries but find the usual
write/compile/test/re-compile cycle is too slow.  Perhaps you’re writing
a test suite for such a library and find writing the testing code a
tedious task.  Or maybe you’ve written a program that could use an
extension language, and you don’t want to design and implement a whole
new language for your application.

Python is just the language for you.

You could write a Unix shell script or Windows batch files for some of
these tasks, but shell scripts are best at moving around files and
changing text data, not well-suited for GUI applications or games.  You
could write a C/C++/Java program, but it can take a lot of development
time to get even a first-draft program.  Python is simpler to use,
available on Windows, Mac OS X, and Unix operating systems, and will
help you get the job done more quickly.

Python is simple to use, but it is a real programming language, offering
much more structure and support for large programs than shell scripts or
batch files can offer.  On the other hand, Python also offers much more
error checking than C, and, being a `very-high-level language', it has
high-level data types built in, such as flexible arrays and
dictionaries.  Because of its more general data types Python is
applicable to a much larger problem domain than Awk or even Perl, yet
many things are at least as easy in Python as in those languages.

Python allows you to split your program into modules that can be reused
in other Python programs.  It comes with a large collection of standard
modules that you can use as the basis of your programs — or as examples
to start learning to program in Python.  Some of these modules provide
things like file I/O, system calls, sockets, and even interfaces to
graphical user interface toolkits like Tk.

Python is an interpreted language, which can save you considerable time
during program development because no compilation and linking is
necessary.  The interpreter can be used interactively, which makes it
easy to experiment with features of the language, to write throw-away
programs, or to test functions during bottom-up program development.  It
is also a handy desk calculator.

Python enables programs to be written compactly and readably.  Programs
written in Python are typically much shorter than equivalent C, C++, or
Java programs, for several reasons:

   * the high-level data types allow you to express complex operations
     in a single statement;

   * statement grouping is done by indentation instead of beginning and
     ending brackets;

   * no variable or argument declarations are necessary.

Python is `extensible': if you know how to program in C it is easy to
add a new built-in function or module to the interpreter, either to
perform critical operations at maximum speed, or to link Python programs
to libraries that may only be available in binary form (such as a
vendor-specific graphics library).  Once you are really hooked, you can
link the Python interpreter into an application written in C and use it
as an extension or command language for that application.

By the way, the language is named after the BBC show "Monty Python’s
Flying Circus" and has nothing to do with reptiles.  Making references
to Monty Python skits in documentation is not only allowed, it is
encouraged!

Now that you are all excited about Python, you’ll want to examine it in
some more detail.  Since the best way to learn a language is to use it,
the tutorial invites you to play with the Python interpreter as you
read.

In the next chapter, the mechanics of using the interpreter are
explained.  This is rather mundane information, but essential for trying
out the examples shown later.

The rest of the tutorial introduces various features of the Python
language and system through examples, beginning with simple expressions,
statements and data types, through functions and modules, and finally
touching upon advanced concepts like exceptions and user-defined
classes.

3.6..  _tut-using:


File: python.info,  Node: Using the Python Interpreter,  Next: An Informal Introduction to Python,  Prev: Whetting Your Appetite,  Up: The Python Tutorial

2.2 Using the Python Interpreter
================================

* Menu:

* Invoking the Interpreter:: 
* The Interpreter and Its Environment:: 


File: python.info,  Node: Invoking the Interpreter,  Next: The Interpreter and Its Environment,  Up: Using the Python Interpreter

2.2.1 Invoking the Interpreter
------------------------------

The Python interpreter is usually installed as
‘/usr/local/bin/python3.6’ on those machines where it is available;
putting ‘/usr/local/bin’ in your Unix shell’s search path makes it
possible to start it by typing the command:

     python3.6

to the shell.  (1) Since the choice of the directory where the
interpreter lives is an installation option, other places are possible;
check with your local Python guru or system administrator.  (E.g.,
‘/usr/local/python’ is a popular alternative location.)

On Windows machines, the Python installation is usually placed in
‘C:\Python36’, though you can change this when you’re running the
installer.  To add this directory to your path, you can type the
following command into the command prompt in a DOS box:

     set path=%path%;C:\python36

Typing an end-of-file character (‘Control-D’ on Unix, ‘Control-Z’ on
Windows) at the primary prompt causes the interpreter to exit with a
zero exit status.  If that doesn’t work, you can exit the interpreter by
typing the following command: ‘quit()’.

The interpreter’s line-editing features include interactive editing,
history substitution and code completion on systems that support
readline.  Perhaps the quickest check to see whether command line
editing is supported is typing ‘Control-P’ to the first Python prompt
you get.  If it beeps, you have command line editing; see Appendix *note
Interactive Input Editing and History Substitution: bd1. for an
introduction to the keys.  If nothing appears to happen, or if ‘^P’ is
echoed, command line editing isn’t available; you’ll only be able to use
backspace to remove characters from the current line.

The interpreter operates somewhat like the Unix shell: when called with
standard input connected to a tty device, it reads and executes commands
interactively; when called with a file name argument or with a file as
standard input, it reads and executes a `script' from that file.

A second way of starting the interpreter is ‘python -c command [arg]
...’, which executes the statement(s) in `command', analogous to the
shell’s *note -c: bd2. option.  Since Python statements often contain
spaces or other characters that are special to the shell, it is usually
advised to quote `command' in its entirety with single quotes.

Some Python modules are also useful as scripts.  These can be invoked
using ‘python -m module [arg] ...’, which executes the source file for
`module' as if you had spelled out its full name on the command line.

When a script file is used, it is sometimes useful to be able to run the
script and enter interactive mode afterwards.  This can be done by
passing *note -i: aa1. before the script.

All command line options are described in *note Command line and
environment: bd3.

* Menu:

* Argument Passing:: 
* Interactive Mode:: 

   ---------- Footnotes ----------

   (1) On Unix, the Python 3.x interpreter is by default not installed
with the executable named ‘python’, so that it does not conflict with a
simultaneously installed Python 2.x executable.


File: python.info,  Node: Argument Passing,  Next: Interactive Mode,  Up: Invoking the Interpreter

2.2.1.1 Argument Passing
........................

When known to the interpreter, the script name and additional arguments
thereafter are turned into a list of strings and assigned to the ‘argv’
variable in the ‘sys’ module.  You can access this list by executing
‘import sys’.  The length of the list is at least one; when no script
and no arguments are given, ‘sys.argv[0]’ is an empty string.  When the
script name is given as ‘'-'’ (meaning standard input), ‘sys.argv[0]’ is
set to ‘'-'’.  When *note -c: bd2. `command' is used, ‘sys.argv[0]’ is
set to ‘'-c'’.  When *note -m: 8b4. `module' is used, ‘sys.argv[0]’ is
set to the full name of the located module.  Options found after *note
-c: bd2. `command' or *note -m: 8b4. `module' are not consumed by the
Python interpreter’s option processing but left in ‘sys.argv’ for the
command or module to handle.


File: python.info,  Node: Interactive Mode,  Prev: Argument Passing,  Up: Invoking the Interpreter

2.2.1.2 Interactive Mode
........................

When commands are read from a tty, the interpreter is said to be in
`interactive mode'.  In this mode it prompts for the next command with
the `primary prompt', usually three greater-than signs (‘>>>’); for
continuation lines it prompts with the `secondary prompt', by default
three dots (‘...’).  The interpreter prints a welcome message stating
its version number and a copyright notice before printing the first
prompt:

     $ python3.6
     Python 3.6 (default, Sep 16 2015, 09:25:04)
     [GCC 4.8.2] on linux
     Type "help", "copyright", "credits" or "license" for more information.
     >>>

Continuation lines are needed when entering a multi-line construct.  As
an example, take a look at this *note if: a65. statement:

     >>> the_world_is_flat = True
     >>> if the_world_is_flat:
     ...     print("Be careful not to fall off!")
     ...
     Be careful not to fall off!

For more on interactive mode, see *note Interactive Mode: bd7.


File: python.info,  Node: The Interpreter and Its Environment,  Prev: Invoking the Interpreter,  Up: Using the Python Interpreter

2.2.2 The Interpreter and Its Environment
-----------------------------------------

* Menu:

* Source Code Encoding:: 


File: python.info,  Node: Source Code Encoding,  Up: The Interpreter and Its Environment

2.2.2.1 Source Code Encoding
............................

By default, Python source files are treated as encoded in UTF-8.  In
that encoding, characters of most languages in the world can be used
simultaneously in string literals, identifiers and comments — although
the standard library only uses ASCII characters for identifiers, a
convention that any portable code should follow.  To display all these
characters properly, your editor must recognize that the file is UTF-8,
and it must use a font that supports all the characters in the file.

It is also possible to specify a different encoding for source files.
In order to do this, put one more special comment line right after the
‘#!’ line to define the source file encoding:

     # -*- coding: encoding -*-

With that declaration, everything in the source file will be treated as
having the encoding `encoding' instead of UTF-8.  The list of possible
encodings can be found in the Python Library Reference, in the section
on *note codecs: 1c.

For example, if your editor of choice does not support UTF-8 encoded
files and insists on using some other encoding, say Windows-1252, you
can write:

     # -*- coding: cp-1252 -*-

and still use all characters in the Windows-1252 character set in the
source files.  The special encoding comment must be in the `first or
second' line within the file.


File: python.info,  Node: An Informal Introduction to Python,  Next: More Control Flow Tools,  Prev: Using the Python Interpreter,  Up: The Python Tutorial

2.3 An Informal Introduction to Python
======================================

In the following examples, input and output are distinguished by the
presence or absence of prompts (*note >>>: bdf. and *note ...: be0.): to
repeat the example, you must type everything after the prompt, when the
prompt appears; lines that do not begin with a prompt are output from
the interpreter.  Note that a secondary prompt on a line by itself in an
example means you must type a blank line; this is used to end a
multi-line command.

Many of the examples in this manual, even those entered at the
interactive prompt, include comments.  Comments in Python start with the
hash character, ‘#’, and extend to the end of the physical line.  A
comment may appear at the start of a line or following whitespace or
code, but not within a string literal.  A hash character within a string
literal is just a hash character.  Since comments are to clarify code
and are not interpreted by Python, they may be omitted when typing in
examples.

Some examples:

     # this is the first comment
     spam = 1  # and this is the second comment
               # ... and now a third!
     text = "# This is not a comment because it's inside quotes."

* Menu:

* Using Python as a Calculator:: 
* First Steps Towards Programming:: 


File: python.info,  Node: Using Python as a Calculator,  Next: First Steps Towards Programming,  Up: An Informal Introduction to Python

2.3.1 Using Python as a Calculator
----------------------------------

Let’s try some simple Python commands.  Start the interpreter and wait
for the primary prompt, ‘>>>’.  (It shouldn’t take long.)

* Menu:

* Numbers:: 
* Strings:: 
* Lists:: 


File: python.info,  Node: Numbers,  Next: Strings,  Up: Using Python as a Calculator

2.3.1.1 Numbers
...............

The interpreter acts as a simple calculator: you can type an expression
at it and it will write the value.  Expression syntax is
straightforward: the operators ‘+’, ‘-’, ‘*’ and ‘/’ work just like in
most other languages (for example, Pascal or C); parentheses (‘()’) can
be used for grouping.  For example:

     >>> 2 + 2
     4
     >>> 50 - 5*6
     20
     >>> (50 - 5*6) / 4
     5.0
     >>> 8 / 5  # division always returns a floating point number
     1.6

The integer numbers (e.g.  ‘2’, ‘4’, ‘20’) have type *note int: 227, the
ones with a fractional part (e.g.  ‘5.0’, ‘1.6’) have type *note float:
57a.  We will see more about numeric types later in the tutorial.

Division (‘/’) always returns a float.  To do *note floor division: be5.
and get an integer result (discarding any fractional result) you can use
the ‘//’ operator; to calculate the remainder you can use ‘%’:

     >>> 17 / 3  # classic division returns a float
     5.666666666666667
     >>>
     >>> 17 // 3  # floor division discards the fractional part
     5
     >>> 17 % 3  # the % operator returns the remainder of the division
     2
     >>> 5 * 3 + 2  # result * divisor + remainder
     17

With Python, it is possible to use the ‘**’ operator to calculate powers
(1):

     >>> 5 ** 2  # 5 squared
     25
     >>> 2 ** 7  # 2 to the power of 7
     128

The equal sign (‘=’) is used to assign a value to a variable.
Afterwards, no result is displayed before the next interactive prompt:

     >>> width = 20
     >>> height = 5 * 9
     >>> width * height
     900

If a variable is not "defined" (assigned a value), trying to use it will
give you an error:

     >>> n  # try to access an undefined variable
     Traceback (most recent call last):
       File "<stdin>", line 1, in <module>
     NameError: name 'n' is not defined

There is full support for floating point; operators with mixed type
operands convert the integer operand to floating point:

     >>> 3 * 3.75 / 1.5
     7.5
     >>> 7.0 / 2
     3.5

In interactive mode, the last printed expression is assigned to the
variable ‘_’.  This means that when you are using Python as a desk
calculator, it is somewhat easier to continue calculations, for example:

     >>> tax = 12.5 / 100
     >>> price = 100.50
     >>> price * tax
     12.5625
     >>> price + _
     113.0625
     >>> round(_, 2)
     113.06

This variable should be treated as read-only by the user.  Don’t
explicitly assign a value to it — you would create an independent local
variable with the same name masking the built-in variable with its magic
behavior.

In addition to *note int: 227. and *note float: 57a, Python supports
other types of numbers, such as *note Decimal: 618. and *note Fraction:
378.  Python also has built-in support for *note complex numbers: be6,
and uses the ‘j’ or ‘J’ suffix to indicate the imaginary part (e.g.
‘3+5j’).

   ---------- Footnotes ----------

   (1) Since ‘**’ has higher precedence than ‘-’, ‘-3**2’ will be
interpreted as ‘-(3**2)’ and thus result in ‘-9’.  To avoid this and get
‘9’, you can use ‘(-3)**2’.


File: python.info,  Node: Strings,  Next: Lists,  Prev: Numbers,  Up: Using Python as a Calculator

2.3.1.2 Strings
...............

Besides numbers, Python can also manipulate strings, which can be
expressed in several ways.  They can be enclosed in single quotes
(‘'...'’) or double quotes (‘"..."’) with the same result (1).  ‘\’ can
be used to escape quotes:

     >>> 'spam eggs'  # single quotes
     'spam eggs'
     >>> 'doesn\'t'  # use \' to escape the single quote...
     "doesn't"
     >>> "doesn't"  # ...or use double quotes instead
     "doesn't"
     >>> '"Yes," he said.'
     '"Yes," he said.'
     >>> "\"Yes,\" he said."
     '"Yes," he said.'
     >>> '"Isn\'t," she said.'
     '"Isn\'t," she said.'

In the interactive interpreter, the output string is enclosed in quotes
and special characters are escaped with backslashes.  While this might
sometimes look different from the input (the enclosing quotes could
change), the two strings are equivalent.  The string is enclosed in
double quotes if the string contains a single quote and no double
quotes, otherwise it is enclosed in single quotes.  The *note print():
481. function produces a more readable output, by omitting the enclosing
quotes and by printing escaped and special characters:

     >>> '"Isn\'t," she said.'
     '"Isn\'t," she said.'
     >>> print('"Isn\'t," she said.')
     "Isn't," she said.
     >>> s = 'First line.\nSecond line.'  # \n means newline
     >>> s  # without print(), \n is included in the output
     'First line.\nSecond line.'
     >>> print(s)  # with print(), \n produces a new line
     First line.
     Second line.

If you don’t want characters prefaced by ‘\’ to be interpreted as
special characters, you can use `raw strings' by adding an ‘r’ before
the first quote:

     >>> print('C:\some\name')  # here \n means newline!
     C:\some
     ame
     >>> print(r'C:\some\name')  # note the r before the quote
     C:\some\name

String literals can span multiple lines.  One way is using
triple-quotes: ‘"""..."""’ or ‘'''...'''’.  End of lines are
automatically included in the string, but it’s possible to prevent this
by adding a ‘\’ at the end of the line.  The following example:

     print("""\
     Usage: thingy [OPTIONS]
          -h                        Display this usage message
          -H hostname               Hostname to connect to
     """)

produces the following output (note that the initial newline is not
included):

     Usage: thingy [OPTIONS]
          -h                        Display this usage message
          -H hostname               Hostname to connect to

Strings can be concatenated (glued together) with the ‘+’ operator, and
repeated with ‘*’:

     >>> # 3 times 'un', followed by 'ium'
     >>> 3 * 'un' + 'ium'
     'unununium'

Two or more `string literals' (i.e.  the ones enclosed between quotes)
next to each other are automatically concatenated.

     >>> 'Py' 'thon'
     'Python'

This only works with two literals though, not with variables or
expressions:

     >>> prefix = 'Py'
     >>> prefix 'thon'  # can't concatenate a variable and a string literal
       ...
     SyntaxError: invalid syntax
     >>> ('un' * 3) 'ium'
       ...
     SyntaxError: invalid syntax

If you want to concatenate variables or a variable and a literal, use
‘+’:

     >>> prefix + 'thon'
     'Python'

This feature is particularly useful when you want to break long strings:

     >>> text = ('Put several strings within parentheses '
                 'to have them joined together.')
     >>> text
     'Put several strings within parentheses to have them joined together.'

Strings can be `indexed' (subscripted), with the first character having
index 0.  There is no separate character type; a character is simply a
string of size one:

     >>> word = 'Python'
     >>> word[0]  # character in position 0
     'P'
     >>> word[5]  # character in position 5
     'n'

Indices may also be negative numbers, to start counting from the right:

     >>> word[-1]  # last character
     'n'
     >>> word[-2]  # second-last character
     'o'
     >>> word[-6]
     'P'

Note that since -0 is the same as 0, negative indices start from -1.

In addition to indexing, `slicing' is also supported.  While indexing is
used to obtain individual characters, `slicing' allows you to obtain
substring:

     >>> word[0:2]  # characters from position 0 (included) to 2 (excluded)
     'Py'
     >>> word[2:5]  # characters from position 2 (included) to 5 (excluded)
     'tho'

Note how the start is always included, and the end always excluded.
This makes sure that ‘s[:i] + s[i:]’ is always equal to ‘s’:

     >>> word[:2] + word[2:]
     'Python'
     >>> word[:4] + word[4:]
     'Python'

Slice indices have useful defaults; an omitted first index defaults to
zero, an omitted second index defaults to the size of the string being
sliced.

     >>> word[:2]  # character from the beginning to position 2 (excluded)
     'Py'
     >>> word[4:]  # characters from position 4 (included) to the end
     'on'
     >>> word[-2:] # characters from the second-last (included) to the end
     'on'

One way to remember how slices work is to think of the indices as
pointing `between' characters, with the left edge of the first character
numbered 0.  Then the right edge of the last character of a string of
`n' characters has index `n', for example:

      +---+---+---+---+---+---+
      | P | y | t | h | o | n |
      +---+---+---+---+---+---+
      0   1   2   3   4   5   6
     -6  -5  -4  -3  -2  -1

The first row of numbers gives the position of the indices 0...6 in the
string; the second row gives the corresponding negative indices.  The
slice from `i' to `j' consists of all characters between the edges
labeled `i' and `j', respectively.

For non-negative indices, the length of a slice is the difference of the
indices, if both are within bounds.  For example, the length of
‘word[1:3]’ is 2.

Attempting to use an index that is too large will result in an error:

     >>> word[42]  # the word only has 6 characters
     Traceback (most recent call last):
       File "<stdin>", line 1, in <module>
     IndexError: string index out of range

However, out of range slice indexes are handled gracefully when used for
slicing:

     >>> word[4:42]
     'on'
     >>> word[42:]
     ''

Python strings cannot be changed — they are *note immutable: be9.
Therefore, assigning to an indexed position in the string results in an
error:

     >>> word[0] = 'J'
       ...
     TypeError: 'str' object does not support item assignment
     >>> word[2:] = 'py'
       ...
     TypeError: 'str' object does not support item assignment

If you need a different string, you should create a new one:

     >>> 'J' + word[1:]
     'Jython'
     >>> word[:2] + 'py'
     'Pypy'

The built-in function *note len(): 5a8. returns the length of a string:

     >>> s = 'supercalifragilisticexpialidocious'
     >>> len(s)
     34

See also
........

*note Text Sequence Type — str: bea.

     Strings are examples of `sequence types', and support the common
     operations supported by such types.

*note String Methods: beb.

     Strings support a large number of methods for basic transformations
     and searching.

*note Formatted string literals: 14f.

     String literals that have embedded expressions.

*note Format String Syntax: 98a.

     Information about string formatting with *note str.format(): 14d.

*note printf-style String Formatting: bec.

     The old formatting operations invoked when strings and Unicode
     strings are the left operand of the ‘%’ operator are described in
     more detail here.

   ---------- Footnotes ----------

   (1) Unlike other languages, special characters such as ‘\n’ have the
same meaning with both single (‘'...'’) and double (‘"..."’) quotes.
The only difference between the two is that within single quotes you
don’t need to escape ‘"’ (but you have to escape ‘\'’) and vice versa.


File: python.info,  Node: Lists,  Prev: Strings,  Up: Using Python as a Calculator

2.3.1.3 Lists
.............

Python knows a number of `compound' data types, used to group together
other values.  The most versatile is the `list', which can be written as
a list of comma-separated values (items) between square brackets.  Lists
might contain items of different types, but usually the items all have
the same type.

     >>> squares = [1, 4, 9, 16, 25]
     >>> squares
     [1, 4, 9, 16, 25]

Like strings (and all other built-in *note sequence: bef. type), lists
can be indexed and sliced:

     >>> squares[0]  # indexing returns the item
     1
     >>> squares[-1]
     25
     >>> squares[-3:]  # slicing returns a new list
     [9, 16, 25]

All slice operations return a new list containing the requested
elements.  This means that the following slice returns a new (shallow)
copy of the list:

     >>> squares[:]
     [1, 4, 9, 16, 25]

Lists also support operations like concatenation:

     >>> squares + [36, 49, 64, 81, 100]
     [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

Unlike strings, which are *note immutable: be9, lists are a *note
mutable: bf0. type, i.e.  it is possible to change their content:

     >>> cubes = [1, 8, 27, 65, 125]  # something's wrong here
     >>> 4 ** 3  # the cube of 4 is 64, not 65!
     64
     >>> cubes[3] = 64  # replace the wrong value
     >>> cubes
     [1, 8, 27, 64, 125]

You can also add new items at the end of the list, by using the
‘append()’ `method' (we will see more about methods later):

     >>> cubes.append(216)  # add the cube of 6
     >>> cubes.append(7 ** 3)  # and the cube of 7
     >>> cubes
     [1, 8, 27, 64, 125, 216, 343]

Assignment to slices is also possible, and this can even change the size
of the list or clear it entirely:

     >>> letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g']
     >>> letters
     ['a', 'b', 'c', 'd', 'e', 'f', 'g']
     >>> # replace some values
     >>> letters[2:5] = ['C', 'D', 'E']
     >>> letters
     ['a', 'b', 'C', 'D', 'E', 'f', 'g']
     >>> # now remove them
     >>> letters[2:5] = []
     >>> letters
     ['a', 'b', 'f', 'g']
     >>> # clear the list by replacing all the elements with an empty list
     >>> letters[:] = []
     >>> letters
     []

The built-in function *note len(): 5a8. also applies to lists:

     >>> letters = ['a', 'b', 'c', 'd']
     >>> len(letters)
     4

It is possible to nest lists (create lists containing other lists), for
example:

     >>> a = ['a', 'b', 'c']
     >>> n = [1, 2, 3]
     >>> x = [a, n]
     >>> x
     [['a', 'b', 'c'], [1, 2, 3]]
     >>> x[0]
     ['a', 'b', 'c']
     >>> x[0][1]
     'b'


File: python.info,  Node: First Steps Towards Programming,  Prev: Using Python as a Calculator,  Up: An Informal Introduction to Python

2.3.2 First Steps Towards Programming
-------------------------------------

Of course, we can use Python for more complicated tasks than adding two
and two together.  For instance, we can write an initial sub-sequence of
the `Fibonacci' series as follows:

     >>> # Fibonacci series:
     ... # the sum of two elements defines the next
     ... a, b = 0, 1
     >>> while b < 10:
     ...     print(b)
     ...     a, b = b, a+b
     ...
     1
     1
     2
     3
     5
     8

This example introduces several new features.

   * The first line contains a `multiple assignment': the variables ‘a’
     and ‘b’ simultaneously get the new values 0 and 1.  On the last
     line this is used again, demonstrating that the expressions on the
     right-hand side are all evaluated first before any of the
     assignments take place.  The right-hand side expressions are
     evaluated from the left to the right.

   * The *note while: bf3. loop executes as long as the condition (here:
     ‘b < 10’) remains true.  In Python, like in C, any non-zero integer
     value is true; zero is false.  The condition may also be a string
     or list value, in fact any sequence; anything with a non-zero
     length is true, empty sequences are false.  The test used in the
     example is a simple comparison.  The standard comparison operators
     are written the same as in C: ‘<’ (less than), ‘>’ (greater than),
     ‘==’ (equal to), ‘<=’ (less than or equal to), ‘>=’ (greater than
     or equal to) and ‘!=’ (not equal to).

   * The `body' of the loop is `indented': indentation is Python’s way
     of grouping statements.  At the interactive prompt, you have to
     type a tab or space(s) for each indented line.  In practice you
     will prepare more complicated input for Python with a text editor;
     all decent text editors have an auto-indent facility.  When a
     compound statement is entered interactively, it must be followed by
     a blank line to indicate completion (since the parser cannot guess
     when you have typed the last line).  Note that each line within a
     basic block must be indented by the same amount.

   * The *note print(): 481. function writes the value of the
     argument(s) it is given.  It differs from just writing the
     expression you want to write (as we did earlier in the calculator
     examples) in the way it handles multiple arguments, floating point
     quantities, and strings.  Strings are printed without quotes, and a
     space is inserted between items, so you can format things nicely,
     like this:

          >>> i = 256*256
          >>> print('The value of i is', i)
          The value of i is 65536

     The keyword argument `end' can be used to avoid the newline after
     the output, or end the output with a different string:

          >>> a, b = 0, 1
          >>> while b < 1000:
          ...     print(b, end=',')
          ...     a, b = b, a+b
          ...
          1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,


File: python.info,  Node: More Control Flow Tools,  Next: Data Structures,  Prev: An Informal Introduction to Python,  Up: The Python Tutorial

2.4 More Control Flow Tools
===========================

Besides the *note while: bf3. statement just introduced, Python knows
the usual control flow statements known from other languages, with some
twists.

* Menu:

* if Statements:: 
* for Statements:: 
* The range() Function: The range Function. 
* break and continue Statements, and else Clauses on Loops: break and continue Statements and else Clauses on Loops. 
* pass Statements:: 
* Defining Functions:: 
* More on Defining Functions:: 
* Intermezzo; Coding Style: Intermezzo Coding Style. 


File: python.info,  Node: if Statements,  Next: for Statements,  Up: More Control Flow Tools

2.4.1 ‘if’ Statements
---------------------

Perhaps the most well-known statement type is the *note if: a65.
statement.  For example:

     >>> x = int(input("Please enter an integer: "))
     Please enter an integer: 42
     >>> if x < 0:
     ...     x = 0
     ...     print('Negative changed to zero')
     ... elif x == 0:
     ...     print('Zero')
     ... elif x == 1:
     ...     print('Single')
     ... else:
     ...     print('More')
     ...
     More

There can be zero or more *note elif: bf9. parts, and the *note else:
bfa. part is optional.  The keyword ’*note elif: bf9.’ is short for
’else if’, and is useful to avoid excessive indentation.  An *note if:
a65. ...  *note elif: bf9. ...  *note elif: bf9. ...  sequence is a
substitute for the ‘switch’ or ‘case’ statements found in other
languages.


File: python.info,  Node: for Statements,  Next: The range Function,  Prev: if Statements,  Up: More Control Flow Tools

2.4.2 ‘for’ Statements
----------------------

The *note for: 895. statement in Python differs a bit from what you may
be used to in C or Pascal.  Rather than always iterating over an
arithmetic progression of numbers (like in Pascal), or giving the user
the ability to define both the iteration step and halting condition (as
C), Python’s *note for: 895. statement iterates over the items of any
sequence (a list or a string), in the order that they appear in the
sequence.  For example (no pun intended):

     >>> # Measure some strings:
     ... words = ['cat', 'window', 'defenestrate']
     >>> for w in words:
     ...     print(w, len(w))
     ...
     cat 3
     window 6
     defenestrate 12

If you need to modify the sequence you are iterating over while inside
the loop (for example to duplicate selected items), it is recommended
that you first make a copy.  Iterating over a sequence does not
implicitly make a copy.  The slice notation makes this especially
convenient:

     >>> for w in words[:]:  # Loop over a slice copy of the entire list.
     ...     if len(w) > 6:
     ...         words.insert(0, w)
     ...
     >>> words
     ['defenestrate', 'cat', 'window', 'defenestrate']

With ‘for w in words:’, the example would attempt to create an infinite
list, inserting ‘defenestrate’ over and over again.


File: python.info,  Node: The range Function,  Next: break and continue Statements and else Clauses on Loops,  Prev: for Statements,  Up: More Control Flow Tools

2.4.3 The ‘range()’ Function
----------------------------

If you do need to iterate over a sequence of numbers, the built-in
function *note range(): 5e0. comes in handy.  It generates arithmetic
progressions:

     >>> for i in range(5):
     ...     print(i)
     ...
     0
     1
     2
     3
     4

The given end point is never part of the generated sequence; ‘range(10)’
generates 10 values, the legal indices for items of a sequence of length
10.  It is possible to let the range start at another number, or to
specify a different increment (even negative; sometimes this is called
the ’step’):

     range(5, 10)
        5 through 9

     range(0, 10, 3)
        0, 3, 6, 9

     range(-10, -100, -30)
       -10, -40, -70

To iterate over the indices of a sequence, you can combine *note
range(): 5e0. and *note len(): 5a8. as follows:

     >>> a = ['Mary', 'had', 'a', 'little', 'lamb']
     >>> for i in range(len(a)):
     ...     print(i, a[i])
     ...
     0 Mary
     1 had
     2 a
     3 little
     4 lamb

In most such cases, however, it is convenient to use the *note
enumerate(): a61. function, see *note Looping Techniques: bff.

A strange thing happens if you just print a range:

     >>> print(range(10))
     range(0, 10)

In many ways the object returned by *note range(): 5e0. behaves as if it
is a list, but in fact it isn’t.  It is an object which returns the
successive items of the desired sequence when you iterate over it, but
it doesn’t really make the list, thus saving space.

We say such an object is `iterable', that is, suitable as a target for
functions and constructs that expect something from which they can
obtain successive items until the supply is exhausted.  We have seen
that the *note for: 895. statement is such an `iterator'.  The function
*note list(): 25d. is another; it creates lists from iterables:

     >>> list(range(5))
     [0, 1, 2, 3, 4]

Later we will see more functions that return iterables and take
iterables as argument.


File: python.info,  Node: break and continue Statements and else Clauses on Loops,  Next: pass Statements,  Prev: The range Function,  Up: More Control Flow Tools

2.4.4 ‘break’ and ‘continue’ Statements, and ‘else’ Clauses on Loops
--------------------------------------------------------------------

The *note break: c02. statement, like in C, breaks out of the smallest
enclosing *note for: 895. or *note while: bf3. loop.

Loop statements may have an ‘else’ clause; it is executed when the loop
terminates through exhaustion of the list (with *note for: 895.) or when
the condition becomes false (with *note while: bf3.), but not when the
loop is terminated by a *note break: c02. statement.  This is
exemplified by the following loop, which searches for prime numbers:

     >>> for n in range(2, 10):
     ...     for x in range(2, n):
     ...         if n % x == 0:
     ...             print(n, 'equals', x, '*', n//x)
     ...             break
     ...     else:
     ...         # loop fell through without finding a factor
     ...         print(n, 'is a prime number')
     ...
     2 is a prime number
     3 is a prime number
     4 equals 2 * 2
     5 is a prime number
     6 equals 2 * 3
     7 is a prime number
     8 equals 2 * 4
     9 equals 3 * 3

(Yes, this is the correct code.  Look closely: the ‘else’ clause belongs
to the *note for: 895. loop, `not' the *note if: a65. statement.)

When used with a loop, the ‘else’ clause has more in common with the
‘else’ clause of a *note try: 9e9. statement than it does that of *note
if: a65. statements: a *note try: 9e9. statement’s ‘else’ clause runs
when no exception occurs, and a loop’s ‘else’ clause runs when no
‘break’ occurs.  For more on the *note try: 9e9. statement and
exceptions, see *note Handling Exceptions: c03.

The *note continue: c04. statement, also borrowed from C, continues with
the next iteration of the loop:

     >>> for num in range(2, 10):
     ...     if num % 2 == 0:
     ...         print("Found an even number", num)
     ...         continue
     ...     print("Found a number", num)
     Found an even number 2
     Found a number 3
     Found an even number 4
     Found a number 5
     Found an even number 6
     Found a number 7
     Found an even number 8
     Found a number 9


File: python.info,  Node: pass Statements,  Next: Defining Functions,  Prev: break and continue Statements and else Clauses on Loops,  Up: More Control Flow Tools

2.4.5 ‘pass’ Statements
-----------------------

The *note pass: c07. statement does nothing.  It can be used when a
statement is required syntactically but the program requires no action.
For example:

     >>> while True:
     ...     pass  # Busy-wait for keyboard interrupt (Ctrl+C)
     ...

This is commonly used for creating minimal classes:

     >>> class MyEmptyClass:
     ...     pass
     ...

Another place *note pass: c07. can be used is as a place-holder for a
function or conditional body when you are working on new code, allowing
you to keep thinking at a more abstract level.  The *note pass: c07. is
silently ignored:

     >>> def initlog(*args):
     ...     pass   # Remember to implement this!
     ...


File: python.info,  Node: Defining Functions,  Next: More on Defining Functions,  Prev: pass Statements,  Up: More Control Flow Tools

2.4.6 Defining Functions
------------------------

We can create a function that writes the Fibonacci series to an
arbitrary boundary:

     >>> def fib(n):    # write Fibonacci series up to n
     ...     """Print a Fibonacci series up to n."""
     ...     a, b = 0, 1
     ...     while a < n:
     ...         print(a, end=' ')
     ...         a, b = b, a+b
     ...     print()
     ...
     >>> # Now call the function we just defined:
     ... fib(2000)
     0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597

The keyword *note def: a3a. introduces a function `definition'.  It must
be followed by the function name and the parenthesized list of formal
parameters.  The statements that form the body of the function start at
the next line, and must be indented.

The first statement of the function body can optionally be a string
literal; this string literal is the function’s documentation string, or
`docstring'.  (More about docstrings can be found in the section *note
Documentation Strings: c0a.)  There are tools which use docstrings to
automatically produce online or printed documentation, or to let the
user interactively browse through code; it’s good practice to include
docstrings in code that you write, so make a habit of it.

The `execution' of a function introduces a new symbol table used for the
local variables of the function.  More precisely, all variable
assignments in a function store the value in the local symbol table;
whereas variable references first look in the local symbol table, then
in the local symbol tables of enclosing functions, then in the global
symbol table, and finally in the table of built-in names.  Thus, global
variables cannot be directly assigned a value within a function (unless
named in a *note global: c0b. statement), although they may be
referenced.

The actual parameters (arguments) to a function call are introduced in
the local symbol table of the called function when it is called; thus,
arguments are passed using `call by value' (where the `value' is always
an object `reference', not the value of the object).  (1) When a
function calls another function, a new local symbol table is created for
that call.

A function definition introduces the function name in the current symbol
table.  The value of the function name has a type that is recognized by
the interpreter as a user-defined function.  This value can be assigned
to another name which can then also be used as a function.  This serves
as a general renaming mechanism:

     >>> fib
     <function fib at 10042ed0>
     >>> f = fib
     >>> f(100)
     0 1 1 2 3 5 8 13 21 34 55 89

Coming from other languages, you might object that ‘fib’ is not a
function but a procedure since it doesn’t return a value.  In fact, even
functions without a *note return: 981. statement do return a value,
albeit a rather boring one.  This value is called ‘None’ (it’s a
built-in name).  Writing the value ‘None’ is normally suppressed by the
interpreter if it would be the only value written.  You can see it if
you really want to using *note print(): 481.:

     >>> fib(0)
     >>> print(fib(0))
     None

It is simple to write a function that returns a list of the numbers of
the Fibonacci series, instead of printing it:

     >>> def fib2(n): # return Fibonacci series up to n
     ...     """Return a list containing the Fibonacci series up to n."""
     ...     result = []
     ...     a, b = 0, 1
     ...     while a < n:
     ...         result.append(a)    # see below
     ...         a, b = b, a+b
     ...     return result
     ...
     >>> f100 = fib2(100)    # call it
     >>> f100                # write the result
     [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]

This example, as usual, demonstrates some new Python features:

   * The *note return: 981. statement returns with a value from a
     function.  *note return: 981. without an expression argument
     returns ‘None’.  Falling off the end of a function also returns
     ‘None’.

   * The statement ‘result.append(a)’ calls a `method' of the list
     object ‘result’.  A method is a function that ’belongs’ to an
     object and is named ‘obj.methodname’, where ‘obj’ is some object
     (this may be an expression), and ‘methodname’ is the name of a
     method that is defined by the object’s type.  Different types
     define different methods.  Methods of different types may have the
     same name without causing ambiguity.  (It is possible to define
     your own object types and methods, using `classes', see *note
     Classes: c0c.) The method ‘append()’ shown in the example is
     defined for list objects; it adds a new element at the end of the
     list.  In this example it is equivalent to ‘result = result + [a]’,
     but more efficient.

   ---------- Footnotes ----------

   (1) Actually, `call by object reference' would be a better
description, since if a mutable object is passed, the caller will see
any changes the callee makes to it (items inserted into a list).


File: python.info,  Node: More on Defining Functions,  Next: Intermezzo Coding Style,  Prev: Defining Functions,  Up: More Control Flow Tools

2.4.7 More on Defining Functions
--------------------------------

It is also possible to define functions with a variable number of
arguments.  There are three forms, which can be combined.

* Menu:

* Default Argument Values:: 
* Keyword Arguments:: 
* Arbitrary Argument Lists:: 
* Unpacking Argument Lists:: 
* Lambda Expressions:: 
* Documentation Strings:: 
* Function Annotations:: 


File: python.info,  Node: Default Argument Values,  Next: Keyword Arguments,  Up: More on Defining Functions

2.4.7.1 Default Argument Values
...............................

The most useful form is to specify a default value for one or more
arguments.  This creates a function that can be called with fewer
arguments than it is defined to allow.  For example:

     def ask_ok(prompt, retries=4, complaint='Yes or no, please!'):
         while True:
             ok = input(prompt)
             if ok in ('y', 'ye', 'yes'):
                 return True
             if ok in ('n', 'no', 'nop', 'nope'):
                 return False
             retries = retries - 1
             if retries < 0:
                 raise OSError('uncooperative user')
             print(complaint)

This function can be called in several ways:

   * giving only the mandatory argument: ‘ask_ok('Do you really want to
     quit?')’

   * giving one of the optional arguments: ‘ask_ok('OK to overwrite the
     file?', 2)’

   * or even giving all arguments: ‘ask_ok('OK to overwrite the file?',
     2, 'Come on, only yes or no!')’

This example also introduces the *note in: 37d. keyword.  This tests
whether or not a sequence contains a certain value.

The default values are evaluated at the point of function definition in
the `defining' scope, so that

     i = 5

     def f(arg=i):
         print(arg)

     i = 6
     f()

will print ‘5’.

`Important warning:' The default value is evaluated only once.  This
makes a difference when the default is a mutable object such as a list,
dictionary, or instances of most classes.  For example, the following
function accumulates the arguments passed to it on subsequent calls:

     def f(a, L=[]):
         L.append(a)
         return L

     print(f(1))
     print(f(2))
     print(f(3))

This will print

     [1]
     [1, 2]
     [1, 2, 3]

If you don’t want the default to be shared between subsequent calls, you
can write the function like this instead:

     def f(a, L=None):
         if L is None:
             L = []
         L.append(a)
         return L


File: python.info,  Node: Keyword Arguments,  Next: Arbitrary Argument Lists,  Prev: Default Argument Values,  Up: More on Defining Functions

2.4.7.2 Keyword Arguments
.........................

Functions can also be called using *note keyword arguments: 7e3. of the
form ‘kwarg=value’.  For instance, the following function:

     def parrot(voltage, state='a stiff', action='voom', type='Norwegian Blue'):
         print("-- This parrot wouldn't", action, end=' ')
         print("if you put", voltage, "volts through it.")
         print("-- Lovely plumage, the", type)
         print("-- It's", state, "!")

accepts one required argument (‘voltage’) and three optional arguments
(‘state’, ‘action’, and ‘type’).  This function can be called in any of
the following ways:

     parrot(1000)                                          # 1 positional argument
     parrot(voltage=1000)                                  # 1 keyword argument
     parrot(voltage=1000000, action='VOOOOOM')             # 2 keyword arguments
     parrot(action='VOOOOOM', voltage=1000000)             # 2 keyword arguments
     parrot('a million', 'bereft of life', 'jump')         # 3 positional arguments
     parrot('a thousand', state='pushing up the daisies')  # 1 positional, 1 keyword

but all the following calls would be invalid:

     parrot()                     # required argument missing
     parrot(voltage=5.0, 'dead')  # non-keyword argument after a keyword argument
     parrot(110, voltage=220)     # duplicate value for the same argument
     parrot(actor='John Cleese')  # unknown keyword argument

In a function call, keyword arguments must follow positional arguments.
All the keyword arguments passed must match one of the arguments
accepted by the function (e.g.  ‘actor’ is not a valid argument for the
‘parrot’ function), and their order is not important.  This also
includes non-optional arguments (e.g.  ‘parrot(voltage=1000)’ is valid
too).  No argument may receive a value more than once.  Here’s an
example that fails due to this restriction:

     >>> def function(a):
     ...     pass
     ...
     >>> function(0, a=0)
     Traceback (most recent call last):
       File "<stdin>", line 1, in ?
     TypeError: function() got multiple values for keyword argument 'a'

When a final formal parameter of the form ‘**name’ is present, it
receives a dictionary (see *note Mapping Types — dict: c13.) containing
all keyword arguments except for those corresponding to a formal
parameter.  This may be combined with a formal parameter of the form
‘*name’ (described in the next subsection) which receives a tuple
containing the positional arguments beyond the formal parameter list.
(‘*name’ must occur before ‘**name’.)  For example, if we define a
function like this:

     def cheeseshop(kind, *arguments, **keywords):
         print("-- Do you have any", kind, "?")
         print("-- I'm sorry, we're all out of", kind)
         for arg in arguments:
             print(arg)
         print("-" * 40)
         keys = sorted(keywords.keys())
         for kw in keys:
             print(kw, ":", keywords[kw])

It could be called like this:

     cheeseshop("Limburger", "It's very runny, sir.",
                "It's really very, VERY runny, sir.",
                shopkeeper="Michael Palin",
                client="John Cleese",
                sketch="Cheese Shop Sketch")

and of course it would print:

     -- Do you have any Limburger ?
     -- I'm sorry, we're all out of Limburger
     It's very runny, sir.
     It's really very, VERY runny, sir.
     ----------------------------------------
     client : John Cleese
     shopkeeper : Michael Palin
     sketch : Cheese Shop Sketch

Note that the list of keyword argument names is created by sorting the
result of the keywords dictionary’s ‘keys()’ method before printing its
contents; if this is not done, the order in which the arguments are
printed is undefined.

