This is python.info, produced by makeinfo version 6.0 from python.texi.

     Python 3.6.0a0, May 06, 2016

     Georg Brandl

     Copyright © 2001-2016, Python Software Foundation

INFO-DIR-SECTION Documentation tools
START-INFO-DIR-ENTRY
* Python: (python.info). The Python Programming Language
END-INFO-DIR-ENTRY


   Generated by Sphinx 1.4.1.


File: python.info,  Node: Distutils Making Modules Easy to Install,  Next: XML Modules,  Prev: Extending/Embedding Changes,  Up: What's New in Python 2 0

1.15.12 Distutils: Making Modules Easy to Install
-------------------------------------------------

Before Python 2.0, installing modules was a tedious affair – there was
no way to figure out automatically where Python is installed, or what
compiler options to use for extension modules.  Software authors had to
go through an arduous ritual of editing Makefiles and configuration
files, which only really work on Unix and leave Windows and MacOS
unsupported.  Python users faced wildly differing installation
instructions which varied between different extension packages, which
made administering a Python installation something of a chore.

The SIG for distribution utilities, shepherded by Greg Ward, has created
the Distutils, a system to make package installation much easier.  They
form the *note distutils: 37. package, a new part of Python’s standard
library.  In the best case, installing a Python module from source will
require the same steps: first you simply mean unpack the tarball or zip
archive, and the run "‘python setup.py install’".  The platform will be
automatically detected, the compiler will be recognized, C extension
modules will be compiled, and the distribution installed into the proper
directory.  Optional command-line arguments provide more control over
the installation process, the distutils package offers many places to
override defaults – separating the build from the install, building or
installing in non-default directories, and more.

In order to use the Distutils, you need to write a ‘setup.py’ script.
For the simple case, when the software contains only .py files, a
minimal ‘setup.py’ can be just a few lines long:

     from distutils.core import setup
     setup (name = "foo", version = "1.0",
            py_modules = ["module1", "module2"])

The ‘setup.py’ file isn’t much more complicated if the software consists
of a few packages:

     from distutils.core import setup
     setup (name = "foo", version = "1.0",
            packages = ["package", "package.subpackage"])

A C extension can be the most complicated case; here’s an example taken
from the PyXML package:

     from distutils.core import setup, Extension

     expat_extension = Extension('xml.parsers.pyexpat',
          define_macros = [('XML_NS', None)],
          include_dirs = [ 'extensions/expat/xmltok',
                           'extensions/expat/xmlparse' ],
          sources = [ 'extensions/pyexpat.c',
                      'extensions/expat/xmltok/xmltok.c',
                      'extensions/expat/xmltok/xmlrole.c', ]
            )
     setup (name = "PyXML", version = "0.5.4",
            ext_modules =[ expat_extension ] )

The Distutils can also take care of creating source and binary
distributions.  The "sdist" command, run by "‘python setup.py sdist’’,
builds a source distribution such as ‘foo-1.0.tar.gz’.  Adding new
commands isn’t difficult, "bdist_rpm" and "bdist_wininst" commands have
already been contributed to create an RPM distribution and a Windows
installer for the software, respectively.  Commands to create other
distribution formats such as Debian packages and Solaris ‘.pkg’ files
are in various stages of development.

All this is documented in a new manual, `Distributing Python Modules',
that joins the basic set of Python documentation.


File: python.info,  Node: XML Modules,  Next: Module changes,  Prev: Distutils Making Modules Easy to Install,  Up: What's New in Python 2 0

1.15.13 XML Modules
-------------------

Python 1.5.2 included a simple XML parser in the form of the ‘xmllib’
module, contributed by Sjoerd Mullender.  Since 1.5.2’s release, two
different interfaces for processing XML have become common: SAX2
(version 2 of the Simple API for XML) provides an event-driven interface
with some similarities to ‘xmllib’, and the DOM (Document Object Model)
provides a tree-based interface, transforming an XML document into a
tree of nodes that can be traversed and modified.  Python 2.0 includes a
SAX2 interface and a stripped- down DOM interface as part of the *note
xml: 130. package.  Here we will give a brief overview of these new
interfaces; consult the Python documentation or the source code for
complete details.  The Python XML SIG is also working on improved
documentation.

* Menu:

* SAX2 Support:: 
* DOM Support:: 
* Relationship to PyXML:: 


File: python.info,  Node: SAX2 Support,  Next: DOM Support,  Up: XML Modules

1.15.13.1 SAX2 Support
......................

SAX defines an event-driven interface for parsing XML. To use SAX, you
must write a SAX handler class.  Handler classes inherit from various
classes provided by SAX, and override various methods that will then be
called by the XML parser.  For example, the ‘startElement()’ and
‘endElement()’ methods are called for every starting and end tag
encountered by the parser, the ‘characters()’ method is called for every
chunk of character data, and so forth.

The advantage of the event-driven approach is that the whole document
doesn’t have to be resident in memory at any one time, which matters if
you are processing really huge documents.  However, writing the SAX
handler class can get very complicated if you’re trying to modify the
document structure in some elaborate way.

For example, this little example program defines a handler that prints a
message for every starting and ending tag, and then parses the file
‘hamlet.xml’ using it:

     from xml import sax

     class SimpleHandler(sax.ContentHandler):
         def startElement(self, name, attrs):
             print 'Start of element:', name, attrs.keys()

         def endElement(self, name):
             print 'End of element:', name

     # Create a parser object
     parser = sax.make_parser()

     # Tell it what handler to use
     handler = SimpleHandler()
     parser.setContentHandler( handler )

     # Parse a file!
     parser.parse( 'hamlet.xml' )

For more information, consult the Python documentation, or the XML HOWTO
at ‘http://pyxml.sourceforge.net/topics/howto/xml-howto.html’.


File: python.info,  Node: DOM Support,  Next: Relationship to PyXML,  Prev: SAX2 Support,  Up: XML Modules

1.15.13.2 DOM Support
.....................

The Document Object Model is a tree-based representation for an XML
document.  A top-level ‘Document’ instance is the root of the tree, and
has a single child which is the top-level ‘Element’ instance.  This
‘Element’ has children nodes representing character data and any
sub-elements, which may have further children of their own, and so
forth.  Using the DOM you can traverse the resulting tree any way you
like, access element and attribute values, insert and delete nodes, and
convert the tree back into XML.

The DOM is useful for modifying XML documents, because you can create a
DOM tree, modify it by adding new nodes or rearranging subtrees, and
then produce a new XML document as output.  You can also construct a DOM
tree manually and convert it to XML, which can be a more flexible way of
producing XML output than simply writing ‘<tag1>’...‘</tag1>’ to a file.

The DOM implementation included with Python lives in the *note
xml.dom.minidom: 132. module.  It’s a lightweight implementation of the
Level 1 DOM with support for XML namespaces.  The ‘parse()’ and
‘parseString()’ convenience functions are provided for generating a DOM
tree:

     from xml.dom import minidom
     doc = minidom.parse('hamlet.xml')

‘doc’ is a ‘Document’ instance.  ‘Document’, like all the other DOM
classes such as ‘Element’ and ‘Text’, is a subclass of the ‘Node’ base
class.  All the nodes in a DOM tree therefore support certain common
methods, such as ‘toxml()’ which returns a string containing the XML
representation of the node and its children.  Each class also has
special methods of its own; for example, ‘Element’ and ‘Document’
instances have a method to find all child elements with a given tag
name.  Continuing from the previous 2-line example:

     perslist = doc.getElementsByTagName( 'PERSONA' )
     print perslist[0].toxml()
     print perslist[1].toxml()

For the `Hamlet' XML file, the above few lines output:

     <PERSONA>CLAUDIUS, king of Denmark. </PERSONA>
     <PERSONA>HAMLET, son to the late, and nephew to the present king.</PERSONA>

The root element of the document is available as ‘doc.documentElement’,
and its children can be easily modified by deleting, adding, or removing
nodes:

     root = doc.documentElement

     # Remove the first child
     root.removeChild( root.childNodes[0] )

     # Move the new first child to the end
     root.appendChild( root.childNodes[0] )

     # Insert the new first child (originally,
     # the third child) before the 20th child.
     root.insertBefore( root.childNodes[0], root.childNodes[20] )

Again, I will refer you to the Python documentation for a complete
listing of the different ‘Node’ classes and their various methods.


File: python.info,  Node: Relationship to PyXML,  Prev: DOM Support,  Up: XML Modules

1.15.13.3 Relationship to PyXML
...............................

The XML Special Interest Group has been working on XML-related Python
code for a while.  Its code distribution, called PyXML, is available
from the SIG’s Web pages at
‘https://www.python.org/community/sigs/current/xml-sig’.  The PyXML
distribution also used the package name ‘xml’.  If you’ve written
programs that used PyXML, you’re probably wondering about its
compatibility with the 2.0 *note xml: 130. package.

The answer is that Python 2.0’s *note xml: 130. package isn’t compatible
with PyXML, but can be made compatible by installing a recent version
PyXML. Many applications can get by with the XML support that is
included with Python 2.0, but more complicated applications will require
that the full PyXML package will be installed.  When installed, PyXML
versions 0.6.0 or greater will replace the *note xml: 130. package
shipped with Python, and will be a strict superset of the standard
package, adding a bunch of additional features.  Some of the additional
features in PyXML include:

   * 4DOM, a full DOM implementation from FourThought, Inc.

   * The xmlproc validating parser, written by Lars Marius Garshol.

   * The ‘sgmlop’ parser accelerator module, written by Fredrik Lundh.


File: python.info,  Node: Module changes,  Next: New modules,  Prev: XML Modules,  Up: What's New in Python 2 0

1.15.14 Module changes
----------------------

Lots of improvements and bugfixes were made to Python’s extensive
standard library; some of the affected modules include *note readline:
dc, ‘ConfigParser’, *note cgi: 16, *note calendar: 15, *note posix: cf,
*note readline: dc, ‘xmllib’, *note aifc: 5, ‘chunk, wave’, *note
random: da, *note shelve: e5, and *note nntplib: be.  Consult the CVS
logs for the exact patch-by-patch details.

Brian Gallew contributed OpenSSL support for the *note socket: ed.
module.  OpenSSL is an implementation of the Secure Socket Layer, which
encrypts the data being sent over a socket.  When compiling Python, you
can edit ‘Modules/Setup’ to include SSL support, which adds an
additional function to the *note socket: ed. module: ‘socket.ssl(socket,
keyfile, certfile)’, which takes a socket object and returns an SSL
socket.  The ‘httplib’ and *note urllib: 11a. modules were also changed
to support ‘https://’ URLs, though no one has implemented FTP or SMTP
over SSL.

The ‘httplib’ module has been rewritten by Greg Stein to support
HTTP/1.1.  Backward compatibility with the 1.5 version of ‘httplib’ is
provided, though using HTTP/1.1 features such as pipelining will require
rewriting code to use a different set of interfaces.

The ‘Tkinter’ module now supports Tcl/Tk version 8.1, 8.2, or 8.3, and
support for the older 7.x versions has been dropped.  The Tkinter module
now supports displaying Unicode strings in Tk widgets.  Also, Fredrik
Lundh contributed an optimization which makes operations like
‘create_line’ and ‘create_polygon’ much faster, especially when using
lots of coordinates.

The *note curses: 2b. module has been greatly extended, starting from
Oliver Andrich’s enhanced version, to provide many additional functions
from ncurses and SYSV curses, such as colour, alternative character set
support, pads, and mouse support.  This means the module is no longer
compatible with operating systems that only have BSD curses, but there
don’t seem to be any currently maintained OSes that fall into this
category.

As mentioned in the earlier discussion of 2.0’s Unicode support, the
underlying implementation of the regular expressions provided by the
*note re: db. module has been changed.  SRE, a new regular expression
engine written by Fredrik Lundh and partially funded by Hewlett Packard,
supports matching against both 8-bit strings and Unicode strings.


File: python.info,  Node: New modules,  Next: IDLE Improvements,  Prev: Module changes,  Up: What's New in Python 2 0

1.15.15 New modules
-------------------

A number of new modules were added.  We’ll simply list them with brief
descriptions; consult the 2.0 documentation for the details of a
particular module.

   * *note atexit: c.: For registering functions to be called before the
     Python interpreter exits.  Code that currently sets ‘sys.exitfunc’
     directly should be changed to use the *note atexit: c. module
     instead, importing *note atexit: c. and calling *note
     atexit.register(): b0b. with the function to be called on exit.
     (Contributed by Skip Montanaro.)

   * *note codecs: 1c, ‘encodings’, *note unicodedata: 117.: Added as
     part of the new Unicode support.

   * *note filecmp: 7d.: Supersedes the old ‘cmp’, ‘cmpcache’ and
     ‘dircmp’ modules, which have now become deprecated.  (Contributed
     by Gordon MacMillan and Moshe Zadka.)

   * *note gettext: 88.: This module provides internationalization
     (I18N) and localization (L10N) support for Python programs by
     providing an interface to the GNU gettext message catalog library.
     (Integrated by Barry Warsaw, from separate contributions by Martin
     von Löwis, Peter Funk, and James Henstridge.)

   * ‘linuxaudiodev’: Support for the ‘/dev/audio’ device on Linux, a
     twin to the existing ‘sunaudiodev’ module.  (Contributed by Peter
     Bosch, with fixes by Jeremy Hylton.)

   * *note mmap: b2.: An interface to memory-mapped files on both
     Windows and Unix.  A file’s contents can be mapped directly into
     memory, at which point it behaves like a mutable string, so its
     contents can be read and modified.  They can even be passed to
     functions that expect ordinary strings, such as the *note re: db.
     module.  (Contributed by Sam Rushing, with some extensions by A.M.
     Kuchling.)

   * ‘pyexpat’: An interface to the Expat XML parser.  (Contributed by
     Paul Prescod.)

   * ‘robotparser’: Parse a ‘robots.txt’ file, which is used for writing
     Web spiders that politely avoid certain areas of a Web site.  The
     parser accepts the contents of a ‘robots.txt’ file, builds a set of
     rules from it, and can then answer questions about the fetchability
     of a given URL. (Contributed by Skip Montanaro.)

   * *note tabnanny: fe.: A module/script to check Python source code
     for ambiguous indentation.  (Contributed by Tim Peters.)

   * ‘UserString’: A base class useful for deriving objects that behave
     like strings.

   * *note webbrowser: 126.: A module that provides a platform
     independent way to launch a web browser on a specific URL. For each
     platform, various browsers are tried in a specific order.  The user
     can alter which browser is launched by setting the `BROWSER'
     environment variable.  (Originally inspired by Eric S. Raymond’s
     patch to *note urllib: 11a. which added similar functionality, but
     the final module comes from code originally implemented by Fred
     Drake as ‘Tools/idle/BrowserControl.py’, and adapted for the
     standard library by Fred.)

   * ‘_winreg’: An interface to the Windows registry.  ‘_winreg’ is an
     adaptation of functions that have been part of PythonWin since
     1995, but has now been added to the core distribution, and enhanced
     to support Unicode.  ‘_winreg’ was written by Bill Tutt and Mark
     Hammond.

   * *note zipfile: 13f.: A module for reading and writing ZIP-format
     archives.  These are archives produced by ‘PKZIP’ on DOS/Windows or
     ‘zip’ on Unix, not to be confused with ‘gzip’-format files (which
     are supported by the *note gzip: 8b. module) (Contributed by James
     C. Ahlstrom.)

   * ‘imputil’: A module that provides a simpler way for writing
     customised import hooks, in comparison to the existing ‘ihooks’
     module.  (Implemented by Greg Stein, with much discussion on
     python-dev along the way.)


File: python.info,  Node: IDLE Improvements,  Next: Deleted and Deprecated Modules,  Prev: New modules,  Up: What's New in Python 2 0

1.15.16 IDLE Improvements
-------------------------

IDLE is the official Python cross-platform IDE, written using Tkinter.
Python 2.0 includes IDLE 0.6, which adds a number of new features and
improvements.  A partial list:

   * UI improvements and optimizations, especially in the area of syntax
     highlighting and auto-indentation.

   * The class browser now shows more information, such as the top level
     functions in a module.

   * Tab width is now a user settable option.  When opening an existing
     Python file, IDLE automatically detects the indentation
     conventions, and adapts.

   * There is now support for calling browsers on various platforms,
     used to open the Python documentation in a browser.

   * IDLE now has a command line, which is largely similar to the
     vanilla Python interpreter.

   * Call tips were added in many places.

   * IDLE can now be installed as a package.

   * In the editor window, there is now a line/column bar at the bottom.

   * Three new keystroke commands: Check module (‘Alt-F5’), Import
     module (‘F5’) and Run script (‘Ctrl-F5’).


File: python.info,  Node: Deleted and Deprecated Modules,  Next: Acknowledgements<8>,  Prev: IDLE Improvements,  Up: What's New in Python 2 0

1.15.17 Deleted and Deprecated Modules
--------------------------------------

A few modules have been dropped because they’re obsolete, or because
there are now better ways to do the same thing.  The ‘stdwin’ module is
gone; it was for a platform-independent windowing toolkit that’s no
longer developed.

A number of modules have been moved to the ‘lib-old’ subdirectory:
‘cmp’, ‘cmpcache’, ‘dircmp’, ‘dump’, ‘find’, ‘grep’, ‘packmail’, ‘poly’,
‘util’, ‘whatsound’, ‘zmod’.  If you have code which relies on a module
that’s been moved to ‘lib-old’, you can simply add that directory to
‘sys.path’ to get them back, but you’re encouraged to update any code
that uses these modules.


File: python.info,  Node: Acknowledgements<8>,  Prev: Deleted and Deprecated Modules,  Up: What's New in Python 2 0

1.15.18 Acknowledgements
------------------------

The authors would like to thank the following people for offering
suggestions on various drafts of this article: David Bolen, Mark
Hammond, Gregg Hauser, Jeremy Hylton, Fredrik Lundh, Detlef Lannert,
Aahz Maruch, Skip Montanaro, Vladimir Marangozov, Tobias Polzin, Guido
van Rossum, Neil Schemenauer, and Russ Schmidt.

The "Changelog" is a HTML version of the file Misc/NEWS(1) which
contains `all' nontrivial changes to Python for the current version.

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Misc/NEWS


File: python.info,  Node: Changelog,  Prev: What's New in Python 2 0,  Up: What's New in Python

1.16 Changelog
==============

* Menu:

* Python 3.6.0 alpha 1: Python 3 6 0 alpha 1. 
* Python 3.5.1 final: Python 3 5 1 final. 
* Python 3.5.1 release candidate 1: Python 3 5 1 release candidate 1. 
* Python 3.5.0 final: Python 3 5 0 final. 
* Python 3.5.0 release candidate 4: Python 3 5 0 release candidate 4. 
* Python 3.5.0 release candidate 3: Python 3 5 0 release candidate 3. 
* Python 3.5.0 release candidate 2: Python 3 5 0 release candidate 2. 
* Python 3.5.0 release candidate 1: Python 3 5 0 release candidate 1. 
* Python 3.5.0 beta 4: Python 3 5 0 beta 4. 
* Python 3.5.0 beta 3: Python 3 5 0 beta 3. 
* Python 3.5.0 beta 2: Python 3 5 0 beta 2. 
* Python 3.5.0 beta 1: Python 3 5 0 beta 1. 
* Python 3.5.0 alpha 4: Python 3 5 0 alpha 4. 
* Python 3.5.0 alpha 3: Python 3 5 0 alpha 3. 
* Python 3.5 alpha 2: Python 3 5 alpha 2. 
* Python 3.5 alpha 1: Python 3 5 alpha 1. 
* Python 3.4.0: Python 3 4 0. 
* Python 3.4.0 release candidate 3: Python 3 4 0 release candidate 3. 
* Python 3.4.0 release candidate 2: Python 3 4 0 release candidate 2. 
* Python 3.4.0 release candidate 1: Python 3 4 0 release candidate 1. 
* Python 3.4.0 Beta 3: Python 3 4 0 Beta 3. 
* Python 3.4.0 Beta 2: Python 3 4 0 Beta 2. 
* Python 3.4.0 Beta 1: Python 3 4 0 Beta 1. 
* Python 3.4.0 Alpha 4: Python 3 4 0 Alpha 4. 
* Python 3.4.0 Alpha 3: Python 3 4 0 Alpha 3. 
* Python 3.4.0 Alpha 2: Python 3 4 0 Alpha 2. 
* Python 3.4.0 Alpha 1: Python 3 4 0 Alpha 1. 


File: python.info,  Node: Python 3 6 0 alpha 1,  Next: Python 3 5 1 final,  Up: Changelog

1.16.1 Python 3.6.0 alpha 1
---------------------------

Release date: tba

* Menu:

* Core and Builtins:: 
* Library:: 
* IDLE: IDLE<3>. 
* Documentation: Documentation<2>. 
* Tests:: 
* Build:: 
* Windows:: 
* Tools/Demos:: 
* C API:: 


File: python.info,  Node: Core and Builtins,  Next: Library,  Up: Python 3 6 0 alpha 1

1.16.1.1 Core and Builtins
..........................

   - Issue #26811(1): gc.get_objects() no longer contains a broken tuple
     with NULL pointer.

   - Issue #20120(2): Use RawConfigParser for .pypirc parsing, removing
     support for interpolation unintentionally added with move to Python
     3.  Behavior no longer does any interpolation in .pypirc files,
     matching behavior in Python 2.7 and Setuptools 19.0.

   - Issue #26249(3): Memory functions of the *note PyMem_Malloc(): 152.
     domain (*note PYMEM_DOMAIN_MEM: 155.) now use the *note pymalloc
     allocator: 183. rather than system ‘malloc()’.  Applications
     calling *note PyMem_Malloc(): 152. without holding the GIL can now
     crash: use ‘PYTHONMALLOC=debug’ environment variable to validate
     the usage of memory allocators in your application.

   - Issue #26802(4): Optimize function calls only using unpacking like
     ‘func(*tuple)’ (no other positional argument, no keyword): avoid
     copying the tuple.  Patch written by Joe Jevnik.

   - Issue #26659(5): Make the builtin slice type support cycle
     collection.

   - Issue #26718(6): super.__init__ no longer leaks memory if called
     multiple times.  NOTE: A direct call of super.__init__ is not
     endorsed!

   - Issue #25339(7): PYTHONIOENCODING now has priority over locale in
     setting the error handler for stdin and stdout.

   - Issue #26494(8): Fixed crash on iterating exhausting iterators.
     Affected classes are generic sequence iterators, iterators of str,
     bytes, bytearray, list, tuple, set, frozenset, dict, OrderedDict,
     corresponding views and os.scandir() iterator.

   - Issue #26574(9): Optimize ‘bytes.replace(b'', b'.')’ and
     ‘bytearray.replace(b'', b'.')’.  Patch written by Josh Snider.

   - Issue #26581(10): If coding cookie is specified multiple times on a
     line in Python source code file, only the first one is taken to
     account.

   - Issue #26563(11): Debug hooks on Python memory allocators now raise
     a fatal error if functions of the *note PyMem_Malloc(): 152. family
     are called without holding the GIL.

   - Issue #26564(12): On error, the debug hooks on Python memory
     allocators now use the *note tracemalloc: 111. module to get the
     traceback where a memory block was allocated.

   - Issue #26558(13): The debug hooks on Python memory allocator
     ‘PyObject_Malloc()’ now detect when functions are called without
     holding the GIL.

   - Issue #26516(14): Add *note PYTHONMALLOC: 151. environment variable
     to set the Python memory allocators and/or install debug hooks.

   - Issue #26516(15): The *note PyMem_SetupDebugHooks(): 156. function
     can now also be used on Python compiled in release mode.

   - Issue #26516(16): The *note PYTHONMALLOCSTATS: b13. environment
     variable can now also be used on Python compiled in release mode.
     It now has no effect if set to an empty string.

   - Issue #26516(17): In debug mode, debug hooks are now also installed
     on Python memory allocators when Python is configured without
     pymalloc.

   - Issue #26464(18): Fix str.translate() when string is ASCII and
     first replacements removes character, but next replacement uses a
     non-ASCII character or a string longer than 1 character.
     Regression introduced in Python 3.5.0.

   - Issue #22836(19): Ensure exception reports from PyErr_Display() and
     PyErr_WriteUnraisable() are sensible even when formatting them
     produces secondary errors.  This affects the reports produced by
     sys.__excepthook__() and when __del__() raises an exception.

   - Issue #26302(20): Correct behavior to reject comma as a legal
     character for cookie names.

   - Issue #26136(21): Upgrade the warning when a generator raises
     StopIteration from PendingDeprecationWarning to DeprecationWarning.
     Patch by Anish Shah.

   - Issue #26204(22): The compiler now ignores all constant statements:
     bytes, str, int, float, complex, name constants (None, False,
     True), Ellipsis and ast.Constant; not only str and int.  For
     example, ‘1.0’ is now ignored in ‘def f(): 1.0’.

   - Issue #4806(23): Avoid masking the original TypeError exception
     when using star (*) unpacking in function calls.  Based on patch by
     Hagen Fürstenau and Daniel Urban.

   - Issue #26146(24): Add a new kind of AST node: ‘ast.Constant’.  It
     can be used by external AST optimizers, but the compiler does not
     emit directly such node.

   - Issue #23601(25): Sped-up allocation of dict key objects by using
     Python’s small object allocator.  (Contributed by Julian Taylor.)

   - Issue #18018(26): Import raises ImportError instead of SystemError
     if a relative import is attempted without a known parent package.

   - Issue #25843(27): When compiling code, don’t merge constants if
     they are equal but have a different types.  For example, ‘f1, f2 =
     lambda: 1, lambda: 1.0’ is now correctly compiled to two different
     functions: ‘f1()’ returns ‘1’ (‘int’) and ‘f2()’ returns ‘1.0’
     (‘int’), even if ‘1’ and ‘1.0’ are equal.

   - Issue #26107(28): The format of the ‘co_lnotab’ attribute of code
     objects changes to support negative line number delta.

   - Issue #26154(29): Add a new private _PyThreadState_UncheckedGet()
     function to get the current Python thread state, but don’t issue a
     fatal error if it is NULL. This new function must be used instead
     of accessing directly the _PyThreadState_Current variable.  The
     variable is no more exposed since Python 3.5.1 to hide the exact
     implementation of atomic C types, to avoid compiler issues.

   - Issue #25791(30): If __package__ != __spec__.parent or if neither
     __package__ or __spec__ are defined then ImportWarning is raised.

   - Issue #25731(31): Fix set and deleting __new__ on a class.

   - Issue #25961(32): Disallowed null characters in the type name.

   - Issue #25973(33): Fix segfault when an invalid nonlocal statement
     binds a name starting with two underscores.

   - Issue #22995(34): Instances of extension types with a state that
     aren’t subclasses of list or dict and haven’t implemented any
     pickle-related methods (__reduce__, __reduce_ex__, __getnewargs__,
     __getnewargs_ex__, or __getstate__), can no longer be pickled.
     Including memoryview.

   - Issue #20440(35): Massive replacing unsafe attribute setting code
     with special macro Py_SETREF.

   - Issue #25766(36): Special method __bytes__() now works in str
     subclasses.

   - Issue #25421(37): __sizeof__ methods of builtin types now use
     dynamic basic size.  This allows sys.getsize() to work correctly
     with their subclasses with __slots__ defined.

   - Issue #25709(38): Fixed problem with in-place string concatenation
     and utf-8 cache.

   - Issue #5319(39): New Py_FinalizeEx() API allowing Python to set an
     exit status of 120 on failure to flush buffered streams.

   - Issue #25485(40): telnetlib.Telnet is now a context manager.

   - Issue #24097(41): Fixed crash in object.__reduce__() if slot name
     is freed inside __getattr__.

   - Issue #24731(42): Fixed crash on converting objects with special
     methods __bytes__, __trunc__, and __float__ returning instances of
     subclasses of bytes, int, and float to subclasses of bytes, int,
     and float correspondingly.

   - Issue #25630(43): Fix a possible segfault during argument parsing
     in functions that accept filesystem paths.

   - Issue #23564(44): Fixed a partially broken sanity check in the
     _posixsubprocess internals regarding how fds_to_pass were passed to
     the child.  The bug had no actual impact as subprocess.py already
     avoided it.

   - Issue #25388(45): Fixed tokenizer crash when processing undecodable
     source code with a null byte.

   - Issue #25462(46): The hash of the key now is calculated only once
     in most operations in C implementation of OrderedDict.

   - Issue #22995(47): Default implementation of __reduce__ and
     __reduce_ex__ now rejects builtin types with not defined __new__.

   - Issue #24802(48): Avoid buffer overreads when int(), float(),
     compile(), exec() and eval() are passed bytes-like objects.  These
     objects are not necessarily terminated by a null byte, but the
     functions assumed they were.

   - Issue #25555(49): Fix parser and AST: fill lineno and col_offset of
     "arg" node when compiling AST from Python objects.

   - Issue #24726(50): Fixed a crash and leaking NULL in repr() of
     OrderedDict that was mutated by direct calls of dict methods.

   - Issue #25449(51): Iterating OrderedDict with keys with unstable
     hash now raises KeyError in C implementations as well as in Python
     implementation.

   - Issue #25395(52): Fixed crash when highly nested OrderedDict
     structures were garbage collected.

   - Issue #25401(53): Optimize bytes.fromhex() and bytearray.fromhex():
     they are now between 2x and 3.5x faster.

   - Issue #25399(54): Optimize bytearray % args using the new private
     _PyBytesWriter API. Formatting is now between 2.5 and 5 times
     faster.

   - Issue #25274(55): sys.setrecursionlimit() now raises a
     RecursionError if the new recursion limit is too low depending at
     the current recursion depth.  Modify also the "lower-water mark"
     formula to make it monotonic.  This mark is used to decide when the
     overflowed flag of the thread state is reset.

   - Issue #24402(56): Fix input() to prompt to the redirected stdout
     when sys.stdout.fileno() fails.

   - Issue #25349(57): Optimize bytes % args using the new private
     _PyBytesWriter API. Formatting is now up to 2 times faster.

   - Issue #24806(58): Prevent builtin types that are not allowed to be
     subclassed from being subclassed through multiple inheritance.

   - Issue #25301(59): The UTF-8 decoder is now up to 15 times as fast
     for error handlers: ‘ignore’, ‘replace’ and ‘surrogateescape’.

   - Issue #24848(60): Fixed a number of bugs in UTF-7 decoding of
     misformed data.

   - Issue #25267(61): The UTF-8 encoder is now up to 75 times as fast
     for error handlers: ‘ignore’, ‘replace’, ‘surrogateescape’,
     ‘surrogatepass’.  Patch co-written with Serhiy Storchaka.

   - Issue #25280(62): Import trace messages emitted in verbose (-v)
     mode are no longer formatted twice.

   - Issue #25227(63): Optimize ASCII and latin1 encoders with the
     ‘surrogateescape’ error handler: the encoders are now up to 3 times
     as fast.  Initial patch written by Serhiy Storchaka.

   - Issue #25003(64): On Solaris 11.3 or newer, os.urandom() now uses
     the getrandom() function instead of the getentropy() function.  The
     getentropy() function is blocking to generate very good quality
     entropy, os.urandom() doesn’t need such high-quality entropy.

   - Issue #9232(65): Modify Python’s grammar to allow trailing commas
     in the argument list of a function declaration.  For example, "def
     f(*, a = 3,): pass" is now legal.  Patch from Mark Dickinson.

   - Issue #24965(66): Implement PEP 498 "Literal String Interpolation".
     This allows you to embed expressions inside f-strings, which are
     converted to normal strings at run time.  Given x=3, then
     f’value={x}’ == ’value=3’.  Patch by Eric V. Smith.

   - Issue #26478(67): Fix semantic bugs when using binary operators
     with dictionary views and tuples.

   - Issue #26171(68): Fix possible integer overflow and heap corruption
     in zipimporter.get_data().

   - Issue #25660(69): Fix TAB key behaviour in REPL with readline.

   - Issue #26288(70): Optimize PyLong_AsDouble.

   - Issues #26289 and #26315: Optimize floor and modulo division for
     single-digit longs.  Microbenchmarks show 2-2.5x improvement.
     Built-in ’divmod’ function is now also ~10% faster.

   - Issue #25887(71): Raise a RuntimeError when a coroutine object is
     awaited more than once.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/26811

   (2) https://bugs.python.org/20120

   (3) https://bugs.python.org/26249

   (4) https://bugs.python.org/26802

   (5) https://bugs.python.org/26659

   (6) https://bugs.python.org/26718

   (7) https://bugs.python.org/25339

   (8) https://bugs.python.org/26494

   (9) https://bugs.python.org/26574

   (10) https://bugs.python.org/26581

   (11) https://bugs.python.org/26563

   (12) https://bugs.python.org/26564

   (13) https://bugs.python.org/26558

   (14) https://bugs.python.org/26516

   (15) https://bugs.python.org/26516

   (16) https://bugs.python.org/26516

   (17) https://bugs.python.org/26516

   (18) https://bugs.python.org/26464

   (19) https://bugs.python.org/22836

   (20) https://bugs.python.org/26302

   (21) https://bugs.python.org/26136

   (22) https://bugs.python.org/26204

   (23) https://bugs.python.org/4806

   (24) https://bugs.python.org/26146

   (25) https://bugs.python.org/23601

   (26) https://bugs.python.org/18018

   (27) https://bugs.python.org/25843

   (28) https://bugs.python.org/26107

   (29) https://bugs.python.org/26154

   (30) https://bugs.python.org/25791

   (31) https://bugs.python.org/25731

   (32) https://bugs.python.org/25961

   (33) https://bugs.python.org/25973

   (34) https://bugs.python.org/22995

   (35) https://bugs.python.org/20440

   (36) https://bugs.python.org/25766

   (37) https://bugs.python.org/25421

   (38) https://bugs.python.org/25709

   (39) https://bugs.python.org/5319

   (40) https://bugs.python.org/25485

   (41) https://bugs.python.org/24097

   (42) https://bugs.python.org/24731

   (43) https://bugs.python.org/25630

   (44) https://bugs.python.org/23564

   (45) https://bugs.python.org/25388

   (46) https://bugs.python.org/25462

   (47) https://bugs.python.org/22995

   (48) https://bugs.python.org/24802

   (49) https://bugs.python.org/25555

   (50) https://bugs.python.org/24726

   (51) https://bugs.python.org/25449

   (52) https://bugs.python.org/25395

   (53) https://bugs.python.org/25401

   (54) https://bugs.python.org/25399

   (55) https://bugs.python.org/25274

   (56) https://bugs.python.org/24402

   (57) https://bugs.python.org/25349

   (58) https://bugs.python.org/24806

   (59) https://bugs.python.org/25301

   (60) https://bugs.python.org/24848

   (61) https://bugs.python.org/25267

   (62) https://bugs.python.org/25280

   (63) https://bugs.python.org/25227

   (64) https://bugs.python.org/25003

   (65) https://bugs.python.org/9232

   (66) https://bugs.python.org/24965

   (67) https://bugs.python.org/26478

   (68) https://bugs.python.org/26171

   (69) https://bugs.python.org/25660

   (70) https://bugs.python.org/26288

   (71) https://bugs.python.org/25887


File: python.info,  Node: Library,  Next: IDLE<3>,  Prev: Core and Builtins,  Up: Python 3 6 0 alpha 1

1.16.1.2 Library
................

   - Issue #26873(1): xmlrpc now raises ResponseError on unsupported
     type tags instead of silently return incorrect result.

   - Issue #26915(2): The __contains__ methods in the collections ABCs
     now check for identity before checking equality.  This better
     matches the behavior of the concrete classes, allows sensible
     handling of NaNs, and makes it easier to reason about container
     invariants.

   - Issue #26711(3): Fixed the comparison of plistlib.Data with other
     types.

   - Issue #24114(4): Fix an uninitialized variable in ‘ctypes.util’.

     The bug only occurs on SunOS when the ctypes implementation
     searches for the ‘crle’ program.  Patch by Xiang Zhang.  Tested on
     SunOS by Kees Bos.

   - Issue #26864(5): In urllib.request, change the proxy bypass host
     checking against no_proxy to be case-insensitive, and to not match
     unrelated host names that happen to have a bypassed hostname as a
     suffix.  Patch by Xiang Zhang.

   - Issue #24902(6): Print server URL on http.server startup.  Initial
     patch by Felix Kaiser.

   - Issue #25788(7): fileinput.hook_encoded() now supports an "errors"
     argument for passing to open.  Original patch by Joseph Hackman.

   - Issue #26634(8): recursive_repr() now sets __qualname__ of wrapper.
     Patch by Xiang Zhang.

   - Issue #26804(9): urllib.request will prefer lower_case proxy
     environment variables over UPPER_CASE or Mixed_Case ones.  Patch
     contributed by Hans-Peter Jansen.

   - Issue #26837(10): assertSequenceEqual() now correctly outputs
     non-stringified differing items (like bytes in the -b mode).  This
     affects assertListEqual() and assertTupleEqual().

   - Issue #26041(11): Remove "will be removed in Python 3.7" from
     deprecation messages of platform.dist() and
     platform.linux_distribution().  Patch by Kumaripaba Miyurusara
     Athukorala.

   - Issue #26822(12): itemgetter, attrgetter and methodcaller objects
     no longer silently ignore keyword arguments.

   - Issue #26733(13): Disassembling a class now disassembles class and
     static methods.  Patch by Xiang Zhang.

   - Issue #26801(14): Fix error handling in *note
     shutil.get_terminal_size(): 67f, catch *note AttributeError: 356.
     instead of *note NameError: 9f2.  Patch written by Emanuel Barry.

   - Issue #24838(15): tarfile’s ustar and gnu formats now correctly
     calculate name and link field limits for multibyte character
     encodings like utf-8.

   - Issue #26657(16): Fix directory traversal vulnerability with
     http.server on Windows.  This fixes a regression that was
     introduced in 3.3.4rc1 and 3.4.0rc1.  Based on patch by Philipp
     Hagemeister.

   - Issue #26717(17): Stop encoding Latin-1-ized WSGI paths with UTF-8.
     Patch by Anthony Sottile.

   - Issue #26782(18): Add STARTUPINFO to subprocess.__all__ on Windows.

   - Issue #26404(19): Add context manager to socketserver.  Patch by
     Aviv Palivoda.

   - Issue #26735(20): Fix *note os.urandom(): 2df. on Solaris 11.3 and
     newer when reading more than 1,024 bytes: call ‘getrandom()’
     multiple times with a limit of 1024 bytes per call.

   - Issue #26585(21): Eliminate http.server._quote_html() and use
     html.escape(quote=False).  Patch by Xiang Zhang.

   - Issue #26685(22): Raise OSError if closing a socket fails.

   - Issue #16329(23): Add .webm to mimetypes.types_map.  Patch by
     Giampaolo Rodola’.

   - Issue #13952(24): Add .csv to mimetypes.types_map.  Patch by Geoff
     Wilson.

   - Issue #26587(25): the site module now allows .pth files to specify
     files to be added to sys.path (e.g.  zip files).

   - Issue #25609(26): Introduce contextlib.AbstractContextManager and
     typing.ContextManager.

   - Issue #26709(27): Fixed Y2038 problem in loading binary PLists.

   - Issue #23735(28): Handle terminal resizing with Readline 6.3+ by
     installing our own SIGWINCH handler.  Patch by Eric Price.

   - Issue #25951(29): Change SSLSocket.sendall() to return None, as
     explicitly documented for plain socket objects.  Patch by Aviv
     Palivoda.

   - Issue #26586(30): In http.server, respond with "413 Request header
     fields too large" if there are too many header fields to parse,
     rather than killing the connection and raising an unhandled
     exception.  Patch by Xiang Zhang.

   - Issue #26676(31): Added missing XMLPullParser to
     ElementTree.__all__.

   - Issue #22854(32): Change BufferedReader.writable() and
     BufferedWriter.readable() to always return False.

   - Issue #26492(33): Exhausted iterator of array.array now conforms
     with the behavior of iterators of other mutable sequences: it lefts
     exhausted even if iterated array is extended.

   - Issue #26641(34): doctest.DocFileTest and doctest.testfile() now
     support packages (module splitted into multiple directories) for
     the package parameter.

   - Issue #25195(35): Fix a regression in mock.MagicMock.  _Call is a
     subclass of tuple (changeset 3603bae63c13 only works for classes)
     so we need to implement __ne__ ourselves.  Patch by Andrew Plummer.

   - Issue #26644(36): Raise ValueError rather than SystemError when a
     negative length is passed to SSLSocket.recv() or read().

   - Issue #23804(37): Fix SSL recv(0) and read(0) methods to return
     zero bytes instead of up to 1024.

   - Issue #26616(38): Fixed a bug in datetime.astimezone() method.

   - Issue #26637(39): The *note importlib: 9a. module now emits an
     *note ImportError: 19f. rather than a *note TypeError: 562. if
     *note __import__(): 5cd. is tried during the Python shutdown
     process but *note sys.path: 16c. is already cleared (set to
     ‘None’).

   - Issue #21925(40): *note warnings.formatwarning(): b15. now catches
     exceptions when calling *note linecache.getline(): 2c2. and *note
     tracemalloc.get_object_traceback(): b16. to be able to log *note
     ResourceWarning: 166. emitted late during the Python shutdown
     process.

   - Issue #23848(41): On Windows, faulthandler.enable() now also
     installs an exception handler to dump the traceback of all Python
     threads on any Windows exception, not only on UNIX signals
     (SIGSEGV, SIGFPE, SIGABRT).

   - Issue #26530(42): Add C functions ‘_PyTraceMalloc_Track()’ and
     ‘_PyTraceMalloc_Untrack()’ to track memory blocks using the *note
     tracemalloc: 111. module.  Add ‘_PyTraceMalloc_GetTraceback()’ to
     get the traceback of an object.

   - Issue #26588(43): The _tracemalloc now supports tracing memory
     allocations of multiple address spaces (domains).

   - Issue #24266(44): Ctrl+C during Readline history search now cancels
     the search mode when compiled with Readline 7.

   - Issue #26590(45): Implement a safe finalizer for the _socket.socket
     type.  It now releases the GIL to close the socket.

   - Issue #18787(46): spwd.getspnam() now raises a PermissionError if
     the user doesn’t have privileges.

   - Issue #26560(47): Avoid potential ValueError in
     BaseHandler.start_response.  Initial patch by Peter Inglesby.

   - Issue #26567(48): Add a new function *note PyErr_ResourceWarning():
     b17. function to pass the destroyed object.  Add a `source'
     attribute to ‘warnings.WarningMessage’.  Add
     warnings._showwarnmsg() which uses tracemalloc to get the traceback
     where source object was allocated.

   - Issue #26313(49): ssl.py _load_windows_store_certs fails if windows
     cert store is empty.  Patch by Baji.

   - Issue #26569(50): Fix *note pyclbr.readmodule(): b18. and *note
     pyclbr.readmodule_ex(): b19. to support importing packages.

   - Issue #26499(51): Account for remaining Content-Length in
     HTTPResponse.readline() and read1().  Based on patch by Silent
     Ghost.  Also document that HTTPResponse now supports these methods.

   - Issue #25320(52): Handle sockets in directories unittest discovery
     is scanning.  Patch from Victor van den Elzen.

   - Issue #16181(53): cookiejar.http2time() now returns None if year is
     higher than datetime.MAXYEAR.

   - Issue #26513(54): Fixes platform module detection of Windows Server

   - Issue #23718(55): Fixed parsing time in week 0 before Jan 1.
     Original patch by Tamás Bence Gedai.

   - Issue #26323(56): Add Mock.assert_called() and
     Mock.assert_called_once() methods to unittest.mock.  Patch written
     by Amit Saha.

   - Issue #20589(57): Invoking Path.owner() and Path.group() on Windows
     now raise NotImplementedError instead of ImportError.

   - Issue #26177(58): Fixed the keys() method for Canvas and Scrollbar
     widgets.

   - Issue #15068(59): Got rid of excessive buffering in fileinput.  The
     bufsize parameter is now deprecated and ignored.

   - Issue #19475(60): Added an optional argument timespec to the
     datetime isoformat() method to choose the precision of the time
     component.

   - Issue #2202(61): Fix UnboundLocalError in
     AbstractDigestAuthHandler.get_algorithm_impls.  Initial patch by
     Mathieu Dupuy.

   - Issue #26167(62): Minimized overhead in copy.copy() and
     copy.deepcopy().  Optimized copying and deepcopying bytearrays,
     NotImplemented, slices, short lists, tuples, dicts, sets.

   - Issue #25718(63): Fixed pickling and copying the accumulate()
     iterator with total is None.

   - Issue #26475(64): Fixed debugging output for regular expressions
     with the (?x) flag.

   - Issue #26482(65): Allowed pickling recursive dequeues.

   - Issue #26335(66): Make mmap.write() return the number of bytes
     written like other write methods.  Patch by Jakub Stasiak.

   - Issue #26457(67): Fixed the subnets() methods in IP network classes
     for the case when resulting prefix length is equal to maximal
     prefix length.  Based on patch by Xiang Zhang.

   - Issue #26385(68): Remove the file if the internal open() call in
     NamedTemporaryFile() fails.  Patch by Silent Ghost.

   - Issue #26402(69): Fix XML-RPC client to retry when the server shuts
     down a persistent connection.  This was a regression related to the
     new http.client.RemoteDisconnected exception in 3.5.0a4.

   - Issue #25913(70): Leading ‘<~’ is optional now in
     base64.a85decode() with adobe=True.  Patch by Swati Jaiswal.

   - Issue #26186(71): Remove an invalid type check in
     importlib.util.LazyLoader.

   - Issue #26367(72): importlib.__import__() raises ImportError like
     builtins.__import__() when ‘level’ is specified but without an
     accompanying package specified.

   - Issue #26309(73): In the "socketserver" module, shut down the
     request (closing the connected socket) when verify_request()
     returns false.  Patch by Aviv Palivoda.

   - Issue #23430(74): Change the socketserver module to only catch
     exceptions raised from a request handler that are derived from
     Exception (instead of BaseException).  Therefore SystemExit and
     KeyboardInterrupt no longer trigger the handle_error() method, and
     will now to stop a single-threaded server.

   - Issue #25939(75): On Windows open the cert store readonly in
     ssl.enum_certificates.

   - Issue #25995(76): os.walk() no longer uses FDs proportional to the
     tree depth.

   - Issue #25994(77): Added the close() method and the support of the
     context manager protocol for the os.scandir() iterator.

   - Issue #23992(78): multiprocessing: make MapResult not fail-fast
     upon exception.

   - Issue #26243(79): Support keyword arguments to zlib.compress().
     Patch by Aviv Palivoda.

   - Issue #26117(80): The os.scandir() iterator now closes file
     descriptor not only when the iteration is finished, but when it was
     failed with error.

   - Issue #25949(81): __dict__ for an OrderedDict instance is now
     created only when needed.

   - Issue #25911(82): Restored support of bytes paths in os.walk() on
     Windows.

   - Issue #26045(83): Add UTF-8 suggestion to error message when
     posting a non-Latin-1 string with http.client.

   - Issue #26039(84): Added zipfile.ZipInfo.from_file() and
     zipinfo.ZipInfo.is_dir().  Patch by Thomas Kluyver.

   - Issue #12923(85): Reset FancyURLopener’s redirect counter even if
     there is an exception.  Based on patches by Brian Brazil and Daniel
     Rocco.

   - Issue #25945(86): Fixed a crash when unpickle the functools.partial
     object with wrong state.  Fixed a leak in failed functools.partial
     constructor.  "args" and "keywords" attributes of functools.partial
     have now always types tuple and dict correspondingly.

   - Issue #26202(87): copy.deepcopy() now correctly copies range()
     objects with non-atomic attributes.

   - Issue #23076(88): Path.glob() now raises a ValueError if it’s
     called with an invalid pattern.  Patch by Thomas Nyberg.

   - Issue #19883(89): Fixed possible integer overflows in zipimport.

   - Issue #26227(90): On Windows, getnameinfo(), gethostbyaddr() and
     gethostbyname_ex() functions of the socket module now decode the
     hostname from the ANSI code page rather than UTF-8.

   - Issue #26099(91): The site module now writes an error into stderr
     if sitecustomize module can be imported but executing the module
     raise an ImportError.  Same change for usercustomize.

   - Issue #26147(92): xmlrpc now works with strings not encodable with
     used non-UTF-8 encoding.

   - Issue #25935(93): Garbage collector now breaks reference loops with
     OrderedDict.

   - Issue #16620(94): Fixed AttributeError in msilib.Directory.glob().

   - Issue #26013(95): Added compatibility with broken protocol 2
     pickles created in old Python 3 versions (3.4.3 and lower).

   - Issue #26129(96): Deprecated accepting non-integers in
     grp.getgrgid().

   - Issue #25850(97): Use cross-compilation by default for 64-bit
     Windows.

   - Issue #25822(98): Add docstrings to the fields of urllib.parse
     results.  Patch contributed by Swati Jaiswal.

   - Issue #22642(99): Convert trace module option parsing mechanism to
     argparse.  Patch contributed by SilentGhost.

   - Issue #24705(100): Fix sysconfig._parse_makefile not expanding ${}
     vars appearing before $() vars.

   - Issue #26069(101): Remove the deprecated apis in the trace module.

   - Issue #22138(102): Fix mock.patch behavior when patching
     descriptors.  Restore original values after patching.  Patch
     contributed by Sean McCully.

   - Issue #25672(103): In the ssl module, enable the
     SSL_MODE_RELEASE_BUFFERS mode option if it is safe to do so.

   - Issue #22570(104): Add ’path’ attribute to pathlib.Path objects,
     returning the same as str(), to make it more similar to DirEntry.
     Library code can now write getattr(p, ’path’, p) to get the path as
     a string from a Path, a DirEntry, or a plain string.  This is
     essentially a small one-off protocol.

   - Issue #26012(105): Don’t traverse into symlinks for ** pattern in
     pathlib.Path.[r]glob().

   - Issue #24120(106): Ignore PermissionError when traversing a tree
     with pathlib.Path.[r]glob().  Patch by Ulrich Petri.

   - Issue #21815(107): Accept ] characters in the data portion of imap
     responses, in order to handle the flags with square brackets
     accepted and produced by servers such as gmail.

   - Issue #25447(108): fileinput now uses sys.stdin as-is if it does
     not have a buffer attribute (restores backward compatibility).

   - Issue #25971(109): Optimized creating Fractions from floats by 2
     times and from Decimals by 3 times.

   - Issue #25802(110): Document as deprecated the remaining
     implementations of importlib.abc.Loader.load_module().

   - Issue #25928(111): Add Decimal.as_integer_ratio().

   - Issue #25447(112): Copying the lru_cache() wrapper object now
     always works, independently from the type of the wrapped object (by
     returning the original object unchanged).

   - Issue #25768(113): Have the functions in compileall return booleans
     instead of ints and add proper documentation and tests for the
     return values.

   - Issue #24103(114): Fixed possible use after free in
     ElementTree.XMLPullParser.

   - Issue #25860(115): os.fwalk() no longer skips remaining directories
     when error occurs.  Original patch by Samson Lee.

   - Issue #25914(116): Fixed and simplified OrderedDict.__sizeof__.

   - Issue #25869(117): Optimized deepcopying ElementTree; it is now 20
     times faster.

   - Issue #25873(118): Optimized iterating ElementTree.  Iterating
     elements Element.iter() is now 40% faster, iterating text
     Element.itertext() is now up to 2.5 times faster.

   - Issue #25902(119): Fixed various refcount issues in ElementTree
     iteration.

   - Issue #22227(120): The TarFile iterator is reimplemented using
     generator.  This implementation is simpler that using class.

   - Issue #25638(121): Optimized ElementTree.iterparse(); it is now 2x
     faster.  Optimized ElementTree parsing; it is now 10% faster.

   - Issue #25761(122): Improved detecting errors in broken pickle data.

   - Issue #25717(123): Restore the previous behaviour of tolerating
     most fstat() errors when opening files.  This was a regression in
     3.5a1, and stopped anonymous temporary files from working in
     special cases.

   - Issue #24903(124): Fix regression in number of arguments compileall
     accepts when ’-d’ is specified.  The check on the number of
     arguments has been dropped completely as it never worked correctly
     anyway.

   - Issue #25764(125): In the subprocess module, preserve any exception
     caused by fork() failure when preexec_fn is used.

   - Issue #25771(126): Tweak the exception message for
     importlib.util.resolve_name() when ’package’ isn’t specified but
     necessary.

   - Issue #6478(127): _strptime’s regexp cache now is reset after
     changing timezone with time.tzset().

   - Issue #14285(128): When executing a package with the "python -m
     package" option, and package initialization fails, a proper
     traceback is now reported.  The "runpy" module now lets exceptions
     from package initialization pass back to the caller, rather than
     raising ImportError.

   - Issue #19771(129): Also in runpy and the "-m" option, omit the
     irrelevant message ".  .  .  is a package and cannot be directly
     executed" if the package could not even be initialized (e.g.  due
     to a bad ‘*.pyc’ file).

   - Issue #25177(130): Fixed problem with the mean of very small and
     very large numbers.  As a side effect, statistics.mean and
     statistics.variance should be significantly faster.

   - Issue #25718(131): Fixed copying object with state with boolean
     value is false.

   - Issue #10131(132): Fixed deep copying of minidom documents.  Based
     on patch by Marian Ganisin.

   - Issue #7990(133): dir() on ElementTree.Element now lists
     properties: "tag", "text", "tail" and "attrib".  Original patch by
     Santoso Wijaya.

   - Issue #25725(134): Fixed a reference leak in pickle.loads() when
     unpickling invalid data including tuple instructions.

   - Issue #25663(135): In the Readline completer, avoid listing
     duplicate global names, and search the global namespace before
     searching builtins.

   - Issue #25688(136): Fixed file leak in ElementTree.iterparse()
     raising an error.

   - Issue #23914(137): Fixed SystemError raised by unpickler on broken
     pickle data.

   - Issue #25691(138): Fixed crash on deleting ElementTree.Element
     attributes.

   - Issue #25624(139): ZipFile now always writes a ZIP_STORED header
     for directory entries.  Patch by Dingyuan Wang.

   - Issue #25626(140): Change three zlib functions to accept sizes that
     fit in Py_ssize_t, but internally cap those sizes to UINT_MAX. This
     resolves a regression in 3.5 where GzipFile.read() failed to read
     chunks larger than 2 or 4 GiB. The change affects the
     zlib.Decompress.decompress() max_length parameter, the
     zlib.decompress() bufsize parameter, and the
     zlib.Decompress.flush() length parameter.

   - Issue #25583(141): Avoid incorrect errors raised by
     os.makedirs(exist_ok=True) when the OS gives priority to errors
     such as EACCES over EEXIST.

   - Issue #25593(142): Change semantics of EventLoop.stop() in asyncio.

   - Issue #6973(143): When we know a subprocess.Popen process has died,
     do not allow the send_signal(), terminate(), or kill() methods to
     do anything as they could potentially signal a different process.

   - Issue #23883(144): Added missing APIs to __all__ to match the
     documented APIs for the following modules: calendar, csv, enum,
     fileinput, ftplib, logging, optparse, tarfile, threading and wave.
     Also added a test.support.check__all__() helper.  Patches by Jacek
     Kołodziej, Mauro S. M. Rodrigues and Joel Taddei.

   - Issue #25590(145): In the Readline completer, only call getattr()
     once per attribute.  Also complete names of attributes such as
     properties and slots which are listed by dir() but not yet created
     on an instance.

   - Issue #25498(146): Fix a crash when garbage-collecting ctypes
     objects created by wrapping a memoryview.  This was a regression
     made in 3.5a1.  Based on patch by Eryksun.

   - Issue #25584(147): Added "escape" to the __all__ list in the glob
     module.

   - Issue #25584(148): Fixed recursive glob() with patterns starting
     with ’**’.

   - Issue #25446(149): Fix regression in smtplib’s AUTH LOGIN support.

   - Issue #18010(150): Fix the pydoc web server’s module search
     function to handle exceptions from importing packages.

   - Issue #25554(151): Got rid of circular references in regular
     expression parsing.

   - Issue #18973(152): Command-line interface of the calendar module
     now uses argparse instead of optparse.

   - Issue #25510(153): fileinput.FileInput.readline() now returns b’’
     instead of ’’ at the end if the FileInput was opened with binary
     mode.  Patch by Ryosuke Ito.

   - Issue #25503(154): Fixed inspect.getdoc() for inherited docstrings
     of properties.  Original patch by John Mark Vandenberg.

   - Issue #25515(155): Always use os.urandom as a source of randomness
     in uuid.uuid4.

   - Issue #21827(156): Fixed textwrap.dedent() for the case when
     largest common whitespace is a substring of smallest leading
     whitespace.  Based on patch by Robert Li.

   - Issue #25447(157): The lru_cache() wrapper objects now can be
     copied and pickled (by returning the original object unchanged).

   - Issue #25390(158): typing: Don’t crash on Union[str, Pattern].

   - Issue #25441(159): asyncio: Raise error from drain() when socket is
     closed.

   - Issue #25410(160): Cleaned up and fixed minor bugs in C
     implementation of OrderedDict.

   - Issue #25411(161): Improved Unicode support in SMTPHandler through
     better use of the email package.  Thanks to user simon04 for the
     patch.

   - Move the imp module from a PendingDeprecationWarning to
     DeprecationWarning.

   - Issue #25407(162): Remove mentions of the formatter module being
     removed in Python 3.6.

   - Issue #25406(163): Fixed a bug in C implementation of
     OrderedDict.move_to_end() that caused segmentation fault or hang in
     iterating after moving several items to the start of ordered dict.

   - Issue #25382(164): pickletools.dis() now outputs implicit memo
     index for the MEMOIZE opcode.

   - Issue #25357(165): Add an optional newline paramer to
     binascii.b2a_base64().  base64.b64encode() uses it to avoid a
     memory copy.

   - Issue #24164(166): Objects that need calling ‘__new__’ with keyword
     arguments, can now be pickled using pickle protocols older than
     protocol version 4.

   - Issue #25364(167): zipfile now works in threads disabled builds.

   - Issue #25328(168): smtpd’s SMTPChannel now correctly raises a
     ValueError if both decode_data and enable_SMTPUTF8 are set to true.

   - Issue #16099(169): RobotFileParser now supports Crawl-delay and
     Request-rate extensions.  Patch by Nikolay Bogoychev.

   - Issue #25316(170): distutils raises OSError instead of
     DistutilsPlatformError when MSVC is not installed.

   - Issue #25380(171): Fixed protocol for the STACK_GLOBAL opcode in
     pickletools.opcodes.

   - Issue #23972(172): Updates asyncio datagram create method allowing
     reuseport and reuseaddr socket options to be set prior to binding
     the socket.  Mirroring the existing asyncio create_server method
     the reuseaddr option for datagram sockets defaults to True if the
     O/S is ’posix’ (except if the platform is Cygwin).  Patch by Chris
     Laws.

   - Issue #25304(173): Add asyncio.run_coroutine_threadsafe().  This
     lets you submit a coroutine to a loop from another thread,
     returning a concurrent.futures.Future.  By Vincent Michel.

   - Issue #25232(174): Fix CGIRequestHandler to split the query from
     the URL at the first question mark (?)  rather than the last.
     Patch from Xiang Zhang.

   - Issue #24657(175): Prevent CGIRequestHandler from collapsing
     slashes in the query part of the URL as if it were a path.  Patch
     from Xiang Zhang.

   - Issue #25287(176): Don’t add crypt.METHOD_CRYPT to crypt.methods if
     it’s not supported.  Check if it is supported, it may not be
     supported on OpenBSD for example.

   - Issue #23600(177): Default implementation of tzinfo.fromutc() was
     returning wrong results in some cases.

   - Issue #25203(178): Failed readline.set_completer_delims() no longer
     left the module in inconsistent state.

   - Issue #25011(179): rlcompleter now omits private and special
     attribute names unless the prefix starts with underscores.

   - Issue #25209(180): rlcompleter now can add a space or a colon after
     completed keyword.

   - Issue #22241(181): timezone.utc name is now plain ’UTC’, not
     ’UTC-00:00’.

   - Issue #23517(182): fromtimestamp() and utcfromtimestamp() methods
     of datetime.datetime now round microseconds to nearest with ties
     going to nearest even integer (ROUND_HALF_EVEN), as round(float),
     instead of rounding towards -Infinity (ROUND_FLOOR).

   - Issue #23552(183): Timeit now warns when there is substantial (4x)
     variance between best and worst times.  Patch from Serhiy
     Storchaka.

   - Issue #24633(184): site-packages/README -> README.txt.

   - Issue #24879(185): help() and pydoc can now list named tuple fields
     in the order they were defined rather than alphabetically.  The
     ordering is determined by the _fields attribute if present.

   - Issue #24874(186): Improve speed of itertools.cycle() and make its
     pickle more compact.

   - Fix crash in itertools.cycle.__setstate__() when the first argument
     wasn’t a list.

   - Issue #20059(187): urllib.parse raises ValueError on all invalid
     ports.  Patch by Martin Panter.

   - Issue #24360(188): Improve __repr__ of argparse.Namespace() for
     invalid identifiers.  Patch by Matthias Bussonnier.

   - Issue #23426(189): run_setup was broken in distutils.  Patch from
     Alexander Belopolsky.

   - Issue #13938(190): 2to3 converts StringTypes to a tuple.  Patch
     from Mark Hammond.

   - Issue #2091(191): open() accepted a ’U’ mode string containing ’+’,
     but ’U’ can only be used with ’r’.  Patch from Jeff Balogh and John
     O’Connor.

   - Issue #8585(192): improved tests for zipimporter2.  Patch from Mark
     Lawrence.

   - Issue #18622(193): unittest.mock.mock_open().reset_mock would
     recurse infinitely.  Patch from Nicola Palumbo and Laurent De
     Buyst.

   - Issue #24426(194): Fast searching optimization in regular
     expressions now works for patterns that starts with capturing
     groups.  Fast searching optimization now can’t be disabled at
     compile time.

   - Issue #23661(195): unittest.mock side_effects can now be exceptions
     again.  This was a regression vs Python 3.4.  Patch from Ignacio
     Rossi

   - Issue #13248(196): Remove deprecated inspect.getmoduleinfo
     function.

   - Issue #25578(197): Fix (another) memory leak in
     SSLSocket.getpeercer().

   - Issue #25530(198): Disable the vulnerable SSLv3 protocol by default
     when creating ssl.SSLContext.

   - Issue #25569(199): Fix memory leak in SSLSocket.getpeercert().

   - Issue #25471(200): Sockets returned from accept() shouldn’t appear
     to be nonblocking.

   - Issue #25319(201): When threading.Event is reinitialized, the
     underlying condition should use a regular lock rather than a
     recursive lock.

   - Skip getaddrinfo if host is already resolved.  Patch by A. Jesse
     Jiryu Davis.

   - Add asyncio.timeout() context manager.

   - Issue #26050(202): Add asyncio.StreamReader.readuntil() method.
     Patch by Марк Коренберг.

   - Issue #25924(203): Avoid unnecessary serialization of
     getaddrinfo(3) calls on OS X versions 10.5 or higher.  Original
     patch by A. Jesse Jiryu Davis.

   - Issue #26406(204): Avoid unnecessary serialization of
     getaddrinfo(3) calls on current versions of OpenBSD and NetBSD.
     Patch by A. Jesse Jiryu Davis.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/26873

   (2) https://bugs.python.org/26915

   (3) https://bugs.python.org/26711

   (4) https://bugs.python.org/24114

   (5) https://bugs.python.org/26864

   (6) https://bugs.python.org/24902

   (7) https://bugs.python.org/25788

   (8) https://bugs.python.org/26634

   (9) https://bugs.python.org/26804

   (10) https://bugs.python.org/26837

   (11) https://bugs.python.org/26041

   (12) https://bugs.python.org/26822

   (13) https://bugs.python.org/26733

   (14) https://bugs.python.org/26801

   (15) https://bugs.python.org/24838

   (16) https://bugs.python.org/26657

   (17) https://bugs.python.org/26717

   (18) https://bugs.python.org/26782

   (19) https://bugs.python.org/26404

   (20) https://bugs.python.org/26735

   (21) https://bugs.python.org/26585

   (22) https://bugs.python.org/26685

   (23) https://bugs.python.org/16329

   (24) https://bugs.python.org/13952

   (25) https://bugs.python.org/26587

   (26) https://bugs.python.org/25609

   (27) https://bugs.python.org/26709

   (28) https://bugs.python.org/23735

   (29) https://bugs.python.org/25951

   (30) https://bugs.python.org/26586

   (31) https://bugs.python.org/26676

   (32) https://bugs.python.org/22854

   (33) https://bugs.python.org/26492

   (34) https://bugs.python.org/26641

   (35) https://bugs.python.org/25195

   (36) https://bugs.python.org/26644

   (37) https://bugs.python.org/23804

   (38) https://bugs.python.org/26616

   (39) https://bugs.python.org/26637

   (40) https://bugs.python.org/21925

   (41) https://bugs.python.org/23848

   (42) https://bugs.python.org/26530

   (43) https://bugs.python.org/26588

   (44) https://bugs.python.org/24266

   (45) https://bugs.python.org/26590

   (46) https://bugs.python.org/18787

   (47) https://bugs.python.org/26560

   (48) https://bugs.python.org/26567

   (49) https://bugs.python.org/26313

   (50) https://bugs.python.org/26569

   (51) https://bugs.python.org/26499

   (52) https://bugs.python.org/25320

   (53) https://bugs.python.org/16181

   (54) https://bugs.python.org/26513

   (55) https://bugs.python.org/23718

   (56) https://bugs.python.org/26323

   (57) https://bugs.python.org/20589

   (58) https://bugs.python.org/26177

   (59) https://bugs.python.org/15068

   (60) https://bugs.python.org/19475

   (61) https://bugs.python.org/2202

   (62) https://bugs.python.org/26167

   (63) https://bugs.python.org/25718

   (64) https://bugs.python.org/26475

   (65) https://bugs.python.org/26482

   (66) https://bugs.python.org/26335

   (67) https://bugs.python.org/26457

   (68) https://bugs.python.org/26385

   (69) https://bugs.python.org/26402

   (70) https://bugs.python.org/25913

   (71) https://bugs.python.org/26186

   (72) https://bugs.python.org/26367

   (73) https://bugs.python.org/26309

   (74) https://bugs.python.org/23430

   (75) https://bugs.python.org/25939

   (76) https://bugs.python.org/25995

   (77) https://bugs.python.org/25994

   (78) https://bugs.python.org/23992

   (79) https://bugs.python.org/26243

   (80) https://bugs.python.org/26117

   (81) https://bugs.python.org/25949

   (82) https://bugs.python.org/25911

   (83) https://bugs.python.org/26045

   (84) https://bugs.python.org/26039

   (85) https://bugs.python.org/12923

   (86) https://bugs.python.org/25945

   (87) https://bugs.python.org/26202

   (88) https://bugs.python.org/23076

   (89) https://bugs.python.org/19883

   (90) https://bugs.python.org/26227

   (91) https://bugs.python.org/26099

   (92) https://bugs.python.org/26147

   (93) https://bugs.python.org/25935

   (94) https://bugs.python.org/16620

   (95) https://bugs.python.org/26013

   (96) https://bugs.python.org/26129

   (97) https://bugs.python.org/25850

   (98) https://bugs.python.org/25822

   (99) https://bugs.python.org/22642

   (100) https://bugs.python.org/24705

   (101) https://bugs.python.org/26069

   (102) https://bugs.python.org/22138

   (103) https://bugs.python.org/25672

   (104) https://bugs.python.org/22570

   (105) https://bugs.python.org/26012

   (106) https://bugs.python.org/24120

   (107) https://bugs.python.org/21815

   (108) https://bugs.python.org/25447

   (109) https://bugs.python.org/25971

   (110) https://bugs.python.org/25802

   (111) https://bugs.python.org/25928

   (112) https://bugs.python.org/25447

   (113) https://bugs.python.org/25768

   (114) https://bugs.python.org/24103

   (115) https://bugs.python.org/25860

   (116) https://bugs.python.org/25914

   (117) https://bugs.python.org/25869

   (118) https://bugs.python.org/25873

   (119) https://bugs.python.org/25902

   (120) https://bugs.python.org/22227

   (121) https://bugs.python.org/25638

   (122) https://bugs.python.org/25761

   (123) https://bugs.python.org/25717

   (124) https://bugs.python.org/24903

   (125) https://bugs.python.org/25764

   (126) https://bugs.python.org/25771

   (127) https://bugs.python.org/6478

   (128) https://bugs.python.org/14285

   (129) https://bugs.python.org/19771

   (130) https://bugs.python.org/25177

   (131) https://bugs.python.org/25718

   (132) https://bugs.python.org/10131

   (133) https://bugs.python.org/7990

   (134) https://bugs.python.org/25725

   (135) https://bugs.python.org/25663

   (136) https://bugs.python.org/25688

   (137) https://bugs.python.org/23914

   (138) https://bugs.python.org/25691

   (139) https://bugs.python.org/25624

   (140) https://bugs.python.org/25626

   (141) https://bugs.python.org/25583

   (142) https://bugs.python.org/25593

   (143) https://bugs.python.org/6973

   (144) https://bugs.python.org/23883

   (145) https://bugs.python.org/25590

   (146) https://bugs.python.org/25498

   (147) https://bugs.python.org/25584

   (148) https://bugs.python.org/25584

   (149) https://bugs.python.org/25446

   (150) https://bugs.python.org/18010

   (151) https://bugs.python.org/25554

   (152) https://bugs.python.org/18973

   (153) https://bugs.python.org/25510

   (154) https://bugs.python.org/25503

   (155) https://bugs.python.org/25515

   (156) https://bugs.python.org/21827

   (157) https://bugs.python.org/25447

   (158) https://bugs.python.org/25390

   (159) https://bugs.python.org/25441

   (160) https://bugs.python.org/25410

   (161) https://bugs.python.org/25411

   (162) https://bugs.python.org/25407

   (163) https://bugs.python.org/25406

   (164) https://bugs.python.org/25382

   (165) https://bugs.python.org/25357

   (166) https://bugs.python.org/24164

   (167) https://bugs.python.org/25364

   (168) https://bugs.python.org/25328

   (169) https://bugs.python.org/16099

   (170) https://bugs.python.org/25316

   (171) https://bugs.python.org/25380

   (172) https://bugs.python.org/23972

   (173) https://bugs.python.org/25304

   (174) https://bugs.python.org/25232

   (175) https://bugs.python.org/24657

   (176) https://bugs.python.org/25287

   (177) https://bugs.python.org/23600

   (178) https://bugs.python.org/25203

   (179) https://bugs.python.org/25011

   (180) https://bugs.python.org/25209

   (181) https://bugs.python.org/22241

   (182) https://bugs.python.org/23517

   (183) https://bugs.python.org/23552

   (184) https://bugs.python.org/24633

   (185) https://bugs.python.org/24879

   (186) https://bugs.python.org/24874

   (187) https://bugs.python.org/20059

   (188) https://bugs.python.org/24360

   (189) https://bugs.python.org/23426

   (190) https://bugs.python.org/13938

   (191) https://bugs.python.org/2091

   (192) https://bugs.python.org/8585

   (193) https://bugs.python.org/18622

   (194) https://bugs.python.org/24426

   (195) https://bugs.python.org/23661

   (196) https://bugs.python.org/13248

   (197) https://bugs.python.org/25578

   (198) https://bugs.python.org/25530

   (199) https://bugs.python.org/25569

   (200) https://bugs.python.org/25471

   (201) https://bugs.python.org/25319

   (202) https://bugs.python.org/26050

   (203) https://bugs.python.org/25924

   (204) https://bugs.python.org/26406


File: python.info,  Node: IDLE<3>,  Next: Documentation<2>,  Prev: Library,  Up: Python 3 6 0 alpha 1

1.16.1.3 IDLE
.............

   - Issue 15348: Stop the debugger engine (normally in a user process)
     before closing the debugger window (running in the IDLE process).
     This prevents the RuntimeErrors that were being caught and ignored.

   - Issue #24455(1): Prevent IDLE from hanging when a) closing the
     shell while the debugger is active (15347); b) closing the debugger
     with the [X] button (15348); and c) activating the debugger when
     already active (24455).  The patch by Mark Roseman does this by
     making two changes.  1.  Suspend and resume the gui.interaction
     method with the tcl vwait mechanism intended for this purpose
     (instead of root.mainloop & .quit).  2.  In gui.run, allow any
     existing interaction to terminate first.

   - Change ’The program’ to ’Your program’ in an IDLE ’kill program?’
     message to make it clearer that the program referred to is the
     currently running user program, not IDLE itself.

   - Issue #24750(2): Improve the appearance of the IDLE editor window
     status bar.  Patch by Mark Roseman.

   - Issue #25313(3): Change the handling of new built-in text color
     themes to better address the compatibility problem introduced by
     the addition of IDLE Dark.  Consistently use the revised
     idleConf.CurrentTheme everywhere in idlelib.

   - Issue #24782(4): Extension configuration is now a tab in the IDLE
     Preferences dialog rather than a separate dialog.  The former tabs
     are now a sorted list.  Patch by Mark Roseman.

   - Issue #22726(5): Re-activate the config dialog help button with
     some content about the other buttons and the new IDLE Dark theme.

   - Issue #24820(6): IDLE now has an ’IDLE Dark’ built-in text color
     theme.  It is more or less IDLE Classic inverted, with a cobalt
     blue background.  Strings, comments, keywords, ...  are still
     green, red, orange, ...  .  To use it with IDLEs released before
     November 2015, hit the ’Save as New Custom Theme’ button and enter
     a new name, such as ’Custom Dark’.  The custom theme will work with
     any IDLE release, and can be modified.

   - Issue #25224(7): README.txt is now an idlelib index for IDLE
     developers and curious users.  The previous user content is now in
     the IDLE doc chapter.  ’IDLE’ now means ’Integrated Development and
     Learning Environment’.

   - Issue #24820(8): Users can now set breakpoint colors in Settings ->
     Custom Highlighting.  Original patch by Mark Roseman.

   - Issue #24972(9): Inactive selection background now matches active
     selection background, as configured by users, on all systems.
     Found items are now always highlighted on Windows.  Initial patch
     by Mark Roseman.

   - Issue #24570(10): Idle: make calltip and completion boxes appear on
     Macs affected by a tk regression.  Initial patch by Mark Roseman.

   - Issue #24988(11): Idle ScrolledList context menus (used in
     debugger) now work on Mac Aqua.  Patch by Mark Roseman.

   - Issue #24801(12): Make right-click for context menu work on Mac
     Aqua.  Patch by Mark Roseman.

   - Issue #25173(13): Associate tkinter messageboxes with a specific
     widget.  For Mac OSX, make them a ’sheet’.  Patch by Mark Roseman.

   - Issue #25198(14): Enhance the initial html viewer now used for Idle
     Help.  * Properly indent fixed-pitch text (patch by Mark Roseman).
     * Give code snippet a very Sphinx-like light blueish-gray
     background.  * Re-use initial width and height set by users for
     shell and editor.  * When the Table of Contents (TOC) menu is used,
     put the section header at the top of the screen.

   - Issue #25225(15): Condense and rewrite Idle doc section on text
     colors.

   - Issue #21995(16): Explain some differences between IDLE and console
     Python.

   - Issue #22820(17): Explain need for `print' when running file from
     Idle editor.

   - Issue #25224(18): Doc: augment Idle feature list and no-subprocess
     section.

   - Issue #25219(19): Update doc for Idle command line options.  Some
     were missing and notes were not correct.

   - Issue #24861(20): Most of idlelib is private and subject to change.
     Use idleib.idle.* to start Idle.  See idlelib.__init__.__doc__.

   - Issue #25199(21): Idle: add synchronization comments for future
     maintainers.

   - Issue #16893(22): Replace help.txt with help.html for Idle doc
     display.  The new idlelib/help.html is rstripped
     Doc/build/html/library/idle.html.  It looks better than help.txt
     and will better document Idle as released.  The tkinter html viewer
     that works for this file was written by Rose Roseman.  The now
     unused EditorWindow.HelpDialog class and helt.txt file are
     deprecated.

   - Issue #24199(23): Deprecate unused idlelib.idlever with possible
     removal in 3.6.

   - Issue #24790(24): Remove extraneous code (which also create 2 & 3
     conflicts).

   ---------- Footnotes ----------

   (1) https://bugs.python.org/24455

   (2) https://bugs.python.org/24750

   (3) https://bugs.python.org/25313

   (4) https://bugs.python.org/24782

   (5) https://bugs.python.org/22726

   (6) https://bugs.python.org/24820

   (7) https://bugs.python.org/25224

   (8) https://bugs.python.org/24820

   (9) https://bugs.python.org/24972

   (10) https://bugs.python.org/24570

   (11) https://bugs.python.org/24988

   (12) https://bugs.python.org/24801

   (13) https://bugs.python.org/25173

   (14) https://bugs.python.org/25198

   (15) https://bugs.python.org/25225

   (16) https://bugs.python.org/21995

   (17) https://bugs.python.org/22820

   (18) https://bugs.python.org/25224

   (19) https://bugs.python.org/25219

   (20) https://bugs.python.org/24861

   (21) https://bugs.python.org/25199

   (22) https://bugs.python.org/16893

   (23) https://bugs.python.org/24199

   (24) https://bugs.python.org/24790


File: python.info,  Node: Documentation<2>,  Next: Tests,  Prev: IDLE<3>,  Up: Python 3 6 0 alpha 1

1.16.1.4 Documentation
......................

   - Issue #6953(1): Rework the Readline module documentation to group
     related functions together, and add more details such as what
     underlying Readline functions and variables are accessed.

   - Issue #23606(2): Adds note to ctypes documentation regarding
     cdll.msvcrt.

   - Issue #24952(3): Clarify the default size argument of stack_size()
     in the "threading" and "_thread" modules.  Patch from Mattip.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/6953

   (2) https://bugs.python.org/23606

   (3) https://bugs.python.org/24952


File: python.info,  Node: Tests,  Next: Build,  Prev: Documentation<2>,  Up: Python 3 6 0 alpha 1

1.16.1.5 Tests
..............

   - Issue #26295(1): When using "python3 -m test –testdir=TESTDIR",
     regrtest doesn’t add "test."  prefix to test module names.

   - Issue #26523(2): The multiprocessing thread pool
     (multiprocessing.dummy.Pool) was untested.

   - Issue #26015(3): Added new tests for pickling iterators of mutable
     sequences.

   - Issue #26325(4): Added test.support.check_no_resource_warning() to
     check that no ResourceWarning is emitted.

   - Issue #25940(5): Changed test_ssl to use its internal local server
     more.  This avoids relying on svn.python.org, which recently
     changed root certificate.

   - Issue #25616(6): Tests for OrderedDict are extracted from
     test_collections into separate file test_ordered_dict.

   - Issue #25449(7): Added tests for OrderedDict subclasses.

   - Issue #25188(8): Add -P/–pgo to test.regrtest to suppress error
     output when running the test suite for the purposes of a PGO build.
     Initial patch by Alecsandru Patrascu.

   - Issue #22806(9): Add ‘python -m test --list-tests’ command to list
     tests.

   - Issue #18174(10): ‘python -m test --huntrleaks ...’ now also checks
     for leak of file descriptors.  Patch written by Richard Oudkerk.

   - Issue #25260(11): Fix ‘python -m test --coverage’ on Windows.
     Remove the list of ignored directories.

   - ‘PCbuild\rt.bat’ now accepts an unlimited number of arguments to
     pass along to regrtest.py.  Previously there was a limit of 9.

   - Issue #26583(12): Skip test_timestamp_overflow in test_import if
     bytecode files cannot be written.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/26295

   (2) https://bugs.python.org/26523

   (3) https://bugs.python.org/26015

   (4) https://bugs.python.org/26325

   (5) https://bugs.python.org/25940

   (6) https://bugs.python.org/25616

   (7) https://bugs.python.org/25449

   (8) https://bugs.python.org/25188

   (9) https://bugs.python.org/22806

   (10) https://bugs.python.org/18174

   (11) https://bugs.python.org/25260

   (12) https://bugs.python.org/26583


File: python.info,  Node: Build,  Next: Windows,  Prev: Tests,  Up: Python 3 6 0 alpha 1

1.16.1.6 Build
..............

   - Issue #26932(1): Fixed support of RTLD_* constants defined as enum
     values, not via macros (in particular on Android).  Patch by Chi
     Hsuan Yen.

   - Issue #22359(2): Disable the rules for running _freeze_importlib
     and pgen when cross-compiling.  The output of these programs is
     normally saved with the source code anyway, and is still
     regenerated when doing a native build.  Patch by Xavier de Gaye.

   - Issue #21668(3): Link audioop, _datetime, _ctypes_test modules to
     libm, except on Mac OS X. Patch written by Chi Hsuan Yen.

   - Issue #25702(4): A –with-lto configure option has been added that
     will enable link time optimizations at build time during a make
     profile-opt.  Some compilers and toolchains are known to not
     produce stable code when using LTO, be sure to test things
     thoroughly before relying on it.  It can provide a few % speed up
     over profile-opt alone.

   - Issue #26624(5): Adds validation of ucrtbase[d].dll version with
     warning for old versions.

   - Issue #17603(6): Avoid error about nonexistant fileblocks.o file by
     using a lower-level check for st_blocks in struct stat.

   - Issue #26079(7): Fixing the build output folder for tix-8.4.3.6.
     Patch by Bjoern Thiel.

   - Issue #26465(8): Update Windows builds to use OpenSSL 1.0.2g.

   - Issue #25348(9): Added ‘--pgo’ and ‘--pgo-job’ arguments to
     ‘PCbuild\build.bat’ for building with Profile-Guided Optimization.
     The old ‘PCbuild\build_pgo.bat’ script is removed.

   - Issue #25827(10): Add support for building with ICC to ‘configure’,
     including a new ‘--with-icc’ flag.

   - Issue #25696(11): Fix installation of Python on UNIX with make -j9.

   - Issue #24986(12): It is now possible to build Python on Windows
     without errors when external libraries are not available.

   - Issue #24421(13): Compile Modules/_math.c once, before building
     extensions.  Previously it could fail to compile properly if the
     math and cmath builds were concurrent.

   - Issue #26465(14): Update OS X 10.5+ 32-bit-only installer to build
     and link with OpenSSL 1.0.2g.

   - Issue #26268(15): Update Windows builds to use OpenSSL 1.0.2f.

   - Issue #25136(16): Support Apple Xcode 7’s new textual SDK stub
     libraries.

   - Issue #24324(17): Do not enable unreachable code warnings when
     using gcc as the option does not work correctly in older versions
     of gcc and has been silently removed as of gcc-4.5.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/26932

   (2) https://bugs.python.org/22359

   (3) https://bugs.python.org/21668

   (4) https://bugs.python.org/25702

   (5) https://bugs.python.org/26624

   (6) https://bugs.python.org/17603

   (7) https://bugs.python.org/26079

   (8) https://bugs.python.org/26465

   (9) https://bugs.python.org/25348

   (10) https://bugs.python.org/25827

   (11) https://bugs.python.org/25696

   (12) https://bugs.python.org/24986

   (13) https://bugs.python.org/24421

   (14) https://bugs.python.org/26465

   (15) https://bugs.python.org/26268

   (16) https://bugs.python.org/25136

   (17) https://bugs.python.org/24324


File: python.info,  Node: Windows,  Next: Tools/Demos,  Prev: Build,  Up: Python 3 6 0 alpha 1

1.16.1.7 Windows
................

   - Issue #26268(1): Update the prepare_ssl.py script to handle OpenSSL
     releases that don’t include the contents of the include directory
     (that is, 1.0.2e and later).

   - Issue #26071(2): bdist_wininst created binaries fail to start and
     find 32bit Python

   - Issue #26073(3): Update the list of magic numbers in launcher

   - Issue #26065(4): Excludes venv from library when generating
     embeddable distro.

   - Issue #25022(5): Removed very outdated PC/example_nt/ directory.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/26268

   (2) https://bugs.python.org/26071

   (3) https://bugs.python.org/26073

   (4) https://bugs.python.org/26065

   (5) https://bugs.python.org/25022


File: python.info,  Node: Tools/Demos,  Next: C API,  Prev: Windows,  Up: Python 3 6 0 alpha 1

1.16.1.8 Tools/Demos
....................

   - Issue #26799(1): Fix python-gdb.py: don’t get C types once when the
     Python code is loaded, but get C types on demand.  The C types can
     change if python-gdb.py is loaded before the Python executable.
     Patch written by Thomas Ilsche.

   - Issue #26271(2): Fix the Freeze tool to properly use flags passed
     through configure.  Patch by Daniel Shaulov.

   - Issue #26489(3): Add dictionary unpacking support to
     Tools/parser/unparse.py.  Patch by Guo Ci Teo.

   - Issue #26316(4): Fix variable name typo in Argument Clinic.

   - Issue #25440(5): Fix output of python-config –extension-suffix.

   - Issue #25154(6): The pyvenv script has been deprecated in favour of
     ‘python3 -m venv’.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/26799

   (2) https://bugs.python.org/26271

   (3) https://bugs.python.org/26489

   (4) https://bugs.python.org/26316

   (5) https://bugs.python.org/25440

   (6) https://bugs.python.org/25154


File: python.info,  Node: C API,  Prev: Tools/Demos,  Up: Python 3 6 0 alpha 1

1.16.1.9 C API
..............

   - Issue #26312(1): SystemError is now raised in all programming bugs
     with using PyArg_ParseTupleAndKeywords().  RuntimeError did raised
     before in some programming bugs.

   - Issue #26198(2): ValueError is now raised instead of TypeError on
     buffer overflow in parsing "es#" and "et#" format units.
     SystemError is now raised instead of TypeError on programmical
     error in parsing format string.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/26312

   (2) https://bugs.python.org/26198


File: python.info,  Node: Python 3 5 1 final,  Next: Python 3 5 1 release candidate 1,  Prev: Python 3 6 0 alpha 1,  Up: Changelog

1.16.2 Python 3.5.1 final
-------------------------

Release date: 2015-12-06

* Menu:

* Core and Builtins: Core and Builtins<2>. 
* Windows: Windows<2>. 


File: python.info,  Node: Core and Builtins<2>,  Next: Windows<2>,  Up: Python 3 5 1 final

1.16.2.1 Core and Builtins
..........................

   - Issue #25709(1): Fixed problem with in-place string concatenation
     and utf-8 cache.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/25709


File: python.info,  Node: Windows<2>,  Prev: Core and Builtins<2>,  Up: Python 3 5 1 final

1.16.2.2 Windows
................

   - Issue #25715(1): Python 3.5.1 installer shows wrong upgrade path
     and incorrect logic for launcher detection.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/25715


File: python.info,  Node: Python 3 5 1 release candidate 1,  Next: Python 3 5 0 final,  Prev: Python 3 5 1 final,  Up: Changelog

1.16.3 Python 3.5.1 release candidate 1
---------------------------------------

Release date: 2015-11-22

* Menu:

* Core and Builtins: Core and Builtins<3>. 
* Library: Library<2>. 
* IDLE: IDLE<4>. 
* Documentation: Documentation<3>. 
* Tests: Tests<2>. 
* Build: Build<2>. 
* Windows: Windows<3>. 
* Tools/Demos: Tools/Demos<2>. 


File: python.info,  Node: Core and Builtins<3>,  Next: Library<2>,  Up: Python 3 5 1 release candidate 1

1.16.3.1 Core and Builtins
..........................

   - Issue #25630(1): Fix a possible segfault during argument parsing in
     functions that accept filesystem paths.

   - Issue #23564(2): Fixed a partially broken sanity check in the
     _posixsubprocess internals regarding how fds_to_pass were passed to
     the child.  The bug had no actual impact as subprocess.py already
     avoided it.

   - Issue #25388(3): Fixed tokenizer crash when processing undecodable
     source code with a null byte.

   - Issue #25462(4): The hash of the key now is calculated only once in
     most operations in C implementation of OrderedDict.

   - Issue #22995(5): Default implementation of __reduce__ and
     __reduce_ex__ now rejects builtin types with not defined __new__.

   - Issue #25555(6): Fix parser and AST: fill lineno and col_offset of
     "arg" node when compiling AST from Python objects.

   - Issue #24802(7): Avoid buffer overreads when int(), float(),
     compile(), exec() and eval() are passed bytes-like objects.  These
     objects are not necessarily terminated by a null byte, but the
     functions assumed they were.

   - Issue #24726(8): Fixed a crash and leaking NULL in repr() of
     OrderedDict that was mutated by direct calls of dict methods.

   - Issue #25449(9): Iterating OrderedDict with keys with unstable hash
     now raises KeyError in C implementations as well as in Python
     implementation.

   - Issue #25395(10): Fixed crash when highly nested OrderedDict
     structures were garbage collected.

   - Issue #25274(11): sys.setrecursionlimit() now raises a
     RecursionError if the new recursion limit is too low depending at
     the current recursion depth.  Modify also the "lower-water mark"
     formula to make it monotonic.  This mark is used to decide when the
     overflowed flag of the thread state is reset.

   - Issue #24402(12): Fix input() to prompt to the redirected stdout
     when sys.stdout.fileno() fails.

   - Issue #24806(13): Prevent builtin types that are not allowed to be
     subclassed from being subclassed through multiple inheritance.

   - Issue #24848(14): Fixed a number of bugs in UTF-7 decoding of
     misformed data.

   - Issue #25280(15): Import trace messages emitted in verbose (-v)
     mode are no longer formatted twice.

   - Issue #25003(16): On Solaris 11.3 or newer, os.urandom() now uses
     the getrandom() function instead of the getentropy() function.  The
     getentropy() function is blocking to generate very good quality
     entropy, os.urandom() doesn’t need such high-quality entropy.

   - Issue #25182(17): The stdprinter (used as sys.stderr before the io
     module is imported at startup) now uses the backslashreplace error
     handler.

   - Issue #25131(18): Make the line number and column offset of
     set/dict literals and comprehensions correspond to the opening
     brace.

   - Issue #25150(19): Hide the private _Py_atomic_xxx symbols from the
     public Python.h header to fix a compilation error with OpenMP.
     PyThreadState_GET() becomes an alias to PyThreadState_Get() to
     avoid ABI incompatibilies.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/25630

   (2) https://bugs.python.org/23564

   (3) https://bugs.python.org/25388

   (4) https://bugs.python.org/25462

   (5) https://bugs.python.org/22995

   (6) https://bugs.python.org/25555

   (7) https://bugs.python.org/24802

   (8) https://bugs.python.org/24726

   (9) https://bugs.python.org/25449

   (10) https://bugs.python.org/25395

   (11) https://bugs.python.org/25274

   (12) https://bugs.python.org/24402

   (13) https://bugs.python.org/24806

   (14) https://bugs.python.org/24848

   (15) https://bugs.python.org/25280

   (16) https://bugs.python.org/25003

   (17) https://bugs.python.org/25182

   (18) https://bugs.python.org/25131

   (19) https://bugs.python.org/25150


File: python.info,  Node: Library<2>,  Next: IDLE<4>,  Prev: Core and Builtins<3>,  Up: Python 3 5 1 release candidate 1

1.16.3.2 Library
................

   - Issue #25626(1): Change three zlib functions to accept sizes that
     fit in Py_ssize_t, but internally cap those sizes to UINT_MAX. This
     resolves a regression in 3.5 where GzipFile.read() failed to read
     chunks larger than 2 or 4 GiB. The change affects the
     zlib.Decompress.decompress() max_length parameter, the
     zlib.decompress() bufsize parameter, and the
     zlib.Decompress.flush() length parameter.

   - Issue #25583(2): Avoid incorrect errors raised by
     os.makedirs(exist_ok=True) when the OS gives priority to errors
     such as EACCES over EEXIST.

   - Issue #25593(3): Change semantics of EventLoop.stop() in asyncio.

   - Issue #6973(4): When we know a subprocess.Popen process has died,
     do not allow the send_signal(), terminate(), or kill() methods to
     do anything as they could potentially signal a different process.

   - Issue #25590(5): In the Readline completer, only call getattr()
     once per attribute.

   - Issue #25498(6): Fix a crash when garbage-collecting ctypes objects
     created by wrapping a memoryview.  This was a regression made in
     3.5a1.  Based on patch by Eryksun.

   - Issue #25584(7): Added "escape" to the __all__ list in the glob
     module.

   - Issue #25584(8): Fixed recursive glob() with patterns starting with
     ’**’.

   - Issue #25446(9): Fix regression in smtplib’s AUTH LOGIN support.

   - Issue #18010(10): Fix the pydoc web server’s module search function
     to handle exceptions from importing packages.

   - Issue #25554(11): Got rid of circular references in regular
     expression parsing.

   - Issue #25510(12): fileinput.FileInput.readline() now returns b’’
     instead of ’’ at the end if the FileInput was opened with binary
     mode.  Patch by Ryosuke Ito.

   - Issue #25503(13): Fixed inspect.getdoc() for inherited docstrings
     of properties.  Original patch by John Mark Vandenberg.

   - Issue #25515(14): Always use os.urandom as a source of randomness
     in uuid.uuid4.

   - Issue #21827(15): Fixed textwrap.dedent() for the case when largest
     common whitespace is a substring of smallest leading whitespace.
     Based on patch by Robert Li.

   - Issue #25447(16): The lru_cache() wrapper objects now can be copied
     and pickled (by returning the original object unchanged).

   - Issue #25390(17): typing: Don’t crash on Union[str, Pattern].

   - Issue #25441(18): asyncio: Raise error from drain() when socket is
     closed.

   - Issue #25410(19): Cleaned up and fixed minor bugs in C
     implementation of OrderedDict.

   - Issue #25411(20): Improved Unicode support in SMTPHandler through
     better use of the email package.  Thanks to user simon04 for the
     patch.

   - Issue #25407(21): Remove mentions of the formatter module being
     removed in Python 3.6.

   - Issue #25406(22): Fixed a bug in C implementation of
     OrderedDict.move_to_end() that caused segmentation fault or hang in
     iterating after moving several items to the start of ordered dict.

   - Issue #25364(23): zipfile now works in threads disabled builds.

   - Issue #25328(24): smtpd’s SMTPChannel now correctly raises a
     ValueError if both decode_data and enable_SMTPUTF8 are set to true.

   - Issue #25316(25): distutils raises OSError instead of
     DistutilsPlatformError when MSVC is not installed.

   - Issue #25380(26): Fixed protocol for the STACK_GLOBAL opcode in
     pickletools.opcodes.

   - Issue #23972(27): Updates asyncio datagram create method allowing
     reuseport and reuseaddr socket options to be set prior to binding
     the socket.  Mirroring the existing asyncio create_server method
     the reuseaddr option for datagram sockets defaults to True if the
     O/S is ’posix’ (except if the platform is Cygwin).  Patch by Chris
     Laws.

   - Issue #25304(28): Add asyncio.run_coroutine_threadsafe().  This
     lets you submit a coroutine to a loop from another thread,
     returning a concurrent.futures.Future.  By Vincent Michel.

   - Issue #25232(29): Fix CGIRequestHandler to split the query from the
     URL at the first question mark (?)  rather than the last.  Patch
     from Xiang Zhang.

   - Issue #24657(30): Prevent CGIRequestHandler from collapsing slashes
     in the query part of the URL as if it were a path.  Patch from
     Xiang Zhang.

   - Issue #24483(31): C implementation of functools.lru_cache() now
     calculates key’s hash only once.

   - Issue #22958(32): Constructor and update method of
     weakref.WeakValueDictionary now accept the self and the dict
     keyword arguments.

   - Issue #22609(33): Constructor of collections.UserDict now accepts
     the self keyword argument.

   - Issue #25111(34): Fixed comparison of traceback.FrameSummary.

   - Issue #25262(35).  Added support for BINBYTES8 opcode in Python
     implementation of unpickler.  Highest 32 bits of 64-bit size for
     BINUNICODE8 and BINBYTES8 opcodes no longer silently ignored on
     32-bit platforms in C implementation.

   - Issue #25034(36): Fix string.Formatter problem with auto-numbering
     and nested format_specs.  Patch by Anthon van der Neut.

   - Issue #25233(37): Rewrite the guts of asyncio.Queue and
     asyncio.Semaphore to be more understandable and correct.

   - Issue #25203(38): Failed readline.set_completer_delims() no longer
     left the module in inconsistent state.

   - Issue #23600(39): Default implementation of tzinfo.fromutc() was
     returning wrong results in some cases.

   - Issue #23329(40): Allow the ssl module to be built with older
     versions of LibreSSL.

   - Prevent overflow in _Unpickler_Read.

   - Issue #25047(41): The XML encoding declaration written by Element
     Tree now respects the letter case given by the user.  This restores
     the ability to write encoding names in uppercase like "UTF-8",
     which worked in Python 2.

   - Issue #25135(42): Make deque_clear() safer by emptying the deque
     before clearing.  This helps avoid possible reentrancy issues.

   - Issue #19143(43): platform module now reads Windows version from
     kernel32.dll to avoid compatibility shims.

   - Issue #25092(44): Fix datetime.strftime() failure when errno was
     already set to EINVAL.

   - Issue #23517(45): Fix rounding in fromtimestamp() and
     utcfromtimestamp() methods of datetime.datetime: microseconds are
     now rounded to nearest with ties going to nearest even integer
     (ROUND_HALF_EVEN), instead of being rounding towards minus infinity
     (ROUND_FLOOR). It’s important that these methods use the same
     rounding mode than datetime.timedelta to keep the property:
     (datetime(1970,1,1) + timedelta(seconds=t)) ==
     datetime.utcfromtimestamp(t).  It also the rounding mode used by
     round(float) for example.

   - Issue #25155(46): Fix datetime.datetime.now() and
     datetime.datetime.utcnow() on Windows to support date after year
     2038.  It was a regression introduced in Python 3.5.0.

   - Issue #25108(47): Omitted internal frames in traceback functions
     print_stack(), format_stack(), and extract_stack() called without
     arguments.

   - Issue #25118(48): Fix a regression of Python 3.5.0 in os.waitpid()
     on Windows.

   - Issue #24684(49): socket.socket.getaddrinfo() now calls
     PyUnicode_AsEncodedString() instead of calling the encode() method
     of the host, to handle correctly custom string with an encode()
     method which doesn’t return a byte string.  The encoder of the IDNA
     codec is now called directly instead of calling the encode() method
     of the string.

   - Issue #25060(50): Correctly compute stack usage of the BUILD_MAP
     opcode.

   - Issue #24857(51): Comparing call_args to a long sequence now
     correctly returns a boolean result instead of raising an exception.
     Patch by A Kaptur.

   - Issue #23144(52): Make sure that HTMLParser.feed() returns all the
     data, even when convert_charrefs is True.

   - Issue #24982(53): shutil.make_archive() with the "zip" format now
     adds entries for directories (including empty directories) in ZIP
     file.

   - Issue #25019(54): Fixed a crash caused by setting non-string key of
     expat parser.  Based on patch by John Leitch.

   - Issue #16180(55): Exit pdb if file has syntax error, instead of
     trapping user in an infinite loop.  Patch by Xavier de Gaye.

   - Issue #24891(56): Fix a race condition at Python startup if the
     file descriptor of stdin (0), stdout (1) or stderr (2) is closed
     while Python is creating sys.stdin, sys.stdout and sys.stderr
     objects.  These attributes are now set to None if the creation of
     the object failed, instead of raising an OSError exception.
     Initial patch written by Marco Paolini.

   - Issue #24992(57): Fix error handling and a race condition (related
     to garbage collection) in collections.OrderedDict constructor.

   - Issue #24881(58): Fixed setting binary mode in Python
     implementation of FileIO on Windows and Cygwin.  Patch from Akira
     Li.

   - Issue #25578(59): Fix (another) memory leak in
     SSLSocket.getpeercer().

   - Issue #25530(60): Disable the vulnerable SSLv3 protocol by default
     when creating ssl.SSLContext.

   - Issue #25569(61): Fix memory leak in SSLSocket.getpeercert().

   - Issue #25471(62): Sockets returned from accept() shouldn’t appear
     to be nonblocking.

   - Issue #25319(63): When threading.Event is reinitialized, the
     underlying condition should use a regular lock rather than a
     recursive lock.

   - Issue #21112(64): Fix regression in unittest.expectedFailure on
     subclasses.  Patch from Berker Peksag.

   - Issue #24764(65): cgi.FieldStorage.read_multi() now ignores the
     Content-Length header in part headers.  Patch written by Peter
     Landry and reviewed by Pierre Quentel.

   - Issue #24913(66): Fix overrun error in deque.index().  Found by
     John Leitch and Bryce Darling.

   - Issue #24774(67): Fix docstring in http.server.test.  Patch from
     Chiu-Hsiang Hsu.

   - Issue #21159(68): Improve message in
     configparser.InterpolationMissingOptionError.  Patch from Łukasz
     Langa.

   - Issue #20362(69): Honour TestCase.longMessage correctly in
     assertRegex.  Patch from Ilia Kurenkov.

   - Issue #23572(70): Fixed functools.singledispatch on classes with
     falsy metaclasses.  Patch by Ethan Furman.

   - asyncio: ensure_future() now accepts awaitable objects.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/25626

   (2) https://bugs.python.org/25583

   (3) https://bugs.python.org/25593

   (4) https://bugs.python.org/6973

   (5) https://bugs.python.org/25590

   (6) https://bugs.python.org/25498

   (7) https://bugs.python.org/25584

   (8) https://bugs.python.org/25584

   (9) https://bugs.python.org/25446

   (10) https://bugs.python.org/18010

   (11) https://bugs.python.org/25554

   (12) https://bugs.python.org/25510

   (13) https://bugs.python.org/25503

   (14) https://bugs.python.org/25515

   (15) https://bugs.python.org/21827

   (16) https://bugs.python.org/25447

   (17) https://bugs.python.org/25390

   (18) https://bugs.python.org/25441

   (19) https://bugs.python.org/25410

   (20) https://bugs.python.org/25411

   (21) https://bugs.python.org/25407

   (22) https://bugs.python.org/25406

   (23) https://bugs.python.org/25364

   (24) https://bugs.python.org/25328

   (25) https://bugs.python.org/25316

   (26) https://bugs.python.org/25380

   (27) https://bugs.python.org/23972

   (28) https://bugs.python.org/25304

   (29) https://bugs.python.org/25232

   (30) https://bugs.python.org/24657

   (31) https://bugs.python.org/24483

   (32) https://bugs.python.org/22958

   (33) https://bugs.python.org/22609

   (34) https://bugs.python.org/25111

   (35) https://bugs.python.org/25262

   (36) https://bugs.python.org/25034

   (37) https://bugs.python.org/25233

   (38) https://bugs.python.org/25203

   (39) https://bugs.python.org/23600

   (40) https://bugs.python.org/23329

   (41) https://bugs.python.org/25047

   (42) https://bugs.python.org/25135

   (43) https://bugs.python.org/19143

   (44) https://bugs.python.org/25092

   (45) https://bugs.python.org/23517

   (46) https://bugs.python.org/25155

   (47) https://bugs.python.org/25108

   (48) https://bugs.python.org/25118

   (49) https://bugs.python.org/24684

   (50) https://bugs.python.org/25060

   (51) https://bugs.python.org/24857

   (52) https://bugs.python.org/23144

   (53) https://bugs.python.org/24982

   (54) https://bugs.python.org/25019

   (55) https://bugs.python.org/16180

   (56) https://bugs.python.org/24891

   (57) https://bugs.python.org/24992

   (58) https://bugs.python.org/24881

   (59) https://bugs.python.org/25578

   (60) https://bugs.python.org/25530

   (61) https://bugs.python.org/25569

   (62) https://bugs.python.org/25471

   (63) https://bugs.python.org/25319

   (64) https://bugs.python.org/21112

   (65) https://bugs.python.org/24764

   (66) https://bugs.python.org/24913

   (67) https://bugs.python.org/24774

   (68) https://bugs.python.org/21159

   (69) https://bugs.python.org/20362

   (70) https://bugs.python.org/23572


File: python.info,  Node: IDLE<4>,  Next: Documentation<3>,  Prev: Library<2>,  Up: Python 3 5 1 release candidate 1

1.16.3.3 IDLE
.............

   - Issue 15348: Stop the debugger engine (normally in a user process)
     before closing the debugger window (running in the IDLE process).
     This prevents the RuntimeErrors that were being caught and ignored.

   - Issue #24455(1): Prevent IDLE from hanging when a) closing the
     shell while the debugger is active (15347); b) closing the debugger
     with the [X] button (15348); and c) activating the debugger when
     already active (24455).  The patch by Mark Roseman does this by
     making two changes.  1.  Suspend and resume the gui.interaction
     method with the tcl vwait mechanism intended for this purpose
     (instead of root.mainloop & .quit).  2.  In gui.run, allow any
     existing interaction to terminate first.

   - Change ’The program’ to ’Your program’ in an IDLE ’kill program?’
     message to make it clearer that the program referred to is the
     currently running user program, not IDLE itself.

   - Issue #24750(2): Improve the appearance of the IDLE editor window
     status bar.  Patch by Mark Roseman.

   - Issue #25313(3): Change the handling of new built-in text color
     themes to better address the compatibility problem introduced by
     the addition of IDLE Dark.  Consistently use the revised
     idleConf.CurrentTheme everywhere in idlelib.

   - Issue #24782(4): Extension configuration is now a tab in the IDLE
     Preferences dialog rather than a separate dialog.  The former tabs
     are now a sorted list.  Patch by Mark Roseman.

   - Issue #22726(5): Re-activate the config dialog help button with
     some content about the other buttons and the new IDLE Dark theme.

   - Issue #24820(6): IDLE now has an ’IDLE Dark’ built-in text color
     theme.  It is more or less IDLE Classic inverted, with a cobalt
     blue background.  Strings, comments, keywords, ...  are still
     green, red, orange, ...  .  To use it with IDLEs released before
     November 2015, hit the ’Save as New Custom Theme’ button and enter
     a new name, such as ’Custom Dark’.  The custom theme will work with
     any IDLE release, and can be modified.

   - Issue #25224(7): README.txt is now an idlelib index for IDLE
     developers and curious users.  The previous user content is now in
     the IDLE doc chapter.  ’IDLE’ now means ’Integrated Development and
     Learning Environment’.

   - Issue #24820(8): Users can now set breakpoint colors in Settings ->
     Custom Highlighting.  Original patch by Mark Roseman.

   - Issue #24972(9): Inactive selection background now matches active
     selection background, as configured by users, on all systems.
     Found items are now always highlighted on Windows.  Initial patch
     by Mark Roseman.

   - Issue #24570(10): Idle: make calltip and completion boxes appear on
     Macs affected by a tk regression.  Initial patch by Mark Roseman.

   - Issue #24988(11): Idle ScrolledList context menus (used in
     debugger) now work on Mac Aqua.  Patch by Mark Roseman.

   - Issue #24801(12): Make right-click for context menu work on Mac
     Aqua.  Patch by Mark Roseman.

   - Issue #25173(13): Associate tkinter messageboxes with a specific
     widget.  For Mac OSX, make them a ’sheet’.  Patch by Mark Roseman.

   - Issue #25198(14): Enhance the initial html viewer now used for Idle
     Help.  * Properly indent fixed-pitch text (patch by Mark Roseman).
     * Give code snippet a very Sphinx-like light blueish-gray
     background.  * Re-use initial width and height set by users for
     shell and editor.  * When the Table of Contents (TOC) menu is used,
     put the section header at the top of the screen.

   - Issue #25225(15): Condense and rewrite Idle doc section on text
     colors.

   - Issue #21995(16): Explain some differences between IDLE and console
     Python.

   - Issue #22820(17): Explain need for `print' when running file from
     Idle editor.

   - Issue #25224(18): Doc: augment Idle feature list and no-subprocess
     section.

   - Issue #25219(19): Update doc for Idle command line options.  Some
     were missing and notes were not correct.

   - Issue #24861(20): Most of idlelib is private and subject to change.
     Use idleib.idle.* to start Idle.  See idlelib.__init__.__doc__.

   - Issue #25199(21): Idle: add synchronization comments for future
     maintainers.

   - Issue #16893(22): Replace help.txt with help.html for Idle doc
     display.  The new idlelib/help.html is rstripped
     Doc/build/html/library/idle.html.  It looks better than help.txt
     and will better document Idle as released.  The tkinter html viewer
     that works for this file was written by Mark Roseman.  The now
     unused EditorWindow.HelpDialog class and helt.txt file are
     deprecated.

   - Issue #24199(23): Deprecate unused idlelib.idlever with possible
     removal in 3.6.

   - Issue #24790(24): Remove extraneous code (which also create 2 & 3
     conflicts).

   ---------- Footnotes ----------

   (1) https://bugs.python.org/24455

   (2) https://bugs.python.org/24750

   (3) https://bugs.python.org/25313

   (4) https://bugs.python.org/24782

   (5) https://bugs.python.org/22726

   (6) https://bugs.python.org/24820

   (7) https://bugs.python.org/25224

   (8) https://bugs.python.org/24820

   (9) https://bugs.python.org/24972

   (10) https://bugs.python.org/24570

   (11) https://bugs.python.org/24988

   (12) https://bugs.python.org/24801

   (13) https://bugs.python.org/25173

   (14) https://bugs.python.org/25198

   (15) https://bugs.python.org/25225

   (16) https://bugs.python.org/21995

   (17) https://bugs.python.org/22820

   (18) https://bugs.python.org/25224

   (19) https://bugs.python.org/25219

   (20) https://bugs.python.org/24861

   (21) https://bugs.python.org/25199

   (22) https://bugs.python.org/16893

   (23) https://bugs.python.org/24199

   (24) https://bugs.python.org/24790


File: python.info,  Node: Documentation<3>,  Next: Tests<2>,  Prev: IDLE<4>,  Up: Python 3 5 1 release candidate 1

1.16.3.4 Documentation
......................

   - Issue #12067(1): Rewrite Comparisons section in the Expressions
     chapter of the language reference.  Some of the details of
     comparing mixed types were incorrect or ambiguous.  NotImplemented
     is only relevant at a lower level than the Expressions chapter.
     Added details of comparing range() objects, and default behaviour
     and consistency suggestions for user-defined classes.  Patch from
     Andy Maier.

   - Issue #24952(2): Clarify the default size argument of stack_size()
     in the "threading" and "_thread" modules.  Patch from Mattip.

   - Issue #23725(3): Overhaul tempfile docs.  Note deprecated status of
     mktemp.  Patch from Zbigniew Jędrzejewski-Szmek.

   - Issue #24808(4): Update the types of some PyTypeObject fields.
     Patch by Joseph Weston.

   - Issue #22812(5): Fix unittest discovery examples.  Patch from Pam
     McA’Nulty.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/12067

   (2) https://bugs.python.org/24952

   (3) https://bugs.python.org/23725

   (4) https://bugs.python.org/24808

   (5) https://bugs.python.org/22812


File: python.info,  Node: Tests<2>,  Next: Build<2>,  Prev: Documentation<3>,  Up: Python 3 5 1 release candidate 1

1.16.3.5 Tests
..............

   - Issue #25449(1): Added tests for OrderedDict subclasses.

   - Issue #25099(2): Make test_compileall not fail when an entry on
     sys.path cannot be written to (commonly seen in administrative
     installs on Windows).

   - Issue #23919(3): Prevents assert dialogs appearing in the test
     suite.

   - ‘PCbuild\rt.bat’ now accepts an unlimited number of arguments to
     pass along to regrtest.py.  Previously there was a limit of 9.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/25449

   (2) https://bugs.python.org/25099

   (3) https://bugs.python.org/23919


File: python.info,  Node: Build<2>,  Next: Windows<3>,  Prev: Tests<2>,  Up: Python 3 5 1 release candidate 1

1.16.3.6 Build
..............

   - Issue #24915(1): Add LLVM support for PGO builds and use the test
     suite to generate the profile data.  Initial patch by Alecsandru
     Patrascu of Intel.

   - Issue #24910(2): Windows MSIs now have unique display names.

   - Issue #24986(3): It is now possible to build Python on Windows
     without errors when external libraries are not available.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/24915

   (2) https://bugs.python.org/24910

   (3) https://bugs.python.org/24986


File: python.info,  Node: Windows<3>,  Next: Tools/Demos<2>,  Prev: Build<2>,  Up: Python 3 5 1 release candidate 1

1.16.3.7 Windows
................

   - Issue #25450(1): Updates shortcuts to start Python in installation
     directory.

   - Issue #25164(2): Changes default all-users install directory to
     match per-user directory.

   - Issue #25143(3): Improves installer error messages for unsupported
     platforms.

   - Issue #25163(4): Display correct directory in installer when using
     non-default settings.

   - Issue #25361(5): Disables use of SSE2 instructions in Windows
     32-bit build

   - Issue #25089(6): Adds logging to installer for case where launcher
     is not selected on upgrade.

   - Issue #25165(7): Windows uninstallation should not remove launcher
     if other versions remain

   - Issue #25112(8): py.exe launcher is missing icons

   - Issue #25102(9): Windows installer does not precompile for -O or
     -OO.

   - Issue #25081(10): Makes Back button in installer go back to upgrade
     page when upgrading.

   - Issue #25091(11): Increases font size of the installer.

   - Issue #25126(12): Clarifies that the non-web installer will
     download some components.

   - Issue #25213(13): Restores requestedExecutionLevel to manifest to
     disable UAC virtualization.

   - Issue #25022(14): Removed very outdated PC/example_nt/ directory.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/25450

   (2) https://bugs.python.org/25164

   (3) https://bugs.python.org/25143

   (4) https://bugs.python.org/25163

   (5) https://bugs.python.org/25361

   (6) https://bugs.python.org/25089

   (7) https://bugs.python.org/25165

   (8) https://bugs.python.org/25112

   (9) https://bugs.python.org/25102

   (10) https://bugs.python.org/25081

   (11) https://bugs.python.org/25091

   (12) https://bugs.python.org/25126

   (13) https://bugs.python.org/25213

   (14) https://bugs.python.org/25022


File: python.info,  Node: Tools/Demos<2>,  Prev: Windows<3>,  Up: Python 3 5 1 release candidate 1

1.16.3.8 Tools/Demos
....................

   - Issue #25440(1): Fix output of python-config –extension-suffix.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/25440


File: python.info,  Node: Python 3 5 0 final,  Next: Python 3 5 0 release candidate 4,  Prev: Python 3 5 1 release candidate 1,  Up: Changelog

1.16.4 Python 3.5.0 final
-------------------------

Release date: 2015-09-13

* Menu:

* Build: Build<3>. 


File: python.info,  Node: Build<3>,  Up: Python 3 5 0 final

1.16.4.1 Build
..............

   - Issue #25071(1): Windows installer should not require TargetDir
     parameter when installing quietly.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/25071


File: python.info,  Node: Python 3 5 0 release candidate 4,  Next: Python 3 5 0 release candidate 3,  Prev: Python 3 5 0 final,  Up: Changelog

1.16.5 Python 3.5.0 release candidate 4
---------------------------------------

Release date: 2015-09-09

* Menu:

* Library: Library<3>. 
* Build: Build<4>. 


File: python.info,  Node: Library<3>,  Next: Build<4>,  Up: Python 3 5 0 release candidate 4

1.16.5.1 Library
................

   - Issue #25029(1): Fixes MemoryError in test_strptime.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/25029


File: python.info,  Node: Build<4>,  Prev: Library<3>,  Up: Python 3 5 0 release candidate 4

1.16.5.2 Build
..............

   - Issue #25027(1): Reverts partial-static build options and adds
     vcruntime140.dll to Windows installation.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/25027


File: python.info,  Node: Python 3 5 0 release candidate 3,  Next: Python 3 5 0 release candidate 2,  Prev: Python 3 5 0 release candidate 4,  Up: Changelog

1.16.6 Python 3.5.0 release candidate 3
---------------------------------------

Release date: 2015-09-07

* Menu:

* Core and Builtins: Core and Builtins<4>. 
* Library: Library<4>. 


File: python.info,  Node: Core and Builtins<4>,  Next: Library<4>,  Up: Python 3 5 0 release candidate 3

1.16.6.1 Core and Builtins
..........................

   - Issue #24305(1): Prevent import subsystem stack frames from being
     counted by the warnings.warn(stacklevel=) parameter.

   - Issue #24912(2): Prevent __class__ assignment to immutable built-in
     objects.

   - Issue #24975(3): Fix AST compilation for PEP 448 syntax.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/24305

   (2) https://bugs.python.org/24912

   (3) https://bugs.python.org/24975


File: python.info,  Node: Library<4>,  Prev: Core and Builtins<4>,  Up: Python 3 5 0 release candidate 3

1.16.6.2 Library
................

   - Issue #24917(1): time_strftime() buffer over-read.

   - Issue #24748(2): To resolve a compatibility problem found with
     py2exe and pywin32, imp.load_dynamic() once again ignores
     previously loaded modules to support Python modules replacing
     themselves with extension modules.  Patch by Petr Viktorin.

   - Issue #24635(3): Fixed a bug in typing.py where isinstance([],
     typing.Iterable) would return True once, then False on subsequent
     calls.

   - Issue #24989(4): Fixed buffer overread in BytesIO.readline() if a
     position is set beyond size.  Based on patch by John Leitch.

   - Issue #24913(5): Fix overrun error in deque.index().  Found by John
     Leitch and Bryce Darling.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/24917

   (2) https://bugs.python.org/24748

   (3) https://bugs.python.org/24635

   (4) https://bugs.python.org/24989

   (5) https://bugs.python.org/24913


File: python.info,  Node: Python 3 5 0 release candidate 2,  Next: Python 3 5 0 release candidate 1,  Prev: Python 3 5 0 release candidate 3,  Up: Changelog

1.16.7 Python 3.5.0 release candidate 2
---------------------------------------

Release date: 2015-08-25

* Menu:

* Core and Builtins: Core and Builtins<5>. 
* Library: Library<5>. 


File: python.info,  Node: Core and Builtins<5>,  Next: Library<5>,  Up: Python 3 5 0 release candidate 2

1.16.7.1 Core and Builtins
..........................

   - Issue #24769(1): Interpreter now starts properly when dynamic
     loading is disabled.  Patch by Petr Viktorin.

   - Issue #21167(2): NAN operations are now handled correctly when
     python is compiled with ICC even if -fp-model strict is not
     specified.

   - Issue #24492(3): A "package" lacking a __name__ attribute when
     trying to perform a ‘from .. import ...’ statement will trigger an
     ImportError instead of an AttributeError.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/24769

   (2) https://bugs.python.org/21167

   (3) https://bugs.python.org/24492


File: python.info,  Node: Library<5>,  Prev: Core and Builtins<5>,  Up: Python 3 5 0 release candidate 2

1.16.7.2 Library
................

   - Issue #24847(1): Removes vcruntime140.dll dependency from Tcl/Tk.

   - Issue #24839(2): platform._syscmd_ver raises DeprecationWarning

   - Issue #24867(3): Fix Task.get_stack() for ’async def’ coroutines

   ---------- Footnotes ----------

   (1) https://bugs.python.org/24847

   (2) https://bugs.python.org/24839

   (3) https://bugs.python.org/24867


File: python.info,  Node: Python 3 5 0 release candidate 1,  Next: Python 3 5 0 beta 4,  Prev: Python 3 5 0 release candidate 2,  Up: Changelog

1.16.8 Python 3.5.0 release candidate 1
---------------------------------------

Release date: 2015-08-09

* Menu:

* Core and Builtins: Core and Builtins<6>. 
* Library: Library<6>. 
* IDLE: IDLE<5>. 
* Documentation: Documentation<4>. 
* Tests: Tests<3>. 


File: python.info,  Node: Core and Builtins<6>,  Next: Library<6>,  Up: Python 3 5 0 release candidate 1

1.16.8.1 Core and Builtins
..........................

   - Issue #24667(1): Resize odict in all cases that the underlying dict
     resizes.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/24667


File: python.info,  Node: Library<6>,  Next: IDLE<5>,  Prev: Core and Builtins<6>,  Up: Python 3 5 0 release candidate 1

1.16.8.2 Library
................

   - Issue #24824(1): Signatures of codecs.encode() and codecs.decode()
     now are compatible with pydoc.

   - Issue #24634(2): Importing uuid should not try to load libc on
     Windows

   - Issue #24798(3): _msvccompiler.py doesn’t properly support
     manifests

   - Issue #4395(4): Better testing and documentation of binary
     operators.  Patch by Martin Panter.

   - Issue #23973(5): Update typing.py from GitHub repo.

   - Issue #23004(6): mock_open() now reads binary data correctly when
     the type of read_data is bytes.  Initial patch by Aaron Hill.

   - Issue #23888(7): Handle fractional time in cookie expiry.  Patch by
     ssh.

   - Issue #23652(8): Make it possible to compile the select module
     against the libc headers from the Linux Standard Base, which do not
     include some EPOLL macros.  Patch by Matt Frank.

   - Issue #22932(9): Fix timezones in email.utils.formatdate.  Patch
     from Dmitry Shachnev.

   - Issue #23779(10): imaplib raises TypeError if authenticator tries
     to abort.  Patch from Craig Holmquist.

   - Issue #23319(11): Fix ctypes.BigEndianStructure, swap correctly
     bytes.  Patch written by Matthieu Gautier.

   - Issue #23254(12): Document how to close the TCPServer listening
     socket.  Patch from Martin Panter.

   - Issue #19450(13): Update Windows and OS X installer builds to use
     SQLite 3.8.11.

   - Issue #17527(14): Add PATCH to wsgiref.validator.  Patch from Luca
     Sbardella.

   - Issue #24791(15): Fix grammar regression for call syntax: ’g(*a or
     b)’.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/24824

   (2) https://bugs.python.org/24634

   (3) https://bugs.python.org/24798

   (4) https://bugs.python.org/4395

   (5) https://bugs.python.org/23973

   (6) https://bugs.python.org/23004

   (7) https://bugs.python.org/23888

   (8) https://bugs.python.org/23652

   (9) https://bugs.python.org/22932

   (10) https://bugs.python.org/23779

   (11) https://bugs.python.org/23319

   (12) https://bugs.python.org/23254

   (13) https://bugs.python.org/19450

   (14) https://bugs.python.org/17527

   (15) https://bugs.python.org/24791


File: python.info,  Node: IDLE<5>,  Next: Documentation<4>,  Prev: Library<6>,  Up: Python 3 5 0 release candidate 1

1.16.8.3 IDLE
.............

   - Issue #23672(1): Allow Idle to edit and run files with astral chars
     in name.  Patch by Mohd Sanad Zaki Rizvi.

   - Issue #24745(2): Idle editor default font.  Switch from Courier to
     platform-sensitive TkFixedFont.  This should not affect current
     customized font selections.  If there is a problem, edit
     $HOME/.idlerc/config-main.cfg and remove ’fontxxx’ entries from
     [Editor Window].  Patch by Mark Roseman.

   - Issue #21192(3): Idle editor.  When a file is run, put its name in
     the restart bar.  Do not print false prompts.  Original patch by
     Adnan Umer.

   - Issue #13884(4): Idle menus.  Remove tearoff lines.  Patch by Roger
     Serwy.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/23672

   (2) https://bugs.python.org/24745

   (3) https://bugs.python.org/21192

   (4) https://bugs.python.org/13884


File: python.info,  Node: Documentation<4>,  Next: Tests<3>,  Prev: IDLE<5>,  Up: Python 3 5 0 release candidate 1

1.16.8.4 Documentation
......................

   - Issue #24129(1): Clarify the reference documentation for name
     resolution.  This includes removing the assumption that readers
     will be familiar with the name resolution scheme Python used prior
     to the introduction of lexical scoping for function namespaces.
     Patch by Ivan Levkivskyi.

   - Issue #20769(2): Improve reload() docs.  Patch by Dorian Pula.

   - Issue #23589(3): Remove duplicate sentence from the FAQ. Patch by
     Yongzhi Pan.

   - Issue #24729(4): Correct IO tutorial to match implementation
     regarding encoding parameter to open function.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/24129

   (2) https://bugs.python.org/20769

   (3) https://bugs.python.org/23589

   (4) https://bugs.python.org/24729


File: python.info,  Node: Tests<3>,  Prev: Documentation<4>,  Up: Python 3 5 0 release candidate 1

1.16.8.5 Tests
..............

   - Issue #24751(1): When running regrtest with the ‘-w’ command line
     option, a test run is no longer marked as a failure if all tests
     succeed when re-run.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/24751


File: python.info,  Node: Python 3 5 0 beta 4,  Next: Python 3 5 0 beta 3,  Prev: Python 3 5 0 release candidate 1,  Up: Changelog

1.16.9 Python 3.5.0 beta 4
--------------------------

Release date: 2015-07-26

* Menu:

* Core and Builtins: Core and Builtins<7>. 
* Library: Library<7>. 
* Build: Build<5>. 


File: python.info,  Node: Core and Builtins<7>,  Next: Library<7>,  Up: Python 3 5 0 beta 4

1.16.9.1 Core and Builtins
..........................

   - Issue #23573(1): Restored optimization of bytes.rfind() and
     bytearray.rfind() for single-byte argument on Linux.

   - Issue #24569(2): Make PEP 448 dictionary evaluation more
     consistent.

   - Issue #24583(3): Fix crash when set is mutated while being updated.

   - Issue #24407(4): Fix crash when dict is mutated while being
     updated.

   - Issue #24619(5): New approach for tokenizing async/await.  As a
     consequence, it is now possible to have one-line ’async def foo():
     await ..’ functions.

   - Issue #24687(6): Plug refleak on SyntaxError in function parameters
     annotations.

   - Issue #15944(7): memoryview: Allow arbitrary formats when casting
     to bytes.  Patch by Martin Panter.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/23573

   (2) https://bugs.python.org/24569

   (3) https://bugs.python.org/24583

   (4) https://bugs.python.org/24407

   (5) https://bugs.python.org/24619

   (6) https://bugs.python.org/24687

   (7) https://bugs.python.org/15944


File: python.info,  Node: Library<7>,  Next: Build<5>,  Prev: Core and Builtins<7>,  Up: Python 3 5 0 beta 4

1.16.9.2 Library
................

   - Issue #23441(1): rcompleter now prints a tab character instead of
     displaying possible completions for an empty word.  Initial patch
     by Martin Sekera.

   - Issue #24683(2): Fixed crashes in _json functions called with
     arguments of inappropriate type.

   - Issue #21697(3): shutil.copytree() now correctly handles symbolic
     links that point to directories.  Patch by Eduardo Seabra and
     Thomas Kluyver.

   - Issue #14373(4): Fixed segmentation fault when gc.collect() is
     called during constructing lru_cache (C implementation).

   - Issue #24695(5): Fix a regression in traceback.print_exception().
     If exc_traceback is None we shouldn’t print a traceback header like
     described in the documentation.

   - Issue #24620(6): Random.setstate() now validates the value of state
     last element.

   - Issue #22485(7): Fixed an issue that caused *note
     inspect.getsource: b41. to return incorrect results on nested
     functions.

   - Issue #22153(8): Improve unittest docs.  Patch from Martin Panter
     and evilzero.

   - Issue #24580(9): Symbolic group references to open group in re
     patterns now are explicitly forbidden as well as numeric group
     references.

   - Issue #24206(10): Fixed __eq__ and __ne__ methods of inspect
     classes.

   - Issue #24631(11): Fixed regression in the timeit module with
     multiline setup.

   - Issue #24608(12): chunk.Chunk.read() now always returns bytes, not
     str.

   - Issue #18684(13): Fixed reading out of the buffer in the re module.

   - Issue #24259(14): tarfile now raises a ReadError if an archive is
     truncated inside a data segment.

   - Issue #15014(15): SMTP.auth() and SMTP.login() now support RFC
     4954’s optional initial-response argument to the SMTP AUTH command.

   - Issue #6549(16): Remove hyphen from ttk.Style().element options.
     Only return result from ttk.Style().configure if a result was
     generated or a query submitted.

   - Issue #24669(17): Fix inspect.getsource() for ’async def’
     functions.  Patch by Kai Groner.

   - Issue #24688(18): ast.get_docstring() for ’async def’ functions.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/23441

   (2) https://bugs.python.org/24683

   (3) https://bugs.python.org/21697

   (4) https://bugs.python.org/14373

   (5) https://bugs.python.org/24695

   (6) https://bugs.python.org/24620

   (7) https://bugs.python.org/22485

   (8) https://bugs.python.org/22153

   (9) https://bugs.python.org/24580

   (10) https://bugs.python.org/24206

   (11) https://bugs.python.org/24631

   (12) https://bugs.python.org/24608

   (13) https://bugs.python.org/18684

   (14) https://bugs.python.org/24259

   (15) https://bugs.python.org/15014

   (16) https://bugs.python.org/6549

   (17) https://bugs.python.org/24669

   (18) https://bugs.python.org/24688


File: python.info,  Node: Build<5>,  Prev: Library<7>,  Up: Python 3 5 0 beta 4

1.16.9.3 Build
..............

   - Issue #24603(1): Update Windows builds and OS X 10.5 installer to
     use OpenSSL 1.0.2d.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/24603


File: python.info,  Node: Python 3 5 0 beta 3,  Next: Python 3 5 0 beta 2,  Prev: Python 3 5 0 beta 4,  Up: Changelog

1.16.10 Python 3.5.0 beta 3
---------------------------

Release date: 2015-07-05

* Menu:

* Core and Builtins: Core and Builtins<8>. 
* Library: Library<8>. 
* Tests: Tests<4>. 
* Documentation: Documentation<5>. 
* Build: Build<6>. 


File: python.info,  Node: Core and Builtins<8>,  Next: Library<8>,  Up: Python 3 5 0 beta 3

1.16.10.1 Core and Builtins
...........................

   - Issue #24467(1): Fixed possible buffer over-read in bytearray.  The
     bytearray object now always allocates place for trailing null byte
     and it’s buffer now is always null-terminated.

   - Upgrade to Unicode 8.0.0.

   - Issue #24345(2): Add Py_tp_finalize slot for the stable ABI.

   - Issue #24400(3): Introduce a distinct type for PEP 492 coroutines;
     add types.CoroutineType, inspect.getcoroutinestate,
     inspect.getcoroutinelocals; coroutines no longer use CO_GENERATOR
     flag; sys.set_coroutine_wrapper works only for ’async def’
     coroutines; inspect.iscoroutine no longer uses
     collections.abc.Coroutine, it’s intended to test for pure ’async
     def’ coroutines only; add new opcode: GET_YIELD_FROM_ITER; fix
     generators wrapper used in types.coroutine to be instance of
     collections.abc.Generator; collections.abc.Awaitable and
     collections.abc.Coroutine can no longer be used to detect
     generator-based coroutines–use inspect.isawaitable instead.

   - Issue #24450(4): Add gi_yieldfrom to generators and cr_await to
     coroutines.  Contributed by Benno Leslie and Yury Selivanov.

   - Issue #19235(5): Add new RecursionError exception.  Patch by Georg
     Brandl.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/24467

   (2) https://bugs.python.org/24345

   (3) https://bugs.python.org/24400

   (4) https://bugs.python.org/24450

   (5) https://bugs.python.org/19235


File: python.info,  Node: Library<8>,  Next: Tests<4>,  Prev: Core and Builtins<8>,  Up: Python 3 5 0 beta 3

1.16.10.2 Library
.................

   - Issue #21750(1): mock_open.read_data can now be read from each
     instance, as it could in Python 3.3.

   - Issue #24552(2): Fix use after free in an error case of the _pickle
     module.

   - Issue #24514(3): tarfile now tolerates number fields consisting of
     only whitespace.

   - Issue #19176(4): Fixed doctype() related bugs in C implementation
     of ElementTree.  A deprecation warning no longer issued by
     XMLParser subclass with default doctype() method.  Direct call of
     doctype() now issues a warning.  Parser’s doctype() now is not
     called if target’s doctype() is called.  Based on patch by Martin
     Panter.

   - Issue #20387(5): Restore semantic round-trip correctness in
     tokenize/untokenize for tab-indented blocks.

   - Issue #24456(6): Fixed possible buffer over-read in adpcm2lin() and
     lin2adpcm() functions of the audioop module.

   - Issue #24336(7): The contextmanager decorator now works with
     functions with keyword arguments called "func" and "self".  Patch
     by Martin Panter.

   - Issue #24522(8): Fix possible integer overflow in json accelerator
     module.

   - Issue #24489(9): ensure a previously set C errno doesn’t disturb
     cmath.polar().

   - Issue #24408(10): Fixed AttributeError in measure() and metrics()
     methods of tkinter.Font.

   - Issue #14373(11): C implementation of functools.lru_cache() now can
     be used with methods.

   - Issue #24347(12): Set KeyError if PyDict_GetItemWithError returns
     NULL.

   - Issue #24348(13): Drop superfluous incref/decref.

   - Issue #24359(14): Check for changed OrderedDict size during
     iteration.

   - Issue #24368(15): Support keyword arguments in OrderedDict methods.

   - Issue #24362(16): Simplify the C OrderedDict fast nodes resize
     logic.

   - Issue #24377(17): Fix a ref leak in OrderedDict.__repr__.

   - Issue #24369(18): Defend against key-changes during iteration.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/21750

   (2) https://bugs.python.org/24552

   (3) https://bugs.python.org/24514

   (4) https://bugs.python.org/19176

   (5) https://bugs.python.org/20387

   (6) https://bugs.python.org/24456

   (7) https://bugs.python.org/24336

   (8) https://bugs.python.org/24522

   (9) https://bugs.python.org/24489

   (10) https://bugs.python.org/24408

   (11) https://bugs.python.org/14373

   (12) https://bugs.python.org/24347

   (13) https://bugs.python.org/24348

   (14) https://bugs.python.org/24359

   (15) https://bugs.python.org/24368

   (16) https://bugs.python.org/24362

   (17) https://bugs.python.org/24377

   (18) https://bugs.python.org/24369


File: python.info,  Node: Tests<4>,  Next: Documentation<5>,  Prev: Library<8>,  Up: Python 3 5 0 beta 3

1.16.10.3 Tests
...............

   - Issue #24373(1): _testmultiphase and xxlimited now use tp_traverse
     and tp_finalize to avoid reference leaks encountered when combining
     tp_dealloc with PyType_FromSpec (see issue #16690(2) for details)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/24373

   (2) https://bugs.python.org/16690


File: python.info,  Node: Documentation<5>,  Next: Build<6>,  Prev: Tests<4>,  Up: Python 3 5 0 beta 3

1.16.10.4 Documentation
.......................

   - Issue #24458(1): Update documentation to cover multi-phase
     initialization for extension modules (PEP 489).  Patch by Petr
     Viktorin.

   - Issue #24351(2): Clarify what is meant by "identifier" in the
     context of string.Template instances.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/24458

   (2) https://bugs.python.org/24351


File: python.info,  Node: Build<6>,  Prev: Documentation<5>,  Up: Python 3 5 0 beta 3

1.16.10.5 Build
...............

   - Issue #24432(1): Update Windows builds and OS X 10.5 installer to
     use OpenSSL 1.0.2c.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/24432


File: python.info,  Node: Python 3 5 0 beta 2,  Next: Python 3 5 0 beta 1,  Prev: Python 3 5 0 beta 3,  Up: Changelog

1.16.11 Python 3.5.0 beta 2
---------------------------

Release date: 2015-05-31

* Menu:

* Core and Builtins: Core and Builtins<9>. 
* Library: Library<9>. 


File: python.info,  Node: Core and Builtins<9>,  Next: Library<9>,  Up: Python 3 5 0 beta 2

1.16.11.1 Core and Builtins
...........................

   - Issue #24284(1): The startswith and endswith methods of the str
     class no longer return True when finding the empty string and the
     indexes are completely out of range.

   - Issue #24115(2): Update uses of PyObject_IsTrue(), PyObject_Not(),
     PyObject_IsInstance(), PyObject_RichCompareBool() and
     _PyDict_Contains() to check for and handle errors correctly.

   - Issue #24328(3): Fix importing one character extension modules.

   - Issue #11205(4): In dictionary displays, evaluate the key before
     the value.

   - Issue #24285(5): Fixed regression that prevented importing
     extension modules from inside packages.  Patch by Petr Viktorin.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/24284

   (2) https://bugs.python.org/24115

   (3) https://bugs.python.org/24328

   (4) https://bugs.python.org/11205

   (5) https://bugs.python.org/24285


File: python.info,  Node: Library<9>,  Prev: Core and Builtins<9>,  Up: Python 3 5 0 beta 2

1.16.11.2 Library
.................

   - Issue #23247(1): Fix a crash in the StreamWriter.reset() of CJK
     codecs.

   - Issue #24270(2): Add math.isclose() and cmath.isclose() functions
     as per PEP 485.  Contributed by Chris Barker and Tal Einat.

   - Issue #5633(3): Fixed timeit when the statement is a string and the
     setup is not.

   - Issue #24326(4): Fixed audioop.ratecv() with non-default weightB
     argument.  Original patch by David Moore.

   - Issue #16991(5): Add a C implementation of OrderedDict.

   - Issue #23934(6): Fix inspect.signature to fail correctly for
     builtin types lacking signature information.  Initial patch by
     James Powell.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/23247

   (2) https://bugs.python.org/24270

   (3) https://bugs.python.org/5633

   (4) https://bugs.python.org/24326

   (5) https://bugs.python.org/16991

   (6) https://bugs.python.org/23934


File: python.info,  Node: Python 3 5 0 beta 1,  Next: Python 3 5 0 alpha 4,  Prev: Python 3 5 0 beta 2,  Up: Changelog

1.16.12 Python 3.5.0 beta 1
---------------------------

Release date: 2015-05-24

* Menu:

* Core and Builtins: Core and Builtins<10>. 
* Library: Library<10>. 
* IDLE: IDLE<6>. 
* Tests: Tests<5>. 
* Documentation: Documentation<6>. 
* Tools/Demos: Tools/Demos<3>. 


File: python.info,  Node: Core and Builtins<10>,  Next: Library<10>,  Up: Python 3 5 0 beta 1

1.16.12.1 Core and Builtins
...........................

   - Issue #24276(1): Fixed optimization of property descriptor getter.

   - Issue #24268(2): PEP 489: Multi-phase extension module
     initialization.  Patch by Petr Viktorin.

   - Issue #23359(3): Optimize set object internals by specializing the
     hash table search into a lookup function and an insert function.

   - Issue #23955(4): Add pyvenv.cfg option to suppress
     registry/environment lookup for generating sys.path on Windows.

   - Issue #24257(5): Fixed system error in the comparison of faked
     types.SimpleNamespace.

   - Issue #22939(6): Fixed integer overflow in iterator object.  Patch
     by Clement Rouault.

   - Issue #23985(7): Fix a possible buffer overrun when deleting a
     slice from the front of a bytearray and then appending some other
     bytes data.

   - Issue #24102(8): Fixed exception type checking in standard error
     handlers.

   - Issue #15027(9): The UTF-32 encoder is now 3x to 7x faster.

   - Issue #23290(10): Optimize set_merge() for cases where the target
     is empty.  (Contributed by Serhiy Storchaka.)

   - Issue #2292(11): PEP 448: Additional Unpacking Generalizations.

   - Issue #24096(12): Make warnings.warn_explicit more robust against
     mutation of the warnings.filters list.

   - Issue #23996(13): Avoid a crash when a delegated generator raises
     an unnormalized StopIteration exception.  Patch by Stefan Behnel.

   - Issue #23910(14): Optimize property() getter calls.  Patch by Joe
     Jevnik.

   - Issue #23911(15): Move path-based importlib bootstrap code to a
     separate frozen module.

   - Issue #24192(16): Fix namespace package imports.

   - Issue #24022(17): Fix tokenizer crash when processing undecodable
     source code.

   - Issue #9951(18): Added a hex() method to bytes, bytearray, and
     memoryview.

   - Issue #22906(19): PEP 479: Change StopIteration handling inside
     generators.

   - Issue #24017(20): PEP 492: Coroutines with async and await syntax.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/24276

   (2) https://bugs.python.org/24268

   (3) https://bugs.python.org/23359

   (4) https://bugs.python.org/23955

   (5) https://bugs.python.org/24257

   (6) https://bugs.python.org/22939

   (7) https://bugs.python.org/23985

   (8) https://bugs.python.org/24102

   (9) https://bugs.python.org/15027

   (10) https://bugs.python.org/23290

   (11) https://bugs.python.org/2292

   (12) https://bugs.python.org/24096

   (13) https://bugs.python.org/23996

   (14) https://bugs.python.org/23910

   (15) https://bugs.python.org/23911

   (16) https://bugs.python.org/24192

   (17) https://bugs.python.org/24022

   (18) https://bugs.python.org/9951

   (19) https://bugs.python.org/22906

   (20) https://bugs.python.org/24017


File: python.info,  Node: Library<10>,  Next: IDLE<6>,  Prev: Core and Builtins<10>,  Up: Python 3 5 0 beta 1

1.16.12.2 Library
.................

   - Issue #14373(1): Added C implementation of functools.lru_cache().
     Based on patches by Matt Joiner and Alexey Kachayev.

   - Issue #24230(2): The tempfile module now accepts bytes for prefix,
     suffix and dir parameters and returns bytes in such situations
     (matching the os module APIs).

   - Issue #22189(3): collections.UserString now supports
     __getnewargs__(), __rmod__(), casefold(), format_map(),
     isprintable(), and maketrans().  Patch by Joe Jevnik.

   - Issue #24244(4): Prevents termination when an invalid format string
     is encountered on Windows in strftime.

   - Issue #23973(5): PEP 484: Add the typing module.

   - Issue #23086(6): The collections.abc.Sequence() abstract base class
     added `start' and `stop' parameters to the index() mixin.  Patch by
     Devin Jeanpierre.

   - Issue #20035(7): Replaced the ‘tkinter._fix’ module used for
     setting up the Tcl/Tk environment on Windows with a private
     function in the ‘_tkinter’ module that makes no permanent changes
     to the environment.

   - Issue #24257(8): Fixed segmentation fault in sqlite3.Row
     constructor with faked cursor type.

   - Issue #15836(9): assertRaises(), assertRaisesRegex(), assertWarns()
     and assertWarnsRegex() assertments now check the type of the first
     argument to prevent possible user error.  Based on patch by Daniel
     Wagner-Hall.

   - Issue #9858(10): Add missing method stubs to _io.RawIOBase.  Patch
     by Laura Rupprecht.

   - Issue #22955(11): attrgetter, itemgetter and methodcaller objects
     in the operator module now support pickling.  Added readable and
     evaluable repr for these objects.  Based on patch by Josh
     Rosenberg.

   - Issue #22107(12): tempfile.gettempdir() and tempfile.mkdtemp() now
     try again when a directory with the chosen name already exists on
     Windows as well as on Unix.  tempfile.mkstemp() now fails early if
     parent directory is not valid (not exists or is a file) on Windows.

   - Issue #23780(13): Improved error message in os.path.join() with
     single argument.

   - Issue #6598(14): Increased time precision and random number range
     in email.utils.make_msgid() to strengthen the uniqueness of the
     message ID.

   - Issue #24091(15): Fixed various crashes in corner cases in C
     implementation of ElementTree.

   - Issue #21931(16): msilib.FCICreate() now raises TypeError in the
     case of a bad argument instead of a ValueError with a bogus FCI
     error number.  Patch by Jeffrey Armstrong.

   - Issue #13866(17): `quote_via' argument added to
     urllib.parse.urlencode.

   - Issue #20098(18): New mangle_from policy option for email, default
     True for compat32, but False for all other policies.

   - Issue #24211(19): The email library now supports RFC 6532: it can
     generate headers using utf-8 instead of encoded words.

   - Issue #16314(20): Added support for the LZMA compression in
     distutils.

   - Issue #21804(21): poplib now supports RFC 6856 (UTF8).

   - Issue #18682(22): Optimized pprint functions for builtin scalar
     types.

   - Issue #22027(23): smtplib now supports RFC 6531 (SMTPUTF8).

   - Issue #23488(24): Random generator objects now consume 2x less
     memory on 64-bit.

   - Issue #1322(25): platform.dist() and platform.linux_distribution()
     functions are now deprecated.  Initial patch by Vajrasky Kok.

   - Issue #22486(26): Added the math.gcd() function.  The
     fractions.gcd() function now is deprecated.  Based on patch by Mark
     Dickinson.

   - Issue #24064(27): Property() docstrings are now writeable.  (Patch
     by Berker Peksag.)

   - Issue #22681(28): Added support for the koi8_t encoding.

   - Issue #22682(29): Added support for the kz1048 encoding.

   - Issue #23796(30): peek and read1 methods of BufferedReader now
     raise ValueError if they called on a closed object.  Patch by John
     Hergenroeder.

   - Issue #21795(31): smtpd now supports the 8BITMIME extension
     whenever the new `decode_data' constructor argument is set to
     False.

   - Issue #24155(32): optimize heapq.heapify() for better cache
     performance when heapifying large lists.

   - Issue #21800(33): imaplib now supports RFC 5161 (enable), RFC 6855
     (utf8/internationalized email) and automatically encodes non-ASCII
     usernames and passwords to UTF8.

   - Issue #20274(34): When calling a _sqlite.Connection, it now
     complains if passed any keyword arguments.  Previously it silently
     ignored them.

   - Issue #20274(35): Remove ignored and erroneous "kwargs" parameters
     from three METH_VARARGS methods on _sqlite.Connection.

   - Issue #24134(36): assertRaises(), assertRaisesRegex(),
     assertWarns() and assertWarnsRegex() checks now emits a deprecation
     warning when callable is None or keyword arguments except msg is
     passed in the context manager mode.

   - Issue #24018(37): Add a collections.abc.Generator abstract base
     class.  Contributed by Stefan Behnel.

   - Issue #23880(38): Tkinter’s getint() and getdouble() now support
     Tcl_Obj.  Tkinter’s getdouble() now supports any numbers (in
     particular int).

   - Issue #22619(39): Added negative limit support in the traceback
     module.  Based on patch by Dmitry Kazakov.

   - Issue #24094(40): Fix possible crash in json.encode with poorly
     behaved dict subclasses.

   - Issue #9246(41): On POSIX, os.getcwd() now supports paths longer
     than 1025 bytes.  Patch written by William Orr.

   - Issue #17445(42): add difflib.diff_bytes() to support comparison of
     byte strings (fixes a regression from Python 2).

   - Issue #23917(43): Fall back to sequential compilation when
     ProcessPoolExecutor doesn’t exist.  Patch by Claudiu Popa.

   - Issue #23008(44): Fixed resolving attributes with boolean value is
     False in pydoc.

   - Fix asyncio issue 235: LifoQueue and PriorityQueue’s put didn’t
     increment unfinished tasks (this bug was introduced when
     JoinableQueue was merged with Queue).

   - Issue #23908(45): os functions now reject paths with embedded null
     character on Windows instead of silently truncate them.

   - Issue #23728(46): binascii.crc_hqx() could return an integer
     outside of the range 0-0xffff for empty data.

   - Issue #23887(47): urllib.error.HTTPError now has a proper repr()
     representation.  Patch by Berker Peksag.

   - asyncio: New event loop APIs: set_task_factory() and
     get_task_factory().

   - asyncio: async() function is deprecated in favour of
     ensure_future().

   - Issue #24178(48): asyncio.Lock, Condition, Semaphore, and
     BoundedSemaphore support new ’async with’ syntax.  Contributed by
     Yury Selivanov.

   - Issue #24179(49): Support ’async for’ for asyncio.StreamReader.
     Contributed by Yury Selivanov.

   - Issue #24184(50): Add AsyncIterator and AsyncIterable ABCs to
     collections.abc.  Contributed by Yury Selivanov.

   - Issue #22547(51): Implement informative __repr__ for
     inspect.BoundArguments.  Contributed by Yury Selivanov.

   - Issue #24190(52): Implement inspect.BoundArgument.apply_defaults()
     method.  Contributed by Yury Selivanov.

   - Issue #20691(53): Add ’follow_wrapped’ argument to
     inspect.Signature.from_callable() and inspect.signature().
     Contributed by Yury Selivanov.

   - Issue #24248(54): Deprecate inspect.Signature.from_function() and
     inspect.Signature.from_builtin().

   - Issue #23898(55): Fix inspect.classify_class_attrs() to support
     attributes with overloaded __eq__ and __bool__.  Patch by Mike
     Bayer.

   - Issue #24298(56): Fix inspect.signature() to correctly unwrap
     wrappers around bound methods.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/14373

   (2) https://bugs.python.org/24230

   (3) https://bugs.python.org/22189

   (4) https://bugs.python.org/24244

   (5) https://bugs.python.org/23973

   (6) https://bugs.python.org/23086

   (7) https://bugs.python.org/20035

   (8) https://bugs.python.org/24257

   (9) https://bugs.python.org/15836

   (10) https://bugs.python.org/9858

   (11) https://bugs.python.org/22955

   (12) https://bugs.python.org/22107

   (13) https://bugs.python.org/23780

   (14) https://bugs.python.org/6598

   (15) https://bugs.python.org/24091

   (16) https://bugs.python.org/21931

   (17) https://bugs.python.org/13866

   (18) https://bugs.python.org/20098

   (19) https://bugs.python.org/24211

   (20) https://bugs.python.org/16314

   (21) https://bugs.python.org/21804

   (22) https://bugs.python.org/18682

   (23) https://bugs.python.org/22027

   (24) https://bugs.python.org/23488

   (25) https://bugs.python.org/1322

   (26) https://bugs.python.org/22486

   (27) https://bugs.python.org/24064

   (28) https://bugs.python.org/22681

   (29) https://bugs.python.org/22682

   (30) https://bugs.python.org/23796

   (31) https://bugs.python.org/21795

   (32) https://bugs.python.org/24155

   (33) https://bugs.python.org/21800

   (34) https://bugs.python.org/20274

   (35) https://bugs.python.org/20274

   (36) https://bugs.python.org/24134

   (37) https://bugs.python.org/24018

   (38) https://bugs.python.org/23880

   (39) https://bugs.python.org/22619

   (40) https://bugs.python.org/24094

   (41) https://bugs.python.org/9246

   (42) https://bugs.python.org/17445

   (43) https://bugs.python.org/23917

   (44) https://bugs.python.org/23008

   (45) https://bugs.python.org/23908

   (46) https://bugs.python.org/23728

   (47) https://bugs.python.org/23887

   (48) https://bugs.python.org/24178

   (49) https://bugs.python.org/24179

   (50) https://bugs.python.org/24184

   (51) https://bugs.python.org/22547

   (52) https://bugs.python.org/24190

   (53) https://bugs.python.org/20691

   (54) https://bugs.python.org/24248

   (55) https://bugs.python.org/23898

   (56) https://bugs.python.org/24298


File: python.info,  Node: IDLE<6>,  Next: Tests<5>,  Prev: Library<10>,  Up: Python 3 5 0 beta 1

1.16.12.3 IDLE
..............

   - Issue #23184(1): remove unused names and imports in idlelib.
     Initial patch by Al Sweigart.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/23184


File: python.info,  Node: Tests<5>,  Next: Documentation<6>,  Prev: IDLE<6>,  Up: Python 3 5 0 beta 1

1.16.12.4 Tests
...............

   - Issue #21520(1): test_zipfile no longer fails if the word ’bad’
     appears anywhere in the name of the current directory.

   - Issue #9517(2): Move script_helper into the support package.  Patch
     by Christie Wilson.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/21520

   (2) https://bugs.python.org/9517


File: python.info,  Node: Documentation<6>,  Next: Tools/Demos<3>,  Prev: Tests<5>,  Up: Python 3 5 0 beta 1

1.16.12.5 Documentation
.......................

   - Issue #22155(1): Add File Handlers subsection with
     createfilehandler to tkinter doc.  Remove obsolete example from
     FAQ. Patch by Martin Panter.

   - Issue #24029(2): Document the name binding behavior for submodule
     imports.

   - Issue #24077(3): Fix typo in man page for -I command option: -s,
     not -S

   ---------- Footnotes ----------

   (1) https://bugs.python.org/22155

   (2) https://bugs.python.org/24029

   (3) https://bugs.python.org/24077


File: python.info,  Node: Tools/Demos<3>,  Prev: Documentation<6>,  Up: Python 3 5 0 beta 1

1.16.12.6 Tools/Demos
.....................

   - Issue #24000(1): Improved Argument Clinic’s mapping of converters
     to legacy "format units".  Updated the documentation to match.

   - Issue #24001(2): Argument Clinic converters now use accept={type}
     instead of types={’type’} to specify the types the converter
     accepts.

   - Issue #23330(3): h2py now supports arbitrary filenames in #include.

   - Issue #24031(4): make patchcheck now supports git checkouts, too.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/24000

   (2) https://bugs.python.org/24001

   (3) https://bugs.python.org/23330

   (4) https://bugs.python.org/24031


File: python.info,  Node: Python 3 5 0 alpha 4,  Next: Python 3 5 0 alpha 3,  Prev: Python 3 5 0 beta 1,  Up: Changelog

1.16.13 Python 3.5.0 alpha 4
----------------------------

Release date: 2015-04-19

* Menu:

* Core and Builtins: Core and Builtins<11>. 
* Library: Library<11>. 
* Build: Build<7>. 
* Tests: Tests<6>. 
* Tools/Demos: Tools/Demos<4>. 
* C API: C API<2>. 


File: python.info,  Node: Core and Builtins<11>,  Next: Library<11>,  Up: Python 3 5 0 alpha 4

1.16.13.1 Core and Builtins
...........................

   - Issue #22980(1): Under Linux, GNU/KFreeBSD and the Hurd, C
     extensions now include the architecture triplet in the extension
     name, to make it easy to test builds for different ABIs in the same
     working tree.  Under OS X, the extension name now includes PEP
     3149-style information.

   - Issue #22631(2): Added Linux-specific socket constant
     CAN_RAW_FD_FRAMES. Patch courtesy of Joe Jevnik.

   - Issue #23731(3): Implement PEP 488: removal of .pyo files.

   - Issue #23726(4): Don’t enable GC for user subclasses of non-GC
     types that don’t add any new fields.  Patch by Eugene Toder.

   - Issue #23309(5): Avoid a deadlock at shutdown if a daemon thread is
     aborted while it is holding a lock to a buffered I/O object, and
     the main thread tries to use the same I/O object (typically stdout
     or stderr).  A fatal error is emitted instead.

   - Issue #22977(6): Fixed formatting Windows error messages on Wine.
     Patch by Martin Panter.

   - Issue #23466(7): %c, %o, %x, and %X in bytes formatting now raise
     TypeError on non-integer input.

   - Issue #24044(8): Fix possible null pointer dereference in list.sort
     in out of memory conditions.

   - Issue #21354(9): PyCFunction_New function is exposed by python DLL
     again.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/22980

   (2) https://bugs.python.org/22631

   (3) https://bugs.python.org/23731

   (4) https://bugs.python.org/23726

   (5) https://bugs.python.org/23309

   (6) https://bugs.python.org/22977

   (7) https://bugs.python.org/23466

   (8) https://bugs.python.org/24044

   (9) https://bugs.python.org/21354


File: python.info,  Node: Library<11>,  Next: Build<7>,  Prev: Core and Builtins<11>,  Up: Python 3 5 0 alpha 4

1.16.13.2 Library
.................

   - Issue #23840(1): tokenize.open() now closes the temporary binary
     file on error to fix a resource warning.

   - Issue #16914(2): new debuglevel 2 in smtplib adds timestamps to
     debug output.

   - Issue #7159(3): urllib.request now supports sending auth
     credentials automatically after the first 401.  This enhancement is
     a superset of the enhancement from issue #19494(4) and supersedes
     that change.

   - Issue #23703(5): Fix a regression in urljoin() introduced in
     901e4e52b20a.  Patch by Demian Brecht.

   - Issue #4254(6): Adds _curses.update_lines_cols().  Patch by Arnon
     Yaari

   - Issue #19933(7): Provide default argument for ndigits in round.
     Patch by Vajrasky Kok.

   - Issue #23193(8): Add a numeric_owner parameter to
     tarfile.TarFile.extract and tarfile.TarFile.extractall.  Patch by
     Michael Vogt and Eric Smith.

   - Issue #23342(9): Add a subprocess.run() function than returns a
     CalledProcess instance for a more consistent API than the existing
     call* functions.

   - Issue #21217(10): inspect.getsourcelines() now tries to compute the
     start and end lines from the code object, fixing an issue when a
     lambda function is used as decorator argument.  Patch by Thomas
     Ballinger and Allison Kaptur.

   - Issue #24521(11): Fix possible integer overflows in the pickle
     module.

   - Issue #22931(12): Allow ’[’ and ’]’ in cookie values.

   - The keywords attribute of functools.partial is now always a
     dictionary.

   - Issue #23811(13): Add missing newline to the PyCompileError error
     message.  Patch by Alex Shkop.

   - Issue #21116(14): Avoid blowing memory when allocating a
     multiprocessing shared array that’s larger than 50% of the
     available RAM. Patch by Médéric Boquien.

   - Issue #22982(15): Improve BOM handling when seeking to multiple
     positions of a writable text file.

   - Issue #23464(16): Removed deprecated asyncio JoinableQueue.

   - Issue #23529(17): Limit the size of decompressed data when reading
     from GzipFile, BZ2File or LZMAFile.  This defeats denial of service
     attacks using compressed bombs (i.e.  compressed payloads which
     decompress to a huge size).  Patch by Martin Panter and Nikolaus
     Rath.

   - Issue #21859(18): Added Python implementation of io.FileIO.

   - Issue #23865(19): close() methods in multiple modules now are
     idempotent and more robust at shutdown.  If they need to release
     multiple resources, all are released even if errors occur.

   - Issue #23400(20): Raise same exception on both Python 2 and 3 if
     sem_open is not available.  Patch by Davin Potts.

   - Issue #10838(21): The subprocess now module includes
     SubprocessError and TimeoutError in its list of exported names for
     the users wild enough to use ‘from subprocess import *’.

   - Issue #23411(22): Added DefragResult, ParseResult, SplitResult,
     DefragResultBytes, ParseResultBytes, and SplitResultBytes to
     urllib.parse.__all__.  Patch by Martin Panter.

   - Issue #23881(23): urllib.request.ftpwrapper constructor now closes
     the socket if the FTP connection failed to fix a ResourceWarning.

   - Issue #23853(24): *note socket.socket.sendall(): 211. does no more
     reset the socket timeout each time data is sent successfuly.  The
     socket timeout is now the maximum total duration to send all data.

   - Issue #22721(25): An order of multiline pprint output of set or
     dict containing orderable and non-orderable elements no longer
     depends on iteration order of set or dict.

   - Issue #15133(26): _tkinter.tkapp.getboolean() now supports Tcl_Obj
     and always returns bool.  tkinter.BooleanVar now validates input
     values (accepted bool, int, str, and Tcl_Obj).
     tkinter.BooleanVar.get() now always returns bool.

   - Issue #10590(27): xml.sax.parseString() now supports string
     argument.

   - Issue #23338(28): Fixed formatting ctypes error messages on Cygwin.
     Patch by Makoto Kato.

   - Issue #15582(29): inspect.getdoc() now follows inheritance chains.

   - Issue #2175(30): SAX parsers now support a character stream of
     InputSource object.

   - Issue #16840(31): Tkinter now supports 64-bit integers added in Tcl
     8.4 and arbitrary precision integers added in Tcl 8.5.

   - Issue #23834(32): Fix socket.sendto(), use the C Py_ssize_t type to
     store the result of sendto() instead of the C int type.

   - Issue #23618(33): *note socket.socket.connect(): 20c. now waits
     until the connection completes instead of raising *note
     InterruptedError: 1e7. if the connection is interrupted by signals,
     signal handlers don’t raise an exception and the socket is blocking
     or has a timeout.  *note socket.socket.connect(): 20c. still raise
     *note InterruptedError: 1e7. for non-blocking sockets.

   - Issue #21526(34): Tkinter now supports new boolean type in Tcl 8.5.

   - Issue #23836(35): Fix the faulthandler module to handle reentrant
     calls to its signal handlers.

   - Issue #23838(36): linecache now clears the cache and returns an
     empty result on MemoryError.

   - Issue #10395(37): Added os.path.commonpath().  Implemented in
     posixpath and ntpath.  Based on patch by Rafik Draoui.

   - Issue #23611(38): Serializing more "lookupable" objects (such as
     unbound methods or nested classes) now are supported with pickle
     protocols < 4.

   - Issue #13583(39): sqlite3.Row now supports slice indexing.

   - Issue #18473(40): Fixed 2to3 and 3to2 compatible pickle mappings.
     Fixed ambigious reverse mappings.  Added many new mappings.  Import
     mapping is no longer applied to modules already mapped with full
     name mapping.

   - Issue #23485(41): select.select() is now retried automatically with
     the recomputed timeout when interrupted by a signal, except if the
     signal handler raises an exception.  This change is part of the PEP
     475.

   - Issue #23752(42): When built from an existing file descriptor,
     io.FileIO() now only calls fstat() once.  Before fstat() was called
     twice, which was not necessary.

   - Issue #23704(43): collections.deque() objects now support __add__,
     __mul__, and __imul__().

   - Issue #23171(44): csv.Writer.writerow() now supports arbitrary
     iterables.

   - Issue #23745(45): The new email header parser now handles duplicate
     MIME parameter names without error, similar to how get_param
     behaves.

   - Issue #22117(46): Fix os.utime(), it now rounds the timestamp
     towards minus infinity (-inf) instead of rounding towards zero.

   - Issue #23310(47): Fix MagicMock’s initializer to work with
     __methods__, just like configure_mock().  Patch by Kasia Jachim.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/23840

   (2) https://bugs.python.org/16914

   (3) https://bugs.python.org/7159

   (4) https://bugs.python.org/19494

   (5) https://bugs.python.org/23703

   (6) https://bugs.python.org/4254

   (7) https://bugs.python.org/19933

   (8) https://bugs.python.org/23193

   (9) https://bugs.python.org/23342

   (10) https://bugs.python.org/21217

   (11) https://bugs.python.org/24521

   (12) https://bugs.python.org/22931

   (13) https://bugs.python.org/23811

   (14) https://bugs.python.org/21116

   (15) https://bugs.python.org/22982

   (16) https://bugs.python.org/23464

   (17) https://bugs.python.org/23529

   (18) https://bugs.python.org/21859

   (19) https://bugs.python.org/23865

   (20) https://bugs.python.org/23400

   (21) https://bugs.python.org/10838

   (22) https://bugs.python.org/23411

   (23) https://bugs.python.org/23881

   (24) https://bugs.python.org/23853

   (25) https://bugs.python.org/22721

   (26) https://bugs.python.org/15133

   (27) https://bugs.python.org/10590

   (28) https://bugs.python.org/23338

   (29) https://bugs.python.org/15582

   (30) https://bugs.python.org/2175

   (31) https://bugs.python.org/16840

   (32) https://bugs.python.org/23834

   (33) https://bugs.python.org/23618

   (34) https://bugs.python.org/21526

   (35) https://bugs.python.org/23836

   (36) https://bugs.python.org/23838

   (37) https://bugs.python.org/10395

   (38) https://bugs.python.org/23611

   (39) https://bugs.python.org/13583

   (40) https://bugs.python.org/18473

   (41) https://bugs.python.org/23485

   (42) https://bugs.python.org/23752

   (43) https://bugs.python.org/23704

   (44) https://bugs.python.org/23171

   (45) https://bugs.python.org/23745

   (46) https://bugs.python.org/22117

   (47) https://bugs.python.org/23310


File: python.info,  Node: Build<7>,  Next: Tests<6>,  Prev: Library<11>,  Up: Python 3 5 0 alpha 4

1.16.13.3 Build
...............

   - Issue #23817(1): FreeBSD now uses "1.0" in the SOVERSION as other
     operating systems, instead of just "1".

   - Issue #23501(2): Argument Clinic now generates code into separate
     files by default.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/23817

   (2) https://bugs.python.org/23501


File: python.info,  Node: Tests<6>,  Next: Tools/Demos<4>,  Prev: Build<7>,  Up: Python 3 5 0 alpha 4

1.16.13.4 Tests
...............

   - Issue #23799(1): Added test.support.start_threads() for running and
     cleaning up multiple threads.

   - Issue #22390(2): test.regrtest now emits a warning if temporary
     files or directories are left after running a test.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/23799

   (2) https://bugs.python.org/22390


File: python.info,  Node: Tools/Demos<4>,  Next: C API<2>,  Prev: Tests<6>,  Up: Python 3 5 0 alpha 4

1.16.13.5 Tools/Demos
.....................

   - Issue #18128(1): pygettext now uses standard +NNNN format in the
     POT-Creation-Date header.

   - Issue #23935(2): Argument Clinic’s understanding of format units
     accepting bytes, bytearrays, and buffers is now consistent with
     both the documentation and the implementation.

   - Issue #23944(3): Argument Clinic now wraps long impl prototypes at
     column 78.

   - Issue #20586(4): Argument Clinic now ensures that functions without
     docstrings have signatures.

   - Issue #23492(5): Argument Clinic now generates argument parsing
     code with PyArg_Parse instead of PyArg_ParseTuple if possible.

   - Issue #23500(6): Argument Clinic is now smarter about generating
     the "#ifndef" (empty) definition of the methoddef macro: it’s only
     generated once, even if Argument Clinic processes the same symbol
     multiple times, and it’s emitted at the end of all processing
     rather than immediately after the first use.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/18128

   (2) https://bugs.python.org/23935

   (3) https://bugs.python.org/23944

   (4) https://bugs.python.org/20586

   (5) https://bugs.python.org/23492

   (6) https://bugs.python.org/23500


File: python.info,  Node: C API<2>,  Prev: Tools/Demos<4>,  Up: Python 3 5 0 alpha 4

1.16.13.6 C API
...............

   - Issue #23998(1): PyImport_ReInitLock() now checks for lock
     allocation error

   ---------- Footnotes ----------

   (1) https://bugs.python.org/23998


File: python.info,  Node: Python 3 5 0 alpha 3,  Next: Python 3 5 alpha 2,  Prev: Python 3 5 0 alpha 4,  Up: Changelog

1.16.14 Python 3.5.0 alpha 3
----------------------------

Release date: 2015-03-28

* Menu:

* Core and Builtins: Core and Builtins<12>. 
* Library: Library<12>. 
* Build: Build<8>. 
* Tests: Tests<7>. 
* Tools/Demos: Tools/Demos<5>. 


File: python.info,  Node: Core and Builtins<12>,  Next: Library<12>,  Up: Python 3 5 0 alpha 3

1.16.14.1 Core and Builtins
...........................

   - Issue #23573(1): Increased performance of string search operations
     (str.find, str.index, str.count, the in operator, str.split,
     str.partition) with arguments of different kinds (UCS1, UCS2,
     UCS4).

   - Issue #23753(2): Python doesn’t support anymore platforms without
     stat() or fstat(), these functions are always required.

   - Issue #23681(3): The -b option now affects comparisons of bytes
     with int.

   - Issue #23632(4): Memoryviews now allow tuple indexing (including
     for multi-dimensional memoryviews).

   - Issue #23192(5): Fixed generator lambdas.  Patch by Bruno Cauet.

   - Issue #23629(6): Fix the default __sizeof__ implementation for
     variable-sized objects.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/23573

   (2) https://bugs.python.org/23753

   (3) https://bugs.python.org/23681

   (4) https://bugs.python.org/23632

   (5) https://bugs.python.org/23192

   (6) https://bugs.python.org/23629


File: python.info,  Node: Library<12>,  Next: Build<8>,  Prev: Core and Builtins<12>,  Up: Python 3 5 0 alpha 3

1.16.14.2 Library
.................

   - Issue #14260(1): The groupindex attribute of regular expression
     pattern object now is non-modifiable mapping.

   - Issue #23792(2): Ignore KeyboardInterrupt when the pydoc pager is
     active.  This mimics the behavior of the standard unix pagers, and
     prevents pipepager from shutting down while the pager itself is
     still running.

   - Issue #23775(3): pprint() of OrderedDict now outputs the same
     representation as repr().

   - Issue #23765(4): Removed IsBadStringPtr calls in ctypes

   - Issue #22364(5): Improved some re error messages using regex for
     hints.

   - Issue #23742(6): ntpath.expandvars() no longer loses unbalanced
     single quotes.

   - Issue #21717(7): The zipfile.ZipFile.open function now supports ’x’
     (exclusive creation) mode.

   - Issue #21802(8): The reader in BufferedRWPair now is closed even
     when closing writer failed in BufferedRWPair.close().

   - Issue #23622(9): Unknown escapes in regular expressions that
     consist of ‘'\'’ and ASCII letter now raise a deprecation warning
     and will be forbidden in Python 3.6.

   - Issue #23671(10): string.Template now allows specifying the "self"
     parameter as a keyword argument.  string.Formatter now allows
     specifying the "self" and the "format_string" parameters as keyword
     arguments.

   - Issue #23502(11): The pprint module now supports mapping proxies.

   - Issue #17530(12): pprint now wraps long bytes objects and
     bytearrays.

   - Issue #22687(13): Fixed some corner cases in breaking words in
     tetxtwrap.  Got rid of quadratic complexity in breaking long words.

   - Issue #4727(14): The copy module now uses pickle protocol 4 (PEP
     3154) and supports copying of instances of classes whose __new__
     method takes keyword-only arguments.

   - Issue #23491(15): Added a zipapp module to support creating
     executable zip file archives of Python code.  Registered ".pyz" and
     ".pyzw" extensions on Windows for these archives (PEP 441).

   - Issue #23657(16): Avoid explicit checks for str in zipapp, adding
     support for pathlib.Path objects as arguments.

   - Issue #23688(17): Added support of arbitrary bytes-like objects and
     avoided unnecessary copying of memoryview in gzip.GzipFile.write().
     Original patch by Wolfgang Maier.

   - Issue #23252(18): Added support for writing ZIP files to unseekable
     streams.

   - Issue #23647(19): Increase impalib’s MAXLINE to accommodate modern
     mailbox sizes.

   - Issue #23539(20): If body is None,
     http.client.HTTPConnection.request now sets Content-Length to 0 for
     PUT, POST, and PATCH headers to avoid 411 errors from some web
     servers.

   - Issue #22351(21): The nntplib.NNTP constructor no longer leaves the
     connection and socket open until the garbage collector cleans them
     up.  Patch by Martin Panter.

   - Issue #23704(22): collections.deque() objects now support methods
     for index(), insert(), and copy().  This allows deques to be
     registered as a MutableSequence and it improves their
     substitutablity for lists.

   - Issue #23715(23): *note signal.sigwaitinfo(): 215. and *note
     signal.sigtimedwait(): 214. are now retried when interrupted by a
     signal not in the `sigset' parameter, if the signal handler does
     not raise an exception.  signal.sigtimedwait() recomputes the
     timeout with a monotonic clock when it is retried.

   - Issue #23001(24): Few functions in modules mmap, ossaudiodev,
     socket, ssl, and codecs, that accepted only read-only bytes-like
     object now accept writable bytes-like object too.

   - Issue #23646(25): If time.sleep() is interrupted by a signal, the
     sleep is now retried with the recomputed delay, except if the
     signal handler raises an exception (PEP 475).

   - Issue #23136(26): _strptime now uniformly handles all days in week
     0, including Dec 30 of previous year.  Based on patch by Jim
     Carroll.

   - Issue #23700(27): Iterator of NamedTemporaryFile now keeps a
     reference to NamedTemporaryFile instance.  Patch by Bohuslav
     Kabrda.

   - Issue #22903(28): The fake test case created by unittest.loader
     when it fails importing a test module is now picklable.

   - Issue #22181(29): On Linux, os.urandom() now uses the new
     getrandom() syscall if available, syscall introduced in the Linux
     kernel 3.17.  It is more reliable and more secure, because it
     avoids the need of a file descriptor and waits until the kernel has
     enough entropy.

   - Issue #2211(30): Updated the implementation of the
     http.cookies.Morsel class.  Setting attributes key, value and
     coded_value directly now is deprecated.  update() and setdefault()
     now transform and check keys.  Comparing for equality now takes
     into account attributes key, value and coded_value.  copy() now
     returns a Morsel, not a dict.  repr() now contains all attributes.
     Optimized checking keys and quoting values.  Added new tests.
     Original patch by Demian Brecht.

   - Issue #18983(31): Allow selection of output units in timeit.  Patch
     by Julian Gindi.

   - Issue #23631(32): Fix traceback.format_list when a traceback has
     been mutated.

   - Issue #23568(33): Add rdivmod support to MagicMock() objects.
     Patch by Håkan Lövdahl.

   - Issue #2052(34): Add charset parameter to HtmlDiff.make_file().

   - Issue #23668(35): Support os.truncate and os.ftruncate on Windows.

   - Issue #23138(36): Fixed parsing cookies with absent keys or values
     in cookiejar.  Patch by Demian Brecht.

   - Issue #23051(37): multiprocessing.Pool methods imap() and
     imap_unordered() now handle exceptions raised by an iterator.
     Patch by Alon Diamant and Davin Potts.

   - Issue #23581(38): Add matmul support to MagicMock.  Patch by Håkan
     Lövdahl.

   - Issue #23566(39): enable(), register(), dump_traceback() and
     dump_traceback_later() functions of faulthandler now accept file
     descriptors.  Patch by Wei Wu.

   - Issue #22928(40): Disabled HTTP header injections in http.client.
     Original patch by Demian Brecht.

   - Issue #23615(41): Modules bz2, tarfile and tokenize now can be
     reloaded with imp.reload().  Patch by Thomas Kluyver.

   - Issue #23605(42): os.walk() now calls os.scandir() instead of
     os.listdir().  The usage of os.scandir() reduces the number of
     calls to os.stat().  Initial patch written by Ben Hoyt.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/14260

   (2) https://bugs.python.org/23792

   (3) https://bugs.python.org/23775

   (4) https://bugs.python.org/23765

   (5) https://bugs.python.org/22364

   (6) https://bugs.python.org/23742

   (7) https://bugs.python.org/21717

   (8) https://bugs.python.org/21802

   (9) https://bugs.python.org/23622

   (10) https://bugs.python.org/23671

   (11) https://bugs.python.org/23502

   (12) https://bugs.python.org/17530

   (13) https://bugs.python.org/22687

   (14) https://bugs.python.org/4727

   (15) https://bugs.python.org/23491

   (16) https://bugs.python.org/23657

   (17) https://bugs.python.org/23688

   (18) https://bugs.python.org/23252

   (19) https://bugs.python.org/23647

   (20) https://bugs.python.org/23539

   (21) https://bugs.python.org/22351

   (22) https://bugs.python.org/23704

   (23) https://bugs.python.org/23715

   (24) https://bugs.python.org/23001

   (25) https://bugs.python.org/23646

   (26) https://bugs.python.org/23136

   (27) https://bugs.python.org/23700

   (28) https://bugs.python.org/22903

   (29) https://bugs.python.org/22181

   (30) https://bugs.python.org/2211

   (31) https://bugs.python.org/18983

   (32) https://bugs.python.org/23631

   (33) https://bugs.python.org/23568

   (34) https://bugs.python.org/2052

   (35) https://bugs.python.org/23668

   (36) https://bugs.python.org/23138

   (37) https://bugs.python.org/23051

   (38) https://bugs.python.org/23581

   (39) https://bugs.python.org/23566

   (40) https://bugs.python.org/22928

   (41) https://bugs.python.org/23615

   (42) https://bugs.python.org/23605


File: python.info,  Node: Build<8>,  Next: Tests<7>,  Prev: Library<12>,  Up: Python 3 5 0 alpha 3

1.16.14.3 Build
...............

   - Issue #23585(1): make patchcheck will ensure the interpreter is
     built.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/23585


File: python.info,  Node: Tests<7>,  Next: Tools/Demos<5>,  Prev: Build<8>,  Up: Python 3 5 0 alpha 3

1.16.14.4 Tests
...............

   - Issue #23583(1): Added tests for standard IO streams in IDLE.

   - Issue #22289(2): Prevent test_urllib2net failures due to ftp
     connection timeout.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/23583

   (2) https://bugs.python.org/22289


File: python.info,  Node: Tools/Demos<5>,  Prev: Tests<7>,  Up: Python 3 5 0 alpha 3

1.16.14.5 Tools/Demos
.....................

   - Issue #22826(1): The result of open() in Tools/freeze/bkfile.py is
     now better compatible with regular files (in particular it now
     supports the context management protocol).

   ---------- Footnotes ----------

   (1) https://bugs.python.org/22826


File: python.info,  Node: Python 3 5 alpha 2,  Next: Python 3 5 alpha 1,  Prev: Python 3 5 0 alpha 3,  Up: Changelog

1.16.15 Python 3.5 alpha 2
--------------------------

Release date: 2015-03-09

* Menu:

* Core and Builtins: Core and Builtins<13>. 
* Library: Library<13>. 
* Build: Build<9>. 
* C API: C API<3>. 
* Windows: Windows<4>. 


File: python.info,  Node: Core and Builtins<13>,  Next: Library<13>,  Up: Python 3 5 alpha 2

1.16.15.1 Core and Builtins
...........................

   - Issue #23571(1): PyObject_Call() and PyCFunction_Call() now raise a
     SystemError if a function returns a result and raises an exception.
     The SystemError is chained to the previous exception.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/23571


File: python.info,  Node: Library<13>,  Next: Build<9>,  Prev: Core and Builtins<13>,  Up: Python 3 5 alpha 2

1.16.15.2 Library
.................

   - Issue #22524(1): New os.scandir() function, part of the PEP 471:
     "os.scandir() function – a better and faster directory iterator".
     Patch written by Ben Hoyt.

   - Issue #23103(2): Reduced the memory consumption of IPv4Address and
     IPv6Address.

   - Issue #21793(3): BaseHTTPRequestHandler again logs response code as
     numeric, not as stringified enum.  Patch by Demian Brecht.

   - Issue #23476(4): In the ssl module, enable OpenSSL’s
     X509_V_FLAG_TRUSTED_FIRST flag on certificate stores when it is
     available.

   - Issue #23576(5): Avoid stalling in SSL reads when EOF has been
     reached in the SSL layer but the underlying connection hasn’t been
     closed.

   - Issue #23504(6): Added an __all__ to the types module.

   - Issue #23563(7): Optimized utility functions in urllib.parse.

   - Issue #7830(8): Flatten nested functools.partial.

   - Issue #20204(9): Added the __module__ attribute to _tkinter
     classes.

   - Issue #19980(10): Improved help() for non-recognized strings.
     help(’’) now shows the help on str.  help(’help’) now shows the
     help on help().  Original patch by Mark Lawrence.

   - Issue #23521(11): Corrected pure python implementation of timedelta
     division.

        * Eliminated OverflowError from timedelta * float for some
          floats;

        * Corrected rounding in timedlta true division.

   - Issue #21619(12): Popen objects no longer leave a zombie after exit
     in the with statement if the pipe was broken.  Patch by Martin
     Panter.

   - Issue #22936(13): Make it possible to show local variables in
     tracebacks for both the traceback module and unittest.

   - Issue #15955(14): Add an option to limit the output size in
     bz2.decompress().  Patch by Nikolaus Rath.

   - Issue #6639(15): Module-level turtle functions no longer raise
     TclError after closing the window.

   - Issues #814253, #9179: Group references and conditional group
     references now work in lookbehind assertions in regular
     expressions.

   - Issue #23215(16): Multibyte codecs with custom error handlers that
     ignores errors consumed too much memory and raised SystemError or
     MemoryError.  Original patch by Aleksi Torhamo.

   - Issue #5700(17): io.FileIO() called flush() after closing the file.
     flush() was not called in close() if closefd=False.

   - Issue #23374(18): Fixed pydoc failure with non-ASCII files when
     stdout encoding differs from file system encoding (e.g.  on Mac
     OS).

   - Issue #23481(19): Remove RC4 from the SSL module’s default cipher
     list.

   - Issue #21548(20): Fix pydoc.synopsis() and pydoc.apropos() on
     modules with empty docstrings.

   - Issue #22885(21): Fixed arbitrary code execution vulnerability in
     the dbm.dumb module.  Original patch by Claudiu Popa.

   - Issue #23239(22): ssl.match_hostname() now supports matching of IP
     addresses.

   - Issue #23146(23): Fix mishandling of absolute Windows paths with
     forward slashes in pathlib.

   - Issue #23096(24): Pickle representation of floats with protocol 0
     now is the same for both Python and C implementations.

   - Issue #19105(25): pprint now more efficiently uses free space at
     the right.

   - Issue #14910(26): Add allow_abbrev parameter to
     argparse.ArgumentParser.  Patch by Jonathan Paugh, Steven Bethard,
     paul j3 and Daniel Eriksson.

   - Issue #21717(27): tarfile.open() now supports ’x’ (exclusive
     creation) mode.

   - Issue #23344(28): marshal.dumps() is now 20-25% faster on average.

   - Issue #20416(29): marshal.dumps() with protocols 3 and 4 is now
     40-50% faster on average.

   - Issue #23421(30): Fixed compression in tarfile CLI. Patch by
     wdv4758h.

   - Issue #23367(31): Fix possible overflows in the unicodedata module.

   - Issue #23361(32): Fix possible overflow in Windows subprocess
     creation code.

   - logging.handlers.QueueListener now takes a respect_handler_level
     keyword argument which, if set to True, will pass messages to
     handlers taking handler levels into account.

   - Issue #19705(33): turtledemo now has a visual sorting algorithm
     demo.  Original patch from Jason Yeo.

   - Issue #23801(34): Fix issue where cgi.FieldStorage did not always
     ignore the entire preamble to a multipart body.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/22524

   (2) https://bugs.python.org/23103

   (3) https://bugs.python.org/21793

   (4) https://bugs.python.org/23476

   (5) https://bugs.python.org/23576

   (6) https://bugs.python.org/23504

   (7) https://bugs.python.org/23563

   (8) https://bugs.python.org/7830

   (9) https://bugs.python.org/20204

   (10) https://bugs.python.org/19980

   (11) https://bugs.python.org/23521

   (12) https://bugs.python.org/21619

   (13) https://bugs.python.org/22936

   (14) https://bugs.python.org/15955

   (15) https://bugs.python.org/6639

   (16) https://bugs.python.org/23215

   (17) https://bugs.python.org/5700

   (18) https://bugs.python.org/23374

   (19) https://bugs.python.org/23481

   (20) https://bugs.python.org/21548

   (21) https://bugs.python.org/22885

   (22) https://bugs.python.org/23239

   (23) https://bugs.python.org/23146

   (24) https://bugs.python.org/23096

   (25) https://bugs.python.org/19105

   (26) https://bugs.python.org/14910

   (27) https://bugs.python.org/21717

   (28) https://bugs.python.org/23344

   (29) https://bugs.python.org/20416

   (30) https://bugs.python.org/23421

   (31) https://bugs.python.org/23367

   (32) https://bugs.python.org/23361

   (33) https://bugs.python.org/19705

   (34) https://bugs.python.org/23801


File: python.info,  Node: Build<9>,  Next: C API<3>,  Prev: Library<13>,  Up: Python 3 5 alpha 2

1.16.15.3 Build
...............

   - Issue #23445(1): pydebug builds now use "gcc -Og" where possible,
     to make the resulting executable faster.

   - Issue #23686(2): Update OS X 10.5 installer build to use OpenSSL
     1.0.2a.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/23445

   (2) https://bugs.python.org/23686


File: python.info,  Node: C API<3>,  Next: Windows<4>,  Prev: Build<9>,  Up: Python 3 5 alpha 2

1.16.15.4 C API
...............

   - Issue #20204(1): Deprecation warning is now raised for builtin
     types without the __module__ attribute.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/20204


File: python.info,  Node: Windows<4>,  Prev: C API<3>,  Up: Python 3 5 alpha 2

1.16.15.5 Windows
.................

   - Issue #23465(1): Implement PEP 486 - Make the Python Launcher aware
     of virtual environments.  Patch by Paul Moore.

   - Issue #23437(2): Make user scripts directory versioned on Windows.
     Patch by Paul Moore.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/23465

   (2) https://bugs.python.org/23437


File: python.info,  Node: Python 3 5 alpha 1,  Next: Python 3 4 0,  Prev: Python 3 5 alpha 2,  Up: Changelog

1.16.16 Python 3.5 alpha 1
--------------------------

Release date: 2015-02-08

* Menu:

* Core and Builtins: Core and Builtins<14>. 
* Library: Library<14>. 
* IDLE: IDLE<7>. 
* Build: Build<10>. 
* C API: C API<4>. 
* Documentation: Documentation<7>. 
* Tests: Tests<8>. 
* Tools/Demos: Tools/Demos<6>. 
* Windows: Windows<5>. 


File: python.info,  Node: Core and Builtins<14>,  Next: Library<14>,  Up: Python 3 5 alpha 1

1.16.16.1 Core and Builtins
...........................

   - Issue #23285(1): PEP 475 - EINTR handling.

   - Issue #22735(2): Fix many edge cases (including crashes) involving
     custom mro() implementations.

   - Issue #22896(3): Avoid using PyObject_AsCharBuffer(),
     PyObject_AsReadBuffer() and PyObject_AsWriteBuffer().

   - Issue #21295(4): Revert some changes (issue #16795(5)) to AST line
     numbers and column offsets that constituted a regression.

   - Issue #22986(6): Allow changing an object’s __class__ between a
     dynamic type and static type in some cases.

   - Issue #15859(7): PyUnicode_EncodeFSDefault(),
     PyUnicode_EncodeMBCS() and PyUnicode_EncodeCodePage() now raise an
     exception if the object is not a Unicode object.  For
     PyUnicode_EncodeFSDefault(), it was already the case on platforms
     other than Windows.  Patch written by Campbell Barton.

   - Issue #21408(8): The default __ne__() now returns NotImplemented if
     __eq__() returned NotImplemented.  Original patch by Martin Panter.

   - Issue #23321(9): Fixed a crash in str.decode() when error handler
     returned replacment string longer than mailformed input data.

   - Issue #22286(10): The "backslashreplace" error handlers now works
     with decoding and translating.

   - Issue #23253(11): Delay-load ShellExecute[AW] in os.startfile for
     reduced startup overhead on Windows.

   - Issue #22038(12): pyatomic.h now uses stdatomic.h or GCC built-in
     functions for atomic memory access if available.  Patch written by
     Vitor de Lima and Gustavo Temple.

   - Issue #20284(13): %-interpolation (aka printf) formatting added for
     bytes and bytearray.

   - Issue #23048(14): Fix jumping out of an infinite while loop in the
     pdb.

   - Issue #20335(15): bytes constructor now raises TypeError when
     encoding or errors is specified with non-string argument.  Based on
     patch by Renaud Blanch.

   - Issue #22834(16): If the current working directory ends up being
     set to a non-existent directory then import will no longer raise
     FileNotFoundError.

   - Issue #22869(17): Move the interpreter startup & shutdown code to a
     new dedicated pylifecycle.c module

   - Issue #22847(18): Improve method cache efficiency.

   - Issue #22335(19): Fix crash when trying to enlarge a bytearray to
     0x7fffffff bytes on a 32-bit platform.

   - Issue #22653(20): Fix an assertion failure in debug mode when doing
     a reentrant dict insertion in debug mode.

   - Issue #22643(21): Fix integer overflow in Unicode case operations
     (upper, lower, title, swapcase, casefold).

   - Issue #17636(22): Circular imports involving relative imports are
     now supported.

   - Issue #22604(23): Fix assertion error in debug mode when dividing a
     complex number by (nan+0j).

   - Issue #21052(24): Do not raise ImportWarning when sys.path_hooks or
     sys.meta_path are set to None.

   - Issue #16518(25): Use ’bytes-like object required’ in error
     messages that previously used the far more cryptic "’x’ does not
     support the buffer protocol.

   - Issue #22470(26): Fixed integer overflow issues in
     "backslashreplace", "xmlcharrefreplace", and "surrogatepass" error
     handlers.

   - Issue #22540(27): speed up ‘PyObject_IsInstance’ and
     ‘PyObject_IsSubclass’ in the common case that the second argument
     has metaclass *note type: 376.

   - Issue #18711(28): Add a new ‘PyErr_FormatV’ function, similar to
     ‘PyErr_Format’ but accepting a ‘va_list’ argument.

   - Issue #22520(29): Fix overflow checking when generating the repr of
     a unicode object.

   - Issue #22519(30): Fix overflow checking in PyBytes_Repr.

   - Issue #22518(31): Fix integer overflow issues in latin-1 encoding.

   - Issue #16324(32): _charset parameter of MIMEText now also accepts
     email.charset.Charset instances.  Initial patch by Claude Paroz.

   - Issue #1764286(33): Fix inspect.getsource() to support decorated
     functions.  Patch by Claudiu Popa.

   - Issue #18554(34): os.__all__ includes posix functions.

   - Issue #21391(35): Use os.path.abspath in the shutil module.

   - Issue #11471(36): avoid generating a JUMP_FORWARD instruction at
     the end of an if-block if there is no else-clause.  Original patch
     by Eugene Toder.

   - Issue #22215(37): Now ValueError is raised instead of TypeError
     when str or bytes argument contains not permitted null character or
     byte.

   - Issue #22258(38): Fix the internal function set_inheritable() on
     Illumos.  This platform exposes the function ‘ioctl(FIOCLEX)’, but
     calling it fails with errno is ENOTTY: "Inappropriate ioctl for
     device".  set_inheritable() now falls back to the slower ‘fcntl()’
     (‘F_GETFD’ and then ‘F_SETFD’).

   - Issue #21389(39): Displaying the __qualname__ of the underlying
     function in the repr of a bound method.

   - Issue #22206(40): Using pthread, PyThread_create_key() now sets
     errno to ENOMEM and returns -1 (error) on integer overflow.

   - Issue #20184(41): Argument Clinic based signature introspection
     added for 30 of the builtin functions.

   - Issue #22116(42): C functions and methods (of the
     ’builtin_function_or_method’ type) can now be weakref’ed.  Patch by
     Wei Wu.

   - Issue #22077(43): Improve index error messages for bytearrays,
     bytes, lists, and tuples by adding ’or slices’.  Added ’, not
     <typename>’ for bytearrays.  Original patch by Claudiu Popa.

   - Issue #20179(44): Apply Argument Clinic to bytes and bytearray.
     Patch by Tal Einat.

   - Issue #22082(45): Clear interned strings in slotdefs.

   - Upgrade Unicode database to Unicode 7.0.0.

   - Issue #21897(46): Fix a crash with the f_locals attribute with
     closure variables when frame.clear() has been called.

   - Issue #21205(47): Add a new ‘__qualname__’ attribute to generator,
     the qualified name, and use it in the representation of a generator
     (‘repr(gen)’).  The default name of the generator (‘__name__’
     attribute) is now get from the function instead of the code.  Use
     ‘gen.gi_code.co_name’ to get the name of the code.

   - Issue #21669(48): With the aid of heuristics in
     SyntaxError.__init__, the parser now attempts to generate more
     meaningful (or at least more search engine friendly) error messages
     when "exec" and "print" are used as statements.

   - Issue #21642(49): In the conditional if-else expression, allow an
     integer written with no space between itself and the ‘else’ keyword
     (e.g.  ‘True if 42else False’) to be valid syntax.

   - Issue #21523(50): Fix over-pessimistic computation of the stack
     effect of some opcodes in the compiler.  This also fixes a
     quadratic compilation time issue noticeable when compiling code
     with a large number of "and" and "or" operators.

   - Issue #21418(51): Fix a crash in the builtin function super() when
     called without argument and without current frame (ex: embedded
     Python).

   - Issue #21425(52): Fix flushing of standard streams in the
     interactive interpreter.

   - Issue #21435(53): In rare cases, when running finalizers on objects
     in cyclic trash a bad pointer dereference could occur due to a
     subtle flaw in internal iteration logic.

   - Issue #21377(54): PyBytes_Concat() now tries to concatenate
     in-place when the first argument has a reference count of 1.  Patch
     by Nikolaus Rath.

   - Issue #20355(55): -W command line options now have higher priority
     than the PYTHONWARNINGS environment variable.  Patch by Arfrever.

   - Issue #21274(56): Define PATH_MAX for GNU/Hurd in
     Python/pythonrun.c.

   - Issue #20904(57): Support setting FPU precision on m68k.

   - Issue #21209(58): Fix sending tuples to custom generator objects
     with the yield from syntax.

   - Issue #21193(59): pow(a, b, c) now raises ValueError rather than
     TypeError when b is negative.  Patch by Josh Rosenberg.

   - PEP 465 and Issue #21176(60): Add the ’@’ operator for matrix
     multiplication.

   - Issue #21134(61): Fix segfault when str is called on an
     uninitialized UnicodeEncodeError, UnicodeDecodeError, or
     UnicodeTranslateError object.

   - Issue #19537(62): Fix PyUnicode_DATA() alignment under m68k.  Patch
     by Andreas Schwab.

   - Issue #20929(63): Add a type cast to avoid shifting a negative
     number.

   - Issue #20731(64): Properly position in source code files even if
     they are opened in text mode.  Patch by Serhiy Storchaka.

   - Issue #20637(65): Key-sharing now also works for instance
     dictionaries of subclasses.  Patch by Peter Ingebretson.

   - Issue #8297(66): Attributes missing from modules now include the
     module name in the error text.  Original patch by ysj.ray.

   - Issue #19995(67): %c, %o, %x, and %X now raise TypeError on
     non-integer input.

   - Issue #19655(68): The ASDL parser - used by the build process to
     generate code for managing the Python AST in C - was rewritten.
     The new parser is self contained and does not require to carry long
     the spark.py parser-generator library; spark.py was removed from
     the source base.

   - Issue #12546(69): Allow ‘\x00’ to be used as a fill character when
     using str, int, float, and complex __format__ methods.

   - Issue #20480(70): Add ipaddress.reverse_pointer.  Patch by Leon
     Weber.

   - Issue #13598(71): Modify string.Formatter to support auto-numbering
     of replacement fields.  It now matches the behavior of str.format()
     in this regard.  Patches by Phil Elson and Ramchandra Apte.

   - Issue #8931(72): Make alternate formatting (’#’) for type ’c’ raise
     an exception.  In versions prior to 3.5, ’#’ with ’c’ had no
     effect.  Now specifying it is an error.  Patch by Torsten
     Landschoff.

   - Issue #23165(73): Perform overflow checks before allocating memory
     in the _Py_char2wchar function.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/23285

   (2) https://bugs.python.org/22735

   (3) https://bugs.python.org/22896

   (4) https://bugs.python.org/21295

   (5) https://bugs.python.org/16795

   (6) https://bugs.python.org/22986

   (7) https://bugs.python.org/15859

   (8) https://bugs.python.org/21408

   (9) https://bugs.python.org/23321

   (10) https://bugs.python.org/22286

   (11) https://bugs.python.org/23253

   (12) https://bugs.python.org/22038

   (13) https://bugs.python.org/20284

   (14) https://bugs.python.org/23048

   (15) https://bugs.python.org/20335

   (16) https://bugs.python.org/22834

   (17) https://bugs.python.org/22869

   (18) https://bugs.python.org/22847

   (19) https://bugs.python.org/22335

   (20) https://bugs.python.org/22653

   (21) https://bugs.python.org/22643

   (22) https://bugs.python.org/17636

   (23) https://bugs.python.org/22604

   (24) https://bugs.python.org/21052

   (25) https://bugs.python.org/16518

   (26) https://bugs.python.org/22470

   (27) https://bugs.python.org/22540

   (28) https://bugs.python.org/18711

   (29) https://bugs.python.org/22520

   (30) https://bugs.python.org/22519

   (31) https://bugs.python.org/22518

   (32) https://bugs.python.org/16324

   (33) https://bugs.python.org/1764286

   (34) https://bugs.python.org/18554

   (35) https://bugs.python.org/21391

   (36) https://bugs.python.org/11471

   (37) https://bugs.python.org/22215

   (38) https://bugs.python.org/22258

   (39) https://bugs.python.org/21389

   (40) https://bugs.python.org/22206

   (41) https://bugs.python.org/20184

   (42) https://bugs.python.org/22116

   (43) https://bugs.python.org/22077

   (44) https://bugs.python.org/20179

   (45) https://bugs.python.org/22082

   (46) https://bugs.python.org/21897

   (47) https://bugs.python.org/21205

   (48) https://bugs.python.org/21669

   (49) https://bugs.python.org/21642

   (50) https://bugs.python.org/21523

   (51) https://bugs.python.org/21418

   (52) https://bugs.python.org/21425

   (53) https://bugs.python.org/21435

   (54) https://bugs.python.org/21377

   (55) https://bugs.python.org/20355

   (56) https://bugs.python.org/21274

   (57) https://bugs.python.org/20904

   (58) https://bugs.python.org/21209

   (59) https://bugs.python.org/21193

   (60) https://bugs.python.org/21176

   (61) https://bugs.python.org/21134

   (62) https://bugs.python.org/19537

   (63) https://bugs.python.org/20929

   (64) https://bugs.python.org/20731

   (65) https://bugs.python.org/20637

   (66) https://bugs.python.org/8297

   (67) https://bugs.python.org/19995

   (68) https://bugs.python.org/19655

   (69) https://bugs.python.org/12546

   (70) https://bugs.python.org/20480

   (71) https://bugs.python.org/13598

   (72) https://bugs.python.org/8931

   (73) https://bugs.python.org/23165


File: python.info,  Node: Library<14>,  Next: IDLE<7>,  Prev: Core and Builtins<14>,  Up: Python 3 5 alpha 1

1.16.16.2 Library
.................

   - Issue #23399(1): pyvenv creates relative symlinks where possible.

   - Issue #20289(2): cgi.FieldStorage() now supports the context
     management protocol.

   - Issue #13128(3): Print response headers for CONNECT requests when
     debuglevel > 0.  Patch by Demian Brecht.

   - Issue #15381(4): Optimized io.BytesIO to make less allocations and
     copyings.

   - Issue #22818(5): Splitting on a pattern that could match an empty
     string now raises a warning.  Patterns that can only match empty
     strings are now rejected.

   - Issue #23099(6): Closing io.BytesIO with exported buffer is
     rejected now to prevent corrupting exported buffer.

   - Issue #23326(7): Removed __ne__ implementations.  Since fixing
     default __ne__ implementation in issue #21408(8) they are
     redundant.

   - Issue #23363(9): Fix possible overflow in itertools.permutations.

   - Issue #23364(10): Fix possible overflow in itertools.product.

   - Issue #23366(11): Fixed possible integer overflow in
     itertools.combinations.

   - Issue #23369(12): Fixed possible integer overflow in
     _json.encode_basestring_ascii.

   - Issue #23353(13): Fix the exception handling of generators in
     PyEval_EvalFrameEx().  At entry, save or swap the exception state
     even if PyEval_EvalFrameEx() is called with throwflag=0.  At exit,
     the exception state is now always restored or swapped, not only if
     why is WHY_YIELD or WHY_RETURN. Patch co-written with Antoine
     Pitrou.

   - Issue #14099(14): Restored support of writing ZIP files to tellable
     but non-seekable streams.

   - Issue #14099(15): Writing to ZipFile and reading multiple
     ZipExtFiles is threadsafe now.

   - Issue #19361(16): JSON decoder now raises JSONDecodeError instead
     of ValueError.

   - Issue #18518(17): timeit now rejects statements which can’t be
     compiled outside a function or a loop (e.g.  "return" or "break").

   - Issue #23094(18): Fixed readline with frames in Python
     implementation of pickle.

   - Issue #23268(19): Fixed bugs in the comparison of ipaddress
     classes.

   - Issue #21408(20): Removed incorrect implementations of __ne__()
     which didn’t returned NotImplemented if __eq__() returned
     NotImplemented.  The default __ne__() now works correctly.

   - Issue #19996(21): ‘email.feedparser.FeedParser’ now handles
     (malformed) headers with no key rather than assuming the body has
     started.

   - Issue #20188(22): Support Application-Layer Protocol Negotiation
     (ALPN) in the ssl module.

   - Issue #23133(23): Pickling of ipaddress objects now produces more
     compact and portable representation.

   - Issue #23248(24): Update ssl error codes from latest OpenSSL git
     master.

   - Issue #23266(25): Much faster implementation of
     ipaddress.collapse_addresses() when there are many non-consecutive
     addresses.

   - Issue #23098(26): 64-bit dev_t is now supported in the os module.

   - Issue #21817(27): When an exception is raised in a task submitted
     to a ProcessPoolExecutor, the remote traceback is now displayed in
     the parent process.  Patch by Claudiu Popa.

   - Issue #15955(28): Add an option to limit output size when
     decompressing LZMA data.  Patch by Nikolaus Rath and Martin Panter.

   - Issue #23250(29): In the http.cookies module, capitalize "HttpOnly"
     and "Secure" as they are written in the standard.

   - Issue #23063(30): In the disutils’ check command, fix parsing of
     reST with code or code-block directives.

   - Issue #23209(31), #23225: selectors.BaseSelector.get_key() now
     raises a RuntimeError if the selector is closed.  And
     selectors.BaseSelector.close() now clears its internal reference to
     the selector mapping to break a reference cycle.  Initial patch
     written by Martin Richard.

   - Issue #17911(32): Provide a way to seed the linecache for a PEP-302
     module without actually loading the code.

   - Issue #17911(33): Provide a new object API for traceback, including
     the ability to not lookup lines at all until the traceback is
     actually rendered, without any trace of the original objects being
     kept alive.

   - Issue #19777(34): Provide a home() classmethod on Path objects.
     Contributed by Victor Salgado and Mayank Tripathi.

   - Issue #23206(35): Make ‘json.dumps(..., ensure_ascii=False)’ as
     fast as the default case of ‘ensure_ascii=True’.  Patch by Naoki
     Inada.

   - Issue #23185(36): Add math.inf and math.nan constants.

   - Issue #23186(37): Add ssl.SSLObject.shared_ciphers() and
     ssl.SSLSocket.shared_ciphers() to fetch the client’s list ciphers
     sent at handshake.

   - Issue #23143(38): Remove compatibility with OpenSSLs older than
     0.9.8.

   - Issue #23132(39): Improve performance and introspection support of
     comparison methods created by functool.total_ordering.

   - Issue #19776(40): Add an expanduser() method on Path objects.

   - Issue #23112(41): Fix SimpleHTTPServer to correctly carry the query
     string and fragment when it redirects to add a trailing slash.

   - Issue #21793(42): Added http.HTTPStatus enums (i.e.  HTTPStatus.OK,
     HTTPStatus.NOT_FOUND). Patch by Demian Brecht.

   - Issue #23093(43): In the io, module allow more operations to work
     on detached streams.

   - Issue #23111(44): In the ftplib, make ssl.PROTOCOL_SSLv23 the
     default protocol version.

   - Issue #22585(45): On OpenBSD 5.6 and newer, os.urandom() now calls
     getentropy(), instead of reading /dev/urandom, to get pseudo-random
     bytes.

   - Issue #19104(46): pprint now produces evaluable output for wrapped
     strings.

   - Issue #23071(47): Added missing names to codecs.__all__.  Patch by
     Martin Panter.

   - Issue #22783(48): Pickling now uses the NEWOBJ opcode instead of
     the NEWOBJ_EX opcode if possible.

   - Issue #15513(49): Added a __sizeof__ implementation for pickle
     classes.

   - Issue #19858(50): pickletools.optimize() now aware of the MEMOIZE
     opcode, can produce more compact result and no longer produces
     invalid output if input data contains MEMOIZE opcodes together with
     PUT or BINPUT opcodes.

   - Issue #22095(51): Fixed HTTPConnection.set_tunnel with default
     port.  The port value in the host header was set to "None".  Patch
     by Demian Brecht.

   - Issue #23016(52): A warning no longer produces an AttributeError
     when the program is run with pythonw.exe.

   - Issue #21775(53): shutil.copytree(): fix crash when copying to
     VFAT. An exception handler assumed that that OSError objects always
     have a ’winerror’ attribute.  That is not the case, so the
     exception handler itself raised AttributeError when run on Linux
     (and, presumably, any other non-Windows OS). Patch by Greg Ward.

   - Issue #1218234(54): Fix inspect.getsource() to load updated source
     of reloaded module.  Initial patch by Berker Peksag.

   - Issue #21740(55): Support wrapped callables in doctest.  Patch by
     Claudiu Popa.

   - Issue #23009(56): Make sure selectors.EpollSelecrtor.select() works
     when no FD is registered.

   - Issue #22959(57): In the constructor of
     http.client.HTTPSConnection, prefer the context’s check_hostname
     attribute over the `check_hostname' parameter.

   - Issue #22696(58): Add function *note sys.is_finalizing(): 333. to
     know about interpreter shutdown.

   - Issue #16043(59): Add a default limit for the amount of data
     xmlrpclib.gzip_decode will return.  This resolves CVE-2013-1753.

   - Issue #14099(60): ZipFile.open() no longer reopen the underlying
     file.  Objects returned by ZipFile.open() can now operate
     independently of the ZipFile even if the ZipFile was created by
     passing in a file-like object as the first argument to the
     constructor.

   - Issue #22966(61): Fix __pycache__ pyc file name clobber when
     pyc_compile is asked to compile a source file containing multiple
     dots in the source file name.

   - Issue #21971(62): Update turtledemo doc and add module to the
     index.

   - Issue #21032(63).  Fixed socket leak if
     HTTPConnection.getresponse() fails.  Original patch by Martin
     Panter.

   - Issue #22407(64): Deprecated the use of re.LOCALE flag with str
     patterns or re.ASCII. It was newer worked.

   - Issue #22902(65): The "ip" command is now used on Linux to
     determine MAC address in uuid.getnode().  Pach by Bruno Cauet.

   - Issue #22960(66): Add a context argument to xmlrpclib.ServerProxy
     constructor.

   - Issue #22389(67): Add contextlib.redirect_stderr().

   - Issue #21356(68): Make ssl.RAND_egd() optional to support LibreSSL.
     The availability of the function is checked during the compilation.
     Patch written by Bernard Spil.

   - Issue #22915(69): SAX parser now supports files opened with file
     descriptor or bytes path.

   - Issue #22609(70): Constructors and update methods of mapping
     classes in the collections module now accept the self keyword
     argument.

   - Issue #22940(71): Add readline.append_history_file.

   - Issue #19676(72): Added the "namereplace" error handler.

   - Issue #22788(73): Add `context' parameter to
     logging.handlers.HTTPHandler.

   - Issue #22921(74): Allow SSLContext to take the `hostname' parameter
     even if OpenSSL doesn’t support SNI.

   - Issue #22894(75): TestCase.subTest() would cause the test suite to
     be stopped when in failfast mode, even in the absence of failures.

   - Issue #22796(76): HTTP cookie parsing is now stricter, in order to
     protect against potential injection attacks.

   - Issue #22370(77): Windows detection in pathlib is now more robust.

   - Issue #22841(78): Reject coroutines in asyncio
     add_signal_handler().  Patch by Ludovic.Gasc.

   - Issue #19494(79): Added urllib.request.HTTPBasicPriorAuthHandler.
     Patch by Matej Cepl.

   - Issue #22578(80): Added attributes to the re.error class.

   - Issue #22849(81): Fix possible double free in the io.TextIOWrapper
     constructor.

   - Issue #12728(82): Different Unicode characters having the same
     uppercase but different lowercase are now matched in
     case-insensitive regular expressions.

   - Issue #22821(83): Fixed fcntl() with integer argument on 64-bit
     big-endian platforms.

   - Issue #21650(84): Add an ‘--sort-keys’ option to json.tool CLI.

   - Issue #22824(85): Updated reprlib output format for sets to use set
     literals.  Patch contributed by Berker Peksag.

   - Issue #22824(86): Updated reprlib output format for arrays to
     display empty arrays without an unnecessary empty list.  Suggested
     by Serhiy Storchaka.

   - Issue #22406(87): Fixed the uu_codec codec incorrectly ported to
     3.x.  Based on patch by Martin Panter.

   - Issue #17293(88): uuid.getnode() now determines MAC address on AIX
     using netstat.  Based on patch by Aivars Kalvāns.

   - Issue #22769(89): Fixed ttk.Treeview.tag_has() when called without
     arguments.

   - Issue #22417(90): Verify certificates by default in httplib (PEP
     476).

   - Issue #22775(91): Fixed unpickling of http.cookies.SimpleCookie
     with protocol 2 and above.  Patch by Tim Graham.

   - Issue #22776(92): Brought excluded code into the scope of a try
     block in SysLogHandler.emit().

   - Issue #22665(93): Add missing get_terminal_size and SameFileError
     to shutil.__all__.

   - Issue #6623(94): Remove deprecated Netrc class in the ftplib
     module.  Patch by Matt Chaput.

   - Issue #17381(95): Fixed handling of case-insensitive ranges in
     regular expressions.

   - Issue #22410(96): Module level functions in the re module now cache
     compiled locale-dependent regular expressions taking into account
     the locale.

   - Issue #22759(97): Query methods on pathlib.Path() (exists(),
     is_dir(), etc.)  now return False when the underlying stat call
     raises NotADirectoryError.

   - Issue #8876(98): distutils now falls back to copying files when
     hard linking doesn’t work.  This allows use with special
     filesystems such as VirtualBox shared folders.

   - Issue #22217(99): Implemented reprs of classes in the zipfile
     module.

   - Issue #22457(100): Honour load_tests in the start_dir of discovery.

   - Issue #18216(101): gettext now raises an error when a .mo file has
     an unsupported major version number.  Patch by Aaron Hill.

   - Issue #13918(102): Provide a locale.delocalize() function which can
     remove locale-specific number formatting from a string representing
     a number, without then converting it to a specific type.  Patch by
     Cédric Krier.

   - Issue #22676(103): Make the pickling of global objects which don’t
     have a __module__ attribute less slow.

   - Issue #18853(104): Fixed ResourceWarning in shlex.__nain__.

   - Issue #9351(105): Defaults set with set_defaults on an argparse
     subparser are no longer ignored when also set on the parent parser.

   - Issue #7559(106): unittest test loading ImportErrors are reported
     as import errors with their import exception rather than as
     attribute errors after the import has already failed.

   - Issue #19746(107): Make it possible to examine the errors from
     unittest discovery without executing the test suite.  The new
     ‘errors’ attribute on TestLoader exposes these non-fatal errors
     encountered during discovery.

   - Issue #21991(108): Make email.headerregistry’s header ’params’
     attributes be read-only (MappingProxyType).  Previously the
     dictionary was modifiable but a new one was created on each access
     of the attribute.

   - Issue #22638(109): SSLv3 is now disabled throughout the standard
     library.  It can still be enabled by instantiating a SSLContext
     manually.

   - Issue #22641(110): In asyncio, the default SSL context for client
     connections is now created using ssl.create_default_context(), for
     stronger security.

   - Issue #17401(111): Include closefd in io.FileIO repr.

   - Issue #21338(112): Add silent mode for compileall.  quiet
     parameters of compile_{dir, file, path} functions now have a
     multilevel value.  Also, -q option of the CLI now have a multilevel
     value.  Patch by Thomas Kluyver.

   - Issue #20152(113): Convert the array and cmath modules to Argument
     Clinic.

   - Issue #18643(114): Add socket.socketpair() on Windows.

   - Issue #22435(115): Fix a file descriptor leak when SocketServer
     bind fails.

   - Issue #13096(116): Fixed segfault in CTypes POINTER handling of
     large values.

   - Issue #11694(117): Raise ConversionError in xdrlib as documented.
     Patch by Filip Gruszczyński and Claudiu Popa.

   - Issue #19380(118): Optimized parsing of regular expressions.

   - Issue #1519638(119): Now unmatched groups are replaced with empty
     strings in re.sub() and re.subn().

   - Issue #18615(120): sndhdr.what/whathdr now return a namedtuple.

   - Issue #22462(121): Fix pyexpat’s creation of a dummy frame to make
     it appear in exception tracebacks.

   - Issue #21965(122): Add support for in-memory SSL to the ssl module.
     Patch by Geert Jansen.

   - Issue #21173(123): Fix len() on a WeakKeyDictionary when .clear()
     was called with an iterator alive.

   - Issue #11866(124): Eliminated race condition in the computation of
     names for new threads.

   - Issue #21905(125): Avoid RuntimeError in pickle.whichmodule() when
     sys.modules is mutated while iterating.  Patch by Olivier Grisel.

   - Issue #11271(126): concurrent.futures.Executor.map() now takes a
     `chunksize' argument to allow batching of tasks in child processes
     and improve performance of ProcessPoolExecutor.  Patch by Dan
     O’Reilly.

   - Issue #21883(127): os.path.join() and os.path.relpath() now raise a
     TypeError with more helpful error message for unsupported or
     mismatched types of arguments.

   - Issue #22219(128): The zipfile module CLI now adds entries for
     directories (including empty directories) in ZIP file.

   - Issue #22449(129): In the ssl.SSLContext.load_default_certs,
     consult the environmental variables SSL_CERT_DIR and SSL_CERT_FILE
     on Windows.

   - Issue #22508(130): The email.__version__ variable has been removed;
     the email code is no longer shipped separately from the stdlib, and
     __version__ hasn’t been updated in several releases.

   - Issue #20076(131): Added non derived UTF-8 aliases to locale
     aliases table.

   - Issue #20079(132): Added locales supported in glibc 2.18 to locale
     alias table.

   - Issue #20218(133): Added convenience methods read_text/write_text
     and read_bytes/ write_bytes to pathlib.Path objects.

   - Issue #22437(134): Number of capturing groups in regular expression
     is no longer limited by 100.

   - Issue #17442(135): InteractiveInterpreter now displays the full
     chained traceback in its showtraceback method, to match the built
     in interactive interpreter.

   - Issue #23392(136): Added tests for marshal C API that works with
     FILE*.

   - Issue #10510(137): distutils register and upload methods now use
     HTML standards compliant CRLF line endings.

   - Issue #9850(138): Fixed macpath.join() for empty first component.
     Patch by Oleg Oshmyan.

   - Issue #5309(139): distutils’ build and build_ext commands now
     accept a ‘-j’ option to enable parallel building of extension
     modules.

   - Issue #22448(140): Improve canceled timer handles cleanup to
     prevent unbound memory usage.  Patch by Joshua Moore-Oliva.

   - Issue #22427(141): TemporaryDirectory no longer attempts to clean
     up twice when used in the with statement in generator.

   - Issue #22362(142): Forbidden ambiguous octal escapes out of range
     0-0o377 in regular expressions.

   - Issue #20912(143): Now directories added to ZIP file have correct
     Unix and MS-DOS directory attributes.

   - Issue #21866(144): ZipFile.close() no longer writes ZIP64 central
     directory records if allowZip64 is false.

   - Issue #22278(145): Fix urljoin problem with relative urls, a
     regression observed after changes to issue22118 were submitted.

   - Issue #22415(146): Fixed debugging output of the GROUPREF_EXISTS
     opcode in the re module.  Removed trailing spaces in debugging
     output.

   - Issue #22423(147): Unhandled exception in thread no longer causes
     unhandled AttributeError when sys.stderr is None.

   - Issue #21332(148): Ensure that ‘bufsize=1’ in subprocess.Popen()
     selects line buffering, rather than block buffering.  Patch by
     Akira Li.

   - Issue #21091(149): Fix API bug:
     email.message.EmailMessage.is_attachment is now a method.

   - Issue #21079(150): Fix email.message.EmailMessage.is_attachment to
     return the correct result when the header has parameters as well as
     a value.

   - Issue #22247(151): Add NNTPError to nntplib.__all__.

   - Issue #22366(152): urllib.request.urlopen will accept a context
     object (SSLContext) as an argument which will then used be for
     HTTPS connection.  Patch by Alex Gaynor.

   - Issue #4180(153): The warnings registries are now reset when the
     filters are modified.

   - Issue #22419(154): Limit the length of incoming HTTP request in
     wsgiref server to 65536 bytes and send a 414 error code for higher
     lengths.  Patch contributed by Devin Cook.

   - Lax cookie parsing in http.cookies could be a security issue when
     combined with non-standard cookie handling in some Web browsers.
     Reported by Sergey Bobrov.

   - Issue #20537(155): logging methods now accept an exception instance
     as well as a Boolean value or exception tuple.  Thanks to Yury
     Selivanov for the patch.

   - Issue #22384(156): An exception in Tkinter callback no longer
     crashes the program when it is run with pythonw.exe.

   - Issue #22168(157): Prevent turtle AttributeError with non-default
     Canvas on OS X.

   - Issue #21147(158): sqlite3 now raises an exception if the request
     contains a null character instead of truncate it.  Based on patch
     by Victor Stinner.

   - Issue #13968(159): The glob module now supports recursive search in
     subdirectories using the "**" pattern.

   - Issue #21951(160): Fixed a crash in Tkinter on AIX when called Tcl
     command with empty string or tuple argument.

   - Issue #21951(161): Tkinter now most likely raises MemoryError
     instead of crash if the memory allocation fails.

   - Issue #22338(162): Fix a crash in the json module on memory
     allocation failure.

   - Issue #12410(163): imaplib.IMAP4 now supports the context
     management protocol.  Original patch by Tarek Ziadé.

   - Issue #21270(164): We now override tuple methods in mock.call
     objects so that they can be used as normal call attributes.

   - Issue #16662(165): load_tests() is now unconditionally run when it
     is present in a package’s __init__.py.
     TestLoader.loadTestsFromModule() still accepts use_load_tests, but
     it is deprecated and ignored.  A new keyword-only attribute
     ‘pattern’ is added and documented.  Patch given by Robert Collins,
     tweaked by Barry Warsaw.

   - Issue #22226(166): First letter no longer is stripped from the
     "status" key in the result of Treeview.heading().

   - Issue #19524(167): Fixed resource leak in the HTTP connection when
     an invalid response is received.  Patch by Martin Panter.

   - Issue #20421(168): Add a .version() method to SSL sockets exposing
     the actual protocol version in use.

   - Issue #19546(169): configparser exceptions no longer expose
     implementation details.  Chained KeyErrors are removed, which leads
     to cleaner tracebacks.  Patch by Claudiu Popa.

   - Issue #22051(170): turtledemo no longer reloads examples to re-run
     them.  Initialization of variables and gui setup should be done in
     main(), which is called each time a demo is run, but not on import.

   - Issue #21933(171): Turtledemo users can change the code font size
     with a menu selection or control(command) ’-’ or ’+’ or
     control-mousewheel.  Original patch by Lita Cho.

   - Issue #21597(172): The separator between the turtledemo text pane
     and the drawing canvas can now be grabbed and dragged with a mouse.
     The code text pane can be widened to easily view or copy the full
     width of the text.  The canvas can be widened on small screens.
     Original patches by Jan Kanis and Lita Cho.

   - Issue #18132(173): Turtledemo buttons no longer disappear when the
     window is shrunk.  Original patches by Jan Kanis and Lita Cho.

   - Issue #22043(174): time.monotonic() is now always available.
     ‘threading.Lock.acquire()’, ‘threading.RLock.acquire()’ and socket
     operations now use a monotonic clock, instead of the system clock,
     when a timeout is used.

   - Issue #21527(175): Add a default number of workers to
     ThreadPoolExecutor equal to 5 times the number of CPUs.  Patch by
     Claudiu Popa.

   - Issue #22216(176): smtplib now resets its state more completely
     after a quit.  The most obvious consequence of the previous
     behavior was a STARTTLS failure during a
     connect/starttls/quit/connect/starttls sequence.

   - Issue #22098(177): ctypes’ BigEndianStructure and
     LittleEndianStructure now define an empty __slots__ so that
     subclasses don’t always get an instance dict.  Patch by Claudiu
     Popa.

   - Issue #22185(178): Fix an occasional RuntimeError in
     threading.Condition.wait() caused by mutation of the waiters queue
     without holding the lock.  Patch by Doug Zongker.

   - Issue #22287(179): On UNIX, _PyTime_gettimeofday() now uses
     clock_gettime(CLOCK_REALTIME) if available.  As a side effect,
     Python now depends on the librt library on Solaris and on Linux
     (only with glibc older than 2.17).

   - Issue #22182(180): Use e.args to unpack exceptions correctly in
     distutils.file_util.move_file.  Patch by Claudiu Popa.

   - The webbrowser module now uses subprocess’s start_new_session=True
     rather than a potentially risky preexec_fn=os.setsid call.

   - Issue #22042(181): signal.set_wakeup_fd(fd) now raises an exception
     if the file descriptor is in blocking mode.

   - Issue #16808(182): inspect.stack() now returns a named tuple
     instead of a tuple.  Patch by Daniel Shahaf.

   - Issue #22236(183): Fixed Tkinter images copying operations in
     NoDefaultRoot mode.

   - Issue #2527(184): Add a `globals' argument to timeit functions, in
     order to override the globals namespace in which the timed code is
     executed.  Patch by Ben Roberts.

   - Issue #22118(185): Switch urllib.parse to use RFC 3986 semantics
     for the resolution of relative URLs, rather than RFCs 1808 and
     2396.  Patch by Demian Brecht.

   - Issue #21549(186): Added the "members" parameter to TarFile.list().

   - Issue #19628(187): Allow compileall recursion depth to be specified
     with a -r option.

   - Issue #15696(188): Add a __sizeof__ implementation for mmap objects
     on Windows.

   - Issue #22068(189): Avoided reference loops with Variables and Fonts
     in Tkinter.

   - Issue #22165(190): SimpleHTTPRequestHandler now supports
     undecodable file names.

   - Issue #15381(191): Optimized line reading in io.BytesIO.

   - Issue #8797(192): Raise HTTPError on failed Basic Authentication
     immediately.  Initial patch by Sam Bull.

   - Issue #20729(193): Restored the use of lazy
     iterkeys()/itervalues()/iteritems() in the mailbox module.

   - Issue #21448(194): Changed FeedParser feed() to avoid O(N**2)
     behavior when parsing long line.  Original patch by Raymond
     Hettinger.

   - Issue #22184(195): The functools LRU Cache decorator factory now
     gives an earlier and clearer error message when the user forgets
     the required parameters.

   - Issue #17923(196): glob() patterns ending with a slash no longer
     match non-dirs on AIX. Based on patch by Delhallt.

   - Issue #21725(197): Added support for RFC 6531 (SMTPUTF8) in smtpd.

   - Issue #22176(198): Update the ctypes module’s libffi to v3.1.  This
     release adds support for the Linux AArch64 and POWERPC ELF ABIv2
     little endian architectures.

   - Issue #5411(199): Added support for the "xztar" format in the
     shutil module.

   - Issue #21121(200): Don’t force 3rd party C extensions to be built
     with -Werror=declaration-after-statement.

   - Issue #21975(201): Fixed crash when using uninitialized sqlite3.Row
     (in particular when unpickling pickled sqlite3.Row).  sqlite3.Row
     is now initialized in the __new__() method.

   - Issue #20170(202): Convert posixmodule to use Argument Clinic.

   - Issue #21539(203): Add an `exists_ok' argument to ‘Pathlib.mkdir()’
     to mimic ‘mkdir -p’ and *note os.makedirs(): 2ea. functionality.
     When true, ignore FileExistsErrors.  Patch by Berker Peksag.

   - Issue #22127(204): Bypass IDNA for pure-ASCII host names in the
     socket module (in particular for numeric IPs).

   - Issue #21047(205): set the default value for the `convert_charrefs'
     argument of HTMLParser to True.  Patch by Berker Peksag.

   - Add an __all__ to html.entities.

   - Issue #15114(206): the strict mode and argument of HTMLParser,
     HTMLParser.error, and the HTMLParserError exception have been
     removed.

   - Issue #22085(207): Dropped support of Tk 8.3 in Tkinter.

   - Issue #21580(208): Now Tkinter correctly handles bytes arguments
     passed to Tk.  In particular this allows initializing images from
     binary data.

   - Issue #22003(209): When initialized from a bytes object,
     io.BytesIO() now defers making a copy until it is mutated,
     improving performance and memory use on some use cases.  Patch by
     David Wilson.

   - Issue #22018(210): On Windows, signal.set_wakeup_fd() now also
     supports sockets.  A side effect is that Python depends to the
     WinSock library.

   - Issue #22054(211): Add os.get_blocking() and os.set_blocking()
     functions to get and set the blocking mode of a file descriptor
     (False if the O_NONBLOCK flag is set, True otherwise).  These
     functions are not available on Windows.

   - Issue #17172(212): Make turtledemo start as active on OS X even
     when run with subprocess.  Patch by Lita Cho.

   - Issue #21704(213): Fix build error for _multiprocessing when
     semaphores are not available.  Patch by Arfrever Frehtes Taifersar
     Arahesis.

   - Issue #20173(214): Convert sha1, sha256, sha512 and md5 to
     ArgumentClinic.  Patch by Vajrasky Kok.

   - Fix repr(_socket.socket) on Windows 64-bit: don’t fail with
     OverflowError on closed socket.  repr(socket.socket) already works
     fine.

   - Issue #22033(215): Reprs of most Python implemened classes now
     contain actual class name instead of hardcoded one.

   - Issue #21947(216): The dis module can now disassemble
     generator-iterator objects based on their gi_code attribute.  Patch
     by Clement Rouault.

   - Issue #16133(217): The asynchat.async_chat.handle_read() method now
     ignores BlockingIOError exceptions.

   - Issue #22044(218): Fixed premature DECREF in call_tzinfo_method.
     Patch by Tom Flanagan.

   - Issue #19884(219): readline: Disable the meta modifier key if
     stdout is not a terminal to not write the ANSI sequence
     ‘"\033[1034h"’ into stdout.  This sequence is used on some terminal
     (ex: TERM=xterm-256color") to enable support of 8 bit characters.

   - Issue #4350(220): Removed a number of out-of-dated and non-working
     for a long time Tkinter methods.

   - Issue #6167(221): Scrollbar.activate() now returns the name of
     active element if the argument is not specified.  Scrollbar.set()
     now always accepts only 2 arguments.

   - Issue #15275(222): Clean up and speed up the ntpath module.

   - Issue #21888(223): plistlib’s load() and loads() now work if the
     fmt parameter is specified.

   - Issue #22032(224): __qualname__ instead of __name__ is now always
     used to format fully qualified class names of Python implemented
     classes.

   - Issue #22031(225): Reprs now always use hexadecimal format with the
     "0x" prefix when contain an id in form " at 0x...".

   - Issue #22018(226): signal.set_wakeup_fd() now raises an OSError
     instead of a ValueError on ‘fstat()’ failure.

   - Issue #21044(227): tarfile.open() now handles fileobj with an
     integer ’name’ attribute.  Based on patch by Antoine Pietri.

   - Issue #21966(228): Respect -q command-line option when code module
     is ran.

   - Issue #19076(229): Don’t pass the redundant ’file’ argument to
     self.error().

   - Issue #16382(230): Improve exception message of warnings.warn() for
     bad category.  Initial patch by Phil Elson.

   - Issue #21932(231): os.read() now uses a ‘Py_ssize_t()’ type instead
     of ‘int’ for the size to support reading more than 2 GB at once.
     On Windows, the size is truncted to INT_MAX. As any call to
     os.read(), the OS may read less bytes than the number of requested
     bytes.

   - Issue #21942(232): Fixed source file viewing in pydoc’s server mode
     on Windows.

   - Issue #11259(233): asynchat.async_chat().set_terminator() now
     raises a ValueError if the number of received bytes is negative.

   - Issue #12523(234): asynchat.async_chat.push() now raises a
     TypeError if it doesn’t get a bytes string

   - Issue #21707(235): Add missing kwonlyargcount argument to
     ModuleFinder.replace_paths_in_code().

   - Issue #20639(236): calling Path.with_suffix(’’) allows removing the
     suffix again.  Patch by July Tikhonov.

   - Issue #21714(237): Disallow the construction of invalid paths using
     Path.with_name().  Original patch by Antony Lee.

   - Issue #15014(238): Added ’auth’ method to smtplib to make
     implementing auth mechanisms simpler, and used it internally in the
     login method.

   - Issue #21151(239): Fixed a segfault in the winreg module when
     ‘None’ is passed as a ‘REG_BINARY’ value to SetValueEx.  Patch by
     John Ehresman.

   - Issue #21090(240): io.FileIO.readall() does not ignore I/O errors
     anymore.  Before, it ignored I/O errors if at least the first C
     call read() succeed.

   - Issue #5800(241): headers parameter of wsgiref.headers.Headers is
     now optional.  Initial patch by Pablo Torres Navarrete and
     SilentGhost.

   - Issue #21781(242): ssl.RAND_add() now supports strings longer than
     2 GB.

   - Issue #21679(243): Prevent extraneous fstat() calls during open().
     Patch by Bohuslav Kabrda.

   - Issue #21863(244): cProfile now displays the module name of C
     extension functions, in addition to their own name.

   - Issue #11453(245): asyncore: emit a ResourceWarning when an
     unclosed file_wrapper object is destroyed.  The destructor now
     closes the file if needed.  The close() method can now be called
     twice: the second call does nothing.

   - Issue #21858(246): Better handling of Python exceptions in the
     sqlite3 module.

   - Issue #21476(247): Make sure the email.parser.BytesParser
     TextIOWrapper is discarded after parsing, so the input file isn’t
     unexpectedly closed.

   - Issue #20295(248): imghdr now recognizes OpenEXR format images.

   - Issue #21729(249): Used the "with" statement in the dbm.dumb module
     to ensure files closing.  Patch by Claudiu Popa.

   - Issue #21491(250): socketserver: Fix a race condition in child
     processes reaping.

   - Issue #21719(251): Added the ‘st_file_attributes’ field to
     os.stat_result on Windows.

   - Issue #21832(252): Require named tuple inputs to be exact strings.

   - Issue #21722(253): The distutils "upload" command now exits with a
     non-zero return code when uploading fails.  Patch by Martin
     Dengler.

   - Issue #21723(254): asyncio.Queue: support any type of number (ex:
     float) for the maximum size.  Patch written by Vajrasky Kok.

   - Issue #21711(255): support for "site-python" directories has now
     been removed from the site module (it was deprecated in 3.4).

   - Issue #17552(256): new socket.sendfile() method allowing a file to
     be sent over a socket by using high-performance os.sendfile() on
     UNIX. Patch by Giampaolo Rodola’.

   - Issue #18039(257): dbm.dump.open() now always creates a new
     database when the flag has the value ’n’.  Patch by Claudiu Popa.

   - Issue #21326(258): Add a new is_closed() method to
     asyncio.BaseEventLoop.  run_forever() and run_until_complete()
     methods of asyncio.BaseEventLoop now raise an exception if the
     event loop was closed.

   - Issue #21766(259): Prevent a security hole in CGIHTTPServer by URL
     unquoting paths before checking for a CGI script at that path.

   - Issue #21310(260): Fixed possible resource leak in failed open().

   - Issue #21256(261): Printout of keyword args should be in
     deterministic order in a mock function call.  This will help to
     write better doctests.

   - Issue #21677(262): Fixed chaining nonnormalized exceptions in io
     close() methods.

   - Issue #11709(263): Fix the pydoc.help function to not fail when
     sys.stdin is not a valid file.

   - Issue #21515(264): tempfile.TemporaryFile now uses os.O_TMPFILE
     flag is available.

   - Issue #13223(265): Fix pydoc.writedoc so that the HTML
     documentation for methods that use ’self’ in the example code is
     generated correctly.

   - Issue #21463(266): In urllib.request, fix pruning of the FTP cache.

   - Issue #21618(267): The subprocess module could fail to close open
     fds that were inherited by the calling process and already higher
     than POSIX resource limits would otherwise allow.  On systems with
     a functioning /proc/self/fd or /dev/fd interface the max is now
     ignored and all fds are closed.

   - Issue #20383(268): Introduce importlib.util.module_from_spec() as
     the preferred way to create a new module.

   - Issue #21552(269): Fixed possible integer overflow of too long
     string lengths in the tkinter module on 64-bit platforms.

   - Issue #14315(270): The zipfile module now ignores extra fields in
     the central directory that are too short to be parsed instead of
     letting a struct.unpack error bubble up as this "bad data" appears
     in many real world zip files in the wild and is ignored by other
     zip tools.

   - Issue #13742(271): Added "key" and "reverse" parameters to
     heapq.merge().  (First draft of patch contributed by Simon Sapin.)

   - Issue #21402(272): tkinter.ttk now works when default root window
     is not set.

   - Issue #3015(273): _tkinter.create() now creates tkapp object with
     wantobject=1 by default.

   - Issue #10203(274): sqlite3.Row now truly supports sequence
     protocol.  In particular it supports reverse() and negative
     indices.  Original patch by Claudiu Popa.

   - Issue #18807(275): If copying (no symlinks) specified for a venv,
     then the python interpreter aliases (python, python3) are now
     created by copying rather than symlinking.

   - Issue #20197(276): Added support for the WebP image type in the
     imghdr module.  Patch by Fabrice Aneche and Claudiu Popa.

   - Issue #21513(277): Speedup some properties of IP addresses
     (IPv4Address, IPv6Address) such as .is_private or .is_multicast.

   - Issue #21137(278): Improve the repr for threading.Lock() and its
     variants by showing the "locked" or "unlocked" status.  Patch by
     Berker Peksag.

   - Issue #21538(279): The plistlib module now supports loading of
     binary plist files when reference or offset size is not a power of
     two.

   - Issue #21455(280): Add a default backlog to socket.listen().

   - Issue #21525(281): Most Tkinter methods which accepted tuples now
     accept lists too.

   - Issue #22166(282): With the assistance of a new internal
     _codecs._forget_codec helping function, test_codecs now clears the
     encoding caches to avoid the appearance of a reference leak

   - Issue #22236(283): Tkinter tests now don’t reuse default root
     window.  New root window is created for every test class.

   - Issue #10744(284): Fix PEP 3118 format strings on ctypes objects
     with a nontrivial shape.

   - Issue #20826(285): Optimize ipaddress.collapse_addresses().

   - Issue #21487(286): Optimize ipaddress.summarize_address_range() and
     ipaddress.{IPv4Network,IPv6Network}.subnets().

   - Issue #21486(287): Optimize parsing of netmasks in
     ipaddress.IPv4Network and ipaddress.IPv6Network.

   - Issue #13916(288): Disallowed the surrogatepass error handler for
     non UTF-* encodings.

   - Issue #20998(289): Fixed re.fullmatch() of repeated single
     character pattern with ignore case.  Original patch by Matthew
     Barnett.

   - Issue #21075(290): fileinput.FileInput now reads bytes from
     standard stream if binary mode is specified.  Patch by Sam Kimbrel.

   - Issue #19775(291): Add a samefile() method to pathlib Path objects.
     Initial patch by Vajrasky Kok.

   - Issue #21226(292): Set up modules properly in
     PyImport_ExecCodeModuleObject (and friends).

   - Issue #21398(293): Fix a unicode error in the pydoc pager when the
     documentation contains characters not encodable to the stdout
     encoding.

   - Issue #16531(294): ipaddress.IPv4Network and ipaddress.IPv6Network
     now accept an (address, netmask) tuple argument, so as to easily
     construct network objects from existing addresses.

   - Issue #21156(295): importlib.abc.InspectLoader.source_to_code() is
     now a staticmethod.

   - Issue #21424(296): Simplified and optimized heaqp.nlargest() and
     nmsmallest() to make fewer tuple comparisons.

   - Issue #21396(297): Fix TextIOWrapper(..., write_through=True) to
     not force a flush() on the underlying binary stream.  Patch by
     akira.

   - Issue #18314(298): Unlink now removes junctions on Windows.  Patch
     by Kim Gräsman

   - Issue #21088(299): Bugfix for curses.window.addch() regression in
     3.4.0.  In porting to Argument Clinic, the first two arguments were
     reversed.

   - Issue #21407(300): _decimal: The module now supports function
     signatures.

   - Issue #10650(301): Remove the non-standard ’watchexp’ parameter
     from the Decimal.quantize() method in the Python version.  It had
     never been present in the C version.

   - Issue #21469(302): Reduced the risk of false positives in
     robotparser by checking to make sure that robots.txt has been read
     or does not exist prior to returning True in can_fetch().

   - Issue #19414(303): Have the OrderedDict mark deleted links as
     unusable.  This gives an early failure if the link is deleted
     during iteration.

   - Issue #21421(304): Add __slots__ to the MappingViews ABC. Patch by
     Josh Rosenberg.

   - Issue #21101(305): Eliminate double hashing in the C speed-up code
     for collections.Counter().

   - Issue #21321(306): itertools.islice() now releases the reference to
     the source iterator when the slice is exhausted.  Patch by Anton
     Afanasyev.

   - Issue #21057(307): TextIOWrapper now allows the underlying binary
     stream’s read() or read1() method to return an arbitrary bytes-like
     object (such as a memoryview).  Patch by Nikolaus Rath.

   - Issue #20951(308): SSLSocket.send() now raises either
     SSLWantReadError or SSLWantWriteError on a non-blocking socket if
     the operation would block.  Previously, it would return 0.  Patch
     by Nikolaus Rath.

   - Issue #13248(309): removed previously deprecated
     asyncore.dispatcher __getattr__ cheap inheritance hack.

   - Issue #9815(310): assertRaises now tries to clear references to
     local variables in the exception’s traceback.

   - Issue #19940(311): ssl.cert_time_to_seconds() now interprets the
     given time string in the UTC timezone (as specified in RFC 5280),
     not the local timezone.

   - Issue #13204(312): Calling sys.flags.__new__ would crash the
     interpreter, now it raises a TypeError.

   - Issue #19385(313): Make operations on a closed dbm.dumb database
     always raise the same exception.

   - Issue #21207(314): Detect when the os.urandom cached fd has been
     closed or replaced, and open it anew.

   - Issue #21291(315): subprocess’s Popen.wait() is now thread safe so
     that multiple threads may be calling wait() or poll() on a Popen
     instance at the same time without losing the Popen.returncode
     value.

   - Issue #21127(316): Path objects can now be instantiated from str
     subclass instances (such as ‘numpy.str_’).

   - Issue #15002(317): urllib.response object to use
     _TemporaryFileWrapper (and _TemporaryFileCloser) facility.
     Provides a better way to handle file descriptor close.  Patch
     contributed by Christian Theune.

   - Issue #12220(318): mindom now raises a custom ValueError indicating
     it doesn’t support spaces in URIs instead of letting a ’split’
     ValueError bubble up.

   - Issue #21068(319): The ssl.PROTOCOL* constants are now enum
     members.

   - Issue #21276(320): posixmodule: Don’t define USE_XATTRS on KFreeBSD
     and the Hurd.

   - Issue #21262(321): New method assert_not_called for Mock.  It
     raises AssertionError if the mock has been called.

   - Issue #21238(322): New keyword argument ‘unsafe’ to Mock.  It
     raises *note AttributeError: 356. incase of an attribute startswith
     assert or assret.

   - Issue #20896(323): ssl.get_server_certificate() now uses
     PROTOCOL_SSLv23, not PROTOCOL_SSLv3, for maximum compatibility.

   - Issue #21239(324): patch.stopall() didn’t work deterministically
     when the same name was patched more than once.

   - Issue #21203(325): Updated fileConfig and dictConfig to remove
     inconsistencies.  Thanks to Jure Koren for the patch.

   - Issue #21222(326): Passing name keyword argument to
     mock.create_autospec now works.

   - Issue #21197(327): Add lib64 -> lib symlink in venvs on 64-bit
     non-OS X POSIX.

   - Issue #17498(328): Some SMTP servers disconnect after certain
     errors, violating strict RFC conformance.  Instead of losing the
     error code when we issue the subsequent RSET, smtplib now returns
     the error code and defers raising the SMTPServerDisconnected error
     until the next command is issued.

   - Issue #17826(329): setting an iterable side_effect on a mock
     function created by create_autospec now works.  Patch by Kushal
     Das.

   - Issue #7776(330): Fix ‘Host:’ header and reconnection when using
     http.client.HTTPConnection.set_tunnel().  Patch by Nikolaus Rath.

   - Issue #20968(331): unittest.mock.MagicMock now supports division.
     Patch by Johannes Baiter.

   - Issue #21529(332) (CVE-2014-4616): Fix arbitrary memory access in
     JSONDecoder.raw_decode with a negative second parameter.  Bug
     reported by Guido Vranken.

   - Issue #21169(333): getpass now handles non-ascii characters that
     the input stream encoding cannot encode by re-encoding using the
     replace error handler.

   - Issue #21171(334): Fixed undocumented filter API of the rot13
     codec.  Patch by Berker Peksag.

   - Issue #20539(335): Improved math.factorial error message for large
     positive inputs and changed exception type (OverflowError ->
     ValueError) for large negative inputs.

   - Issue #21172(336): isinstance check relaxed from dict to
     collections.Mapping.

   - Issue #21155(337): asyncio.EventLoop.create_unix_server() now
     raises a ValueError if path and sock are specified at the same
     time.

   - Issue #21136(338): Avoid unnecessary normalization of Fractions
     resulting from power and other operations.  Patch by Raymond
     Hettinger.

   - Issue #17621(339): Introduce importlib.util.LazyLoader.

   - Issue #21076(340): signal module constants were turned into enums.
     Patch by Giampaolo Rodola’.

   - Issue #20636(341): Improved the repr of Tkinter widgets.

   - Issue #19505(342): The items, keys, and values views of OrderedDict
     now support reverse iteration using reversed().

   - Issue #21149(343): Improved thread-safety in logging cleanup during
     interpreter shutdown.  Thanks to Devin Jeanpierre for the patch.

   - Issue #21058(344): Fix a leak of file descriptor in *note
     tempfile.NamedTemporaryFile(): 9bf, close the file descriptor if
     *note io.open(): 1e9. fails

   - Issue #21200(345): Return None from pkgutil.get_loader() when
     __spec__ is missing.

   - Issue #21013(346): Enhance ssl.create_default_context() when used
     for server side sockets to provide better security by default.

   - Issue #20145(347): ‘assertRaisesRegex’ and ‘assertWarnsRegex’ now
     raise a TypeError if the second argument is not a string or
     compiled regex.

   - Issue #20633(348): Replace relative import by absolute import.

   - Issue #20980(349): Stop wrapping exception when using ThreadPool.

   - Issue #21082(350): In os.makedirs, do not set the process-wide
     umask.  Note this changes behavior of makedirs when exist_ok=True.

   - Issue #20990(351): Fix issues found by pyflakes for
     multiprocessing.

   - Issue #21015(352): SSL contexts will now automatically select an
     elliptic curve for ECDH key exchange on OpenSSL 1.0.2 and later,
     and otherwise default to "prime256v1".

   - Issue #21000(353): Improve the command-line interface of json.tool.

   - Issue #20995(354): Enhance default ciphers used by the ssl module
     to enable better security and prioritize perfect forward secrecy.

   - Issue #20884(355): Don’t assume that __file__ is defined on
     importlib.__init__.

   - Issue #21499(356): Ignore __builtins__ in several
     test_importlib.test_api tests.

   - Issue #20627(357): xmlrpc.client.ServerProxy is now a context
     manager.

   - Issue #19165(358): The formatter module now raises
     DeprecationWarning instead of PendingDeprecationWarning.

   - Issue #13936(359): Remove the ability of datetime.time instances to
     be considered false in boolean contexts.

   - Issue #18931(360): selectors module now supports /dev/poll on
     Solaris.  Patch by Giampaolo Rodola’.

   - Issue #19977(361): When the ‘LC_TYPE’ locale is the POSIX locale
     (‘C’ locale), *note sys.stdin: 1b9. and *note sys.stdout: 1ba. are
     now using the ‘surrogateescape’ error handler, instead of the
     ‘strict’ error handler.

   - Issue #20574(362): Implement incremental decoder for cp65001 code
     (Windows code page 65001, Microsoft UTF-8).

   - Issue #20879(363): Delay the initialization of encoding and
     decoding tables for base32, ascii85 and base85 codecs in the base64
     module, and delay the initialization of the unquote_to_bytes()
     table of the urllib.parse module, to not waste memory if these
     modules are not used.

   - Issue #19157(364): Include the broadcast address in the usuable
     hosts for IPv6 in ipaddress.

   - Issue #11599(365): When an external command (e.g.  compiler) fails,
     distutils now prints out the whole command line (instead of just
     the command name) if the environment variable DISTUTILS_DEBUG is
     set.

   - Issue #4931(366): distutils should not produce unhelpful "error:
     None" messages anymore.  distutils.util.grok_environment_error is
     kept but doc-deprecated.

   - Issue #20875(367): Prevent possible gzip "’read’ is not defined"
     NameError.  Patch by Claudiu Popa.

   - Issue #11558(368): ‘email.message.Message.attach’ now returns a
     more useful error message if ‘attach’ is called on a message for
     which ‘is_multipart’ is False.

   - Issue #20283(369): RE pattern methods now accept the string keyword
     parameters as documented.  The pattern and source keyword
     parameters are left as deprecated aliases.

   - Issue #20778(370): Fix modulefinder to work with bytecode-only
     modules.

   - Issue #20791(371): copy.copy() now doesn’t make a copy when the
     input is a bytes object.  Initial patch by Peter Otten.

   - Issue #19748(372): On AIX, time.mktime() now raises an
     OverflowError for year outsize range [1902; 2037].

   - Issue #19573(373): inspect.signature: Use enum for parameter kind
     constants.

   - Issue #20726(374): inspect.signature: Make Signature and Parameter
     picklable.

   - Issue #17373(375): Add inspect.Signature.from_callable method.

   - Issue #20378(376): Improve repr of inspect.Signature and
     inspect.Parameter.

   - Issue #20816(377): Fix inspect.getcallargs() to raise correct
     TypeError for missing keyword-only arguments.  Patch by Jeremiah
     Lowin.

   - Issue #20817(378): Fix inspect.getcallargs() to fail correctly if
     more than 3 arguments are missing.  Patch by Jeremiah Lowin.

   - Issue #6676(379): Ensure a meaningful exception is raised when
     attempting to parse more than one XML document per pyexpat
     xmlparser instance.  (Original patches by Hirokazu Yamamoto and
     Amaury Forgeot d’Arc, with suggested wording by David Gutteridge)

   - Issue #21117(380): Fix inspect.signature to better support
     functools.partial.  Due to the specifics of functools.partial
     implementation, positional-or-keyword arguments passed as keyword
     arguments become keyword-only.

   - Issue #20334(381): inspect.Signature and inspect.Parameter are now
     hashable.  Thanks to Antony Lee for bug reports and suggestions.

   - Issue #15916(382): doctest.DocTestSuite returns an empty
     unittest.TestSuite instead of raising ValueError if it finds no
     tests

   - Issue #21209(383): Fix asyncio.tasks.CoroWrapper to workaround a
     bug in yield-from implementation in CPythons prior to 3.4.1.

   - asyncio: Add gi_{frame,running,code} properties to CoroWrapper
     (upstream issue #163(384)).

   - Issue #21311(385): Avoid exception in _osx_support with
     non-standard compiler configurations.  Patch by John Szakmeister.

   - Issue #11571(386): Ensure that the turtle window becomes the
     topmost window when launched on OS X.

   - Issue #21801(387): Validate that __signature__ is None or an
     instance of Signature.

   - Issue #21923(388): Prevent AttributeError in
     distutils.sysconfig.customize_compiler due to possible
     uninitialized _config_vars.

   - Issue #21323(389): Fix http.server to again handle scripts in CGI
     subdirectories, broken by the fix for security issue #19435(390).
     Patch by Zach Byrne.

   - Issue #22733(391): Fix ffi_prep_args not zero-extending argument
     values correctly on 64-bit Windows.

   - Issue #23302(392): Default to TCP_NODELAY=1 upon establishing an
     HTTPConnection.  Removed use of hard-coded MSS as it’s an
     optimization that’s no longer needed with Nagle disabled.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/23399

   (2) https://bugs.python.org/20289

   (3) https://bugs.python.org/13128

   (4) https://bugs.python.org/15381

   (5) https://bugs.python.org/22818

   (6) https://bugs.python.org/23099

   (7) https://bugs.python.org/23326

   (8) https://bugs.python.org/21408

   (9) https://bugs.python.org/23363

   (10) https://bugs.python.org/23364

   (11) https://bugs.python.org/23366

   (12) https://bugs.python.org/23369

   (13) https://bugs.python.org/23353

   (14) https://bugs.python.org/14099

   (15) https://bugs.python.org/14099

   (16) https://bugs.python.org/19361

   (17) https://bugs.python.org/18518

   (18) https://bugs.python.org/23094

   (19) https://bugs.python.org/23268

   (20) https://bugs.python.org/21408

   (21) https://bugs.python.org/19996

   (22) https://bugs.python.org/20188

   (23) https://bugs.python.org/23133

   (24) https://bugs.python.org/23248

   (25) https://bugs.python.org/23266

   (26) https://bugs.python.org/23098

   (27) https://bugs.python.org/21817

   (28) https://bugs.python.org/15955

   (29) https://bugs.python.org/23250

   (30) https://bugs.python.org/23063

   (31) https://bugs.python.org/23209

   (32) https://bugs.python.org/17911

   (33) https://bugs.python.org/17911

   (34) https://bugs.python.org/19777

   (35) https://bugs.python.org/23206

   (36) https://bugs.python.org/23185

   (37) https://bugs.python.org/23186

   (38) https://bugs.python.org/23143

   (39) https://bugs.python.org/23132

   (40) https://bugs.python.org/19776

   (41) https://bugs.python.org/23112

   (42) https://bugs.python.org/21793

   (43) https://bugs.python.org/23093

   (44) https://bugs.python.org/23111

   (45) https://bugs.python.org/22585

   (46) https://bugs.python.org/19104

   (47) https://bugs.python.org/23071

   (48) https://bugs.python.org/22783

   (49) https://bugs.python.org/15513

   (50) https://bugs.python.org/19858

   (51) https://bugs.python.org/22095

   (52) https://bugs.python.org/23016

   (53) https://bugs.python.org/21775

   (54) https://bugs.python.org/1218234

   (55) https://bugs.python.org/21740

   (56) https://bugs.python.org/23009

   (57) https://bugs.python.org/22959

   (58) https://bugs.python.org/22696

   (59) https://bugs.python.org/16043

   (60) https://bugs.python.org/14099

   (61) https://bugs.python.org/22966

   (62) https://bugs.python.org/21971

   (63) https://bugs.python.org/21032

   (64) https://bugs.python.org/22407

   (65) https://bugs.python.org/22902

   (66) https://bugs.python.org/22960

   (67) https://bugs.python.org/22389

   (68) https://bugs.python.org/21356

   (69) https://bugs.python.org/22915

   (70) https://bugs.python.org/22609

   (71) https://bugs.python.org/22940

   (72) https://bugs.python.org/19676

   (73) https://bugs.python.org/22788

   (74) https://bugs.python.org/22921

   (75) https://bugs.python.org/22894

   (76) https://bugs.python.org/22796

   (77) https://bugs.python.org/22370

   (78) https://bugs.python.org/22841

   (79) https://bugs.python.org/19494

   (80) https://bugs.python.org/22578

   (81) https://bugs.python.org/22849

   (82) https://bugs.python.org/12728

   (83) https://bugs.python.org/22821

   (84) https://bugs.python.org/21650

   (85) https://bugs.python.org/22824

   (86) https://bugs.python.org/22824

   (87) https://bugs.python.org/22406

   (88) https://bugs.python.org/17293

   (89) https://bugs.python.org/22769

   (90) https://bugs.python.org/22417

   (91) https://bugs.python.org/22775

   (92) https://bugs.python.org/22776

   (93) https://bugs.python.org/22665

   (94) https://bugs.python.org/6623

   (95) https://bugs.python.org/17381

   (96) https://bugs.python.org/22410

   (97) https://bugs.python.org/22759

   (98) https://bugs.python.org/8876

   (99) https://bugs.python.org/22217

   (100) https://bugs.python.org/22457

   (101) https://bugs.python.org/18216

   (102) https://bugs.python.org/13918

   (103) https://bugs.python.org/22676

   (104) https://bugs.python.org/18853

   (105) https://bugs.python.org/9351

   (106) https://bugs.python.org/7559

   (107) https://bugs.python.org/19746

   (108) https://bugs.python.org/21991

   (109) https://bugs.python.org/22638

   (110) https://bugs.python.org/22641

   (111) https://bugs.python.org/17401

   (112) https://bugs.python.org/21338

   (113) https://bugs.python.org/20152

   (114) https://bugs.python.org/18643

   (115) https://bugs.python.org/22435

   (116) https://bugs.python.org/13096

   (117) https://bugs.python.org/11694

   (118) https://bugs.python.org/19380

   (119) https://bugs.python.org/1519638

   (120) https://bugs.python.org/18615

   (121) https://bugs.python.org/22462

   (122) https://bugs.python.org/21965

   (123) https://bugs.python.org/21173

   (124) https://bugs.python.org/11866

   (125) https://bugs.python.org/21905

   (126) https://bugs.python.org/11271

   (127) https://bugs.python.org/21883

   (128) https://bugs.python.org/22219

   (129) https://bugs.python.org/22449

   (130) https://bugs.python.org/22508

   (131) https://bugs.python.org/20076

   (132) https://bugs.python.org/20079

   (133) https://bugs.python.org/20218

   (134) https://bugs.python.org/22437

   (135) https://bugs.python.org/17442

   (136) https://bugs.python.org/23392

   (137) https://bugs.python.org/10510

   (138) https://bugs.python.org/9850

   (139) https://bugs.python.org/5309

   (140) https://bugs.python.org/22448

   (141) https://bugs.python.org/22427

   (142) https://bugs.python.org/22362

   (143) https://bugs.python.org/20912

   (144) https://bugs.python.org/21866

   (145) https://bugs.python.org/22278

   (146) https://bugs.python.org/22415

   (147) https://bugs.python.org/22423

   (148) https://bugs.python.org/21332

   (149) https://bugs.python.org/21091

   (150) https://bugs.python.org/21079

   (151) https://bugs.python.org/22247

   (152) https://bugs.python.org/22366

   (153) https://bugs.python.org/4180

   (154) https://bugs.python.org/22419

   (155) https://bugs.python.org/20537

   (156) https://bugs.python.org/22384

   (157) https://bugs.python.org/22168

   (158) https://bugs.python.org/21147

   (159) https://bugs.python.org/13968

   (160) https://bugs.python.org/21951

   (161) https://bugs.python.org/21951

   (162) https://bugs.python.org/22338

   (163) https://bugs.python.org/12410

   (164) https://bugs.python.org/21270

   (165) https://bugs.python.org/16662

   (166) https://bugs.python.org/22226

   (167) https://bugs.python.org/19524

   (168) https://bugs.python.org/20421

   (169) https://bugs.python.org/19546

   (170) https://bugs.python.org/22051

   (171) https://bugs.python.org/21933

   (172) https://bugs.python.org/21597

   (173) https://bugs.python.org/18132

   (174) https://bugs.python.org/22043

   (175) https://bugs.python.org/21527

   (176) https://bugs.python.org/22216

   (177) https://bugs.python.org/22098

   (178) https://bugs.python.org/22185

   (179) https://bugs.python.org/22287

   (180) https://bugs.python.org/22182

   (181) https://bugs.python.org/22042

   (182) https://bugs.python.org/16808

   (183) https://bugs.python.org/22236

   (184) https://bugs.python.org/2527

   (185) https://bugs.python.org/22118

   (186) https://bugs.python.org/21549

   (187) https://bugs.python.org/19628

   (188) https://bugs.python.org/15696

   (189) https://bugs.python.org/22068

   (190) https://bugs.python.org/22165

   (191) https://bugs.python.org/15381

   (192) https://bugs.python.org/8797

   (193) https://bugs.python.org/20729

   (194) https://bugs.python.org/21448

   (195) https://bugs.python.org/22184

   (196) https://bugs.python.org/17923

   (197) https://bugs.python.org/21725

   (198) https://bugs.python.org/22176

   (199) https://bugs.python.org/5411

   (200) https://bugs.python.org/21121

   (201) https://bugs.python.org/21975

   (202) https://bugs.python.org/20170

   (203) https://bugs.python.org/21539

   (204) https://bugs.python.org/22127

   (205) https://bugs.python.org/21047

   (206) https://bugs.python.org/15114

   (207) https://bugs.python.org/22085

   (208) https://bugs.python.org/21580

   (209) https://bugs.python.org/22003

   (210) https://bugs.python.org/22018

   (211) https://bugs.python.org/22054

   (212) https://bugs.python.org/17172

   (213) https://bugs.python.org/21704

   (214) https://bugs.python.org/20173

   (215) https://bugs.python.org/22033

   (216) https://bugs.python.org/21947

   (217) https://bugs.python.org/16133

   (218) https://bugs.python.org/22044

   (219) https://bugs.python.org/19884

   (220) https://bugs.python.org/4350

   (221) https://bugs.python.org/6167

   (222) https://bugs.python.org/15275

   (223) https://bugs.python.org/21888

   (224) https://bugs.python.org/22032

   (225) https://bugs.python.org/22031

   (226) https://bugs.python.org/22018

   (227) https://bugs.python.org/21044

   (228) https://bugs.python.org/21966

   (229) https://bugs.python.org/19076

   (230) https://bugs.python.org/16382

   (231) https://bugs.python.org/21932

   (232) https://bugs.python.org/21942

   (233) https://bugs.python.org/11259

   (234) https://bugs.python.org/12523

   (235) https://bugs.python.org/21707

   (236) https://bugs.python.org/20639

   (237) https://bugs.python.org/21714

   (238) https://bugs.python.org/15014

   (239) https://bugs.python.org/21151

   (240) https://bugs.python.org/21090

   (241) https://bugs.python.org/5800

   (242) https://bugs.python.org/21781

   (243) https://bugs.python.org/21679

   (244) https://bugs.python.org/21863

   (245) https://bugs.python.org/11453

   (246) https://bugs.python.org/21858

   (247) https://bugs.python.org/21476

   (248) https://bugs.python.org/20295

   (249) https://bugs.python.org/21729

   (250) https://bugs.python.org/21491

   (251) https://bugs.python.org/21719

   (252) https://bugs.python.org/21832

   (253) https://bugs.python.org/21722

   (254) https://bugs.python.org/21723

   (255) https://bugs.python.org/21711

   (256) https://bugs.python.org/17552

   (257) https://bugs.python.org/18039

   (258) https://bugs.python.org/21326

   (259) https://bugs.python.org/21766

   (260) https://bugs.python.org/21310

   (261) https://bugs.python.org/21256

   (262) https://bugs.python.org/21677

   (263) https://bugs.python.org/11709

   (264) https://bugs.python.org/21515

   (265) https://bugs.python.org/13223

   (266) https://bugs.python.org/21463

   (267) https://bugs.python.org/21618

   (268) https://bugs.python.org/20383

   (269) https://bugs.python.org/21552

   (270) https://bugs.python.org/14315

   (271) https://bugs.python.org/13742

   (272) https://bugs.python.org/21402

   (273) https://bugs.python.org/3015

   (274) https://bugs.python.org/10203

   (275) https://bugs.python.org/18807

   (276) https://bugs.python.org/20197

   (277) https://bugs.python.org/21513

   (278) https://bugs.python.org/21137

   (279) https://bugs.python.org/21538

   (280) https://bugs.python.org/21455

   (281) https://bugs.python.org/21525

   (282) https://bugs.python.org/22166

   (283) https://bugs.python.org/22236

   (284) https://bugs.python.org/10744

   (285) https://bugs.python.org/20826

   (286) https://bugs.python.org/21487

   (287) https://bugs.python.org/21486

   (288) https://bugs.python.org/13916

   (289) https://bugs.python.org/20998

   (290) https://bugs.python.org/21075

   (291) https://bugs.python.org/19775

   (292) https://bugs.python.org/21226

   (293) https://bugs.python.org/21398

   (294) https://bugs.python.org/16531

   (295) https://bugs.python.org/21156

   (296) https://bugs.python.org/21424

   (297) https://bugs.python.org/21396

   (298) https://bugs.python.org/18314

   (299) https://bugs.python.org/21088

   (300) https://bugs.python.org/21407

   (301) https://bugs.python.org/10650

   (302) https://bugs.python.org/21469

   (303) https://bugs.python.org/19414

   (304) https://bugs.python.org/21421

   (305) https://bugs.python.org/21101

   (306) https://bugs.python.org/21321

   (307) https://bugs.python.org/21057

   (308) https://bugs.python.org/20951

   (309) https://bugs.python.org/13248

   (310) https://bugs.python.org/9815

   (311) https://bugs.python.org/19940

   (312) https://bugs.python.org/13204

   (313) https://bugs.python.org/19385

   (314) https://bugs.python.org/21207

   (315) https://bugs.python.org/21291

   (316) https://bugs.python.org/21127

   (317) https://bugs.python.org/15002

   (318) https://bugs.python.org/12220

   (319) https://bugs.python.org/21068

   (320) https://bugs.python.org/21276

   (321) https://bugs.python.org/21262

   (322) https://bugs.python.org/21238

   (323) https://bugs.python.org/20896

   (324) https://bugs.python.org/21239

   (325) https://bugs.python.org/21203

   (326) https://bugs.python.org/21222

   (327) https://bugs.python.org/21197

   (328) https://bugs.python.org/17498

   (329) https://bugs.python.org/17826

   (330) https://bugs.python.org/7776

   (331) https://bugs.python.org/20968

   (332) https://bugs.python.org/21529

   (333) https://bugs.python.org/21169

   (334) https://bugs.python.org/21171

   (335) https://bugs.python.org/20539

   (336) https://bugs.python.org/21172

   (337) https://bugs.python.org/21155

   (338) https://bugs.python.org/21136

   (339) https://bugs.python.org/17621

   (340) https://bugs.python.org/21076

   (341) https://bugs.python.org/20636

   (342) https://bugs.python.org/19505

   (343) https://bugs.python.org/21149

   (344) https://bugs.python.org/21058

   (345) https://bugs.python.org/21200

   (346) https://bugs.python.org/21013

   (347) https://bugs.python.org/20145

   (348) https://bugs.python.org/20633

   (349) https://bugs.python.org/20980

   (350) https://bugs.python.org/21082

   (351) https://bugs.python.org/20990

   (352) https://bugs.python.org/21015

   (353) https://bugs.python.org/21000

   (354) https://bugs.python.org/20995

   (355) https://bugs.python.org/20884

   (356) https://bugs.python.org/21499

   (357) https://bugs.python.org/20627

   (358) https://bugs.python.org/19165

   (359) https://bugs.python.org/13936

   (360) https://bugs.python.org/18931

   (361) https://bugs.python.org/19977

   (362) https://bugs.python.org/20574

   (363) https://bugs.python.org/20879

   (364) https://bugs.python.org/19157

   (365) https://bugs.python.org/11599

   (366) https://bugs.python.org/4931

   (367) https://bugs.python.org/20875

   (368) https://bugs.python.org/11558

   (369) https://bugs.python.org/20283

   (370) https://bugs.python.org/20778

   (371) https://bugs.python.org/20791

   (372) https://bugs.python.org/19748

   (373) https://bugs.python.org/19573

   (374) https://bugs.python.org/20726

   (375) https://bugs.python.org/17373

   (376) https://bugs.python.org/20378

   (377) https://bugs.python.org/20816

   (378) https://bugs.python.org/20817

   (379) https://bugs.python.org/6676

   (380) https://bugs.python.org/21117

   (381) https://bugs.python.org/20334

   (382) https://bugs.python.org/15916

   (383) https://bugs.python.org/21209

   (384) https://bugs.python.org/163

   (385) https://bugs.python.org/21311

   (386) https://bugs.python.org/11571

   (387) https://bugs.python.org/21801

   (388) https://bugs.python.org/21923

   (389) https://bugs.python.org/21323

   (390) https://bugs.python.org/19435

   (391) https://bugs.python.org/22733

   (392) https://bugs.python.org/23302


File: python.info,  Node: IDLE<7>,  Next: Build<10>,  Prev: Library<14>,  Up: Python 3 5 alpha 1

1.16.16.3 IDLE
..............

   - Issue #20577(1): Configuration of the max line length for the
     FormatParagraph extension has been moved from the General tab of
     the Idle preferences dialog to the FormatParagraph tab of the
     Config Extensions dialog.  Patch by Tal Einat.

   - Issue #16893(2): Update Idle doc chapter to match current Idle and
     add new information.

   - Issue #3068(3): Add Idle extension configuration dialog to Options
     menu.  Changes are written to HOME/.idlerc/config-extensions.cfg.
     Original patch by Tal Einat.

   - Issue #16233(4): A module browser (File : Class Browser, Alt+C)
     requires an editor window with a filename.  When Class Browser is
     requested otherwise, from a shell, output window, or ’Untitled’
     editor, Idle no longer displays an error box.  It now pops up an
     Open Module box (Alt+M). If a valid name is entered and a module is
     opened, a corresponding browser is also opened.

   - Issue #4832(5): Save As to type Python files automatically adds .py
     to the name you enter (even if your system does not display it).
     Some systems automatically add .txt when type is Text files.

   - Issue #21986(6): Code objects are not normally pickled by the
     pickle module.  To match this, they are no longer pickled when
     running under Idle.

   - Issue #17390(7): Adjust Editor window title; remove ’Python’, move
     version to end.

   - Issue #14105(8): Idle debugger breakpoints no longer disappear when
     inserting or deleting lines.

   - Issue #17172(9): Turtledemo can now be run from Idle.  Currently,
     the entry is on the Help menu, but it may move to Run.  Patch by
     Ramchandra Apt and Lita Cho.

   - Issue #21765(10): Add support for non-ascii identifiers to
     HyperParser.

   - Issue #21940(11): Add unittest for WidgetRedirector.  Initial patch
     by Saimadhav Heblikar.

   - Issue #18592(12): Add unittest for SearchDialogBase.  Patch by Phil
     Webster.

   - Issue #21694(13): Add unittest for ParenMatch.  Patch by Saimadhav
     Heblikar.

   - Issue #21686(14): add unittest for HyperParser.  Original patch by
     Saimadhav Heblikar.

   - Issue #12387(15): Add missing upper(lower)case versions of default
     Windows key bindings for Idle so Caps Lock does not disable them.
     Patch by Roger Serwy.

   - Issue #21695(16): Closing a Find-in-files output window while the
     search is still in progress no longer closes Idle.

   - Issue #18910(17): Add unittest for textView.  Patch by Phil
     Webster.

   - Issue #18292(18): Add unittest for AutoExpand.  Patch by Saihadhav
     Heblikar.

   - Issue #18409(19): Add unittest for AutoComplete.  Patch by Phil
     Webster.

   - Issue #21477(20): htest.py - Improve framework, complete set of
     tests.  Patches by Saimadhav Heblikar

   - Issue #18104(21): Add idlelib/idle_test/htest.py with a few sample
     tests to begin consolidating and improving human-validated tests of
     Idle.  Change other files as needed to work with htest.  Running
     the module as __main__ runs all tests.

   - Issue #21139(22): Change default paragraph width to 72, the PEP 8
     recommendation.

   - Issue #21284(23): Paragraph reformat test passes after user changes
     reformat width.

   - Issue #17654(24): Ensure IDLE menus are customized properly on OS X
     for non-framework builds and for all variants of Tk.

   - Issue #23180(25): Rename IDLE "Windows" menu item to "Window".
     Patch by Al Sweigart.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/20577

   (2) https://bugs.python.org/16893

   (3) https://bugs.python.org/3068

   (4) https://bugs.python.org/16233

   (5) https://bugs.python.org/4832

   (6) https://bugs.python.org/21986

   (7) https://bugs.python.org/17390

   (8) https://bugs.python.org/14105

   (9) https://bugs.python.org/17172

   (10) https://bugs.python.org/21765

   (11) https://bugs.python.org/21940

   (12) https://bugs.python.org/18592

   (13) https://bugs.python.org/21694

   (14) https://bugs.python.org/21686

   (15) https://bugs.python.org/12387

   (16) https://bugs.python.org/21695

   (17) https://bugs.python.org/18910

   (18) https://bugs.python.org/18292

   (19) https://bugs.python.org/18409

   (20) https://bugs.python.org/21477

   (21) https://bugs.python.org/18104

   (22) https://bugs.python.org/21139

   (23) https://bugs.python.org/21284

   (24) https://bugs.python.org/17654

   (25) https://bugs.python.org/23180


File: python.info,  Node: Build<10>,  Next: C API<4>,  Prev: IDLE<7>,  Up: Python 3 5 alpha 1

1.16.16.4 Build
...............

   - Issue #15506(1): Use standard PKG_PROG_PKG_CONFIG autoconf macro in
     the configure script.

   - Issue #22935(2): Allow the ssl module to be compiled if openssl
     doesn’t support SSL 3.

   - Issue #22592(3): Drop support of the Borland C compiler to build
     Python.  The distutils module still supports it to build
     extensions.

   - Issue #22591(4): Drop support of MS-DOS, especially of the DJGPP
     compiler (MS-DOS port of GCC).

   - Issue #16537(5): Check whether self.extensions is empty in
     setup.py.  Patch by Jonathan Hosmer.

   - Issue #22359(6): Remove incorrect uses of recursive make.  Patch by
     Jonas Wagner.

   - Issue #21958(7): Define HAVE_ROUND when building with Visual Studio
     2013 and above.  Patch by Zachary Turner.

   - Issue #18093(8): the programs that embed the CPython runtime are
     now in a separate "Programs" directory, rather than being kept in
     the Modules directory.

   - Issue #15759(9): "make suspicious", "make linkcheck" and "make
     doctest" in Doc/ now display special message when and only when
     there are failures.

   - Issue #21141(10): The Windows build process no longer attempts to
     find Perl, instead relying on OpenSSL source being configured and
     ready to build.  The ‘PCbuild\build_ssl.py’ script has been
     re-written and re-named to ‘PCbuild\prepare_ssl.py’, and takes care
     of configuring OpenSSL source for both 32 and 64 bit platforms.
     OpenSSL sources obtained from svn.python.org will always be
     pre-configured and ready to build.

   - Issue #21037(11): Add a build option to enable AddressSanitizer
     support.

   - Issue #19962(12): The Windows build process now creates
     "python.bat" in the root of the source tree, which passes all
     arguments through to the most recently built interpreter.

   - Issue #21285(13): Refactor and fix curses configure check to always
     search in a ncursesw directory.

   - Issue #15234(14): For BerkelyDB and Sqlite, only add the found
     library and include directories if they aren’t already being
     searched.  This avoids an explicit runtime library dependency.

   - Issue #17861(15): Tools/scripts/generate_opcode_h.py automatically
     regenerates Include/opcode.h from Lib/opcode.py if the later gets
     any change.

   - Issue #20644(16): OS X installer build support for documentation
     build changes in 3.4.1: assume externally supplied sphinx-build is
     available in /usr/bin.

   - Issue #20022(17): Eliminate use of deprecated bundlebuilder in OS X
     builds.

   - Issue #15968(18): Incorporated Tcl, Tk, and Tix builds into the
     Windows build solution.

   - Issue #17095(19): Fix Modules/Setup `shared' support.

   - Issue #21811(20): Anticipated fixes to support OS X versions >
     10.9.

   - Issue #21166(21): Prevent possible segfaults and other random
     failures of python –generate-posix-vars in pybuilddir.txt build
     target.

   - Issue #18096(22): Fix library order returned by python-config.

   - Issue #17219(23): Add library build dir for Python extension
     cross-builds.

   - Issue #22919(24): Windows build updated to support VC 14.0 (Visual
     Studio 2015), which will be used for the official release.

   - Issue #21236(25): Build _msi.pyd with cabinet.lib instead of
     fci.lib

   - Issue #17128(26): Use private version of OpenSSL for OS X 10.5+
     installer.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/15506

   (2) https://bugs.python.org/22935

   (3) https://bugs.python.org/22592

   (4) https://bugs.python.org/22591

   (5) https://bugs.python.org/16537

   (6) https://bugs.python.org/22359

   (7) https://bugs.python.org/21958

   (8) https://bugs.python.org/18093

   (9) https://bugs.python.org/15759

   (10) https://bugs.python.org/21141

   (11) https://bugs.python.org/21037

   (12) https://bugs.python.org/19962

   (13) https://bugs.python.org/21285

   (14) https://bugs.python.org/15234

   (15) https://bugs.python.org/17861

   (16) https://bugs.python.org/20644

   (17) https://bugs.python.org/20022

   (18) https://bugs.python.org/15968

   (19) https://bugs.python.org/17095

   (20) https://bugs.python.org/21811

   (21) https://bugs.python.org/21166

   (22) https://bugs.python.org/18096

   (23) https://bugs.python.org/17219

   (24) https://bugs.python.org/22919

   (25) https://bugs.python.org/21236

   (26) https://bugs.python.org/17128


File: python.info,  Node: C API<4>,  Next: Documentation<7>,  Prev: Build<10>,  Up: Python 3 5 alpha 1

1.16.16.5 C API
...............

   - Issue #14203(1): Remove obsolete support for view==NULL in
     PyBuffer_FillInfo(), bytearray_getbuffer(), bytesiobuf_getbuffer()
     and array_buffer_getbuf().  All functions now raise BufferError in
     that case.

   - Issue #22445(2): PyBuffer_IsContiguous() now implements precise
     contiguity tests, compatible with NumPy’s
     NPY_RELAXED_STRIDES_CHECKING compilation flag.  Previously the
     function reported false negatives for corner cases.

   - Issue #22079(3): PyType_Ready() now checks that statically
     allocated type has no dynamically allocated bases.

   - Issue #22453(4): Removed non-documented macro PyObject_REPR().

   - Issue #18395(5): Rename ‘_Py_char2wchar()’ to *note
     Py_DecodeLocale(): 381, rename ‘_Py_wchar2char()’ to *note
     Py_EncodeLocale(): 382, and document these functions.

   - Issue #21233(6): Add new C functions: PyMem_RawCalloc(),
     PyMem_Calloc(), PyObject_Calloc(), _PyObject_GC_Calloc().
     bytes(int) is now using ‘calloc()’ instead of ‘malloc()’ for large
     objects which is faster and use less memory.

   - Issue #20942(7): PyImport_ImportFrozenModuleObject() no longer sets
     __file__ to match what importlib does; this affects
     _frozen_importlib as well as any module loaded using
     imp.init_frozen().

   ---------- Footnotes ----------

   (1) https://bugs.python.org/14203

   (2) https://bugs.python.org/22445

   (3) https://bugs.python.org/22079

   (4) https://bugs.python.org/22453

   (5) https://bugs.python.org/18395

   (6) https://bugs.python.org/21233

   (7) https://bugs.python.org/20942


File: python.info,  Node: Documentation<7>,  Next: Tests<8>,  Prev: C API<4>,  Up: Python 3 5 alpha 1

1.16.16.6 Documentation
.......................

   - Issue #19548(1): Update the codecs module documentation to better
     cover the distinction between text encodings and other codecs,
     together with other clarifications.  Patch by Martin Panter.

   - Issue #22394(2): Doc/Makefile now supports ‘make venv
     PYTHON=../python’ to create a venv for generating the
     documentation, e.g., ‘make html PYTHON=venv/bin/python3’.

   - Issue #21514(3): The documentation of the json module now refers to
     new JSON RFC 7159 instead of obsoleted RFC 4627.

   - Issue #21777(4): The binary sequence methods on bytes and bytearray
     are now documented explicitly, rather than assuming users will be
     able to derive the expected behaviour from the behaviour of the
     corresponding str methods.

   - Issue #6916(5): undocument deprecated asynchat.fifo class.

   - Issue #17386(6): Expanded functionality of the ‘Doc/make.bat’
     script to make it much more comparable to ‘Doc/Makefile’.

   - Issue #21312(7): Update the thread_foobar.h template file to
     include newer threading APIs.  Patch by Jack McCracken.

   - Issue #21043(8): Remove the recommendation for specific CA
     organizations and to mention the ability to load the OS
     certificates.

   - Issue #20765(9): Add missing documentation for PurePath.with_name()
     and PurePath.with_suffix().

   - Issue #19407(10): New package installation and distribution guides
     based on the Python Packaging Authority tools.  Existing guides
     have been retained as legacy links from the distutils docs, as they
     still contain some required reference material for tool developers
     that isn’t recorded anywhere else.

   - Issue #19697(11): Document cases where __main__.__spec__ is None.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/19548

   (2) https://bugs.python.org/22394

   (3) https://bugs.python.org/21514

   (4) https://bugs.python.org/21777

   (5) https://bugs.python.org/6916

   (6) https://bugs.python.org/17386

   (7) https://bugs.python.org/21312

   (8) https://bugs.python.org/21043

   (9) https://bugs.python.org/20765

   (10) https://bugs.python.org/19407

   (11) https://bugs.python.org/19697


File: python.info,  Node: Tests<8>,  Next: Tools/Demos<6>,  Prev: Documentation<7>,  Up: Python 3 5 alpha 1

1.16.16.7 Tests
...............

   - Issue #18982(1): Add tests for CLI of the calendar module.

   - Issue #19548(2): Added some additional checks to test_codecs to
     ensure that statements in the updated documentation remain
     accurate.  Patch by Martin Panter.

   - Issue #22838(3): All test_re tests now work with unittest test
     discovery.

   - Issue #22173(4): Update lib2to3 tests to use unittest test
     discovery.

   - Issue #16000(5): Convert test_curses to use unittest.

   - Issue #21456(6): Skip two tests in test_urllib2net.py if _ssl
     module not present.  Patch by Remi Pointel.

   - Issue #20746(7): Fix test_pdb to run in refleak mode (-R). Patch by
     Xavier de Gaye.

   - Issue #22060(8): test_ctypes has been somewhat cleaned up and
     simplified; it now uses unittest test discovery to find its tests.

   - Issue #22104(9): regrtest.py no longer holds a reference to the
     suite of tests loaded from test modules that don’t define
     test_main().

   - Issue #22111(10): Assorted cleanups in test_imaplib.  Patch by
     Milan Oberkirch.

   - Issue #22002(11): Added ‘load_package_tests’ function to
     test.support and used it to implement/augment test discovery in
     test_asyncio, test_email, test_importlib, test_json, and
     test_tools.

   - Issue #21976(12): Fix test_ssl to accept LibreSSL version strings.
     Thanks to William Orr.

   - Issue #21918(13): Converted test_tools from a module to a package
     containing separate test files for each tested script.

   - Issue #9554(14): Use modern unittest features in test_argparse.
     Initial patch by Denver Coneybeare and Radu Voicilas.

   - Issue #20155(15): Changed HTTP method names in failing tests in
     test_httpservers so that packet filtering software (specifically
     Windows Base Filtering Engine) does not interfere with the
     transaction semantics expected by the tests.

   - Issue #19493(16): Refactored the ctypes test package to skip tests
     explicitly rather than silently.

   - Issue #18492(17): All resources are now allowed when tests are not
     run by regrtest.py.

   - Issue #21634(18): Fix pystone micro-benchmark: use floor division
     instead of true division to benchmark integers instead of floating
     point numbers.  Set pystone version to 1.2.  Patch written by
     Lennart Regebro.

   - Issue #21605(19): Added tests for Tkinter images.

   - Issue #21493(20): Added test for ntpath.expanduser().  Original
     patch by Claudiu Popa.

   - Issue #19925(21): Added tests for the spwd module.  Original patch
     by Vajrasky Kok.

   - Issue #21522(22): Added Tkinter tests for Listbox.itemconfigure(),
     PanedWindow.paneconfigure(), and Menu.entryconfigure().

   - Issue #17756(23): Fix test_code test when run from the installed
     location.

   - Issue #17752(24): Fix distutils tests when run from the installed
     location.

   - Issue #18604(25): Consolidated checks for GUI availability.  All
     platforms now at least check whether Tk can be instantiated when
     the GUI resource is requested.

   - Issue #21275(26): Fix a socket test on KFreeBSD.

   - Issue #21223(27): Pass test_site/test_startup_imports when some of
     the extensions are built as builtins.

   - Issue #20635(28): Added tests for Tk geometry managers.

   - Add test case for freeze.

   - Issue #20743(29): Fix a reference leak in test_tcl.

   - Issue #21097(30): Move test_namespace_pkgs into test_importlib.

   - Issue #21503(31): Use test_both() consistently in test_importlib.

   - Issue #20939(32): Avoid various network test failures due to new
     redirect of ‘http://www.python.org/’ to ‘https://www.python.org’:
     use ‘http://www.example.com’ instead.

   - Issue #20668(33): asyncio tests no longer rely on tests.txt file.
     (Patch by Vajrasky Kok)

   - Issue #21093(34): Prevent failures of ctypes test_macholib on OS X
     if a copy of libz exists in $HOME/lib or /usr/local/lib.

   - Issue #22770(35): Prevent some Tk segfaults on OS X when running
     gui tests.

   - Issue #23211(36): Workaround test_logging failure on some OS X 10.6
     systems.

   - Issue #23345(37): Prevent test_ssl failures with large OpenSSL
     patch level values (like 0.9.8zc).

   ---------- Footnotes ----------

   (1) https://bugs.python.org/18982

   (2) https://bugs.python.org/19548

   (3) https://bugs.python.org/22838

   (4) https://bugs.python.org/22173

   (5) https://bugs.python.org/16000

   (6) https://bugs.python.org/21456

   (7) https://bugs.python.org/20746

   (8) https://bugs.python.org/22060

   (9) https://bugs.python.org/22104

   (10) https://bugs.python.org/22111

   (11) https://bugs.python.org/22002

   (12) https://bugs.python.org/21976

   (13) https://bugs.python.org/21918

   (14) https://bugs.python.org/9554

   (15) https://bugs.python.org/20155

   (16) https://bugs.python.org/19493

   (17) https://bugs.python.org/18492

   (18) https://bugs.python.org/21634

   (19) https://bugs.python.org/21605

   (20) https://bugs.python.org/21493

   (21) https://bugs.python.org/19925

   (22) https://bugs.python.org/21522

   (23) https://bugs.python.org/17756

   (24) https://bugs.python.org/17752

   (25) https://bugs.python.org/18604

   (26) https://bugs.python.org/21275

   (27) https://bugs.python.org/21223

   (28) https://bugs.python.org/20635

   (29) https://bugs.python.org/20743

   (30) https://bugs.python.org/21097

   (31) https://bugs.python.org/21503

   (32) https://bugs.python.org/20939

   (33) https://bugs.python.org/20668

   (34) https://bugs.python.org/21093

   (35) https://bugs.python.org/22770

   (36) https://bugs.python.org/23211

   (37) https://bugs.python.org/23345


File: python.info,  Node: Tools/Demos<6>,  Next: Windows<5>,  Prev: Tests<8>,  Up: Python 3 5 alpha 1

1.16.16.8 Tools/Demos
.....................

   - Issue #22314(1): pydoc now works when the LINES environment
     variable is set.

   - Issue #22615(2): Argument Clinic now supports the "type" argument
     for the int converter.  This permits using the int converter with
     enums and typedefs.

   - Issue #20076(3): The makelocalealias.py script no longer ignores
     UTF-8 mapping.

   - Issue #20079(4): The makelocalealias.py script now can parse the
     SUPPORTED file from glibc sources and supports command line options
     for source paths.

   - Issue #22201(5): Command-line interface of the zipfile module now
     correctly extracts ZIP files with directory entries.  Patch by Ryan
     Wilson.

   - Issue #22120(6): For functions using an unsigned integer return
     converter, Argument Clinic now generates a cast to that type for
     the comparison to -1 in the generated code.  (This supresses a
     compilation warning.)

   - Issue #18974(7): Tools/scripts/diff.py now uses argparse instead of
     optparse.

   - Issue #21906(8): Make Tools/scripts/md5sum.py work in Python 3.
     Patch by Zachary Ware.

   - Issue #21629(9): Fix Argument Clinic’s "–converters" feature.

   - Add support for ‘yield from’ to 2to3.

   - Add support for the PEP 465 matrix multiplication operator to 2to3.

   - Issue #16047(10): Fix module exception list and __file__ handling
     in freeze.  Patch by Meador Inge.

   - Issue #11824(11): Consider ABI tags in freeze.  Patch by Meador
     Inge.

   - Issue #20535(12): PYTHONWARNING no longer affects the run_tests.py
     script.  Patch by Arfrever Frehtes Taifersar Arahesis.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/22314

   (2) https://bugs.python.org/22615

   (3) https://bugs.python.org/20076

   (4) https://bugs.python.org/20079

   (5) https://bugs.python.org/22201

   (6) https://bugs.python.org/22120

   (7) https://bugs.python.org/18974

   (8) https://bugs.python.org/21906

   (9) https://bugs.python.org/21629

   (10) https://bugs.python.org/16047

   (11) https://bugs.python.org/11824

   (12) https://bugs.python.org/20535


File: python.info,  Node: Windows<5>,  Prev: Tools/Demos<6>,  Up: Python 3 5 alpha 1

1.16.16.9 Windows
.................

   - Issue #23260(1): Update Windows installer

   - The bundled version of Tcl/Tk has been updated to 8.6.3.  The most
     visible result of this change is the addition of new native file
     dialogs when running on Windows Vista or newer.  See Tcl/Tk’s TIP
     432 for more information.  Also, this version of Tcl/Tk includes
     support for Windows 10.

   - Issue #17896(2): The Windows build scripts now expect external
     library sources to be in ‘PCbuild\..\externals’ rather than
     ‘PCbuild\..\..’.

   - Issue #17717(3): The Windows build scripts now use a copy of NASM
     pulled from svn.python.org to build OpenSSL.

   - Issue #21907(4): Improved the batch scripts provided for building
     Python.

   - Issue #22644(5): The bundled version of OpenSSL has been updated to
     1.0.1j.

   - Issue #10747(6): Use versioned labels in the Windows start menu.
     Patch by Olive Kilburn.

   - Issue #22980(7): .pyd files with a version and platform tag (for
     example, ".cp35-win32.pyd") will now be loaded in preference to
     those without tags.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/23260

   (2) https://bugs.python.org/17896

   (3) https://bugs.python.org/17717

   (4) https://bugs.python.org/21907

   (5) https://bugs.python.org/22644

   (6) https://bugs.python.org/10747

   (7) https://bugs.python.org/22980

