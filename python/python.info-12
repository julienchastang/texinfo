This is python.info, produced by makeinfo version 6.0 from python.texi.

     Python 3.6.0a0, May 06, 2016

     Georg Brandl

     Copyright © 2001-2016, Python Software Foundation

INFO-DIR-SECTION Documentation tools
START-INFO-DIR-ENTRY
* Python: (python.info). The Python Programming Language
END-INFO-DIR-ENTRY


   Generated by Sphinx 1.4.1.


File: python.info,  Node: Python Specific Encodings,  Next: encodings idna --- Internationalized Domain Names in Applications,  Prev: Standard Encodings,  Up: codecs --- Codec registry and base classes

5.7.2.14 Python Specific Encodings
..................................

A number of predefined codecs are specific to Python, so their codec
names have no meaning outside Python.  These are listed in the tables
below based on the expected input and output types (note that while text
encodings are the most common use case for codecs, the underlying codec
infrastructure supports arbitrary data transforms rather than just text
encodings).  For asymmetric codecs, the stated purpose describes the
encoding direction.

* Menu:

* Text Encodings:: 
* Binary Transforms:: 
* Text Transforms:: 


File: python.info,  Node: Text Encodings,  Next: Binary Transforms,  Up: Python Specific Encodings

5.7.2.15 Text Encodings
.......................

The following codecs provide *note str: 25a. to *note bytes: 1db.
encoding and *note bytes-like object: 36b. to *note str: 25a. decoding,
similar to the Unicode text encodings.

Codec                    Aliases       Purpose
                                       
-----------------------------------------------------------------------
                                       
idna                                   Implements RFC 3490(1), see
                                       also
                                       *note encodings.idna: 75.
                                       Only ‘errors='strict'’ is
                                       supported.
                                       
                                       
mbcs                     dbcs          Windows only: Encode operand
                                       according to the ANSI
                                       codepage (CP_ACP)
                                       
                                       
palmos                                 Encoding of PalmOS 3.5
                                       
                                       
punycode                               Implements RFC 3492(2).
                                       Stateful codecs are not
                                       supported.
                                       
                                       
raw_unicode_escape                     Latin-1 encoding with
                                       ‘\uXXXX’ and ‘\UXXXXXXXX’ for
                                       other code points.  Existing
                                       backslashes are not escaped
                                       in any way.  It is used in
                                       the Python pickle protocol.
                                       
                                       
undefined                              Raise an exception for all
                                       conversions, even empty
                                       strings.  The error handler
                                       is ignored.
                                       
                                       
unicode_escape                         Encoding suitable as the
                                       contents of a Unicode literal
                                       in ASCII-encoded Python
                                       source code, except that
                                       quotes are not escaped.
                                       Decodes from Latin-1 source
                                       code.  Beware that Python
                                       source code actually uses
                                       UTF-8 by default.
                                       
                                       
unicode_internal                       Return the internal
                                       representation of the
                                       operand.  Stateful codecs are
                                       not supported.
                                       
                                       Deprecated since version 3.3:
                                       This representation is
                                       obsoleted by PEP 393(3).
                                       

   ---------- Footnotes ----------

   (1) https://tools.ietf.org/html/rfc3490.html

   (2) https://tools.ietf.org/html/rfc3492.html

   (3) https://www.python.org/dev/peps/pep-0393


File: python.info,  Node: Binary Transforms,  Next: Text Transforms,  Prev: Text Encodings,  Up: Python Specific Encodings

5.7.2.16 Binary Transforms
..........................

The following codecs provide binary transforms: *note bytes-like object:
36b. to *note bytes: 1db. mappings.  They are not supported by *note
bytes.decode(): 89e. (which only produces *note str: 25a. output).

Codec                      Aliases                Purpose                            Encoder / decoder
                                                                                     
------------------------------------------------------------------------------------------------------------------------
                                                                                     
base64_codec (1)           base64, base_64        Convert operand to multiline       *note base64.encodebytes(): 1225.
                                                  MIME base64 (the result always     /
                                                  includes a trailing ‘'\n'’)        *note base64.decodebytes(): 1226.
                                                                                     
                                                  Changed in version 3.4: accepts
                                                  any
                                                  *note bytes-like object: 36b. as
                                                  input for encoding and decoding
                                                  
                                                                                     
bz2_codec                  bz2                    Compress the operand using bz2     *note bz2.compress(): 1227. /
                                                                                     *note bz2.decompress(): 5fd.
                                                                                     
                                                                                     
hex_codec                  hex                    Convert operand to hexadecimal     *note binascii.b2a_hex(): 1228.
                                                  representation, with two digits    /
                                                  per byte                           *note binascii.a2b_hex(): 1229.
                                                                                     
                                                                                     
quopri_codec               quopri,                Convert operand to MIME quoted     *note quopri.encode(): 122a.
                           quotedprintable,       printable                          with ‘quotetabs=True’ /
                           quoted_printable                                          *note quopri.decode(): 122b.
                                                                                     
                                                                                     
uu_codec                   uu                     Convert the operand using          *note uu.encode(): 122c. /
                                                  uuencode                           *note uu.decode(): 122d.
                                                                                     
                                                                                     
zlib_codec                 zip, zlib              Compress the operand using gzip    *note zlib.compress(): 17d. /
                                                                                     *note zlib.decompress(): 122e.
                                                                                     

New in version 3.2: Restoration of the binary transforms.

Changed in version 3.4: Restoration of the aliases for the binary
transforms.

   ---------- Footnotes ----------

   (1) In addition to *note bytes-like objects: 36b, ‘'base64_codec'’
also accepts ASCII-only instances of *note str: 25a. for decoding


File: python.info,  Node: Text Transforms,  Prev: Binary Transforms,  Up: Python Specific Encodings

5.7.2.17 Text Transforms
........................

The following codec provides a text transform: a *note str: 25a. to
*note str: 25a. mapping.  It is not supported by *note str.encode():
89d. (which only produces *note bytes: 1db. output).

Codec                    Aliases       Purpose
                                       
-----------------------------------------------------------------------
                                       
rot_13                   rot13         Returns the Caesar-cypher
                                       encryption of the operand
                                       

New in version 3.2: Restoration of the ‘rot_13’ text transform.

Changed in version 3.4: Restoration of the ‘rot13’ alias.


File: python.info,  Node: encodings idna --- Internationalized Domain Names in Applications,  Next: encodings mbcs --- Windows ANSI codepage,  Prev: Python Specific Encodings,  Up: codecs --- Codec registry and base classes

5.7.2.18 ‘encodings.idna’ — Internationalized Domain Names in Applications
..........................................................................

This module implements RFC 3490(1) (Internationalized Domain Names in
Applications) and RFC 3492(2) (Nameprep: A Stringprep Profile for
Internationalized Domain Names (IDN)). It builds upon the ‘punycode’
encoding and *note stringprep: f5.

These RFCs together define a protocol to support non-ASCII characters in
domain names.  A domain name containing non-ASCII characters (such as
‘www.Alliancefrançaise.nu’) is converted into an ASCII-compatible
encoding (ACE, such as ‘www.xn--alliancefranaise-npb.nu’).  The ACE form
of the domain name is then used in all places where arbitrary characters
are not allowed by the protocol, such as DNS queries, HTTP ‘Host’
fields, and so on.  This conversion is carried out in the application;
if possible invisible to the user: The application should transparently
convert Unicode domain labels to IDNA on the wire, and convert back ACE
labels to Unicode before presenting them to the user.

Python supports this conversion in several ways: the ‘idna’ codec
performs conversion between Unicode and ACE, separating an input string
into labels based on the separator characters defined in section 3.1(3)
(1) of RFC 3490(4) and converting each label to ACE as required, and
conversely separating an input byte string into labels based on the ‘.’
separator and converting any ACE labels found into unicode.
Furthermore, the *note socket: ed. module transparently converts Unicode
host names to ACE, so that applications need not be concerned about
converting host names themselves when they pass them to the socket
module.  On top of that, modules that have host names as function
parameters, such as *note http.client: 93. and *note ftplib: 83, accept
Unicode host names (*note http.client: 93. then also transparently sends
an IDNA hostname in the ‘Host’ field if it sends that field at all).

When receiving host names from the wire (such as in reverse name
lookup), no automatic conversion to Unicode is performed: Applications
wishing to present such host names to the user should decode them to
Unicode.

The module *note encodings.idna: 75. also implements the nameprep
procedure, which performs certain normalizations on host names, to
achieve case-insensitivity of international domain names, and to unify
similar characters.  The nameprep functions can be used directly if
desired.

 -- Function: encodings.idna.nameprep (label)

     Return the nameprepped version of `label'.  The implementation
     currently assumes query strings, so ‘AllowUnassigned’ is true.

 -- Function: encodings.idna.ToASCII (label)

     Convert a label to ASCII, as specified in RFC 3490(5).
     ‘UseSTD3ASCIIRules’ is assumed to be false.

 -- Function: encodings.idna.ToUnicode (label)

     Convert a label to Unicode, as specified in RFC 3490(6).

   ---------- Footnotes ----------

   (1) https://tools.ietf.org/html/rfc3490.html

   (2) https://tools.ietf.org/html/rfc3492.html

   (3) http://tools.ietf.org/html/rfc3490#section-3.1

   (4) https://tools.ietf.org/html/rfc3490.html

   (5) https://tools.ietf.org/html/rfc3490.html

   (6) https://tools.ietf.org/html/rfc3490.html


File: python.info,  Node: encodings mbcs --- Windows ANSI codepage,  Next: encodings utf_8_sig --- UTF-8 codec with BOM signature,  Prev: encodings idna --- Internationalized Domain Names in Applications,  Up: codecs --- Codec registry and base classes

5.7.2.19 ‘encodings.mbcs’ — Windows ANSI codepage
.................................................

Encode operand according to the ANSI codepage (CP_ACP).

Availability: Windows only.

Changed in version 3.3: Support any error handler.

Changed in version 3.2: Before 3.2, the `errors' argument was ignored;
‘'replace'’ was always used to encode, and ‘'ignore'’ to decode.


File: python.info,  Node: encodings utf_8_sig --- UTF-8 codec with BOM signature,  Prev: encodings mbcs --- Windows ANSI codepage,  Up: codecs --- Codec registry and base classes

5.7.2.20 ‘encodings.utf_8_sig’ — UTF-8 codec with BOM signature
...............................................................

This module implements a variant of the UTF-8 codec: On encoding a UTF-8
encoded BOM will be prepended to the UTF-8 encoded bytes.  For the
stateful encoder this is only done once (on the first write to the byte
stream).  For decoding an optional UTF-8 encoded BOM at the start of the
data will be skipped.


File: python.info,  Node: Data Types,  Next: Numeric and Mathematical Modules,  Prev: Binary Data Services,  Up: The Python Standard Library

5.8 Data Types
==============

The modules described in this chapter provide a variety of specialized
data types such as dates and times, fixed-type arrays, heap queues,
synchronized queues, and sets.

Python also provides some built-in data types, in particular, *note
dict: 3b0, *note list: 25d, *note set: 7be. and *note frozenset: 84c,
and *note tuple: 25c.  The *note str: 25a. class is used to hold Unicode
strings, and the *note bytes: 1db. class is used to hold binary data.

The following modules are documented in this chapter:

* Menu:

* datetime: datetime --- Basic date and time types. Basic date and time types
* calendar: calendar --- General calendar-related functions. General calendar-related functions
* collections: collections --- Container datatypes. Container datatypes
* collections.abc: collections abc --- Abstract Base Classes for Containers. Abstract Base Classes for Containers
* heapq: heapq --- Heap queue algorithm. Heap queue algorithm
* bisect: bisect --- Array bisection algorithm. Array bisection algorithm
* array: array --- Efficient arrays of numeric values. Efficient arrays of numeric values
* weakref: weakref --- Weak references. Weak references
* types: types --- Dynamic type creation and names for built-in types. Dynamic type creation and names for built-in types
* copy: copy --- Shallow and deep copy operations. Shallow and deep copy operations
* pprint: pprint --- Data pretty printer. Data pretty printer
* reprlib: reprlib --- Alternate repr implementation. Alternate repr() implementation
* enum: enum --- Support for enumerations. Support for enumerations


File: python.info,  Node: datetime --- Basic date and time types,  Next: calendar --- General calendar-related functions,  Up: Data Types

5.8.1 ‘datetime’ — Basic date and time types
--------------------------------------------

`Source code:' Lib/datetime.py(1)

The *note datetime: 2f. module supplies classes for manipulating dates
and times in both simple and complex ways.  While date and time
arithmetic is supported, the focus of the implementation is on efficient
attribute extraction for output formatting and manipulation.  For
related functionality, see also the *note time: 107. and *note calendar:
15. modules.

There are two kinds of date and time objects: "naive" and "aware".

An aware object has sufficient knowledge of applicable algorithmic and
political time adjustments, such as time zone and daylight saving time
information, to locate itself relative to other aware objects.  An aware
object is used to represent a specific moment in time that is not open
to interpretation (2).

A naive object does not contain enough information to unambiguously
locate itself relative to other date/time objects.  Whether a naive
object represents Coordinated Universal Time (UTC), local time, or time
in some other timezone is purely up to the program, just like it is up
to the program whether a particular number represents metres, miles, or
mass.  Naive objects are easy to understand and to work with, at the
cost of ignoring some aspects of reality.

For applications requiring aware objects, *note datetime: 60c. and *note
time: 3a8. objects have an optional time zone information attribute,
‘tzinfo’, that can be set to an instance of a subclass of the abstract
*note tzinfo: 7ad. class.  These *note tzinfo: 7ad. objects capture
information about the offset from UTC time, the time zone name, and
whether Daylight Saving Time is in effect.  Note that only one concrete
*note tzinfo: 7ad. class, the *note timezone: 62d. class, is supplied by
the *note datetime: 2f. module.  The *note timezone: 62d. class can
represent simple timezones with fixed offset from UTC, such as UTC
itself or North American EST and EDT timezones.  Supporting timezones at
deeper levels of detail is up to the application.  The rules for time
adjustment across the world are more political than rational, change
frequently, and there is no standard suitable for every application
aside from UTC.

The *note datetime: 2f. module exports the following constants:

 -- Data: datetime.MINYEAR

     The smallest year number allowed in a *note date: 9c0. or *note
     datetime: 60c. object.  *note MINYEAR: 123b. is ‘1’.

 -- Data: datetime.MAXYEAR

     The largest year number allowed in a *note date: 9c0. or *note
     datetime: 60c. object.  *note MAXYEAR: bb8. is ‘9999’.

See also
........

Module *note calendar: 15.

     General calendar related functions.

Module *note time: 107.

     Time access and conversions.

* Menu:

* Available Types:: 
* timedelta Objects:: 
* date Objects:: 
* datetime Objects:: 
* time Objects:: 
* tzinfo Objects:: 
* timezone Objects:: 
* strftime() and strptime() Behavior: strftime and strptime Behavior. 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/datetime.py

   (2) If, that is, we ignore the effects of Relativity


File: python.info,  Node: Available Types,  Next: timedelta Objects,  Up: datetime --- Basic date and time types

5.8.1.1 Available Types
.......................

 -- Class: datetime.date

     An idealized naive date, assuming the current Gregorian calendar
     always was, and always will be, in effect.  Attributes: *note year:
     123d, *note month: 123e, and *note day: 123f.

 -- Class: datetime.time

     An idealized time, independent of any particular day, assuming that
     every day has exactly 24*60*60 seconds (there is no notion of "leap
     seconds" here).  Attributes: *note hour: 1240, *note minute: 1241,
     *note second: 1242, *note microsecond: 1243, and *note tzinfo:
     1244.

 -- Class: datetime.datetime

     A combination of a date and a time.  Attributes: *note year: 1245,
     *note month: 1246, *note day: 1247, *note hour: 1248, *note minute:
     1249, *note second: 124a, *note microsecond: 124b, and *note
     tzinfo: 124c.

 -- Class: datetime.timedelta

     A duration expressing the difference between two *note date: 9c0,
     *note time: 3a8, or *note datetime: 60c. instances to microsecond
     resolution.

 -- Class: datetime.tzinfo

     An abstract base class for time zone information objects.  These
     are used by the *note datetime: 60c. and *note time: 3a8. classes
     to provide a customizable notion of time adjustment (for example,
     to account for time zone and/or daylight saving time).

 -- Class: datetime.timezone

     A class that implements the *note tzinfo: 7ad. abstract base class
     as a fixed offset from the UTC.

     New in version 3.2.

Objects of these types are immutable.

Objects of the *note date: 9c0. type are always naive.

An object of type *note time: 3a8. or *note datetime: 60c. may be naive
or aware.  A *note datetime: 60c. object `d' is aware if ‘d.tzinfo’ is
not ‘None’ and ‘d.tzinfo.utcoffset(d)’ does not return ‘None’.  If
‘d.tzinfo’ is ‘None’, or if ‘d.tzinfo’ is not ‘None’ but
‘d.tzinfo.utcoffset(d)’ returns ‘None’, `d' is naive.  A *note time:
3a8. object `t' is aware if ‘t.tzinfo’ is not ‘None’ and
‘t.tzinfo.utcoffset(None)’ does not return ‘None’.  Otherwise, `t' is
naive.

The distinction between naive and aware doesn’t apply to *note
timedelta: 7ae. objects.

Subclass relationships:

     object
         timedelta
         tzinfo
             timezone
         time
         date
             datetime


File: python.info,  Node: timedelta Objects,  Next: date Objects,  Prev: Available Types,  Up: datetime --- Basic date and time types

5.8.1.2 ‘timedelta’ Objects
...........................

A *note timedelta: 7ae. object represents a duration, the difference
between two dates or times.

 -- Class: datetime.timedelta (days=0, seconds=0, microseconds=0,
          milliseconds=0, minutes=0, hours=0, weeks=0)

     All arguments are optional and default to ‘0’.  Arguments may be
     integers or floats, and may be positive or negative.

     Only `days', `seconds' and `microseconds' are stored internally.
     Arguments are converted to those units:

        * A millisecond is converted to 1000 microseconds.

        * A minute is converted to 60 seconds.

        * An hour is converted to 3600 seconds.

        * A week is converted to 7 days.

     and days, seconds and microseconds are then normalized so that the
     representation is unique, with

        * ‘0 <= microseconds < 1000000’

        * ‘0 <= seconds < 3600*24’ (the number of seconds in one day)

        * ‘-999999999 <= days <= 999999999’

     If any argument is a float and there are fractional microseconds,
     the fractional microseconds left over from all arguments are
     combined and their sum is rounded to the nearest microsecond using
     round-half-to-even tiebreaker.  If no argument is a float, the
     conversion and normalization processes are exact (no information is
     lost).

     If the normalized value of days lies outside the indicated range,
     *note OverflowError: 578. is raised.

     Note that normalization of negative values may be surprising at
     first.  For example,

          >>> from datetime import timedelta
          >>> d = timedelta(microseconds=-1)
          >>> (d.days, d.seconds, d.microseconds)
          (-1, 86399, 999999)

Class attributes are:

 -- Attribute: timedelta.min

     The most negative *note timedelta: 7ae. object,
     ‘timedelta(-999999999)’.

 -- Attribute: timedelta.max

     The most positive *note timedelta: 7ae. object,
     ‘timedelta(days=999999999, hours=23, minutes=59, seconds=59,
     microseconds=999999)’.

 -- Attribute: timedelta.resolution

     The smallest possible difference between non-equal *note timedelta:
     7ae. objects, ‘timedelta(microseconds=1)’.

Note that, because of normalization, ‘timedelta.max’ > ‘-timedelta.min’.
‘-timedelta.max’ is not representable as a *note timedelta: 7ae. object.

Instance attributes (read-only):

Attribute              Value
                       
------------------------------------------------------------------------
                       
‘days’                 Between -999999999 and 999999999 inclusive
                       
                       
‘seconds’              Between 0 and 86399 inclusive
                       
                       
‘microseconds’         Between 0 and 999999 inclusive
                       

Supported operations:

Operation                            Result
                                     
-----------------------------------------------------------------------------------------
                                     
‘t1 = t2 + t3’                       Sum of `t2' and `t3'.  Afterwards `t1'-`t2' ==
                                     `t3' and `t1'-`t3' == `t2' are true.  (1)
                                     
                                     
‘t1 = t2 - t3’                       Difference of `t2' and `t3'.  Afterwards `t1' ==
                                     `t2' - `t3' and `t2' == `t1' + `t3' are true.
                                     (1)
                                     
                                     
‘t1 = t2 * i or t1 = i * t2’         Delta multiplied by an integer.  Afterwards `t1'
                                     // i == `t2' is true, provided ‘i != 0’.
                                     
                                     
                                     In general, `t1' * i == `t1' * (i-1) + `t1' is
                                     true.  (1)
                                     
                                     
‘t1 = t2 * f or t1 = f * t2’         Delta multiplied by a float.  The result is
                                     rounded to the nearest multiple of
                                     timedelta.resolution using round-half-to-even.
                                     
                                     
‘f = t2 / t3’                        Division (3) of `t2' by `t3'.  Returns a
                                     *note float: 57a. object.
                                     
                                     
‘t1 = t2 / f or t1 = t2 / i’         Delta divided by a float or an int.  The result
                                     is rounded to the nearest multiple of
                                     timedelta.resolution using round-half-to-even.
                                     
                                     
‘t1 = t2 // i’ or ‘t1 = t2 // t3’    The floor is computed and the remainder (if any)
                                     is thrown away.  In the second case, an integer
                                     is returned.  (3)
                                     
                                     
‘t1 = t2 % t3’                       The remainder is computed as a
                                     *note timedelta: 7ae. object.  (3)
                                     
                                     
‘q, r = divmod(t1, t2)’              Computes the quotient and the remainder: ‘q = t1
                                     // t2’ (3) and ‘r = t1 % t2’.  q is an integer
                                     and r is a *note timedelta: 7ae. object.
                                     
                                     
‘+t1’                                Returns a *note timedelta: 7ae. object with the
                                     same value.  (2)
                                     
                                     
‘-t1’                                equivalent to *note timedelta: 7ae.(-`t1.days',
                                     -`t1.seconds', -`t1.microseconds'), and to `t1'*
                                     -1.  (1)(4)
                                     
                                     
‘abs(t)’                             equivalent to +`t' when ‘t.days >= 0’, and to
                                     -`t' when ‘t.days < 0’.  (2)
                                     
                                     
‘str(t)’                             Returns a string in the form ‘[D day[s],
                                     ][H]H:MM:SS[.UUUUUU]’, where D is negative for
                                     negative ‘t’.  (5)
                                     
                                     
‘repr(t)’                            Returns a string in the form
                                     ‘datetime.timedelta(D[, S[, U]])’, where D is
                                     negative for negative ‘t’.  (5)
                                     

Notes:

  1. This is exact, but may overflow.

  2. This is exact, and cannot overflow.

  3. Division by 0 raises *note ZeroDivisionError: c6a.

  4. -`timedelta.max' is not representable as a *note timedelta: 7ae.
     object.

  5. String representations of *note timedelta: 7ae. objects are
     normalized similarly to their internal representation.  This leads
     to somewhat unusual results for negative timedeltas.  For example:

          >>> timedelta(hours=-5)
          datetime.timedelta(-1, 68400)
          >>> print(_)
          -1 day, 19:00:00

In addition to the operations listed above *note timedelta: 7ae. objects
support certain additions and subtractions with *note date: 9c0. and
*note datetime: 60c. objects (see below).

Changed in version 3.2: Floor division and true division of a *note
timedelta: 7ae. object by another *note timedelta: 7ae. object are now
supported, as are remainder operations and the *note divmod(): e2c.
function.  True division and multiplication of a *note timedelta: 7ae.
object by a *note float: 57a. object are now supported.

Comparisons of *note timedelta: 7ae. objects are supported with the
*note timedelta: 7ae. object representing the smaller duration
considered to be the smaller timedelta.  In order to stop mixed-type
comparisons from falling back to the default comparison by object
address, when a *note timedelta: 7ae. object is compared to an object of
a different type, *note TypeError: 562. is raised unless the comparison
is ‘==’ or ‘!=’.  The latter cases return *note False: 60d. or *note
True: 9ff, respectively.

*note timedelta: 7ae. objects are *note hashable: de9. (usable as
dictionary keys), support efficient pickling, and in Boolean contexts, a
*note timedelta: 7ae. object is considered to be true if and only if it
isn’t equal to ‘timedelta(0)’.

Instance methods:

 -- Method: timedelta.total_seconds ()

     Return the total number of seconds contained in the duration.
     Equivalent to ‘td / timedelta(seconds=1)’.

     Note that for very large time intervals (greater than 270 years on
     most platforms) this method will lose microsecond accuracy.

     New in version 3.2.

Example usage:

     >>> from datetime import timedelta
     >>> year = timedelta(days=365)
     >>> another_year = timedelta(weeks=40, days=84, hours=23,
     ...                          minutes=50, seconds=600)  # adds up to 365 days
     >>> year.total_seconds()
     31536000.0
     >>> year == another_year
     True
     >>> ten_years = 10 * year
     >>> ten_years, ten_years.days // 365
     (datetime.timedelta(3650), 10)
     >>> nine_years = ten_years - year
     >>> nine_years, nine_years.days // 365
     (datetime.timedelta(3285), 9)
     >>> three_years = nine_years // 3;
     >>> three_years, three_years.days // 365
     (datetime.timedelta(1095), 3)
     >>> abs(three_years - ten_years) == 2 * three_years + year
     True


File: python.info,  Node: date Objects,  Next: datetime Objects,  Prev: timedelta Objects,  Up: datetime --- Basic date and time types

5.8.1.3 ‘date’ Objects
......................

A *note date: 9c0. object represents a date (year, month and day) in an
idealized calendar, the current Gregorian calendar indefinitely extended
in both directions.  January 1 of year 1 is called day number 1, January
2 of year 1 is called day number 2, and so on.  This matches the
definition of the "proleptic Gregorian" calendar in Dershowitz and
Reingold’s book Calendrical Calculations, where it’s the base calendar
for all computations.  See the book for algorithms for converting
between proleptic Gregorian ordinals and many other calendar systems.

 -- Class: datetime.date (year, month, day)

     All arguments are required.  Arguments may be integers, in the
     following ranges:

        * ‘MINYEAR <= year <= MAXYEAR’

        * ‘1 <= month <= 12’

        * ‘1 <= day <= number of days in the given month and year’

     If an argument outside those ranges is given, *note ValueError:
     19c. is raised.

Other constructors, all class methods:

 -- Class Method: date.today ()

     Return the current local date.  This is equivalent to
     ‘date.fromtimestamp(time.time())’.

 -- Class Method: date.fromtimestamp (timestamp)

     Return the local date corresponding to the POSIX timestamp, such as
     is returned by *note time.time(): 6a5.  This may raise *note
     OverflowError: 578, if the timestamp is out of the range of values
     supported by the platform C ‘localtime()’ function, and *note
     OSError: 4b6. on ‘localtime()’ failure.  It’s common for this to be
     restricted to years from 1970 through 2038.  Note that on non-POSIX
     systems that include leap seconds in their notion of a timestamp,
     leap seconds are ignored by *note fromtimestamp(): 1255.

     Changed in version 3.3: Raise *note OverflowError: 578. instead of
     *note ValueError: 19c. if the timestamp is out of the range of
     values supported by the platform C ‘localtime()’ function.  Raise
     *note OSError: 4b6. instead of *note ValueError: 19c. on
     ‘localtime()’ failure.

 -- Class Method: date.fromordinal (ordinal)

     Return the date corresponding to the proleptic Gregorian ordinal,
     where January 1 of year 1 has ordinal 1.  *note ValueError: 19c. is
     raised unless ‘1 <= ordinal <= date.max.toordinal()’.  For any date
     `d', ‘date.fromordinal(d.toordinal()) == d’.

Class attributes:

 -- Attribute: date.min

     The earliest representable date, ‘date(MINYEAR, 1, 1)’.

 -- Attribute: date.max

     The latest representable date, ‘date(MAXYEAR, 12, 31)’.

 -- Attribute: date.resolution

     The smallest possible difference between non-equal date objects,
     ‘timedelta(days=1)’.

Instance attributes (read-only):

 -- Attribute: date.year

     Between *note MINYEAR: 123b. and *note MAXYEAR: bb8. inclusive.

 -- Attribute: date.month

     Between 1 and 12 inclusive.

 -- Attribute: date.day

     Between 1 and the number of days in the given month of the given
     year.

Supported operations:

Operation                           Result
                                    
---------------------------------------------------------------------------------------
                                    
‘date2 = date1 + timedelta’         `date2' is ‘timedelta.days’ days removed from
                                    `date1'.  (1)
                                    
                                    
‘date2 = date1 - timedelta’         Computes `date2' such that ‘date2 + timedelta ==
                                    date1’.  (2)
                                    
                                    
‘timedelta = date1 - date2’         (3)
                                    
                                    
‘date1 < date2’                     `date1' is considered less than `date2' when
                                    `date1' precedes `date2' in time.  (4)
                                    

Notes:

  1. `date2' is moved forward in time if ‘timedelta.days > 0’, or
     backward if ‘timedelta.days < 0’.  Afterward ‘date2 - date1 ==
     timedelta.days’.  ‘timedelta.seconds’ and ‘timedelta.microseconds’
     are ignored.  *note OverflowError: 578. is raised if ‘date2.year’
     would be smaller than *note MINYEAR: 123b. or larger than *note
     MAXYEAR: bb8.

  2. This isn’t quite equivalent to date1 + (-timedelta), because
     -timedelta in isolation can overflow in cases where date1 -
     timedelta does not.  ‘timedelta.seconds’ and
     ‘timedelta.microseconds’ are ignored.

  3. This is exact, and cannot overflow.  timedelta.seconds and
     timedelta.microseconds are 0, and date2 + timedelta == date1 after.

  4. In other words, ‘date1 < date2’ if and only if ‘date1.toordinal() <
     date2.toordinal()’.  In order to stop comparison from falling back
     to the default scheme of comparing object addresses, date
     comparison normally raises *note TypeError: 562. if the other
     comparand isn’t also a *note date: 9c0. object.  However,
     ‘NotImplemented’ is returned instead if the other comparand has a
     ‘timetuple()’ attribute.  This hook gives other kinds of date
     objects a chance at implementing mixed-type comparison.  If not,
     when a *note date: 9c0. object is compared to an object of a
     different type, *note TypeError: 562. is raised unless the
     comparison is ‘==’ or ‘!=’.  The latter cases return *note False:
     60d. or *note True: 9ff, respectively.

Dates can be used as dictionary keys.  In Boolean contexts, all *note
date: 9c0. objects are considered to be true.

Instance methods:

 -- Method: date.replace (year, month, day)

     Return a date with the same value, except for those parameters
     given new values by whichever keyword arguments are specified.  For
     example, if ‘d == date(2002, 12, 31)’, then ‘d.replace(day=26) ==
     date(2002, 12, 26)’.

 -- Method: date.timetuple ()

     Return a *note time.struct_time: 125c. such as returned by *note
     time.localtime(): 125d.  The hours, minutes and seconds are 0, and
     the DST flag is -1.  ‘d.timetuple()’ is equivalent to
     ‘time.struct_time((d.year, d.month, d.day, 0, 0, 0, d.weekday(),
     yday, -1))’, where ‘yday = d.toordinal() - date(d.year, 1,
     1).toordinal() + 1’ is the day number within the current year
     starting with ‘1’ for January 1st.

 -- Method: date.toordinal ()

     Return the proleptic Gregorian ordinal of the date, where January 1
     of year 1 has ordinal 1.  For any *note date: 9c0. object `d',
     ‘date.fromordinal(d.toordinal()) == d’.

 -- Method: date.weekday ()

     Return the day of the week as an integer, where Monday is 0 and
     Sunday is 6.  For example, ‘date(2002, 12, 4).weekday() == 2’, a
     Wednesday.  See also *note isoweekday(): 1260.

 -- Method: date.isoweekday ()

     Return the day of the week as an integer, where Monday is 1 and
     Sunday is 7.  For example, ‘date(2002, 12, 4).isoweekday() == 3’, a
     Wednesday.  See also *note weekday(): 125f, *note isocalendar():
     1261.

 -- Method: date.isocalendar ()

     Return a 3-tuple, (ISO year, ISO week number, ISO weekday).

     The ISO calendar is a widely used variant of the Gregorian
     calendar.  See
     ‘http://www.staff.science.uu.nl/~gent0113/calendar/isocalendar.htm’
     for a good explanation.

     The ISO year consists of 52 or 53 full weeks, and where a week
     starts on a Monday and ends on a Sunday.  The first week of an ISO
     year is the first (Gregorian) calendar week of a year containing a
     Thursday.  This is called week number 1, and the ISO year of that
     Thursday is the same as its Gregorian year.

     For example, 2004 begins on a Thursday, so the first week of ISO
     year 2004 begins on Monday, 29 Dec 2003 and ends on Sunday, 4 Jan
     2004, so that ‘date(2003, 12, 29).isocalendar() == (2004, 1, 1)’
     and ‘date(2004, 1, 4).isocalendar() == (2004, 1, 7)’.

 -- Method: date.isoformat ()

     Return a string representing the date in ISO 8601 format,
     ’YYYY-MM-DD’.  For example, ‘date(2002, 12, 4).isoformat() ==
     '2002-12-04'’.

 -- Method: date.__str__ ()

     For a date `d', ‘str(d)’ is equivalent to ‘d.isoformat()’.

 -- Method: date.ctime ()

     Return a string representing the date, for example ‘date(2002, 12,
     4).ctime() == 'Wed Dec 4 00:00:00 2002'’.  ‘d.ctime()’ is
     equivalent to ‘time.ctime(time.mktime(d.timetuple()))’ on platforms
     where the native C ‘ctime()’ function (which *note time.ctime():
     1265. invokes, but which *note date.ctime(): 1264. does not invoke)
     conforms to the C standard.

 -- Method: date.strftime (format)

     Return a string representing the date, controlled by an explicit
     format string.  Format codes referring to hours, minutes or seconds
     will see 0 values.  For a complete list of formatting directives,
     see *note strftime() and strptime() Behavior: 1266.

 -- Method: date.__format__ (format)

     Same as *note date.strftime(): 15f.  This makes it possible to
     specify a format string for a *note date: 9c0. object in *note
     formatted string literals: 14f. and when using *note str.format():
     14d.  For a complete list of formatting directives, see *note
     strftime() and strptime() Behavior: 1266.

Example of counting days to an event:

     >>> import time
     >>> from datetime import date
     >>> today = date.today()
     >>> today
     datetime.date(2007, 12, 5)
     >>> today == date.fromtimestamp(time.time())
     True
     >>> my_birthday = date(today.year, 6, 24)
     >>> if my_birthday < today:
     ...     my_birthday = my_birthday.replace(year=today.year + 1)
     >>> my_birthday
     datetime.date(2008, 6, 24)
     >>> time_to_birthday = abs(my_birthday - today)
     >>> time_to_birthday.days
     202

Example of working with *note date: 9c0.:

     >>> from datetime import date
     >>> d = date.fromordinal(730920) # 730920th day after 1. 1. 0001
     >>> d
     datetime.date(2002, 3, 11)
     >>> t = d.timetuple()
     >>> for i in t:
     ...     print(i)
     2002                # year
     3                   # month
     11                  # day
     0
     0
     0
     0                   # weekday (0 = Monday)
     70                  # 70th day in the year
     -1
     >>> ic = d.isocalendar()
     >>> for i in ic:
     ...     print(i)
     2002                # ISO year
     11                  # ISO week number
     1                   # ISO day number ( 1 = Monday )
     >>> d.isoformat()
     '2002-03-11'
     >>> d.strftime("%d/%m/%y")
     '11/03/02'
     >>> d.strftime("%A %d. %B %Y")
     'Monday 11. March 2002'
     >>> 'The {1} is {0:%d}, the {2} is {0:%B}.'.format(d, "day", "month")
     'The day is 11, the month is March.'


File: python.info,  Node: datetime Objects,  Next: time Objects,  Prev: date Objects,  Up: datetime --- Basic date and time types

5.8.1.4 ‘datetime’ Objects
..........................

A *note datetime: 60c. object is a single object containing all the
information from a *note date: 9c0. object and a *note time: 3a8.
object.  Like a *note date: 9c0. object, *note datetime: 60c. assumes
the current Gregorian calendar extended in both directions; like a time
object, *note datetime: 60c. assumes there are exactly 3600*24 seconds
in every day.

Constructor:

 -- Class: datetime.datetime (year, month, day, hour=0, minute=0,
          second=0, microsecond=0, tzinfo=None)

     The year, month and day arguments are required.  `tzinfo' may be
     ‘None’, or an instance of a *note tzinfo: 7ad. subclass.  The
     remaining arguments may be integers, in the following ranges:

        * ‘MINYEAR <= year <= MAXYEAR’

        * ‘1 <= month <= 12’

        * ‘1 <= day <= number of days in the given month and year’

        * ‘0 <= hour < 24’

        * ‘0 <= minute < 60’

        * ‘0 <= second < 60’

        * ‘0 <= microsecond < 1000000’

     If an argument outside those ranges is given, *note ValueError:
     19c. is raised.

Other constructors, all class methods:

 -- Class Method: datetime.today ()

     Return the current local datetime, with *note tzinfo: 124c. ‘None’.
     This is equivalent to ‘datetime.fromtimestamp(time.time())’.  See
     also *note now(): 126b, *note fromtimestamp(): 126c.

 -- Class Method: datetime.now (tz=None)

     Return the current local date and time.  If optional argument `tz'
     is ‘None’ or not specified, this is like *note today(): 126a, but,
     if possible, supplies more precision than can be gotten from going
     through a *note time.time(): 6a5. timestamp (for example, this may
     be possible on platforms supplying the C ‘gettimeofday()’
     function).

     If `tz' is not ‘None’, it must be an instance of a *note tzinfo:
     7ad. subclass, and the current date and time are converted to
     `tz'’s time zone.  In this case the result is equivalent to
     ‘tz.fromutc(datetime.utcnow().replace(tzinfo=tz))’.  See also *note
     today(): 126a, *note utcnow(): 126d.

 -- Class Method: datetime.utcnow ()

     Return the current UTC date and time, with *note tzinfo: 124c.
     ‘None’.  This is like *note now(): 126b, but returns the current
     UTC date and time, as a naive *note datetime: 60c. object.  An
     aware current UTC datetime can be obtained by calling
     ‘datetime.now(timezone.utc)’.  See also *note now(): 126b.

 -- Class Method: datetime.fromtimestamp (timestamp, tz=None)

     Return the local date and time corresponding to the POSIX
     timestamp, such as is returned by *note time.time(): 6a5.  If
     optional argument `tz' is ‘None’ or not specified, the timestamp is
     converted to the platform’s local date and time, and the returned
     *note datetime: 60c. object is naive.

     If `tz' is not ‘None’, it must be an instance of a *note tzinfo:
     7ad. subclass, and the timestamp is converted to `tz'’s time zone.
     In this case the result is equivalent to
     ‘tz.fromutc(datetime.utcfromtimestamp(timestamp).replace(tzinfo=tz))’.

     *note fromtimestamp(): 126c. may raise *note OverflowError: 578, if
     the timestamp is out of the range of values supported by the
     platform C ‘localtime()’ or ‘gmtime()’ functions, and *note
     OSError: 4b6. on ‘localtime()’ or ‘gmtime()’ failure.  It’s common
     for this to be restricted to years in 1970 through 2038.  Note that
     on non-POSIX systems that include leap seconds in their notion of a
     timestamp, leap seconds are ignored by *note fromtimestamp(): 126c,
     and then it’s possible to have two timestamps differing by a second
     that yield identical *note datetime: 60c. objects.  See also *note
     utcfromtimestamp(): 126e.

     Changed in version 3.3: Raise *note OverflowError: 578. instead of
     *note ValueError: 19c. if the timestamp is out of the range of
     values supported by the platform C ‘localtime()’ or ‘gmtime()’
     functions.  Raise *note OSError: 4b6. instead of *note ValueError:
     19c. on ‘localtime()’ or ‘gmtime()’ failure.

 -- Class Method: datetime.utcfromtimestamp (timestamp)

     Return the UTC *note datetime: 60c. corresponding to the POSIX
     timestamp, with *note tzinfo: 124c. ‘None’.  This may raise *note
     OverflowError: 578, if the timestamp is out of the range of values
     supported by the platform C ‘gmtime()’ function, and *note OSError:
     4b6. on ‘gmtime()’ failure.  It’s common for this to be restricted
     to years in 1970 through 2038.

     To get an aware *note datetime: 60c. object, call *note
     fromtimestamp(): 126c.:

          datetime.fromtimestamp(timestamp, timezone.utc)

     On the POSIX compliant platforms, it is equivalent to the following
     expression:

          datetime(1970, 1, 1, tzinfo=timezone.utc) + timedelta(seconds=timestamp)

     except the latter formula always supports the full years range:
     between *note MINYEAR: 123b. and *note MAXYEAR: bb8. inclusive.

     Changed in version 3.3: Raise *note OverflowError: 578. instead of
     *note ValueError: 19c. if the timestamp is out of the range of
     values supported by the platform C ‘gmtime()’ function.  Raise
     *note OSError: 4b6. instead of *note ValueError: 19c. on ‘gmtime()’
     failure.

 -- Class Method: datetime.fromordinal (ordinal)

     Return the *note datetime: 60c. corresponding to the proleptic
     Gregorian ordinal, where January 1 of year 1 has ordinal 1.  *note
     ValueError: 19c. is raised unless ‘1 <= ordinal <=
     datetime.max.toordinal()’.  The hour, minute, second and
     microsecond of the result are all 0, and *note tzinfo: 124c. is
     ‘None’.

 -- Class Method: datetime.combine (date, time)

     Return a new *note datetime: 60c. object whose date components are
     equal to the given *note date: 9c0. object’s, and whose time
     components and *note tzinfo: 124c. attributes are equal to the
     given *note time: 3a8. object’s.  For any *note datetime: 60c.
     object `d', ‘d == datetime.combine(d.date(), d.timetz())’.  If date
     is a *note datetime: 60c. object, its time components and *note
     tzinfo: 124c. attributes are ignored.

 -- Class Method: datetime.strptime (date_string, format)

     Return a *note datetime: 60c. corresponding to `date_string',
     parsed according to `format'.  This is equivalent to
     ‘datetime(*(time.strptime(date_string, format)[0:6]))’.  *note
     ValueError: 19c. is raised if the date_string and format can’t be
     parsed by *note time.strptime(): a0b. or if it returns a value
     which isn’t a time tuple.  For a complete list of formatting
     directives, see *note strftime() and strptime() Behavior: 1266.

Class attributes:

 -- Attribute: datetime.min

     The earliest representable *note datetime: 60c, ‘datetime(MINYEAR,
     1, 1, tzinfo=None)’.

 -- Attribute: datetime.max

     The latest representable *note datetime: 60c, ‘datetime(MAXYEAR,
     12, 31, 23, 59, 59, 999999, tzinfo=None)’.

 -- Attribute: datetime.resolution

     The smallest possible difference between non-equal *note datetime:
     60c. objects, ‘timedelta(microseconds=1)’.

Instance attributes (read-only):

 -- Attribute: datetime.year

     Between *note MINYEAR: 123b. and *note MAXYEAR: bb8. inclusive.

 -- Attribute: datetime.month

     Between 1 and 12 inclusive.

 -- Attribute: datetime.day

     Between 1 and the number of days in the given month of the given
     year.

 -- Attribute: datetime.hour

     In ‘range(24)’.

 -- Attribute: datetime.minute

     In ‘range(60)’.

 -- Attribute: datetime.second

     In ‘range(60)’.

 -- Attribute: datetime.microsecond

     In ‘range(1000000)’.

 -- Attribute: datetime.tzinfo

     The object passed as the `tzinfo' argument to the *note datetime:
     60c. constructor, or ‘None’ if none was passed.

Supported operations:

Operation                                   Result
                                            
---------------------------------------------------------------------------------
                                            
‘datetime2 = datetime1 + timedelta’         (1)
                                            
                                            
‘datetime2 = datetime1 - timedelta’         (2)
                                            
                                            
‘timedelta = datetime1 - datetime2’         (3)
                                            
                                            
‘datetime1 < datetime2’                     Compares *note datetime: 60c. to
                                            *note datetime: 60c.  (4)
                                            

  1. datetime2 is a duration of timedelta removed from datetime1, moving
     forward in time if ‘timedelta.days’ > 0, or backward if
     ‘timedelta.days’ < 0.  The result has the same *note tzinfo: 124c.
     attribute as the input datetime, and datetime2 - datetime1 ==
     timedelta after.  *note OverflowError: 578. is raised if
     datetime2.year would be smaller than *note MINYEAR: 123b. or larger
     than *note MAXYEAR: bb8.  Note that no time zone adjustments are
     done even if the input is an aware object.

  2. Computes the datetime2 such that datetime2 + timedelta ==
     datetime1.  As for addition, the result has the same *note tzinfo:
     124c. attribute as the input datetime, and no time zone adjustments
     are done even if the input is aware.  This isn’t quite equivalent
     to datetime1 + (-timedelta), because -timedelta in isolation can
     overflow in cases where datetime1 - timedelta does not.

  3. Subtraction of a *note datetime: 60c. from a *note datetime: 60c.
     is defined only if both operands are naive, or if both are aware.
     If one is aware and the other is naive, *note TypeError: 562. is
     raised.

     If both are naive, or both are aware and have the same *note
     tzinfo: 124c. attribute, the *note tzinfo: 124c. attributes are
     ignored, and the result is a *note timedelta: 7ae. object `t' such
     that ‘datetime2 + t == datetime1’.  No time zone adjustments are
     done in this case.

     If both are aware and have different *note tzinfo: 124c.
     attributes, ‘a-b’ acts as if `a' and `b' were first converted to
     naive UTC datetimes first.  The result is ‘(a.replace(tzinfo=None)
     - a.utcoffset()) - (b.replace(tzinfo=None) - b.utcoffset())’ except
     that the implementation never overflows.

  4. `datetime1' is considered less than `datetime2' when `datetime1'
     precedes `datetime2' in time.

     If one comparand is naive and the other is aware, *note TypeError:
     562. is raised if an order comparison is attempted.  For equality
     comparisons, naive instances are never equal to aware instances.

     If both comparands are aware, and have the same *note tzinfo: 124c.
     attribute, the common *note tzinfo: 124c. attribute is ignored and
     the base datetimes are compared.  If both comparands are aware and
     have different *note tzinfo: 124c. attributes, the comparands are
     first adjusted by subtracting their UTC offsets (obtained from
     ‘self.utcoffset()’).

     Changed in version 3.3: Equality comparisons between naive and
     aware *note datetime: 60c. instances don’t raise *note TypeError:
     562.

          Note: In order to stop comparison from falling back to the
          default scheme of comparing object addresses, datetime
          comparison normally raises *note TypeError: 562. if the other
          comparand isn’t also a *note datetime: 60c. object.  However,
          ‘NotImplemented’ is returned instead if the other comparand
          has a ‘timetuple()’ attribute.  This hook gives other kinds of
          date objects a chance at implementing mixed-type comparison.
          If not, when a *note datetime: 60c. object is compared to an
          object of a different type, *note TypeError: 562. is raised
          unless the comparison is ‘==’ or ‘!=’.  The latter cases
          return *note False: 60d. or *note True: 9ff, respectively.

*note datetime: 60c. objects can be used as dictionary keys.  In Boolean
contexts, all *note datetime: 60c. objects are considered to be true.

Instance methods:

 -- Method: datetime.date ()

     Return *note date: 9c0. object with same year, month and day.

 -- Method: datetime.time ()

     Return *note time: 3a8. object with same hour, minute, second and
     microsecond.  *note tzinfo: 124c. is ‘None’.  See also method *note
     timetz(): 1277.

 -- Method: datetime.timetz ()

     Return *note time: 3a8. object with same hour, minute, second,
     microsecond, and tzinfo attributes.  See also method *note time():
     107.

 -- Method: datetime.replace ([year[, month[, day[, hour[, minute[,
          second[, microsecond[, tzinfo]]]]]]]])

     Return a datetime with the same attributes, except for those
     attributes given new values by whichever keyword arguments are
     specified.  Note that ‘tzinfo=None’ can be specified to create a
     naive datetime from an aware datetime with no conversion of date
     and time data.

 -- Method: datetime.astimezone (tz=None)

     Return a *note datetime: 60c. object with new *note tzinfo: 124c.
     attribute `tz', adjusting the date and time data so the result is
     the same UTC time as `self', but in `tz'’s local time.

     If provided, `tz' must be an instance of a *note tzinfo: 7ad.
     subclass, and its *note utcoffset(): 1279. and *note dst(): 127a.
     methods must not return ‘None’.  `self' must be aware
     (‘self.tzinfo’ must not be ‘None’, and ‘self.utcoffset()’ must not
     return ‘None’).

     If called without arguments (or with ‘tz=None’) the system local
     timezone is assumed.  The ‘.tzinfo’ attribute of the converted
     datetime instance will be set to an instance of *note timezone:
     62d. with the zone name and offset obtained from the OS.

     If ‘self.tzinfo’ is `tz', ‘self.astimezone(tz)’ is equal to `self':
     no adjustment of date or time data is performed.  Else the result
     is local time in time zone `tz', representing the same UTC time as
     `self': after ‘astz = dt.astimezone(tz)’, ‘astz - astz.utcoffset()’
     will usually have the same date and time data as ‘dt -
     dt.utcoffset()’.  The discussion of class *note tzinfo: 7ad.
     explains the cases at Daylight Saving Time transition boundaries
     where this cannot be achieved (an issue only if `tz' models both
     standard and daylight time).

     If you merely want to attach a time zone object `tz' to a datetime
     `dt' without adjustment of date and time data, use
     ‘dt.replace(tzinfo=tz)’.  If you merely want to remove the time
     zone object from an aware datetime `dt' without conversion of date
     and time data, use ‘dt.replace(tzinfo=None)’.

     Note that the default *note tzinfo.fromutc(): 127b. method can be
     overridden in a *note tzinfo: 7ad. subclass to affect the result
     returned by *note astimezone(): 60f.  Ignoring error cases, *note
     astimezone(): 60f. acts like:

          def astimezone(self, tz):
              if self.tzinfo is tz:
                  return self
              # Convert self to UTC, and attach the new time zone object.
              utc = (self - self.utcoffset()).replace(tzinfo=tz)
              # Convert from UTC to tz's local time.
              return tz.fromutc(utc)

     Changed in version 3.3: `tz' now can be omitted.

 -- Method: datetime.utcoffset ()

     If *note tzinfo: 124c. is ‘None’, returns ‘None’, else returns
     ‘self.tzinfo.utcoffset(self)’, and raises an exception if the
     latter doesn’t return ‘None’, or a *note timedelta: 7ae. object
     representing a whole number of minutes with magnitude less than one
     day.

 -- Method: datetime.dst ()

     If *note tzinfo: 124c. is ‘None’, returns ‘None’, else returns
     ‘self.tzinfo.dst(self)’, and raises an exception if the latter
     doesn’t return ‘None’, or a *note timedelta: 7ae. object
     representing a whole number of minutes with magnitude less than one
     day.

 -- Method: datetime.tzname ()

     If *note tzinfo: 124c. is ‘None’, returns ‘None’, else returns
     ‘self.tzinfo.tzname(self)’, raises an exception if the latter
     doesn’t return ‘None’ or a string object,

 -- Method: datetime.timetuple ()

     Return a *note time.struct_time: 125c. such as returned by *note
     time.localtime(): 125d.  ‘d.timetuple()’ is equivalent to
     ‘time.struct_time((d.year, d.month, d.day, d.hour, d.minute,
     d.second, d.weekday(), yday, dst))’, where ‘yday = d.toordinal() -
     date(d.year, 1, 1).toordinal() + 1’ is the day number within the
     current year starting with ‘1’ for January 1st.  The ‘tm_isdst’
     flag of the result is set according to the *note dst(): 127a.
     method: *note tzinfo: 124c. is ‘None’ or *note dst(): 127a. returns
     ‘None’, ‘tm_isdst’ is set to ‘-1’; else if *note dst(): 127a.
     returns a non-zero value, ‘tm_isdst’ is set to ‘1’; else ‘tm_isdst’
     is set to ‘0’.

 -- Method: datetime.utctimetuple ()

     If *note datetime: 60c. instance `d' is naive, this is the same as
     ‘d.timetuple()’ except that ‘tm_isdst’ is forced to 0 regardless of
     what ‘d.dst()’ returns.  DST is never in effect for a UTC time.

     If `d' is aware, `d' is normalized to UTC time, by subtracting
     ‘d.utcoffset()’, and a *note time.struct_time: 125c. for the
     normalized time is returned.  ‘tm_isdst’ is forced to 0.  Note that
     an *note OverflowError: 578. may be raised if `d'.year was
     ‘MINYEAR’ or ‘MAXYEAR’ and UTC adjustment spills over a year
     boundary.

 -- Method: datetime.toordinal ()

     Return the proleptic Gregorian ordinal of the date.  The same as
     ‘self.date().toordinal()’.

 -- Method: datetime.timestamp ()

     Return POSIX timestamp corresponding to the *note datetime: 60c.
     instance.  The return value is a *note float: 57a. similar to that
     returned by *note time.time(): 6a5.

     Naive *note datetime: 60c. instances are assumed to represent local
     time and this method relies on the platform C ‘mktime()’ function
     to perform the conversion.  Since *note datetime: 60c. supports
     wider range of values than ‘mktime()’ on many platforms, this
     method may raise *note OverflowError: 578. for times far in the
     past or far in the future.

     For aware *note datetime: 60c. instances, the return value is
     computed as:

          (dt - datetime(1970, 1, 1, tzinfo=timezone.utc)).total_seconds()

     New in version 3.3.

          Note: There is no method to obtain the POSIX timestamp
          directly from a naive *note datetime: 60c. instance
          representing UTC time.  If your application uses this
          convention and your system timezone is not set to UTC, you can
          obtain the POSIX timestamp by supplying ‘tzinfo=timezone.utc’:

               timestamp = dt.replace(tzinfo=timezone.utc).timestamp()

          or by calculating the timestamp directly:

               timestamp = (dt - datetime(1970, 1, 1)) / timedelta(seconds=1)

 -- Method: datetime.weekday ()

     Return the day of the week as an integer, where Monday is 0 and
     Sunday is 6.  The same as ‘self.date().weekday()’.  See also *note
     isoweekday(): 1281.

 -- Method: datetime.isoweekday ()

     Return the day of the week as an integer, where Monday is 1 and
     Sunday is 7.  The same as ‘self.date().isoweekday()’.  See also
     *note weekday(): 1280, *note isocalendar(): 1282.

 -- Method: datetime.isocalendar ()

     Return a 3-tuple, (ISO year, ISO week number, ISO weekday).  The
     same as ‘self.date().isocalendar()’.

 -- Method: datetime.isoformat (sep='T', timespec='auto')

     Return a string representing the date and time in ISO 8601 format,
     YYYY-MM-DDTHH:MM:SS.mmmmmm or, if *note microsecond: 124b. is 0,
     YYYY-MM-DDTHH:MM:SS

     If *note utcoffset(): 1279. does not return ‘None’, a 6-character
     string is appended, giving the UTC offset in (signed) hours and
     minutes: YYYY-MM-DDTHH:MM:SS.mmmmmm+HH:MM or, if *note microsecond:
     124b. is 0 YYYY-MM-DDTHH:MM:SS+HH:MM

     The optional argument `sep' (default ‘'T'’) is a one-character
     separator, placed between the date and time portions of the result.
     For example,

          >>> from datetime import tzinfo, timedelta, datetime
          >>> class TZ(tzinfo):
          ...     def utcoffset(self, dt): return timedelta(minutes=-399)
          ...
          >>> datetime(2002, 12, 25, tzinfo=TZ()).isoformat(' ')
          '2002-12-25 00:00:00-06:39'

     The optional argument `timespec' specifies the number of additional
     components of the time to include (the default is ‘'auto'’).  It
     can be one of the following:

        - ‘'auto'’: Same as ‘'seconds'’ if *note microsecond: 124b. is
          0, same as ‘'microseconds'’ otherwise.

        - ‘'hours'’: Include the *note hour: 1248. in the two-digit HH
          format.

        - ‘'minutes'’: Include *note hour: 1248. and *note minute: 1249.
          in HH:MM format.

        - ‘'seconds'’: Include *note hour: 1248, *note minute: 1249, and
          *note second: 124a. in HH:MM:SS format.

        - ‘'milliseconds'’: Include full time, but truncate fractional
          second part to milliseconds.  HH:MM:SS.sss format.

        - ‘'microseconds'’: Include full time in HH:MM:SS.mmmmmm format.

          Note: Excluded time components are truncated, not rounded.

     *note ValueError: 19c. will be raised on an invalid `timespec'
     argument.

          >>> from datetime import datetime
          >>> datetime.now().isoformat(timespec='minutes')
          '2002-12-25T00:00'
          >>> dt = datetime(2015, 1, 1, 12, 30, 59, 0)
          >>> dt.isoformat(timespec='microseconds')
          '2015-01-01T12:30:59.000000'

     New in version 3.6: Added the `timespec' argument.

 -- Method: datetime.__str__ ()

     For a *note datetime: 60c. instance `d', ‘str(d)’ is equivalent to
     ‘d.isoformat(' ')’.

 -- Method: datetime.ctime ()

     Return a string representing the date and time, for example
     ‘datetime(2002, 12, 4, 20, 30, 40).ctime() == 'Wed Dec 4 20:30:40
     2002'’.  ‘d.ctime()’ is equivalent to
     ‘time.ctime(time.mktime(d.timetuple()))’ on platforms where the
     native C ‘ctime()’ function (which *note time.ctime(): 1265.
     invokes, but which *note datetime.ctime(): 1285. does not invoke)
     conforms to the C standard.

 -- Method: datetime.strftime (format)

     Return a string representing the date and time, controlled by an
     explicit format string.  For a complete list of formatting
     directives, see *note strftime() and strptime() Behavior: 1266.

 -- Method: datetime.__format__ (format)

     Same as *note datetime.strftime(): 15e.  This makes it possible to
     specify a format string for a *note datetime: 60c. object in *note
     formatted string literals: 14f. and when using *note str.format():
     14d.  For a complete list of formatting directives, see *note
     strftime() and strptime() Behavior: 1266.

Examples of working with datetime objects:

     >>> from datetime import datetime, date, time
     >>> # Using datetime.combine()
     >>> d = date(2005, 7, 14)
     >>> t = time(12, 30)
     >>> datetime.combine(d, t)
     datetime.datetime(2005, 7, 14, 12, 30)
     >>> # Using datetime.now() or datetime.utcnow()
     >>> datetime.now()
     datetime.datetime(2007, 12, 6, 16, 29, 43, 79043)   # GMT +1
     >>> datetime.utcnow()
     datetime.datetime(2007, 12, 6, 15, 29, 43, 79060)
     >>> # Using datetime.strptime()
     >>> dt = datetime.strptime("21/11/06 16:30", "%d/%m/%y %H:%M")
     >>> dt
     datetime.datetime(2006, 11, 21, 16, 30)
     >>> # Using datetime.timetuple() to get tuple of all attributes
     >>> tt = dt.timetuple()
     >>> for it in tt:
     ...     print(it)
     ...
     2006    # year
     11      # month
     21      # day
     16      # hour
     30      # minute
     0       # second
     1       # weekday (0 = Monday)
     325     # number of days since 1st January
     -1      # dst - method tzinfo.dst() returned None
     >>> # Date in ISO format
     >>> ic = dt.isocalendar()
     >>> for it in ic:
     ...     print(it)
     ...
     2006    # ISO year
     47      # ISO week
     2       # ISO weekday
     >>> # Formatting datetime
     >>> dt.strftime("%A, %d. %B %Y %I:%M%p")
     'Tuesday, 21. November 2006 04:30PM'
     >>> 'The {1} is {0:%d}, the {2} is {0:%B}, the {3} is {0:%I:%M%p}.'.format(dt, "day", "month", "time")
     'The day is 21, the month is November, the time is 04:30PM.'

Using datetime with tzinfo:

     >>> from datetime import timedelta, datetime, tzinfo
     >>> class GMT1(tzinfo):
     ...     def utcoffset(self, dt):
     ...         return timedelta(hours=1) + self.dst(dt)
     ...     def dst(self, dt):
     ...         # DST starts last Sunday in March
     ...         d = datetime(dt.year, 4, 1)   # ends last Sunday in October
     ...         self.dston = d - timedelta(days=d.weekday() + 1)
     ...         d = datetime(dt.year, 11, 1)
     ...         self.dstoff = d - timedelta(days=d.weekday() + 1)
     ...         if self.dston <=  dt.replace(tzinfo=None) < self.dstoff:
     ...             return timedelta(hours=1)
     ...         else:
     ...             return timedelta(0)
     ...     def tzname(self,dt):
     ...          return "GMT +1"
     ...
     >>> class GMT2(tzinfo):
     ...     def utcoffset(self, dt):
     ...         return timedelta(hours=2) + self.dst(dt)
     ...     def dst(self, dt):
     ...         d = datetime(dt.year, 4, 1)
     ...         self.dston = d - timedelta(days=d.weekday() + 1)
     ...         d = datetime(dt.year, 11, 1)
     ...         self.dstoff = d - timedelta(days=d.weekday() + 1)
     ...         if self.dston <=  dt.replace(tzinfo=None) < self.dstoff:
     ...             return timedelta(hours=1)
     ...         else:
     ...             return timedelta(0)
     ...     def tzname(self,dt):
     ...         return "GMT +2"
     ...
     >>> gmt1 = GMT1()
     >>> # Daylight Saving Time
     >>> dt1 = datetime(2006, 11, 21, 16, 30, tzinfo=gmt1)
     >>> dt1.dst()
     datetime.timedelta(0)
     >>> dt1.utcoffset()
     datetime.timedelta(0, 3600)
     >>> dt2 = datetime(2006, 6, 14, 13, 0, tzinfo=gmt1)
     >>> dt2.dst()
     datetime.timedelta(0, 3600)
     >>> dt2.utcoffset()
     datetime.timedelta(0, 7200)
     >>> # Convert datetime to another time zone
     >>> dt3 = dt2.astimezone(GMT2())
     >>> dt3     # doctest: +ELLIPSIS
     datetime.datetime(2006, 6, 14, 14, 0, tzinfo=<GMT2 object at 0x...>)
     >>> dt2     # doctest: +ELLIPSIS
     datetime.datetime(2006, 6, 14, 13, 0, tzinfo=<GMT1 object at 0x...>)
     >>> dt2.utctimetuple() == dt3.utctimetuple()
     True


File: python.info,  Node: time Objects,  Next: tzinfo Objects,  Prev: datetime Objects,  Up: datetime --- Basic date and time types

5.8.1.5 ‘time’ Objects
......................

A time object represents a (local) time of day, independent of any
particular day, and subject to adjustment via a *note tzinfo: 7ad.
object.

 -- Class: datetime.time (hour=0, minute=0, second=0, microsecond=0,
          tzinfo=None)

     All arguments are optional.  `tzinfo' may be ‘None’, or an instance
     of a *note tzinfo: 7ad. subclass.  The remaining arguments may be
     integers, in the following ranges:

        * ‘0 <= hour < 24’

        * ‘0 <= minute < 60’

        * ‘0 <= second < 60’

        * ‘0 <= microsecond < 1000000’.

     If an argument outside those ranges is given, *note ValueError:
     19c. is raised.  All default to ‘0’ except `tzinfo', which defaults
     to *note None: 19d.

Class attributes:

 -- Attribute: time.min

     The earliest representable *note time: 3a8, ‘time(0, 0, 0, 0)’.

 -- Attribute: time.max

     The latest representable *note time: 3a8, ‘time(23, 59, 59,
     999999)’.

 -- Attribute: time.resolution

     The smallest possible difference between non-equal *note time: 3a8.
     objects, ‘timedelta(microseconds=1)’, although note that arithmetic
     on *note time: 3a8. objects is not supported.

Instance attributes (read-only):

 -- Attribute: time.hour

     In ‘range(24)’.

 -- Attribute: time.minute

     In ‘range(60)’.

 -- Attribute: time.second

     In ‘range(60)’.

 -- Attribute: time.microsecond

     In ‘range(1000000)’.

 -- Attribute: time.tzinfo

     The object passed as the tzinfo argument to the *note time: 3a8.
     constructor, or ‘None’ if none was passed.

Supported operations:

   * comparison of *note time: 3a8. to *note time: 3a8, where `a' is
     considered less than `b' when `a' precedes `b' in time.  If one
     comparand is naive and the other is aware, *note TypeError: 562. is
     raised if an order comparison is attempted.  For equality
     comparisons, naive instances are never equal to aware instances.

     If both comparands are aware, and have the same *note tzinfo: 1244.
     attribute, the common *note tzinfo: 1244. attribute is ignored and
     the base times are compared.  If both comparands are aware and have
     different *note tzinfo: 1244. attributes, the comparands are first
     adjusted by subtracting their UTC offsets (obtained from
     ‘self.utcoffset()’).  In order to stop mixed-type comparisons from
     falling back to the default comparison by object address, when a
     *note time: 3a8. object is compared to an object of a different
     type, *note TypeError: 562. is raised unless the comparison is ‘==’
     or ‘!=’.  The latter cases return *note False: 60d. or *note True:
     9ff, respectively.

     Changed in version 3.3: Equality comparisons between naive and
     aware *note time: 107. instances don’t raise *note TypeError: 562.

   * hash, use as dict key

   * efficient pickling

In boolean contexts, a *note time: 3a8. object is always considered to
be true.

Changed in version 3.5: Before Python 3.5, a *note time: 3a8. object was
considered to be false if it represented midnight in UTC. This behavior
was considered obscure and error-prone and has been removed in Python
3.5.  See issue 13936(1) for full details.

Instance methods:

 -- Method: time.replace ([hour[, minute[, second[, microsecond[,
          tzinfo]]]]])

     Return a *note time: 3a8. with the same value, except for those
     attributes given new values by whichever keyword arguments are
     specified.  Note that ‘tzinfo=None’ can be specified to create a
     naive *note time: 3a8. from an aware *note time: 3a8, without
     conversion of the time data.

 -- Method: time.isoformat (timespec='auto')

     Return a string representing the time in ISO 8601 format,
     HH:MM:SS.mmmmmm or, if *note microsecond: 1243. is 0, HH:MM:SS If
     *note utcoffset(): 128e. does not return ‘None’, a 6-character
     string is appended, giving the UTC offset in (signed) hours and
     minutes: HH:MM:SS.mmmmmm+HH:MM or, if self.microsecond is 0,
     HH:MM:SS+HH:MM

     The optional argument `timespec' specifies the number of additional
     components of the time to include (the default is ‘'auto'’).  It
     can be one of the following:

        - ‘'auto'’: Same as ‘'seconds'’ if *note microsecond: 1243. is
          0, same as ‘'microseconds'’ otherwise.

        - ‘'hours'’: Include the *note hour: 1240. in the two-digit HH
          format.

        - ‘'minutes'’: Include *note hour: 1240. and *note minute: 1241.
          in HH:MM format.

        - ‘'seconds'’: Include *note hour: 1240, *note minute: 1241, and
          *note second: 1242. in HH:MM:SS format.

        - ‘'milliseconds'’: Include full time, but truncate fractional
          second part to milliseconds.  HH:MM:SS.sss format.

        - ‘'microseconds'’: Include full time in HH:MM:SS.mmmmmm format.

          Note: Excluded time components are truncated, not rounded.

     *note ValueError: 19c. will be raised on an invalid `timespec'
     argument.

          >>> from datetime import time
          >>> time(hours=12, minute=34, second=56, microsecond=123456).isoformat(timespec='minutes')
          '12:34'
          >>> dt = time(hours=12, minute=34, second=56, microsecond=0)
          >>> dt.isoformat(timespec='microseconds')
          '12:34:56.000000'
          >>> dt.isoformat(timespec='auto')
          '12:34:56'

     New in version 3.6: Added the `timespec' argument.

 -- Method: time.__str__ ()

     For a time `t', ‘str(t)’ is equivalent to ‘t.isoformat()’.

 -- Method: time.strftime (format)

     Return a string representing the time, controlled by an explicit
     format string.  For a complete list of formatting directives, see
     *note strftime() and strptime() Behavior: 1266.

 -- Method: time.__format__ (format)

     Same as *note time.strftime(): 1290.  This makes it possible to
     specify a format string for a *note time: 3a8. object in *note
     formatted string literals: 14f. and when using *note str.format():
     14d.  For a complete list of formatting directives, see *note
     strftime() and strptime() Behavior: 1266.

 -- Method: time.utcoffset ()

     If *note tzinfo: 1244. is ‘None’, returns ‘None’, else returns
     ‘self.tzinfo.utcoffset(None)’, and raises an exception if the
     latter doesn’t return ‘None’ or a *note timedelta: 7ae. object
     representing a whole number of minutes with magnitude less than one
     day.

 -- Method: time.dst ()

     If *note tzinfo: 1244. is ‘None’, returns ‘None’, else returns
     ‘self.tzinfo.dst(None)’, and raises an exception if the latter
     doesn’t return ‘None’, or a *note timedelta: 7ae. object
     representing a whole number of minutes with magnitude less than one
     day.

 -- Method: time.tzname ()

     If *note tzinfo: 1244. is ‘None’, returns ‘None’, else returns
     ‘self.tzinfo.tzname(None)’, or raises an exception if the latter
     doesn’t return ‘None’ or a string object.

Example:

     >>> from datetime import time, tzinfo
     >>> class GMT1(tzinfo):
     ...     def utcoffset(self, dt):
     ...         return timedelta(hours=1)
     ...     def dst(self, dt):
     ...         return timedelta(0)
     ...     def tzname(self,dt):
     ...         return "Europe/Prague"
     ...
     >>> t = time(12, 10, 30, tzinfo=GMT1())
     >>> t                               # doctest: +ELLIPSIS
     datetime.time(12, 10, 30, tzinfo=<GMT1 object at 0x...>)
     >>> gmt = GMT1()
     >>> t.isoformat()
     '12:10:30+01:00'
     >>> t.dst()
     datetime.timedelta(0)
     >>> t.tzname()
     'Europe/Prague'
     >>> t.strftime("%H:%M:%S %Z")
     '12:10:30 Europe/Prague'
     >>> 'The {} is {:%H:%M}.'.format("time", t)
     'The time is 12:10.'

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue13936


File: python.info,  Node: tzinfo Objects,  Next: timezone Objects,  Prev: time Objects,  Up: datetime --- Basic date and time types

5.8.1.6 ‘tzinfo’ Objects
........................

 -- Class: datetime.tzinfo

     This is an abstract base class, meaning that this class should not
     be instantiated directly.  You need to derive a concrete subclass,
     and (at least) supply implementations of the standard *note tzinfo:
     7ad. methods needed by the *note datetime: 60c. methods you use.
     The *note datetime: 2f. module supplies a simple concrete subclass
     of *note tzinfo: 7ad, *note timezone: 62d, which can represent
     timezones with fixed offset from UTC such as UTC itself or North
     American EST and EDT.

     An instance of (a concrete subclass of) *note tzinfo: 7ad. can be
     passed to the constructors for *note datetime: 60c. and *note time:
     3a8. objects.  The latter objects view their attributes as being in
     local time, and the *note tzinfo: 7ad. object supports methods
     revealing offset of local time from UTC, the name of the time zone,
     and DST offset, all relative to a date or time object passed to
     them.

     Special requirement for pickling: A *note tzinfo: 7ad. subclass
     must have an *note __init__(): 9d5. method that can be called with
     no arguments, else it can be pickled but possibly not unpickled
     again.  This is a technical requirement that may be relaxed in the
     future.

     A concrete subclass of *note tzinfo: 7ad. may need to implement the
     following methods.  Exactly which methods are needed depends on the
     uses made of aware *note datetime: 2f. objects.  If in doubt,
     simply implement all of them.

 -- Method: tzinfo.utcoffset (dt)

     Return offset of local time from UTC, in minutes east of UTC. If
     local time is west of UTC, this should be negative.  Note that this
     is intended to be the total offset from UTC; for example, if a
     *note tzinfo: 7ad. object represents both time zone and DST
     adjustments, *note utcoffset(): 1296. should return their sum.  If
     the UTC offset isn’t known, return ‘None’.  Else the value returned
     must be a *note timedelta: 7ae. object specifying a whole number of
     minutes in the range -1439 to 1439 inclusive (1440 = 24*60; the
     magnitude of the offset must be less than one day).  Most
     implementations of *note utcoffset(): 1296. will probably look like
     one of these two:

          return CONSTANT                 # fixed-offset class
          return CONSTANT + self.dst(dt)  # daylight-aware class

     If *note utcoffset(): 1296. does not return ‘None’, *note dst():
     1297. should not return ‘None’ either.

     The default implementation of *note utcoffset(): 1296. raises *note
     NotImplementedError: 569.

 -- Method: tzinfo.dst (dt)

     Return the daylight saving time (DST) adjustment, in minutes east
     of UTC, or ‘None’ if DST information isn’t known.  Return
     ‘timedelta(0)’ if DST is not in effect.  If DST is in effect,
     return the offset as a *note timedelta: 7ae. object (see *note
     utcoffset(): 1296. for details).  Note that DST offset, if
     applicable, has already been added to the UTC offset returned by
     *note utcoffset(): 1296, so there’s no need to consult *note dst():
     1297. unless you’re interested in obtaining DST info separately.
     For example, *note datetime.timetuple(): 127d. calls its *note
     tzinfo: 124c. attribute’s *note dst(): 1297. method to determine
     how the ‘tm_isdst’ flag should be set, and *note tzinfo.fromutc():
     127b. calls *note dst(): 1297. to account for DST changes when
     crossing time zones.

     An instance `tz' of a *note tzinfo: 7ad. subclass that models both
     standard and daylight times must be consistent in this sense:

     ‘tz.utcoffset(dt) - tz.dst(dt)’

     must return the same result for every *note datetime: 60c. `dt'
     with ‘dt.tzinfo == tz’ For sane *note tzinfo: 7ad. subclasses, this
     expression yields the time zone’s "standard offset", which should
     not depend on the date or the time, but only on geographic
     location.  The implementation of *note datetime.astimezone(): 60f.
     relies on this, but cannot detect violations; it’s the programmer’s
     responsibility to ensure it.  If a *note tzinfo: 7ad. subclass
     cannot guarantee this, it may be able to override the default
     implementation of *note tzinfo.fromutc(): 127b. to work correctly
     with ‘astimezone()’ regardless.

     Most implementations of *note dst(): 1297. will probably look like
     one of these two:

          def dst(self, dt):
              # a fixed-offset class:  doesn't account for DST
              return timedelta(0)

     or

          def dst(self, dt):
              # Code to set dston and dstoff to the time zone's DST
              # transition times based on the input dt.year, and expressed
              # in standard local time.  Then

              if dston <= dt.replace(tzinfo=None) < dstoff:
                  return timedelta(hours=1)
              else:
                  return timedelta(0)

     The default implementation of *note dst(): 1297. raises *note
     NotImplementedError: 569.

 -- Method: tzinfo.tzname (dt)

     Return the time zone name corresponding to the *note datetime: 60c.
     object `dt', as a string.  Nothing about string names is defined by
     the *note datetime: 2f. module, and there’s no requirement that it
     mean anything in particular.  For example, "GMT", "UTC", "-500",
     "-5:00", "EDT", "US/Eastern", "America/New York" are all valid
     replies.  Return ‘None’ if a string name isn’t known.  Note that
     this is a method rather than a fixed string primarily because some
     *note tzinfo: 7ad. subclasses will wish to return different names
     depending on the specific value of `dt' passed, especially if the
     *note tzinfo: 7ad. class is accounting for daylight time.

     The default implementation of *note tzname(): 1298. raises *note
     NotImplementedError: 569.

These methods are called by a *note datetime: 60c. or *note time: 3a8.
object, in response to their methods of the same names.  A *note
datetime: 60c. object passes itself as the argument, and a *note time:
3a8. object passes ‘None’ as the argument.  A *note tzinfo: 7ad.
subclass’s methods should therefore be prepared to accept a `dt'
argument of ‘None’, or of class *note datetime: 60c.

When ‘None’ is passed, it’s up to the class designer to decide the best
response.  For example, returning ‘None’ is appropriate if the class
wishes to say that time objects don’t participate in the *note tzinfo:
7ad. protocols.  It may be more useful for ‘utcoffset(None)’ to return
the standard UTC offset, as there is no other convention for discovering
the standard offset.

When a *note datetime: 60c. object is passed in response to a *note
datetime: 60c. method, ‘dt.tzinfo’ is the same object as `self'.  *note
tzinfo: 7ad. methods can rely on this, unless user code calls *note
tzinfo: 7ad. methods directly.  The intent is that the *note tzinfo:
7ad. methods interpret `dt' as being in local time, and not need worry
about objects in other timezones.

There is one more *note tzinfo: 7ad. method that a subclass may wish to
override:

 -- Method: tzinfo.fromutc (dt)

     This is called from the default *note datetime.astimezone(): 60f.
     implementation.  When called from that, ‘dt.tzinfo’ is `self', and
     `dt'’s date and time data are to be viewed as expressing a UTC
     time.  The purpose of *note fromutc(): 127b. is to adjust the date
     and time data, returning an equivalent datetime in `self'’s local
     time.

     Most *note tzinfo: 7ad. subclasses should be able to inherit the
     default *note fromutc(): 127b. implementation without problems.
     It’s strong enough to handle fixed-offset time zones, and time
     zones accounting for both standard and daylight time, and the
     latter even if the DST transition times differ in different years.
     An example of a time zone the default *note fromutc(): 127b.
     implementation may not handle correctly in all cases is one where
     the standard offset (from UTC) depends on the specific date and
     time passed, which can happen for political reasons.  The default
     implementations of ‘astimezone()’ and *note fromutc(): 127b. may
     not produce the result you want if the result is one of the hours
     straddling the moment the standard offset changes.

     Skipping code for error cases, the default *note fromutc(): 127b.
     implementation acts like:

          def fromutc(self, dt):
              # raise ValueError error if dt.tzinfo is not self
              dtoff = dt.utcoffset()
              dtdst = dt.dst()
              # raise ValueError if dtoff is None or dtdst is None
              delta = dtoff - dtdst  # this is self's standard offset
              if delta:
                  dt += delta   # convert to standard local time
                  dtdst = dt.dst()
                  # raise ValueError if dtdst is None
              if dtdst:
                  return dt + dtdst
              else:
                  return dt

Example *note tzinfo: 7ad. classes:

     from datetime import tzinfo, timedelta, datetime

     ZERO = timedelta(0)
     HOUR = timedelta(hours=1)

     # A UTC class.

     class UTC(tzinfo):
         """UTC"""

         def utcoffset(self, dt):
             return ZERO

         def tzname(self, dt):
             return "UTC"

         def dst(self, dt):
             return ZERO

     utc = UTC()

     # A class building tzinfo objects for fixed-offset time zones.
     # Note that FixedOffset(0, "UTC") is a different way to build a
     # UTC tzinfo object.

     class FixedOffset(tzinfo):
         """Fixed offset in minutes east from UTC."""

         def __init__(self, offset, name):
             self.__offset = timedelta(minutes=offset)
             self.__name = name

         def utcoffset(self, dt):
             return self.__offset

         def tzname(self, dt):
             return self.__name

         def dst(self, dt):
             return ZERO

     # A class capturing the platform's idea of local time.

     import time as _time

     STDOFFSET = timedelta(seconds = -_time.timezone)
     if _time.daylight:
         DSTOFFSET = timedelta(seconds = -_time.altzone)
     else:
         DSTOFFSET = STDOFFSET

     DSTDIFF = DSTOFFSET - STDOFFSET

     class LocalTimezone(tzinfo):

         def utcoffset(self, dt):
             if self._isdst(dt):
                 return DSTOFFSET
             else:
                 return STDOFFSET

         def dst(self, dt):
             if self._isdst(dt):
                 return DSTDIFF
             else:
                 return ZERO

         def tzname(self, dt):
             return _time.tzname[self._isdst(dt)]

         def _isdst(self, dt):
             tt = (dt.year, dt.month, dt.day,
                   dt.hour, dt.minute, dt.second,
                   dt.weekday(), 0, 0)
             stamp = _time.mktime(tt)
             tt = _time.localtime(stamp)
             return tt.tm_isdst > 0

     Local = LocalTimezone()


     # A complete implementation of current DST rules for major US time zones.

     def first_sunday_on_or_after(dt):
         days_to_go = 6 - dt.weekday()
         if days_to_go:
             dt += timedelta(days_to_go)
         return dt


     # US DST Rules
     #
     # This is a simplified (i.e., wrong for a few cases) set of rules for US
     # DST start and end times. For a complete and up-to-date set of DST rules
     # and timezone definitions, visit the Olson Database (or try pytz):
     # http://www.twinsun.com/tz/tz-link.htm
     # http://sourceforge.net/projects/pytz/ (might not be up-to-date)
     #
     # In the US, since 2007, DST starts at 2am (standard time) on the second
     # Sunday in March, which is the first Sunday on or after Mar 8.
     DSTSTART_2007 = datetime(1, 3, 8, 2)
     # and ends at 2am (DST time; 1am standard time) on the first Sunday of Nov.
     DSTEND_2007 = datetime(1, 11, 1, 1)
     # From 1987 to 2006, DST used to start at 2am (standard time) on the first
     # Sunday in April and to end at 2am (DST time; 1am standard time) on the last
     # Sunday of October, which is the first Sunday on or after Oct 25.
     DSTSTART_1987_2006 = datetime(1, 4, 1, 2)
     DSTEND_1987_2006 = datetime(1, 10, 25, 1)
     # From 1967 to 1986, DST used to start at 2am (standard time) on the last
     # Sunday in April (the one on or after April 24) and to end at 2am (DST time;
     # 1am standard time) on the last Sunday of October, which is the first Sunday
     # on or after Oct 25.
     DSTSTART_1967_1986 = datetime(1, 4, 24, 2)
     DSTEND_1967_1986 = DSTEND_1987_2006

     class USTimeZone(tzinfo):

         def __init__(self, hours, reprname, stdname, dstname):
             self.stdoffset = timedelta(hours=hours)
             self.reprname = reprname
             self.stdname = stdname
             self.dstname = dstname

         def __repr__(self):
             return self.reprname

         def tzname(self, dt):
             if self.dst(dt):
                 return self.dstname
             else:
                 return self.stdname

         def utcoffset(self, dt):
             return self.stdoffset + self.dst(dt)

         def dst(self, dt):
             if dt is None or dt.tzinfo is None:
                 # An exception may be sensible here, in one or both cases.
                 # It depends on how you want to treat them.  The default
                 # fromutc() implementation (called by the default astimezone()
                 # implementation) passes a datetime with dt.tzinfo is self.
                 return ZERO
             assert dt.tzinfo is self

             # Find start and end times for US DST. For years before 1967, return
             # ZERO for no DST.
             if 2006 < dt.year:
                 dststart, dstend = DSTSTART_2007, DSTEND_2007
             elif 1986 < dt.year < 2007:
                 dststart, dstend = DSTSTART_1987_2006, DSTEND_1987_2006
             elif 1966 < dt.year < 1987:
                 dststart, dstend = DSTSTART_1967_1986, DSTEND_1967_1986
             else:
                 return ZERO

             start = first_sunday_on_or_after(dststart.replace(year=dt.year))
             end = first_sunday_on_or_after(dstend.replace(year=dt.year))

             # Can't compare naive to aware objects, so strip the timezone from
             # dt first.
             if start <= dt.replace(tzinfo=None) < end:
                 return HOUR
             else:
                 return ZERO

     Eastern  = USTimeZone(-5, "Eastern",  "EST", "EDT")
     Central  = USTimeZone(-6, "Central",  "CST", "CDT")
     Mountain = USTimeZone(-7, "Mountain", "MST", "MDT")
     Pacific  = USTimeZone(-8, "Pacific",  "PST", "PDT")

Note that there are unavoidable subtleties twice per year in a *note
tzinfo: 7ad. subclass accounting for both standard and daylight time, at
the DST transition points.  For concreteness, consider US Eastern (UTC
-0500), where EDT begins the minute after 1:59 (EST) on the second
Sunday in March, and ends the minute after 1:59 (EDT) on the first
Sunday in November:

       UTC   3:MM  4:MM  5:MM  6:MM  7:MM  8:MM
       EST  22:MM 23:MM  0:MM  1:MM  2:MM  3:MM
       EDT  23:MM  0:MM  1:MM  2:MM  3:MM  4:MM

     start  22:MM 23:MM  0:MM  1:MM  3:MM  4:MM

       end  23:MM  0:MM  1:MM  1:MM  2:MM  3:MM

When DST starts (the "start" line), the local wall clock leaps from 1:59
to 3:00.  A wall time of the form 2:MM doesn’t really make sense on that
day, so ‘astimezone(Eastern)’ won’t deliver a result with ‘hour == 2’ on
the day DST begins.  In order for ‘astimezone()’ to make this guarantee,
the *note tzinfo.dst(): 1297. method must consider times in the "missing
hour" (2:MM for Eastern) to be in daylight time.

When DST ends (the "end" line), there’s a potentially worse problem:
there’s an hour that can’t be spelled unambiguously in local wall time:
the last hour of daylight time.  In Eastern, that’s times of the form
5:MM UTC on the day daylight time ends.  The local wall clock leaps from
1:59 (daylight time) back to 1:00 (standard time) again.  Local times of
the form 1:MM are ambiguous.  ‘astimezone()’ mimics the local clock’s
behavior by mapping two adjacent UTC hours into the same local hour
then.  In the Eastern example, UTC times of the form 5:MM and 6:MM both
map to 1:MM when converted to Eastern.  In order for ‘astimezone()’ to
make this guarantee, the *note tzinfo.dst(): 1297. method must consider
times in the "repeated hour" to be in standard time.  This is easily
arranged, as in the example, by expressing DST switch times in the time
zone’s standard local time.

Applications that can’t bear such ambiguities should avoid using hybrid
*note tzinfo: 7ad. subclasses; there are no ambiguities when using *note
timezone: 62d, or any other fixed-offset *note tzinfo: 7ad. subclass
(such as a class representing only EST (fixed offset -5 hours), or only
EDT (fixed offset -4 hours)).

See also
........

pytz(1)

     The standard library has *note timezone: 62d. class for handling
     arbitrary fixed offsets from UTC and *note timezone.utc: 1299. as
     UTC timezone instance.

     `pytz' library brings the `IANA timezone database' (also known as
     the Olson database) to Python and its usage is recommended.

IANA timezone database(2)

     The Time Zone Database (often called tz or zoneinfo) contains code
     and data that represent the history of local time for many
     representative locations around the globe.  It is updated
     periodically to reflect changes made by political bodies to time
     zone boundaries, UTC offsets, and daylight-saving rules.

   ---------- Footnotes ----------

   (1) https://pypi.python.org/pypi/pytz/

   (2) http://www.iana.org/time-zones


File: python.info,  Node: timezone Objects,  Next: strftime and strptime Behavior,  Prev: tzinfo Objects,  Up: datetime --- Basic date and time types

5.8.1.7 ‘timezone’ Objects
..........................

The *note timezone: 62d. class is a subclass of *note tzinfo: 7ad, each
instance of which represents a timezone defined by a fixed offset from
UTC. Note that objects of this class cannot be used to represent
timezone information in the locations where different offsets are used
in different days of the year or where historical changes have been made
to civil time.

 -- Class: datetime.timezone (offset[, name])

     The `offset' argument must be specified as a *note timedelta: 7ae.
     object representing the difference between the local time and UTC.
     It must be strictly between ‘-timedelta(hours=24)’ and
     ‘timedelta(hours=24)’ and represent a whole number of minutes,
     otherwise *note ValueError: 19c. is raised.

     The `name' argument is optional.  If specified it must be a string
     that will be used as the value returned by the *note
     datetime.tzname(): 127c. method.

     New in version 3.2.

 -- Method: timezone.utcoffset (dt)

     Return the fixed value specified when the *note timezone: 62d.
     instance is constructed.  The `dt' argument is ignored.  The return
     value is a *note timedelta: 7ae. instance equal to the difference
     between the local time and UTC.

 -- Method: timezone.tzname (dt)

     Return the fixed value specified when the *note timezone: 62d.
     instance is constructed.  If `name' is not provided in the
     constructor, the name returned by ‘tzname(dt)’ is generated from
     the value of the ‘offset’ as follows.  If `offset' is
     ‘timedelta(0)’, the name is "UTC", otherwise it is a string
     ’UTC±HH:MM’, where ± is the sign of ‘offset’, HH and MM are two
     digits of ‘offset.hours’ and ‘offset.minutes’ respectively.

     Changed in version 3.6: Name generated from ‘offset=timedelta(0)’
     is now plain ’UTC’, not ’UTC+00:00’.

 -- Method: timezone.dst (dt)

     Always returns ‘None’.

 -- Method: timezone.fromutc (dt)

     Return ‘dt + offset’.  The `dt' argument must be an aware *note
     datetime: 60c. instance, with ‘tzinfo’ set to ‘self’.

Class attributes:

 -- Attribute: timezone.utc

     The UTC timezone, ‘timezone(timedelta(0))’.


File: python.info,  Node: strftime and strptime Behavior,  Prev: timezone Objects,  Up: datetime --- Basic date and time types

5.8.1.8 ‘strftime()’ and ‘strptime()’ Behavior
..............................................

*note date: 9c0, *note datetime: 60c, and *note time: 3a8. objects all
support a ‘strftime(format)’ method, to create a string representing the
time under the control of an explicit format string.  Broadly speaking,
‘d.strftime(fmt)’ acts like the *note time: 107. module’s
‘time.strftime(fmt, d.timetuple())’ although not all objects support a
‘timetuple()’ method.

Conversely, the *note datetime.strptime(): 1271. class method creates a
*note datetime: 60c. object from a string representing a date and time
and a corresponding format string.  ‘datetime.strptime(date_string,
format)’ is equivalent to ‘datetime(*(time.strptime(date_string,
format)[0:6]))’.

For *note time: 3a8. objects, the format codes for year, month, and day
should not be used, as time objects have no such values.  If they’re
used anyway, ‘1900’ is substituted for the year, and ‘1’ for the month
and day.

For *note date: 9c0. objects, the format codes for hours, minutes,
seconds, and microseconds should not be used, as *note date: 9c0.
objects have no such values.  If they’re used anyway, ‘0’ is substituted
for them.

The full set of format codes supported varies across platforms, because
Python calls the platform C library’s ‘strftime()’ function, and
platform variations are common.  To see the full set of format codes
supported on your platform, consult the ‘strftime(3)’ documentation.

The following is a list of all the format codes that the C standard
(1989 version) requires, and these work on all platforms with a standard
C implementation.  Note that the 1999 version of the C standard added
additional format codes.

Directive       Meaning                              Example                      Notes
                                                                                  
----------------------------------------------------------------------------------------------
                                                                                  
‘%a’            Weekday as locale’s abbreviated           Sun, Mon, ..., Sat (en_US); (1)
                name.                                     So, Mo, ..., Sa (de_DE) 
                                                     
                                                                                  
‘%A’            Weekday as locale’s full name.            Sunday, Monday, ..., Saturday (en_US); (1)
                                                          Sonntag, Montag, ..., Samstag (de_DE) 
                                                     
                                                                                  
‘%w’            Weekday as a decimal number, where   0, 1, ..., 6
                0 is Sunday and 6 is Saturday.       
                
                                                                                  
‘%d’            Day of the month as a zero-padded    01, 02, ..., 31
                decimal number.                      
                
                                                                                  
‘%b’            Month as locale’s abbreviated             Jan, Feb, ..., Dec (en_US); (1)
                name.                                     Jan, Feb, ..., Dez (de_DE) 
                                                     
                                                                                  
‘%B’            Month as locale’s full name.              January, February, ..., December (en_US); (1)
                                                          Januar, Februar, ..., Dezember (de_DE) 
                                                     
                                                                                  
‘%m’            Month as a zero-padded decimal       01, 02, ..., 12
                number.                              
                
                                                                                  
‘%y’            Year without century as a            00, 01, ..., 99
                zero-padded decimal number.          
                
                                                                                  
‘%Y’            Year with century as a decimal       0001, 0002, ..., 2013,       (2)
                number.                              2014, ..., 9998, 9999        
                                                     
                                                                                  
‘%H’            Hour (24-hour clock) as a            00, 01, ..., 23
                zero-padded decimal number.          
                
                                                                                  
‘%I’            Hour (12-hour clock) as a            01, 02, ..., 12
                zero-padded decimal number.          
                
                                                                                  
‘%p’            Locale’s equivalent of either AM          AM, PM (en_US);         (1), (3)
                or PM.                                    am, pm (de_DE)          
                                                     
                                                                                  
‘%M’            Minute as a zero-padded decimal      00, 01, ..., 59
                number.                              
                
                                                                                  
‘%S’            Second as a zero-padded decimal      00, 01, ..., 59              (4)
                number.                                                           
                
                                                                                  
‘%f’            Microsecond as a decimal number,     000000, 000001, ...,         (5)
                zero-padded on the left.             999999                       
                                                     
                                                                                  
‘%z’            UTC offset in the form +HHMM or      (empty), +0000, -0400,       (6)
                -HHMM (empty string if the object    +1030                        
                is naive).                           
                
                                                                                  
‘%Z’            Time zone name (empty string if      (empty), UTC, EST, CST
                the object is naive).                
                
                                                                                  
‘%j’            Day of the year as a zero-padded     001, 002, ..., 366
                decimal number.                      
                
                                                                                  
‘%U’            Week number of the year (Sunday as   00, 01, ..., 53              (7)
                the first day of the week) as a                                   
                zero padded decimal number.  All
                days in a new year preceding the
                first Sunday are considered to be
                in week 0.
                
                                                                                  
‘%W’            Week number of the year (Monday as   00, 01, ..., 53              (7)
                the first day of the week) as a                                   
                decimal number.  All days in a new
                year preceding the first Monday
                are considered to be in week 0.
                
                                                                                  
‘%c’            Locale’s appropriate date and time        Tue Aug 16 21:30:00 1988 (en_US); (1)
                representation.                           Di 16 Aug 21:30:00 1988 (de_DE) 
                                                     
                                                                                  
‘%x’            Locale’s appropriate date                 08/16/88 (None);        (1)
                representation.                           08/16/1988 (en_US);     
                                                          16.08.1988 (de_DE) 
                                                     
                                                                                  
‘%X’            Locale’s appropriate time                 21:30:00 (en_US);       (1)
                representation.                           21:30:00 (de_DE)        
                                                     
                                                                                  
‘%%’            A literal ‘'%'’ character.           %
                                                     

Several additional directives not required by the C89 standard are
included for convenience.  These parameters all correspond to ISO 8601
date values.  These may not be available on all platforms when used with
the ‘strftime()’ method.  The ISO 8601 year and ISO 8601 week directives
are not interchangeable with the year and week number directives above.
Calling ‘strptime()’ with incomplete or ambiguous ISO 8601 directives
will raise a *note ValueError: 19c.

Directive       Meaning                              Example                      Notes
                                                                                  
----------------------------------------------------------------------------------------------
                                                                                  
‘%G’            ISO 8601 year with century           0001, 0002, ..., 2013,       (8)
                representing the year that           2014, ..., 9998, 9999        
                contains the greater part of the     
                ISO week (‘%V’).
                
                                                                                  
‘%u’            ISO 8601 weekday as a decimal        1, 2, ..., 7
                number where 1 is Monday.            
                
                                                                                  
‘%V’            ISO 8601 week as a decimal number    01, 02, ..., 53              (8)
                with Monday as the first day of                                   
                the week.  Week 01 is the week
                containing Jan 4.
                

New in version 3.6: ‘%G’, ‘%u’ and ‘%V’ were added.

Notes:

  1. Because the format depends on the current locale, care should be
     taken when making assumptions about the output value.  Field
     orderings will vary (for example, "month/day/year" versus
     "day/month/year"), and the output may contain Unicode characters
     encoded using the locale’s default encoding (for example, if the
     current locale is ‘ja_JP’, the default encoding could be any one of
     ‘eucJP’, ‘SJIS’, or ‘utf-8’; use *note locale.getlocale(): 12a1. to
     determine the current locale’s encoding).

  2. The ‘strptime()’ method can parse years in the full [1, 9999]
     range, but years < 1000 must be zero-filled to 4-digit width.

     Changed in version 3.2: In previous versions, ‘strftime()’ method
     was restricted to years >= 1900.

     Changed in version 3.3: In version 3.2, ‘strftime()’ method was
     restricted to years >= 1000.

  3. When used with the ‘strptime()’ method, the ‘%p’ directive only
     affects the output hour field if the ‘%I’ directive is used to
     parse the hour.

  4. Unlike the *note time: 107. module, the *note datetime: 2f. module
     does not support leap seconds.

  5. When used with the ‘strptime()’ method, the ‘%f’ directive accepts
     from one to six digits and zero pads on the right.  ‘%f’ is an
     extension to the set of format characters in the C standard (but
     implemented separately in datetime objects, and therefore always
     available).

  6. For a naive object, the ‘%z’ and ‘%Z’ format codes are replaced by
     empty strings.

     For an aware object:

     ‘%z’

          ‘utcoffset()’ is transformed into a 5-character string of the
          form +HHMM or -HHMM, where HH is a 2-digit string giving the
          number of UTC offset hours, and MM is a 2-digit string giving
          the number of UTC offset minutes.  For example, if
          ‘utcoffset()’ returns ‘timedelta(hours=-3, minutes=-30)’, ‘%z’
          is replaced with the string ‘'-0330'’.

     ‘%Z’

          If ‘tzname()’ returns ‘None’, ‘%Z’ is replaced by an empty
          string.  Otherwise ‘%Z’ is replaced by the returned value,
          which must be a string.

     Changed in version 3.2: When the ‘%z’ directive is provided to the
     ‘strptime()’ method, an aware *note datetime: 60c. object will be
     produced.  The ‘tzinfo’ of the result will be set to a *note
     timezone: 62d. instance.

  7. When used with the ‘strptime()’ method, ‘%U’ and ‘%W’ are only used
     in calculations when the day of the week and the calendar year
     (‘%Y’) are specified.

  8. Similar to ‘%U’ and ‘%W’, ‘%V’ is only used in calculations when
     the day of the week and the ISO year (‘%G’) are specified in a
     ‘strptime()’ format string.  Also note that ‘%G’ and ‘%Y’ are not
     interchangable.


File: python.info,  Node: calendar --- General calendar-related functions,  Next: collections --- Container datatypes,  Prev: datetime --- Basic date and time types,  Up: Data Types

5.8.2 ‘calendar’ — General calendar-related functions
-----------------------------------------------------

`Source code:' Lib/calendar.py(1)

__________________________________________________________________

This module allows you to output calendars like the Unix ‘cal’ program,
and provides additional useful functions related to the calendar.  By
default, these calendars have Monday as the first day of the week, and
Sunday as the last (the European convention).  Use *note
setfirstweekday(): 12a4. to set the first day of the week to Sunday (6)
or to any other weekday.  Parameters that specify dates are given as
integers.  For related functionality, see also the *note datetime: 2f.
and *note time: 107. modules.

Most of these functions and classes rely on the *note datetime: 2f.
module which uses an idealized calendar, the current Gregorian calendar
extended in both directions.  This matches the definition of the
"proleptic Gregorian" calendar in Dershowitz and Reingold’s book
"Calendrical Calculations", where it’s the base calendar for all
computations.

 -- Class: calendar.Calendar (firstweekday=0)

     Creates a *note Calendar: 12a5. object.  `firstweekday' is an
     integer specifying the first day of the week.  ‘0’ is Monday (the
     default), ‘6’ is Sunday.

     A *note Calendar: 12a5. object provides several methods that can be
     used for preparing the calendar data for formatting.  This class
     doesn’t do any formatting itself.  This is the job of subclasses.

     *note Calendar: 12a5. instances have the following methods:

      -- Method: iterweekdays ()

          Return an iterator for the week day numbers that will be used
          for one week.  The first value from the iterator will be the
          same as the value of the *note firstweekday: 12a7. property.

      -- Method: itermonthdates (year, month)

          Return an iterator for the month `month' (1-12) in the year
          `year'.  This iterator will return all days (as *note
          datetime.date: 9c0. objects) for the month and all days before
          the start of the month or after the end of the month that are
          required to get a complete week.

      -- Method: itermonthdays2 (year, month)

          Return an iterator for the month `month' in the year `year'
          similar to *note itermonthdates(): 12a8.  Days returned will
          be tuples consisting of a day number and a week day number.

      -- Method: itermonthdays (year, month)

          Return an iterator for the month `month' in the year `year'
          similar to *note itermonthdates(): 12a8.  Days returned will
          simply be day numbers.

      -- Method: monthdatescalendar (year, month)

          Return a list of the weeks in the month `month' of the `year'
          as full weeks.  Weeks are lists of seven *note datetime.date:
          9c0. objects.

      -- Method: monthdays2calendar (year, month)

          Return a list of the weeks in the month `month' of the `year'
          as full weeks.  Weeks are lists of seven tuples of day numbers
          and weekday numbers.

      -- Method: monthdayscalendar (year, month)

          Return a list of the weeks in the month `month' of the `year'
          as full weeks.  Weeks are lists of seven day numbers.

      -- Method: yeardatescalendar (year, width=3)

          Return the data for the specified year ready for formatting.
          The return value is a list of month rows.  Each month row
          contains up to `width' months (defaulting to 3).  Each month
          contains between 4 and 6 weeks and each week contains 1–7
          days.  Days are *note datetime.date: 9c0. objects.

      -- Method: yeardays2calendar (year, width=3)

          Return the data for the specified year ready for formatting
          (similar to *note yeardatescalendar(): 12ae.).  Entries in the
          week lists are tuples of day numbers and weekday numbers.  Day
          numbers outside this month are zero.

      -- Method: yeardayscalendar (year, width=3)

          Return the data for the specified year ready for formatting
          (similar to *note yeardatescalendar(): 12ae.).  Entries in the
          week lists are day numbers.  Day numbers outside this month
          are zero.

 -- Class: calendar.TextCalendar (firstweekday=0)

     This class can be used to generate plain text calendars.

     *note TextCalendar: 12b1. instances have the following methods:

      -- Method: formatmonth (theyear, themonth, w=0, l=0)

          Return a month’s calendar in a multi-line string.  If `w' is
          provided, it specifies the width of the date columns, which
          are centered.  If `l' is given, it specifies the number of
          lines that each week will use.  Depends on the first weekday
          as specified in the constructor or set by the *note
          setfirstweekday(): 12a4. method.

      -- Method: prmonth (theyear, themonth, w=0, l=0)

          Print a month’s calendar as returned by *note formatmonth():
          12b2.

      -- Method: formatyear (theyear, w=2, l=1, c=6, m=3)

          Return a `m'-column calendar for an entire year as a
          multi-line string.  Optional parameters `w', `l', and `c' are
          for date column width, lines per week, and number of spaces
          between month columns, respectively.  Depends on the first
          weekday as specified in the constructor or set by the *note
          setfirstweekday(): 12a4. method.  The earliest year for which
          a calendar can be generated is platform-dependent.

      -- Method: pryear (theyear, w=2, l=1, c=6, m=3)

          Print the calendar for an entire year as returned by *note
          formatyear(): 12b4.

 -- Class: calendar.HTMLCalendar (firstweekday=0)

     This class can be used to generate HTML calendars.

     *note HTMLCalendar: 12b6. instances have the following methods:

      -- Method: formatmonth (theyear, themonth, withyear=True)

          Return a month’s calendar as an HTML table.  If `withyear' is
          true the year will be included in the header, otherwise just
          the month name will be used.

      -- Method: formatyear (theyear, width=3)

          Return a year’s calendar as an HTML table.  `width'
          (defaulting to 3) specifies the number of months per row.

      -- Method: formatyearpage (theyear, width=3, css='calendar.css',
               encoding=None)

          Return a year’s calendar as a complete HTML page.  `width'
          (defaulting to 3) specifies the number of months per row.
          `css' is the name for the cascading style sheet to be used.
          *note None: 19d. can be passed if no style sheet should be
          used.  `encoding' specifies the encoding to be used for the
          output (defaulting to the system default encoding).

 -- Class: calendar.LocaleTextCalendar (firstweekday=0, locale=None)

     This subclass of *note TextCalendar: 12b1. can be passed a locale
     name in the constructor and will return month and weekday names in
     the specified locale.  If this locale includes an encoding all
     strings containing month and weekday names will be returned as
     unicode.

 -- Class: calendar.LocaleHTMLCalendar (firstweekday=0, locale=None)

     This subclass of *note HTMLCalendar: 12b6. can be passed a locale
     name in the constructor and will return month and weekday names in
     the specified locale.  If this locale includes an encoding all
     strings containing month and weekday names will be returned as
     unicode.

     Note: The ‘formatweekday()’ and ‘formatmonthname()’ methods of
     these two classes temporarily change the current locale to the
     given `locale'.  Because the current locale is a process-wide
     setting, they are not thread-safe.

For simple text calendars this module provides the following functions.

 -- Function: calendar.setfirstweekday (weekday)

     Sets the weekday (‘0’ is Monday, ‘6’ is Sunday) to start each week.
     The values ‘MONDAY’, ‘TUESDAY’, ‘WEDNESDAY’, ‘THURSDAY’, ‘FRIDAY’,
     ‘SATURDAY’, and ‘SUNDAY’ are provided for convenience.  For
     example, to set the first weekday to Sunday:

          import calendar
          calendar.setfirstweekday(calendar.SUNDAY)

 -- Function: calendar.firstweekday ()

     Returns the current setting for the weekday to start each week.

 -- Function: calendar.isleap (year)

     Returns *note True: 9ff. if `year' is a leap year, otherwise *note
     False: 60d.

 -- Function: calendar.leapdays (y1, y2)

     Returns the number of leap years in the range from `y1' to `y2'
     (exclusive), where `y1' and `y2' are years.

     This function works for ranges spanning a century change.

 -- Function: calendar.weekday (year, month, day)

     Returns the day of the week (‘0’ is Monday) for `year'
     (‘1970’–...), `month' (‘1’–‘12’), `day' (‘1’–‘31’).

 -- Function: calendar.weekheader (n)

     Return a header containing abbreviated weekday names.  `n'
     specifies the width in characters for one weekday.

 -- Function: calendar.monthrange (year, month)

     Returns weekday of first day of the month and number of days in
     month, for the specified `year' and `month'.

 -- Function: calendar.monthcalendar (year, month)

     Returns a matrix representing a month’s calendar.  Each row
     represents a week; days outside of the month a represented by
     zeros.  Each week begins with Monday unless set by *note
     setfirstweekday(): 12a4.

 -- Function: calendar.prmonth (theyear, themonth, w=0, l=0)

     Prints a month’s calendar as returned by *note month(): 12c3.

 -- Function: calendar.month (theyear, themonth, w=0, l=0)

     Returns a month’s calendar in a multi-line string using the
     ‘formatmonth()’ of the *note TextCalendar: 12b1. class.

 -- Function: calendar.prcal (year, w=0, l=0, c=6, m=3)

     Prints the calendar for an entire year as returned by *note
     calendar(): 15.

 -- Function: calendar.calendar (year, w=2, l=1, c=6, m=3)

     Returns a 3-column calendar for an entire year as a multi-line
     string using the ‘formatyear()’ of the *note TextCalendar: 12b1.
     class.

 -- Function: calendar.timegm (tuple)

     An unrelated but handy function that takes a time tuple such as
     returned by the *note gmtime(): 786. function in the *note time:
     107. module, and returns the corresponding Unix timestamp value,
     assuming an epoch of 1970, and the POSIX encoding.  In fact, *note
     time.gmtime(): 786. and *note timegm(): 12c6. are each others’
     inverse.

The *note calendar: 15. module exports the following data attributes:

 -- Data: calendar.day_name

     An array that represents the days of the week in the current
     locale.

 -- Data: calendar.day_abbr

     An array that represents the abbreviated days of the week in the
     current locale.

 -- Data: calendar.month_name

     An array that represents the months of the year in the current
     locale.  This follows normal convention of January being month
     number 1, so it has a length of 13 and ‘month_name[0]’ is the empty
     string.

 -- Data: calendar.month_abbr

     An array that represents the abbreviated months of the year in the
     current locale.  This follows normal convention of January being
     month number 1, so it has a length of 13 and ‘month_abbr[0]’ is the
     empty string.

See also
........

Module *note datetime: 2f.

     Object-oriented interface to dates and times with similar
     functionality to the *note time: 107. module.

Module *note time: 107.

     Low-level time related functions.

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/calendar.py


File: python.info,  Node: collections --- Container datatypes,  Next: collections abc --- Abstract Base Classes for Containers,  Prev: calendar --- General calendar-related functions,  Up: Data Types

5.8.3 ‘collections’ — Container datatypes
-----------------------------------------

`Source code:' Lib/collections/__init__.py(1)

__________________________________________________________________

This module implements specialized container datatypes providing
alternatives to Python’s general purpose built-in containers, *note
dict: 3b0, *note list: 25d, *note set: 7be, and *note tuple: 25c.

*note namedtuple(): 229.  factory function for creating tuple subclasses with named fields
                          
                          
*note deque: 24e.         list-like container with fast appends and pops on either end
                          
                          
*note ChainMap: 601.      dict-like class for creating a single view of multiple mappings
                          
                          
*note Counter: 602.       dict subclass for counting hashable objects
                          
                          
*note OrderedDict: 1bd.   dict subclass that remembers the order entries were added
                          
                          
*note defaultdict: 77d.   dict subclass that calls a factory function to supply missing values
                          
                          
*note UserDict: 12cd.     wrapper around dictionary objects for easier dict subclassing
                          
                          
*note UserList: 12ce.     wrapper around list objects for easier list subclassing
                          
                          
*note UserString: 253.    wrapper around string objects for easier string subclassing
                          

Changed in version 3.3: Moved *note Collections Abstract Base Classes:
12cf. to the *note collections.abc: 1f. module.  For backwards
compatibility, they continue to be visible in this module as well.

* Menu:

* ChainMap objects:: 
* Counter objects:: 
* deque objects:: 
* defaultdict objects:: 
* namedtuple() Factory Function for Tuples with Named Fields: namedtuple Factory Function for Tuples with Named Fields. 
* OrderedDict objects:: 
* UserDict objects:: 
* UserList objects:: 
* UserString objects:: 

   ---------- Footnotes ----------

   (1) 
https://hg.python.org/cpython/file/default/Lib/collections/__init__.py


File: python.info,  Node: ChainMap objects,  Next: Counter objects,  Up: collections --- Container datatypes

5.8.3.1 ‘ChainMap’ objects
..........................

New in version 3.3.

A *note ChainMap: 601. class is provided for quickly linking a number of
mappings so they can be treated as a single unit.  It is often much
faster than creating a new dictionary and running multiple *note
update(): a45. calls.

The class can be used to simulate nested scopes and is useful in
templating.

 -- Class: collections.ChainMap (*maps)

     A *note ChainMap: 601. groups multiple dicts or other mappings
     together to create a single, updateable view.  If no `maps' are
     specified, a single empty dictionary is provided so that a new
     chain always has at least one mapping.

     The underlying mappings are stored in a list.  That list is public
     and can accessed or updated using the `maps' attribute.  There is
     no other state.

     Lookups search the underlying mappings successively until a key is
     found.  In contrast, writes, updates, and deletions only operate on
     the first mapping.

     A *note ChainMap: 601. incorporates the underlying mappings by
     reference.  So, if one of the underlying mappings gets updated,
     those changes will be reflected in *note ChainMap: 601.

     All of the usual dictionary methods are supported.  In addition,
     there is a `maps' attribute, a method for creating new subcontexts,
     and a property for accessing all but the first mapping:

      -- Attribute: maps

          A user updateable list of mappings.  The list is ordered from
          first-searched to last-searched.  It is the only stored state
          and can be modified to change which mappings are searched.
          The list should always contain at least one mapping.

      -- Method: new_child (m=None)

          Returns a new *note ChainMap: 601. containing a new map
          followed by all of the maps in the current instance.  If ‘m’
          is specified, it becomes the new map at the front of the list
          of mappings; if not specified, an empty dict is used, so that
          a call to ‘d.new_child()’ is equivalent to: ‘ChainMap({},
          *d.maps)’.  This method is used for creating subcontexts that
          can be updated without altering values in any of the parent
          mappings.

          Changed in version 3.4: The optional ‘m’ parameter was added.

      -- Attribute: parents

          Property returning a new *note ChainMap: 601. containing all
          of the maps in the current instance except the first one.
          This is useful for skipping the first map in the search.  Use
          cases are similar to those for the *note nonlocal: 8a6.
          keyword used in *note nested scopes: 12d3.  The use cases also
          parallel those for the built-in *note super(): 56a. function.
          A reference to ‘d.parents’ is equivalent to:
          ‘ChainMap(*d.maps[1:])’.

See also
........

   * The MultiContext class(1) in the Enthought CodeTools package(2) has
     options to support writing to any mapping in the chain.

   * Django’s Context class(3) for templating is a read-only chain of
     mappings.  It also features pushing and popping of contexts similar
     to the *note new_child(): 41a. method and the *note parents():
     12d2. property.

   * The Nested Contexts recipe(4) has options to control whether writes
     and other mutations apply only to the first mapping or to any
     mapping in the chain.

   * A greatly simplified read-only version of Chainmap(5).

* Menu:

* ChainMap Examples and Recipes:: 

   ---------- Footnotes ----------

   (1) 
https://github.com/enthought/codetools/blob/4.0.0/codetools/contexts/multi_context.py

   (2) https://github.com/enthought/codetools

   (3) 
https://github.com/django/django/blob/master/django/template/context.py

   (4) http://code.activestate.com/recipes/577434/

   (5) http://code.activestate.com/recipes/305268/


File: python.info,  Node: ChainMap Examples and Recipes,  Up: ChainMap objects

5.8.3.2 ‘ChainMap’ Examples and Recipes
.......................................

This section shows various approaches to working with chained maps.

Example of simulating Python’s internal lookup chain:

     import builtins
     pylookup = ChainMap(locals(), globals(), vars(builtins))

Example of letting user specified command-line arguments take precedence
over environment variables which in turn take precedence over default
values:

     import os, argparse

     defaults = {'color': 'red', 'user': 'guest'}

     parser = argparse.ArgumentParser()
     parser.add_argument('-u', '--user')
     parser.add_argument('-c', '--color')
     namespace = parser.parse_args()
     command_line_args = {k:v for k, v in vars(namespace).items() if v}

     combined = ChainMap(command_line_args, os.environ, defaults)
     print(combined['color'])
     print(combined['user'])

Example patterns for using the *note ChainMap: 601. class to simulate
nested contexts:

     c = ChainMap()        # Create root context
     d = c.new_child()     # Create nested child context
     e = c.new_child()     # Child of c, independent from d
     e.maps[0]             # Current context dictionary -- like Python's locals()
     e.maps[-1]            # Root context -- like Python's globals()
     e.parents             # Enclosing context chain -- like Python's nonlocals

     d['x']                # Get first key in the chain of contexts
     d['x'] = 1            # Set value in current context
     del d['x']            # Delete from current context
     list(d)               # All nested values
     k in d                # Check all nested values
     len(d)                # Number of nested values
     d.items()             # All nested items
     dict(d)               # Flatten into a regular dictionary

The *note ChainMap: 601. class only makes updates (writes and deletions)
to the first mapping in the chain while lookups will search the full
chain.  However, if deep writes and deletions are desired, it is easy to
make a subclass that updates keys found deeper in the chain:

     class DeepChainMap(ChainMap):
         'Variant of ChainMap that allows direct updates to inner scopes'

         def __setitem__(self, key, value):
             for mapping in self.maps:
                 if key in mapping:
                     mapping[key] = value
                     return
             self.maps[0][key] = value

         def __delitem__(self, key):
             for mapping in self.maps:
                 if key in mapping:
                     del mapping[key]
                     return
             raise KeyError(key)

     >>> d = DeepChainMap({'zebra': 'black'}, {'elephant': 'blue'}, {'lion': 'yellow'})
     >>> d['lion'] = 'orange'         # update an existing key two levels down
     >>> d['snake'] = 'red'           # new keys get added to the topmost dict
     >>> del d['elephant']            # remove an existing key one level down
     DeepChainMap({'zebra': 'black', 'snake': 'red'}, {}, {'lion': 'orange'})


File: python.info,  Node: Counter objects,  Next: deque objects,  Prev: ChainMap objects,  Up: collections --- Container datatypes

5.8.3.3 ‘Counter’ objects
.........................

A counter tool is provided to support convenient and rapid tallies.  For
example:

     >>> # Tally occurrences of words in a list
     >>> cnt = Counter()
     >>> for word in ['red', 'blue', 'red', 'green', 'blue', 'blue']:
     ...     cnt[word] += 1
     >>> cnt
     Counter({'blue': 3, 'red': 2, 'green': 1})

     >>> # Find the ten most common words in Hamlet
     >>> import re
     >>> words = re.findall(r'\w+', open('hamlet.txt').read().lower())
     >>> Counter(words).most_common(10)
     [('the', 1143), ('and', 966), ('to', 762), ('of', 669), ('i', 631),
      ('you', 554),  ('a', 546), ('my', 514), ('hamlet', 471), ('in', 451)]

 -- Class: collections.Counter ([iterable-or-mapping])

     A *note Counter: 602. is a *note dict: 3b0. subclass for counting
     hashable objects.  It is an unordered collection where elements are
     stored as dictionary keys and their counts are stored as dictionary
     values.  Counts are allowed to be any integer value including zero
     or negative counts.  The *note Counter: 602. class is similar to
     bags or multisets in other languages.

     Elements are counted from an `iterable' or initialized from another
     `mapping' (or counter):

          >>> c = Counter()                           # a new, empty counter
          >>> c = Counter('gallahad')                 # a new counter from an iterable
          >>> c = Counter({'red': 4, 'blue': 2})      # a new counter from a mapping
          >>> c = Counter(cats=4, dogs=8)             # a new counter from keyword args

     Counter objects have a dictionary interface except that they return
     a zero count for missing items instead of raising a *note KeyError:
     1a7.:

          >>> c = Counter(['eggs', 'ham'])
          >>> c['bacon']                              # count of a missing element is zero
          0

     Setting a count to zero does not remove an element from a counter.
     Use ‘del’ to remove it entirely:

          >>> c['sausage'] = 0                        # counter entry with a zero count
          >>> del c['sausage']                        # del actually removes the entry

     New in version 3.1.

     Counter objects support three methods beyond those available for
     all dictionaries:

      -- Method: elements ()

          Return an iterator over elements repeating each as many times
          as its count.  Elements are returned in arbitrary order.  If
          an element’s count is less than one, *note elements(): 90c.
          will ignore it.

               >>> c = Counter(a=4, b=2, c=0, d=-2)
               >>> list(c.elements())
               ['a', 'a', 'a', 'a', 'b', 'b']

      -- Method: most_common ([n])

          Return a list of the `n' most common elements and their counts
          from the most common to the least.  If `n' is omitted or
          ‘None’, *note most_common(): 90b. returns `all' elements in
          the counter.  Elements with equal counts are ordered
          arbitrarily:

               >>> Counter('abracadabra').most_common(3)
               [('a', 5), ('r', 2), ('b', 2)]

      -- Method: subtract ([iterable-or-mapping])

          Elements are subtracted from an `iterable' or from another
          `mapping' (or counter).  Like *note dict.update(): a45. but
          subtracts counts instead of replacing them.  Both inputs and
          outputs may be zero or negative.

               >>> c = Counter(a=4, b=2, c=0, d=-2)
               >>> d = Counter(a=1, b=2, c=3, d=4)
               >>> c.subtract(d)
               >>> c
               Counter({'a': 3, 'b': 0, 'c': -3, 'd': -6})

          New in version 3.2.

     The usual dictionary methods are available for *note Counter: 602.
     objects except for two which work differently for counters.

      -- Method: fromkeys (iterable)

          This class method is not implemented for *note Counter: 602.
          objects.

      -- Method: update ([iterable-or-mapping])

          Elements are counted from an `iterable' or added-in from
          another `mapping' (or counter).  Like *note dict.update():
          a45. but adds counts instead of replacing them.  Also, the
          `iterable' is expected to be a sequence of elements, not a
          sequence of ‘(key, value)’ pairs.

Common patterns for working with *note Counter: 602. objects:

     sum(c.values())                 # total of all counts
     c.clear()                       # reset all counts
     list(c)                         # list unique elements
     set(c)                          # convert to a set
     dict(c)                         # convert to a regular dictionary
     c.items()                       # convert to a list of (elem, cnt) pairs
     Counter(dict(list_of_pairs))    # convert from a list of (elem, cnt) pairs
     c.most_common()[:-n-1:-1]       # n least common elements
     +c                              # remove zero and negative counts

Several mathematical operations are provided for combining *note
Counter: 602. objects to produce multisets (counters that have counts
greater than zero).  Addition and subtraction combine counters by adding
or subtracting the counts of corresponding elements.  Intersection and
union return the minimum and maximum of corresponding counts.  Each
operation can accept inputs with signed counts, but the output will
exclude results with counts of zero or less.

     >>> c = Counter(a=3, b=1)
     >>> d = Counter(a=1, b=2)
     >>> c + d                       # add two counters together:  c[x] + d[x]
     Counter({'a': 4, 'b': 3})
     >>> c - d                       # subtract (keeping only positive counts)
     Counter({'a': 2})
     >>> c & d                       # intersection:  min(c[x], d[x])
     Counter({'a': 1, 'b': 1})
     >>> c | d                       # union:  max(c[x], d[x])
     Counter({'a': 3, 'b': 2})

Unary addition and subtraction are shortcuts for adding an empty counter
or subtracting from an empty counter.

     >>> c = Counter(a=2, b=-4)
     >>> +c
     Counter({'a': 2})
     >>> -c
     Counter({'b': 4})

New in version 3.3: Added support for unary plus, unary minus, and
in-place multiset operations.

     Note: Counters were primarily designed to work with positive
     integers to represent running counts; however, care was taken to
     not unnecessarily preclude use cases needing other types or
     negative values.  To help with those use cases, this section
     documents the minimum range and type restrictions.

        * The *note Counter: 602. class itself is a dictionary subclass
          with no restrictions on its keys and values.  The values are
          intended to be numbers representing counts, but you `could'
          store anything in the value field.

        * The ‘most_common()’ method requires only that the values be
          orderable.

        * For in-place operations such as ‘c[key] += 1’, the value type
          need only support addition and subtraction.  So fractions,
          floats, and decimals would work and negative values are
          supported.  The same is also true for ‘update()’ and
          ‘subtract()’ which allow negative and zero values for both
          inputs and outputs.

        * The multiset methods are designed only for use cases with
          positive values.  The inputs may be negative or zero, but only
          outputs with positive values are created.  There are no type
          restrictions, but the value type needs to support addition,
          subtraction, and comparison.

        * The ‘elements()’ method requires integer counts.  It ignores
          zero and negative counts.

See also
........

   * Bag class(1) in Smalltalk.

   * Wikipedia entry for Multisets(2).

   * C++ multisets(3) tutorial with examples.

   * For mathematical operations on multisets and their use cases, see
     `Knuth, Donald.  The Art of Computer Programming Volume II, Section
     4.6.3, Exercise 19'.

   * To enumerate all distinct multisets of a given size over a given
     set of elements, see *note
     itertools.combinations_with_replacement(): 87d.:

          map(Counter, combinations_with_replacement(’ABC’, 2)) –> AA AB
          AC BB BC CC

   ---------- Footnotes ----------

   (1) 
https://www.gnu.org/software/smalltalk/manual-base/html_node/Bag.html

   (2) https://en.wikipedia.org/wiki/Multiset

   (3) 
http://www.java2s.com/Tutorial/Cpp/0380__set-multiset/Catalog0380__set-multiset.htm


File: python.info,  Node: deque objects,  Next: defaultdict objects,  Prev: Counter objects,  Up: collections --- Container datatypes

5.8.3.4 ‘deque’ objects
.......................

 -- Class: collections.deque ([iterable[, maxlen]])

     Returns a new deque object initialized left-to-right (using *note
     append(): 12d9.) with data from `iterable'.  If `iterable' is not
     specified, the new deque is empty.

     Deques are a generalization of stacks and queues (the name is
     pronounced "deck" and is short for "double-ended queue").  Deques
     support thread-safe, memory efficient appends and pops from either
     side of the deque with approximately the same O(1) performance in
     either direction.

     Though *note list: 25d. objects support similar operations, they
     are optimized for fast fixed-length operations and incur O(n)
     memory movement costs for ‘pop(0)’ and ‘insert(0, v)’ operations
     which change both the size and position of the underlying data
     representation.

     If `maxlen' is not specified or is `None', deques may grow to an
     arbitrary length.  Otherwise, the deque is bounded to the specified
     maximum length.  Once a bounded length deque is full, when new
     items are added, a corresponding number of items are discarded from
     the opposite end.  Bounded length deques provide functionality
     similar to the ‘tail’ filter in Unix.  They are also useful for
     tracking transactions and other pools of data where only the most
     recent activity is of interest.

     Deque objects support the following methods:

      -- Method: append (x)

          Add `x' to the right side of the deque.

      -- Method: appendleft (x)

          Add `x' to the left side of the deque.

      -- Method: clear ()

          Remove all elements from the deque leaving it with length 0.

      -- Method: copy ()

          Create a shallow copy of the deque.

          New in version 3.5.

      -- Method: count (x)

          Count the number of deque elements equal to `x'.

          New in version 3.2.

      -- Method: extend (iterable)

          Extend the right side of the deque by appending elements from
          the iterable argument.

      -- Method: extendleft (iterable)

          Extend the left side of the deque by appending elements from
          `iterable'.  Note, the series of left appends results in
          reversing the order of elements in the iterable argument.

      -- Method: index (x[, start[, stop]])

          Return the position of `x' in the deque (at or after index
          `start' and before index `stop').  Returns the first match or
          raises *note ValueError: 19c. if not found.

          New in version 3.5.

      -- Method: insert (i, x)

          Insert `x' into the deque at position `i'.

          If the insertion would cause a bounded deque to grow beyond
          `maxlen', an *note IndexError: afb. is raised.

          New in version 3.5.

      -- Method: pop ()

          Remove and return an element from the right side of the deque.
          If no elements are present, raises an *note IndexError: afb.

      -- Method: popleft ()

          Remove and return an element from the left side of the deque.
          If no elements are present, raises an *note IndexError: afb.

      -- Method: remove (value)

          Remove the first occurrence of `value'.  If not found, raises
          a *note ValueError: 19c.

      -- Method: reverse ()

          Reverse the elements of the deque in-place and then return
          ‘None’.

          New in version 3.2.

      -- Method: rotate (n)

          Rotate the deque `n' steps to the right.  If `n' is negative,
          rotate to the left.  Rotating one step to the right is
          equivalent to: ‘d.appendleft(d.pop())’.

     Deque objects also provide one read-only attribute:

      -- Attribute: maxlen

          Maximum size of a deque or `None' if unbounded.

          New in version 3.1.

In addition to the above, deques support iteration, pickling, ‘len(d)’,
‘reversed(d)’, ‘copy.copy(d)’, ‘copy.deepcopy(d)’, membership testing
with the *note in: 37d. operator, and subscript references such as
‘d[-1]’.  Indexed access is O(1) at both ends but slows to O(n) in the
middle.  For fast random access, use lists instead.

Starting in version 3.5, deques support ‘__add__()’, ‘__mul__()’, and
‘__imul__()’.

Example:

     >>> from collections import deque
     >>> d = deque('ghi')                 # make a new deque with three items
     >>> for elem in d:                   # iterate over the deque's elements
     ...     print(elem.upper())
     G
     H
     I

     >>> d.append('j')                    # add a new entry to the right side
     >>> d.appendleft('f')                # add a new entry to the left side
     >>> d                                # show the representation of the deque
     deque(['f', 'g', 'h', 'i', 'j'])

     >>> d.pop()                          # return and remove the rightmost item
     'j'
     >>> d.popleft()                      # return and remove the leftmost item
     'f'
     >>> list(d)                          # list the contents of the deque
     ['g', 'h', 'i']
     >>> d[0]                             # peek at leftmost item
     'g'
     >>> d[-1]                            # peek at rightmost item
     'i'

     >>> list(reversed(d))                # list the contents of a deque in reverse
     ['i', 'h', 'g']
     >>> 'h' in d                         # search the deque
     True
     >>> d.extend('jkl')                  # add multiple elements at once
     >>> d
     deque(['g', 'h', 'i', 'j', 'k', 'l'])
     >>> d.rotate(1)                      # right rotation
     >>> d
     deque(['l', 'g', 'h', 'i', 'j', 'k'])
     >>> d.rotate(-1)                     # left rotation
     >>> d
     deque(['g', 'h', 'i', 'j', 'k', 'l'])

     >>> deque(reversed(d))               # make a new deque in reverse order
     deque(['l', 'k', 'j', 'i', 'h', 'g'])
     >>> d.clear()                        # empty the deque
     >>> d.pop()                          # cannot pop from an empty deque
     Traceback (most recent call last):
         File "<pyshell#6>", line 1, in -toplevel-
             d.pop()
     IndexError: pop from an empty deque

     >>> d.extendleft('abc')              # extendleft() reverses the input order
     >>> d
     deque(['c', 'b', 'a'])

* Menu:

* deque Recipes:: 


File: python.info,  Node: deque Recipes,  Up: deque objects

5.8.3.5 ‘deque’ Recipes
.......................

This section shows various approaches to working with deques.

Bounded length deques provide functionality similar to the ‘tail’ filter
in Unix:

     def tail(filename, n=10):
         'Return the last n lines of a file'
         with open(filename) as f:
             return deque(f, n)

Another approach to using deques is to maintain a sequence of recently
added elements by appending to the right and popping to the left:

     def moving_average(iterable, n=3):
         # moving_average([40, 30, 50, 46, 39, 44]) --> 40.0 42.0 45.0 43.0
         # http://en.wikipedia.org/wiki/Moving_average
         it = iter(iterable)
         d = deque(itertools.islice(it, n-1))
         d.appendleft(0)
         s = sum(d)
         for elem in it:
             s += elem - d.popleft()
             d.append(elem)
             yield s / n

The ‘rotate()’ method provides a way to implement *note deque: 24e.
slicing and deletion.  For example, a pure Python implementation of ‘del
d[n]’ relies on the ‘rotate()’ method to position elements to be popped:

     def delete_nth(d, n):
         d.rotate(-n)
         d.popleft()
         d.rotate(n)

To implement *note deque: 24e. slicing, use a similar approach applying
‘rotate()’ to bring a target element to the left side of the deque.
Remove old entries with ‘popleft()’, add new entries with ‘extend()’,
and then reverse the rotation.  With minor variations on that approach,
it is easy to implement Forth style stack manipulations such as ‘dup’,
‘drop’, ‘swap’, ‘over’, ‘pick’, ‘rot’, and ‘roll’.


File: python.info,  Node: defaultdict objects,  Next: namedtuple Factory Function for Tuples with Named Fields,  Prev: deque objects,  Up: collections --- Container datatypes

5.8.3.6 ‘defaultdict’ objects
.............................

 -- Class: collections.defaultdict ([default_factory[, ...]])

     Returns a new dictionary-like object.  *note defaultdict: 77d. is a
     subclass of the built-in *note dict: 3b0. class.  It overrides one
     method and adds one writable instance variable.  The remaining
     functionality is the same as for the *note dict: 3b0. class and is
     not documented here.

     The first argument provides the initial value for the *note
     default_factory: 12e4. attribute; it defaults to ‘None’.  All
     remaining arguments are treated the same as if they were passed to
     the *note dict: 3b0. constructor, including keyword arguments.

     *note defaultdict: 77d. objects support the following method in
     addition to the standard *note dict: 3b0. operations:

      -- Method: __missing__ (key)

          If the *note default_factory: 12e4. attribute is ‘None’, this
          raises a *note KeyError: 1a7. exception with the `key' as
          argument.

          If *note default_factory: 12e4. is not ‘None’, it is called
          without arguments to provide a default value for the given
          `key', this value is inserted in the dictionary for the `key',
          and returned.

          If calling *note default_factory: 12e4. raises an exception
          this exception is propagated unchanged.

          This method is called by the *note __getitem__(): a84. method
          of the *note dict: 3b0. class when the requested key is not
          found; whatever it returns or raises is then returned or
          raised by *note __getitem__(): a84.

          Note that *note __missing__(): 12e5. is `not' called for any
          operations besides *note __getitem__(): a84.  This means that
          ‘get()’ will, like normal dictionaries, return ‘None’ as a
          default rather than using *note default_factory: 12e4.

     *note defaultdict: 77d. objects support the following instance
     variable:

      -- Attribute: default_factory

          This attribute is used by the *note __missing__(): 12e5.
          method; it is initialized from the first argument to the
          constructor, if present, or to ‘None’, if absent.

* Menu:

* defaultdict Examples:: 


File: python.info,  Node: defaultdict Examples,  Up: defaultdict objects

5.8.3.7 ‘defaultdict’ Examples
..............................

Using *note list: 25d. as the ‘default_factory’, it is easy to group a
sequence of key-value pairs into a dictionary of lists:

     >>> s = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]
     >>> d = defaultdict(list)
     >>> for k, v in s:
     ...     d[k].append(v)
     ...
     >>> list(d.items())
     [('blue', [2, 4]), ('red', [1]), ('yellow', [1, 3])]

When each key is encountered for the first time, it is not already in
the mapping; so an entry is automatically created using the
‘default_factory’ function which returns an empty *note list: 25d.  The
‘list.append()’ operation then attaches the value to the new list.  When
keys are encountered again, the look-up proceeds normally (returning the
list for that key) and the ‘list.append()’ operation adds another value
to the list.  This technique is simpler and faster than an equivalent
technique using *note dict.setdefault(): 5e1.:

     >>> d = {}
     >>> for k, v in s:
     ...     d.setdefault(k, []).append(v)
     ...
     >>> list(d.items())
     [('blue', [2, 4]), ('red', [1]), ('yellow', [1, 3])]

Setting the ‘default_factory’ to *note int: 227. makes the *note
defaultdict: 77d. useful for counting (like a bag or multiset in other
languages):

     >>> s = 'mississippi'
     >>> d = defaultdict(int)
     >>> for k in s:
     ...     d[k] += 1
     ...
     >>> list(d.items())
     [('i', 4), ('p', 2), ('s', 4), ('m', 1)]

When a letter is first encountered, it is missing from the mapping, so
the ‘default_factory’ function calls *note int(): 227. to supply a
default count of zero.  The increment operation then builds up the count
for each letter.

The function *note int(): 227. which always returns zero is just a
special case of constant functions.  A faster and more flexible way to
create constant functions is to use a lambda function which can supply
any constant value (not just zero):

     >>> def constant_factory(value):
     ...     return lambda: value
     >>> d = defaultdict(constant_factory('<missing>'))
     >>> d.update(name='John', action='ran')
     >>> '%(name)s %(action)s to %(object)s' % d
     'John ran to <missing>'

Setting the ‘default_factory’ to *note set: 7be. makes the *note
defaultdict: 77d. useful for building a dictionary of sets:

     >>> s = [('red', 1), ('blue', 2), ('red', 3), ('blue', 4), ('red', 1), ('blue', 4)]
     >>> d = defaultdict(set)
     >>> for k, v in s:
     ...     d[k].add(v)
     ...
     >>> list(d.items())
     [('blue', {2, 4}), ('red', {1, 3})]


File: python.info,  Node: namedtuple Factory Function for Tuples with Named Fields,  Next: OrderedDict objects,  Prev: defaultdict objects,  Up: collections --- Container datatypes

5.8.3.8 ‘namedtuple()’ Factory Function for Tuples with Named Fields
....................................................................

Named tuples assign meaning to each position in a tuple and allow for
more readable, self-documenting code.  They can be used wherever regular
tuples are used, and they add the ability to access fields by name
instead of position index.

 -- Function: collections.namedtuple (typename, field_names,
          verbose=False, rename=False)

     Returns a new tuple subclass named `typename'.  The new subclass is
     used to create tuple-like objects that have fields accessible by
     attribute lookup as well as being indexable and iterable.
     Instances of the subclass also have a helpful docstring (with
     typename and field_names) and a helpful *note __repr__(): 7bd.
     method which lists the tuple contents in a ‘name=value’ format.

     The `field_names' are a single string with each fieldname separated
     by whitespace and/or commas, for example ‘'x y'’ or ‘'x, y'’.
     Alternatively, `field_names' can be a sequence of strings such as
     ‘['x', 'y']’.

     Any valid Python identifier may be used for a fieldname except for
     names starting with an underscore.  Valid identifiers consist of
     letters, digits, and underscores but do not start with a digit or
     underscore and cannot be a *note keyword: a4. such as `class',
     `for', `return', `global', `pass', or `raise'.

     If `rename' is true, invalid fieldnames are automatically replaced
     with positional names.  For example, ‘['abc', 'def', 'ghi', 'abc']’
     is converted to ‘['abc', '_1', 'ghi', '_3']’, eliminating the
     keyword ‘def’ and the duplicate fieldname ‘abc’.

     If `verbose' is true, the class definition is printed after it is
     built.  This option is outdated; instead, it is simpler to print
     the ‘_source’ attribute.

     Named tuple instances do not have per-instance dictionaries, so
     they are lightweight and require no more memory than regular
     tuples.

     For simple uses, where the only requirement is to be able to refer
     to a set of values by name using attribute-style access, the *note
     types.SimpleNamespace: 5ca. type can be a suitable alternative to
     using a namedtuple.

     Changed in version 3.1: Added support for `rename'.

     >>> # Basic example
     >>> Point = namedtuple('Point', ['x', 'y'])
     >>> p = Point(11, y=22)     # instantiate with positional or keyword arguments
     >>> p[0] + p[1]             # indexable like the plain tuple (11, 22)
     33
     >>> x, y = p                # unpack like a regular tuple
     >>> x, y
     (11, 22)
     >>> p.x + p.y               # fields also accessible by name
     33
     >>> p                       # readable __repr__ with a name=value style
     Point(x=11, y=22)

Named tuples are especially useful for assigning field names to result
tuples returned by the *note csv: 29. or *note sqlite3: f0. modules:

     EmployeeRecord = namedtuple('EmployeeRecord', 'name, age, title, department, paygrade')

     import csv
     for emp in map(EmployeeRecord._make, csv.reader(open("employees.csv", "rb"))):
         print(emp.name, emp.title)

     import sqlite3
     conn = sqlite3.connect('/companydata')
     cursor = conn.cursor()
     cursor.execute('SELECT name, age, title, department, paygrade FROM employees')
     for emp in map(EmployeeRecord._make, cursor.fetchall()):
         print(emp.name, emp.title)

In addition to the methods inherited from tuples, named tuples support
three additional methods and two attributes.  To prevent conflicts with
field names, the method and attribute names start with an underscore.

 -- Class Method: somenamedtuple._make (iterable)

     Class method that makes a new instance from an existing sequence or
     iterable.

          >>> t = [11, 22]
          >>> Point._make(t)
          Point(x=11, y=22)

 -- Method: somenamedtuple._asdict ()

     Return a new *note OrderedDict: 1bd. which maps field names to
     their corresponding values:

          >>> p = Point(x=11, y=22)
          >>> p._asdict()
          OrderedDict([('x', 11), ('y', 22)])

     Changed in version 3.1: Returns an *note OrderedDict: 1bd. instead
     of a regular *note dict: 3b0.

 -- Method: somenamedtuple._replace (kwargs)

     Return a new instance of the named tuple replacing specified fields
     with new values:

          >>> p = Point(x=11, y=22)
          >>> p._replace(x=33)
          Point(x=33, y=22)

          >>> for partnum, record in inventory.items():
          ...     inventory[partnum] = record._replace(price=newprices[partnum], timestamp=time.now())

 -- Attribute: somenamedtuple._source

     A string with the pure Python source code used to create the named
     tuple class.  The source makes the named tuple self-documenting.
     It can be printed, executed using *note exec(): 8ac, or saved to a
     file and imported.

     New in version 3.3.

 -- Attribute: somenamedtuple._fields

     Tuple of strings listing the field names.  Useful for introspection
     and for creating new named tuple types from existing named tuples.

          >>> p._fields            # view the field names
          ('x', 'y')

          >>> Color = namedtuple('Color', 'red green blue')
          >>> Pixel = namedtuple('Pixel', Point._fields + Color._fields)
          >>> Pixel(11, 22, 128, 255, 0)
          Pixel(x=11, y=22, red=128, green=255, blue=0)

To retrieve a field whose name is stored in a string, use the *note
getattr(): 781. function:

     >>> getattr(p, 'x')
     11

To convert a dictionary to a named tuple, use the double-star-operator
(as described in *note Unpacking Argument Lists: c17.):

     >>> d = {'x': 11, 'y': 22}
     >>> Point(**d)
     Point(x=11, y=22)

Since a named tuple is a regular Python class, it is easy to add or
change functionality with a subclass.  Here is how to add a calculated
field and a fixed-width print format:

     >>> class Point(namedtuple('Point', 'x y')):
             __slots__ = ()
             @property
             def hypot(self):
                 return (self.x ** 2 + self.y ** 2) ** 0.5
             def __str__(self):
                 return 'Point: x=%6.3f  y=%6.3f  hypot=%6.3f' % (self.x, self.y, self.hypot)

     >>> for p in Point(3, 4), Point(14, 5/7):
             print(p)
     Point: x= 3.000  y= 4.000  hypot= 5.000
     Point: x=14.000  y= 0.714  hypot=14.018

The subclass shown above sets ‘__slots__’ to an empty tuple.  This helps
keep memory requirements low by preventing the creation of instance
dictionaries.

Subclassing is not useful for adding new, stored fields.  Instead,
simply create a new named tuple type from the ‘_fields’ attribute:

     >>> Point3D = namedtuple('Point3D', Point._fields + ('z',))

Docstrings can be customized by making direct assignments to the
‘__doc__’ fields:

     >>> Book = namedtuple('Book', ['id', 'title', 'authors'])
     >>> Book.__doc__ += ': Hardcover book in active collection'
     >>> Book.id.__doc__ = '13-digit ISBN'
     >>> Book.title.__doc__ = 'Title of first printing'
     >>> Book.authors.__doc__ = 'List of authors sorted by last name'

Changed in version 3.5: Property docstrings became writeable.

Default values can be implemented by using ‘_replace()’ to customize a
prototype instance:

     >>> Account = namedtuple('Account', 'owner balance transaction_count')
     >>> default_account = Account('<owner name>', 0.0, 0)
     >>> johns_account = default_account._replace(owner='John')
     >>> janes_account = default_account._replace(owner='Jane')

See also
........

   * Recipe for named tuple abstract base class with a metaclass
     mix-in(1) by Jan Kaliszewski.  Besides providing an *note abstract
     base class: 776. for named tuples, it also supports an alternate
     *note metaclass: 12ec.-based constructor that is convenient for use
     cases where named tuples are being subclassed.

   * *note types.SimpleNamespace(): 5ca. for a mutable namespace based
     on an underlying dictionary instead of a tuple.

   ---------- Footnotes ----------

   (1) 
http://code.activestate.com/recipes/577629-namedtupleabc-abstract-base-class-mix-in-for-named/


File: python.info,  Node: OrderedDict objects,  Next: UserDict objects,  Prev: namedtuple Factory Function for Tuples with Named Fields,  Up: collections --- Container datatypes

5.8.3.9 ‘OrderedDict’ objects
.............................

Ordered dictionaries are just like regular dictionaries but they
remember the order that items were inserted.  When iterating over an
ordered dictionary, the items are returned in the order their keys were
first added.

 -- Class: collections.OrderedDict ([items])

     Return an instance of a dict subclass, supporting the usual *note
     dict: 3b0. methods.  An `OrderedDict' is a dict that remembers the
     order that keys were first inserted.  If a new entry overwrites an
     existing entry, the original insertion position is left unchanged.
     Deleting an entry and reinserting it will move it to the end.

     New in version 3.1.

      -- Method: popitem (last=True)

          The *note popitem(): 8f1. method for ordered dictionaries
          returns and removes a (key, value) pair.  The pairs are
          returned in LIFO order if `last' is true or FIFO order if
          false.

      -- Method: move_to_end (key, last=True)

          Move an existing `key' to either end of an ordered dictionary.
          The item is moved to the right end if `last' is true (the
          default) or to the beginning if `last' is false.  Raises *note
          KeyError: 1a7. if the `key' does not exist:

               >>> d = OrderedDict.fromkeys('abcde')
               >>> d.move_to_end('b')
               >>> ''.join(d.keys())
               'acdeb'
               >>> d.move_to_end('b', last=False)
               >>> ''.join(d.keys())
               'bacde'

          New in version 3.2.

In addition to the usual mapping methods, ordered dictionaries also
support reverse iteration using *note reversed(): 24d.

Equality tests between *note OrderedDict: 1bd. objects are
order-sensitive and are implemented as
‘list(od1.items())==list(od2.items())’.  Equality tests between *note
OrderedDict: 1bd. objects and other *note Mapping: 12ee. objects are
order-insensitive like regular dictionaries.  This allows *note
OrderedDict: 1bd. objects to be substituted anywhere a regular
dictionary is used.

The *note OrderedDict: 1bd. constructor and ‘update()’ method both
accept keyword arguments, but their order is lost because Python’s
function call semantics pass in keyword arguments using a regular
unordered dictionary.

Changed in version 3.5: The items, keys, and values *note views: 12ef.
of *note OrderedDict: 1bd. now support reverse iteration using *note
reversed(): 24d.

* Menu:

* OrderedDict Examples and Recipes:: 


File: python.info,  Node: OrderedDict Examples and Recipes,  Up: OrderedDict objects

5.8.3.10 ‘OrderedDict’ Examples and Recipes
...........................................

Since an ordered dictionary remembers its insertion order, it can be
used in conjunction with sorting to make a sorted dictionary:

     >>> # regular unsorted dictionary
     >>> d = {'banana': 3, 'apple':4, 'pear': 1, 'orange': 2}

     >>> # dictionary sorted by key
     >>> OrderedDict(sorted(d.items(), key=lambda t: t[0]))
     OrderedDict([('apple', 4), ('banana', 3), ('orange', 2), ('pear', 1)])

     >>> # dictionary sorted by value
     >>> OrderedDict(sorted(d.items(), key=lambda t: t[1]))
     OrderedDict([('pear', 1), ('orange', 2), ('banana', 3), ('apple', 4)])

     >>> # dictionary sorted by length of the key string
     >>> OrderedDict(sorted(d.items(), key=lambda t: len(t[0])))
     OrderedDict([('pear', 1), ('apple', 4), ('orange', 2), ('banana', 3)])

The new sorted dictionaries maintain their sort order when entries are
deleted.  But when new keys are added, the keys are appended to the end
and the sort is not maintained.

It is also straight-forward to create an ordered dictionary variant that
remembers the order the keys were `last' inserted.  If a new entry
overwrites an existing entry, the original insertion position is changed
and moved to the end:

     class LastUpdatedOrderedDict(OrderedDict):
         'Store items in the order the keys were last added'

         def __setitem__(self, key, value):
             if key in self:
                 del self[key]
             OrderedDict.__setitem__(self, key, value)

An ordered dictionary can be combined with the *note Counter: 602. class
so that the counter remembers the order elements are first encountered:

     class OrderedCounter(Counter, OrderedDict):
         'Counter that remembers the order elements are first encountered'

         def __repr__(self):
             return '%s(%r)' % (self.__class__.__name__, OrderedDict(self))

         def __reduce__(self):
             return self.__class__, (OrderedDict(self),)


File: python.info,  Node: UserDict objects,  Next: UserList objects,  Prev: OrderedDict objects,  Up: collections --- Container datatypes

5.8.3.11 ‘UserDict’ objects
...........................

The class, *note UserDict: 12cd. acts as a wrapper around dictionary
objects.  The need for this class has been partially supplanted by the
ability to subclass directly from *note dict: 3b0.; however, this class
can be easier to work with because the underlying dictionary is
accessible as an attribute.

 -- Class: collections.UserDict ([initialdata])

     Class that simulates a dictionary.  The instance’s contents are
     kept in a regular dictionary, which is accessible via the *note
     data: 12f2. attribute of *note UserDict: 12cd. instances.  If
     `initialdata' is provided, *note data: 12f2. is initialized with
     its contents; note that a reference to `initialdata' will not be
     kept, allowing it be used for other purposes.

     In addition to supporting the methods and operations of mappings,
     *note UserDict: 12cd. instances provide the following attribute:

      -- Attribute: data

          A real dictionary used to store the contents of the *note
          UserDict: 12cd. class.


File: python.info,  Node: UserList objects,  Next: UserString objects,  Prev: UserDict objects,  Up: collections --- Container datatypes

5.8.3.12 ‘UserList’ objects
...........................

This class acts as a wrapper around list objects.  It is a useful base
class for your own list-like classes which can inherit from them and
override existing methods or add new ones.  In this way, one can add new
behaviors to lists.

The need for this class has been partially supplanted by the ability to
subclass directly from *note list: 25d.; however, this class can be
easier to work with because the underlying list is accessible as an
attribute.

 -- Class: collections.UserList ([list])

     Class that simulates a list.  The instance’s contents are kept in a
     regular list, which is accessible via the *note data: 12f4.
     attribute of *note UserList: 12ce. instances.  The instance’s
     contents are initially set to a copy of `list', defaulting to the
     empty list ‘[]’.  `list' can be any iterable, for example a real
     Python list or a *note UserList: 12ce. object.

     In addition to supporting the methods and operations of mutable
     sequences, *note UserList: 12ce. instances provide the following
     attribute:

      -- Attribute: data

          A real *note list: 25d. object used to store the contents of
          the *note UserList: 12ce. class.

`Subclassing requirements:' Subclasses of *note UserList: 12ce. are
expected to offer a constructor which can be called with either no
arguments or one argument.  List operations which return a new sequence
attempt to create an instance of the actual implementation class.  To do
so, it assumes that the constructor can be called with a single
parameter, which is a sequence object used as a data source.

If a derived class does not wish to comply with this requirement, all of
the special methods supported by this class will need to be overridden;
please consult the sources for information about the methods which need
to be provided in that case.


File: python.info,  Node: UserString objects,  Prev: UserList objects,  Up: collections --- Container datatypes

5.8.3.13 ‘UserString’ objects
.............................

The class, *note UserString: 253. acts as a wrapper around string
objects.  The need for this class has been partially supplanted by the
ability to subclass directly from *note str: 25a.; however, this class
can be easier to work with because the underlying string is accessible
as an attribute.

 -- Class: collections.UserString ([sequence])

     Class that simulates a string or a Unicode string object.  The
     instance’s content is kept in a regular string object, which is
     accessible via the ‘data’ attribute of *note UserString: 253.
     instances.  The instance’s contents are initially set to a copy of
     `sequence'.  The `sequence' can be an instance of *note bytes: 1db,
     *note str: 25a, *note UserString: 253. (or a subclass) or an
     arbitrary sequence which can be converted into a string using the
     built-in *note str(): 25a. function.

     Changed in version 3.5: New methods ‘__getnewargs__’, ‘__rmod__’,
     ‘casefold’, ‘format_map’, ‘isprintable’, and ‘maketrans’.


File: python.info,  Node: collections abc --- Abstract Base Classes for Containers,  Next: heapq --- Heap queue algorithm,  Prev: collections --- Container datatypes,  Up: Data Types

5.8.4 ‘collections.abc’ — Abstract Base Classes for Containers
--------------------------------------------------------------

New in version 3.3: Formerly, this module was part of the *note
collections: 1e. module.

`Source code:' Lib/_collections_abc.py(1)

__________________________________________________________________

This module provides *note abstract base classes: 776. that can be used
to test whether a class provides a particular interface; for example,
whether it is hashable or whether it is a mapping.

* Menu:

* Collections Abstract Base Classes:: 

   ---------- Footnotes ----------

   (1) 
https://hg.python.org/cpython/file/default/Lib/_collections_abc.py


File: python.info,  Node: Collections Abstract Base Classes,  Up: collections abc --- Abstract Base Classes for Containers

5.8.4.1 Collections Abstract Base Classes
.........................................

The collections module offers the following *note ABCs: 776.:

ABC                            Inherits from              Abstract Methods            Mixin Methods
                                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------
                                                                                      
*note Container: 12f9.                                    ‘__contains__’
                                                          
                                                                                      
*note Hashable: 12fa.                                     ‘__hash__’
                                                          
                                                                                      
*note Iterable: 12fb.                                     ‘__iter__’
                                                          
                                                                                      
*note Iterator: 12fc.          *note Iterable: 12fb.      ‘__next__’                  ‘__iter__’
                                                                                      
                                                                                      
*note Reversible: 12fd.        *note Iterable: 12fb.      ‘__reversed__’
                                                          
                                                                                      
*note Generator: 25e.          *note Iterator: 12fc.      ‘send’, ‘throw’             ‘close’, ‘__iter__’, ‘__next__’
                                                                                      
                                                                                      
*note Sized: 12fe.                                        ‘__len__’
                                                          
                                                                                      
*note Callable: 12ff.                                     ‘__call__’
                                                          
                                                                                      
*note Sequence: fe7.           *note Sized: 12fe,         ‘__getitem__’, ‘__len__’    ‘__contains__’, ‘__iter__’, ‘__reversed__’, ‘index’,
                               *note Reversible: 12fd,                                and ‘count’
                               *note Container: 12f9.                                 
                               
                                                                                      
*note MutableSequence: 252.    *note Sequence: fe7.       ‘__getitem__’,              Inherited *note Sequence: fe7. methods and ‘append’,
                                                          ‘__setitem__’,              ‘reverse’, ‘extend’, ‘pop’, ‘remove’, and ‘__iadd__’
                                                          ‘__delitem__’, ‘__len__’,   
                                                          ‘insert’
                                                          
                                                                                      
*note Set: 108e.               *note Sized: 12fe,         ‘__contains__’,             ‘__le__’, ‘__lt__’, ‘__eq__’, ‘__ne__’, ‘__gt__’,
                               *note Iterable: 12fb,      ‘__iter__’, ‘__len__’       ‘__ge__’, ‘__and__’, ‘__or__’, ‘__sub__’, ‘__xor__’,
                               *note Container: 12f9.                                 and ‘isdisjoint’
                                                                                      
                                                                                      
*note MutableSet: 1300.        *note Set: 108e.           ‘__contains__’,             Inherited *note Set: 108e. methods and ‘clear’, ‘pop’,
                                                          ‘__iter__’, ‘__len__’,      ‘remove’, ‘__ior__’, ‘__iand__’, ‘__ixor__’, and
                                                          ‘add’, ‘discard’            ‘__isub__’
                                                                                      
                                                                                      
*note Mapping: 12ee.           *note Sized: 12fe,         ‘__getitem__’,              ‘__contains__’, ‘keys’, ‘items’, ‘values’, ‘get’,
                               *note Iterable: 12fb,      ‘__iter__’, ‘__len__’       ‘__eq__’, and ‘__ne__’
                               *note Container: 12f9.                                 
                               
                                                                                      
*note MutableMapping: 61d.     *note Mapping: 12ee.       ‘__getitem__’,              Inherited *note Mapping: 12ee. methods and ‘pop’,
                                                          ‘__setitem__’,              ‘popitem’, ‘clear’, ‘update’, and ‘setdefault’
                                                          ‘__delitem__’,              
                                                          ‘__iter__’, ‘__len__’
                                                          
                                                                                      
*note MappingView: 1301.       *note Sized: 12fe.                                     ‘__len__’
                                                                                      
                                                                                      
*note ItemsView: 1302.         *note MappingView: 1301,                               ‘__contains__’, ‘__iter__’
                               *note Set: 108e.                                       
                               
                                                                                      
*note KeysView: 1303.          *note MappingView: 1301,                               ‘__contains__’, ‘__iter__’
                               *note Set: 108e.                                       
                               
                                                                                      
*note ValuesView: 1304.        *note MappingView: 1301.                               ‘__contains__’, ‘__iter__’
                                                                                      
                                                                                      
*note Awaitable: 25f.                                     ‘__await__’
                                                          
                                                                                      
*note Coroutine: 260.          *note Awaitable: 25f.      ‘send’, ‘throw’             ‘close’
                                                                                      
                                                                                      
*note AsyncIterable: 262.                                 ‘__aiter__’
                                                          
                                                                                      
*note AsyncIterator: 261.      *note AsyncIterable: 262.  ‘__anext__’                 ‘__aiter__’
                                                                                      

 -- Class: collections.abc.Container
 -- Class: collections.abc.Hashable
 -- Class: collections.abc.Sized
 -- Class: collections.abc.Callable

     ABCs for classes that provide respectively the methods *note
     __contains__(): 99c, *note __hash__(): 5e7, *note __len__(): a47,
     and *note __call__(): dee.

 -- Class: collections.abc.Iterable

     ABC for classes that provide the *note __iter__(): 99b. method.
     See also the definition of *note iterable: 80a.

 -- Class: collections.abc.Iterator

     ABC for classes that provide the *note __iter__(): fe1. and *note
     __next__(): 8cf. methods.  See also the definition of *note
     iterator: e4f.

 -- Class: collections.abc.Reversible

     ABC for classes that provide the *note __reversed__(): e1f. method.

     New in version 3.6.

 -- Class: collections.abc.Generator

     ABC for generator classes that implement the protocol defined in
     PEP 342(1) that extends iterators with the *note send(): e54, *note
     throw(): e56. and *note close(): e58. methods.  See also the
     definition of *note generator: 5c0.

     New in version 3.5.

 -- Class: collections.abc.Sequence
 -- Class: collections.abc.MutableSequence

     ABCs for read-only and mutable *note sequences: bef.

     Implementation note: Some of the mixin methods, such as *note
     __iter__(): 99b, *note __reversed__(): e1f. and ‘index()’, make
     repeated calls to the underlying *note __getitem__(): a84. method.
     Consequently, if *note __getitem__(): a84. is implemented with
     constant access speed, the mixin methods will have linear
     performance; however, if the underlying method is linear (as it
     would be with a linked list), the mixins will have quadratic
     performance and will likely need to be overridden.

     Changed in version 3.5: The index() method added support for `stop'
     and `start' arguments.

 -- Class: collections.abc.Set
 -- Class: collections.abc.MutableSet

     ABCs for read-only and mutable sets.

 -- Class: collections.abc.Mapping
 -- Class: collections.abc.MutableMapping

     ABCs for read-only and mutable *note mappings: 77c.

 -- Class: collections.abc.MappingView
 -- Class: collections.abc.ItemsView
 -- Class: collections.abc.KeysView
 -- Class: collections.abc.ValuesView

     ABCs for mapping, items, keys, and values *note views: 12ef.

 -- Class: collections.abc.Awaitable

     ABC for *note awaitable: 1ca. objects, which can be used in *note
     await: 1cf. expressions.  Custom implementations must provide the
     *note __await__(): 1d0. method.

     *note Coroutine: 2ad. objects and instances of the *note Coroutine:
     260. ABC are all instances of this ABC.

          Note: In CPython, generator-based coroutines (generators
          decorated with *note types.coroutine(): 34d. or *note
          asyncio.coroutine(): e4e.) are `awaitables', even though they
          do not have an *note __await__(): 1d0. method.  Using
          ‘isinstance(gencoro, Awaitable)’ for them will return ‘False’.
          Use *note inspect.isawaitable(): 2b0. to detect them.

     New in version 3.5.

 -- Class: collections.abc.Coroutine

     ABC for coroutine compatible classes.  These implement the
     following methods, defined in *note Coroutine Objects: ded.: *note
     send(): e53, *note throw(): e55, and *note close(): e57.  Custom
     implementations must also implement *note __await__(): 1d0.  All
     *note Coroutine: 260. instances are also instances of *note
     Awaitable: 25f.  See also the definition of *note coroutine: 2ad.

          Note: In CPython, generator-based coroutines (generators
          decorated with *note types.coroutine(): 34d. or *note
          asyncio.coroutine(): e4e.) are `awaitables', even though they
          do not have an *note __await__(): 1d0. method.  Using
          ‘isinstance(gencoro, Coroutine)’ for them will return ‘False’.
          Use *note inspect.isawaitable(): 2b0. to detect them.

     New in version 3.5.

 -- Class: collections.abc.AsyncIterable

     ABC for classes that provide ‘__aiter__’ method.  See also the
     definition of *note asynchronous iterable: 1cc.

     New in version 3.5.

 -- Class: collections.abc.AsyncIterator

     ABC for classes that provide ‘__aiter__’ and ‘__anext__’ methods.
     See also the definition of *note asynchronous iterator: f76.

     New in version 3.5.

These ABCs allow us to ask classes or instances if they provide
particular functionality, for example:

     size = None
     if isinstance(myvar, collections.abc.Sized):
         size = len(myvar)

Several of the ABCs are also useful as mixins that make it easier to
develop classes supporting container APIs.  For example, to write a
class supporting the full *note Set: 108e. API, it is only necessary to
supply the three underlying abstract methods: *note __contains__(): 99c,
*note __iter__(): 99b, and *note __len__(): a47.  The ABC supplies the
remaining methods such as *note __and__(): e29. and ‘isdisjoint()’:

     class ListBasedSet(collections.abc.Set):
          ''' Alternate set implementation favoring space over speed
              and not requiring the set elements to be hashable. '''
          def __init__(self, iterable):
              self.elements = lst = []
              for value in iterable:
                  if value not in lst:
                      lst.append(value)
          def __iter__(self):
              return iter(self.elements)
          def __contains__(self, value):
              return value in self.elements
          def __len__(self):
              return len(self.elements)

     s1 = ListBasedSet('abcdef')
     s2 = ListBasedSet('defghi')
     overlap = s1 & s2            # The __and__() method is supported automatically

Notes on using *note Set: 108e. and *note MutableSet: 1300. as a mixin:

  1. Since some set operations create new sets, the default mixin
     methods need a way to create new instances from an iterable.  The
     class constructor is assumed to have a signature in the form
     ‘ClassName(iterable)’.  That assumption is factored-out to an
     internal classmethod called ‘_from_iterable()’ which calls
     ‘cls(iterable)’ to produce a new set.  If the *note Set: 108e.
     mixin is being used in a class with a different constructor
     signature, you will need to override ‘_from_iterable()’ with a
     classmethod that can construct new instances from an iterable
     argument.

  2. To override the comparisons (presumably for speed, as the semantics
     are fixed), redefine *note __le__(): 913. and *note __ge__(): 915,
     then the other operations will automatically follow suit.

  3. The *note Set: 108e. mixin provides a ‘_hash()’ method to compute a
     hash value for the set; however, *note __hash__(): 5e7. is not
     defined because not all sets are hashable or immutable.  To add set
     hashability using mixins, inherit from both *note Set(): 108e. and
     *note Hashable(): 12fa, then define ‘__hash__ = Set._hash’.

See also
........

   * OrderedSet recipe(2) for an example built on *note MutableSet:
     1300.

   * For more about ABCs, see the *note abc: 4. module and PEP 3119(3).

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0342

   (2) http://code.activestate.com/recipes/576694/

   (3) https://www.python.org/dev/peps/pep-3119


File: python.info,  Node: heapq --- Heap queue algorithm,  Next: bisect --- Array bisection algorithm,  Prev: collections abc --- Abstract Base Classes for Containers,  Up: Data Types

5.8.5 ‘heapq’ — Heap queue algorithm
------------------------------------

`Source code:' Lib/heapq.py(1)

__________________________________________________________________

This module provides an implementation of the heap queue algorithm, also
known as the priority queue algorithm.

Heaps are binary trees for which every parent node has a value less than
or equal to any of its children.  This implementation uses arrays for
which ‘heap[k] <= heap[2*k+1]’ and ‘heap[k] <= heap[2*k+2]’ for all `k',
counting elements from zero.  For the sake of comparison, non-existing
elements are considered to be infinite.  The interesting property of a
heap is that its smallest element is always the root, ‘heap[0]’.

The API below differs from textbook heap algorithms in two aspects: (a)
We use zero-based indexing.  This makes the relationship between the
index for a node and the indexes for its children slightly less obvious,
but is more suitable since Python uses zero-based indexing.  (b) Our pop
method returns the smallest item, not the largest (called a "min heap"
in textbooks; a "max heap" is more common in texts because of its
suitability for in-place sorting).

These two make it possible to view the heap as a regular Python list
without surprises: ‘heap[0]’ is the smallest item, and ‘heap.sort()’
maintains the heap invariant!

To create a heap, use a list initialized to ‘[]’, or you can transform a
populated list into a heap via function *note heapify(): 1307.

The following functions are provided:

 -- Function: heapq.heappush (heap, item)

     Push the value `item' onto the `heap', maintaining the heap
     invariant.

 -- Function: heapq.heappop (heap)

     Pop and return the smallest item from the `heap', maintaining the
     heap invariant.  If the heap is empty, *note IndexError: afb. is
     raised.  To access the smallest item without popping it, use
     ‘heap[0]’.

 -- Function: heapq.heappushpop (heap, item)

     Push `item' on the heap, then pop and return the smallest item from
     the `heap'.  The combined action runs more efficiently than *note
     heappush(): 1308. followed by a separate call to *note heappop():
     1309.

 -- Function: heapq.heapify (x)

     Transform list `x' into a heap, in-place, in linear time.

 -- Function: heapq.heapreplace (heap, item)

     Pop and return the smallest item from the `heap', and also push the
     new `item'.  The heap size doesn’t change.  If the heap is empty,
     *note IndexError: afb. is raised.

     This one step operation is more efficient than a *note heappop():
     1309. followed by *note heappush(): 1308. and can be more
     appropriate when using a fixed-size heap.  The pop/push combination
     always returns an element from the heap and replaces it with
     `item'.

     The value returned may be larger than the `item' added.  If that
     isn’t desired, consider using *note heappushpop(): 130a. instead.
     Its push/pop combination returns the smaller of the two values,
     leaving the larger value on the heap.

The module also offers three general purpose functions based on heaps.

 -- Function: heapq.merge (*iterables, key=None, reverse=False)

     Merge multiple sorted inputs into a single sorted output (for
     example, merge timestamped entries from multiple log files).
     Returns an *note iterator: e4f. over the sorted values.

     Similar to ‘sorted(itertools.chain(*iterables))’ but returns an
     iterable, does not pull the data into memory all at once, and
     assumes that each of the input streams is already sorted (smallest
     to largest).

     Has two optional arguments which must be specified as keyword
     arguments.

     `key' specifies a *note key function: 293. of one argument that is
     used to extract a comparison key from each input element.  The
     default value is ‘None’ (compare the elements directly).

     `reverse' is a boolean value.  If set to ‘True’, then the input
     elements are merged as if each comparison were reversed.

     Changed in version 3.5: Added the optional `key' and `reverse'
     parameters.

 -- Function: heapq.nlargest (n, iterable, key=None)

     Return a list with the `n' largest elements from the dataset
     defined by `iterable'.  `key', if provided, specifies a function of
     one argument that is used to extract a comparison key from each
     element in the iterable: ‘key=str.lower’ Equivalent to:
     ‘sorted(iterable, key=key, reverse=True)[:n]’

 -- Function: heapq.nsmallest (n, iterable, key=None)

     Return a list with the `n' smallest elements from the dataset
     defined by `iterable'.  `key', if provided, specifies a function of
     one argument that is used to extract a comparison key from each
     element in the iterable: ‘key=str.lower’ Equivalent to:
     ‘sorted(iterable, key=key)[:n]’

The latter two functions perform best for smaller values of `n'.  For
larger values, it is more efficient to use the *note sorted(): 84e.
function.  Also, when ‘n==1’, it is more efficient to use the built-in
*note min(): 3f9. and *note max(): 3fa. functions.  If repeated usage of
these functions is required, consider turning the iterable into an
actual heap.

* Menu:

* Basic Examples:: 
* Priority Queue Implementation Notes:: 
* Theory:: 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/heapq.py


File: python.info,  Node: Basic Examples,  Next: Priority Queue Implementation Notes,  Up: heapq --- Heap queue algorithm

5.8.5.1 Basic Examples
......................

A heapsort(1) can be implemented by pushing all values onto a heap and
then popping off the smallest values one at a time:

     >>> def heapsort(iterable):
     ...     h = []
     ...     for value in iterable:
     ...         heappush(h, value)
     ...     return [heappop(h) for i in range(len(h))]
     ...
     >>> heapsort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])
     [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

This is similar to ‘sorted(iterable)’, but unlike *note sorted(): 84e,
this implementation is not stable.

Heap elements can be tuples.  This is useful for assigning comparison
values (such as task priorities) alongside the main record being
tracked:

     >>> h = []
     >>> heappush(h, (5, 'write code'))
     >>> heappush(h, (7, 'release product'))
     >>> heappush(h, (1, 'write spec'))
     >>> heappush(h, (3, 'create tests'))
     >>> heappop(h)
     (1, 'write spec')

   ---------- Footnotes ----------

   (1) https://en.wikipedia.org/wiki/Heapsort


File: python.info,  Node: Priority Queue Implementation Notes,  Next: Theory,  Prev: Basic Examples,  Up: heapq --- Heap queue algorithm

5.8.5.2 Priority Queue Implementation Notes
...........................................

A priority queue(1) is common use for a heap, and it presents several
implementation challenges:

   * Sort stability: how do you get two tasks with equal priorities to
     be returned in the order they were originally added?

   * Tuple comparison breaks for (priority, task) pairs if the
     priorities are equal and the tasks do not have a default comparison
     order.

   * If the priority of a task changes, how do you move it to a new
     position in the heap?

   * Or if a pending task needs to be deleted, how do you find it and
     remove it from the queue?

A solution to the first two challenges is to store entries as 3-element
list including the priority, an entry count, and the task.  The entry
count serves as a tie-breaker so that two tasks with the same priority
are returned in the order they were added.  And since no two entry
counts are the same, the tuple comparison will never attempt to directly
compare two tasks.

The remaining challenges revolve around finding a pending task and
making changes to its priority or removing it entirely.  Finding a task
can be done with a dictionary pointing to an entry in the queue.

Removing the entry or changing its priority is more difficult because it
would break the heap structure invariants.  So, a possible solution is
to mark the entry as removed and add a new entry with the revised
priority:

     pq = []                         # list of entries arranged in a heap
     entry_finder = {}               # mapping of tasks to entries
     REMOVED = '<removed-task>'      # placeholder for a removed task
     counter = itertools.count()     # unique sequence count

     def add_task(task, priority=0):
         'Add a new task or update the priority of an existing task'
         if task in entry_finder:
             remove_task(task)
         count = next(counter)
         entry = [priority, count, task]
         entry_finder[task] = entry
         heappush(pq, entry)

     def remove_task(task):
         'Mark an existing task as REMOVED.  Raise KeyError if not found.'
         entry = entry_finder.pop(task)
         entry[-1] = REMOVED

     def pop_task():
         'Remove and return the lowest priority task. Raise KeyError if empty.'
         while pq:
             priority, count, task = heappop(pq)
             if task is not REMOVED:
                 del entry_finder[task]
                 return task
         raise KeyError('pop from an empty priority queue')

   ---------- Footnotes ----------

   (1) https://en.wikipedia.org/wiki/Priority_queue


File: python.info,  Node: Theory,  Prev: Priority Queue Implementation Notes,  Up: heapq --- Heap queue algorithm

5.8.5.3 Theory
..............

Heaps are arrays for which ‘a[k] <= a[2*k+1]’ and ‘a[k] <= a[2*k+2]’ for
all `k', counting elements from 0.  For the sake of comparison,
non-existing elements are considered to be infinite.  The interesting
property of a heap is that ‘a[0]’ is always its smallest element.

The strange invariant above is meant to be an efficient memory
representation for a tournament.  The numbers below are `k', not ‘a[k]’:

                                    0

                   1                                 2

           3               4                5               6

       7       8       9       10      11      12      13      14

     15 16   17 18   19 20   21 22   23 24   25 26   27 28   29 30

In the tree above, each cell `k' is topping ‘2*k+1’ and ‘2*k+2’.  In a
usual binary tournament we see in sports, each cell is the winner over
the two cells it tops, and we can trace the winner down the tree to see
all opponents s/he had.  However, in many computer applications of such
tournaments, we do not need to trace the history of a winner.  To be
more memory efficient, when a winner is promoted, we try to replace it
by something else at a lower level, and the rule becomes that a cell and
the two cells it tops contain three different items, but the top cell
"wins" over the two topped cells.

If this heap invariant is protected at all time, index 0 is clearly the
overall winner.  The simplest algorithmic way to remove it and find the
"next" winner is to move some loser (let’s say cell 30 in the diagram
above) into the 0 position, and then percolate this new 0 down the tree,
exchanging values, until the invariant is re-established.  This is
clearly logarithmic on the total number of items in the tree.  By
iterating over all items, you get an O(n log n) sort.

A nice feature of this sort is that you can efficiently insert new items
while the sort is going on, provided that the inserted items are not
"better" than the last 0’th element you extracted.  This is especially
useful in simulation contexts, where the tree holds all incoming events,
and the "win" condition means the smallest scheduled time.  When an
event schedules other events for execution, they are scheduled into the
future, so they can easily go into the heap.  So, a heap is a good
structure for implementing schedulers (this is what I used for my MIDI
sequencer :-).

Various structures for implementing schedulers have been extensively
studied, and heaps are good for this, as they are reasonably speedy, the
speed is almost constant, and the worst case is not much different than
the average case.  However, there are other representations which are
more efficient overall, yet the worst cases might be terrible.

Heaps are also very useful in big disk sorts.  You most probably all
know that a big sort implies producing "runs" (which are pre-sorted
sequences, whose size is usually related to the amount of CPU memory),
followed by a merging passes for these runs, which merging is often very
cleverly organised (1).  It is very important that the initial sort
produces the longest runs possible.  Tournaments are a good way to
achieve that.  If, using all the memory available to hold a tournament,
you replace and percolate items that happen to fit the current run,
you’ll produce runs which are twice the size of the memory for random
input, and much better for input fuzzily ordered.

Moreover, if you output the 0’th item on disk and get an input which may
not fit in the current tournament (because the value "wins" over the
last output value), it cannot fit in the heap, so the size of the heap
decreases.  The freed memory could be cleverly reused immediately for
progressively building a second heap, which grows at exactly the same
rate the first heap is melting.  When the first heap completely
vanishes, you switch heaps and start a new run.  Clever and quite
effective!

In a word, heaps are useful memory structures to know.  I use them in a
few applications, and I think it is good to keep a ’heap’ module around.
:-)

   ---------- Footnotes ----------

   (1) The disk balancing algorithms which are current, nowadays, are
more annoying than clever, and this is a consequence of the seeking
capabilities of the disks.  On devices which cannot seek, like big tape
drives, the story was quite different, and one had to be very clever to
ensure (far in advance) that each tape movement will be the most
effective possible (that is, will best participate at "progressing" the
merge).  Some tapes were even able to read backwards, and this was also
used to avoid the rewinding time.  Believe me, real good tape sorts were
quite spectacular to watch!  From all times, sorting has always been a
Great Art!  :-)


File: python.info,  Node: bisect --- Array bisection algorithm,  Next: array --- Efficient arrays of numeric values,  Prev: heapq --- Heap queue algorithm,  Up: Data Types

5.8.6 ‘bisect’ — Array bisection algorithm
------------------------------------------

`Source code:' Lib/bisect.py(1)

__________________________________________________________________

This module provides support for maintaining a list in sorted order
without having to sort the list after each insertion.  For long lists of
items with expensive comparison operations, this can be an improvement
over the more common approach.  The module is called *note bisect: 12.
because it uses a basic bisection algorithm to do its work.  The source
code may be most useful as a working example of the algorithm (the
boundary conditions are already right!).

The following functions are provided:

 -- Function: bisect.bisect_left (a, x, lo=0, hi=len(a))

     Locate the insertion point for `x' in `a' to maintain sorted order.
     The parameters `lo' and `hi' may be used to specify a subset of the
     list which should be considered; by default the entire list is
     used.  If `x' is already present in `a', the insertion point will
     be before (to the left of) any existing entries.  The return value
     is suitable for use as the first parameter to ‘list.insert()’
     assuming that `a' is already sorted.

     The returned insertion point `i' partitions the array `a' into two
     halves so that ‘all(val < x for val in a[lo:i])’ for the left side
     and ‘all(val >= x for val in a[i:hi])’ for the right side.

 -- Function: bisect.bisect_right (a, x, lo=0, hi=len(a))
 -- Function: bisect.bisect (a, x, lo=0, hi=len(a))

     Similar to *note bisect_left(): 1313, but returns an insertion
     point which comes after (to the right of) any existing entries of
     `x' in `a'.

     The returned insertion point `i' partitions the array `a' into two
     halves so that ‘all(val <= x for val in a[lo:i])’ for the left side
     and ‘all(val > x for val in a[i:hi])’ for the right side.

 -- Function: bisect.insort_left (a, x, lo=0, hi=len(a))

     Insert `x' in `a' in sorted order.  This is equivalent to
     ‘a.insert(bisect.bisect_left(a, x, lo, hi), x)’ assuming that `a'
     is already sorted.  Keep in mind that the O(log n) search is
     dominated by the slow O(n) insertion step.

 -- Function: bisect.insort_right (a, x, lo=0, hi=len(a))
 -- Function: bisect.insort (a, x, lo=0, hi=len(a))

     Similar to *note insort_left(): 1316, but inserting `x' in `a'
     after any existing entries of `x'.

See also
........

SortedCollection recipe(2) that uses bisect to build a full-featured
collection class with straight-forward search methods and support for a
key-function.  The keys are precomputed to save unnecessary calls to the
key function during searches.

* Menu:

* Searching Sorted Lists:: 
* Other Examples:: 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/bisect.py

   (2) http://code.activestate.com/recipes/577197-sortedcollection/


File: python.info,  Node: Searching Sorted Lists,  Next: Other Examples,  Up: bisect --- Array bisection algorithm

5.8.6.1 Searching Sorted Lists
..............................

The above *note bisect(): 12. functions are useful for finding insertion
points but can be tricky or awkward to use for common searching tasks.
The following five functions show how to transform them into the
standard lookups for sorted lists:

     def index(a, x):
         'Locate the leftmost value exactly equal to x'
         i = bisect_left(a, x)
         if i != len(a) and a[i] == x:
             return i
         raise ValueError

     def find_lt(a, x):
         'Find rightmost value less than x'
         i = bisect_left(a, x)
         if i:
             return a[i-1]
         raise ValueError

     def find_le(a, x):
         'Find rightmost value less than or equal to x'
         i = bisect_right(a, x)
         if i:
             return a[i-1]
         raise ValueError

     def find_gt(a, x):
         'Find leftmost value greater than x'
         i = bisect_right(a, x)
         if i != len(a):
             return a[i]
         raise ValueError

     def find_ge(a, x):
         'Find leftmost item greater than or equal to x'
         i = bisect_left(a, x)
         if i != len(a):
             return a[i]
         raise ValueError


File: python.info,  Node: Other Examples,  Prev: Searching Sorted Lists,  Up: bisect --- Array bisection algorithm

5.8.6.2 Other Examples
......................

The *note bisect(): 12. function can be useful for numeric table
lookups.  This example uses *note bisect(): 12. to look up a letter
grade for an exam score (say) based on a set of ordered numeric
breakpoints: 90 and up is an ’A’, 80 to 89 is a ’B’, and so on:

     >>> def grade(score, breakpoints=[60, 70, 80, 90], grades='FDCBA'):
     ...     i = bisect(breakpoints, score)
     ...     return grades[i]
     ...
     >>> [grade(score) for score in [33, 99, 77, 70, 89, 90, 100]]
     ['F', 'A', 'C', 'C', 'B', 'A', 'A']

Unlike the *note sorted(): 84e. function, it does not make sense for the
*note bisect(): 12. functions to have `key' or `reversed' arguments
because that would lead to an inefficient design (successive calls to
bisect functions would not "remember" all of the previous key lookups).

Instead, it is better to search a list of precomputed keys to find the
index of the record in question:

     >>> data = [('red', 5), ('blue', 1), ('yellow', 8), ('black', 0)]
     >>> data.sort(key=lambda r: r[1])
     >>> keys = [r[1] for r in data]         # precomputed list of keys
     >>> data[bisect_left(keys, 0)]
     ('black', 0)
     >>> data[bisect_left(keys, 1)]
     ('blue', 1)
     >>> data[bisect_left(keys, 5)]
     ('red', 5)
     >>> data[bisect_left(keys, 8)]
     ('yellow', 8)


File: python.info,  Node: array --- Efficient arrays of numeric values,  Next: weakref --- Weak references,  Prev: bisect --- Array bisection algorithm,  Up: Data Types

5.8.7 ‘array’ — Efficient arrays of numeric values
--------------------------------------------------

This module defines an object type which can compactly represent an
array of basic values: characters, integers, floating point numbers.
Arrays are sequence types and behave very much like lists, except that
the type of objects stored in them is constrained.  The type is
specified at object creation time by using a `type code', which is a
single character.  The following type codes are defined:

Type code       C Type                   Python Type             Minimum size in bytes       Notes
                                                                                             
---------------------------------------------------------------------------------------------------------
                                                                                             
‘'b'’           signed char              int                     1
                                                                 
                                                                                             
‘'B'’           unsigned char            int                     1
                                                                 
                                                                                             
‘'u'’           Py_UNICODE               Unicode character       2                           (1)
                                                                                             
                                                                                             
‘'h'’           signed short             int                     2
                                                                 
                                                                                             
‘'H'’           unsigned short           int                     2
                                                                 
                                                                                             
‘'i'’           signed int               int                     2
                                                                 
                                                                                             
‘'I'’           unsigned int             int                     2
                                                                 
                                                                                             
‘'l'’           signed long              int                     4
                                                                 
                                                                                             
‘'L'’           unsigned long            int                     4
                                                                 
                                                                                             
‘'q'’           signed long long         int                     8                           (2)
                                                                                             
                                                                                             
‘'Q'’           unsigned long long       int                     8                           (2)
                                                                                             
                                                                                             
‘'f'’           float                    float                   4
                                                                 
                                                                                             
‘'d'’           double                   float                   8
                                                                 

Notes:

  1. The ‘'u'’ type code corresponds to Python’s obsolete unicode
     character (*note Py_UNICODE: 72f. which is ‘wchar_t’).  Depending
     on the platform, it can be 16 bits or 32 bits.

     ‘'u'’ will be removed together with the rest of the *note
     Py_UNICODE: 72f. API.

     Deprecated since version 3.3, will be removed in version 4.0.

  2. The ‘'q'’ and ‘'Q'’ type codes are available only if the platform C
     compiler used to build Python supports C ‘long long’, or, on
     Windows, ‘__int64’.

     New in version 3.3.

The actual representation of values is determined by the machine
architecture (strictly speaking, by the C implementation).  The actual
size can be accessed through the ‘itemsize’ attribute.

The module defines the following type:

 -- Class: array.array (typecode[, initializer])

     A new array whose items are restricted by `typecode', and
     initialized from the optional `initializer' value, which must be a
     list, a *note bytes-like object: 36b, or iterable over elements of
     the appropriate type.

     If given a list or string, the initializer is passed to the new
     array’s *note fromlist(): 131e, *note frombytes(): 131f, or *note
     fromunicode(): 1320. method (see below) to add initial items to the
     array.  Otherwise, the iterable initializer is passed to the *note
     extend(): 1321. method.

 -- Data: array.typecodes

     A string with all available type codes.

Array objects support the ordinary sequence operations of indexing,
slicing, concatenation, and multiplication.  When using slice
assignment, the assigned value must be an array object with the same
type code; in all other cases, *note TypeError: 562. is raised.  Array
objects also implement the buffer interface, and may be used wherever
*note bytes-like object: 36b.s are supported.

The following data items and methods are also supported:

 -- Attribute: array.typecode

     The typecode character used to create the array.

 -- Attribute: array.itemsize

     The length in bytes of one array item in the internal
     representation.

 -- Method: array.append (x)

     Append a new item with value `x' to the end of the array.

 -- Method: array.buffer_info ()

     Return a tuple ‘(address, length)’ giving the current memory
     address and the length in elements of the buffer used to hold
     array’s contents.  The size of the memory buffer in bytes can be
     computed as ‘array.buffer_info()[1] * array.itemsize’.  This is
     occasionally useful when working with low-level (and inherently
     unsafe) I/O interfaces that require memory addresses, such as
     certain ‘ioctl()’ operations.  The returned numbers are valid as
     long as the array exists and no length-changing operations are
     applied to it.

          Note: When using array objects from code written in C or C++
          (the only way to effectively make use of this information), it
          makes more sense to use the buffer interface supported by
          array objects.  This method is maintained for backward
          compatibility and should be avoided in new code.  The buffer
          interface is documented in *note Buffer Protocol: ff5.

 -- Method: array.byteswap ()

     "Byteswap" all items of the array.  This is only supported for
     values which are 1, 2, 4, or 8 bytes in size; for other types of
     values, *note RuntimeError: 193. is raised.  It is useful when
     reading data from a file written on a machine with a different byte
     order.

 -- Method: array.count (x)

     Return the number of occurrences of `x' in the array.

 -- Method: array.extend (iterable)

     Append items from `iterable' to the end of the array.  If
     `iterable' is another array, it must have `exactly' the same type
     code; if not, *note TypeError: 562. will be raised.  If `iterable'
     is not an array, it must be iterable and its elements must be the
     right type to be appended to the array.

 -- Method: array.frombytes (s)

     Appends items from the string, interpreting the string as an array
     of machine values (as if it had been read from a file using the
     *note fromfile(): 1329. method).

     New in version 3.2: *note fromstring(): 132a. is renamed to *note
     frombytes(): 131f. for clarity.

 -- Method: array.fromfile (f, n)

     Read `n' items (as machine values) from the *note file object: 78b.
     `f' and append them to the end of the array.  If less than `n'
     items are available, *note EOFError: 8d8. is raised, but the items
     that were available are still inserted into the array.  `f' must be
     a real built-in file object; something else with a ‘read()’ method
     won’t do.

 -- Method: array.fromlist (list)

     Append items from the list.  This is equivalent to ‘for x in list:
     a.append(x)’ except that if there is a type error, the array is
     unchanged.

 -- Method: array.fromstring ()

     Deprecated alias for *note frombytes(): 131f.

 -- Method: array.fromunicode (s)

     Extends this array with data from the given unicode string.  The
     array must be a type ‘'u'’ array; otherwise a *note ValueError:
     19c. is raised.  Use ‘array.frombytes(unicodestring.encode(enc))’
     to append Unicode data to an array of some other type.

 -- Method: array.index (x)

     Return the smallest `i' such that `i' is the index of the first
     occurrence of `x' in the array.

 -- Method: array.insert (i, x)

     Insert a new item with value `x' in the array before position `i'.
     Negative values are treated as being relative to the end of the
     array.

 -- Method: array.pop ([i])

     Removes the item with the index `i' from the array and returns it.
     The optional argument defaults to ‘-1’, so that by default the last
     item is removed and returned.

 -- Method: array.remove (x)

     Remove the first occurrence of `x' from the array.

 -- Method: array.reverse ()

     Reverse the order of the items in the array.

 -- Method: array.tobytes ()

     Convert the array to an array of machine values and return the
     bytes representation (the same sequence of bytes that would be
     written to a file by the *note tofile(): 1331. method.)

     New in version 3.2: *note tostring(): 1332. is renamed to *note
     tobytes(): 1330. for clarity.

 -- Method: array.tofile (f)

     Write all items (as machine values) to the *note file object: 78b.
     `f'.

 -- Method: array.tolist ()

     Convert the array to an ordinary list with the same items.

 -- Method: array.tostring ()

     Deprecated alias for *note tobytes(): 1330.

 -- Method: array.tounicode ()

     Convert the array to a unicode string.  The array must be a type
     ‘'u'’ array; otherwise a *note ValueError: 19c. is raised.  Use
     ‘array.tobytes().decode(enc)’ to obtain a unicode string from an
     array of some other type.

When an array object is printed or converted to a string, it is
represented as ‘array(typecode, initializer)’.  The `initializer' is
omitted if the array is empty, otherwise it is a string if the
`typecode' is ‘'u'’, otherwise it is a list of numbers.  The string is
guaranteed to be able to be converted back to an array with the same
type and value using *note eval(): 7e8, so long as the *note array(): 7.
function has been imported using ‘from array import array’.  Examples:

     array('l')
     array('u', 'hello \u2641')
     array('l', [1, 2, 3, 4, 5])
     array('d', [1.0, 2.0, 3.14])

See also
........

Module *note struct: f6.

     Packing and unpacking of heterogeneous binary data.

Module *note xdrlib: 12f.

     Packing and unpacking of External Data Representation (XDR) data as
     used in some remote procedure call systems.

The Numerical Python Documentation(1)

     The Numeric Python extension (NumPy) defines another array type;
     see ‘http://www.numpy.org/’ for further information about Numerical
     Python.

   ---------- Footnotes ----------

   (1) http://docs.scipy.org/doc/


File: python.info,  Node: weakref --- Weak references,  Next: types --- Dynamic type creation and names for built-in types,  Prev: array --- Efficient arrays of numeric values,  Up: Data Types

5.8.8 ‘weakref’ — Weak references
---------------------------------

`Source code:' Lib/weakref.py(1)

__________________________________________________________________

The *note weakref: 125. module allows the Python programmer to create
`weak references' to objects.

In the following, the term `referent' means the object which is referred
to by a weak reference.

A weak reference to an object is not enough to keep the object alive:
when the only remaining references to a referent are weak references,
*note garbage collection: cca. is free to destroy the referent and reuse
its memory for something else.  However, until the object is actually
destroyed the weak reference may return the object even if there are no
strong references to it.

A primary use for weak references is to implement caches or mappings
holding large objects, where it’s desired that a large object not be
kept alive solely because it appears in a cache or mapping.

For example, if you have a number of large binary image objects, you may
wish to associate a name with each.  If you used a Python dictionary to
map names to images, or images to names, the image objects would remain
alive just because they appeared as values or keys in the dictionaries.
The *note WeakKeyDictionary: 1337. and *note WeakValueDictionary: 1338.
classes supplied by the *note weakref: 125. module are an alternative,
using weak references to construct mappings that don’t keep objects
alive solely because they appear in the mapping objects.  If, for
example, an image object is a value in a *note WeakValueDictionary:
1338, then when the last remaining references to that image object are
the weak references held by weak mappings, garbage collection can
reclaim the object, and its corresponding entries in weak mappings are
simply deleted.

*note WeakKeyDictionary: 1337. and *note WeakValueDictionary: 1338. use
weak references in their implementation, setting up callback functions
on the weak references that notify the weak dictionaries when a key or
value has been reclaimed by garbage collection.  *note WeakSet: 92e.
implements the *note set: 7be. interface, but keeps weak references to
its elements, just like a *note WeakKeyDictionary: 1337. does.

*note finalize: 513. provides a straight forward way to register a
cleanup function to be called when an object is garbage collected.  This
is simpler to use than setting up a callback function on a raw weak
reference, since the module automatically ensures that the finalizer
remains alive until the object is collected.

Most programs should find that using one of these weak container types
or *note finalize: 513. is all they need – it’s not usually necessary to
create your own weak references directly.  The low-level machinery is
exposed by the *note weakref: 125. module for the benefit of advanced
uses.

Not all objects can be weakly referenced; those objects which can
include class instances, functions written in Python (but not in C),
instance methods, sets, frozensets, some *note file objects: 78b, *note
generator: 5c0.s, type objects, sockets, arrays, deques, regular
expression pattern objects, and code objects.

Changed in version 3.2: Added support for thread.lock, threading.Lock,
and code objects.

Several built-in types such as *note list: 25d. and *note dict: 3b0. do
not directly support weak references but can add support through
subclassing:

     class Dict(dict):
         pass

     obj = Dict(red=1, green=2, blue=3)   # this object is weak referenceable

Other built-in types such as *note tuple: 25c. and *note int: 227. do
not support weak references even when subclassed (This is an
implementation detail and may be different across various Python
implementations.).

Extension types can easily be made to support weak references; see *note
Weak Reference Support: 1339.

 -- Class: weakref.ref (object[, callback])

     Return a weak reference to `object'.  The original object can be
     retrieved by calling the reference object if the referent is still
     alive; if the referent is no longer alive, calling the reference
     object will cause *note None: 19d. to be returned.  If `callback'
     is provided and not *note None: 19d, and the returned weakref
     object is still alive, the callback will be called when the object
     is about to be finalized; the weak reference object will be passed
     as the only parameter to the callback; the referent will no longer
     be available.

     It is allowable for many weak references to be constructed for the
     same object.  Callbacks registered for each weak reference will be
     called from the most recently registered callback to the oldest
     registered callback.

     Exceptions raised by the callback will be noted on the standard
     error output, but cannot be propagated; they are handled in exactly
     the same way as exceptions raised from an object’s *note __del__():
     525. method.

     Weak references are *note hashable: de9. if the `object' is
     hashable.  They will maintain their hash value even after the
     `object' was deleted.  If *note hash(): 5e6. is called the first
     time only after the `object' was deleted, the call will raise *note
     TypeError: 562.

     Weak references support tests for equality, but not ordering.  If
     the referents are still alive, two references have the same
     equality relationship as their referents (regardless of the
     `callback').  If either referent has been deleted, the references
     are equal only if the reference objects are the same object.

     This is a subclassable type rather than a factory function.

      -- Attribute: __callback__

          This read-only attribute returns the callback currently
          associated to the weakref.  If there is no callback or if the
          referent of the weakref is no longer alive then this attribute
          will have value ‘None’.

     Changed in version 3.4: Added the *note __callback__: 515.
     attribute.

 -- Function: weakref.proxy (object[, callback])

     Return a proxy to `object' which uses a weak reference.  This
     supports use of the proxy in most contexts instead of requiring the
     explicit dereferencing used with weak reference objects.  The
     returned object will have a type of either ‘ProxyType’ or
     ‘CallableProxyType’, depending on whether `object' is callable.
     Proxy objects are not *note hashable: de9. regardless of the
     referent; this avoids a number of problems related to their
     fundamentally mutable nature, and prevent their use as dictionary
     keys.  `callback' is the same as the parameter of the same name to
     the *note ref(): 514. function.

 -- Function: weakref.getweakrefcount (object)

     Return the number of weak references and proxies which refer to
     `object'.

 -- Function: weakref.getweakrefs (object)

     Return a list of all weak reference and proxy objects which refer
     to `object'.

 -- Class: weakref.WeakKeyDictionary ([dict])

     Mapping class that references keys weakly.  Entries in the
     dictionary will be discarded when there is no longer a strong
     reference to the key.  This can be used to associate additional
     data with an object owned by other parts of an application without
     adding attributes to those objects.  This can be especially useful
     with objects that override attribute accesses.

          Note: Caution: Because a *note WeakKeyDictionary: 1337. is
          built on top of a Python dictionary, it must not change size
          when iterating over it.  This can be difficult to ensure for a
          *note WeakKeyDictionary: 1337. because actions performed by
          the program during iteration may cause items in the dictionary
          to vanish "by magic" (as a side effect of garbage collection).

*note WeakKeyDictionary: 1337. objects have the following additional
methods.  These expose the internal references directly.  The references
are not guaranteed to be "live" at the time they are used, so the result
of calling the references needs to be checked before being used.  This
can be used to avoid creating references that will cause the garbage
collector to keep the keys around longer than needed.

 -- Method: WeakKeyDictionary.keyrefs ()

     Return an iterable of the weak references to the keys.

 -- Class: weakref.WeakValueDictionary ([dict])

     Mapping class that references values weakly.  Entries in the
     dictionary will be discarded when no strong reference to the value
     exists any more.

          Note: Caution: Because a *note WeakValueDictionary: 1338. is
          built on top of a Python dictionary, it must not change size
          when iterating over it.  This can be difficult to ensure for a
          *note WeakValueDictionary: 1338. because actions performed by
          the program during iteration may cause items in the dictionary
          to vanish "by magic" (as a side effect of garbage collection).

*note WeakValueDictionary: 1338. objects have the following additional
methods.  These method have the same issues as the and ‘keyrefs()’
method of *note WeakKeyDictionary: 1337. objects.

 -- Method: WeakValueDictionary.valuerefs ()

     Return an iterable of the weak references to the values.

 -- Class: weakref.WeakSet ([elements])

     Set class that keeps weak references to its elements.  An element
     will be discarded when no strong reference to it exists any more.

 -- Class: weakref.WeakMethod (method)

     A custom *note ref: 514. subclass which simulates a weak reference
     to a bound method (i.e., a method defined on a class and looked up
     on an instance).  Since a bound method is ephemeral, a standard
     weak reference cannot keep hold of it.  *note WeakMethod: 512. has
     special code to recreate the bound method until either the object
     or the original function dies:

          >>> class C:
          ...     def method(self):
          ...         print("method called!")
          ...
          >>> c = C()
          >>> r = weakref.ref(c.method)
          >>> r()
          >>> r = weakref.WeakMethod(c.method)
          >>> r()
          <bound method C.method of <__main__.C object at 0x7fc859830220>>
          >>> r()()
          method called!
          >>> del c
          >>> gc.collect()
          0
          >>> r()
          >>>

     New in version 3.4.

 -- Class: weakref.finalize (obj, func, *args, **kwargs)

     Return a callable finalizer object which will be called when `obj'
     is garbage collected.  Unlike an ordinary weak reference, a
     finalizer will always survive until the reference object is
     collected, greatly simplifying lifecycle management.

     A finalizer is considered `alive' until it is called (either
     explicitly or at garbage collection), and after that it is `dead'.
     Calling a live finalizer returns the result of evaluating
     ‘func(*arg, **kwargs)’, whereas calling a dead finalizer returns
     *note None: 19d.

     Exceptions raised by finalizer callbacks during garbage collection
     will be shown on the standard error output, but cannot be
     propagated.  They are handled in the same way as exceptions raised
     from an object’s *note __del__(): 525. method or a weak reference’s
     callback.

     When the program exits, each remaining live finalizer is called
     unless its *note atexit: c. attribute has been set to false.  They
     are called in reverse order of creation.

     A finalizer will never invoke its callback during the later part of
     the *note interpreter shutdown: 334. when module globals are liable
     to have been replaced by *note None: 19d.

      -- Method: __call__ ()

          If `self' is alive then mark it as dead and return the result
          of calling ‘func(*args, **kwargs)’.  If `self' is dead then
          return *note None: 19d.

      -- Method: detach ()

          If `self' is alive then mark it as dead and return the tuple
          ‘(obj, func, args, kwargs)’.  If `self' is dead then return
          *note None: 19d.

      -- Method: peek ()

          If `self' is alive then return the tuple ‘(obj, func, args,
          kwargs)’.  If `self' is dead then return *note None: 19d.

      -- Attribute: alive

          Property which is true if the finalizer is alive, false
          otherwise.

      -- Attribute: atexit

          A writable boolean property which by default is true.  When
          the program exits, it calls all remaining live finalizers for
          which *note atexit: 1342. is true.  They are called in reverse
          order of creation.

          Note: It is important to ensure that `func', `args' and
          `kwargs' do not own any references to `obj', either directly
          or indirectly, since otherwise `obj' will never be garbage
          collected.  In particular, `func' should not be a bound method
          of `obj'.

     New in version 3.4.

 -- Data: weakref.ReferenceType

     The type object for weak references objects.

 -- Data: weakref.ProxyType

     The type object for proxies of objects which are not callable.

 -- Data: weakref.CallableProxyType

     The type object for proxies of callable objects.

 -- Data: weakref.ProxyTypes

     Sequence containing all the type objects for proxies.  This can
     make it simpler to test if an object is a proxy without being
     dependent on naming both proxy types.

 -- Exception: weakref.ReferenceError

     Exception raised when a proxy object is used but the underlying
     object has been collected.  This is the same as the standard *note
     ReferenceError: ad1. exception.

See also
........

PEP 205(2) - Weak References

     The proposal and rationale for this feature, including links to
     earlier implementations and information about similar features in
     other languages.

* Menu:

* Weak Reference Objects:: 
* Example: Example<2>. 
* Finalizer Objects:: 
* Comparing finalizers with __del__() methods: Comparing finalizers with __del__ methods. 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/weakref.py

   (2) https://www.python.org/dev/peps/pep-0205


File: python.info,  Node: Weak Reference Objects,  Next: Example<2>,  Up: weakref --- Weak references

5.8.8.1 Weak Reference Objects
..............................

Weak reference objects have no methods and no attributes besides *note
ref.__callback__: 515.  A weak reference object allows the referent to
be obtained, if it still exists, by calling it:

     >>> import weakref
     >>> class Object:
     ...     pass
     ...
     >>> o = Object()
     >>> r = weakref.ref(o)
     >>> o2 = r()
     >>> o is o2
     True

If the referent no longer exists, calling the reference object returns
*note None: 19d.:

     >>> del o, o2
     >>> print(r())
     None

Testing that a weak reference object is still live should be done using
the expression ‘ref() is not None’.  Normally, application code that
needs to use a reference object should follow this pattern:

     # r is a weak reference object
     o = r()
     if o is None:
         # referent has been garbage collected
         print("Object has been deallocated; can't frobnicate.")
     else:
         print("Object is still live!")
         o.do_something_useful()

Using a separate test for "liveness" creates race conditions in threaded
applications; another thread can cause a weak reference to become
invalidated before the weak reference is called; the idiom shown above
is safe in threaded applications as well as single-threaded
applications.

Specialized versions of *note ref: 514. objects can be created through
subclassing.  This is used in the implementation of the *note
WeakValueDictionary: 1338. to reduce the memory overhead for each entry
in the mapping.  This may be most useful to associate additional
information with a reference, but could also be used to insert
additional processing on calls to retrieve the referent.

This example shows how a subclass of *note ref: 514. can be used to
store additional information about an object and affect the value that’s
returned when the referent is accessed:

     import weakref

     class ExtendedRef(weakref.ref):
         def __init__(self, ob, callback=None, **annotations):
             super(ExtendedRef, self).__init__(ob, callback)
             self.__counter = 0
             for k, v in annotations.items():
                 setattr(self, k, v)

         def __call__(self):
             """Return a pair containing the referent and the number of
             times the reference has been called.
             """
             ob = super(ExtendedRef, self).__call__()
             if ob is not None:
                 self.__counter += 1
                 ob = (ob, self.__counter)
             return ob


File: python.info,  Node: Example<2>,  Next: Finalizer Objects,  Prev: Weak Reference Objects,  Up: weakref --- Weak references

5.8.8.2 Example
...............

This simple example shows how an application can use objects IDs to
retrieve objects that it has seen before.  The IDs of the objects can
then be used in other data structures without forcing the objects to
remain alive, but the objects can still be retrieved by ID if they do.

     import weakref

     _id2obj_dict = weakref.WeakValueDictionary()

     def remember(obj):
         oid = id(obj)
         _id2obj_dict[oid] = obj
         return oid

     def id2obj(oid):
         return _id2obj_dict[oid]


File: python.info,  Node: Finalizer Objects,  Next: Comparing finalizers with __del__ methods,  Prev: Example<2>,  Up: weakref --- Weak references

5.8.8.3 Finalizer Objects
.........................

The main benefit of using *note finalize: 513. is that it makes it
simple to register a callback without needing to preserve the returned
finalizer object.  For instance

     >>> import weakref
     >>> class Object:
     ...     pass
     ...
     >>> kenny = Object()
     >>> weakref.finalize(kenny, print, "You killed Kenny!")  #doctest:+ELLIPSIS
     <finalize object at ...; for 'Object' at ...>
     >>> del kenny
     You killed Kenny!

The finalizer can be called directly as well.  However the finalizer
will invoke the callback at most once.

     >>> def callback(x, y, z):
     ...     print("CALLBACK")
     ...     return x + y + z
     ...
     >>> obj = Object()
     >>> f = weakref.finalize(obj, callback, 1, 2, z=3)
     >>> assert f.alive
     >>> assert f() == 6
     CALLBACK
     >>> assert not f.alive
     >>> f()                     # callback not called because finalizer dead
     >>> del obj                 # callback not called because finalizer dead

You can unregister a finalizer using its *note detach(): 133f. method.
This kills the finalizer and returns the arguments passed to the
constructor when it was created.

     >>> obj = Object()
     >>> f = weakref.finalize(obj, callback, 1, 2, z=3)
     >>> f.detach()                                           #doctest:+ELLIPSIS
     (<__main__.Object object ...>, <function callback ...>, (1, 2), {'z': 3})
     >>> newobj, func, args, kwargs = _
     >>> assert not f.alive
     >>> assert newobj is obj
     >>> assert func(*args, **kwargs) == 6
     CALLBACK

Unless you set the *note atexit: 1342. attribute to *note False: 60d, a
finalizer will be called when the program exits if it is still alive.
For instance

     >>> obj = Object()
     >>> weakref.finalize(obj, print, "obj dead or exiting")  #doctest:+ELLIPSIS
     <finalize object at ...; for 'Object' at ...>
     >>> exit()                                               #doctest:+SKIP
     obj dead or exiting


File: python.info,  Node: Comparing finalizers with __del__ methods,  Prev: Finalizer Objects,  Up: weakref --- Weak references

5.8.8.4 Comparing finalizers with ‘__del__()’ methods
.....................................................

Suppose we want to create a class whose instances represent temporary
directories.  The directories should be deleted with their contents when
the first of the following events occurs:

   * the object is garbage collected,

   * the object’s ‘remove()’ method is called, or

   * the program exits.

We might try to implement the class using a *note __del__(): 525. method
as follows:

     class TempDir:
         def __init__(self):
             self.name = tempfile.mkdtemp()

         def remove(self):
             if self.name is not None:
                 shutil.rmtree(self.name)
                 self.name = None

         @property
         def removed(self):
             return self.name is None

         def __del__(self):
             self.remove()

Starting with Python 3.4, *note __del__(): 525. methods no longer
prevent reference cycles from being garbage collected, and module
globals are no longer forced to *note None: 19d. during *note
interpreter shutdown: 334.  So this code should work without any issues
on CPython.

However, handling of *note __del__(): 525. methods is notoriously
implementation specific, since it depends on internal details of the
interpreter’s garbage collector implementation.

A more robust alternative can be to define a finalizer which only
references the specific functions and objects that it needs, rather than
having access to the full state of the object:

     class TempDir:
         def __init__(self):
             self.name = tempfile.mkdtemp()
             self._finalizer = weakref.finalize(self, shutil.rmtree, self.name)

         def remove(self):
             self._finalizer()

         @property
         def removed(self):
             return not self._finalizer.alive

Defined like this, our finalizer only receives a reference to the
details it needs to clean up the directory appropriately.  If the object
never gets garbage collected the finalizer will still be called at exit.

The other advantage of weakref based finalizers is that they can be used
to register finalizers for classes where the definition is controlled by
a third party, such as running code when a module is unloaded:

     import weakref, sys
     def unloading_module():
         # implicit reference to the module globals from the function body
     weakref.finalize(sys.modules[__name__], unloading_module)

     Note: If you create a finalizer object in a daemonic thread just as
     the program exits then there is the possibility that the finalizer
     does not get called at exit.  However, in a daemonic thread *note
     atexit.register(): b0b, ‘try: ... finally: ...’ and ‘with: ...’ do
     not guarantee that cleanup occurs either.


File: python.info,  Node: types --- Dynamic type creation and names for built-in types,  Next: copy --- Shallow and deep copy operations,  Prev: weakref --- Weak references,  Up: Data Types

5.8.9 ‘types’ — Dynamic type creation and names for built-in types
------------------------------------------------------------------

`Source code:' Lib/types.py(1)

__________________________________________________________________

This module defines utility function to assist in dynamic creation of
new types.

It also defines names for some object types that are used by the
standard Python interpreter, but not exposed as builtins like *note int:
227. or *note str: 25a. are.

Finally, it provides some additional type-related utility classes and
functions that are not fundamental enough to be builtins.

* Menu:

* Dynamic Type Creation:: 
* Standard Interpreter Types:: 
* Additional Utility Classes and Functions:: 
* Coroutine Utility Functions:: 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/types.py


File: python.info,  Node: Dynamic Type Creation,  Next: Standard Interpreter Types,  Up: types --- Dynamic type creation and names for built-in types

5.8.9.1 Dynamic Type Creation
.............................

 -- Function: types.new_class (name, bases=(), kwds=None,
          exec_body=None)

     Creates a class object dynamically using the appropriate metaclass.

     The first three arguments are the components that make up a class
     definition header: the class name, the base classes (in order), the
     keyword arguments (such as ‘metaclass’).

     The `exec_body' argument is a callback that is used to populate the
     freshly created class namespace.  It should accept the class
     namespace as its sole argument and update the namespace directly
     with the class contents.  If no callback is provided, it has the
     same effect as passing in ‘lambda ns: ns’.

     New in version 3.3.

 -- Function: types.prepare_class (name, bases=(), kwds=None)

     Calculates the appropriate metaclass and creates the class
     namespace.

     The arguments are the components that make up a class definition
     header: the class name, the base classes (in order) and the keyword
     arguments (such as ‘metaclass’).

     The return value is a 3-tuple: ‘metaclass, namespace, kwds’

     `metaclass' is the appropriate metaclass, `namespace' is the
     prepared class namespace and `kwds' is an updated copy of the
     passed in `kwds' argument with any ‘'metaclass'’ entry removed.  If
     no `kwds' argument is passed in, this will be an empty dict.

     New in version 3.3.

See also
........

*note Customizing class creation: e0b.

     Full details of the class creation process supported by these
     functions

PEP 3115(1) - Metaclasses in Python 3000

     Introduced the ‘__prepare__’ namespace hook

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3115


File: python.info,  Node: Standard Interpreter Types,  Next: Additional Utility Classes and Functions,  Prev: Dynamic Type Creation,  Up: types --- Dynamic type creation and names for built-in types

5.8.9.2 Standard Interpreter Types
..................................

This module provides names for many of the types that are required to
implement a Python interpreter.  It deliberately avoids including some
of the types that arise only incidentally during processing such as the
‘listiterator’ type.

Typical use of these names is for *note isinstance(): 998. or *note
issubclass(): 999. checks.

Standard names are defined for the following types:

 -- Data: types.FunctionType
 -- Data: types.LambdaType

     The type of user-defined functions and functions created by *note
     lambda: 894. expressions.

 -- Data: types.GeneratorType

     The type of *note generator: 5c0.-iterator objects, created by
     generator functions.

 -- Data: types.CoroutineType

     The type of *note coroutine: 2ad. objects, created by *note async
     def: 1ce. functions.

     New in version 3.5.

 -- Data: types.CodeType

     The type for code objects such as returned by *note compile(): 903.

 -- Data: types.MethodType

     The type of methods of user-defined class instances.

 -- Data: types.BuiltinFunctionType
 -- Data: types.BuiltinMethodType

     The type of built-in functions like *note len(): 5a8. or *note
     sys.exit(): 95a, and methods of built-in classes.  (Here, the term
     "built-in" means "written in C".)

 -- Class: types.ModuleType (name, doc=None)

     The type of *note modules: e73.  Constructor takes the name of the
     module to be created and optionally its *note docstring: f6b.

          Note: Use *note importlib.util.module_from_spec(): 2a5. to
          create a new module if you wish to set the various
          import-controlled attributes.

      -- Attribute: __doc__

          The *note docstring: f6b. of the module.  Defaults to ‘None’.

      -- Attribute: __loader__

          The *note loader: e82. which loaded the module.  Defaults to
          ‘None’.

          Changed in version 3.4: Defaults to ‘None’.  Previously the
          attribute was optional.

      -- Attribute: __name__

          The name of the module.

      -- Attribute: __package__

          Which *note package: e78. a module belongs to.  If the module
          is top-level (i.e.  not a part of any specific package) then
          the attribute should be set to ‘''’, else it should be set to
          the name of the package (which can be *note __name__: 8d3. if
          the module is a package itself).  Defaults to ‘None’.

          Changed in version 3.4: Defaults to ‘None’.  Previously the
          attribute was optional.

 -- Data: types.TracebackType

     The type of traceback objects such as found in ‘sys.exc_info()[2]’.

 -- Data: types.FrameType

     The type of frame objects such as found in ‘tb.tb_frame’ if ‘tb’ is
     a traceback object.

 -- Data: types.GetSetDescriptorType

     The type of objects defined in extension modules with
     ‘PyGetSetDef’, such as ‘FrameType.f_locals’ or
     ‘array.array.typecode’.  This type is used as descriptor for object
     attributes; it has the same purpose as the *note property: 377.
     type, but for classes defined in extension modules.

 -- Data: types.MemberDescriptorType

     The type of objects defined in extension modules with
     ‘PyMemberDef’, such as ‘datetime.timedelta.days’.  This type is
     used as descriptor for simple C data members which use standard
     conversion functions; it has the same purpose as the *note
     property: 377. type, but for classes defined in extension modules.

     `CPython implementation detail:' In other implementations of
     Python, this type may be identical to ‘GetSetDescriptorType’.

 -- Class: types.MappingProxyType (mapping)

     Read-only proxy of a mapping.  It provides a dynamic view on the
     mapping’s entries, which means that when the mapping changes, the
     view reflects these changes.

     New in version 3.3.

      -- Describe: key in proxy

          Return ‘True’ if the underlying mapping has a key `key', else
          ‘False’.

      -- Describe: proxy[key]

          Return the item of the underlying mapping with key `key'.
          Raises a *note KeyError: 1a7. if `key' is not in the
          underlying mapping.

      -- Describe: iter(proxy)

          Return an iterator over the keys of the underlying mapping.
          This is a shortcut for ‘iter(proxy.keys())’.

      -- Describe: len(proxy)

          Return the number of items in the underlying mapping.

      -- Method: copy ()

          Return a shallow copy of the underlying mapping.

      -- Method: get (key[, default])

          Return the value for `key' if `key' is in the underlying
          mapping, else `default'.  If `default' is not given, it
          defaults to ‘None’, so that this method never raises a *note
          KeyError: 1a7.

      -- Method: items ()

          Return a new view of the underlying mapping’s items (‘(key,
          value)’ pairs).

      -- Method: keys ()

          Return a new view of the underlying mapping’s keys.

      -- Method: values ()

          Return a new view of the underlying mapping’s values.


File: python.info,  Node: Additional Utility Classes and Functions,  Next: Coroutine Utility Functions,  Prev: Standard Interpreter Types,  Up: types --- Dynamic type creation and names for built-in types

5.8.9.3 Additional Utility Classes and Functions
................................................

 -- Class: types.SimpleNamespace

     A simple *note object: 5cb. subclass that provides attribute access
     to its namespace, as well as a meaningful repr.

     Unlike *note object: 5cb, with ‘SimpleNamespace’ you can add and
     remove attributes.  If a ‘SimpleNamespace’ object is initialized
     with keyword arguments, those are directly added to the underlying
     namespace.

     The type is roughly equivalent to the following code:

          class SimpleNamespace:
              def __init__(self, **kwargs):
                  self.__dict__.update(kwargs)
              def __repr__(self):
                  keys = sorted(self.__dict__)
                  items = ("{}={!r}".format(k, self.__dict__[k]) for k in keys)
                  return "{}({})".format(type(self).__name__, ", ".join(items))
              def __eq__(self, other):
                  return self.__dict__ == other.__dict__

     ‘SimpleNamespace’ may be useful as a replacement for ‘class NS:
     pass’.  However, for a structured record type use *note
     namedtuple(): 229. instead.

     New in version 3.3.

 -- Function: types.DynamicClassAttribute (fget=None, fset=None,
          fdel=None, doc=None)

     Route attribute access on a class to __getattr__.

     This is a descriptor, used to define attributes that act
     differently when accessed through an instance and through a class.
     Instance access remains normal, but access to an attribute through
     a class will be routed to the class’s __getattr__ method; this is
     done by raising AttributeError.

     This allows one to have properties active on an instance, and have
     virtual attributes on the class with the same name (see Enum for an
     example).

     New in version 3.4.


File: python.info,  Node: Coroutine Utility Functions,  Prev: Additional Utility Classes and Functions,  Up: types --- Dynamic type creation and names for built-in types

5.8.9.4 Coroutine Utility Functions
...................................

 -- Function: types.coroutine (gen_func)

     This function transforms a *note generator: 5c0. function into a
     *note coroutine function: 1cb. which returns a generator-based
     coroutine.  The generator-based coroutine is still a *note
     generator iterator: 34e, but is also considered to be a *note
     coroutine: 2ad. object and is *note awaitable: 1ca.  However, it
     may not necessarily implement the *note __await__(): 1d0. method.

     If `gen_func' is a generator function, it will be modified
     in-place.

     If `gen_func' is not a generator function, it will be wrapped.  If
     it returns an instance of *note collections.abc.Generator: 25e, the
     instance will be wrapped in an `awaitable' proxy object.  All other
     types of objects will be returned as is.

     New in version 3.5.


File: python.info,  Node: copy --- Shallow and deep copy operations,  Next: pprint --- Data pretty printer,  Prev: types --- Dynamic type creation and names for built-in types,  Up: Data Types

5.8.10 ‘copy’ — Shallow and deep copy operations
------------------------------------------------

Assignment statements in Python do not copy objects, they create
bindings between a target and an object.  For collections that are
mutable or contain mutable items, a copy is sometimes needed so one can
change one copy without changing the other.  This module provides
generic shallow and deep copy operations (explained below).

Interface summary:

 -- Function: copy.copy (x)

     Return a shallow copy of `x'.

 -- Function: copy.deepcopy (x)

     Return a deep copy of `x'.

 -- Exception: copy.error

     Raised for module specific errors.

The difference between shallow and deep copying is only relevant for
compound objects (objects that contain other objects, like lists or
class instances):

   * A `shallow copy' constructs a new compound object and then (to the
     extent possible) inserts `references' into it to the objects found
     in the original.

   * A `deep copy' constructs a new compound object and then,
     recursively, inserts `copies' into it of the objects found in the
     original.

Two problems often exist with deep copy operations that don’t exist with
shallow copy operations:

   * Recursive objects (compound objects that, directly or indirectly,
     contain a reference to themselves) may cause a recursive loop.

   * Because deep copy copies `everything' it may copy too much, e.g.,
     administrative data structures that should be shared even between
     copies.

The *note deepcopy(): 90e. function avoids these problems by:

   * keeping a "memo" dictionary of objects already copied during the
     current copying pass; and

   * letting user-defined classes override the copying operation or the
     set of components copied.

This module does not copy types like module, method, stack trace, stack
frame, file, socket, window, array, or any similar types.  It does
"copy" functions and classes (shallow and deeply), by returning the
original object unchanged; this is compatible with the way these are
treated by the *note pickle: c8. module.

Shallow copies of dictionaries can be made using *note dict.copy():
1087, and of lists by assigning a slice of the entire list, for example,
‘copied_list = original_list[:]’.

Classes can use the same interfaces to control copying that they use to
control pickling.  See the description of module *note pickle: c8. for
information on these methods.  In fact, the *note copy: 25. module uses
the registered pickle functions from the *note copyreg: 26. module.

In order for a class to define its own copy implementation, it can
define special methods ‘__copy__()’ and ‘__deepcopy__()’.  The former is
called to implement the shallow copy operation; no additional arguments
are passed.  The latter is called to implement the deep copy operation;
it is passed one argument, the memo dictionary.  If the ‘__deepcopy__()’
implementation needs to make a deep copy of a component, it should call
the *note deepcopy(): 90e. function with the component as first argument
and the memo dictionary as second argument.

See also
........

Module *note pickle: c8.

     Discussion of the special methods used to support object state
     retrieval and restoration.


File: python.info,  Node: pprint --- Data pretty printer,  Next: reprlib --- Alternate repr implementation,  Prev: copy --- Shallow and deep copy operations,  Up: Data Types

5.8.11 ‘pprint’ — Data pretty printer
-------------------------------------

`Source code:' Lib/pprint.py(1)

__________________________________________________________________

The *note pprint: d0. module provides a capability to "pretty-print"
arbitrary Python data structures in a form which can be used as input to
the interpreter.  If the formatted structures include objects which are
not fundamental Python types, the representation may not be loadable.
This may be the case if objects such as files, sockets or classes are
included, as well as many other objects which are not representable as
Python literals.

The formatted representation keeps objects on a single line if it can,
and breaks them onto multiple lines if they don’t fit within the allowed
width.  Construct *note PrettyPrinter: 490. objects explicitly if you
need to adjust the width constraint.

Dictionaries are sorted by key before the display is computed.

The *note pprint: d0. module defines one class:

 -- Class: pprint.PrettyPrinter (indent=1, width=80, depth=None,
          stream=None, *, compact=False)

     Construct a *note PrettyPrinter: 490. instance.  This constructor
     understands several keyword parameters.  An output stream may be
     set using the `stream' keyword; the only method used on the stream
     object is the file protocol’s ‘write()’ method.  If not specified,
     the *note PrettyPrinter: 490. adopts ‘sys.stdout’.  The amount of
     indentation added for each recursive level is specified by
     `indent'; the default is one.  Other values can cause output to
     look a little odd, but can make nesting easier to spot.  The number
     of levels which may be printed is controlled by `depth'; if the
     data structure being printed is too deep, the next contained level
     is replaced by ‘...’.  By default, there is no constraint on the
     depth of the objects being formatted.  The desired output width is
     constrained using the `width' parameter; the default is 80
     characters.  If a structure cannot be formatted within the
     constrained width, a best effort will be made.  If `compact' is
     false (the default) each item of a long sequence will be formatted
     on a separate line.  If `compact' is true, as many items as will
     fit within the `width' will be formatted on each output line.

     Changed in version 3.4: Added the `compact' parameter.

          >>> import pprint
          >>> stuff = ['spam', 'eggs', 'lumberjack', 'knights', 'ni']
          >>> stuff.insert(0, stuff[:])
          >>> pp = pprint.PrettyPrinter(indent=4)
          >>> pp.pprint(stuff)
          [   ['spam', 'eggs', 'lumberjack', 'knights', 'ni'],
              'spam',
              'eggs',
              'lumberjack',
              'knights',
              'ni']
          >>> pp = pprint.PrettyPrinter(width=41, compact=True)
          >>> pp.pprint(stuff)
          [['spam', 'eggs', 'lumberjack',
            'knights', 'ni'],
           'spam', 'eggs', 'lumberjack', 'knights',
           'ni']
          >>> tup = ('spam', ('eggs', ('lumberjack', ('knights', ('ni', ('dead',
          ... ('parrot', ('fresh fruit',))))))))
          >>> pp = pprint.PrettyPrinter(depth=6)
          >>> pp.pprint(tup)
          ('spam', ('eggs', ('lumberjack', ('knights', ('ni', ('dead', (...)))))))

The *note pprint: d0. module also provides several shortcut functions:

 -- Function: pprint.pformat (object, indent=1, width=80, depth=None, *,
          compact=False)

     Return the formatted representation of `object' as a string.
     `indent', `width', `depth' and `compact' will be passed to the
     *note PrettyPrinter: 490. constructor as formatting parameters.

     Changed in version 3.4: Added the `compact' parameter.

 -- Function: pprint.pprint (object, stream=None, indent=1, width=80,
          depth=None, *, compact=False)

     Prints the formatted representation of `object' on `stream',
     followed by a newline.  If `stream' is ‘None’, ‘sys.stdout’ is
     used.  This may be used in the interactive interpreter instead of
     the *note print(): 481. function for inspecting values (you can
     even reassign ‘print = pprint.pprint’ for use within a scope).
     `indent', `width', `depth' and `compact' will be passed to the
     *note PrettyPrinter: 490. constructor as formatting parameters.

     Changed in version 3.4: Added the `compact' parameter.

          >>> import pprint
          >>> stuff = ['spam', 'eggs', 'lumberjack', 'knights', 'ni']
          >>> stuff.insert(0, stuff)
          >>> pprint.pprint(stuff)
          [<Recursion on list with id=...>,
           'spam',
           'eggs',
           'lumberjack',
           'knights',
           'ni']

 -- Function: pprint.isreadable (object)

     Determine if the formatted representation of `object' is
     "readable," or can be used to reconstruct the value using *note
     eval(): 7e8.  This always returns ‘False’ for recursive objects.

          >>> pprint.isreadable(stuff)
          False

 -- Function: pprint.isrecursive (object)

     Determine if `object' requires a recursive representation.

One more support function is also defined:

 -- Function: pprint.saferepr (object)

     Return a string representation of `object', protected against
     recursive data structures.  If the representation of `object'
     exposes a recursive entry, the recursive reference will be
     represented as ‘<Recursion on typename with id=number>’.  The
     representation is not otherwise formatted.

          >>> pprint.saferepr(stuff)
          "[<Recursion on list with id=...>, 'spam', 'eggs', 'lumberjack', 'knights', 'ni']"

* Menu:

* PrettyPrinter Objects:: 
* Example: Example<3>. 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/pprint.py


File: python.info,  Node: PrettyPrinter Objects,  Next: Example<3>,  Up: pprint --- Data pretty printer

5.8.11.1 PrettyPrinter Objects
..............................

*note PrettyPrinter: 490. instances have the following methods:

 -- Method: PrettyPrinter.pformat (object)

     Return the formatted representation of `object'.  This takes into
     account the options passed to the *note PrettyPrinter: 490.
     constructor.

 -- Method: PrettyPrinter.pprint (object)

     Print the formatted representation of `object' on the configured
     stream, followed by a newline.

The following methods provide the implementations for the corresponding
functions of the same names.  Using these methods on an instance is
slightly more efficient since new *note PrettyPrinter: 490. objects
don’t need to be created.

 -- Method: PrettyPrinter.isreadable (object)

     Determine if the formatted representation of the object is
     "readable," or can be used to reconstruct the value using *note
     eval(): 7e8.  Note that this returns ‘False’ for recursive objects.
     If the `depth' parameter of the *note PrettyPrinter: 490. is set
     and the object is deeper than allowed, this returns ‘False’.

 -- Method: PrettyPrinter.isrecursive (object)

     Determine if the object requires a recursive representation.

This method is provided as a hook to allow subclasses to modify the way
objects are converted to strings.  The default implementation uses the
internals of the *note saferepr(): 1370. implementation.

 -- Method: PrettyPrinter.format (object, context, maxlevels, level)

     Returns three values: the formatted version of `object' as a
     string, a flag indicating whether the result is readable, and a
     flag indicating whether recursion was detected.  The first argument
     is the object to be presented.  The second is a dictionary which
     contains the *note id(): a00. of objects that are part of the
     current presentation context (direct and indirect containers for
     `object' that are affecting the presentation) as the keys; if an
     object needs to be presented which is already represented in
     `context', the third return value should be ‘True’.  Recursive
     calls to the *note format(): 1377. method should add additional
     entries for containers to this dictionary.  The third argument,
     `maxlevels', gives the requested limit to recursion; this will be
     ‘0’ if there is no requested limit.  This argument should be passed
     unmodified to recursive calls.  The fourth argument, `level', gives
     the current level; recursive calls should be passed a value less
     than that of the current call.


File: python.info,  Node: Example<3>,  Prev: PrettyPrinter Objects,  Up: pprint --- Data pretty printer

5.8.11.2 Example
................

To demonstrate several uses of the *note pprint(): d0. function and its
parameters, let’s fetch information about a project from PyPI(1):

     >>> import json
     >>> import pprint
     >>> from urllib.request import urlopen
     >>> with urlopen('http://pypi.python.org/pypi/Twisted/json') as url:
     ...     http_info = url.info()
     ...     raw_data = url.read().decode(http_info.get_content_charset())
     >>> project_info = json.loads(raw_data)

In its basic form, *note pprint(): d0. shows the whole object:

     >>> pprint.pprint(project_info)
     {'info': {'_pypi_hidden': False,
               '_pypi_ordering': 125,
               'author': 'Glyph Lefkowitz',
               'author_email': 'glyph@twistedmatrix.com',
               'bugtrack_url': '',
               'cheesecake_code_kwalitee_id': None,
               'cheesecake_documentation_id': None,
               'cheesecake_installability_id': None,
               'classifiers': ['Programming Language :: Python :: 2.6',
                               'Programming Language :: Python :: 2.7',
                               'Programming Language :: Python :: 2 :: Only'],
               'description': 'An extensible framework for Python programming, with '
                              'special focus\r\n'
                              'on event-based network programming and multiprotocol '
                              'integration.',
               'docs_url': '',
               'download_url': 'UNKNOWN',
               'home_page': 'http://twistedmatrix.com/',
               'keywords': '',
               'license': 'MIT',
               'maintainer': '',
               'maintainer_email': '',
               'name': 'Twisted',
               'package_url': 'http://pypi.python.org/pypi/Twisted',
               'platform': 'UNKNOWN',
               'release_url': 'http://pypi.python.org/pypi/Twisted/12.3.0',
               'requires_python': None,
               'stable_version': None,
               'summary': 'An asynchronous networking framework written in Python',
               'version': '12.3.0'},
      'urls': [{'comment_text': '',
                'downloads': 71844,
                'filename': 'Twisted-12.3.0.tar.bz2',
                'has_sig': False,
                'md5_digest': '6e289825f3bf5591cfd670874cc0862d',
                'packagetype': 'sdist',
                'python_version': 'source',
                'size': 2615733,
                'upload_time': '2012-12-26T12:47:03',
                'url': 'https://pypi.python.org/packages/source/T/Twisted/Twisted-12.3.0.tar.bz2'},
               {'comment_text': '',
                'downloads': 5224,
                'filename': 'Twisted-12.3.0.win32-py2.7.msi',
                'has_sig': False,
                'md5_digest': '6b778f5201b622a5519a2aca1a2fe512',
                'packagetype': 'bdist_msi',
                'python_version': '2.7',
                'size': 2916352,
                'upload_time': '2012-12-26T12:48:15',
                'url': 'https://pypi.python.org/packages/2.7/T/Twisted/Twisted-12.3.0.win32-py2.7.msi'}]}

The result can be limited to a certain `depth' (ellipsis is used for
deeper contents):

     >>> pprint.pprint(project_info, depth=2)
     {'info': {'_pypi_hidden': False,
               '_pypi_ordering': 125,
               'author': 'Glyph Lefkowitz',
               'author_email': 'glyph@twistedmatrix.com',
               'bugtrack_url': '',
               'cheesecake_code_kwalitee_id': None,
               'cheesecake_documentation_id': None,
               'cheesecake_installability_id': None,
               'classifiers': [...],
               'description': 'An extensible framework for Python programming, with '
                              'special focus\r\n'
                              'on event-based network programming and multiprotocol '
                              'integration.',
               'docs_url': '',
               'download_url': 'UNKNOWN',
               'home_page': 'http://twistedmatrix.com/',
               'keywords': '',
               'license': 'MIT',
               'maintainer': '',
               'maintainer_email': '',
               'name': 'Twisted',
               'package_url': 'http://pypi.python.org/pypi/Twisted',
               'platform': 'UNKNOWN',
               'release_url': 'http://pypi.python.org/pypi/Twisted/12.3.0',
               'requires_python': None,
               'stable_version': None,
               'summary': 'An asynchronous networking framework written in Python',
               'version': '12.3.0'},
      'urls': [{...}, {...}]}

Additionally, maximum character `width' can be suggested.  If a long
object cannot be split, the specified width will be exceeded:

     >>> pprint.pprint(project_info, depth=2, width=50)
     {'info': {'_pypi_hidden': False,
               '_pypi_ordering': 125,
               'author': 'Glyph Lefkowitz',
               'author_email': 'glyph@twistedmatrix.com',
               'bugtrack_url': '',
               'cheesecake_code_kwalitee_id': None,
               'cheesecake_documentation_id': None,
               'cheesecake_installability_id': None,
               'classifiers': [...],
               'description': 'An extensible '
                              'framework for Python '
                              'programming, with '
                              'special focus\r\n'
                              'on event-based network '
                              'programming and '
                              'multiprotocol '
                              'integration.',
               'docs_url': '',
               'download_url': 'UNKNOWN',
               'home_page': 'http://twistedmatrix.com/',
               'keywords': '',
               'license': 'MIT',
               'maintainer': '',
               'maintainer_email': '',
               'name': 'Twisted',
               'package_url': 'http://pypi.python.org/pypi/Twisted',
               'platform': 'UNKNOWN',
               'release_url': 'http://pypi.python.org/pypi/Twisted/12.3.0',
               'requires_python': None,
               'stable_version': None,
               'summary': 'An asynchronous networking '
                          'framework written in '
                          'Python',
               'version': '12.3.0'},
      'urls': [{...}, {...}]}

   ---------- Footnotes ----------

   (1) https://pypi.python.org/pypi


File: python.info,  Node: reprlib --- Alternate repr implementation,  Next: enum --- Support for enumerations,  Prev: pprint --- Data pretty printer,  Up: Data Types

5.8.12 ‘reprlib’ — Alternate ‘repr()’ implementation
----------------------------------------------------

`Source code:' Lib/reprlib.py(1)

__________________________________________________________________

The *note reprlib: dd. module provides a means for producing object
representations with limits on the size of the resulting strings.  This
is used in the Python debugger and may be useful in other contexts as
well.

This module provides a class, an instance, and a function:

 -- Class: reprlib.Repr

     Class which provides formatting services useful in implementing
     functions similar to the built-in *note repr(): 3bb.; size limits
     for different object types are added to avoid the generation of
     representations which are excessively long.

 -- Data: reprlib.aRepr

     This is an instance of *note Repr: 137c. which is used to provide
     the *note repr(): 137e. function described below.  Changing the
     attributes of this object will affect the size limits used by *note
     repr(): 137e. and the Python debugger.

 -- Function: reprlib.repr (obj)

     This is the *note repr(): 137f. method of ‘aRepr’.  It returns a
     string similar to that returned by the built-in function of the
     same name, but with limits on most sizes.

In addition to size-limiting tools, the module also provides a decorator
for detecting recursive calls to *note __repr__(): 7bd. and substituting
a placeholder string instead.

 -- Function: @reprlib.recursive_repr (fillvalue="...")

     Decorator for *note __repr__(): 7bd. methods to detect recursive
     calls within the same thread.  If a recursive call is made, the
     `fillvalue' is returned, otherwise, the usual *note __repr__():
     7bd. call is made.  For example:

          >>> class MyList(list):
          ...     @recursive_repr()
          ...     def __repr__(self):
          ...         return '<' + '|'.join(map(repr, self)) + '>'
          ...
          >>> m = MyList('abc')
          >>> m.append(m)
          >>> m.append('x')
          >>> print(m)
          <'a'|'b'|'c'|...|'x'>

     New in version 3.2.

* Menu:

* Repr Objects:: 
* Subclassing Repr Objects:: 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/reprlib.py


File: python.info,  Node: Repr Objects,  Next: Subclassing Repr Objects,  Up: reprlib --- Alternate repr implementation

5.8.12.1 Repr Objects
.....................

*note Repr: 137c. instances provide several attributes which can be used
to provide size limits for the representations of different object
types, and methods which format specific object types.

 -- Attribute: Repr.maxlevel

     Depth limit on the creation of recursive representations.  The
     default is ‘6’.

 -- Attribute: Repr.maxdict
 -- Attribute: Repr.maxlist
 -- Attribute: Repr.maxtuple
 -- Attribute: Repr.maxset
 -- Attribute: Repr.maxfrozenset
 -- Attribute: Repr.maxdeque
 -- Attribute: Repr.maxarray

     Limits on the number of entries represented for the named object
     type.  The default is ‘4’ for *note maxdict: 1383, ‘5’ for *note
     maxarray: 1389, and ‘6’ for the others.

 -- Attribute: Repr.maxlong

     Maximum number of characters in the representation for an integer.
     Digits are dropped from the middle.  The default is ‘40’.

 -- Attribute: Repr.maxstring

     Limit on the number of characters in the representation of the
     string.  Note that the "normal" representation of the string is
     used as the character source: if escape sequences are needed in the
     representation, these may be mangled when the representation is
     shortened.  The default is ‘30’.

 -- Attribute: Repr.maxother

     This limit is used to control the size of object types for which no
     specific formatting method is available on the *note Repr: 137c.
     object.  It is applied in a similar manner as *note maxstring:
     138b.  The default is ‘20’.

 -- Method: Repr.repr (obj)

     The equivalent to the built-in *note repr(): 3bb. that uses the
     formatting imposed by the instance.

 -- Method: Repr.repr1 (obj, level)

     Recursive implementation used by *note repr(): 137f.  This uses the
     type of `obj' to determine which formatting method to call, passing
     it `obj' and `level'.  The type-specific methods should call *note
     repr1(): 138d. to perform recursive formatting, with ‘level - 1’
     for the value of `level' in the recursive call.

 -- Method: Repr.repr_TYPE (obj, level)

     Formatting methods for specific types are implemented as methods
     with a name based on the type name.  In the method name, `TYPE' is
     replaced by ‘'_'.join(type(obj).__name__.split())’.  Dispatch to
     these methods is handled by *note repr1(): 138d.  Type-specific
     methods which need to recursively format a value should call
     ‘self.repr1(subobj, level - 1)’.


File: python.info,  Node: Subclassing Repr Objects,  Prev: Repr Objects,  Up: reprlib --- Alternate repr implementation

5.8.12.2 Subclassing Repr Objects
.................................

The use of dynamic dispatching by *note Repr.repr1(): 138d. allows
subclasses of *note Repr: 137c. to add support for additional built-in
object types or to modify the handling of types already supported.  This
example shows how special support for file objects could be added:

     import reprlib
     import sys

     class MyRepr(reprlib.Repr):

         def repr_TextIOWrapper(self, obj, level):
             if obj.name in {'<stdin>', '<stdout>', '<stderr>'}:
                 return obj.name
             return repr(obj)

     aRepr = MyRepr()
     print(aRepr.repr(sys.stdin))         # prints '<stdin>'

