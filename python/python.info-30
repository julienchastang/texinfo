This is python.info, produced by makeinfo version 6.0 from python.texi.

     Python 3.6.0a0, May 06, 2016

     Georg Brandl

     Copyright © 2001-2016, Python Software Foundation

INFO-DIR-SECTION Documentation tools
START-INFO-DIR-ENTRY
* Python: (python.info). The Python Programming Language
END-INFO-DIR-ENTRY


   Generated by Sphinx 1.4.1.


File: python.info,  Node: Exception Classes,  Next: Exception Objects,  Prev: Signal Handling<2>,  Up: Exception Handling

7.5.6 Exception Classes
-----------------------

 -- C Function: PyObject* PyErr_NewException (const char *name,
          PyObject *base, PyObject *dict)
     `Return value: New reference.'  This utility function creates and
     returns a new exception class.  The `name' argument must be the
     name of the new exception, a C string of the form
     ‘module.classname’.  The `base' and `dict' arguments are normally
     `NULL'. This creates a class object derived from *note Exception:
     1a1. (accessible in C as ‘PyExc_Exception’).

     The ‘__module__’ attribute of the new class is set to the first
     part (up to the last dot) of the `name' argument, and the class
     name is set to the last part (after the last dot).  The `base'
     argument can be used to specify alternate base classes; it can
     either be only one class or a tuple of classes.  The `dict'
     argument can be used to specify a dictionary of class variables and
     methods.

 -- C Function: PyObject* PyErr_NewExceptionWithDoc (const char *name,
          const char *doc, PyObject *base, PyObject *dict)
     `Return value: New reference.'  Same as *note PyErr_NewException():
     861, except that the new exception class can easily be given a
     docstring: If `doc' is non-`NULL', it will be used as the docstring
     for the exception class.

     New in version 3.2.


File: python.info,  Node: Exception Objects,  Next: Unicode Exception Objects,  Prev: Exception Classes,  Up: Exception Handling

7.5.7 Exception Objects
-----------------------

 -- C Function: PyObject* PyException_GetTraceback (PyObject *ex)
     `Return value: New reference.'  Return the traceback associated
     with the exception as a new reference, as accessible from Python
     through ‘__traceback__’.  If there is no traceback associated, this
     returns `NULL'.

 -- C Function: int PyException_SetTraceback (PyObject *ex,
          PyObject *tb)

     Set the traceback associated with the exception to `tb'.  Use
     ‘Py_None’ to clear it.

 -- C Function: PyObject* PyException_GetContext (PyObject *ex)

     Return the context (another exception instance during whose
     handling `ex' was raised) associated with the exception as a new
     reference, as accessible from Python through ‘__context__’.  If
     there is no context associated, this returns `NULL'.

 -- C Function: void PyException_SetContext (PyObject *ex,
          PyObject *ctx)

     Set the context associated with the exception to `ctx'.  Use `NULL'
     to clear it.  There is no type check to make sure that `ctx' is an
     exception instance.  This steals a reference to `ctx'.

 -- C Function: PyObject* PyException_GetCause (PyObject *ex)

     Return the cause (either an exception instance, or *note None: 19d,
     set by ‘raise ... from ...’) associated with the exception as a new
     reference, as accessible from Python through ‘__cause__’.

 -- C Function: void PyException_SetCause (PyObject *ex,
          PyObject *cause)

     Set the cause associated with the exception to `cause'.  Use `NULL'
     to clear it.  There is no type check to make sure that `cause' is
     either an exception instance or *note None: 19d.  This steals a
     reference to `cause'.

     ‘__suppress_context__’ is implicitly set to ‘True’ by this
     function.


File: python.info,  Node: Unicode Exception Objects,  Next: Recursion Control,  Prev: Exception Objects,  Up: Exception Handling

7.5.8 Unicode Exception Objects
-------------------------------

The following functions are used to create and modify Unicode exceptions
from C.

 -- C Function: PyObject* PyUnicodeDecodeError_Create (const
          char *encoding, const char *object, Py_ssize_t length,
          Py_ssize_t start, Py_ssize_t end, const char *reason)

     Create a *note UnicodeDecodeError: 571. object with the attributes
     `encoding', `object', `length', `start', `end' and `reason'.
     `encoding' and `reason' are UTF-8 encoded strings.

 -- C Function: PyObject* PyUnicodeEncodeError_Create (const
          char *encoding, const Py_UNICODE *object, Py_ssize_t length,
          Py_ssize_t start, Py_ssize_t end, const char *reason)

     Create a *note UnicodeEncodeError: 852. object with the attributes
     `encoding', `object', `length', `start', `end' and `reason'.
     `encoding' and `reason' are UTF-8 encoded strings.

 -- C Function: PyObject* PyUnicodeTranslateError_Create (const
          Py_UNICODE *object, Py_ssize_t length, Py_ssize_t start,
          Py_ssize_t end, const char *reason)

     Create a *note UnicodeTranslateError: 10c8. object with the
     attributes `object', `length', `start', `end' and `reason'.
     `reason' is a UTF-8 encoded string.

 -- C Function: PyObject* PyUnicodeDecodeError_GetEncoding
          (PyObject *exc)
 -- C Function: PyObject* PyUnicodeEncodeError_GetEncoding
          (PyObject *exc)

     Return the `encoding' attribute of the given exception object.

 -- C Function: PyObject* PyUnicodeDecodeError_GetObject (PyObject *exc)
 -- C Function: PyObject* PyUnicodeEncodeError_GetObject (PyObject *exc)
 -- C Function: PyObject* PyUnicodeTranslateError_GetObject
          (PyObject *exc)

     Return the `object' attribute of the given exception object.

 -- C Function: int PyUnicodeDecodeError_GetStart (PyObject *exc,
          Py_ssize_t *start)
 -- C Function: int PyUnicodeEncodeError_GetStart (PyObject *exc,
          Py_ssize_t *start)
 -- C Function: int PyUnicodeTranslateError_GetStart (PyObject *exc,
          Py_ssize_t *start)

     Get the `start' attribute of the given exception object and place
     it into `*start'.  `start' must not be `NULL'. Return ‘0’ on
     success, ‘-1’ on failure.

 -- C Function: int PyUnicodeDecodeError_SetStart (PyObject *exc,
          Py_ssize_t start)
 -- C Function: int PyUnicodeEncodeError_SetStart (PyObject *exc,
          Py_ssize_t start)
 -- C Function: int PyUnicodeTranslateError_SetStart (PyObject *exc,
          Py_ssize_t start)

     Set the `start' attribute of the given exception object to `start'.
     Return ‘0’ on success, ‘-1’ on failure.

 -- C Function: int PyUnicodeDecodeError_GetEnd (PyObject *exc,
          Py_ssize_t *end)
 -- C Function: int PyUnicodeEncodeError_GetEnd (PyObject *exc,
          Py_ssize_t *end)
 -- C Function: int PyUnicodeTranslateError_GetEnd (PyObject *exc,
          Py_ssize_t *end)

     Get the `end' attribute of the given exception object and place it
     into `*end'.  `end' must not be `NULL'. Return ‘0’ on success, ‘-1’
     on failure.

 -- C Function: int PyUnicodeDecodeError_SetEnd (PyObject *exc,
          Py_ssize_t end)
 -- C Function: int PyUnicodeEncodeError_SetEnd (PyObject *exc,
          Py_ssize_t end)
 -- C Function: int PyUnicodeTranslateError_SetEnd (PyObject *exc,
          Py_ssize_t end)

     Set the `end' attribute of the given exception object to `end'.
     Return ‘0’ on success, ‘-1’ on failure.

 -- C Function: PyObject* PyUnicodeDecodeError_GetReason (PyObject *exc)
 -- C Function: PyObject* PyUnicodeEncodeError_GetReason (PyObject *exc)
 -- C Function: PyObject* PyUnicodeTranslateError_GetReason
          (PyObject *exc)

     Return the `reason' attribute of the given exception object.

 -- C Function: int PyUnicodeDecodeError_SetReason (PyObject *exc, const
          char *reason)
 -- C Function: int PyUnicodeEncodeError_SetReason (PyObject *exc, const
          char *reason)
 -- C Function: int PyUnicodeTranslateError_SetReason (PyObject *exc,
          const char *reason)

     Set the `reason' attribute of the given exception object to
     `reason'.  Return ‘0’ on success, ‘-1’ on failure.


File: python.info,  Node: Recursion Control,  Next: Standard Exceptions,  Prev: Unicode Exception Objects,  Up: Exception Handling

7.5.9 Recursion Control
-----------------------

These two functions provide a way to perform safe recursive calls at the
C level, both in the core and in extension modules.  They are needed if
the recursive code does not necessarily invoke Python code (which tracks
its recursion depth automatically).

 -- C Function: int Py_EnterRecursiveCall (const char *where)

     Marks a point where a recursive C-level call is about to be
     performed.

     If ‘USE_STACKCHECK’ is defined, this function checks if the OS
     stack overflowed using *note PyOS_CheckStack(): 3428.  In this is
     the case, it sets a *note MemoryError: 10b9. and returns a nonzero
     value.

     The function then checks if the recursion limit is reached.  If
     this is the case, a *note RecursionError: 1b8. is set and a nonzero
     value is returned.  Otherwise, zero is returned.

     `where' should be a string such as ‘" in instance check"’ to be
     concatenated to the *note RecursionError: 1b8. message caused by
     the recursion depth limit.

 -- C Function: void Py_LeaveRecursiveCall ()

     Ends a *note Py_EnterRecursiveCall(): 3427.  Must be called once
     for each `successful' invocation of *note Py_EnterRecursiveCall():
     3427.

Properly implementing *note tp_repr: 3355. for container types requires
special recursion handling.  In addition to protecting the stack, *note
tp_repr: 3355. also needs to track objects to prevent cycles.  The
following two functions facilitate this functionality.  Effectively,
these are the C equivalent to *note reprlib.recursive_repr(): 7bf.

 -- C Function: int Py_ReprEnter (PyObject *object)

     Called at the beginning of the *note tp_repr: 3355. implementation
     to detect cycles.

     If the object has already been processed, the function returns a
     positive integer.  In that case the *note tp_repr: 3355.
     implementation should return a string object indicating a cycle.
     As examples, *note dict: 3b0. objects return ‘{...}’ and *note
     list: 25d. objects return ‘[...]’.

     The function will return a negative integer if the recursion limit
     is reached.  In that case the *note tp_repr: 3355. implementation
     should typically return ‘NULL’.

     Otherwise, the function returns zero and the *note tp_repr: 3355.
     implementation can continue normally.

 -- C Function: void Py_ReprLeave (PyObject *object)

     Ends a *note Py_ReprEnter(): 342a.  Must be called once for each
     invocation of *note Py_ReprEnter(): 342a. that returns zero.


File: python.info,  Node: Standard Exceptions,  Prev: Recursion Control,  Up: Exception Handling

7.5.10 Standard Exceptions
--------------------------

All standard Python exceptions are available as global variables whose
names are ‘PyExc_’ followed by the Python exception name.  These have
the type *note PyObject*: 9f5.; they are all class objects.  For
completeness, here are all the variables:

C Name                                        Python Name                           Notes
                                                                                    
---------------------------------------------------------------------------------------------------
                                                                                    
‘PyExc_BaseException’                         *note BaseException: 8c9.             (1)
                                                                                    
                                                                                    
‘PyExc_Exception’                             *note Exception: 1a1.                 (1)
                                                                                    
                                                                                    
‘PyExc_ArithmeticError’                       *note ArithmeticError: 10b3.          (1)
                                                                                    
                                                                                    
‘PyExc_LookupError’                           *note LookupError: 1015.              (1)
                                                                                    
                                                                                    
‘PyExc_AssertionError’                        *note AssertionError: f30.
                                              
                                                                                    
‘PyExc_AttributeError’                        *note AttributeError: 356.
                                              
                                                                                    
‘PyExc_BlockingIOError’                       *note BlockingIOError: 5b5.
                                              
                                                                                    
‘PyExc_BrokenPipeError’                       *note BrokenPipeError: 5bb.
                                              
                                                                                    
‘PyExc_ChildProcessError’                     *note ChildProcessError: 5b6.
                                              
                                                                                    
‘PyExc_ConnectionError’                       *note ConnectionError: 299.
                                              
                                                                                    
‘PyExc_ConnectionAbortedError’                *note ConnectionAbortedError: 5bc.
                                              
                                                                                    
‘PyExc_ConnectionRefusedError’                *note ConnectionRefusedError: 5bd.
                                              
                                                                                    
‘PyExc_ConnectionResetError’                  *note ConnectionResetError: 5be.
                                              
                                                                                    
‘PyExc_FileExistsError’                       *note FileExistsError: 56f.
                                              
                                                                                    
‘PyExc_FileNotFoundError’                     *note FileNotFoundError: 3aa.
                                              
                                                                                    
‘PyExc_EOFError’                              *note EOFError: 8d8.
                                              
                                                                                    
‘PyExc_FloatingPointError’                    *note FloatingPointError: 10b4.
                                              
                                                                                    
‘PyExc_ImportError’                           *note ImportError: 19f.
                                              
                                                                                    
‘PyExc_IndexError’                            *note IndexError: afb.
                                              
                                                                                    
‘PyExc_InterruptedError’                      *note InterruptedError: 1e7.
                                              
                                                                                    
‘PyExc_IsADirectoryError’                     *note IsADirectoryError: 5b7.
                                              
                                                                                    
‘PyExc_KeyError’                              *note KeyError: 1a7.
                                              
                                                                                    
‘PyExc_KeyboardInterrupt’                     *note KeyboardInterrupt: 1a3.
                                              
                                                                                    
‘PyExc_MemoryError’                           *note MemoryError: 10b9.
                                              
                                                                                    
‘PyExc_NameError’                             *note NameError: 9f2.
                                              
                                                                                    
‘PyExc_NotADirectoryError’                    *note NotADirectoryError: 5b8.
                                              
                                                                                    
‘PyExc_NotImplementedError’                   *note NotImplementedError: 569.
                                              
                                                                                    
‘PyExc_OSError’                               *note OSError: 4b6.                   (1)
                                                                                    
                                                                                    
‘PyExc_OverflowError’                         *note OverflowError: 578.
                                              
                                                                                    
‘PyExc_PermissionError’                       *note PermissionError: 1a6.
                                              
                                                                                    
‘PyExc_ProcessLookupError’                    *note ProcessLookupError: 5b9.
                                              
                                                                                    
‘PyExc_RecursionError’                        *note RecursionError: 1b8.
                                              
                                                                                    
‘PyExc_ReferenceError’                        *note ReferenceError: ad1.            (2)
                                                                                    
                                                                                    
‘PyExc_RuntimeError’                          *note RuntimeError: 193.
                                              
                                                                                    
‘PyExc_SyntaxError’                           *note SyntaxError: 3a6.
                                              
                                                                                    
‘PyExc_SystemError’                           *note SystemError: 1a0.
                                              
                                                                                    
‘PyExc_TimeoutError’                          *note TimeoutError: 5ba.
                                              
                                                                                    
‘PyExc_SystemExit’                            *note SystemExit: 1a2.
                                              
                                                                                    
‘PyExc_TypeError’                             *note TypeError: 562.
                                              
                                                                                    
‘PyExc_ValueError’                            *note ValueError: 19c.
                                              
                                                                                    
‘PyExc_ZeroDivisionError’                     *note ZeroDivisionError: c6a.
                                              

New in version 3.3: ‘PyExc_BlockingIOError’, ‘PyExc_BrokenPipeError’,
‘PyExc_ChildProcessError’, ‘PyExc_ConnectionError’,
‘PyExc_ConnectionAbortedError’, ‘PyExc_ConnectionRefusedError’,
‘PyExc_ConnectionResetError’, ‘PyExc_FileExistsError’,
‘PyExc_FileNotFoundError’, ‘PyExc_InterruptedError’,
‘PyExc_IsADirectoryError’, ‘PyExc_NotADirectoryError’,
‘PyExc_PermissionError’, ‘PyExc_ProcessLookupError’ and
‘PyExc_TimeoutError’ were introduced following PEP 3151(1).

New in version 3.5: ‘PyExc_RecursionError’.

These are compatibility aliases to ‘PyExc_OSError’:

C Name                                    Notes
                                          
---------------------------------------------------------
                                          
‘PyExc_EnvironmentError’

‘PyExc_IOError’

‘PyExc_WindowsError’                      (3)
                                          

Changed in version 3.3: These aliases used to be separate exception
types.

Notes:

  1. This is a base class for other standard exceptions.

  2. This is the same as *note weakref.ReferenceError: ae0.

  3. Only defined on Windows; protect code that uses this by testing
     that the preprocessor macro ‘MS_WINDOWS’ is defined.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3151


File: python.info,  Node: Utilities<2>,  Next: Abstract Objects Layer,  Prev: Exception Handling,  Up: Python/C API Reference Manual

7.6 Utilities
=============

The functions in this chapter perform various utility tasks, ranging
from helping C code be more portable across platforms, using Python
modules from C, and parsing function arguments and constructing Python
values from C values.

* Menu:

* Operating System Utilities:: 
* System Functions:: 
* Process Control:: 
* Importing Modules: Importing Modules<2>. 
* Data marshalling support:: 
* Parsing arguments and building values:: 
* String conversion and formatting:: 
* Reflection:: 
* Codec registry and support functions:: 


File: python.info,  Node: Operating System Utilities,  Next: System Functions,  Up: Utilities<2>

7.6.1 Operating System Utilities
--------------------------------

 -- C Function: int Py_FdIsInteractive (FILE *fp, const char *filename)

     Return true (nonzero) if the standard I/O file `fp' with name
     `filename' is deemed interactive.  This is the case for files for
     which ‘isatty(fileno(fp))’ is true.  If the global flag
     ‘Py_InteractiveFlag’ is true, this function also returns true if
     the `filename' pointer is `NULL' or if the name is equal to one of
     the strings ‘'<stdin>'’ or ‘'???'’.

 -- C Function: void PyOS_AfterFork ()

     Function to update some internal state after a process fork; this
     should be called in the new process if the Python interpreter will
     continue to be used.  If a new executable is loaded into the new
     process, this function does not need to be called.

 -- C Function: int PyOS_CheckStack ()

     Return true when the interpreter runs out of stack space.  This is
     a reliable check, but is only available when ‘USE_STACKCHECK’ is
     defined (currently on Windows using the Microsoft Visual C++
     compiler).  ‘USE_STACKCHECK’ will be defined automatically; you
     should never change the definition in your own code.

 -- C Function: PyOS_sighandler_t PyOS_getsig (int i)

     Return the current signal handler for signal `i'.  This is a thin
     wrapper around either ‘sigaction()’ or ‘signal()’.  Do not call
     those functions directly!  ‘PyOS_sighandler_t’ is a typedef alias
     for ‘void (*)(int)’.

 -- C Function: PyOS_sighandler_t PyOS_setsig (int i,
          PyOS_sighandler_t h)

     Set the signal handler for signal `i' to be `h'; return the old
     signal handler.  This is a thin wrapper around either ‘sigaction()’
     or ‘signal()’.  Do not call those functions directly!
     ‘PyOS_sighandler_t’ is a typedef alias for ‘void (*)(int)’.

 -- C Function: wchar_t* Py_DecodeLocale (const char* arg, size_t *size)

     Decode a byte string from the locale encoding with the *note
     surrogateescape error handler: 11f9.: undecodable bytes are decoded
     as characters in range U+DC80..U+DCFF. If a byte sequence can be
     decoded as a surrogate character, escape the bytes using the
     surrogateescape error handler instead of decoding them.

     Return a pointer to a newly allocated wide character string, use
     *note PyMem_RawFree(): 3438. to free the memory.  If size is not
     ‘NULL’, write the number of wide characters excluding the null
     character into ‘*size’

     Return ‘NULL’ on decoding error or memory allocation error.  If
     `size' is not ‘NULL’, ‘*size’ is set to ‘(size_t)-1’ on memory
     error or set to ‘(size_t)-2’ on decoding error.

     Decoding errors should never happen, unless there is a bug in the C
     library.

     Use the *note Py_EncodeLocale(): 382. function to encode the
     character string back to a byte string.

     See also
     ........

     The *note PyUnicode_DecodeFSDefaultAndSize(): 3439. and *note
     PyUnicode_DecodeLocaleAndSize(): 343a. functions.

     New in version 3.5.

 -- C Function: char* Py_EncodeLocale (const wchar_t *text,
          size_t *error_pos)

     Encode a wide character string to the locale encoding with the
     *note surrogateescape error handler: 11f9.: surrogate characters in
     the range U+DC80..U+DCFF are converted to bytes 0x80..0xFF.

     Return a pointer to a newly allocated byte string, use *note
     PyMem_Free(): a26. to free the memory.  Return ‘NULL’ on encoding
     error or memory allocation error

     If error_pos is not ‘NULL’, ‘*error_pos’ is set to the index of the
     invalid character on encoding error, or set to ‘(size_t)-1’
     otherwise.

     Use the *note Py_DecodeLocale(): 381. function to decode the bytes
     string back to a wide character string.

     See also
     ........

     The *note PyUnicode_EncodeFSDefault(): 343b. and *note
     PyUnicode_EncodeLocale(): 343c. functions.

     New in version 3.5.


File: python.info,  Node: System Functions,  Next: Process Control,  Prev: Operating System Utilities,  Up: Utilities<2>

7.6.2 System Functions
----------------------

These are utility functions that make functionality from the *note sys:
fb. module accessible to C code.  They all work with the current
interpreter thread’s *note sys: fb. module’s dict, which is contained in
the internal thread state structure.

 -- C Function: PyObject *PySys_GetObject (const char *name)
     `Return value: Borrowed reference.'  Return the object `name' from
     the *note sys: fb. module or `NULL' if it does not exist, without
     setting an exception.

 -- C Function: int PySys_SetObject (const char *name, PyObject *v)

     Set `name' in the *note sys: fb. module to `v' unless `v' is
     `NULL', in which case `name' is deleted from the sys module.
     Returns ‘0’ on success, ‘-1’ on error.

 -- C Function: void PySys_ResetWarnOptions ()

     Reset *note sys.warnoptions: 2e3e. to an empty list.

 -- C Function: void PySys_AddWarnOption (wchar_t *s)

     Append `s' to *note sys.warnoptions: 2e3e.

 -- C Function: void PySys_AddWarnOptionUnicode (PyObject *unicode)

     Append `unicode' to *note sys.warnoptions: 2e3e.

 -- C Function: void PySys_SetPath (wchar_t *path)

     Set *note sys.path: 16c. to a list object of paths found in `path'
     which should be a list of paths separated with the platform’s
     search path delimiter (‘:’ on Unix, ‘;’ on Windows).

 -- C Function: void PySys_WriteStdout (const char *format, ...)

     Write the output string described by `format' to *note sys.stdout:
     1ba.  No exceptions are raised, even if truncation occurs (see
     below).

     `format' should limit the total size of the formatted output string
     to 1000 bytes or less – after 1000 bytes, the output string is
     truncated.  In particular, this means that no unrestricted "%s"
     formats should occur; these should be limited using "%.<N>s" where
     <N> is a decimal number calculated so that <N> plus the maximum
     size of other formatted text does not exceed 1000 bytes.  Also
     watch out for "%f", which can print hundreds of digits for very
     large numbers.

     If a problem occurs, or *note sys.stdout: 1ba. is unset, the
     formatted message is written to the real (C level) `stdout'.

 -- C Function: void PySys_WriteStderr (const char *format, ...)

     As *note PySys_WriteStdout(): 3445, but write to *note sys.stderr:
     270. or `stderr' instead.

 -- C Function: void PySys_FormatStdout (const char *format, ...)

     Function similar to PySys_WriteStdout() but format the message
     using *note PyUnicode_FromFormatV(): 3448. and don’t truncate the
     message to an arbitrary length.

     New in version 3.2.

 -- C Function: void PySys_FormatStderr (const char *format, ...)

     As *note PySys_FormatStdout(): 3447, but write to *note sys.stderr:
     270. or `stderr' instead.

     New in version 3.2.

 -- C Function: void PySys_AddXOption (const wchar_t *s)

     Parse `s' as a set of *note -X: 5ec. options and add them to the
     current options mapping as returned by *note PySys_GetXOptions():
     344b.

     New in version 3.2.

 -- C Function: PyObject *PySys_GetXOptions ()
     `Return value: Borrowed reference.'  Return the current dictionary
     of *note -X: 5ec. options, similarly to *note sys._xoptions: d11.
     On error, `NULL' is returned and an exception is set.

     New in version 3.2.


File: python.info,  Node: Process Control,  Next: Importing Modules<2>,  Prev: System Functions,  Up: Utilities<2>

7.6.3 Process Control
---------------------

 -- C Function: void Py_FatalError (const char *message)

     Print a fatal error message and kill the process.  No cleanup is
     performed.  This function should only be invoked when a condition
     is detected that would make it dangerous to continue using the
     Python interpreter; e.g., when the object administration appears to
     be corrupted.  On Unix, the standard C library function ‘abort()’
     is called which will attempt to produce a ‘core’ file.

 -- C Function: void Py_Exit (int status)

     Exit the current process.  This calls *note Py_FinalizeEx(): 185.
     and then calls the standard C library function ‘exit(status)’.  If
     *note Py_FinalizeEx(): 185. indicates an error, the exit status is
     set to 120.

     Changed in version 3.6: Errors from finalization no longer ignored.

 -- C Function: int Py_AtExit (void (*func)())

     Register a cleanup function to be called by *note Py_FinalizeEx():
     185.  The cleanup function will be called with no arguments and
     should return no value.  At most 32 cleanup functions can be
     registered.  When the registration is successful, *note
     Py_AtExit(): 344f. returns ‘0’; on failure, it returns ‘-1’.  The
     cleanup function registered last is called first.  Each cleanup
     function will be called at most once.  Since Python’s internal
     finalization will have completed before the cleanup function, no
     Python APIs should be called by `func'.


File: python.info,  Node: Importing Modules<2>,  Next: Data marshalling support,  Prev: Process Control,  Up: Utilities<2>

7.6.4 Importing Modules
-----------------------

 -- C Function: PyObject* PyImport_ImportModule (const char *name)
     `Return value: New reference.'

     This is a simplified interface to *note PyImport_ImportModuleEx():
     763. below, leaving the `globals' and `locals' arguments set to
     `NULL' and `level' set to 0.  When the `name' argument contains a
     dot (when it specifies a submodule of a package), the `fromlist'
     argument is set to the list ‘['*']’ so that the return value is the
     named module rather than the top-level package containing it as
     would otherwise be the case.  (Unfortunately, this has an
     additional side effect when `name' in fact specifies a subpackage
     instead of a submodule: the submodules specified in the package’s
     ‘__all__’ variable are loaded.)  Return a new reference to the
     imported module, or `NULL' with an exception set on failure.  A
     failing import of a module doesn’t leave the module in *note
     sys.modules: e75.

     This function always uses absolute imports.

 -- C Function: PyObject* PyImport_ImportModuleNoBlock (const
          char *name)

     This function is a deprecated alias of *note
     PyImport_ImportModule(): 8df.

     Changed in version 3.3: This function used to fail immediately when
     the import lock was held by another thread.  In Python 3.3 though,
     the locking scheme switched to per-module locks for most purposes,
     so this function’s special behaviour isn’t needed anymore.

 -- C Function: PyObject* PyImport_ImportModuleEx (const char *name,
          PyObject *globals, PyObject *locals, PyObject *fromlist)
     `Return value: New reference.'

     Import a module.  This is best described by referring to the
     built-in Python function *note __import__(): 5cd.

     The return value is a new reference to the imported module or
     top-level package, or `NULL' with an exception set on failure.
     Like for *note __import__(): 5cd, the return value when a submodule
     of a package was requested is normally the top-level package,
     unless a non-empty `fromlist' was given.

     Failing imports remove incomplete module objects, like with *note
     PyImport_ImportModule(): 8df.

 -- C Function: PyObject* PyImport_ImportModuleLevelObject
          (PyObject *name, PyObject *globals, PyObject *locals,
          PyObject *fromlist, int level)

     Import a module.  This is best described by referring to the
     built-in Python function *note __import__(): 5cd, as the standard
     *note __import__(): 5cd. function calls this function directly.

     The return value is a new reference to the imported module or
     top-level package, or `NULL' with an exception set on failure.
     Like for *note __import__(): 5cd, the return value when a submodule
     of a package was requested is normally the top-level package,
     unless a non-empty `fromlist' was given.

     New in version 3.3.

 -- C Function: PyObject* PyImport_ImportModuleLevel (const char *name,
          PyObject *globals, PyObject *locals, PyObject *fromlist,
          int level)
     `Return value: New reference.'  Similar to *note
     PyImport_ImportModuleLevelObject(): 3453, but the name is a UTF-8
     encoded string instead of a Unicode object.

     Changed in version 3.3: Negative values for `level' are no longer
     accepted.

 -- C Function: PyObject* PyImport_Import (PyObject *name)
     `Return value: New reference.'  This is a higher-level interface
     that calls the current "import hook function" (with an explicit
     `level' of 0, meaning absolute import).  It invokes the *note
     __import__(): 5cd. function from the ‘__builtins__’ of the current
     globals.  This means that the import is done using whatever import
     hooks are installed in the current environment.

     This function always uses absolute imports.

 -- C Function: PyObject* PyImport_ReloadModule (PyObject *m)
     `Return value: New reference.'  Reload a module.  Return a new
     reference to the reloaded module, or `NULL' with an exception set
     on failure (the module still exists in this case).

 -- C Function: PyObject* PyImport_AddModuleObject (PyObject *name)

     Return the module object corresponding to a module name.  The
     `name' argument may be of the form ‘package.module’.  First check
     the modules dictionary if there’s one there, and if not, create a
     new one and insert it in the modules dictionary.  Return `NULL'
     with an exception set on failure.

          Note: This function does not load or import the module; if the
          module wasn’t already loaded, you will get an empty module
          object.  Use *note PyImport_ImportModule(): 8df. or one of its
          variants to import a module.  Package structures implied by a
          dotted name for `name' are not created if not already present.

     New in version 3.3.

 -- C Function: PyObject* PyImport_AddModule (const char *name)
     `Return value: Borrowed reference.'  Similar to *note
     PyImport_AddModuleObject(): 3455, but the name is a UTF-8 encoded
     string instead of a Unicode object.

 -- C Function: PyObject* PyImport_ExecCodeModule (const char *name,
          PyObject *co)
     `Return value: New reference.'

     Given a module name (possibly of the form ‘package.module’) and a
     code object read from a Python bytecode file or obtained from the
     built-in function *note compile(): 903, load the module.  Return a
     new reference to the module object, or `NULL' with an exception set
     if an error occurred.  `name' is removed from *note sys.modules:
     e75. in error cases, even if `name' was already in *note
     sys.modules: e75. on entry to *note PyImport_ExecCodeModule():
     3456.  Leaving incompletely initialized modules in *note
     sys.modules: e75. is dangerous, as imports of such modules have no
     way to know that the module object is an unknown (and probably
     damaged with respect to the module author’s intents) state.

     The module’s *note __spec__: e90. and *note __loader__: 56c. will
     be set, if not set already, with the appropriate values.  The
     spec’s loader will be set to the module’s ‘__loader__’ (if set) and
     to an instance of ‘SourceFileLoader’ otherwise.

     The module’s *note __file__: df0. attribute will be set to the code
     object’s ‘co_filename’.  If applicable, *note __cached__: 775. will
     also be set.

     This function will reload the module if it was already imported.
     See *note PyImport_ReloadModule(): 3454. for the intended way to
     reload a module.

     If `name' points to a dotted name of the form ‘package.module’, any
     package structures not already created will still not be created.

     See also *note PyImport_ExecCodeModuleEx(): 3457. and *note
     PyImport_ExecCodeModuleWithPathnames(): 3458.

 -- C Function: PyObject* PyImport_ExecCodeModuleEx (const char *name,
          PyObject *co, const char *pathname)
     `Return value: New reference.'  Like *note
     PyImport_ExecCodeModule(): 3456, but the *note __file__: df0.
     attribute of the module object is set to `pathname' if it is
     non-‘NULL’.

     See also *note PyImport_ExecCodeModuleWithPathnames(): 3458.

 -- C Function: PyObject* PyImport_ExecCodeModuleObject (PyObject *name,
          PyObject *co, PyObject *pathname, PyObject *cpathname)

     Like *note PyImport_ExecCodeModuleEx(): 3457, but the *note
     __cached__: 775. attribute of the module object is set to
     `cpathname' if it is non-‘NULL’.  Of the three functions, this is
     the preferred one to use.

     New in version 3.3.

 -- C Function: PyObject* PyImport_ExecCodeModuleWithPathnames (const
          char *name, PyObject *co, const char *pathname, const
          char *cpathname)

     Like *note PyImport_ExecCodeModuleObject(): 3459, but `name',
     `pathname' and `cpathname' are UTF-8 encoded strings.  Attempts are
     also made to figure out what the value for `pathname' should be
     from `cpathname' if the former is set to ‘NULL’.

     New in version 3.2.

     Changed in version 3.3: Uses *note imp.source_from_cache(): 32df.
     in calculating the source path if only the bytecode path is
     provided.

 -- C Function: long PyImport_GetMagicNumber ()

     Return the magic number for Python bytecode files (a.k.a.  ‘.pyc’
     file).  The magic number should be present in the first four bytes
     of the bytecode file, in little-endian byte order.  Returns -1 on
     error.

     Changed in version 3.3: Return value of -1 upon failure.

 -- C Function: const char * PyImport_GetMagicTag ()

     Return the magic tag string for PEP 3147(1) format Python bytecode
     file names.  Keep in mind that the value at
     ‘sys.implementation.cache_tag’ is authoritative and should be used
     instead of this function.

     New in version 3.2.

 -- C Function: PyObject* PyImport_GetModuleDict ()
     `Return value: Borrowed reference.'  Return the dictionary used for
     the module administration (a.k.a.  ‘sys.modules’).  Note that this
     is a per-interpreter variable.

 -- C Function: PyObject* PyImport_GetImporter (PyObject *path)

     Return an importer object for a *note sys.path: 16c./‘pkg.__path__’
     item `path', possibly by fetching it from the *note
     sys.path_importer_cache: 3ac. dict.  If it wasn’t yet cached,
     traverse *note sys.path_hooks: 574. until a hook is found that can
     handle the path item.  Return ‘None’ if no hook could; this tells
     our caller it should fall back to the built-in import mechanism.
     Cache the result in *note sys.path_importer_cache: 3ac.  Return a
     new reference to the importer object.

 -- C Function: void _PyImport_Init ()

     Initialize the import mechanism.  For internal use only.

 -- C Function: void PyImport_Cleanup ()

     Empty the module table.  For internal use only.

 -- C Function: void _PyImport_Fini ()

     Finalize the import mechanism.  For internal use only.

 -- C Function: PyObject* _PyImport_FindExtension (char *, char *)

     For internal use only.

 -- C Function: int PyImport_ImportFrozenModuleObject (PyObject *name)

     Load a frozen module named `name'.  Return ‘1’ for success, ‘0’ if
     the module is not found, and ‘-1’ with an exception set if the
     initialization failed.  To access the imported module on a
     successful load, use *note PyImport_ImportModule(): 8df.  (Note the
     misnomer — this function would reload the module if it was already
     imported.)

     New in version 3.3.

     Changed in version 3.4: The ‘__file__’ attribute is no longer set
     on the module.

 -- C Function: int PyImport_ImportFrozenModule (const char *name)

     Similar to *note PyImport_ImportFrozenModuleObject(): 3461, but the
     name is a UTF-8 encoded string instead of a Unicode object.

 -- C Type: struct _frozen

     This is the structure type definition for frozen module
     descriptors, as generated by the ‘freeze’ utility (see
     ‘Tools/freeze/’ in the Python source distribution).  Its
     definition, found in ‘Include/import.h’, is:

          struct _frozen {
              char *name;
              unsigned char *code;
              int size;
          };

 -- C Variable: struct _frozen* PyImport_FrozenModules

     This pointer is initialized to point to an array of ‘struct
     _frozen’ records, terminated by one whose members are all `NULL' or
     zero.  When a frozen module is imported, it is searched in this
     table.  Third-party code could play tricks with this to provide a
     dynamically created collection of frozen modules.

 -- C Function: int PyImport_AppendInittab (const char *name, PyObject*
          (*initfunc)(void))

     Add a single module to the existing table of built-in modules.
     This is a convenience wrapper around *note
     PyImport_ExtendInittab(): 3464, returning ‘-1’ if the table could
     not be extended.  The new module can be imported by the name
     `name', and uses the function `initfunc' as the initialization
     function called on the first attempted import.  This should be
     called before *note Py_Initialize(): 876.

 -- C Type: struct _inittab

     Structure describing a single entry in the list of built-in
     modules.  Each of these structures gives the name and
     initialization function for a module built into the interpreter.
     The name is an ASCII encoded string.  Programs which embed Python
     may use an array of these structures in conjunction with *note
     PyImport_ExtendInittab(): 3464. to provide additional built-in
     modules.  The structure is defined in ‘Include/import.h’ as:

          struct _inittab {
              char *name;                 /* ASCII encoded string */
              PyObject* (*initfunc)(void);
          };

 -- C Function: int PyImport_ExtendInittab (struct _inittab *newtab)

     Add a collection of modules to the table of built-in modules.  The
     `newtab' array must end with a sentinel entry which contains `NULL'
     for the ‘name’ field; failure to provide the sentinel value can
     result in a memory fault.  Returns ‘0’ on success or ‘-1’ if
     insufficient memory could be allocated to extend the internal
     table.  In the event of failure, no modules are added to the
     internal table.  This should be called before *note
     Py_Initialize(): 876.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3147


File: python.info,  Node: Data marshalling support,  Next: Parsing arguments and building values,  Prev: Importing Modules<2>,  Up: Utilities<2>

7.6.5 Data marshalling support
------------------------------

These routines allow C code to work with serialized objects using the
same data format as the *note marshal: af. module.  There are functions
to write data into the serialization format, and additional functions
that can be used to read the data back.  Files used to store marshalled
data must be opened in binary mode.

Numeric values are stored with the least significant byte first.

The module supports two versions of the data format: version 0 is the
historical version, version 1 shares interned strings in the file, and
upon unmarshalling.  Version 2 uses a binary format for floating point
numbers.  `Py_MARSHAL_VERSION' indicates the current file format
(currently 2).

 -- C Function: void PyMarshal_WriteLongToFile (long value, FILE *file,
          int version)

     Marshal a ‘long’ integer, `value', to `file'.  This will only write
     the least-significant 32 bits of `value'; regardless of the size of
     the native ‘long’ type.  `version' indicates the file format.

 -- C Function: void PyMarshal_WriteObjectToFile (PyObject *value,
          FILE *file, int version)

     Marshal a Python object, `value', to `file'.  `version' indicates
     the file format.

 -- C Function: PyObject* PyMarshal_WriteObjectToString
          (PyObject *value, int version)
     `Return value: New reference.'  Return a string object containing
     the marshalled representation of `value'.  `version' indicates the
     file format.

The following functions allow marshalled values to be read back in.

XXX What about error detection?  It appears that reading past the end of
the file will always result in a negative numeric value (where that’s
relevant), but it’s not clear that negative values won’t be handled
properly when there’s no error.  What’s the right way to tell?  Should
only non-negative values be written using these routines?

 -- C Function: long PyMarshal_ReadLongFromFile (FILE *file)

     Return a C ‘long’ from the data stream in a ‘FILE*’ opened for
     reading.  Only a 32-bit value can be read in using this function,
     regardless of the native size of ‘long’.

     On error, raise an exception and return ‘-1’.

 -- C Function: int PyMarshal_ReadShortFromFile (FILE *file)

     Return a C ‘short’ from the data stream in a ‘FILE*’ opened for
     reading.  Only a 16-bit value can be read in using this function,
     regardless of the native size of ‘short’.

     On error, raise an exception and return ‘-1’.

 -- C Function: PyObject* PyMarshal_ReadObjectFromFile (FILE *file)
     `Return value: New reference.'  Return a Python object from the
     data stream in a ‘FILE*’ opened for reading.

     On error, sets the appropriate exception (*note EOFError: 8d8. or
     *note TypeError: 562.) and returns `NULL'.

 -- C Function: PyObject* PyMarshal_ReadLastObjectFromFile (FILE *file)
     `Return value: New reference.'  Return a Python object from the
     data stream in a ‘FILE*’ opened for reading.  Unlike *note
     PyMarshal_ReadObjectFromFile(): 346e, this function assumes that no
     further objects will be read from the file, allowing it to
     aggressively load file data into memory so that the
     de-serialization can operate from data in memory rather than
     reading a byte at a time from the file.  Only use these variant if
     you are certain that you won’t be reading anything else from the
     file.

     On error, sets the appropriate exception (*note EOFError: 8d8. or
     *note TypeError: 562.) and returns `NULL'.

 -- C Function: PyObject* PyMarshal_ReadObjectFromString (const
          char *string, Py_ssize_t len)
     `Return value: New reference.'  Return a Python object from the
     data stream in a character buffer containing `len' bytes pointed to
     by `string'.

     On error, sets the appropriate exception (*note EOFError: 8d8. or
     *note TypeError: 562.) and returns `NULL'.


File: python.info,  Node: Parsing arguments and building values,  Next: String conversion and formatting,  Prev: Data marshalling support,  Up: Utilities<2>

7.6.6 Parsing arguments and building values
-------------------------------------------

These functions are useful when creating your own extensions functions
and methods.  Additional information and examples are available in *note
Extending and Embedding the Python Interpreter: bc7.

The first three of these functions described, *note PyArg_ParseTuple():
724, *note PyArg_ParseTupleAndKeywords(): a57, and *note PyArg_Parse():
3473, all use `format strings' which are used to tell the function about
the expected arguments.  The format strings use the same syntax for each
of these functions.

* Menu:

* Parsing arguments: Parsing arguments<3>. 
* Building values:: 


File: python.info,  Node: Parsing arguments<3>,  Next: Building values,  Up: Parsing arguments and building values

7.6.6.1 Parsing arguments
.........................

A format string consists of zero or more "format units."  A format unit
describes one Python object; it is usually a single character or a
parenthesized sequence of format units.  With a few exceptions, a format
unit that is not a parenthesized sequence normally corresponds to a
single address argument to these functions.  In the following
description, the quoted form is the format unit; the entry in (round)
parentheses is the Python object type that matches the format unit; and
the entry in [square] brackets is the type of the C variable(s) whose
address should be passed.

* Menu:

* Strings and buffers:: 
* Numbers: Numbers<2>. 
* Other objects:: 
* API Functions:: 


File: python.info,  Node: Strings and buffers,  Next: Numbers<2>,  Up: Parsing arguments<3>

7.6.6.2 Strings and buffers
...........................

These formats allow accessing an object as a contiguous chunk of memory.
You don’t have to provide raw storage for the returned unicode or bytes
area.  Also, you won’t have to release any memory yourself, except with
the ‘es’, ‘es#’, ‘et’ and ‘et#’ formats.

However, when a *note Py_buffer: 75d. structure gets filled, the
underlying buffer is locked so that the caller can subsequently use the
buffer even inside a *note Py_BEGIN_ALLOW_THREADS: 3326. block without
the risk of mutable data being resized or destroyed.  As a result, `you
have to call' *note PyBuffer_Release(): 9cb. after you have finished
processing the data (or in any early abort case).

Unless otherwise stated, buffers are not NUL-terminated.

     Note: For all ‘#’ variants of formats (‘s#’, ‘y#’, etc.), the type
     of the length argument (int or ‘Py_ssize_t’) is controlled by
     defining the macro ‘PY_SSIZE_T_CLEAN’ before including ‘Python.h’.
     If the macro was defined, length is a ‘Py_ssize_t’ rather than an
     ‘int’.  This behavior will change in a future Python version to
     only support ‘Py_ssize_t’ and drop ‘int’ support.  It is best to
     always define ‘PY_SSIZE_T_CLEAN’.

‘s’ (*note str: 25a.) [const char *]

     Convert a Unicode object to a C pointer to a character string.  A
     pointer to an existing string is stored in the character pointer
     variable whose address you pass.  The C string is NUL-terminated.
     The Python string must not contain embedded NUL bytes; if it does,
     a *note TypeError: 562. exception is raised.  Unicode objects are
     converted to C strings using ‘'utf-8'’ encoding.  If this
     conversion fails, a *note UnicodeError: 8a2. is raised.

          Note: This format does not accept *note bytes-like objects:
          36b.  If you want to accept filesystem paths and convert them
          to C character strings, it is preferable to use the ‘O&’
          format with *note PyUnicode_FSConverter(): 3476. as
          `converter'.

‘s*’ (*note str: 25a. or *note bytes-like object: 36b.) [Py_buffer]

     This format accepts Unicode objects as well as bytes-like objects.
     It fills a *note Py_buffer: 75d. structure provided by the caller.
     In this case the resulting C string may contain embedded NUL bytes.
     Unicode objects are converted to C strings using ‘'utf-8'’
     encoding.

‘s#’ (*note str: 25a, read-only *note bytes-like object: 36b.) [const char *, int or ‘Py_ssize_t’]

     Like ‘s*’, except that it doesn’t accept mutable bytes-like objects
     such as *note bytearray: 1dc.  The result is stored into two C
     variables, the first one a pointer to a C string, the second one
     its length.  The string may contain embedded null bytes.  Unicode
     objects are converted to C strings using ‘'utf-8'’ encoding.

‘z’ (*note str: 25a. or ‘None’) [const char *]

     Like ‘s’, but the Python object may also be ‘None’, in which case
     the C pointer is set to `NULL'.

‘z*’ (*note str: 25a, *note bytes-like object: 36b. or ‘None’) [Py_buffer]

     Like ‘s*’, but the Python object may also be ‘None’, in which case
     the ‘buf’ member of the *note Py_buffer: 75d. structure is set to
     `NULL'.

‘z#’ (*note str: 25a, read-only *note bytes-like object: 36b. or ‘None’) [const char *, int]

     Like ‘s#’, but the Python object may also be ‘None’, in which case
     the C pointer is set to `NULL'.

‘y’ (read-only *note bytes-like object: 36b.) [const char *]

     This format converts a bytes-like object to a C pointer to a
     character string; it does not accept Unicode objects.  The bytes
     buffer must not contain embedded NUL bytes; if it does, a *note
     TypeError: 562. exception is raised.

‘y*’ (*note bytes-like object: 36b.) [Py_buffer]

     This variant on ‘s*’ doesn’t accept Unicode objects, only
     bytes-like objects.  `This is the recommended way to accept binary
     data.'

‘y#’ (read-only *note bytes-like object: 36b.) [const char *, int]

     This variant on ‘s#’ doesn’t accept Unicode objects, only
     bytes-like objects.

‘S’ (*note bytes: 1db.) [PyBytesObject *]

     Requires that the Python object is a *note bytes: 1db. object,
     without attempting any conversion.  Raises *note TypeError: 562. if
     the object is not a bytes object.  The C variable may also be
     declared as *note PyObject*: 9f5.

‘Y’ (*note bytearray: 1dc.) [PyByteArrayObject *]

     Requires that the Python object is a *note bytearray: 1dc. object,
     without attempting any conversion.  Raises *note TypeError: 562. if
     the object is not a *note bytearray: 1dc. object.  The C variable
     may also be declared as *note PyObject*: 9f5.

‘u’ (*note str: 25a.) [Py_UNICODE *]

     Convert a Python Unicode object to a C pointer to a NUL-terminated
     buffer of Unicode characters.  You must pass the address of a *note
     Py_UNICODE: 72f. pointer variable, which will be filled with the
     pointer to an existing Unicode buffer.  Please note that the width
     of a *note Py_UNICODE: 72f. character depends on compilation
     options (it is either 16 or 32 bits).  The Python string must not
     contain embedded NUL characters; if it does, a *note TypeError:
     562. exception is raised.

          Note: Since ‘u’ doesn’t give you back the length of the
          string, and it may contain embedded NUL characters, it is
          recommended to use ‘u#’ or ‘U’ instead.

‘u#’ (*note str: 25a.) [Py_UNICODE *, int]

     This variant on ‘u’ stores into two C variables, the first one a
     pointer to a Unicode data buffer, the second one its length.

‘Z’ (*note str: 25a. or ‘None’) [Py_UNICODE *]

     Like ‘u’, but the Python object may also be ‘None’, in which case
     the *note Py_UNICODE: 72f. pointer is set to `NULL'.

‘Z#’ (*note str: 25a. or ‘None’) [Py_UNICODE *, int]

     Like ‘u#’, but the Python object may also be ‘None’, in which case
     the *note Py_UNICODE: 72f. pointer is set to `NULL'.

‘U’ (*note str: 25a.) [PyObject *]

     Requires that the Python object is a Unicode object, without
     attempting any conversion.  Raises *note TypeError: 562. if the
     object is not a Unicode object.  The C variable may also be
     declared as *note PyObject*: 9f5.

‘w*’ (read-write *note bytes-like object: 36b.) [Py_buffer]

     This format accepts any object which implements the read-write
     buffer interface.  It fills a *note Py_buffer: 75d. structure
     provided by the caller.  The buffer may contain embedded null
     bytes.  The caller have to call *note PyBuffer_Release(): 9cb. when
     it is done with the buffer.

‘es’ (*note str: 25a.) [const char *encoding, char **buffer]

     This variant on ‘s’ is used for encoding Unicode into a character
     buffer.  It only works for encoded data without embedded NUL bytes.

     This format requires two arguments.  The first is only used as
     input, and must be a ‘const char*’ which points to the name of an
     encoding as a NUL-terminated string, or `NULL', in which case
     ‘'utf-8'’ encoding is used.  An exception is raised if the named
     encoding is not known to Python.  The second argument must be a
     ‘char**’; the value of the pointer it references will be set to a
     buffer with the contents of the argument text.  The text will be
     encoded in the encoding specified by the first argument.

     *note PyArg_ParseTuple(): 724. will allocate a buffer of the needed
     size, copy the encoded data into this buffer and adjust `*buffer'
     to reference the newly allocated storage.  The caller is
     responsible for calling *note PyMem_Free(): a26. to free the
     allocated buffer after use.

‘et’ (*note str: 25a, *note bytes: 1db. or *note bytearray: 1dc.) [const char *encoding, char **buffer]

     Same as ‘es’ except that byte string objects are passed through
     without recoding them.  Instead, the implementation assumes that
     the byte string object uses the encoding passed in as parameter.

‘es#’ (*note str: 25a.) [const char *encoding, char **buffer, int *buffer_length]

     This variant on ‘s#’ is used for encoding Unicode into a character
     buffer.  Unlike the ‘es’ format, this variant allows input data
     which contains NUL characters.

     It requires three arguments.  The first is only used as input, and
     must be a ‘const char*’ which points to the name of an encoding as
     a NUL-terminated string, or `NULL', in which case ‘'utf-8'’
     encoding is used.  An exception is raised if the named encoding is
     not known to Python.  The second argument must be a ‘char**’; the
     value of the pointer it references will be set to a buffer with the
     contents of the argument text.  The text will be encoded in the
     encoding specified by the first argument.  The third argument must
     be a pointer to an integer; the referenced integer will be set to
     the number of bytes in the output buffer.

     There are two modes of operation:

     If `*buffer' points a `NULL' pointer, the function will allocate a
     buffer of the needed size, copy the encoded data into this buffer
     and set `*buffer' to reference the newly allocated storage.  The
     caller is responsible for calling *note PyMem_Free(): a26. to free
     the allocated buffer after usage.

     If `*buffer' points to a non-`NULL' pointer (an already allocated
     buffer), *note PyArg_ParseTuple(): 724. will use this location as
     the buffer and interpret the initial value of `*buffer_length' as
     the buffer size.  It will then copy the encoded data into the
     buffer and NUL-terminate it.  If the buffer is not large enough, a
     *note ValueError: 19c. will be set.

     In both cases, `*buffer_length' is set to the length of the encoded
     data without the trailing NUL byte.

‘et#’ (*note str: 25a, *note bytes: 1db. or *note bytearray: 1dc.) [const char *encoding, char **buffer, int *buffer_length]

     Same as ‘es#’ except that byte string objects are passed through
     without recoding them.  Instead, the implementation assumes that
     the byte string object uses the encoding passed in as parameter.


File: python.info,  Node: Numbers<2>,  Next: Other objects,  Prev: Strings and buffers,  Up: Parsing arguments<3>

7.6.6.3 Numbers
...............

‘b’ (*note int: 227.) [unsigned char]

     Convert a nonnegative Python integer to an unsigned tiny int,
     stored in a C ‘unsigned char’.

‘B’ (*note int: 227.) [unsigned char]

     Convert a Python integer to a tiny int without overflow checking,
     stored in a C ‘unsigned char’.

‘h’ (*note int: 227.) [short int]

     Convert a Python integer to a C ‘short int’.

‘H’ (*note int: 227.) [unsigned short int]

     Convert a Python integer to a C ‘unsigned short int’, without
     overflow checking.

‘i’ (*note int: 227.) [int]

     Convert a Python integer to a plain C ‘int’.

‘I’ (*note int: 227.) [unsigned int]

     Convert a Python integer to a C ‘unsigned int’, without overflow
     checking.

‘l’ (*note int: 227.) [long int]

     Convert a Python integer to a C ‘long int’.

‘k’ (*note int: 227.) [unsigned long]

     Convert a Python integer to a C ‘unsigned long’ without overflow
     checking.

‘L’ (*note int: 227.) [PY_LONG_LONG]

     Convert a Python integer to a C ‘long long’.  This format is only
     available on platforms that support ‘long long’ (or ‘_int64’ on
     Windows).

‘K’ (*note int: 227.) [unsigned PY_LONG_LONG]

     Convert a Python integer to a C ‘unsigned long long’ without
     overflow checking.  This format is only available on platforms that
     support ‘unsigned long long’ (or ‘unsigned _int64’ on Windows).

‘n’ (*note int: 227.) [Py_ssize_t]

     Convert a Python integer to a C ‘Py_ssize_t’.

‘c’ (*note bytes: 1db. or *note bytearray: 1dc. of length 1) [char]

     Convert a Python byte, represented as a *note bytes: 1db. or *note
     bytearray: 1dc. object of length 1, to a C ‘char’.

     Changed in version 3.3: Allow *note bytearray: 1dc. objects.

‘C’ (*note str: 25a. of length 1) [int]

     Convert a Python character, represented as a *note str: 25a. object
     of length 1, to a C ‘int’.

‘f’ (*note float: 57a.) [float]

     Convert a Python floating point number to a C ‘float’.

‘d’ (*note float: 57a.) [double]

     Convert a Python floating point number to a C ‘double’.

‘D’ (*note complex: 579.) [Py_complex]

     Convert a Python complex number to a C *note Py_complex: 3478.
     structure.


File: python.info,  Node: Other objects,  Next: API Functions,  Prev: Numbers<2>,  Up: Parsing arguments<3>

7.6.6.4 Other objects
.....................

‘O’ (object) [PyObject *]

     Store a Python object (without any conversion) in a C object
     pointer.  The C program thus receives the actual object that was
     passed.  The object’s reference count is not increased.  The
     pointer stored is not `NULL'.

‘O!’ (object) [`typeobject', PyObject *]

     Store a Python object in a C object pointer.  This is similar to
     ‘O’, but takes two C arguments: the first is the address of a
     Python type object, the second is the address of the C variable (of
     type *note PyObject*: 9f5.) into which the object pointer is
     stored.  If the Python object does not have the required type,
     *note TypeError: 562. is raised.

‘O&’ (object) [`converter', `anything']

     Convert a Python object to a C variable through a `converter'
     function.  This takes two arguments: the first is a function, the
     second is the address of a C variable (of arbitrary type),
     converted to ‘void *’.  The `converter' function in turn is called
     as follows:

          status = converter(object, address);

     where `object' is the Python object to be converted and `address'
     is the ‘void*’ argument that was passed to the *note
     PyArg_Parse*(): 3473. function.  The returned `status' should be
     ‘1’ for a successful conversion and ‘0’ if the conversion has
     failed.  When the conversion fails, the `converter' function should
     raise an exception and leave the content of `address' unmodified.

     If the `converter' returns ‘Py_CLEANUP_SUPPORTED’, it may get
     called a second time if the argument parsing eventually fails,
     giving the converter a chance to release any memory that it had
     already allocated.  In this second call, the `object' parameter
     will be NULL; `address' will have the same value as in the original
     call.

     Changed in version 3.1: ‘Py_CLEANUP_SUPPORTED’ was added.

‘p’ (*note bool: a72.) [int]

     Tests the value passed in for truth (a boolean `p'redicate) and
     converts the result to its equivalent C true/false integer value.
     Sets the int to 1 if the expression was true and 0 if it was false.
     This accepts any valid Python value.  See *note Truth Value
     Testing: f9a. for more information about how Python tests values
     for truth.

     New in version 3.3.

‘(items)’ (*note tuple: 25c.) [`matching-items']

     The object must be a Python sequence whose length is the number of
     format units in `items'.  The C arguments must correspond to the
     individual format units in `items'.  Format units for sequences may
     be nested.

It is possible to pass "long" integers (integers whose value exceeds the
platform’s ‘LONG_MAX’) however no proper range checking is done — the
most significant bits are silently truncated when the receiving field is
too small to receive the value (actually, the semantics are inherited
from downcasts in C — your mileage may vary).

A few other characters have a meaning in a format string.  These may not
occur inside nested parentheses.  They are:

‘|’

     Indicates that the remaining arguments in the Python argument list
     are optional.  The C variables corresponding to optional arguments
     should be initialized to their default value — when an optional
     argument is not specified, *note PyArg_ParseTuple(): 724. does not
     touch the contents of the corresponding C variable(s).

‘$’

     *note PyArg_ParseTupleAndKeywords(): a57. only: Indicates that the
     remaining arguments in the Python argument list are keyword-only.
     Currently, all keyword-only arguments must also be optional
     arguments, so ‘|’ must always be specified before ‘$’ in the format
     string.

     New in version 3.3.

‘:’

     The list of format units ends here; the string after the colon is
     used as the function name in error messages (the "associated value"
     of the exception that *note PyArg_ParseTuple(): 724. raises).

‘;’

     The list of format units ends here; the string after the semicolon
     is used as the error message `instead' of the default error
     message.  ‘:’ and ‘;’ mutually exclude each other.

Note that any Python object references which are provided to the caller
are `borrowed' references; do not decrement their reference count!

Additional arguments passed to these functions must be addresses of
variables whose type is determined by the format string; these are used
to store values from the input tuple.  There are a few cases, as
described in the list of format units above, where these parameters are
used as input values; they should match what is specified for the
corresponding format unit in that case.

For the conversion to succeed, the `arg' object must match the format
and the format must be exhausted.  On success, the *note PyArg_Parse*():
3473. functions return true, otherwise they return false and raise an
appropriate exception.  When the *note PyArg_Parse*(): 3473. functions
fail due to conversion failure in one of the format units, the variables
at the addresses corresponding to that and the following format units
are left untouched.


File: python.info,  Node: API Functions,  Prev: Other objects,  Up: Parsing arguments<3>

7.6.6.5 API Functions
.....................

 -- C Function: int PyArg_ParseTuple (PyObject *args, const
          char *format, ...)

     Parse the parameters of a function that takes only positional
     parameters into local variables.  Returns true on success; on
     failure, it returns false and raises the appropriate exception.

 -- C Function: int PyArg_VaParse (PyObject *args, const char *format,
          va_list vargs)

     Identical to *note PyArg_ParseTuple(): 724, except that it accepts
     a va_list rather than a variable number of arguments.

 -- C Function: int PyArg_ParseTupleAndKeywords (PyObject *args,
          PyObject *kw, const char *format, char *keywords[], ...)

     Parse the parameters of a function that takes both positional and
     keyword parameters into local variables.  Returns true on success;
     on failure, it returns false and raises the appropriate exception.

 -- C Function: int PyArg_VaParseTupleAndKeywords (PyObject *args,
          PyObject *kw, const char *format, char *keywords[],
          va_list vargs)

     Identical to *note PyArg_ParseTupleAndKeywords(): a57, except that
     it accepts a va_list rather than a variable number of arguments.

 -- C Function: int PyArg_ValidateKeywordArguments (PyObject *)

     Ensure that the keys in the keywords argument dictionary are
     strings.  This is only needed if *note
     PyArg_ParseTupleAndKeywords(): a57. is not used, since the latter
     already does this check.

     New in version 3.2.

 -- C Function: int PyArg_Parse (PyObject *args, const char *format,
          ...)

     Function used to deconstruct the argument lists of "old-style"
     functions — these are functions which use the ‘METH_OLDARGS’
     parameter parsing method, which has been removed in Python 3.  This
     is not recommended for use in parameter parsing in new code, and
     most code in the standard interpreter has been modified to no
     longer use this for that purpose.  It does remain a convenient way
     to decompose other tuples, however, and may continue to be used for
     that purpose.

 -- C Function: int PyArg_UnpackTuple (PyObject *args, const char *name,
          Py_ssize_t min, Py_ssize_t max, ...)

     A simpler form of parameter retrieval which does not use a format
     string to specify the types of the arguments.  Functions which use
     this method to retrieve their parameters should be declared as
     *note METH_VARARGS: acc. in function or method tables.  The tuple
     containing the actual parameters should be passed as `args'; it
     must actually be a tuple.  The length of the tuple must be at least
     `min' and no more than `max'; `min' and `max' may be equal.
     Additional arguments must be passed to the function, each of which
     should be a pointer to a *note PyObject*: 9f5. variable; these will
     be filled in with the values from `args'; they will contain
     borrowed references.  The variables which correspond to optional
     parameters not given by `args' will not be filled in; these should
     be initialized by the caller.  This function returns true on
     success and false if `args' is not a tuple or contains the wrong
     number of elements; an exception will be set if there was a
     failure.

     This is an example of the use of this function, taken from the
     sources for the ‘_weakref’ helper module for weak references:

          static PyObject *
          weakref_ref(PyObject *self, PyObject *args)
          {
              PyObject *object;
              PyObject *callback = NULL;
              PyObject *result = NULL;

              if (PyArg_UnpackTuple(args, "ref", 1, 2, &object, &callback)) {
                  result = PyWeakref_NewRef(object, callback);
              }
              return result;
          }

     The call to *note PyArg_UnpackTuple(): aca. in this example is
     entirely equivalent to this call to *note PyArg_ParseTuple(): 724.:

          PyArg_ParseTuple(args, "O|O:ref", &object, &callback)


File: python.info,  Node: Building values,  Prev: Parsing arguments<3>,  Up: Parsing arguments and building values

7.6.6.6 Building values
.......................

 -- C Function: PyObject* Py_BuildValue (const char *format, ...)
     `Return value: New reference.'  Create a new value based on a
     format string similar to those accepted by the *note
     PyArg_Parse*(): 3473. family of functions and a sequence of values.
     Returns the value or `NULL' in the case of an error; an exception
     will be raised if `NULL' is returned.

     *note Py_BuildValue(): 9f7. does not always build a tuple.  It
     builds a tuple only if its format string contains two or more
     format units.  If the format string is empty, it returns ‘None’; if
     it contains exactly one format unit, it returns whatever object is
     described by that format unit.  To force it to return a tuple of
     size 0 or one, parenthesize the format string.

     When memory buffers are passed as parameters to supply data to
     build objects, as for the ‘s’ and ‘s#’ formats, the required data
     is copied.  Buffers provided by the caller are never referenced by
     the objects created by *note Py_BuildValue(): 9f7.  In other words,
     if your code invokes ‘malloc()’ and passes the allocated memory to
     *note Py_BuildValue(): 9f7, your code is responsible for calling
     ‘free()’ for that memory once *note Py_BuildValue(): 9f7. returns.

     In the following description, the quoted form is the format unit;
     the entry in (round) parentheses is the Python object type that the
     format unit will return; and the entry in [square] brackets is the
     type of the C value(s) to be passed.

     The characters space, tab, colon and comma are ignored in format
     strings (but not within format units such as ‘s#’).  This can be
     used to make long format strings a tad more readable.

     ‘s’ (*note str: 25a. or ‘None’) [char *]

          Convert a null-terminated C string to a Python *note str: 25a.
          object using ‘'utf-8'’ encoding.  If the C string pointer is
          `NULL', ‘None’ is used.

     ‘s#’ (*note str: 25a. or ‘None’) [char *, int]

          Convert a C string and its length to a Python *note str: 25a.
          object using ‘'utf-8'’ encoding.  If the C string pointer is
          `NULL', the length is ignored and ‘None’ is returned.

     ‘y’ (*note bytes: 1db.) [char *]

          This converts a C string to a Python *note bytes: 1db. object.
          If the C string pointer is `NULL', ‘None’ is returned.

     ‘y#’ (*note bytes: 1db.) [char *, int]

          This converts a C string and its lengths to a Python object.
          If the C string pointer is `NULL', ‘None’ is returned.

     ‘z’ (*note str: 25a. or ‘None’) [char *]

          Same as ‘s’.

     ‘z#’ (*note str: 25a. or ‘None’) [char *, int]

          Same as ‘s#’.

     ‘u’ (*note str: 25a.) [Py_UNICODE *]

          Convert a null-terminated buffer of Unicode (UCS-2 or UCS-4)
          data to a Python Unicode object.  If the Unicode buffer
          pointer is `NULL', ‘None’ is returned.

     ‘u#’ (*note str: 25a.) [Py_UNICODE *, int]

          Convert a Unicode (UCS-2 or UCS-4) data buffer and its length
          to a Python Unicode object.  If the Unicode buffer pointer is
          `NULL', the length is ignored and ‘None’ is returned.

     ‘U’ (*note str: 25a. or ‘None’) [char *]

          Same as ‘s’.

     ‘U#’ (*note str: 25a. or ‘None’) [char *, int]

          Same as ‘s#’.

     ‘i’ (*note int: 227.) [int]

          Convert a plain C ‘int’ to a Python integer object.

     ‘b’ (*note int: 227.) [char]

          Convert a plain C ‘char’ to a Python integer object.

     ‘h’ (*note int: 227.) [short int]

          Convert a plain C ‘short int’ to a Python integer object.

     ‘l’ (*note int: 227.) [long int]

          Convert a C ‘long int’ to a Python integer object.

     ‘B’ (*note int: 227.) [unsigned char]

          Convert a C ‘unsigned char’ to a Python integer object.

     ‘H’ (*note int: 227.) [unsigned short int]

          Convert a C ‘unsigned short int’ to a Python integer object.

     ‘I’ (*note int: 227.) [unsigned int]

          Convert a C ‘unsigned int’ to a Python integer object.

     ‘k’ (*note int: 227.) [unsigned long]

          Convert a C ‘unsigned long’ to a Python integer object.

     ‘L’ (*note int: 227.) [PY_LONG_LONG]

          Convert a C ‘long long’ to a Python integer object.  Only
          available on platforms that support ‘long long’ (or ‘_int64’
          on Windows).

     ‘K’ (*note int: 227.) [unsigned PY_LONG_LONG]

          Convert a C ‘unsigned long long’ to a Python integer object.
          Only available on platforms that support ‘unsigned long long’
          (or ‘unsigned _int64’ on Windows).

     ‘n’ (*note int: 227.) [Py_ssize_t]

          Convert a C ‘Py_ssize_t’ to a Python integer.

     ‘c’ (*note bytes: 1db. of length 1) [char]

          Convert a C ‘int’ representing a byte to a Python *note bytes:
          1db. object of length 1.

     ‘C’ (*note str: 25a. of length 1) [int]

          Convert a C ‘int’ representing a character to Python *note
          str: 25a. object of length 1.

     ‘d’ (*note float: 57a.) [double]

          Convert a C ‘double’ to a Python floating point number.

     ‘f’ (*note float: 57a.) [float]

          Convert a C ‘float’ to a Python floating point number.

     ‘D’ (*note complex: 579.) [Py_complex *]

          Convert a C *note Py_complex: 3478. structure to a Python
          complex number.

     ‘O’ (object) [PyObject *]

          Pass a Python object untouched (except for its reference
          count, which is incremented by one).  If the object passed in
          is a `NULL' pointer, it is assumed that this was caused
          because the call producing the argument found an error and set
          an exception.  Therefore, *note Py_BuildValue(): 9f7. will
          return `NULL' but won’t raise an exception.  If no exception
          has been raised yet, *note SystemError: 1a0. is set.

     ‘S’ (object) [PyObject *]

          Same as ‘O’.

     ‘N’ (object) [PyObject *]

          Same as ‘O’, except it doesn’t increment the reference count
          on the object.  Useful when the object is created by a call to
          an object constructor in the argument list.

     ‘O&’ (object) [`converter', `anything']

          Convert `anything' to a Python object through a `converter'
          function.  The function is called with `anything' (which
          should be compatible with ‘void *’) as its argument and should
          return a "new" Python object, or `NULL' if an error occurred.

     ‘(items)’ (*note tuple: 25c.) [`matching-items']

          Convert a sequence of C values to a Python tuple with the same
          number of items.

     ‘[items]’ (*note list: 25d.) [`matching-items']

          Convert a sequence of C values to a Python list with the same
          number of items.

     ‘{items}’ (*note dict: 3b0.) [`matching-items']

          Convert a sequence of C values to a Python dictionary.  Each
          pair of consecutive C values adds one item to the dictionary,
          serving as key and value, respectively.

     If there is an error in the format string, the *note SystemError:
     1a0. exception is set and `NULL' returned.

 -- C Function: PyObject* Py_VaBuildValue (const char *format,
          va_list vargs)

     Identical to *note Py_BuildValue(): 9f7, except that it accepts a
     va_list rather than a variable number of arguments.


File: python.info,  Node: String conversion and formatting,  Next: Reflection,  Prev: Parsing arguments and building values,  Up: Utilities<2>

7.6.7 String conversion and formatting
--------------------------------------

Functions for number conversion and formatted string output.

 -- C Function: int PyOS_snprintf (char *str, size_t size, const
          char *format, ...)

     Output not more than `size' bytes to `str' according to the format
     string `format' and the extra arguments.  See the Unix man page
     ‘snprintf(2)’.

 -- C Function: int PyOS_vsnprintf (char *str, size_t size, const
          char *format, va_list va)

     Output not more than `size' bytes to `str' according to the format
     string `format' and the variable argument list `va'.  Unix man page
     ‘vsnprintf(2)’.

*note PyOS_snprintf(): acd. and *note PyOS_vsnprintf(): ace. wrap the
Standard C library functions ‘snprintf()’ and ‘vsnprintf()’.  Their
purpose is to guarantee consistent behavior in corner cases, which the
Standard C functions do not.

The wrappers ensure that `str*[*size'-1] is always ‘'\0'’ upon return.
They never write more than `size' bytes (including the trailing ‘'\0'’)
into str.  Both functions require that ‘str != NULL’, ‘size > 0’ and
‘format != NULL’.

If the platform doesn’t have ‘vsnprintf()’ and the buffer size needed to
avoid truncation exceeds `size' by more than 512 bytes, Python aborts
with a `Py_FatalError'.

The return value (`rv') for these functions should be interpreted as
follows:

   * When ‘0 <= rv < size’, the output conversion was successful and
     `rv' characters were written to `str' (excluding the trailing
     ‘'\0'’ byte at `str*[*rv']).

   * When ‘rv >= size’, the output conversion was truncated and a buffer
     with ‘rv + 1’ bytes would have been needed to succeed.
     `str*[*size'-1] is ‘'\0'’ in this case.

   * When ‘rv < 0’, "something bad happened."  `str*[*size'-1] is ‘'\0'’
     in this case too, but the rest of `str' is undefined.  The exact
     cause of the error depends on the underlying platform.

The following functions provide locale-independent string to number
conversions.

 -- C Function: double PyOS_string_to_double (const char *s,
          char **endptr, PyObject *overflow_exception)

     Convert a string ‘s’ to a ‘double’, raising a Python exception on
     failure.  The set of accepted strings corresponds to the set of
     strings accepted by Python’s *note float(): 57a. constructor,
     except that ‘s’ must not have leading or trailing whitespace.  The
     conversion is independent of the current locale.

     If ‘endptr’ is ‘NULL’, convert the whole string.  Raise ValueError
     and return ‘-1.0’ if the string is not a valid representation of a
     floating-point number.

     If endptr is not ‘NULL’, convert as much of the string as possible
     and set ‘*endptr’ to point to the first unconverted character.  If
     no initial segment of the string is the valid representation of a
     floating-point number, set ‘*endptr’ to point to the beginning of
     the string, raise ValueError, and return ‘-1.0’.

     If ‘s’ represents a value that is too large to store in a float
     (for example, ‘"1e500"’ is such a string on many platforms) then if
     ‘overflow_exception’ is ‘NULL’ return ‘Py_HUGE_VAL’ (with an
     appropriate sign) and don’t set any exception.  Otherwise,
     ‘overflow_exception’ must point to a Python exception object; raise
     that exception and return ‘-1.0’.  In both cases, set ‘*endptr’ to
     point to the first character after the converted value.

     If any other error occurs during the conversion (for example an
     out-of-memory error), set the appropriate Python exception and
     return ‘-1.0’.

     New in version 3.1.

 -- C Function: char* PyOS_double_to_string (double val,
          char format_code, int precision, int flags, int *ptype)

     Convert a ‘double’ `val' to a string using supplied `format_code',
     `precision', and `flags'.

     `format_code' must be one of ‘'e'’, ‘'E'’, ‘'f'’, ‘'F'’, ‘'g'’,
     ‘'G'’ or ‘'r'’.  For ‘'r'’, the supplied `precision' must be 0 and
     is ignored.  The ‘'r'’ format code specifies the standard *note
     repr(): 3bb. format.

     `flags' can be zero or more of the values `Py_DTSF_SIGN',
     `Py_DTSF_ADD_DOT_0', or `Py_DTSF_ALT', or-ed together:

        * `Py_DTSF_SIGN' means to always precede the returned string
          with a sign character, even if `val' is non-negative.

        * `Py_DTSF_ADD_DOT_0' means to ensure that the returned string
          will not look like an integer.

        * `Py_DTSF_ALT' means to apply "alternate" formatting rules.
          See the documentation for the *note PyOS_snprintf(): acd.
          ‘'#'’ specifier for details.

     If `ptype' is non-NULL, then the value it points to will be set to
     one of `Py_DTST_FINITE', `Py_DTST_INFINITE', or `Py_DTST_NAN',
     signifying that `val' is a finite number, an infinite number, or
     not a number, respectively.

     The return value is a pointer to `buffer' with the converted string
     or `NULL' if the conversion failed.  The caller is responsible for
     freeing the returned string by calling *note PyMem_Free(): a26.

     New in version 3.1.

 -- C Function: int PyOS_stricmp (const char *s1, const char *s2)

     Case insensitive comparison of strings.  The function works almost
     identically to ‘strcmp()’ except that it ignores the case.

 -- C Function: int PyOS_strnicmp (const char *s1, const char *s2,
          Py_ssize_t  size)

     Case insensitive comparison of strings.  The function works almost
     identically to ‘strncmp()’ except that it ignores the case.


File: python.info,  Node: Reflection,  Next: Codec registry and support functions,  Prev: String conversion and formatting,  Up: Utilities<2>

7.6.8 Reflection
----------------

 -- C Function: PyObject* PyEval_GetBuiltins ()
     `Return value: Borrowed reference.'  Return a dictionary of the
     builtins in the current execution frame, or the interpreter of the
     thread state if no frame is currently executing.

 -- C Function: PyObject* PyEval_GetLocals ()
     `Return value: Borrowed reference.'  Return a dictionary of the
     local variables in the current execution frame, or `NULL' if no
     frame is currently executing.

 -- C Function: PyObject* PyEval_GetGlobals ()
     `Return value: Borrowed reference.'  Return a dictionary of the
     global variables in the current execution frame, or `NULL' if no
     frame is currently executing.

 -- C Function: PyFrameObject* PyEval_GetFrame ()
     `Return value: Borrowed reference.'  Return the current thread
     state’s frame, which is `NULL' if no frame is currently executing.

 -- C Function: int PyFrame_GetLineNumber (PyFrameObject *frame)

     Return the line number that `frame' is currently executing.

 -- C Function: const char* PyEval_GetFuncName (PyObject *func)

     Return the name of `func' if it is a function, class or instance
     object, else the name of `func's type.

 -- C Function: const char* PyEval_GetFuncDesc (PyObject *func)

     Return a description string, depending on the type of `func'.
     Return values include "()" for functions and methods, "
     constructor", " instance", and " object".  Concatenated with the
     result of *note PyEval_GetFuncName(): 348d, the result will be a
     description of `func'.


File: python.info,  Node: Codec registry and support functions,  Prev: Reflection,  Up: Utilities<2>

7.6.9 Codec registry and support functions
------------------------------------------

 -- C Function: int PyCodec_Register (PyObject *search_function)

     Register a new codec search function.

     As side effect, this tries to load the ‘encodings’ package, if not
     yet done, to make sure that it is always first in the list of
     search functions.

 -- C Function: int PyCodec_KnownEncoding (const char *encoding)

     Return ‘1’ or ‘0’ depending on whether there is a registered codec
     for the given `encoding'.

 -- C Function: PyObject* PyCodec_Encode (PyObject *object, const
          char *encoding, const char *errors)

     Generic codec based encoding API.

     `object' is passed through the encoder function found for the given
     `encoding' using the error handling method defined by `errors'.
     `errors' may be `NULL' to use the default method defined for the
     codec.  Raises a *note LookupError: 1015. if no encoder can be
     found.

 -- C Function: PyObject* PyCodec_Decode (PyObject *object, const
          char *encoding, const char *errors)

     Generic codec based decoding API.

     `object' is passed through the decoder function found for the given
     `encoding' using the error handling method defined by `errors'.
     `errors' may be `NULL' to use the default method defined for the
     codec.  Raises a *note LookupError: 1015. if no encoder can be
     found.

* Menu:

* Codec lookup API:: 
* Registry API for Unicode encoding error handlers:: 


File: python.info,  Node: Codec lookup API,  Next: Registry API for Unicode encoding error handlers,  Up: Codec registry and support functions

7.6.9.1 Codec lookup API
........................

In the following functions, the `encoding' string is looked up converted
to all lower-case characters, which makes encodings looked up through
this mechanism effectively case-insensitive.  If no codec is found, a
*note KeyError: 1a7. is set and `NULL' returned.

 -- C Function: PyObject* PyCodec_Encoder (const char *encoding)

     Get an encoder function for the given `encoding'.

 -- C Function: PyObject* PyCodec_Decoder (const char *encoding)

     Get a decoder function for the given `encoding'.

 -- C Function: PyObject* PyCodec_IncrementalEncoder (const
          char *encoding, const char *errors)

     Get an *note IncrementalEncoder: 11db. object for the given
     `encoding'.

 -- C Function: PyObject* PyCodec_IncrementalDecoder (const
          char *encoding, const char *errors)

     Get an *note IncrementalDecoder: 11dc. object for the given
     `encoding'.

 -- C Function: PyObject* PyCodec_StreamReader (const char *encoding,
          PyObject *stream, const char *errors)

     Get a *note StreamReader: 11e0. factory function for the given
     `encoding'.

 -- C Function: PyObject* PyCodec_StreamWriter (const char *encoding,
          PyObject *stream, const char *errors)

     Get a *note StreamWriter: 11df. factory function for the given
     `encoding'.


File: python.info,  Node: Registry API for Unicode encoding error handlers,  Prev: Codec lookup API,  Up: Codec registry and support functions

7.6.9.2 Registry API for Unicode encoding error handlers
........................................................

 -- C Function: int PyCodec_RegisterError (const char *name,
          PyObject *error)

     Register the error handling callback function `error' under the
     given `name'.  This callback function will be called by a codec
     when it encounters unencodable characters/undecodable bytes and
     `name' is specified as the error parameter in the call to the
     encode/decode function.

     The callback gets a single argument, an instance of *note
     UnicodeEncodeError: 852, *note UnicodeDecodeError: 571. or *note
     UnicodeTranslateError: 10c8. that holds information about the
     problematic sequence of characters or bytes and their offset in the
     original string (see *note Unicode Exception Objects: 340b. for
     functions to extract this information).  The callback must either
     raise the given exception, or return a two-item tuple containing
     the replacement for the problematic sequence, and an integer giving
     the offset in the original string at which encoding/decoding should
     be resumed.

     Return ‘0’ on success, ‘-1’ on error.

 -- C Function: PyObject* PyCodec_LookupError (const char *name)

     Lookup the error handling callback function registered under
     `name'.  As a special case `NULL' can be passed, in which case the
     error handling callback for "strict" will be returned.

 -- C Function: PyObject* PyCodec_StrictErrors (PyObject *exc)

     Raise `exc' as an exception.

 -- C Function: PyObject* PyCodec_IgnoreErrors (PyObject *exc)

     Ignore the unicode error, skipping the faulty input.

 -- C Function: PyObject* PyCodec_ReplaceErrors (PyObject *exc)

     Replace the unicode encode error with ‘?’ or ‘U+FFFD’.

 -- C Function: PyObject* PyCodec_XMLCharRefReplaceErrors
          (PyObject *exc)

     Replace the unicode encode error with XML character references.

 -- C Function: PyObject* PyCodec_BackslashReplaceErrors (PyObject *exc)

     Replace the unicode encode error with backslash escapes (‘\x’, ‘\u’
     and ‘\U’).

 -- C Function: PyObject* PyCodec_NameReplaceErrors (PyObject *exc)

     Replace the unicode encode error with ‘\N{...}’ escapes.

     New in version 3.5.


File: python.info,  Node: Abstract Objects Layer,  Next: Concrete Objects Layer,  Prev: Utilities<2>,  Up: Python/C API Reference Manual

7.7 Abstract Objects Layer
==========================

The functions in this chapter interact with Python objects regardless of
their type, or with wide classes of object types (e.g.  all numerical
types, or all sequence types).  When used on object types for which they
do not apply, they will raise a Python exception.

It is not possible to use these functions on objects that are not
properly initialized, such as a list object that has been created by
*note PyList_New(): 33a1, but whose items have not been set to some
non-‘NULL’ value yet.

* Menu:

* Object Protocol:: 
* Number Protocol:: 
* Sequence Protocol:: 
* Mapping Protocol:: 
* Iterator Protocol:: 
* Buffer Protocol:: 
* Old Buffer Protocol:: 


File: python.info,  Node: Object Protocol,  Next: Number Protocol,  Up: Abstract Objects Layer

7.7.1 Object Protocol
---------------------

 -- C Variable: PyObject* Py_NotImplemented

     The ‘NotImplemented’ singleton, used to signal that an operation is
     not implemented for the given type combination.

 -- C Macro: Py_RETURN_NOTIMPLEMENTED

     Properly handle returning *note Py_NotImplemented: 34a9. from
     within a C function (that is, increment the reference count of
     NotImplemented and return it).

 -- C Function: int PyObject_Print (PyObject *o, FILE *fp, int flags)

     Print an object `o', on file `fp'.  Returns ‘-1’ on error.  The
     flags argument is used to enable certain printing options.  The
     only option currently supported is ‘Py_PRINT_RAW’; if given, the
     *note str(): 25a. of the object is written instead of the *note
     repr(): 3bb.

 -- C Function: int PyObject_HasAttr (PyObject *o, PyObject *attr_name)

     Returns ‘1’ if `o' has the attribute `attr_name', and ‘0’
     otherwise.  This is equivalent to the Python expression ‘hasattr(o,
     attr_name)’.  This function always succeeds.

 -- C Function: int PyObject_HasAttrString (PyObject *o, const
          char *attr_name)

     Returns ‘1’ if `o' has the attribute `attr_name', and ‘0’
     otherwise.  This is equivalent to the Python expression ‘hasattr(o,
     attr_name)’.  This function always succeeds.

 -- C Function: PyObject* PyObject_GetAttr (PyObject *o,
          PyObject *attr_name)
     `Return value: New reference.'  Retrieve an attribute named
     `attr_name' from object `o'.  Returns the attribute value on
     success, or `NULL' on failure.  This is the equivalent of the
     Python expression ‘o.attr_name’.

 -- C Function: PyObject* PyObject_GetAttrString (PyObject *o, const
          char *attr_name)
     `Return value: New reference.'  Retrieve an attribute named
     `attr_name' from object `o'.  Returns the attribute value on
     success, or `NULL' on failure.  This is the equivalent of the
     Python expression ‘o.attr_name’.

 -- C Function: PyObject* PyObject_GenericGetAttr (PyObject *o,
          PyObject *name)

     Generic attribute getter function that is meant to be put into a
     type object’s ‘tp_getattro’ slot.  It looks for a descriptor in the
     dictionary of classes in the object’s MRO as well as an attribute
     in the object’s *note __dict__: df4. (if present).  As outlined in
     *note Implementing Descriptors: df1, data descriptors take
     preference over instance attributes, while non-data descriptors
     don’t.  Otherwise, an *note AttributeError: 356. is raised.

 -- C Function: int PyObject_SetAttr (PyObject *o, PyObject *attr_name,
          PyObject *v)

     Set the value of the attribute named `attr_name', for object `o',
     to the value `v'.  Raise an exception and return ‘-1’ on failure;
     return ‘0’ on success.  This is the equivalent of the Python
     statement ‘o.attr_name = v’.

     If `v' is `NULL', the attribute is deleted, however this feature is
     deprecated in favour of using *note PyObject_DelAttr(): 34b1.

 -- C Function: int PyObject_SetAttrString (PyObject *o, const
          char *attr_name, PyObject *v)

     Set the value of the attribute named `attr_name', for object `o',
     to the value `v'.  Raise an exception and return ‘-1’ on failure;
     return ‘0’ on success.  This is the equivalent of the Python
     statement ‘o.attr_name = v’.

     If `v' is `NULL', the attribute is deleted, however this feature is
     deprecated in favour of using *note PyObject_DelAttrString(): 34b3.

 -- C Function: int PyObject_GenericSetAttr (PyObject *o,
          PyObject *name, PyObject *value)

     Generic attribute setter and deleter function that is meant to be
     put into a type object’s *note tp_setattro: 335b. slot.  It looks
     for a data descriptor in the dictionary of classes in the object’s
     MRO, and if found it takes preference over setting or deleting the
     attribute in the instance dictionary.  Otherwise, the attribute is
     set or deleted in the object’s *note __dict__: df4. (if present).
     On success, ‘0’ is returned, otherwise an *note AttributeError:
     356. is raised and ‘-1’ is returned.

 -- C Function: int PyObject_DelAttr (PyObject *o, PyObject *attr_name)

     Delete attribute named `attr_name', for object `o'.  Returns ‘-1’
     on failure.  This is the equivalent of the Python statement ‘del
     o.attr_name’.

 -- C Function: int PyObject_DelAttrString (PyObject *o, const
          char *attr_name)

     Delete attribute named `attr_name', for object `o'.  Returns ‘-1’
     on failure.  This is the equivalent of the Python statement ‘del
     o.attr_name’.

 -- C Function: PyObject* PyObject_GenericGetDict (PyObject *o,
          void *context)

     A generic implementation for the getter of a ‘__dict__’ descriptor.
     It creates the dictionary if necessary.

     New in version 3.3.

 -- C Function: int PyObject_GenericSetDict (PyObject *o, void *context)

     A generic implementation for the setter of a ‘__dict__’ descriptor.
     This implementation does not allow the dictionary to be deleted.

     New in version 3.3.

 -- C Function: PyObject* PyObject_RichCompare (PyObject *o1,
          PyObject *o2, int opid)
     `Return value: New reference.'  Compare the values of `o1' and `o2'
     using the operation specified by `opid', which must be one of
     ‘Py_LT’, ‘Py_LE’, ‘Py_EQ’, ‘Py_NE’, ‘Py_GT’, or ‘Py_GE’,
     corresponding to ‘<’, ‘<=’, ‘==’, ‘!=’, ‘>’, or ‘>=’ respectively.
     This is the equivalent of the Python expression ‘o1 op o2’, where
     ‘op’ is the operator corresponding to `opid'.  Returns the value of
     the comparison on success, or `NULL' on failure.

 -- C Function: int PyObject_RichCompareBool (PyObject *o1,
          PyObject *o2, int opid)

     Compare the values of `o1' and `o2' using the operation specified
     by `opid', which must be one of ‘Py_LT’, ‘Py_LE’, ‘Py_EQ’, ‘Py_NE’,
     ‘Py_GT’, or ‘Py_GE’, corresponding to ‘<’, ‘<=’, ‘==’, ‘!=’, ‘>’,
     or ‘>=’ respectively.  Returns ‘-1’ on error, ‘0’ if the result is
     false, ‘1’ otherwise.  This is the equivalent of the Python
     expression ‘o1 op o2’, where ‘op’ is the operator corresponding to
     `opid'.

     Note: If `o1' and `o2' are the same object, *note
     PyObject_RichCompareBool(): 3362. will always return ‘1’ for
     ‘Py_EQ’ and ‘0’ for ‘Py_NE’.

 -- C Function: PyObject* PyObject_Repr (PyObject *o)
     `Return value: New reference.'

     Compute a string representation of object `o'.  Returns the string
     representation on success, `NULL' on failure.  This is the
     equivalent of the Python expression ‘repr(o)’.  Called by the *note
     repr(): 3bb. built-in function.

     Changed in version 3.4: This function now includes a debug
     assertion to help ensure that it does not silently discard an
     active exception.

 -- C Function: PyObject* PyObject_ASCII (PyObject *o)

     As *note PyObject_Repr(): 585, compute a string representation of
     object `o', but escape the non-ASCII characters in the string
     returned by *note PyObject_Repr(): 585. with ‘\x’, ‘\u’ or ‘\U’
     escapes.  This generates a string similar to that returned by *note
     PyObject_Repr(): 585. in Python 2.  Called by the *note ascii():
     9c3. built-in function.

 -- C Function: PyObject* PyObject_Str (PyObject *o)
     `Return value: New reference.'  Compute a string representation of
     object `o'.  Returns the string representation on success, `NULL'
     on failure.  This is the equivalent of the Python expression
     ‘str(o)’.  Called by the *note str(): 25a. built-in function and,
     therefore, by the *note print(): 481. function.

     Changed in version 3.4: This function now includes a debug
     assertion to help ensure that it does not silently discard an
     active exception.

 -- C Function: PyObject* PyObject_Bytes (PyObject *o)

     Compute a bytes representation of object `o'.  `NULL' is returned
     on failure and a bytes object on success.  This is equivalent to
     the Python expression ‘bytes(o)’, when `o' is not an integer.
     Unlike ‘bytes(o)’, a TypeError is raised when `o' is an integer
     instead of a zero-initialized bytes object.

 -- C Function: int PyObject_IsSubclass (PyObject *derived,
          PyObject *cls)

     Return ‘1’ if the class `derived' is identical to or derived from
     the class `cls', otherwise return ‘0’.  In case of an error, return
     ‘-1’.

     If `cls' is a tuple, the check will be done against every entry in
     `cls'.  The result will be ‘1’ when at least one of the checks
     returns ‘1’, otherwise it will be ‘0’.

     If `cls' has a *note __subclasscheck__(): e14. method, it will be
     called to determine the subclass status as described in PEP
     3119(1).  Otherwise, `derived' is a subclass of `cls' if it is a
     direct or indirect subclass, i.e.  contained in ‘cls.__mro__’.

     Normally only class objects, i.e.  instances of *note type: 376. or
     a derived class, are considered classes.  However, objects can
     override this by having a ‘__bases__’ attribute (which must be a
     tuple of base classes).

 -- C Function: int PyObject_IsInstance (PyObject *inst, PyObject *cls)

     Return ‘1’ if `inst' is an instance of the class `cls' or a
     subclass of `cls', or ‘0’ if not.  On error, returns ‘-1’ and sets
     an exception.

     If `cls' is a tuple, the check will be done against every entry in
     `cls'.  The result will be ‘1’ when at least one of the checks
     returns ‘1’, otherwise it will be ‘0’.

     If `cls' has a *note __instancecheck__(): e13. method, it will be
     called to determine the subclass status as described in PEP
     3119(2).  Otherwise, `inst' is an instance of `cls' if its class is
     a subclass of `cls'.

     An instance `inst' can override what is considered its class by
     having a ‘__class__’ attribute.

     An object `cls' can override if it is considered a class, and what
     its base classes are, by having a ‘__bases__’ attribute (which must
     be a tuple of base classes).

 -- C Function: int PyCallable_Check (PyObject *o)

     Determine if the object `o' is callable.  Return ‘1’ if the object
     is callable and ‘0’ otherwise.  This function always succeeds.

 -- C Function: PyObject* PyObject_Call (PyObject *callable_object,
          PyObject *args, PyObject *kw)
     `Return value: New reference.'  Call a callable Python object
     `callable_object', with arguments given by the tuple `args', and
     named arguments given by the dictionary `kw'.  If no named
     arguments are needed, `kw' may be `NULL'. `args' must not be
     `NULL', use an empty tuple if no arguments are needed.  Returns the
     result of the call on success, or `NULL' on failure.  This is the
     equivalent of the Python expression ‘callable_object(*args, **kw)’.

 -- C Function: PyObject* PyObject_CallObject
          (PyObject *callable_object, PyObject *args)
     `Return value: New reference.'  Call a callable Python object
     `callable_object', with arguments given by the tuple `args'.  If no
     arguments are needed, then `args' may be `NULL'. Returns the result
     of the call on success, or `NULL' on failure.  This is the
     equivalent of the Python expression ‘callable_object(*args)’.

 -- C Function: PyObject* PyObject_CallFunction (PyObject *callable,
          const char *format, ...)
     `Return value: New reference.'  Call a callable Python object
     `callable', with a variable number of C arguments.  The C arguments
     are described using a *note Py_BuildValue(): 9f7. style format
     string.  The format may be `NULL', indicating that no arguments are
     provided.  Returns the result of the call on success, or `NULL' on
     failure.  This is the equivalent of the Python expression
     ‘callable(*args)’.  Note that if you only pass *note PyObject *:
     9f5. args, *note PyObject_CallFunctionObjArgs(): 34bb. is a faster
     alternative.

     Changed in version 3.4: The type of `format' was changed from ‘char
     *’.

 -- C Function: PyObject* PyObject_CallMethod (PyObject *o, const
          char *method, const char *format, ...)
     `Return value: New reference.'  Call the method named `method' of
     object `o' with a variable number of C arguments.  The C arguments
     are described by a *note Py_BuildValue(): 9f7. format string that
     should produce a tuple.  The format may be `NULL', indicating that
     no arguments are provided.  Returns the result of the call on
     success, or `NULL' on failure.  This is the equivalent of the
     Python expression ‘o.method(args)’.  Note that if you only pass
     *note PyObject *: 9f5. args, *note PyObject_CallMethodObjArgs():
     34bd. is a faster alternative.

     Changed in version 3.4: The types of `method' and `format' were
     changed from ‘char *’.

 -- C Function: PyObject* PyObject_CallFunctionObjArgs
          (PyObject *callable, ..., NULL)
     `Return value: New reference.'  Call a callable Python object
     `callable', with a variable number of *note PyObject*: 9f5.
     arguments.  The arguments are provided as a variable number of
     parameters followed by `NULL'. Returns the result of the call on
     success, or `NULL' on failure.

 -- C Function: PyObject* PyObject_CallMethodObjArgs (PyObject *o,
          PyObject *name, ..., NULL)
     `Return value: New reference.'  Calls a method of the object `o',
     where the name of the method is given as a Python string object in
     `name'.  It is called with a variable number of *note PyObject*:
     9f5. arguments.  The arguments are provided as a variable number of
     parameters followed by `NULL'. Returns the result of the call on
     success, or `NULL' on failure.

 -- C Function: Py_hash_t PyObject_Hash (PyObject *o)

     Compute and return the hash value of an object `o'.  On failure,
     return ‘-1’.  This is the equivalent of the Python expression
     ‘hash(o)’.

     Changed in version 3.2: The return type is now Py_hash_t.  This is
     a signed integer the same size as Py_ssize_t.

 -- C Function: Py_hash_t PyObject_HashNotImplemented (PyObject *o)

     Set a *note TypeError: 562. indicating that ‘type(o)’ is not
     hashable and return ‘-1’.  This function receives special treatment
     when stored in a ‘tp_hash’ slot, allowing a type to explicitly
     indicate to the interpreter that it is not hashable.

 -- C Function: int PyObject_IsTrue (PyObject *o)

     Returns ‘1’ if the object `o' is considered to be true, and ‘0’
     otherwise.  This is equivalent to the Python expression ‘not not
     o’.  On failure, return ‘-1’.

 -- C Function: int PyObject_Not (PyObject *o)

     Returns ‘0’ if the object `o' is considered to be true, and ‘1’
     otherwise.  This is equivalent to the Python expression ‘not o’.
     On failure, return ‘-1’.

 -- C Function: PyObject* PyObject_Type (PyObject *o)
     `Return value: New reference.'

     When `o' is non-`NULL', returns a type object corresponding to the
     object type of object `o'.  On failure, raises *note SystemError:
     1a0. and returns `NULL'. This is equivalent to the Python
     expression ‘type(o)’.  This function increments the reference count
     of the return value.  There’s really no reason to use this function
     instead of the common expression ‘o->ob_type’, which returns a
     pointer of type *note PyTypeObject*: 3bc, except when the
     incremented reference count is needed.

 -- C Function: int PyObject_TypeCheck (PyObject *o, PyTypeObject *type)

     Return true if the object `o' is of type `type' or a subtype of
     `type'.  Both parameters must be non-`NULL'.

 -- C Function: Py_ssize_t PyObject_Length (PyObject *o)
 -- C Function: Py_ssize_t PyObject_Size (PyObject *o)

     Return the length of object `o'.  If the object `o' provides either
     the sequence and mapping protocols, the sequence length is
     returned.  On error, ‘-1’ is returned.  This is the equivalent to
     the Python expression ‘len(o)’.

 -- C Function: Py_ssize_t PyObject_LengthHint (PyObject *o,
          Py_ssize_t default)

     Return an estimated length for the object `o'.  First try to return
     its actual length, then an estimate using *note __length_hint__():
     3fc, and finally return the default value.  On error return ‘-1’.
     This is the equivalent to the Python expression
     ‘operator.length_hint(o, default)’.

     New in version 3.4.

 -- C Function: PyObject* PyObject_GetItem (PyObject *o, PyObject *key)
     `Return value: New reference.'  Return element of `o' corresponding
     to the object `key' or `NULL' on failure.  This is the equivalent
     of the Python expression ‘o[key]’.

 -- C Function: int PyObject_SetItem (PyObject *o, PyObject *key,
          PyObject *v)

     Map the object `key' to the value `v'.  Raise an exception and
     return ‘-1’ on failure; return ‘0’ on success.  This is the
     equivalent of the Python statement ‘o[key] = v’.

 -- C Function: int PyObject_DelItem (PyObject *o, PyObject *key)

     Delete the mapping for `key' from `o'.  Returns ‘-1’ on failure.
     This is the equivalent of the Python statement ‘del o[key]’.

 -- C Function: PyObject* PyObject_Dir (PyObject *o)
     `Return value: New reference.'  This is equivalent to the Python
     expression ‘dir(o)’, returning a (possibly empty) list of strings
     appropriate for the object argument, or `NULL' if there was an
     error.  If the argument is `NULL', this is like the Python ‘dir()’,
     returning the names of the current locals; in this case, if no
     execution frame is active then `NULL' is returned but *note
     PyErr_Occurred(): 32f9. will return false.

 -- C Function: PyObject* PyObject_GetIter (PyObject *o)
     `Return value: New reference.'  This is equivalent to the Python
     expression ‘iter(o)’.  It returns a new iterator for the object
     argument, or the object itself if the object is already an
     iterator.  Raises *note TypeError: 562. and returns `NULL' if the
     object cannot be iterated.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3119

   (2) https://www.python.org/dev/peps/pep-3119


File: python.info,  Node: Number Protocol,  Next: Sequence Protocol,  Prev: Object Protocol,  Up: Abstract Objects Layer

7.7.2 Number Protocol
---------------------

 -- C Function: int PyNumber_Check (PyObject *o)

     Returns ‘1’ if the object `o' provides numeric protocols, and false
     otherwise.  This function always succeeds.

 -- C Function: PyObject* PyNumber_Add (PyObject *o1, PyObject *o2)
     `Return value: New reference.'  Returns the result of adding `o1'
     and `o2', or `NULL' on failure.  This is the equivalent of the
     Python expression ‘o1 + o2’.

 -- C Function: PyObject* PyNumber_Subtract (PyObject *o1, PyObject *o2)
     `Return value: New reference.'  Returns the result of subtracting
     `o2' from `o1', or `NULL' on failure.  This is the equivalent of
     the Python expression ‘o1 - o2’.

 -- C Function: PyObject* PyNumber_Multiply (PyObject *o1, PyObject *o2)
     `Return value: New reference.'  Returns the result of multiplying
     `o1' and `o2', or `NULL' on failure.  This is the equivalent of the
     Python expression ‘o1 * o2’.

 -- C Function: PyObject* PyNumber_MatrixMultiply (PyObject *o1,
          PyObject *o2)

     Returns the result of matrix multiplication on `o1' and `o2', or
     `NULL' on failure.  This is the equivalent of the Python expression
     ‘o1 @ o2’.

     New in version 3.5.

 -- C Function: PyObject* PyNumber_FloorDivide (PyObject *o1,
          PyObject *o2)
     `Return value: New reference.'  Return the floor of `o1' divided by
     `o2', or `NULL' on failure.  This is equivalent to the "classic"
     division of integers.

 -- C Function: PyObject* PyNumber_TrueDivide (PyObject *o1,
          PyObject *o2)
     `Return value: New reference.'  Return a reasonable approximation
     for the mathematical value of `o1' divided by `o2', or `NULL' on
     failure.  The return value is "approximate" because binary floating
     point numbers are approximate; it is not possible to represent all
     real numbers in base two.  This function can return a floating
     point value when passed two integers.

 -- C Function: PyObject* PyNumber_Remainder (PyObject *o1,
          PyObject *o2)
     `Return value: New reference.'  Returns the remainder of dividing
     `o1' by `o2', or `NULL' on failure.  This is the equivalent of the
     Python expression ‘o1 % o2’.

 -- C Function: PyObject* PyNumber_Divmod (PyObject *o1, PyObject *o2)
     `Return value: New reference.'

     See the built-in function *note divmod(): e2c.  Returns `NULL' on
     failure.  This is the equivalent of the Python expression
     ‘divmod(o1, o2)’.

 -- C Function: PyObject* PyNumber_Power (PyObject *o1, PyObject *o2,
          PyObject *o3)
     `Return value: New reference.'

     See the built-in function *note pow(): ad3.  Returns `NULL' on
     failure.  This is the equivalent of the Python expression ‘pow(o1,
     o2, o3)’, where `o3' is optional.  If `o3' is to be ignored, pass
     *note Py_None: 3300. in its place (passing `NULL' for `o3' would
     cause an illegal memory access).

 -- C Function: PyObject* PyNumber_Negative (PyObject *o)
     `Return value: New reference.'  Returns the negation of `o' on
     success, or `NULL' on failure.  This is the equivalent of the
     Python expression ‘-o’.

 -- C Function: PyObject* PyNumber_Positive (PyObject *o)
     `Return value: New reference.'  Returns `o' on success, or `NULL'
     on failure.  This is the equivalent of the Python expression ‘+o’.

 -- C Function: PyObject* PyNumber_Absolute (PyObject *o)
     `Return value: New reference.'

     Returns the absolute value of `o', or `NULL' on failure.  This is
     the equivalent of the Python expression ‘abs(o)’.

 -- C Function: PyObject* PyNumber_Invert (PyObject *o)
     `Return value: New reference.'  Returns the bitwise negation of `o'
     on success, or `NULL' on failure.  This is the equivalent of the
     Python expression ‘~o’.

 -- C Function: PyObject* PyNumber_Lshift (PyObject *o1, PyObject *o2)
     `Return value: New reference.'  Returns the result of left shifting
     `o1' by `o2' on success, or `NULL' on failure.  This is the
     equivalent of the Python expression ‘o1 << o2’.

 -- C Function: PyObject* PyNumber_Rshift (PyObject *o1, PyObject *o2)
     `Return value: New reference.'  Returns the result of right
     shifting `o1' by `o2' on success, or `NULL' on failure.  This is
     the equivalent of the Python expression ‘o1 >> o2’.

 -- C Function: PyObject* PyNumber_And (PyObject *o1, PyObject *o2)
     `Return value: New reference.'  Returns the "bitwise and" of `o1'
     and `o2' on success and `NULL' on failure.  This is the equivalent
     of the Python expression ‘o1 & o2’.

 -- C Function: PyObject* PyNumber_Xor (PyObject *o1, PyObject *o2)
     `Return value: New reference.'  Returns the "bitwise exclusive or"
     of `o1' by `o2' on success, or `NULL' on failure.  This is the
     equivalent of the Python expression ‘o1 ^ o2’.

 -- C Function: PyObject* PyNumber_Or (PyObject *o1, PyObject *o2)
     `Return value: New reference.'  Returns the "bitwise or" of `o1'
     and `o2' on success, or `NULL' on failure.  This is the equivalent
     of the Python expression ‘o1 | o2’.

 -- C Function: PyObject* PyNumber_InPlaceAdd (PyObject *o1,
          PyObject *o2)
     `Return value: New reference.'  Returns the result of adding `o1'
     and `o2', or `NULL' on failure.  The operation is done `in-place'
     when `o1' supports it.  This is the equivalent of the Python
     statement ‘o1 += o2’.

 -- C Function: PyObject* PyNumber_InPlaceSubtract (PyObject *o1,
          PyObject *o2)
     `Return value: New reference.'  Returns the result of subtracting
     `o2' from `o1', or `NULL' on failure.  The operation is done
     `in-place' when `o1' supports it.  This is the equivalent of the
     Python statement ‘o1 -= o2’.

 -- C Function: PyObject* PyNumber_InPlaceMultiply (PyObject *o1,
          PyObject *o2)
     `Return value: New reference.'  Returns the result of multiplying
     `o1' and `o2', or `NULL' on failure.  The operation is done
     `in-place' when `o1' supports it.  This is the equivalent of the
     Python statement ‘o1 *= o2’.

 -- C Function: PyObject* PyNumber_InPlaceMatrixMultiply (PyObject *o1,
          PyObject *o2)

     Returns the result of matrix multiplication on `o1' and `o2', or
     `NULL' on failure.  The operation is done `in-place' when `o1'
     supports it.  This is the equivalent of the Python statement ‘o1 @=
     o2’.

     New in version 3.5.

 -- C Function: PyObject* PyNumber_InPlaceFloorDivide (PyObject *o1,
          PyObject *o2)
     `Return value: New reference.'  Returns the mathematical floor of
     dividing `o1' by `o2', or `NULL' on failure.  The operation is done
     `in-place' when `o1' supports it.  This is the equivalent of the
     Python statement ‘o1 //= o2’.

 -- C Function: PyObject* PyNumber_InPlaceTrueDivide (PyObject *o1,
          PyObject *o2)
     `Return value: New reference.'  Return a reasonable approximation
     for the mathematical value of `o1' divided by `o2', or `NULL' on
     failure.  The return value is "approximate" because binary floating
     point numbers are approximate; it is not possible to represent all
     real numbers in base two.  This function can return a floating
     point value when passed two integers.  The operation is done
     `in-place' when `o1' supports it.

 -- C Function: PyObject* PyNumber_InPlaceRemainder (PyObject *o1,
          PyObject *o2)
     `Return value: New reference.'  Returns the remainder of dividing
     `o1' by `o2', or `NULL' on failure.  The operation is done
     `in-place' when `o1' supports it.  This is the equivalent of the
     Python statement ‘o1 %= o2’.

 -- C Function: PyObject* PyNumber_InPlacePower (PyObject *o1,
          PyObject *o2, PyObject *o3)
     `Return value: New reference.'

     See the built-in function *note pow(): ad3.  Returns `NULL' on
     failure.  The operation is done `in-place' when `o1' supports it.
     This is the equivalent of the Python statement ‘o1 **= o2’ when o3
     is *note Py_None: 3300, or an in-place variant of ‘pow(o1, o2, o3)’
     otherwise.  If `o3' is to be ignored, pass *note Py_None: 3300. in
     its place (passing `NULL' for `o3' would cause an illegal memory
     access).

 -- C Function: PyObject* PyNumber_InPlaceLshift (PyObject *o1,
          PyObject *o2)
     `Return value: New reference.'  Returns the result of left shifting
     `o1' by `o2' on success, or `NULL' on failure.  The operation is
     done `in-place' when `o1' supports it.  This is the equivalent of
     the Python statement ‘o1 <<= o2’.

 -- C Function: PyObject* PyNumber_InPlaceRshift (PyObject *o1,
          PyObject *o2)
     `Return value: New reference.'  Returns the result of right
     shifting `o1' by `o2' on success, or `NULL' on failure.  The
     operation is done `in-place' when `o1' supports it.  This is the
     equivalent of the Python statement ‘o1 >>= o2’.

 -- C Function: PyObject* PyNumber_InPlaceAnd (PyObject *o1,
          PyObject *o2)
     `Return value: New reference.'  Returns the "bitwise and" of `o1'
     and `o2' on success and `NULL' on failure.  The operation is done
     `in-place' when `o1' supports it.  This is the equivalent of the
     Python statement ‘o1 &= o2’.

 -- C Function: PyObject* PyNumber_InPlaceXor (PyObject *o1,
          PyObject *o2)
     `Return value: New reference.'  Returns the "bitwise exclusive or"
     of `o1' by `o2' on success, or `NULL' on failure.  The operation is
     done `in-place' when `o1' supports it.  This is the equivalent of
     the Python statement ‘o1 ^= o2’.

 -- C Function: PyObject* PyNumber_InPlaceOr (PyObject *o1,
          PyObject *o2)
     `Return value: New reference.'  Returns the "bitwise or" of `o1'
     and `o2' on success, or `NULL' on failure.  The operation is done
     `in-place' when `o1' supports it.  This is the equivalent of the
     Python statement ‘o1 |= o2’.

 -- C Function: PyObject* PyNumber_Long (PyObject *o)
     `Return value: New reference.'

     Returns the `o' converted to an integer object on success, or
     `NULL' on failure.  This is the equivalent of the Python expression
     ‘int(o)’.

 -- C Function: PyObject* PyNumber_Float (PyObject *o)
     `Return value: New reference.'

     Returns the `o' converted to a float object on success, or `NULL'
     on failure.  This is the equivalent of the Python expression
     ‘float(o)’.

 -- C Function: PyObject* PyNumber_Index (PyObject *o)

     Returns the `o' converted to a Python int on success or `NULL' with
     a *note TypeError: 562. exception raised on failure.

 -- C Function: PyObject* PyNumber_ToBase (PyObject *n, int base)

     Returns the integer `n' converted to base `base' as a string.  The
     `base' argument must be one of 2, 8, 10, or 16.  For base 2, 8, or
     16, the returned string is prefixed with a base marker of ‘'0b'’,
     ‘'0o'’, or ‘'0x'’, respectively.  If `n' is not a Python int, it is
     converted with *note PyNumber_Index(): 34e9. first.

 -- C Function: Py_ssize_t PyNumber_AsSsize_t (PyObject *o,
          PyObject *exc)

     Returns `o' converted to a Py_ssize_t value if `o' can be
     interpreted as an integer.  If the call fails, an exception is
     raised and -1 is returned.

     If `o' can be converted to a Python int but the attempt to convert
     to a Py_ssize_t value would raise an *note OverflowError: 578, then
     the `exc' argument is the type of exception that will be raised
     (usually *note IndexError: afb. or *note OverflowError: 578.).  If
     `exc' is `NULL', then the exception is cleared and the value is
     clipped to `PY_SSIZE_T_MIN' for a negative integer or
     `PY_SSIZE_T_MAX' for a positive integer.

 -- C Function: int PyIndex_Check (PyObject *o)

     Returns True if `o' is an index integer (has the nb_index slot of
     the tp_as_number structure filled in).


File: python.info,  Node: Sequence Protocol,  Next: Mapping Protocol,  Prev: Number Protocol,  Up: Abstract Objects Layer

7.7.3 Sequence Protocol
-----------------------

 -- C Function: int PySequence_Check (PyObject *o)

     Return ‘1’ if the object provides sequence protocol, and ‘0’
     otherwise.  This function always succeeds.

 -- C Function: Py_ssize_t PySequence_Size (PyObject *o)
 -- C Function: Py_ssize_t PySequence_Length (PyObject *o)

     Returns the number of objects in sequence `o' on success, and ‘-1’
     on failure.  For objects that do not provide sequence protocol,
     this is equivalent to the Python expression ‘len(o)’.

 -- C Function: PyObject* PySequence_Concat (PyObject *o1, PyObject *o2)
     `Return value: New reference.'  Return the concatenation of `o1'
     and `o2' on success, and `NULL' on failure.  This is the equivalent
     of the Python expression ‘o1 + o2’.

 -- C Function: PyObject* PySequence_Repeat (PyObject *o,
          Py_ssize_t count)
     `Return value: New reference.'  Return the result of repeating
     sequence object `o' `count' times, or `NULL' on failure.  This is
     the equivalent of the Python expression ‘o * count’.

 -- C Function: PyObject* PySequence_InPlaceConcat (PyObject *o1,
          PyObject *o2)
     `Return value: New reference.'  Return the concatenation of `o1'
     and `o2' on success, and `NULL' on failure.  The operation is done
     `in-place' when `o1' supports it.  This is the equivalent of the
     Python expression ‘o1 += o2’.

 -- C Function: PyObject* PySequence_InPlaceRepeat (PyObject *o,
          Py_ssize_t count)
     `Return value: New reference.'  Return the result of repeating
     sequence object `o' `count' times, or `NULL' on failure.  The
     operation is done `in-place' when `o' supports it.  This is the
     equivalent of the Python expression ‘o *= count’.

 -- C Function: PyObject* PySequence_GetItem (PyObject *o, Py_ssize_t i)
     `Return value: New reference.'  Return the `i'th element of `o', or
     `NULL' on failure.  This is the equivalent of the Python expression
     ‘o[i]’.

 -- C Function: PyObject* PySequence_GetSlice (PyObject *o,
          Py_ssize_t i1, Py_ssize_t i2)
     `Return value: New reference.'  Return the slice of sequence object
     `o' between `i1' and `i2', or `NULL' on failure.  This is the
     equivalent of the Python expression ‘o[i1:i2]’.

 -- C Function: int PySequence_SetItem (PyObject *o, Py_ssize_t i,
          PyObject *v)

     Assign object `v' to the `i'th element of `o'.  Raise an exception
     and return ‘-1’ on failure; return ‘0’ on success.  This is the
     equivalent of the Python statement ‘o[i] = v’.  This function `does
     not' steal a reference to `v'.

     If `v' is `NULL', the element is deleted, however this feature is
     deprecated in favour of using *note PySequence_DelItem(): 34f8.

 -- C Function: int PySequence_DelItem (PyObject *o, Py_ssize_t i)

     Delete the `i'th element of object `o'.  Returns ‘-1’ on failure.
     This is the equivalent of the Python statement ‘del o[i]’.

 -- C Function: int PySequence_SetSlice (PyObject *o, Py_ssize_t i1,
          Py_ssize_t i2, PyObject *v)

     Assign the sequence object `v' to the slice in sequence object `o'
     from `i1' to `i2'.  This is the equivalent of the Python statement
     ‘o[i1:i2] = v’.

 -- C Function: int PySequence_DelSlice (PyObject *o, Py_ssize_t i1,
          Py_ssize_t i2)

     Delete the slice in sequence object `o' from `i1' to `i2'.  Returns
     ‘-1’ on failure.  This is the equivalent of the Python statement
     ‘del o[i1:i2]’.

 -- C Function: Py_ssize_t PySequence_Count (PyObject *o,
          PyObject *value)

     Return the number of occurrences of `value' in `o', that is, return
     the number of keys for which ‘o[key] == value’.  On failure, return
     ‘-1’.  This is equivalent to the Python expression
     ‘o.count(value)’.

 -- C Function: int PySequence_Contains (PyObject *o, PyObject *value)

     Determine if `o' contains `value'.  If an item in `o' is equal to
     `value', return ‘1’, otherwise return ‘0’.  On error, return ‘-1’.
     This is equivalent to the Python expression ‘value in o’.

 -- C Function: Py_ssize_t PySequence_Index (PyObject *o,
          PyObject *value)

     Return the first index `i' for which ‘o[i] == value’.  On error,
     return ‘-1’.  This is equivalent to the Python expression
     ‘o.index(value)’.

 -- C Function: PyObject* PySequence_List (PyObject *o)
     `Return value: New reference.'  Return a list object with the same
     contents as the sequence or iterable `o', or `NULL' on failure.
     The returned list is guaranteed to be new.  This is equivalent to
     the Python expression ‘list(o)’.

 -- C Function: PyObject* PySequence_Tuple (PyObject *o)
     `Return value: New reference.'

     Return a tuple object with the same contents as the arbitrary
     sequence `o' or `NULL' on failure.  If `o' is a tuple, a new
     reference will be returned, otherwise a tuple will be constructed
     with the appropriate contents.  This is equivalent to the Python
     expression ‘tuple(o)’.

 -- C Function: PyObject* PySequence_Fast (PyObject *o, const char *m)
     `Return value: New reference.'  Return the sequence `o' as a list,
     unless it is already a tuple or list, in which case `o' is
     returned.  Use *note PySequence_Fast_GET_ITEM(): 3501. to access
     the members of the result.  Returns `NULL' on failure.  If the
     object is not a sequence, raises *note TypeError: 562. with `m' as
     the message text.

 -- C Function: PyObject* PySequence_Fast_GET_ITEM (PyObject *o,
          Py_ssize_t i)
     `Return value: Borrowed reference.'  Return the `i'th element of
     `o', assuming that `o' was returned by *note PySequence_Fast():
     3500, `o' is not `NULL', and that `i' is within bounds.

 -- C Function: PyObject** PySequence_Fast_ITEMS (PyObject *o)

     Return the underlying array of PyObject pointers.  Assumes that `o'
     was returned by *note PySequence_Fast(): 3500. and `o' is not
     `NULL'.

     Note, if a list gets resized, the reallocation may relocate the
     items array.  So, only use the underlying array pointer in contexts
     where the sequence cannot change.

 -- C Function: PyObject* PySequence_ITEM (PyObject *o, Py_ssize_t i)
     `Return value: New reference.'  Return the `i'th element of `o' or
     `NULL' on failure.  Macro form of *note PySequence_GetItem(): 33a3.
     but without checking that *note PySequence_Check(): 34f0. on `o' is
     true and without adjustment for negative indices.

 -- C Function: Py_ssize_t PySequence_Fast_GET_SIZE (PyObject *o)

     Returns the length of `o', assuming that `o' was returned by *note
     PySequence_Fast(): 3500. and that `o' is not `NULL'. The size can
     also be gotten by calling *note PySequence_Size(): 34f1. on `o',
     but *note PySequence_Fast_GET_SIZE(): 3504. is faster because it
     can assume `o' is a list or tuple.


File: python.info,  Node: Mapping Protocol,  Next: Iterator Protocol,  Prev: Sequence Protocol,  Up: Abstract Objects Layer

7.7.4 Mapping Protocol
----------------------

 -- C Function: int PyMapping_Check (PyObject *o)

     Return ‘1’ if the object provides mapping protocol, and ‘0’
     otherwise.  This function always succeeds.

 -- C Function: Py_ssize_t PyMapping_Size (PyObject *o)
 -- C Function: Py_ssize_t PyMapping_Length (PyObject *o)

     Returns the number of keys in object `o' on success, and ‘-1’ on
     failure.  For objects that do not provide mapping protocol, this is
     equivalent to the Python expression ‘len(o)’.

 -- C Function: int PyMapping_DelItemString (PyObject *o, const
          char *key)

     Remove the mapping for object `key' from the object `o'.  Return
     ‘-1’ on failure.  This is equivalent to the Python statement ‘del
     o[key]’.

 -- C Function: int PyMapping_DelItem (PyObject *o, PyObject *key)

     Remove the mapping for object `key' from the object `o'.  Return
     ‘-1’ on failure.  This is equivalent to the Python statement ‘del
     o[key]’.

 -- C Function: int PyMapping_HasKeyString (PyObject *o, const
          char *key)

     On success, return ‘1’ if the mapping object has the key `key' and
     ‘0’ otherwise.  This is equivalent to the Python expression ‘key in
     o’.  This function always succeeds.

 -- C Function: int PyMapping_HasKey (PyObject *o, PyObject *key)

     Return ‘1’ if the mapping object has the key `key' and ‘0’
     otherwise.  This is equivalent to the Python expression ‘key in o’.
     This function always succeeds.

 -- C Function: PyObject* PyMapping_Keys (PyObject *o)
     `Return value: New reference.'  On success, return a list, a tuple
     or a dictionary view in case of a dict, of the keys in object `o'.
     On failure, return `NULL'.

 -- C Function: PyObject* PyMapping_Values (PyObject *o)
     `Return value: New reference.'  On success, return a list, a tuple
     or a dictionary view in case of a dict, of the values in object
     `o'.  On failure, return `NULL'.

 -- C Function: PyObject* PyMapping_Items (PyObject *o)
     `Return value: New reference.'  On success, return a list, a tuple
     or a dictionary view in case of a dict, of the items in object `o',
     where each item is a tuple containing a key-value pair.  On
     failure, return `NULL'.

 -- C Function: PyObject* PyMapping_GetItemString (PyObject *o, const
          char *key)
     `Return value: New reference.'  Return element of `o' corresponding
     to the object `key' or `NULL' on failure.  This is the equivalent
     of the Python expression ‘o[key]’.

 -- C Function: int PyMapping_SetItemString (PyObject *o, const
          char *key, PyObject *v)

     Map the object `key' to the value `v' in object `o'.  Returns ‘-1’
     on failure.  This is the equivalent of the Python statement ‘o[key]
     = v’.


File: python.info,  Node: Iterator Protocol,  Next: Buffer Protocol,  Prev: Mapping Protocol,  Up: Abstract Objects Layer

7.7.5 Iterator Protocol
-----------------------

There are two functions specifically for working with iterators.

 -- C Function: int PyIter_Check (PyObject *o)

     Return true if the object `o' supports the iterator protocol.

 -- C Function: PyObject* PyIter_Next (PyObject *o)
     `Return value: New reference.'  Return the next value from the
     iteration `o'.  The object must be an iterator (it is up to the
     caller to check this).  If there are no remaining values, returns
     `NULL' with no exception set.  If an error occurs while retrieving
     the item, returns `NULL' and passes along the exception.

To write a loop which iterates over an iterator, the C code should look
something like this:

     PyObject *iterator = PyObject_GetIter(obj);
     PyObject *item;

     if (iterator == NULL) {
         /* propagate error */
     }

     while (item = PyIter_Next(iterator)) {
         /* do something with item */
         ...
         /* release reference when done */
         Py_DECREF(item);
     }

     Py_DECREF(iterator);

     if (PyErr_Occurred()) {
         /* propagate error */
     }
     else {
         /* continue doing useful work */
     }


File: python.info,  Node: Buffer Protocol,  Next: Old Buffer Protocol,  Prev: Iterator Protocol,  Up: Abstract Objects Layer

7.7.6 Buffer Protocol
---------------------

Certain objects available in Python wrap access to an underlying memory
array or `buffer'.  Such objects include the built-in *note bytes: 1db.
and *note bytearray: 1dc, and some extension types like *note
array.array: 8c4.  Third-party libraries may define their own types for
special purposes, such as image processing or numeric analysis.

While each of these types have their own semantics, they share the
common characteristic of being backed by a possibly large memory buffer.
It is then desirable, in some situations, to access that buffer directly
and without intermediate copying.

Python provides such a facility at the C level in the form of the *note
buffer protocol: ff5.  This protocol has two sides:

   - on the producer side, a type can export a "buffer interface" which
     allows objects of that type to expose information about their
     underlying buffer.  This interface is described in the section
     *note Buffer Object Structures: 351b.;

   - on the consumer side, several means are available to obtain a
     pointer to the raw underlying data of an object (for example a
     method parameter).

Simple objects such as *note bytes: 1db. and *note bytearray: 1dc.
expose their underlying buffer in byte-oriented form.  Other forms are
possible; for example, the elements exposed by an *note array.array:
8c4. can be multi-byte values.

An example consumer of the buffer interface is the *note write(): 1954.
method of file objects: any object that can export a series of bytes
through the buffer interface can be written to a file.  While ‘write()’
only needs read-only access to the internal contents of the object
passed to it, other methods such as *note readinto(): 1953. need write
access to the contents of their argument.  The buffer interface allows
objects to selectively allow or reject exporting of read-write and
read-only buffers.

There are two ways for a consumer of the buffer interface to acquire a
buffer over a target object:

   * call *note PyObject_GetBuffer(): 996. with the right parameters;

   * call *note PyArg_ParseTuple(): 724. (or one of its siblings) with
     one of the ‘y*’, ‘w*’ or ‘s*’ *note format codes: 3311.

In both cases, *note PyBuffer_Release(): 9cb. must be called when the
buffer isn’t needed anymore.  Failure to do so could lead to various
issues such as resource leaks.

* Menu:

* Buffer structure:: 
* Buffer request types:: 
* Complex arrays:: 
* Buffer-related functions:: 


File: python.info,  Node: Buffer structure,  Next: Buffer request types,  Up: Buffer Protocol

7.7.6.1 Buffer structure
........................

Buffer structures (or simply "buffers") are useful as a way to expose
the binary data from another object to the Python programmer.  They can
also be used as a zero-copy slicing mechanism.  Using their ability to
reference a block of memory, it is possible to expose any data to the
Python programmer quite easily.  The memory could be a large, constant
array in a C extension, it could be a raw block of memory for
manipulation before passing to an operating system library, or it could
be used to pass around structured data in its native, in-memory format.

Contrary to most data types exposed by the Python interpreter, buffers
are not *note PyObject: 9f5. pointers but rather simple C structures.
This allows them to be created and copied very simply.  When a generic
wrapper around a buffer is needed, a *note memoryview: 351e. object can
be created.

For short instructions how to write an exporting object, see *note
Buffer Object Structures: 351b.  For obtaining a buffer, see *note
PyObject_GetBuffer(): 996.

 -- C Type: Py_buffer

      -- C Member: void *buf

          A pointer to the start of the logical structure described by
          the buffer fields.  This can be any location within the
          underlying physical memory block of the exporter.  For
          example, with negative *note strides: 3520. the value may
          point to the end of the memory block.

          For *note contiguous: 1069. arrays, the value points to the
          beginning of the memory block.

      -- C Member: void *obj

          A new reference to the exporting object.  The reference is
          owned by the consumer and automatically decremented and set to
          `NULL' by *note PyBuffer_Release(): 9cb.  The field is the
          equivalent of the return value of any standard C-API function.

          As a special case, for `temporary' buffers that are wrapped by
          *note PyMemoryView_FromBuffer(): 3522. or *note
          PyBuffer_FillInfo(): 3523. this field is `NULL'. In general,
          exporting objects MUST NOT use this scheme.

      -- C Member: Py_ssize_t len

          ‘product(shape) * itemsize’.  For contiguous arrays, this is
          the length of the underlying memory block.  For non-contiguous
          arrays, it is the length that the logical structure would have
          if it were copied to a contiguous representation.

          Accessing ‘((char *)buf)[0] up to ((char *)buf)[len-1]’ is
          only valid if the buffer has been obtained by a request that
          guarantees contiguity.  In most cases such a request will be
          *note PyBUF_SIMPLE: 3525. or *note PyBUF_WRITABLE: 3526.

      -- C Member: int readonly

          An indicator of whether the buffer is read-only.  This field
          is controlled by the *note PyBUF_WRITABLE: 3526. flag.

      -- C Member: Py_ssize_t itemsize

          Item size in bytes of a single element.  Same as the value of
          *note struct.calcsize(): 11bf. called on non-NULL *note
          format: 3529. values.

          Important exception: If a consumer requests a buffer without
          the *note PyBUF_FORMAT: 352a. flag, *note format: 3529. will
          be set to `NULL', but *note itemsize: 3528. still has the
          value for the original format.

          If *note shape: 352b. is present, the equality ‘product(shape)
          * itemsize == len’ still holds and the consumer can use *note
          itemsize: 3528. to navigate the buffer.

          If *note shape: 352b. is `NULL' as a result of a *note
          PyBUF_SIMPLE: 3525. or a *note PyBUF_WRITABLE: 3526. request,
          the consumer must disregard *note itemsize: 3528. and assume
          ‘itemsize == 1’.

      -- C Member: const char *format

          A `NUL' terminated string in *note struct: f6. module style
          syntax describing the contents of a single item.  If this is
          `NULL', ‘"B"’ (unsigned bytes) is assumed.

          This field is controlled by the *note PyBUF_FORMAT: 352a.
          flag.

      -- C Member: int ndim

          The number of dimensions the memory represents as an
          n-dimensional array.  If it is 0, *note buf: 351f. points to a
          single item representing a scalar.  In this case, *note shape:
          352b, *note strides: 3520. and *note suboffsets: 352d. MUST be
          `NULL'.

          The macro ‘PyBUF_MAX_NDIM’ limits the maximum number of
          dimensions to 64.  Exporters MUST respect this limit,
          consumers of multi-dimensional buffers SHOULD be able to
          handle up to ‘PyBUF_MAX_NDIM’ dimensions.

      -- C Member: Py_ssize_t *shape

          An array of ‘Py_ssize_t’ of length *note ndim: 352c.
          indicating the shape of the memory as an n-dimensional array.
          Note that ‘shape[0] * ... * shape[ndim-1] * itemsize’ MUST be
          equal to *note len: 3524.

          Shape values are restricted to ‘shape[n] >= 0’.  The case
          ‘shape[n] == 0’ requires special attention.  See *note complex
          arrays: 352e. for further information.

          The shape array is read-only for the consumer.

      -- C Member: Py_ssize_t *strides

          An array of ‘Py_ssize_t’ of length *note ndim: 352c. giving
          the number of bytes to skip to get to a new element in each
          dimension.

          Stride values can be any integer.  For regular arrays, strides
          are usually positive, but a consumer MUST be able to handle
          the case ‘strides[n] <= 0’.  See *note complex arrays: 352e.
          for further information.

          The strides array is read-only for the consumer.

      -- C Member: Py_ssize_t *suboffsets

          An array of ‘Py_ssize_t’ of length *note ndim: 352c.  If
          ‘suboffsets[n] >= 0’, the values stored along the nth
          dimension are pointers and the suboffset value dictates how
          many bytes to add to each pointer after de-referencing.  A
          suboffset value that is negative indicates that no
          de-referencing should occur (striding in a contiguous memory
          block).

          If all suboffsets are negative (i.e.  no de-referencing is
          needed, then this field must be NULL (the default value).

          This type of array representation is used by the Python
          Imaging Library (PIL). See *note complex arrays: 352e. for
          further information how to access elements of such an array.

          The suboffsets array is read-only for the consumer.

      -- C Member: void *internal

          This is for use internally by the exporting object.  For
          example, this might be re-cast as an integer by the exporter
          and used to store flags about whether or not the shape,
          strides, and suboffsets arrays must be freed when the buffer
          is released.  The consumer MUST NOT alter this value.


File: python.info,  Node: Buffer request types,  Next: Complex arrays,  Prev: Buffer structure,  Up: Buffer Protocol

7.7.6.2 Buffer request types
............................

Buffers are usually obtained by sending a buffer request to an exporting
object via *note PyObject_GetBuffer(): 996.  Since the complexity of the
logical structure of the memory can vary drastically, the consumer uses
the `flags' argument to specify the exact buffer type it can handle.

All *note Py_buffer: 75d. fields are unambiguously defined by the
request type.

* Menu:

* request-independent fields:: 
* readonly, format: readonly format. 
* shape, strides, suboffsets: shape strides suboffsets. 
* contiguity requests:: 
* compound requests:: 


File: python.info,  Node: request-independent fields,  Next: readonly format,  Up: Buffer request types

7.7.6.3 request-independent fields
..................................

The following fields are not influenced by `flags' and must always be
filled in with the correct values: *note obj: 3521, *note buf: 351f,
*note len: 3524, *note itemsize: 3528, *note ndim: 352c.


File: python.info,  Node: readonly format,  Next: shape strides suboffsets,  Prev: request-independent fields,  Up: Buffer request types

7.7.6.4 readonly, format
........................

      -- C Macro: PyBUF_WRITABLE

          Controls the *note readonly: 3527. field.  If set, the
          exporter MUST provide a writable buffer or else report
          failure.  Otherwise, the exporter MAY provide either a
          read-only or writable buffer, but the choice MUST be
          consistent for all consumers.

      -- C Macro: PyBUF_FORMAT

          Controls the *note format: 3529. field.  If set, this field
          MUST be filled in correctly.  Otherwise, this field MUST be
          `NULL'.

*note PyBUF_WRITABLE: 3526. can be |’d to any of the flags in the next
section.  Since *note PyBUF_SIMPLE: 3525. is defined as 0, *note
PyBUF_WRITABLE: 3526. can be used as a stand-alone flag to request a
simple writable buffer.

*note PyBUF_FORMAT: 352a. can be |’d to any of the flags except *note
PyBUF_SIMPLE: 3525.  The latter already implies format ‘B’ (unsigned
bytes).


File: python.info,  Node: shape strides suboffsets,  Next: contiguity requests,  Prev: readonly format,  Up: Buffer request types

7.7.6.5 shape, strides, suboffsets
..................................

The flags that control the logical structure of the memory are listed in
decreasing order of complexity.  Note that each flag contains all bits
of the flags below it.

Request                           shape       strides       suboffsets
                                                            
-----------------------------------------------------------------------------
                                                            
 -- C Macro: PyBUF_INDIRECT       yes         yes           if needed
                                                            
                                                            
 -- C Macro: PyBUF_STRIDES        yes         yes           NULL
                                                            
                                                            
 -- C Macro: PyBUF_ND             yes         NULL          NULL
                                                            
                                                            
 -- C Macro: PyBUF_SIMPLE         NULL        NULL          NULL
                                                            


File: python.info,  Node: contiguity requests,  Next: compound requests,  Prev: shape strides suboffsets,  Up: Buffer request types

7.7.6.6 contiguity requests
...........................

C or Fortran *note contiguity: 1069. can be explicitly requested, with
and without stride information.  Without stride information, the buffer
must be C-contiguous.

Request                                 shape       strides       suboffsets       contig
                                                                                   
------------------------------------------------------------------------------------------------
                                                                                   
 -- C Macro: PyBUF_C_CONTIGUOUS         yes         yes           NULL             C
                                                                                   
                                                                                   
 -- C Macro: PyBUF_F_CONTIGUOUS         yes         yes           NULL             F
                                                                                   
                                                                                   
 -- C Macro: PyBUF_ANY_CONTIGUOUS       yes         yes           NULL             C or F
                                                                                   
                                                                                   
 -- C Macro: PyBUF_ND                   yes         NULL          NULL             C
                                                                                   


File: python.info,  Node: compound requests,  Prev: contiguity requests,  Up: Buffer request types

7.7.6.7 compound requests
.........................

All possible requests are fully defined by some combination of the flags
in the previous section.  For convenience, the buffer protocol provides
frequently used combinations as single flags.

In the following table `U' stands for undefined contiguity.  The
consumer would have to call *note PyBuffer_IsContiguous(): 353d. to
determine contiguity.

Request                             shape       strides       suboffsets       contig       readonly       format
                                                                                                           
------------------------------------------------------------------------------------------------------------------------
                                                                                                           
 -- C Macro: PyBUF_FULL             yes         yes           if needed        U            0              yes
                                                                                                           
                                                                                                           
 -- C Macro: PyBUF_FULL_RO          yes         yes           if needed        U            1 or 0         yes
                                                                                                           
                                                                                                           
 -- C Macro: PyBUF_RECORDS          yes         yes           NULL             U            0              yes
                                                                                                           
                                                                                                           
 -- C Macro: PyBUF_RECORDS_RO       yes         yes           NULL             U            1 or 0         yes
                                                                                                           
                                                                                                           
 -- C Macro: PyBUF_STRIDED          yes         yes           NULL             U            0              NULL
                                                                                                           
                                                                                                           
 -- C Macro: PyBUF_STRIDED_RO       yes         yes           NULL             U            1 or 0         NULL
                                                                                                           
                                                                                                           
 -- C Macro: PyBUF_CONTIG           yes         NULL          NULL             C            0              NULL
                                                                                                           
                                                                                                           
 -- C Macro: PyBUF_CONTIG_RO        yes         NULL          NULL             C            1 or 0         NULL
                                                                                                           


File: python.info,  Node: Complex arrays,  Next: Buffer-related functions,  Prev: Buffer request types,  Up: Buffer Protocol

7.7.6.8 Complex arrays
......................

* Menu:

* NumPy-style; shape and strides: NumPy-style shape and strides. 
* PIL-style; shape, strides and suboffsets: PIL-style shape strides and suboffsets. 


File: python.info,  Node: NumPy-style shape and strides,  Next: PIL-style shape strides and suboffsets,  Up: Complex arrays

7.7.6.9 NumPy-style: shape and strides
......................................

The logical structure of NumPy-style arrays is defined by *note
itemsize: 3528, *note ndim: 352c, *note shape: 352b. and *note strides:
3520.

If ‘ndim == 0’, the memory location pointed to by *note buf: 351f. is
interpreted as a scalar of size *note itemsize: 3528.  In that case,
both *note shape: 352b. and *note strides: 3520. are `NULL'.

If *note strides: 3520. is `NULL', the array is interpreted as a
standard n-dimensional C-array.  Otherwise, the consumer must access an
n-dimensional array as follows:

     ‘ptr = (char *)buf + indices[0] * strides[0] + ... + indices[n-1] *
     strides[n-1]’ ‘item = *((typeof(item) *)ptr);’

As noted above, *note buf: 351f. can point to any location within the
actual memory block.  An exporter can check the validity of a buffer
with this function:

     def verify_structure(memlen, itemsize, ndim, shape, strides, offset):
         """Verify that the parameters represent a valid array within
            the bounds of the allocated memory:
                char *mem: start of the physical memory block
                memlen: length of the physical memory block
                offset: (char *)buf - mem
         """
         if offset % itemsize:
             return False
         if offset < 0 or offset+itemsize > memlen:
             return False
         if any(v % itemsize for v in strides):
             return False

         if ndim <= 0:
             return ndim == 0 and not shape and not strides
         if 0 in shape:
             return True

         imin = sum(strides[j]*(shape[j]-1) for j in range(ndim)
                    if strides[j] <= 0)
         imax = sum(strides[j]*(shape[j]-1) for j in range(ndim)
                    if strides[j] > 0)

         return 0 <= offset+imin and offset+imax+itemsize <= memlen


File: python.info,  Node: PIL-style shape strides and suboffsets,  Prev: NumPy-style shape and strides,  Up: Complex arrays

7.7.6.10 PIL-style: shape, strides and suboffsets
.................................................

In addition to the regular items, PIL-style arrays can contain pointers
that must be followed in order to get to the next element in a
dimension.  For example, the regular three-dimensional C-array ‘char
v[2][2][3]’ can also be viewed as an array of 2 pointers to 2
two-dimensional arrays: ‘char (*v[2])[2][3]’.  In suboffsets
representation, those two pointers can be embedded at the start of *note
buf: 351f, pointing to two ‘char x[2][3]’ arrays that can be located
anywhere in memory.

Here is a function that returns a pointer to the element in an N-D array
pointed to by an N-dimensional index when there are both non-NULL
strides and suboffsets:

     void *get_item_pointer(int ndim, void *buf, Py_ssize_t *strides,
                            Py_ssize_t *suboffsets, Py_ssize_t *indices) {
         char *pointer = (char*)buf;
         int i;
         for (i = 0; i < ndim; i++) {
             pointer += strides[i] * indices[i];
             if (suboffsets[i] >=0 ) {
                 pointer = *((char**)pointer) + suboffsets[i];
             }
         }
         return (void*)pointer;
     }


File: python.info,  Node: Buffer-related functions,  Prev: Complex arrays,  Up: Buffer Protocol

7.7.6.11 Buffer-related functions
.................................

 -- C Function: int PyObject_CheckBuffer (PyObject *obj)

     Return 1 if `obj' supports the buffer interface otherwise 0.  When
     1 is returned, it doesn’t guarantee that *note
     PyObject_GetBuffer(): 996. will succeed.

 -- C Function: int PyObject_GetBuffer (PyObject *exporter,
          Py_buffer *view, int flags)

     Send a request to `exporter' to fill in `view' as specified by
     `flags'.  If the exporter cannot provide a buffer of the exact
     type, it MUST raise ‘PyExc_BufferError’, set ‘view->obj’ to `NULL'
     and return -1.

     On success, fill in `view', set ‘view->obj’ to a new reference to
     `exporter' and return 0.  In the case of chained buffer providers
     that redirect requests to a single object, ‘view->obj’ MAY refer to
     this object instead of `exporter' (See *note Buffer Object
     Structures: 351b.).

     Successful calls to *note PyObject_GetBuffer(): 996. must be paired
     with calls to *note PyBuffer_Release(): 9cb, similar to ‘malloc()’
     and ‘free()’.  Thus, after the consumer is done with the buffer,
     *note PyBuffer_Release(): 9cb. must be called exactly once.

 -- C Function: void PyBuffer_Release (Py_buffer *view)

     Release the buffer `view' and decrement the reference count for
     ‘view->obj’.  This function MUST be called when the buffer is no
     longer being used, otherwise reference leaks may occur.

     It is an error to call this function on a buffer that was not
     obtained via *note PyObject_GetBuffer(): 996.

 -- C Function: Py_ssize_t PyBuffer_SizeFromFormat (const char *)

     Return the implied *note itemsize: 3528. from *note format: 3529.
     This function is not yet implemented.

 -- C Function: int PyBuffer_IsContiguous (Py_buffer *view, char order)

     Return 1 if the memory defined by the `view' is C-style (`order' is
     ‘'C'’) or Fortran-style (`order' is ‘'F'’) *note contiguous: 1069.
     or either one (`order' is ‘'A'’).  Return 0 otherwise.

 -- C Function: void PyBuffer_FillContiguousStrides (int ndim,
          Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t itemsize,
          char order)

     Fill the `strides' array with byte-strides of a *note contiguous:
     1069. (C-style if `order' is ‘'C'’ or Fortran-style if `order' is
     ‘'F'’) array of the given shape with the given number of bytes per
     element.

 -- C Function: int PyBuffer_FillInfo (Py_buffer *view,
          PyObject *exporter, void *buf, Py_ssize_t len, int readonly,
          int flags)

     Handle buffer requests for an exporter that wants to expose `buf'
     of size `len' with writability set according to `readonly'.  `buf'
     is interpreted as a sequence of unsigned bytes.

     The `flags' argument indicates the request type.  This function
     always fills in `view' as specified by flags, unless `buf' has been
     designated as read-only and *note PyBUF_WRITABLE: 3526. is set in
     `flags'.

     On success, set ‘view->obj’ to a new reference to `exporter' and
     return 0.  Otherwise, raise ‘PyExc_BufferError’, set ‘view->obj’ to
     `NULL' and return -1;

     If this function is used as part of a *note getbufferproc: 351b,
     `exporter' MUST be set to the exporting object and `flags' must be
     passed unmodified.  Otherwise, `exporter' MUST be NULL.


File: python.info,  Node: Old Buffer Protocol,  Prev: Buffer Protocol,  Up: Abstract Objects Layer

7.7.7 Old Buffer Protocol
-------------------------

Deprecated since version 3.0.

These functions were part of the "old buffer protocol" API in Python 2.
In Python 3, this protocol doesn’t exist anymore but the functions are
still exposed to ease porting 2.x code.  They act as a compatibility
wrapper around the *note new buffer protocol: ff5, but they don’t give
you control over the lifetime of the resources acquired when a buffer is
exported.

Therefore, it is recommended that you call *note PyObject_GetBuffer():
996. (or the ‘y*’ or ‘w*’ *note format codes: 3311. with the *note
PyArg_ParseTuple(): 724. family of functions) to get a buffer view over
an object, and *note PyBuffer_Release(): 9cb. when the buffer view can
be released.

 -- C Function: int PyObject_AsCharBuffer (PyObject *obj, const
          char **buffer, Py_ssize_t *buffer_len)

     Returns a pointer to a read-only memory location usable as
     character-based input.  The `obj' argument must support the
     single-segment character buffer interface.  On success, returns
     ‘0’, sets `buffer' to the memory location and `buffer_len' to the
     buffer length.  Returns ‘-1’ and sets a *note TypeError: 562. on
     error.

 -- C Function: int PyObject_AsReadBuffer (PyObject *obj, const
          void **buffer, Py_ssize_t *buffer_len)

     Returns a pointer to a read-only memory location containing
     arbitrary data.  The `obj' argument must support the single-segment
     readable buffer interface.  On success, returns ‘0’, sets `buffer'
     to the memory location and `buffer_len' to the buffer length.
     Returns ‘-1’ and sets a *note TypeError: 562. on error.

 -- C Function: int PyObject_CheckReadBuffer (PyObject *o)

     Returns ‘1’ if `o' supports the single-segment readable buffer
     interface.  Otherwise returns ‘0’.

 -- C Function: int PyObject_AsWriteBuffer (PyObject *obj,
          void **buffer, Py_ssize_t *buffer_len)

     Returns a pointer to a writable memory location.  The `obj'
     argument must support the single-segment, character buffer
     interface.  On success, returns ‘0’, sets `buffer' to the memory
     location and `buffer_len' to the buffer length.  Returns ‘-1’ and
     sets a *note TypeError: 562. on error.


File: python.info,  Node: Concrete Objects Layer,  Next: Initialization Finalization and Threads,  Prev: Abstract Objects Layer,  Up: Python/C API Reference Manual

7.8 Concrete Objects Layer
==========================

The functions in this chapter are specific to certain Python object
types.  Passing them an object of the wrong type is not a good idea; if
you receive an object from a Python program and you are not sure that it
has the right type, you must perform a type check first; for example, to
check that an object is a dictionary, use *note PyDict_Check(): 3555.
The chapter is structured like the "family tree" of Python object types.

     Warning: While the functions described in this chapter carefully
     check the type of the objects which are passed in, many of them do
     not check for `NULL' being passed instead of a valid object.
     Allowing `NULL' to be passed in can cause memory access violations
     and immediate termination of the interpreter.

* Menu:

* Fundamental Objects:: 
* Numeric Objects:: 
* Sequence Objects:: 
* Container Objects:: 
* Function Objects: Function Objects<2>. 
* Other Objects:: 


File: python.info,  Node: Fundamental Objects,  Next: Numeric Objects,  Up: Concrete Objects Layer

7.8.1 Fundamental Objects
-------------------------

This section describes Python type objects and the singleton object
‘None’.

* Menu:

* Type Objects: Type Objects<2>. 
* The None Object:: 


File: python.info,  Node: Type Objects<2>,  Next: The None Object,  Up: Fundamental Objects

7.8.1.1 Type Objects
....................

 -- C Type: PyTypeObject

     The C structure of the objects used to describe built-in types.

 -- C Variable: PyObject* PyType_Type

     This is the type object for type objects; it is the same object as
     *note type: 376. in the Python layer.

 -- C Function: int PyType_Check (PyObject *o)

     Return true if the object `o' is a type object, including instances
     of types derived from the standard type object.  Return false in
     all other cases.

 -- C Function: int PyType_CheckExact (PyObject *o)

     Return true if the object `o' is a type object, but not a subtype
     of the standard type object.  Return false in all other cases.

 -- C Function: unsigned int PyType_ClearCache ()

     Clear the internal lookup cache.  Return the current version tag.

 -- C Function: long PyType_GetFlags (PyTypeObject* type)

     Return the *note tp_flags: 3560. member of `type'.  This function
     is primarily meant for use with ‘Py_LIMITED_API’; the individual
     flag bits are guaranteed to be stable across Python releases, but
     access to *note tp_flags: 3560. itself is not part of the limited
     API.

     New in version 3.2.

 -- C Function: void PyType_Modified (PyTypeObject *type)

     Invalidate the internal lookup cache for the type and all of its
     subtypes.  This function must be called after any manual
     modification of the attributes or base classes of the type.

 -- C Function: int PyType_HasFeature (PyTypeObject *o, int feature)

     Return true if the type object `o' sets the feature `feature'.
     Type features are denoted by single bit flags.

 -- C Function: int PyType_IS_GC (PyTypeObject *o)

     Return true if the type object includes support for the cycle
     detector; this tests the type flag *note Py_TPFLAGS_HAVE_GC: 334a.

 -- C Function: int PyType_IsSubtype (PyTypeObject *a, PyTypeObject *b)

     Return true if `a' is a subtype of `b'.

     This function only checks for actual subtypes, which means that
     *note __subclasscheck__(): e14. is not called on `b'.  Call *note
     PyObject_IsSubclass(): 375. to do the same check that *note
     issubclass(): 999. would do.

 -- C Function: PyObject* PyType_GenericAlloc (PyTypeObject *type,
          Py_ssize_t nitems)
     `Return value: New reference.'  Generic handler for the *note
     tp_alloc: 333e. slot of a type object.  Use Python’s default memory
     allocation mechanism to allocate a new instance and initialize all
     its contents to `NULL'.

 -- C Function: PyObject* PyType_GenericNew (PyTypeObject *type,
          PyObject *args, PyObject *kwds)
     `Return value: New reference.'  Generic handler for the *note
     tp_new: 3339. slot of a type object.  Create a new instance using
     the type’s *note tp_alloc: 333e. slot.

 -- C Function: int PyType_Ready (PyTypeObject *type)

     Finalize a type object.  This should be called on all type objects
     to finish their initialization.  This function is responsible for
     adding inherited slots from a type’s base class.  Return ‘0’ on
     success, or return ‘-1’ and sets an exception on error.

 -- C Function: PyObject* PyType_FromSpec (PyType_Spec *spec)

     Creates and returns a heap type object from the `spec' passed to
     the function.

 -- C Function: PyObject* PyType_FromSpecWithBases (PyType_Spec *spec,
          PyObject *bases)

     Creates and returns a heap type object from the `spec'.  In
     addition to that, the created heap type contains all types
     contained by the `bases' tuple as base types.  This allows the
     caller to reference other heap types as base types.

     New in version 3.3.

 -- C Function: void* PyType_GetSlot (PyTypeObject *type, int slot)

     Return the function pointer stored in the given slot.  If the
     result is `NULL', this indicates that either the slot is `NULL', or
     that the function was called with invalid parameters.  Callers will
     typically cast the result pointer into the appropriate function
     type.

     New in version 3.4.


File: python.info,  Node: The None Object,  Prev: Type Objects<2>,  Up: Fundamental Objects

7.8.1.2 The None Object
.......................

Note that the *note PyTypeObject: 3bc. for ‘None’ is not directly
exposed in the Python/C API. Since ‘None’ is a singleton, testing for
object identity (using ‘==’ in C) is sufficient.  There is no
‘PyNone_Check()’ function for the same reason.

 -- C Variable: PyObject* Py_None

     The Python ‘None’ object, denoting lack of value.  This object has
     no methods.  It needs to be treated just like any other object with
     respect to reference counts.

 -- C Macro: Py_RETURN_NONE

     Properly handle returning *note Py_None: 3300. from within a C
     function (that is, increment the reference count of None and return
     it.)


File: python.info,  Node: Numeric Objects,  Next: Sequence Objects,  Prev: Fundamental Objects,  Up: Concrete Objects Layer

7.8.2 Numeric Objects
---------------------

* Menu:

* Integer Objects:: 
* Boolean Objects:: 
* Floating Point Objects:: 
* Complex Number Objects:: 


File: python.info,  Node: Integer Objects,  Next: Boolean Objects,  Up: Numeric Objects

7.8.2.1 Integer Objects
.......................

All integers are implemented as "long" integer objects of arbitrary
size.

 -- C Type: PyLongObject

     This subtype of *note PyObject: 9f5. represents a Python integer
     object.

 -- C Variable: PyTypeObject PyLong_Type

     This instance of *note PyTypeObject: 3bc. represents the Python
     integer type.  This is the same object as *note int: 227. in the
     Python layer.

 -- C Function: int PyLong_Check (PyObject *p)

     Return true if its argument is a *note PyLongObject: 3570. or a
     subtype of *note PyLongObject: 3570.

 -- C Function: int PyLong_CheckExact (PyObject *p)

     Return true if its argument is a *note PyLongObject: 3570, but not
     a subtype of *note PyLongObject: 3570.

 -- C Function: PyObject* PyLong_FromLong (long v)
     `Return value: New reference.'  Return a new *note PyLongObject:
     3570. object from `v', or `NULL' on failure.

     The current implementation keeps an array of integer objects for
     all integers between ‘-5’ and ‘256’, when you create an int in that
     range you actually just get back a reference to the existing
     object.  So it should be possible to change the value of ‘1’.  I
     suspect the behaviour of Python in this case is undefined.  :-)

 -- C Function: PyObject* PyLong_FromUnsignedLong (unsigned long v)
     `Return value: New reference.'  Return a new *note PyLongObject:
     3570. object from a C ‘unsigned long’, or `NULL' on failure.

 -- C Function: PyObject* PyLong_FromSsize_t (Py_ssize_t v)

     Return a new *note PyLongObject: 3570. object from a C
     ‘Py_ssize_t’, or `NULL' on failure.

 -- C Function: PyObject* PyLong_FromSize_t (size_t v)

     Return a new *note PyLongObject: 3570. object from a C ‘size_t’, or
     `NULL' on failure.

 -- C Function: PyObject* PyLong_FromLongLong (PY_LONG_LONG v)
     `Return value: New reference.'  Return a new *note PyLongObject:
     3570. object from a C ‘long long’, or `NULL' on failure.

 -- C Function: PyObject* PyLong_FromUnsignedLongLong (unsigned
          PY_LONG_LONG v)
     `Return value: New reference.'  Return a new *note PyLongObject:
     3570. object from a C ‘unsigned long long’, or `NULL' on failure.

 -- C Function: PyObject* PyLong_FromDouble (double v)
     `Return value: New reference.'  Return a new *note PyLongObject:
     3570. object from the integer part of `v', or `NULL' on failure.

 -- C Function: PyObject* PyLong_FromString (const char *str,
          char **pend, int base)
     `Return value: New reference.'  Return a new *note PyLongObject:
     3570. based on the string value in `str', which is interpreted
     according to the radix in `base'.  If `pend' is non-`NULL', `*pend'
     will point to the first character in `str' which follows the
     representation of the number.  If `base' is ‘0’, the radix will be
     determined based on the leading characters of `str': if `str'
     starts with ‘'0x'’ or ‘'0X'’, radix 16 will be used; if `str'
     starts with ‘'0o'’ or ‘'0O'’, radix 8 will be used; if `str' starts
     with ‘'0b'’ or ‘'0B'’, radix 2 will be used; otherwise radix 10
     will be used.  If `base' is not ‘0’, it must be between ‘2’ and
     ‘36’, inclusive.  Leading spaces are ignored.  If there are no
     digits, *note ValueError: 19c. will be raised.

 -- C Function: PyObject* PyLong_FromUnicode (Py_UNICODE *u,
          Py_ssize_t length, int base)
     `Return value: New reference.'  Convert a sequence of Unicode
     digits to a Python integer value.  The Unicode string is first
     encoded to a byte string using ‘PyUnicode_EncodeDecimal()’ and then
     converted using *note PyLong_FromString(): 357a.

     Deprecated since version 3.3, will be removed in version 4.0: Part
     of the old-style *note Py_UNICODE: 72f. API; please migrate to
     using *note PyLong_FromUnicodeObject(): 357c.

 -- C Function: PyObject* PyLong_FromUnicodeObject (PyObject *u,
          int base)

     Convert a sequence of Unicode digits in the string `u' to a Python
     integer value.  The Unicode string is first encoded to a byte
     string using ‘PyUnicode_EncodeDecimal()’ and then converted using
     *note PyLong_FromString(): 357a.

     New in version 3.3.

 -- C Function: PyObject* PyLong_FromVoidPtr (void *p)
     `Return value: New reference.'  Create a Python integer from the
     pointer `p'.  The pointer value can be retrieved from the resulting
     value using *note PyLong_AsVoidPtr(): 357e.

 -- C Function: long PyLong_AsLong (PyObject *obj)

     Return a C ‘long’ representation of `obj'.  If `obj' is not an
     instance of *note PyLongObject: 3570, first call its *note
     __int__(): 929. method (if present) to convert it to a *note
     PyLongObject: 3570.

     Raise *note OverflowError: 578. if the value of `obj' is out of
     range for a ‘long’.

 -- C Function: long PyLong_AsLongAndOverflow (PyObject *obj,
          int *overflow)

     Return a C ‘long’ representation of `obj'.  If `obj' is not an
     instance of *note PyLongObject: 3570, first call its *note
     __int__(): 929. method (if present) to convert it to a *note
     PyLongObject: 3570.

     If the value of `obj' is greater than ‘LONG_MAX’ or less than
     ‘LONG_MIN’, set `*overflow' to ‘1’ or ‘-1’, respectively, and
     return ‘-1’; otherwise, set `*overflow' to ‘0’.  If any other
     exception occurs set `*overflow' to ‘0’ and return ‘-1’ as usual.

 -- C Function: PY_LONG_LONG PyLong_AsLongLong (PyObject *obj)

     Return a C ‘long long’ representation of `obj'.  If `obj' is not an
     instance of *note PyLongObject: 3570, first call its *note
     __int__(): 929. method (if present) to convert it to a *note
     PyLongObject: 3570.

     Raise *note OverflowError: 578. if the value of `obj' is out of
     range for a ‘long’.

 -- C Function: PY_LONG_LONG PyLong_AsLongLongAndOverflow
          (PyObject *obj, int *overflow)

     Return a C ‘long long’ representation of `obj'.  If `obj' is not an
     instance of *note PyLongObject: 3570, first call its *note
     __int__(): 929. method (if present) to convert it to a *note
     PyLongObject: 3570.

     If the value of `obj' is greater than ‘PY_LLONG_MAX’ or less than
     ‘PY_LLONG_MIN’, set `*overflow' to ‘1’ or ‘-1’, respectively, and
     return ‘-1’; otherwise, set `*overflow' to ‘0’.  If any other
     exception occurs set `*overflow' to ‘0’ and return ‘-1’ as usual.

     New in version 3.2.

 -- C Function: Py_ssize_t PyLong_AsSsize_t (PyObject *pylong)

     Return a C ‘Py_ssize_t’ representation of `pylong'.  `pylong' must
     be an instance of *note PyLongObject: 3570.

     Raise *note OverflowError: 578. if the value of `pylong' is out of
     range for a ‘Py_ssize_t’.

 -- C Function: unsigned long PyLong_AsUnsignedLong (PyObject *pylong)

     Return a C ‘unsigned long’ representation of `pylong'.  `pylong'
     must be an instance of *note PyLongObject: 3570.

     Raise *note OverflowError: 578. if the value of `pylong' is out of
     range for a ‘unsigned long’.

 -- C Function: size_t PyLong_AsSize_t (PyObject *pylong)

     Return a C ‘size_t’ representation of `pylong'.  `pylong' must be
     an instance of *note PyLongObject: 3570.

     Raise *note OverflowError: 578. if the value of `pylong' is out of
     range for a ‘size_t’.

 -- C Function: unsigned PY_LONG_LONG PyLong_AsUnsignedLongLong
          (PyObject *pylong)

     Return a C ‘unsigned PY_LONG_LONG’ representation of `pylong'.
     `pylong' must be an instance of *note PyLongObject: 3570.

     Raise *note OverflowError: 578. if the value of `pylong' is out of
     range for an ‘unsigned PY_LONG_LONG’.

     Changed in version 3.1: A negative `pylong' now raises *note
     OverflowError: 578, not *note TypeError: 562.

 -- C Function: unsigned long PyLong_AsUnsignedLongMask (PyObject *obj)

     Return a C ‘unsigned long’ representation of `obj'.  If `obj' is
     not an instance of *note PyLongObject: 3570, first call its *note
     __int__(): 929. method (if present) to convert it to a *note
     PyLongObject: 3570.

     If the value of `obj' is out of range for an ‘unsigned long’,
     return the reduction of that value modulo ‘ULONG_MAX + 1’.

 -- C Function: unsigned PY_LONG_LONG PyLong_AsUnsignedLongLongMask
          (PyObject *obj)

     Return a C ‘unsigned long long’ representation of `obj'.  If `obj'
     is not an instance of *note PyLongObject: 3570, first call its
     *note __int__(): 929. method (if present) to convert it to a *note
     PyLongObject: 3570.

     If the value of `obj' is out of range for an ‘unsigned long long’,
     return the reduction of that value modulo ‘PY_ULLONG_MAX + 1’.

 -- C Function: double PyLong_AsDouble (PyObject *pylong)

     Return a C ‘double’ representation of `pylong'.  `pylong' must be
     an instance of *note PyLongObject: 3570.

     Raise *note OverflowError: 578. if the value of `pylong' is out of
     range for a ‘double’.

 -- C Function: void* PyLong_AsVoidPtr (PyObject *pylong)

     Convert a Python integer `pylong' to a C ‘void’ pointer.  If
     `pylong' cannot be converted, an *note OverflowError: 578. will be
     raised.  This is only assured to produce a usable ‘void’ pointer
     for values created with *note PyLong_FromVoidPtr(): 357d.


File: python.info,  Node: Boolean Objects,  Next: Floating Point Objects,  Prev: Integer Objects,  Up: Numeric Objects

7.8.2.2 Boolean Objects
.......................

Booleans in Python are implemented as a subclass of integers.  There are
only two booleans, ‘Py_False’ and ‘Py_True’.  As such, the normal
creation and deletion functions don’t apply to booleans.  The following
macros are available, however.

 -- C Function: int PyBool_Check (PyObject *o)

     Return true if `o' is of type ‘PyBool_Type’.

 -- C Variable: PyObject* Py_False

     The Python ‘False’ object.  This object has no methods.  It needs
     to be treated just like any other object with respect to reference
     counts.

 -- C Variable: PyObject* Py_True

     The Python ‘True’ object.  This object has no methods.  It needs to
     be treated just like any other object with respect to reference
     counts.

 -- C Macro: Py_RETURN_FALSE

     Return ‘Py_False’ from a function, properly incrementing its
     reference count.

 -- C Macro: Py_RETURN_TRUE

     Return ‘Py_True’ from a function, properly incrementing its
     reference count.

 -- C Function: PyObject* PyBool_FromLong (long v)
     `Return value: New reference.'  Return a new reference to ‘Py_True’
     or ‘Py_False’ depending on the truth value of `v'.


File: python.info,  Node: Floating Point Objects,  Next: Complex Number Objects,  Prev: Boolean Objects,  Up: Numeric Objects

7.8.2.3 Floating Point Objects
..............................

 -- C Type: PyFloatObject

     This subtype of *note PyObject: 9f5. represents a Python floating
     point object.

 -- C Variable: PyTypeObject PyFloat_Type

     This instance of *note PyTypeObject: 3bc. represents the Python
     floating point type.  This is the same object as *note float: 57a.
     in the Python layer.

 -- C Function: int PyFloat_Check (PyObject *p)

     Return true if its argument is a *note PyFloatObject: 3591. or a
     subtype of *note PyFloatObject: 3591.

 -- C Function: int PyFloat_CheckExact (PyObject *p)

     Return true if its argument is a *note PyFloatObject: 3591, but not
     a subtype of *note PyFloatObject: 3591.

 -- C Function: PyObject* PyFloat_FromString (PyObject *str)
     `Return value: New reference.'  Create a *note PyFloatObject: 3591.
     object based on the string value in `str', or `NULL' on failure.

 -- C Function: PyObject* PyFloat_FromDouble (double v)
     `Return value: New reference.'  Create a *note PyFloatObject: 3591.
     object from `v', or `NULL' on failure.

 -- C Function: double PyFloat_AsDouble (PyObject *pyfloat)

     Return a C ‘double’ representation of the contents of `pyfloat'.
     If `pyfloat' is not a Python floating point object but has a *note
     __float__(): e45. method, this method will first be called to
     convert `pyfloat' into a float.  This method returns ‘-1.0’ upon
     failure, so one should call *note PyErr_Occurred(): 32f9. to check
     for errors.

 -- C Function: double PyFloat_AS_DOUBLE (PyObject *pyfloat)

     Return a C ‘double’ representation of the contents of `pyfloat',
     but without error checking.

 -- C Function: PyObject* PyFloat_GetInfo (void)

     Return a structseq instance which contains information about the
     precision, minimum and maximum values of a float.  It’s a thin
     wrapper around the header file ‘float.h’.

 -- C Function: double PyFloat_GetMax ()

     Return the maximum representable finite float `DBL_MAX' as C
     ‘double’.

 -- C Function: double PyFloat_GetMin ()

     Return the minimum normalized positive float `DBL_MIN' as C
     ‘double’.

 -- C Function: int PyFloat_ClearFreeList ()

     Clear the float free list.  Return the number of items that could
     not be freed.


File: python.info,  Node: Complex Number Objects,  Prev: Floating Point Objects,  Up: Numeric Objects

7.8.2.4 Complex Number Objects
..............................

Python’s complex number objects are implemented as two distinct types
when viewed from the C API: one is the Python object exposed to Python
programs, and the other is a C structure which represents the actual
complex number value.  The API provides functions for working with both.

* Menu:

* Complex Numbers as C Structures:: 
* Complex Numbers as Python Objects:: 


File: python.info,  Node: Complex Numbers as C Structures,  Next: Complex Numbers as Python Objects,  Up: Complex Number Objects

7.8.2.5 Complex Numbers as C Structures
.......................................

Note that the functions which accept these structures as parameters and
return them as results do so `by value' rather than dereferencing them
through pointers.  This is consistent throughout the API.

 -- C Type: Py_complex

     The C structure which corresponds to the value portion of a Python
     complex number object.  Most of the functions for dealing with
     complex number objects use structures of this type as input or
     output values, as appropriate.  It is defined as:

          typedef struct {
             double real;
             double imag;
          } Py_complex;

 -- C Function: Py_complex _Py_c_sum (Py_complex left, Py_complex right)

     Return the sum of two complex numbers, using the C *note
     Py_complex: 3478. representation.

 -- C Function: Py_complex _Py_c_diff (Py_complex left,
          Py_complex right)

     Return the difference between two complex numbers, using the C
     *note Py_complex: 3478. representation.

 -- C Function: Py_complex _Py_c_neg (Py_complex complex)

     Return the negation of the complex number `complex', using the C
     *note Py_complex: 3478. representation.

 -- C Function: Py_complex _Py_c_prod (Py_complex left,
          Py_complex right)

     Return the product of two complex numbers, using the C *note
     Py_complex: 3478. representation.

 -- C Function: Py_complex _Py_c_quot (Py_complex dividend,
          Py_complex divisor)

     Return the quotient of two complex numbers, using the C *note
     Py_complex: 3478. representation.

     If `divisor' is null, this method returns zero and sets ‘errno’ to
     ‘EDOM’.

 -- C Function: Py_complex _Py_c_pow (Py_complex num, Py_complex exp)

     Return the exponentiation of `num' by `exp', using the C *note
     Py_complex: 3478. representation.

     If `num' is null and `exp' is not a positive real number, this
     method returns zero and sets ‘errno’ to ‘EDOM’.


File: python.info,  Node: Complex Numbers as Python Objects,  Prev: Complex Numbers as C Structures,  Up: Complex Number Objects

7.8.2.6 Complex Numbers as Python Objects
.........................................

 -- C Type: PyComplexObject

     This subtype of *note PyObject: 9f5. represents a Python complex
     number object.

 -- C Variable: PyTypeObject PyComplex_Type

     This instance of *note PyTypeObject: 3bc. represents the Python
     complex number type.  It is the same object as *note complex: 579.
     in the Python layer.

 -- C Function: int PyComplex_Check (PyObject *p)

     Return true if its argument is a *note PyComplexObject: 35a5. or a
     subtype of *note PyComplexObject: 35a5.

 -- C Function: int PyComplex_CheckExact (PyObject *p)

     Return true if its argument is a *note PyComplexObject: 35a5, but
     not a subtype of *note PyComplexObject: 35a5.

 -- C Function: PyObject* PyComplex_FromCComplex (Py_complex v)
     `Return value: New reference.'  Create a new Python complex number
     object from a C *note Py_complex: 3478. value.

 -- C Function: PyObject* PyComplex_FromDoubles (double real,
          double imag)
     `Return value: New reference.'  Return a new *note PyComplexObject:
     35a5. object from `real' and `imag'.

 -- C Function: double PyComplex_RealAsDouble (PyObject *op)

     Return the real part of `op' as a C ‘double’.

 -- C Function: double PyComplex_ImagAsDouble (PyObject *op)

     Return the imaginary part of `op' as a C ‘double’.

 -- C Function: Py_complex PyComplex_AsCComplex (PyObject *op)

     Return the *note Py_complex: 3478. value of the complex number
     `op'.

     If `op' is not a Python complex number object but has a *note
     __complex__(): 97b. method, this method will first be called to
     convert `op' to a Python complex number object.  Upon failure, this
     method returns ‘-1.0’ as a real value.


File: python.info,  Node: Sequence Objects,  Next: Container Objects,  Prev: Numeric Objects,  Up: Concrete Objects Layer

7.8.3 Sequence Objects
----------------------

Generic operations on sequence objects were discussed in the previous
chapter; this section deals with the specific kinds of sequence objects
that are intrinsic to the Python language.

* Menu:

* Bytes Objects:: 
* Byte Array Objects:: 
* Unicode Objects and Codecs:: 
* Tuple Objects:: 
* Struct Sequence Objects:: 
* List Objects:: 


File: python.info,  Node: Bytes Objects,  Next: Byte Array Objects,  Up: Sequence Objects

7.8.3.1 Bytes Objects
.....................

These functions raise *note TypeError: 562. when expecting a bytes
parameter and are called with a non-bytes parameter.

 -- C Type: PyBytesObject

     This subtype of *note PyObject: 9f5. represents a Python bytes
     object.

 -- C Variable: PyTypeObject PyBytes_Type

     This instance of *note PyTypeObject: 3bc. represents the Python
     bytes type; it is the same object as *note bytes: 1db. in the
     Python layer.

 -- C Function: int PyBytes_Check (PyObject *o)

     Return true if the object `o' is a bytes object or an instance of a
     subtype of the bytes type.

 -- C Function: int PyBytes_CheckExact (PyObject *o)

     Return true if the object `o' is a bytes object, but not an
     instance of a subtype of the bytes type.

 -- C Function: PyObject* PyBytes_FromString (const char *v)

     Return a new bytes object with a copy of the string `v' as value on
     success, and `NULL' on failure.  The parameter `v' must not be
     `NULL'; it will not be checked.

 -- C Function: PyObject* PyBytes_FromStringAndSize (const char *v,
          Py_ssize_t len)

     Return a new bytes object with a copy of the string `v' as value
     and length `len' on success, and `NULL' on failure.  If `v' is
     `NULL', the contents of the bytes object are uninitialized.

 -- C Function: PyObject* PyBytes_FromFormat (const char *format, ...)

     Take a C ‘printf()’-style `format' string and a variable number of
     arguments, calculate the size of the resulting Python bytes object
     and return a bytes object with the values formatted into it.  The
     variable arguments must be C types and must correspond exactly to
     the format characters in the `format' string.  The following format
     characters are allowed:

     Format Characters       Type                Comment
                                                 
     ---------------------------------------------------------------------------------
                                                 
     ‘%%’                    `n/a'               The literal % character.
                                                 
                                                 
     ‘%c’                    int                 A single byte, represented as a C
                                                 int.
                                                 
                                                 
     ‘%d’                    int                 Exactly equivalent to
                                                 ‘printf("%d")’.
                                                 
                                                 
     ‘%u’                    unsigned int        Exactly equivalent to
                                                 ‘printf("%u")’.
                                                 
                                                 
     ‘%ld’                   long                Exactly equivalent to
                                                 ‘printf("%ld")’.
                                                 
                                                 
     ‘%lu’                   unsigned long       Exactly equivalent to
                                                 ‘printf("%lu")’.
                                                 
                                                 
     ‘%zd’                   Py_ssize_t          Exactly equivalent to
                                                 ‘printf("%zd")’.
                                                 
                                                 
     ‘%zu’                   size_t              Exactly equivalent to
                                                 ‘printf("%zu")’.
                                                 
                                                 
     ‘%i’                    int                 Exactly equivalent to
                                                 ‘printf("%i")’.
                                                 
                                                 
     ‘%x’                    int                 Exactly equivalent to
                                                 ‘printf("%x")’.
                                                 
                                                 
     ‘%s’                    char*               A null-terminated C character
                                                 array.
                                                 
                                                 
     ‘%p’                    void*               The hex representation of a C
                                                 pointer.  Mostly equivalent to
                                                 ‘printf("%p")’ except that it is
                                                 guaranteed to start with the
                                                 literal ‘0x’ regardless of what
                                                 the platform’s ‘printf’ yields.
                                                 

     An unrecognized format character causes all the rest of the format
     string to be copied as-is to the result object, and any extra
     arguments discarded.

 -- C Function: PyObject* PyBytes_FromFormatV (const char *format,
          va_list vargs)

     Identical to *note PyBytes_FromFormat(): 35b5. except that it takes
     exactly two arguments.

 -- C Function: PyObject* PyBytes_FromObject (PyObject *o)

     Return the bytes representation of object `o' that implements the
     buffer protocol.

 -- C Function: Py_ssize_t PyBytes_Size (PyObject *o)

     Return the length of the bytes in bytes object `o'.

 -- C Function: Py_ssize_t PyBytes_GET_SIZE (PyObject *o)

     Macro form of *note PyBytes_Size(): 35b8. but without error
     checking.

 -- C Function: char* PyBytes_AsString (PyObject *o)

     Return a pointer to the contents of `o'.  The pointer refers to the
     internal buffer of `o', which consists of ‘len(o) + 1’ bytes.  The
     last byte in the buffer is always null, regardless of whether there
     are any other null bytes.  The data must not be modified in any
     way, unless the object was just created using
     ‘PyBytes_FromStringAndSize(NULL, size)’.  It must not be
     deallocated.  If `o' is not a bytes object at all, *note
     PyBytes_AsString(): 35ba. returns `NULL' and raises *note
     TypeError: 562.

 -- C Function: char* PyBytes_AS_STRING (PyObject *string)

     Macro form of *note PyBytes_AsString(): 35ba. but without error
     checking.

 -- C Function: int PyBytes_AsStringAndSize (PyObject *obj,
          char **buffer, Py_ssize_t *length)

     Return the null-terminated contents of the object `obj' through the
     output variables `buffer' and `length'.

     If `length' is `NULL', the bytes object may not contain embedded
     null bytes; if it does, the function returns ‘-1’ and a *note
     TypeError: 562. is raised.

     The buffer refers to an internal buffer of `obj', which includes an
     additional null byte at the end (not counted in `length').  The
     data must not be modified in any way, unless the object was just
     created using ‘PyBytes_FromStringAndSize(NULL, size)’.  It must not
     be deallocated.  If `obj' is not a bytes object at all, *note
     PyBytes_AsStringAndSize(): 35bc. returns ‘-1’ and raises *note
     TypeError: 562.

 -- C Function: void PyBytes_Concat (PyObject **bytes,
          PyObject *newpart)

     Create a new bytes object in `*bytes' containing the contents of
     `newpart' appended to `bytes'; the caller will own the new
     reference.  The reference to the old value of `bytes' will be
     stolen.  If the new object cannot be created, the old reference to
     `bytes' will still be discarded and the value of `*bytes' will be
     set to `NULL'; the appropriate exception will be set.

 -- C Function: void PyBytes_ConcatAndDel (PyObject **bytes,
          PyObject *newpart)

     Create a new bytes object in `*bytes' containing the contents of
     `newpart' appended to `bytes'.  This version decrements the
     reference count of `newpart'.

 -- C Function: int _PyBytes_Resize (PyObject **bytes,
          Py_ssize_t newsize)

     A way to resize a bytes object even though it is "immutable".  Only
     use this to build up a brand new bytes object; don’t use this if
     the bytes may already be known in other parts of the code.  It is
     an error to call this function if the refcount on the input bytes
     object is not one.  Pass the address of an existing bytes object as
     an lvalue (it may be written into), and the new size desired.  On
     success, `*bytes' holds the resized bytes object and ‘0’ is
     returned; the address in `*bytes' may differ from its input value.
     If the reallocation fails, the original bytes object at `*bytes' is
     deallocated, `*bytes' is set to `NULL', a memory exception is set,
     and ‘-1’ is returned.


File: python.info,  Node: Byte Array Objects,  Next: Unicode Objects and Codecs,  Prev: Bytes Objects,  Up: Sequence Objects

7.8.3.2 Byte Array Objects
..........................

 -- C Type: PyByteArrayObject

     This subtype of *note PyObject: 9f5. represents a Python bytearray
     object.

 -- C Variable: PyTypeObject PyByteArray_Type

     This instance of *note PyTypeObject: 3bc. represents the Python
     bytearray type; it is the same object as *note bytearray: 1dc. in
     the Python layer.

* Menu:

* Type check macros:: 
* Direct API functions:: 
* Macros:: 


File: python.info,  Node: Type check macros,  Next: Direct API functions,  Up: Byte Array Objects

7.8.3.3 Type check macros
.........................

 -- C Function: int PyByteArray_Check (PyObject *o)

     Return true if the object `o' is a bytearray object or an instance
     of a subtype of the bytearray type.

 -- C Function: int PyByteArray_CheckExact (PyObject *o)

     Return true if the object `o' is a bytearray object, but not an
     instance of a subtype of the bytearray type.


File: python.info,  Node: Direct API functions,  Next: Macros,  Prev: Type check macros,  Up: Byte Array Objects

7.8.3.4 Direct API functions
............................

 -- C Function: PyObject* PyByteArray_FromObject (PyObject *o)

     Return a new bytearray object from any object, `o', that implements
     the *note buffer protocol: ff5.

 -- C Function: PyObject* PyByteArray_FromStringAndSize (const
          char *string, Py_ssize_t len)

     Create a new bytearray object from `string' and its length, `len'.
     On failure, `NULL' is returned.

 -- C Function: PyObject* PyByteArray_Concat (PyObject *a, PyObject *b)

     Concat bytearrays `a' and `b' and return a new bytearray with the
     result.

 -- C Function: Py_ssize_t PyByteArray_Size (PyObject *bytearray)

     Return the size of `bytearray' after checking for a `NULL' pointer.

 -- C Function: char* PyByteArray_AsString (PyObject *bytearray)

     Return the contents of `bytearray' as a char array after checking
     for a `NULL' pointer.  The returned array always has an extra null
     byte appended.

 -- C Function: int PyByteArray_Resize (PyObject *bytearray,
          Py_ssize_t len)

     Resize the internal buffer of `bytearray' to `len'.


File: python.info,  Node: Macros,  Prev: Direct API functions,  Up: Byte Array Objects

7.8.3.5 Macros
..............

These macros trade safety for speed and they don’t check pointers.

 -- C Function: char* PyByteArray_AS_STRING (PyObject *bytearray)

     Macro version of *note PyByteArray_AsString(): 35cb.

 -- C Function: Py_ssize_t PyByteArray_GET_SIZE (PyObject *bytearray)

     Macro version of *note PyByteArray_Size(): 35ca.


File: python.info,  Node: Unicode Objects and Codecs,  Next: Tuple Objects,  Prev: Byte Array Objects,  Up: Sequence Objects

7.8.3.6 Unicode Objects and Codecs
..................................

* Menu:

* Unicode Objects:: 
* Built-in Codecs:: 
* Methods and Slot Functions:: 


File: python.info,  Node: Unicode Objects,  Next: Built-in Codecs,  Up: Unicode Objects and Codecs

7.8.3.7 Unicode Objects
.......................

Since the implementation of PEP 393(1) in Python 3.3, Unicode objects
internally use a variety of representations, in order to allow handling
the complete range of Unicode characters while staying memory efficient.
There are special cases for strings where all code points are below 128,
256, or 65536; otherwise, code points must be below 1114112 (which is
the full Unicode range).

*note Py_UNICODE*: 72f. and UTF-8 representations are created on demand
and cached in the Unicode object.  The *note Py_UNICODE*: 72f.
representation is deprecated and inefficient; it should be avoided in
performance- or memory-sensitive situations.

Due to the transition between the old APIs and the new APIs, unicode
objects can internally be in two states depending on how they were
created:

   * "canonical" unicode objects are all objects created by a
     non-deprecated unicode API. They use the most efficient
     representation allowed by the implementation.

   * "legacy" unicode objects have been created through one of the
     deprecated APIs (typically *note PyUnicode_FromUnicode(): 730.) and
     only bear the *note Py_UNICODE*: 72f. representation; you will have
     to call *note PyUnicode_READY(): 713. on them before calling any
     other API.

* Menu:

* Unicode Type:: 
* Unicode Character Properties:: 
* Creating and accessing Unicode strings:: 
* Deprecated Py_UNICODE APIs:: 
* Locale Encoding:: 
* File System Encoding:: 
* wchar_t Support:: 
* UCS4 Support:: 

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0393


File: python.info,  Node: Unicode Type,  Next: Unicode Character Properties,  Up: Unicode Objects

7.8.3.8 Unicode Type
....................

These are the basic Unicode object types used for the Unicode
implementation in Python:

 -- C Type: Py_UCS4
 -- C Type: Py_UCS2
 -- C Type: Py_UCS1

     These types are typedefs for unsigned integer types wide enough to
     contain characters of 32 bits, 16 bits and 8 bits, respectively.
     When dealing with single Unicode characters, use *note Py_UCS4:
     710.

     New in version 3.3.

 -- C Type: Py_UNICODE

     This is a typedef of ‘wchar_t’, which is a 16-bit type or 32-bit
     type depending on the platform.

     Changed in version 3.3: In previous versions, this was a 16-bit
     type or a 32-bit type depending on whether you selected a "narrow"
     or "wide" Unicode version of Python at build time.

 -- C Type: PyASCIIObject
 -- C Type: PyCompactUnicodeObject
 -- C Type: PyUnicodeObject

     These subtypes of *note PyObject: 9f5. represent a Python Unicode
     object.  In almost all cases, they shouldn’t be used directly,
     since all API functions that deal with Unicode objects take and
     return *note PyObject: 9f5. pointers.

     New in version 3.3.

 -- C Variable: PyTypeObject PyUnicode_Type

     This instance of *note PyTypeObject: 3bc. represents the Python
     Unicode type.  It is exposed to Python code as ‘str’.

The following APIs are really C macros and can be used to do fast checks
and to access internal read-only data of Unicode objects:

 -- C Function: int PyUnicode_Check (PyObject *o)

     Return true if the object `o' is a Unicode object or an instance of
     a Unicode subtype.

 -- C Function: int PyUnicode_CheckExact (PyObject *o)

     Return true if the object `o' is a Unicode object, but not an
     instance of a subtype.

 -- C Function: int PyUnicode_READY (PyObject *o)

     Ensure the string object `o' is in the "canonical" representation.
     This is required before using any of the access macros described
     below.

     Returns 0 on success and -1 with an exception set on failure, which
     in particular happens if memory allocation fails.

     New in version 3.3.

 -- C Function: Py_ssize_t PyUnicode_GET_LENGTH (PyObject *o)

     Return the length of the Unicode string, in code points.  `o' has
     to be a Unicode object in the "canonical" representation (not
     checked).

     New in version 3.3.

 -- C Function: Py_UCS1* PyUnicode_1BYTE_DATA (PyObject *o)
 -- C Function: Py_UCS2* PyUnicode_2BYTE_DATA (PyObject *o)
 -- C Function: Py_UCS4* PyUnicode_4BYTE_DATA (PyObject *o)

     Return a pointer to the canonical representation cast to UCS1, UCS2
     or UCS4 integer types for direct character access.  No checks are
     performed if the canonical representation has the correct character
     size; use *note PyUnicode_KIND(): 71b. to select the right macro.
     Make sure *note PyUnicode_READY(): 713. has been called before
     accessing this.

     New in version 3.3.

 -- C Macro: PyUnicode_WCHAR_KIND
 -- C Macro: PyUnicode_1BYTE_KIND
 -- C Macro: PyUnicode_2BYTE_KIND
 -- C Macro: PyUnicode_4BYTE_KIND

     Return values of the *note PyUnicode_KIND(): 71b. macro.

     New in version 3.3.

 -- C Function: int PyUnicode_KIND (PyObject *o)

     Return one of the PyUnicode kind constants (see above) that
     indicate how many bytes per character this Unicode object uses to
     store its data.  `o' has to be a Unicode object in the "canonical"
     representation (not checked).

     New in version 3.3.

 -- C Function: void* PyUnicode_DATA (PyObject *o)

     Return a void pointer to the raw unicode buffer.  `o' has to be a
     Unicode object in the "canonical" representation (not checked).

     New in version 3.3.

 -- C Function: void PyUnicode_WRITE (int kind, void *data,
          Py_ssize_t index, Py_UCS4 value)

     Write into a canonical representation `data' (as obtained with
     *note PyUnicode_DATA(): 717.).  This macro does not do any sanity
     checks and is intended for usage in loops.  The caller should cache
     the `kind' value and `data' pointer as obtained from other macro
     calls.  `index' is the index in the string (starts at 0) and
     `value' is the new code point value which should be written to that
     location.

     New in version 3.3.

 -- C Function: Py_UCS4 PyUnicode_READ (int kind, void *data,
          Py_ssize_t index)

     Read a code point from a canonical representation `data' (as
     obtained with *note PyUnicode_DATA(): 717.).  No checks or ready
     calls are performed.

     New in version 3.3.

 -- C Function: Py_UCS4 PyUnicode_READ_CHAR (PyObject *o,
          Py_ssize_t index)

     Read a character from a Unicode object `o', which must be in the
     "canonical" representation.  This is less efficient than *note
     PyUnicode_READ(): 720. if you do multiple consecutive reads.

     New in version 3.3.

 -- C Function: PyUnicode_MAX_CHAR_VALUE (PyObject *o)

     Return the maximum code point that is suitable for creating another
     string based on `o', which must be in the "canonical"
     representation.  This is always an approximation but more efficient
     than iterating over the string.

     New in version 3.3.

 -- C Function: int PyUnicode_ClearFreeList ()

     Clear the free list.  Return the total number of freed items.

 -- C Function: Py_ssize_t PyUnicode_GET_SIZE (PyObject *o)

     Return the size of the deprecated *note Py_UNICODE: 72f.
     representation, in code units (this includes surrogate pairs as 2
     units).  `o' has to be a Unicode object (not checked).

     Deprecated since version 3.3, will be removed in version 4.0: Part
     of the old-style Unicode API, please migrate to using *note
     PyUnicode_GET_LENGTH(): 709.

 -- C Function: Py_ssize_t PyUnicode_GET_DATA_SIZE (PyObject *o)

     Return the size of the deprecated *note Py_UNICODE: 72f.
     representation in bytes.  `o' has to be a Unicode object (not
     checked).

     Deprecated since version 3.3, will be removed in version 4.0: Part
     of the old-style Unicode API, please migrate to using *note
     PyUnicode_GET_LENGTH(): 709.

 -- C Function: Py_UNICODE* PyUnicode_AS_UNICODE (PyObject *o)
 -- C Function: const char* PyUnicode_AS_DATA (PyObject *o)

     Return a pointer to a *note Py_UNICODE: 72f. representation of the
     object.  The returned buffer is always terminated with an extra
     null code point.  It may also contain embedded null code points,
     which would cause the string to be truncated when used in most C
     functions.  The ‘AS_DATA’ form casts the pointer to ‘const char *’.
     The `o' argument has to be a Unicode object (not checked).

     Changed in version 3.3: This macro is now inefficient – because in
     many cases the *note Py_UNICODE: 72f. representation does not exist
     and needs to be created – and can fail (return `NULL' with an
     exception set).  Try to port the code to use the new
     ‘PyUnicode_nBYTE_DATA()’ macros or use *note PyUnicode_WRITE():
     722. or *note PyUnicode_READ(): 720.

     Deprecated since version 3.3, will be removed in version 4.0: Part
     of the old-style Unicode API, please migrate to using the
     ‘PyUnicode_nBYTE_DATA()’ family of macros.


File: python.info,  Node: Unicode Character Properties,  Next: Creating and accessing Unicode strings,  Prev: Unicode Type,  Up: Unicode Objects

7.8.3.9 Unicode Character Properties
....................................

Unicode provides many different character properties.  The most often
needed ones are available through these macros which are mapped to C
functions depending on the Python configuration.

 -- C Function: int Py_UNICODE_ISSPACE (Py_UNICODE ch)

     Return 1 or 0 depending on whether `ch' is a whitespace character.

 -- C Function: int Py_UNICODE_ISLOWER (Py_UNICODE ch)

     Return 1 or 0 depending on whether `ch' is a lowercase character.

 -- C Function: int Py_UNICODE_ISUPPER (Py_UNICODE ch)

     Return 1 or 0 depending on whether `ch' is an uppercase character.

 -- C Function: int Py_UNICODE_ISTITLE (Py_UNICODE ch)

     Return 1 or 0 depending on whether `ch' is a titlecase character.

 -- C Function: int Py_UNICODE_ISLINEBREAK (Py_UNICODE ch)

     Return 1 or 0 depending on whether `ch' is a linebreak character.

 -- C Function: int Py_UNICODE_ISDECIMAL (Py_UNICODE ch)

     Return 1 or 0 depending on whether `ch' is a decimal character.

 -- C Function: int Py_UNICODE_ISDIGIT (Py_UNICODE ch)

     Return 1 or 0 depending on whether `ch' is a digit character.

 -- C Function: int Py_UNICODE_ISNUMERIC (Py_UNICODE ch)

     Return 1 or 0 depending on whether `ch' is a numeric character.

 -- C Function: int Py_UNICODE_ISALPHA (Py_UNICODE ch)

     Return 1 or 0 depending on whether `ch' is an alphabetic character.

 -- C Function: int Py_UNICODE_ISALNUM (Py_UNICODE ch)

     Return 1 or 0 depending on whether `ch' is an alphanumeric
     character.

 -- C Function: int Py_UNICODE_ISPRINTABLE (Py_UNICODE ch)

     Return 1 or 0 depending on whether `ch' is a printable character.
     Nonprintable characters are those characters defined in the Unicode
     character database as "Other" or "Separator", excepting the ASCII
     space (0x20) which is considered printable.  (Note that printable
     characters in this context are those which should not be escaped
     when *note repr(): 3bb. is invoked on a string.  It has no bearing
     on the handling of strings written to *note sys.stdout: 1ba. or
     *note sys.stderr: 270.)

These APIs can be used for fast direct character conversions:

 -- C Function: Py_UNICODE Py_UNICODE_TOLOWER (Py_UNICODE ch)

     Return the character `ch' converted to lower case.

     Deprecated since version 3.3: This function uses simple case
     mappings.

 -- C Function: Py_UNICODE Py_UNICODE_TOUPPER (Py_UNICODE ch)

     Return the character `ch' converted to upper case.

     Deprecated since version 3.3: This function uses simple case
     mappings.

 -- C Function: Py_UNICODE Py_UNICODE_TOTITLE (Py_UNICODE ch)

     Return the character `ch' converted to title case.

     Deprecated since version 3.3: This function uses simple case
     mappings.

 -- C Function: int Py_UNICODE_TODECIMAL (Py_UNICODE ch)

     Return the character `ch' converted to a decimal positive integer.
     Return ‘-1’ if this is not possible.  This macro does not raise
     exceptions.

 -- C Function: int Py_UNICODE_TODIGIT (Py_UNICODE ch)

     Return the character `ch' converted to a single digit integer.
     Return ‘-1’ if this is not possible.  This macro does not raise
     exceptions.

 -- C Function: double Py_UNICODE_TONUMERIC (Py_UNICODE ch)

     Return the character `ch' converted to a double.  Return ‘-1.0’ if
     this is not possible.  This macro does not raise exceptions.

These APIs can be used to work with surrogates:

 -- C Macro: Py_UNICODE_IS_SURROGATE (ch)

     Check if `ch' is a surrogate (‘0xD800 <= ch <= 0xDFFF’).

 -- C Macro: Py_UNICODE_IS_HIGH_SURROGATE (ch)

     Check if `ch' is a high surrogate (‘0xD800 <= ch <= 0xDBFF’).

 -- C Macro: Py_UNICODE_IS_LOW_SURROGATE (ch)

     Check if `ch' is a low surrogate (‘0xDC00 <= ch <= 0xDFFF’).

 -- C Macro: Py_UNICODE_JOIN_SURROGATES (high, low)

     Join two surrogate characters and return a single Py_UCS4 value.
     `high' and `low' are respectively the leading and trailing
     surrogates in a surrogate pair.


File: python.info,  Node: Creating and accessing Unicode strings,  Next: Deprecated Py_UNICODE APIs,  Prev: Unicode Character Properties,  Up: Unicode Objects

7.8.3.10 Creating and accessing Unicode strings
...............................................

To create Unicode objects and access their basic sequence properties,
use these APIs:

 -- C Function: PyObject* PyUnicode_New (Py_ssize_t size,
          Py_UCS4 maxchar)

     Create a new Unicode object.  `maxchar' should be the true maximum
     code point to be placed in the string.  As an approximation, it can
     be rounded up to the nearest value in the sequence 127, 255, 65535,
     1114111.

     This is the recommended way to allocate a new Unicode object.
     Objects created using this function are not resizable.

     New in version 3.3.

 -- C Function: PyObject* PyUnicode_FromKindAndData (int kind, const
          void *buffer, Py_ssize_t size)

     Create a new Unicode object with the given `kind' (possible values
     are *note PyUnicode_1BYTE_KIND: 71d. etc., as returned by *note
     PyUnicode_KIND(): 71b.).  The `buffer' must point to an array of
     `size' units of 1, 2 or 4 bytes per character, as given by the
     kind.

     New in version 3.3.

 -- C Function: PyObject* PyUnicode_FromStringAndSize (const char *u,
          Py_ssize_t size)

     Create a Unicode object from the char buffer `u'.  The bytes will
     be interpreted as being UTF-8 encoded.  The buffer is copied into
     the new object.  If the buffer is not `NULL', the return value
     might be a shared object, i.e.  modification of the data is not
     allowed.

     If `u' is `NULL', this function behaves like *note
     PyUnicode_FromUnicode(): 730. with the buffer set to `NULL'. This
     usage is deprecated in favor of *note PyUnicode_New(): 70a.

 -- C Function: PyObject *PyUnicode_FromString (const char *u)

     Create a Unicode object from a UTF-8 encoded null-terminated char
     buffer `u'.

 -- C Function: PyObject* PyUnicode_FromFormat (const char *format, ...)

     Take a C ‘printf()’-style `format' string and a variable number of
     arguments, calculate the size of the resulting Python unicode
     string and return a string with the values formatted into it.  The
     variable arguments must be C types and must correspond exactly to
     the format characters in the `format' ASCII-encoded string.  The
     following format characters are allowed:

     Format Characters       Type                      Comment
                                                       
     ---------------------------------------------------------------------------------------
                                                       
     ‘%%’                    `n/a'                     The literal % character.
                                                       
                                                       
     ‘%c’                    int                       A single character, represented as
                                                       a C int.
                                                       
                                                       
     ‘%d’                    int                       Exactly equivalent to
                                                       ‘printf("%d")’.
                                                       
                                                       
     ‘%u’                    unsigned int              Exactly equivalent to
                                                       ‘printf("%u")’.
                                                       
                                                       
     ‘%ld’                   long                      Exactly equivalent to
                                                       ‘printf("%ld")’.
                                                       
                                                       
     ‘%li’                   long                      Exactly equivalent to
                                                       ‘printf("%li")’.
                                                       
                                                       
     ‘%lu’                   unsigned long             Exactly equivalent to
                                                       ‘printf("%lu")’.
                                                       
                                                       
     ‘%lld’                  long long                 Exactly equivalent to
                                                       ‘printf("%lld")’.
                                                       
                                                       
     ‘%lli’                  long long                 Exactly equivalent to
                                                       ‘printf("%lli")’.
                                                       
                                                       
     ‘%llu’                  unsigned long long        Exactly equivalent to
                                                       ‘printf("%llu")’.
                                                       
                                                       
     ‘%zd’                   Py_ssize_t                Exactly equivalent to
                                                       ‘printf("%zd")’.
                                                       
                                                       
     ‘%zi’                   Py_ssize_t                Exactly equivalent to
                                                       ‘printf("%zi")’.
                                                       
                                                       
     ‘%zu’                   size_t                    Exactly equivalent to
                                                       ‘printf("%zu")’.
                                                       
                                                       
     ‘%i’                    int                       Exactly equivalent to
                                                       ‘printf("%i")’.
                                                       
                                                       
     ‘%x’                    int                       Exactly equivalent to
                                                       ‘printf("%x")’.
                                                       
                                                       
     ‘%s’                    char*                     A null-terminated C character
                                                       array.
                                                       
                                                       
     ‘%p’                    void*                     The hex representation of a C
                                                       pointer.  Mostly equivalent to
                                                       ‘printf("%p")’ except that it is
                                                       guaranteed to start with the
                                                       literal ‘0x’ regardless of what
                                                       the platform’s ‘printf’ yields.
                                                       
                                                       
     ‘%A’                    PyObject*                 The result of calling
                                                       *note ascii(): 9c3.
                                                       
                                                       
     ‘%U’                    PyObject*                 A unicode object.
                                                       
                                                       
     ‘%V’                    PyObject*, char *         A unicode object (which may be
                                                       `NULL') and a null-terminated C
                                                       character array as a second
                                                       parameter (which will be used, if
                                                       the first parameter is `NULL').
                                                       
                                                       
     ‘%S’                    PyObject*                 The result of calling
                                                       *note PyObject_Str(): 586.
                                                       
                                                       
     ‘%R’                    PyObject*                 The result of calling
                                                       *note PyObject_Repr(): 585.
                                                       

     An unrecognized format character causes all the rest of the format
     string to be copied as-is to the result string, and any extra
     arguments discarded.

          Note: The ‘"%lld"’ and ‘"%llu"’ format specifiers are only
          available when ‘HAVE_LONG_LONG’ is defined.

          Note: The width formatter unit is number of characters rather
          than bytes.  The precision formatter unit is number of bytes
          for ‘"%s"’ and ‘"%V"’ (if the ‘PyObject*’ argument is NULL),
          and a number of characters for ‘"%A"’, ‘"%U"’, ‘"%S"’, ‘"%R"’
          and ‘"%V"’ (if the ‘PyObject*’ argument is not NULL).

     Changed in version 3.2: Support for ‘"%lld"’ and ‘"%llu"’ added.

     Changed in version 3.3: Support for ‘"%li"’, ‘"%lli"’ and ‘"%zi"’
     added.

     Changed in version 3.4: Support width and precision formatter for
     ‘"%s"’, ‘"%A"’, ‘"%U"’, ‘"%V"’, ‘"%S"’, ‘"%R"’ added.

 -- C Function: PyObject* PyUnicode_FromFormatV (const char *format,
          va_list vargs)

     Identical to *note PyUnicode_FromFormat(): 3ba. except that it
     takes exactly two arguments.

 -- C Function: PyObject* PyUnicode_FromEncodedObject (PyObject *obj,
          const char *encoding, const char *errors)
     `Return value: New reference.'  Decode an encoded object `obj' to a
     Unicode object.

     *note bytes: 1db, *note bytearray: 1dc. and other *note bytes-like
     objects: 36b. are decoded according to the given `encoding' and
     using the error handling defined by `errors'.  Both can be `NULL'
     to have the interface use the default values (see *note Built-in
     Codecs: 35f2. for details).

     All other objects, including Unicode objects, cause a *note
     TypeError: 562. to be set.

     The API returns `NULL' if there was an error.  The caller is
     responsible for decref’ing the returned objects.

 -- C Function: Py_ssize_t PyUnicode_GetLength (PyObject *unicode)

     Return the length of the Unicode object, in code points.

     New in version 3.3.

 -- C Function: int PyUnicode_CopyCharacters (PyObject *to,
          Py_ssize_t to_start, PyObject *from, Py_ssize_t from_start,
          Py_ssize_t how_many)

     Copy characters from one Unicode object into another.  This
     function performs character conversion when necessary and falls
     back to ‘memcpy()’ if possible.  Returns ‘-1’ and sets an exception
     on error, otherwise returns ‘0’.

     New in version 3.3.

 -- C Function: Py_ssize_t PyUnicode_Fill (PyObject *unicode,
          Py_ssize_t start, Py_ssize_t length, Py_UCS4 fill_char)

     Fill a string with a character: write `fill_char' into
     ‘unicode[start:start+length]’.

     Fail if `fill_char' is bigger than the string maximum character, or
     if the string has more than 1 reference.

     Return the number of written character, or return ‘-1’ and raise an
     exception on error.

     New in version 3.3.

 -- C Function: int PyUnicode_WriteChar (PyObject *unicode,
          Py_ssize_t index, Py_UCS4 character)

     Write a character to a string.  The string must have been created
     through *note PyUnicode_New(): 70a.  Since Unicode strings are
     supposed to be immutable, the string must not be shared, or have
     been hashed yet.

     This function checks that `unicode' is a Unicode object, that the
     index is not out of bounds, and that the object can be modified
     safely (i.e.  that it its reference count is one).

     New in version 3.3.

 -- C Function: Py_UCS4 PyUnicode_ReadChar (PyObject *unicode,
          Py_ssize_t index)

     Read a character from a string.  This function checks that
     `unicode' is a Unicode object and the index is not out of bounds,
     in contrast to the macro version *note PyUnicode_READ_CHAR(): 721.

     New in version 3.3.

 -- C Function: PyObject* PyUnicode_Substring (PyObject *str,
          Py_ssize_t start, Py_ssize_t end)

     Return a substring of `str', from character index `start'
     (included) to character index `end' (excluded).  Negative indices
     are not supported.

     New in version 3.3.

 -- C Function: Py_UCS4* PyUnicode_AsUCS4 (PyObject *u, Py_UCS4 *buffer,
          Py_ssize_t buflen, int copy_null)

     Copy the string `u' into a UCS4 buffer, including a null character,
     if `copy_null' is set.  Returns `NULL' and sets an exception on
     error (in particular, a *note ValueError: 19c. if `buflen' is
     smaller than the length of `u').  `buffer' is returned on success.

     New in version 3.3.

 -- C Function: Py_UCS4* PyUnicode_AsUCS4Copy (PyObject *u)

     Copy the string `u' into a new UCS4 buffer that is allocated using
     *note PyMem_Malloc(): 152.  If this fails, `NULL' is returned with
     a *note MemoryError: 10b9. set.  The returned buffer always has an
     extra null code point appended.

     New in version 3.3.


File: python.info,  Node: Deprecated Py_UNICODE APIs,  Next: Locale Encoding,  Prev: Creating and accessing Unicode strings,  Up: Unicode Objects

7.8.3.11 Deprecated Py_UNICODE APIs
...................................

Deprecated since version 3.3, will be removed in version 4.0.

These API functions are deprecated with the implementation of PEP
393(1).  Extension modules can continue using them, as they will not be
removed in Python 3.x, but need to be aware that their use can now cause
performance and memory hits.

 -- C Function: PyObject* PyUnicode_FromUnicode (const Py_UNICODE *u,
          Py_ssize_t size)
     `Return value: New reference.'  Create a Unicode object from the
     Py_UNICODE buffer `u' of the given size.  `u' may be `NULL' which
     causes the contents to be undefined.  It is the user’s
     responsibility to fill in the needed data.  The buffer is copied
     into the new object.

     If the buffer is not `NULL', the return value might be a shared
     object.  Therefore, modification of the resulting Unicode object is
     only allowed when `u' is `NULL'.

     If the buffer is `NULL', *note PyUnicode_READY(): 713. must be
     called once the string content has been filled before using any of
     the access macros such as *note PyUnicode_KIND(): 71b.

     Please migrate to using *note PyUnicode_FromKindAndData(): 714. or
     *note PyUnicode_New(): 70a.

 -- C Function: Py_UNICODE* PyUnicode_AsUnicode (PyObject *unicode)

     Return a read-only pointer to the Unicode object’s internal *note
     Py_UNICODE: 72f. buffer, or `NULL' on error.  This will create the
     *note Py_UNICODE*: 72f. representation of the object if it is not
     yet available.  The buffer is always terminated with an extra null
     code point.  Note that the resulting *note Py_UNICODE: 72f. string
     may also contain embedded null code points, which would cause the
     string to be truncated when used in most C functions.

     Please migrate to using *note PyUnicode_AsUCS4(): 715, *note
     PyUnicode_Substring(): 70b, *note PyUnicode_ReadChar(): 70c. or
     similar new APIs.

 -- C Function: PyObject* PyUnicode_TransformDecimalToASCII
          (Py_UNICODE *s, Py_ssize_t size)

     Create a Unicode object by replacing all decimal digits in *note
     Py_UNICODE: 72f. buffer of the given `size' by ASCII digits 0–9
     according to their decimal value.  Return `NULL' if an exception
     occurs.

 -- C Function: Py_UNICODE* PyUnicode_AsUnicodeAndSize
          (PyObject *unicode, Py_ssize_t *size)

     Like *note PyUnicode_AsUnicode(): 733, but also saves the *note
     Py_UNICODE(): 72f. array length (excluding the extra null
     terminator) in `size'.  Note that the resulting *note Py_UNICODE*:
     72f. string may contain embedded null code points, which would
     cause the string to be truncated when used in most C functions.

     New in version 3.3.

 -- C Function: Py_UNICODE* PyUnicode_AsUnicodeCopy (PyObject *unicode)

     Create a copy of a Unicode string ending with a null code point.
     Return `NULL' and raise a *note MemoryError: 10b9. exception on
     memory allocation failure, otherwise return a new allocated buffer
     (use *note PyMem_Free(): a26. to free the buffer).  Note that the
     resulting *note Py_UNICODE*: 72f. string may contain embedded null
     code points, which would cause the string to be truncated when used
     in most C functions.

     New in version 3.2.

     Please migrate to using *note PyUnicode_AsUCS4Copy(): 716. or
     similar new APIs.

 -- C Function: Py_ssize_t PyUnicode_GetSize (PyObject *unicode)

     Return the size of the deprecated *note Py_UNICODE: 72f.
     representation, in code units (this includes surrogate pairs as 2
     units).

     Please migrate to using *note PyUnicode_GetLength(): 708.

 -- C Function: PyObject* PyUnicode_FromObject (PyObject *obj)
     `Return value: New reference.'  Copy an instance of a Unicode
     subtype to a new true Unicode object if necessary.  If `obj' is
     already a true Unicode object (not a subtype), return the reference
     with incremented refcount.

     Objects other than Unicode or its subtypes will cause a *note
     TypeError: 562.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0393


File: python.info,  Node: Locale Encoding,  Next: File System Encoding,  Prev: Deprecated Py_UNICODE APIs,  Up: Unicode Objects

7.8.3.12 Locale Encoding
........................

The current locale encoding can be used to decode text from the
operating system.

 -- C Function: PyObject* PyUnicode_DecodeLocaleAndSize (const
          char *str, Py_ssize_t len, const char *errors)

     Decode a string from the current locale encoding.  The supported
     error handlers are ‘"strict"’ and ‘"surrogateescape"’ ( PEP
     383(1)).  The decoder uses ‘"strict"’ error handler if `errors' is
     ‘NULL’.  `str' must end with a null character but cannot contain
     embedded null characters.

     Use *note PyUnicode_DecodeFSDefaultAndSize(): 3439. to decode a
     string from ‘Py_FileSystemDefaultEncoding’ (the locale encoding
     read at Python startup).

     See also
     ........

     The *note Py_DecodeLocale(): 381. function.

     New in version 3.3.

 -- C Function: PyObject* PyUnicode_DecodeLocale (const char *str, const
          char *errors)

     Similar to *note PyUnicode_DecodeLocaleAndSize(): 343a, but compute
     the string length using ‘strlen()’.

     New in version 3.3.

 -- C Function: PyObject* PyUnicode_EncodeLocale (PyObject *unicode,
          const char *errors)

     Encode a Unicode object to the current locale encoding.  The
     supported error handlers are ‘"strict"’ and ‘"surrogateescape"’ (
     PEP 383(2)).  The encoder uses ‘"strict"’ error handler if `errors'
     is ‘NULL’.  Return a *note bytes: 1db. object.  `str' cannot
     contain embedded null characters.

     Use *note PyUnicode_EncodeFSDefault(): 343b. to encode a string to
     ‘Py_FileSystemDefaultEncoding’ (the locale encoding read at Python
     startup).

     See also
     ........

     The *note Py_EncodeLocale(): 382. function.

     New in version 3.3.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0383

   (2) https://www.python.org/dev/peps/pep-0383


File: python.info,  Node: File System Encoding,  Next: wchar_t Support,  Prev: Locale Encoding,  Up: Unicode Objects

7.8.3.13 File System Encoding
.............................

To encode and decode file names and other environment strings,
‘Py_FileSystemEncoding’ should be used as the encoding, and
‘"surrogateescape"’ should be used as the error handler ( PEP 383(1)).
To encode file names during argument parsing, the ‘"O&"’ converter
should be used, passing *note PyUnicode_FSConverter(): 3476. as the
conversion function:

 -- C Function: int PyUnicode_FSConverter (PyObject* obj, void* result)

     ParseTuple converter: encode *note str: 25a. objects to *note
     bytes: 1db. using *note PyUnicode_EncodeFSDefault(): 343b.; *note
     bytes: 1db. objects are output as-is.  `result' must be a *note
     PyBytesObject*: 98e. which must be released when it is no longer
     used.

     New in version 3.1.

To decode file names during argument parsing, the ‘"O&"’ converter
should be used, passing *note PyUnicode_FSDecoder(): 35f8. as the
conversion function:

 -- C Function: int PyUnicode_FSDecoder (PyObject* obj, void* result)

     ParseTuple converter: decode *note bytes: 1db. objects to *note
     str: 25a. using *note PyUnicode_DecodeFSDefaultAndSize(): 3439.;
     *note str: 25a. objects are output as-is.  `result' must be a *note
     PyUnicodeObject*: 35d4. which must be released when it is no longer
     used.

     New in version 3.2.

 -- C Function: PyObject* PyUnicode_DecodeFSDefaultAndSize (const
          char *s, Py_ssize_t size)

     Decode a string using ‘Py_FileSystemDefaultEncoding’ and the
     ‘"surrogateescape"’ error handler, or ‘"strict"’ on Windows.

     If ‘Py_FileSystemDefaultEncoding’ is not set, fall back to the
     locale encoding.

     ‘Py_FileSystemDefaultEncoding’ is initialized at startup from the
     locale encoding and cannot be modified later.  If you need to
     decode a string from the current locale encoding, use *note
     PyUnicode_DecodeLocaleAndSize(): 343a.

     See also
     ........

     The *note Py_DecodeLocale(): 381. function.

     Changed in version 3.2: Use ‘"strict"’ error handler on Windows.

 -- C Function: PyObject* PyUnicode_DecodeFSDefault (const char *s)

     Decode a null-terminated string using
     ‘Py_FileSystemDefaultEncoding’ and the ‘"surrogateescape"’ error
     handler, or ‘"strict"’ on Windows.

     If ‘Py_FileSystemDefaultEncoding’ is not set, fall back to the
     locale encoding.

     Use *note PyUnicode_DecodeFSDefaultAndSize(): 3439. if you know the
     string length.

     Changed in version 3.2: Use ‘"strict"’ error handler on Windows.

 -- C Function: PyObject* PyUnicode_EncodeFSDefault (PyObject *unicode)

     Encode a Unicode object to ‘Py_FileSystemDefaultEncoding’ with the
     ‘"surrogateescape"’ error handler, or ‘"strict"’ on Windows, and
     return *note bytes: 1db.  Note that the resulting *note bytes: 1db.
     object may contain null bytes.

     If ‘Py_FileSystemDefaultEncoding’ is not set, fall back to the
     locale encoding.

     ‘Py_FileSystemDefaultEncoding’ is initialized at startup from the
     locale encoding and cannot be modified later.  If you need to
     encode a string to the current locale encoding, use *note
     PyUnicode_EncodeLocale(): 343c.

     See also
     ........

     The *note Py_EncodeLocale(): 382. function.

     New in version 3.2.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0383


File: python.info,  Node: wchar_t Support,  Next: UCS4 Support,  Prev: File System Encoding,  Up: Unicode Objects

7.8.3.14 wchar_t Support
........................

‘wchar_t’ support for platforms which support it:

 -- C Function: PyObject* PyUnicode_FromWideChar (const wchar_t *w,
          Py_ssize_t size)
     `Return value: New reference.'  Create a Unicode object from the
     ‘wchar_t’ buffer `w' of the given `size'.  Passing -1 as the `size'
     indicates that the function must itself compute the length, using
     wcslen.  Return `NULL' on failure.

 -- C Function: Py_ssize_t PyUnicode_AsWideChar
          (PyUnicodeObject *unicode, wchar_t *w, Py_ssize_t size)

     Copy the Unicode object contents into the ‘wchar_t’ buffer `w'.  At
     most `size' ‘wchar_t’ characters are copied (excluding a possibly
     trailing null termination character).  Return the number of
     ‘wchar_t’ characters copied or -1 in case of an error.  Note that
     the resulting ‘wchar_t*’ string may or may not be null-terminated.
     It is the responsibility of the caller to make sure that the
     ‘wchar_t*’ string is null-terminated in case this is required by
     the application.  Also, note that the ‘wchar_t*’ string might
     contain null characters, which would cause the string to be
     truncated when used with most C functions.

 -- C Function: wchar_t* PyUnicode_AsWideCharString (PyObject *unicode,
          Py_ssize_t *size)

     Convert the Unicode object to a wide character string.  The output
     string always ends with a null character.  If `size' is not `NULL',
     write the number of wide characters (excluding the trailing null
     termination character) into `*size'.

     Returns a buffer allocated by ‘PyMem_Alloc()’ (use *note
     PyMem_Free(): a26. to free it) on success.  On error, returns
     `NULL', `*size' is undefined and raises a *note MemoryError: 10b9.
     Note that the resulting ‘wchar_t’ string might contain null
     characters, which would cause the string to be truncated when used
     with most C functions.

     New in version 3.2.


File: python.info,  Node: UCS4 Support,  Prev: wchar_t Support,  Up: Unicode Objects

7.8.3.15 UCS4 Support
.....................

New in version 3.3.

 -- C Function: size_t Py_UCS4_strlen (const Py_UCS4 *u)
 -- C Function: Py_UCS4* Py_UCS4_strcpy (Py_UCS4 *s1, const Py_UCS4 *s2)
 -- C Function: Py_UCS4* Py_UCS4_strncpy (Py_UCS4 *s1, const
          Py_UCS4 *s2, size_t n)
 -- C Function: Py_UCS4* Py_UCS4_strcat (Py_UCS4 *s1, const Py_UCS4 *s2)
 -- C Function: int Py_UCS4_strcmp (const Py_UCS4 *s1, const
          Py_UCS4 *s2)
 -- C Function: int Py_UCS4_strncmp (const Py_UCS4 *s1, const
          Py_UCS4 *s2, size_t n)
 -- C Function: Py_UCS4* Py_UCS4_strchr (const Py_UCS4 *s, Py_UCS4 c)
 -- C Function: Py_UCS4* Py_UCS4_strrchr (const Py_UCS4 *s, Py_UCS4 c)

     These utility functions work on strings of *note Py_UCS4: 710.
     characters and otherwise behave like the C standard library
     functions with the same name.


File: python.info,  Node: Built-in Codecs,  Next: Methods and Slot Functions,  Prev: Unicode Objects,  Up: Unicode Objects and Codecs

7.8.3.16 Built-in Codecs
........................

Python provides a set of built-in codecs which are written in C for
speed.  All of these codecs are directly usable via the following
functions.

Many of the following APIs take two arguments encoding and errors, and
they have the same semantics as the ones of the built-in *note str():
25a. string object constructor.

Setting encoding to `NULL' causes the default encoding to be used which
is ASCII. The file system calls should use *note
PyUnicode_FSConverter(): 3476. for encoding file names.  This uses the
variable ‘Py_FileSystemDefaultEncoding’ internally.  This variable
should be treated as read-only: on some systems, it will be a pointer to
a static string, on others, it will change at run-time (such as when the
application invokes setlocale).

Error handling is set by errors which may also be set to `NULL' meaning
to use the default handling defined for the codec.  Default error
handling for all built-in codecs is "strict" (*note ValueError: 19c. is
raised).

The codecs all use a similar interface.  Only deviation from the
following generic ones are documented for simplicity.

* Menu:

* Generic Codecs:: 
* UTF-8 Codecs:: 
* UTF-32 Codecs:: 
* UTF-16 Codecs:: 
* UTF-7 Codecs:: 
* Unicode-Escape Codecs:: 
* Raw-Unicode-Escape Codecs:: 
* Latin-1 Codecs:: 
* ASCII Codecs:: 
* Character Map Codecs:: 
* MBCS codecs for Windows:: 
* Methods & Slots:: 


File: python.info,  Node: Generic Codecs,  Next: UTF-8 Codecs,  Up: Built-in Codecs

7.8.3.17 Generic Codecs
.......................

These are the generic codec APIs:

 -- C Function: PyObject* PyUnicode_Decode (const char *s,
          Py_ssize_t size, const char *encoding, const char *errors)
     `Return value: New reference.'  Create a Unicode object by decoding
     `size' bytes of the encoded string `s'.  `encoding' and `errors'
     have the same meaning as the parameters of the same name in the
     *note str(): 25a. built-in function.  The codec to be used is
     looked up using the Python codec registry.  Return `NULL' if an
     exception was raised by the codec.

 -- C Function: PyObject* PyUnicode_AsEncodedString (PyObject *unicode,
          const char *encoding, const char *errors)
     `Return value: New reference.'  Encode a Unicode object and return
     the result as Python bytes object.  `encoding' and `errors' have
     the same meaning as the parameters of the same name in the Unicode
     *note encode(): 89d. method.  The codec to be used is looked up
     using the Python codec registry.  Return `NULL' if an exception was
     raised by the codec.

 -- C Function: PyObject* PyUnicode_Encode (const Py_UNICODE *s,
          Py_ssize_t size, const char *encoding, const char *errors)
     `Return value: New reference.'  Encode the *note Py_UNICODE: 72f.
     buffer `s' of the given `size' and return a Python bytes object.
     `encoding' and `errors' have the same meaning as the parameters of
     the same name in the Unicode *note encode(): 89d. method.  The
     codec to be used is looked up using the Python codec registry.
     Return `NULL' if an exception was raised by the codec.

     Deprecated since version 3.3, will be removed in version 4.0: Part
     of the old-style *note Py_UNICODE: 72f. API; please migrate to
     using *note PyUnicode_AsEncodedString(): 3608.


File: python.info,  Node: UTF-8 Codecs,  Next: UTF-32 Codecs,  Prev: Generic Codecs,  Up: Built-in Codecs

7.8.3.18 UTF-8 Codecs
.....................

These are the UTF-8 codec APIs:

 -- C Function: PyObject* PyUnicode_DecodeUTF8 (const char *s,
          Py_ssize_t size, const char *errors)
     `Return value: New reference.'  Create a Unicode object by decoding
     `size' bytes of the UTF-8 encoded string `s'.  Return `NULL' if an
     exception was raised by the codec.

 -- C Function: PyObject* PyUnicode_DecodeUTF8Stateful (const char *s,
          Py_ssize_t size, const char *errors, Py_ssize_t *consumed)
     `Return value: New reference.'  If `consumed' is `NULL', behave
     like *note PyUnicode_DecodeUTF8(): 360a.  If `consumed' is not
     `NULL', trailing incomplete UTF-8 byte sequences will not be
     treated as an error.  Those bytes will not be decoded and the
     number of bytes that have been decoded will be stored in
     `consumed'.

 -- C Function: PyObject* PyUnicode_AsUTF8String (PyObject *unicode)
     `Return value: New reference.'  Encode a Unicode object using UTF-8
     and return the result as Python bytes object.  Error handling is
     "strict".  Return `NULL' if an exception was raised by the codec.

 -- C Function: char* PyUnicode_AsUTF8AndSize (PyObject *unicode,
          Py_ssize_t *size)

     Return a pointer to the UTF-8 encoding of the Unicode object, and
     store the size of the encoded representation (in bytes) in `size'.
     The `size' argument can be `NULL'; in this case no size will be
     stored.  The returned buffer always has an extra null byte appended
     (not included in `size'), regardless of whether there are any other
     null code points.

     In the case of an error, `NULL' is returned with an exception set
     and no `size' is stored.

     This caches the UTF-8 representation of the string in the Unicode
     object, and subsequent calls will return a pointer to the same
     buffer.  The caller is not responsible for deallocating the buffer.

     New in version 3.3.

 -- C Function: char* PyUnicode_AsUTF8 (PyObject *unicode)

     As *note PyUnicode_AsUTF8AndSize(): 360c, but does not store the
     size.

     New in version 3.3.

 -- C Function: PyObject* PyUnicode_EncodeUTF8 (const Py_UNICODE *s,
          Py_ssize_t size, const char *errors)
     `Return value: New reference.'  Encode the *note Py_UNICODE: 72f.
     buffer `s' of the given `size' using UTF-8 and return a Python
     bytes object.  Return `NULL' if an exception was raised by the
     codec.

     Deprecated since version 3.3, will be removed in version 4.0: Part
     of the old-style *note Py_UNICODE: 72f. API; please migrate to
     using *note PyUnicode_AsUTF8String(): 742. or *note
     PyUnicode_AsUTF8AndSize(): 360c.


File: python.info,  Node: UTF-32 Codecs,  Next: UTF-16 Codecs,  Prev: UTF-8 Codecs,  Up: Built-in Codecs

7.8.3.19 UTF-32 Codecs
......................

These are the UTF-32 codec APIs:

 -- C Function: PyObject* PyUnicode_DecodeUTF32 (const char *s,
          Py_ssize_t size, const char *errors, int *byteorder)

     Decode `size' bytes from a UTF-32 encoded buffer string and return
     the corresponding Unicode object.  `errors' (if non-`NULL') defines
     the error handling.  It defaults to "strict".

     If `byteorder' is non-`NULL', the decoder starts decoding using the
     given byte order:

          *byteorder == -1: little endian
          *byteorder == 0:  native order
          *byteorder == 1:  big endian

     If ‘*byteorder’ is zero, and the first four bytes of the input data
     are a byte order mark (BOM), the decoder switches to this byte
     order and the BOM is not copied into the resulting Unicode string.
     If ‘*byteorder’ is ‘-1’ or ‘1’, any byte order mark is copied to
     the output.

     After completion, `*byteorder' is set to the current byte order at
     the end of input data.

     If `byteorder' is `NULL', the codec starts in native order mode.

     Return `NULL' if an exception was raised by the codec.

 -- C Function: PyObject* PyUnicode_DecodeUTF32Stateful (const char *s,
          Py_ssize_t size, const char *errors, int *byteorder,
          Py_ssize_t *consumed)

     If `consumed' is `NULL', behave like *note PyUnicode_DecodeUTF32():
     360e.  If `consumed' is not `NULL', *note
     PyUnicode_DecodeUTF32Stateful(): 360f. will not treat trailing
     incomplete UTF-32 byte sequences (such as a number of bytes not
     divisible by four) as an error.  Those bytes will not be decoded
     and the number of bytes that have been decoded will be stored in
     `consumed'.

 -- C Function: PyObject* PyUnicode_AsUTF32String (PyObject *unicode)

     Return a Python byte string using the UTF-32 encoding in native
     byte order.  The string always starts with a BOM mark.  Error
     handling is "strict".  Return `NULL' if an exception was raised by
     the codec.

 -- C Function: PyObject* PyUnicode_EncodeUTF32 (const Py_UNICODE *s,
          Py_ssize_t size, const char *errors, int byteorder)

     Return a Python bytes object holding the UTF-32 encoded value of
     the Unicode data in `s'.  Output is written according to the
     following byte order:

          byteorder == -1: little endian
          byteorder == 0:  native byte order (writes a BOM mark)
          byteorder == 1:  big endian

     If byteorder is ‘0’, the output string will always start with the
     Unicode BOM mark (U+FEFF). In the other two modes, no BOM mark is
     prepended.

     If `Py_UNICODE_WIDE' is not defined, surrogate pairs will be output
     as a single code point.

     Return `NULL' if an exception was raised by the codec.

     Deprecated since version 3.3, will be removed in version 4.0: Part
     of the old-style *note Py_UNICODE: 72f. API; please migrate to
     using *note PyUnicode_AsUTF32String(): 3610.


File: python.info,  Node: UTF-16 Codecs,  Next: UTF-7 Codecs,  Prev: UTF-32 Codecs,  Up: Built-in Codecs

7.8.3.20 UTF-16 Codecs
......................

These are the UTF-16 codec APIs:

 -- C Function: PyObject* PyUnicode_DecodeUTF16 (const char *s,
          Py_ssize_t size, const char *errors, int *byteorder)
     `Return value: New reference.'  Decode `size' bytes from a UTF-16
     encoded buffer string and return the corresponding Unicode object.
     `errors' (if non-`NULL') defines the error handling.  It defaults
     to "strict".

     If `byteorder' is non-`NULL', the decoder starts decoding using the
     given byte order:

          *byteorder == -1: little endian
          *byteorder == 0:  native order
          *byteorder == 1:  big endian

     If ‘*byteorder’ is zero, and the first two bytes of the input data
     are a byte order mark (BOM), the decoder switches to this byte
     order and the BOM is not copied into the resulting Unicode string.
     If ‘*byteorder’ is ‘-1’ or ‘1’, any byte order mark is copied to
     the output (where it will result in either a ‘\ufeff’ or a ‘\ufffe’
     character).

     After completion, `*byteorder' is set to the current byte order at
     the end of input data.

     If `byteorder' is `NULL', the codec starts in native order mode.

     Return `NULL' if an exception was raised by the codec.

 -- C Function: PyObject* PyUnicode_DecodeUTF16Stateful (const char *s,
          Py_ssize_t size, const char *errors, int *byteorder,
          Py_ssize_t *consumed)
     `Return value: New reference.'  If `consumed' is `NULL', behave
     like *note PyUnicode_DecodeUTF16(): 3612.  If `consumed' is not
     `NULL', *note PyUnicode_DecodeUTF16Stateful(): 3613. will not treat
     trailing incomplete UTF-16 byte sequences (such as an odd number of
     bytes or a split surrogate pair) as an error.  Those bytes will not
     be decoded and the number of bytes that have been decoded will be
     stored in `consumed'.

 -- C Function: PyObject* PyUnicode_AsUTF16String (PyObject *unicode)
     `Return value: New reference.'  Return a Python byte string using
     the UTF-16 encoding in native byte order.  The string always starts
     with a BOM mark.  Error handling is "strict".  Return `NULL' if an
     exception was raised by the codec.

 -- C Function: PyObject* PyUnicode_EncodeUTF16 (const Py_UNICODE *s,
          Py_ssize_t size, const char *errors, int byteorder)
     `Return value: New reference.'  Return a Python bytes object
     holding the UTF-16 encoded value of the Unicode data in `s'.
     Output is written according to the following byte order:

          byteorder == -1: little endian
          byteorder == 0:  native byte order (writes a BOM mark)
          byteorder == 1:  big endian

     If byteorder is ‘0’, the output string will always start with the
     Unicode BOM mark (U+FEFF). In the other two modes, no BOM mark is
     prepended.

     If `Py_UNICODE_WIDE' is defined, a single *note Py_UNICODE: 72f.
     value may get represented as a surrogate pair.  If it is not
     defined, each *note Py_UNICODE: 72f. values is interpreted as a
     UCS-2 character.

     Return `NULL' if an exception was raised by the codec.

     Deprecated since version 3.3, will be removed in version 4.0: Part
     of the old-style *note Py_UNICODE: 72f. API; please migrate to
     using *note PyUnicode_AsUTF16String(): 3614.


File: python.info,  Node: UTF-7 Codecs,  Next: Unicode-Escape Codecs,  Prev: UTF-16 Codecs,  Up: Built-in Codecs

7.8.3.21 UTF-7 Codecs
.....................

These are the UTF-7 codec APIs:

 -- C Function: PyObject* PyUnicode_DecodeUTF7 (const char *s,
          Py_ssize_t size, const char *errors)

     Create a Unicode object by decoding `size' bytes of the UTF-7
     encoded string `s'.  Return `NULL' if an exception was raised by
     the codec.

 -- C Function: PyObject* PyUnicode_DecodeUTF7Stateful (const char *s,
          Py_ssize_t size, const char *errors, Py_ssize_t *consumed)

     If `consumed' is `NULL', behave like *note PyUnicode_DecodeUTF7():
     3616.  If `consumed' is not `NULL', trailing incomplete UTF-7
     base-64 sections will not be treated as an error.  Those bytes will
     not be decoded and the number of bytes that have been decoded will
     be stored in `consumed'.

 -- C Function: PyObject* PyUnicode_EncodeUTF7 (const Py_UNICODE *s,
          Py_ssize_t size, int base64SetO, int base64WhiteSpace, const
          char *errors)

     Encode the *note Py_UNICODE: 72f. buffer of the given size using
     UTF-7 and return a Python bytes object.  Return `NULL' if an
     exception was raised by the codec.

     If `base64SetO' is nonzero, "Set O" (punctuation that has no
     otherwise special meaning) will be encoded in base-64.  If
     `base64WhiteSpace' is nonzero, whitespace will be encoded in
     base-64.  Both are set to zero for the Python "utf-7" codec.

     Deprecated since version 3.3, will be removed in version 4.0: Part
     of the old-style *note Py_UNICODE: 72f. API.


File: python.info,  Node: Unicode-Escape Codecs,  Next: Raw-Unicode-Escape Codecs,  Prev: UTF-7 Codecs,  Up: Built-in Codecs

7.8.3.22 Unicode-Escape Codecs
..............................

These are the "Unicode Escape" codec APIs:

 -- C Function: PyObject* PyUnicode_DecodeUnicodeEscape (const char *s,
          Py_ssize_t size, const char *errors)
     `Return value: New reference.'  Create a Unicode object by decoding
     `size' bytes of the Unicode-Escape encoded string `s'.  Return
     `NULL' if an exception was raised by the codec.

 -- C Function: PyObject* PyUnicode_AsUnicodeEscapeString
          (PyObject *unicode)
     `Return value: New reference.'  Encode a Unicode object using
     Unicode-Escape and return the result as Python string object.
     Error handling is "strict".  Return `NULL' if an exception was
     raised by the codec.

 -- C Function: PyObject* PyUnicode_EncodeUnicodeEscape (const
          Py_UNICODE *s, Py_ssize_t size)
     `Return value: New reference.'  Encode the *note Py_UNICODE: 72f.
     buffer of the given `size' using Unicode-Escape and return a Python
     string object.  Return `NULL' if an exception was raised by the
     codec.

     Deprecated since version 3.3, will be removed in version 4.0: Part
     of the old-style *note Py_UNICODE: 72f. API; please migrate to
     using *note PyUnicode_AsUnicodeEscapeString(): 745.


File: python.info,  Node: Raw-Unicode-Escape Codecs,  Next: Latin-1 Codecs,  Prev: Unicode-Escape Codecs,  Up: Built-in Codecs

7.8.3.23 Raw-Unicode-Escape Codecs
..................................

These are the "Raw Unicode Escape" codec APIs:

 -- C Function: PyObject* PyUnicode_DecodeRawUnicodeEscape (const
          char *s, Py_ssize_t size, const char *errors)
     `Return value: New reference.'  Create a Unicode object by decoding
     `size' bytes of the Raw-Unicode-Escape encoded string `s'.  Return
     `NULL' if an exception was raised by the codec.

 -- C Function: PyObject* PyUnicode_AsRawUnicodeEscapeString
          (PyObject *unicode)
     `Return value: New reference.'  Encode a Unicode object using
     Raw-Unicode-Escape and return the result as Python string object.
     Error handling is "strict".  Return `NULL' if an exception was
     raised by the codec.

 -- C Function: PyObject* PyUnicode_EncodeRawUnicodeEscape (const
          Py_UNICODE *s, Py_ssize_t size, const char *errors)
     `Return value: New reference.'  Encode the *note Py_UNICODE: 72f.
     buffer of the given `size' using Raw-Unicode-Escape and return a
     Python string object.  Return `NULL' if an exception was raised by
     the codec.

     Deprecated since version 3.3, will be removed in version 4.0: Part
     of the old-style *note Py_UNICODE: 72f. API; please migrate to
     using *note PyUnicode_AsRawUnicodeEscapeString(): 746.


File: python.info,  Node: Latin-1 Codecs,  Next: ASCII Codecs,  Prev: Raw-Unicode-Escape Codecs,  Up: Built-in Codecs

7.8.3.24 Latin-1 Codecs
.......................

These are the Latin-1 codec APIs: Latin-1 corresponds to the first 256
Unicode ordinals and only these are accepted by the codecs during
encoding.

 -- C Function: PyObject* PyUnicode_DecodeLatin1 (const char *s,
          Py_ssize_t size, const char *errors)
     `Return value: New reference.'  Create a Unicode object by decoding
     `size' bytes of the Latin-1 encoded string `s'.  Return `NULL' if
     an exception was raised by the codec.

 -- C Function: PyObject* PyUnicode_AsLatin1String (PyObject *unicode)
     `Return value: New reference.'  Encode a Unicode object using
     Latin-1 and return the result as Python bytes object.  Error
     handling is "strict".  Return `NULL' if an exception was raised by
     the codec.

 -- C Function: PyObject* PyUnicode_EncodeLatin1 (const Py_UNICODE *s,
          Py_ssize_t size, const char *errors)
     `Return value: New reference.'  Encode the *note Py_UNICODE: 72f.
     buffer of the given `size' using Latin-1 and return a Python bytes
     object.  Return `NULL' if an exception was raised by the codec.

     Deprecated since version 3.3, will be removed in version 4.0: Part
     of the old-style *note Py_UNICODE: 72f. API; please migrate to
     using *note PyUnicode_AsLatin1String(): 748.


File: python.info,  Node: ASCII Codecs,  Next: Character Map Codecs,  Prev: Latin-1 Codecs,  Up: Built-in Codecs

7.8.3.25 ASCII Codecs
.....................

These are the ASCII codec APIs.  Only 7-bit ASCII data is accepted.  All
other codes generate errors.

 -- C Function: PyObject* PyUnicode_DecodeASCII (const char *s,
          Py_ssize_t size, const char *errors)
     `Return value: New reference.'  Create a Unicode object by decoding
     `size' bytes of the ASCII encoded string `s'.  Return `NULL' if an
     exception was raised by the codec.

 -- C Function: PyObject* PyUnicode_AsASCIIString (PyObject *unicode)
     `Return value: New reference.'  Encode a Unicode object using ASCII
     and return the result as Python bytes object.  Error handling is
     "strict".  Return `NULL' if an exception was raised by the codec.

 -- C Function: PyObject* PyUnicode_EncodeASCII (const Py_UNICODE *s,
          Py_ssize_t size, const char *errors)
     `Return value: New reference.'  Encode the *note Py_UNICODE: 72f.
     buffer of the given `size' using ASCII and return a Python bytes
     object.  Return `NULL' if an exception was raised by the codec.

     Deprecated since version 3.3, will be removed in version 4.0: Part
     of the old-style *note Py_UNICODE: 72f. API; please migrate to
     using *note PyUnicode_AsASCIIString(): 74a.


File: python.info,  Node: Character Map Codecs,  Next: MBCS codecs for Windows,  Prev: ASCII Codecs,  Up: Built-in Codecs

7.8.3.26 Character Map Codecs
.............................

This codec is special in that it can be used to implement many different
codecs (and this is in fact what was done to obtain most of the standard
codecs included in the ‘encodings’ package).  The codec uses mapping to
encode and decode characters.

Decoding mappings must map single string characters to single Unicode
characters, integers (which are then interpreted as Unicode ordinals) or
None (meaning "undefined mapping" and causing an error).

Encoding mappings must map single Unicode characters to single string
characters, integers (which are then interpreted as Latin-1 ordinals) or
None (meaning "undefined mapping" and causing an error).

The mapping objects provided must only support the __getitem__ mapping
interface.

If a character lookup fails with a LookupError, the character is copied
as-is meaning that its ordinal value will be interpreted as Unicode or
Latin-1 ordinal resp.  Because of this, mappings only need to contain
those mappings which map characters to different code points.

These are the mapping codec APIs:

 -- C Function: PyObject* PyUnicode_DecodeCharmap (const char *s,
          Py_ssize_t size, PyObject *mapping, const char *errors)
     `Return value: New reference.'  Create a Unicode object by decoding
     `size' bytes of the encoded string `s' using the given `mapping'
     object.  Return `NULL' if an exception was raised by the codec.  If
     `mapping' is `NULL' latin-1 decoding will be done.  Else it can be
     a dictionary mapping byte or a unicode string, which is treated as
     a lookup table.  Byte values greater that the length of the string
     and U+FFFE "characters" are treated as "undefined mapping".

 -- C Function: PyObject* PyUnicode_AsCharmapString (PyObject *unicode,
          PyObject *mapping)
     `Return value: New reference.'  Encode a Unicode object using the
     given `mapping' object and return the result as Python string
     object.  Error handling is "strict".  Return `NULL' if an exception
     was raised by the codec.

The following codec API is special in that maps Unicode to Unicode.

 -- C Function: PyObject* PyUnicode_TranslateCharmap (const
          Py_UNICODE *s, Py_ssize_t size, PyObject *table, const
          char *errors)
     `Return value: New reference.'  Translate a *note Py_UNICODE: 72f.
     buffer of the given `size' by applying a character mapping `table'
     to it and return the resulting Unicode object.  Return `NULL' when
     an exception was raised by the codec.

     The `mapping' table must map Unicode ordinal integers to Unicode
     ordinal integers or None (causing deletion of the character).

     Mapping tables need only provide the *note __getitem__(): a84.
     interface; dictionaries and sequences work well.  Unmapped
     character ordinals (ones which cause a *note LookupError: 1015.)
     are left untouched and are copied as-is.

     Deprecated since version 3.3, will be removed in version 4.0: Part
     of the old-style *note Py_UNICODE: 72f. API.

 -- C Function: PyObject* PyUnicode_EncodeCharmap (const Py_UNICODE *s,
          Py_ssize_t size, PyObject *mapping, const char *errors)
     `Return value: New reference.'  Encode the *note Py_UNICODE: 72f.
     buffer of the given `size' using the given `mapping' object and
     return a Python string object.  Return `NULL' if an exception was
     raised by the codec.

     Deprecated since version 3.3, will be removed in version 4.0: Part
     of the old-style *note Py_UNICODE: 72f. API; please migrate to
     using *note PyUnicode_AsCharmapString(): 3624.


File: python.info,  Node: MBCS codecs for Windows,  Next: Methods & Slots,  Prev: Character Map Codecs,  Up: Built-in Codecs

7.8.3.27 MBCS codecs for Windows
................................

These are the MBCS codec APIs.  They are currently only available on
Windows and use the Win32 MBCS converters to implement the conversions.
Note that MBCS (or DBCS) is a class of encodings, not just one.  The
target encoding is defined by the user settings on the machine running
the codec.

 -- C Function: PyObject* PyUnicode_DecodeMBCS (const char *s,
          Py_ssize_t size, const char *errors)
     `Return value: New reference.'  Create a Unicode object by decoding
     `size' bytes of the MBCS encoded string `s'.  Return `NULL' if an
     exception was raised by the codec.

 -- C Function: PyObject* PyUnicode_DecodeMBCSStateful (const char *s,
          int size, const char *errors, int *consumed)

     If `consumed' is `NULL', behave like *note PyUnicode_DecodeMBCS():
     3626.  If `consumed' is not `NULL', *note
     PyUnicode_DecodeMBCSStateful(): 3627. will not decode trailing lead
     byte and the number of bytes that have been decoded will be stored
     in `consumed'.

 -- C Function: PyObject* PyUnicode_AsMBCSString (PyObject *unicode)
     `Return value: New reference.'  Encode a Unicode object using MBCS
     and return the result as Python bytes object.  Error handling is
     "strict".  Return `NULL' if an exception was raised by the codec.

 -- C Function: PyObject* PyUnicode_EncodeCodePage (int code_page,
          PyObject *unicode, const char *errors)

     Encode the Unicode object using the specified code page and return
     a Python bytes object.  Return `NULL' if an exception was raised by
     the codec.  Use ‘CP_ACP’ code page to get the MBCS encoder.

     New in version 3.3.

 -- C Function: PyObject* PyUnicode_EncodeMBCS (const Py_UNICODE *s,
          Py_ssize_t size, const char *errors)
     `Return value: New reference.'  Encode the *note Py_UNICODE: 72f.
     buffer of the given `size' using MBCS and return a Python bytes
     object.  Return `NULL' if an exception was raised by the codec.

     Deprecated since version 3.3, will be removed in version 4.0: Part
     of the old-style *note Py_UNICODE: 72f. API; please migrate to
     using *note PyUnicode_AsMBCSString(): 74e. or *note
     PyUnicode_EncodeCodePage(): 74f.


File: python.info,  Node: Methods & Slots,  Prev: MBCS codecs for Windows,  Up: Built-in Codecs

7.8.3.28 Methods & Slots
........................


File: python.info,  Node: Methods and Slot Functions,  Prev: Built-in Codecs,  Up: Unicode Objects and Codecs

7.8.3.29 Methods and Slot Functions
...................................

The following APIs are capable of handling Unicode objects and strings
on input (we refer to them as strings in the descriptions) and return
Unicode objects or integers as appropriate.

They all return `NULL' or ‘-1’ if an exception occurs.

 -- C Function: PyObject* PyUnicode_Concat (PyObject *left,
          PyObject *right)
     `Return value: New reference.'  Concat two strings giving a new
     Unicode string.

 -- C Function: PyObject* PyUnicode_Split (PyObject *s, PyObject *sep,
          Py_ssize_t maxsplit)
     `Return value: New reference.'  Split a string giving a list of
     Unicode strings.  If `sep' is `NULL', splitting will be done at all
     whitespace substrings.  Otherwise, splits occur at the given
     separator.  At most `maxsplit' splits will be done.  If negative,
     no limit is set.  Separators are not included in the resulting
     list.

 -- C Function: PyObject* PyUnicode_Splitlines (PyObject *s,
          int keepend)
     `Return value: New reference.'  Split a Unicode string at line
     breaks, returning a list of Unicode strings.  CRLF is considered to
     be one line break.  If `keepend' is 0, the Line break characters
     are not included in the resulting strings.

 -- C Function: PyObject* PyUnicode_Translate (PyObject *str,
          PyObject *table, const char *errors)
     `Return value: New reference.'  Translate a string by applying a
     character mapping table to it and return the resulting Unicode
     object.

     The mapping table must map Unicode ordinal integers to Unicode
     ordinal integers or None (causing deletion of the character).

     Mapping tables need only provide the *note __getitem__(): a84.
     interface; dictionaries and sequences work well.  Unmapped
     character ordinals (ones which cause a *note LookupError: 1015.)
     are left untouched and are copied as-is.

     `errors' has the usual meaning for codecs.  It may be `NULL' which
     indicates to use the default error handling.

 -- C Function: PyObject* PyUnicode_Join (PyObject *separator,
          PyObject *seq)
     `Return value: New reference.'  Join a sequence of strings using
     the given `separator' and return the resulting Unicode string.

 -- C Function: Py_ssize_t PyUnicode_Tailmatch (PyObject *str,
          PyObject *substr, Py_ssize_t start, Py_ssize_t end,
          int direction)

     Return 1 if `substr' matches ‘str[start:end]’ at the given tail end
     (`direction' == -1 means to do a prefix match, `direction' == 1 a
     suffix match), 0 otherwise.  Return ‘-1’ if an error occurred.

 -- C Function: Py_ssize_t PyUnicode_Find (PyObject *str,
          PyObject *substr, Py_ssize_t start, Py_ssize_t end,
          int direction)

     Return the first position of `substr' in ‘str[start:end]’ using the
     given `direction' (`direction' == 1 means to do a forward search,
     `direction' == -1 a backward search).  The return value is the
     index of the first match; a value of ‘-1’ indicates that no match
     was found, and ‘-2’ indicates that an error occurred and an
     exception has been set.

 -- C Function: Py_ssize_t PyUnicode_FindChar (PyObject *str,
          Py_UCS4 ch, Py_ssize_t start, Py_ssize_t end, int direction)

     Return the first position of the character `ch' in ‘str[start:end]’
     using the given `direction' (`direction' == 1 means to do a forward
     search, `direction' == -1 a backward search).  The return value is
     the index of the first match; a value of ‘-1’ indicates that no
     match was found, and ‘-2’ indicates that an error occurred and an
     exception has been set.

     New in version 3.3.

 -- C Function: Py_ssize_t PyUnicode_Count (PyObject *str,
          PyObject *substr, Py_ssize_t start, Py_ssize_t end)

     Return the number of non-overlapping occurrences of `substr' in
     ‘str[start:end]’.  Return ‘-1’ if an error occurred.

 -- C Function: PyObject* PyUnicode_Replace (PyObject *str,
          PyObject *substr, PyObject *replstr, Py_ssize_t maxcount)
     `Return value: New reference.'  Replace at most `maxcount'
     occurrences of `substr' in `str' with `replstr' and return the
     resulting Unicode object.  `maxcount' == -1 means replace all
     occurrences.

 -- C Function: int PyUnicode_Compare (PyObject *left, PyObject *right)

     Compare two strings and return -1, 0, 1 for less than, equal, and
     greater than, respectively.

 -- C Function: int PyUnicode_CompareWithASCIIString (PyObject *uni,
          const char *string)

     Compare a unicode object, `uni', with `string' and return -1, 0, 1
     for less than, equal, and greater than, respectively.  It is best
     to pass only ASCII-encoded strings, but the function interprets the
     input string as ISO-8859-1 if it contains non-ASCII characters.

 -- C Function: PyObject* PyUnicode_RichCompare (PyObject *left,
          PyObject *right, int op)

     Rich compare two unicode strings and return one of the following:

        * ‘NULL’ in case an exception was raised

        * ‘Py_True’ or ‘Py_False’ for successful comparisons

        * ‘Py_NotImplemented’ in case the type combination is unknown

     Note that ‘Py_EQ’ and ‘Py_NE’ comparisons can cause a *note
     UnicodeWarning: a01. in case the conversion of the arguments to
     Unicode fails with a *note UnicodeDecodeError: 571.

     Possible values for `op' are ‘Py_GT’, ‘Py_GE’, ‘Py_EQ’, ‘Py_NE’,
     ‘Py_LT’, and ‘Py_LE’.

 -- C Function: PyObject* PyUnicode_Format (PyObject *format,
          PyObject *args)
     `Return value: New reference.'  Return a new string object from
     `format' and `args'; this is analogous to ‘format % args’.

 -- C Function: int PyUnicode_Contains (PyObject *container,
          PyObject *element)

     Check whether `element' is contained in `container' and return true
     or false accordingly.

     `element' has to coerce to a one element Unicode string.  ‘-1’ is
     returned if there was an error.

 -- C Function: void PyUnicode_InternInPlace (PyObject **string)

     Intern the argument `*string' in place.  The argument must be the
     address of a pointer variable pointing to a Python unicode string
     object.  If there is an existing interned string that is the same
     as `*string', it sets `*string' to it (decrementing the reference
     count of the old string object and incrementing the reference count
     of the interned string object), otherwise it leaves `*string' alone
     and interns it (incrementing its reference count).  (Clarification:
     even though there is a lot of talk about reference counts, think of
     this function as reference-count-neutral; you own the object after
     the call if and only if you owned it before the call.)

 -- C Function: PyObject* PyUnicode_InternFromString (const char *v)

     A combination of *note PyUnicode_FromString(): 338b. and *note
     PyUnicode_InternInPlace(): 3634, returning either a new unicode
     string object that has been interned, or a new ("owned") reference
     to an earlier interned string object with the same value.


File: python.info,  Node: Tuple Objects,  Next: Struct Sequence Objects,  Prev: Unicode Objects and Codecs,  Up: Sequence Objects

7.8.3.30 Tuple Objects
......................

 -- C Type: PyTupleObject

     This subtype of *note PyObject: 9f5. represents a Python tuple
     object.

 -- C Variable: PyTypeObject PyTuple_Type

     This instance of *note PyTypeObject: 3bc. represents the Python
     tuple type; it is the same object as *note tuple: 25c. in the
     Python layer.

 -- C Function: int PyTuple_Check (PyObject *p)

     Return true if `p' is a tuple object or an instance of a subtype of
     the tuple type.

 -- C Function: int PyTuple_CheckExact (PyObject *p)

     Return true if `p' is a tuple object, but not an instance of a
     subtype of the tuple type.

 -- C Function: PyObject* PyTuple_New (Py_ssize_t len)
     `Return value: New reference.'  Return a new tuple object of size
     `len', or `NULL' on failure.

 -- C Function: PyObject* PyTuple_Pack (Py_ssize_t n, ...)
     `Return value: New reference.'  Return a new tuple object of size
     `n', or `NULL' on failure.  The tuple values are initialized to the
     subsequent `n' C arguments pointing to Python objects.
     ‘PyTuple_Pack(2, a, b)’ is equivalent to ‘Py_BuildValue("(OO)", a,
     b)’.

 -- C Function: Py_ssize_t PyTuple_Size (PyObject *p)

     Take a pointer to a tuple object, and return the size of that
     tuple.

 -- C Function: Py_ssize_t PyTuple_GET_SIZE (PyObject *p)

     Return the size of the tuple `p', which must be non-`NULL' and
     point to a tuple; no error checking is performed.

 -- C Function: PyObject* PyTuple_GetItem (PyObject *p, Py_ssize_t pos)
     `Return value: Borrowed reference.'  Return the object at position
     `pos' in the tuple pointed to by `p'.  If `pos' is out of bounds,
     return `NULL' and sets an *note IndexError: afb. exception.

 -- C Function: PyObject* PyTuple_GET_ITEM (PyObject *p, Py_ssize_t pos)
     `Return value: Borrowed reference.'  Like *note PyTuple_GetItem():
     331c, but does no checking of its arguments.

 -- C Function: PyObject* PyTuple_GetSlice (PyObject *p, Py_ssize_t low,
          Py_ssize_t high)
     `Return value: New reference.'  Take a slice of the tuple pointed
     to by `p' from `low' to `high' and return it as a new tuple.

 -- C Function: int PyTuple_SetItem (PyObject *p, Py_ssize_t pos,
          PyObject *o)

     Insert a reference to object `o' at position `pos' of the tuple
     pointed to by `p'.  Return ‘0’ on success.

          Note: This function "steals" a reference to `o'.

 -- C Function: void PyTuple_SET_ITEM (PyObject *p, Py_ssize_t pos,
          PyObject *o)

     Like *note PyTuple_SetItem(): 3321, but does no error checking, and
     should `only' be used to fill in brand new tuples.

          Note: This function "steals" a reference to `o'.

 -- C Function: int _PyTuple_Resize (PyObject **p, Py_ssize_t newsize)

     Can be used to resize a tuple.  `newsize' will be the new length of
     the tuple.  Because tuples are `supposed' to be immutable, this
     should only be used if there is only one reference to the object.
     Do `not' use this if the tuple may already be known to some other
     part of the code.  The tuple will always grow or shrink at the end.
     Think of this as destroying the old tuple and creating a new one,
     only more efficiently.  Returns ‘0’ on success.  Client code should
     never assume that the resulting value of ‘*p’ will be the same as
     before calling this function.  If the object referenced by ‘*p’ is
     replaced, the original ‘*p’ is destroyed.  On failure, returns ‘-1’
     and sets ‘*p’ to `NULL', and raises *note MemoryError: 10b9. or
     *note SystemError: 1a0.

 -- C Function: int PyTuple_ClearFreeList ()

     Clear the free list.  Return the total number of freed items.


File: python.info,  Node: Struct Sequence Objects,  Next: List Objects,  Prev: Tuple Objects,  Up: Sequence Objects

7.8.3.31 Struct Sequence Objects
................................

Struct sequence objects are the C equivalent of *note namedtuple(): 229.
objects, i.e.  a sequence whose items can also be accessed through
attributes.  To create a struct sequence, you first have to create a
specific struct sequence type.

 -- C Function: PyTypeObject* PyStructSequence_NewType
          (PyStructSequence_Desc *desc)

     Create a new struct sequence type from the data in `desc',
     described below.  Instances of the resulting type can be created
     with *note PyStructSequence_New(): 3647.

 -- C Function: void PyStructSequence_InitType (PyTypeObject *type,
          PyStructSequence_Desc *desc)

     Initializes a struct sequence type `type' from `desc' in place.

 -- C Function: int PyStructSequence_InitType2 (PyTypeObject *type,
          PyStructSequence_Desc *desc)

     The same as ‘PyStructSequence_InitType’, but returns ‘0’ on success
     and ‘-1’ on failure.

     New in version 3.4.

 -- C Type: PyStructSequence_Desc

     Contains the meta information of a struct sequence type to create.

     Field                   C Type                             Meaning
                                                                
     ----------------------------------------------------------------------------------------------------
                                                                
     ‘name’                  ‘char *’                           name of the struct sequence type
                                                                
                                                                
     ‘doc’                   ‘char *’                           pointer to docstring for the type or
                                                                NULL to omit
                                                                
                                                                
     ‘fields’                ‘PyStructSequence_Field *’         pointer to `NULL'-terminated array
                                                                with field names of the new type
                                                                
                                                                
     ‘n_in_sequence’         ‘int’                              number of fields visible to the Python
                                                                side (if used as tuple)
                                                                

 -- C Type: PyStructSequence_Field

     Describes a field of a struct sequence.  As a struct sequence is
     modeled as a tuple, all fields are typed as *note PyObject*: 9f5.
     The index in the ‘fields’ array of the *note PyStructSequence_Desc:
     3648. determines which field of the struct sequence is described.

     Field           C Type              Meaning
                                         
     -------------------------------------------------------------------------------
                                         
     ‘name’          ‘char *’            name for the field or `NULL' to end the
                                         list of named fields, set to
                                         PyStructSequence_UnnamedField to leave
                                         unnamed
                                         
                                         
     ‘doc’           ‘char *’            field docstring or `NULL' to omit
                                         

 -- C Variable: char* PyStructSequence_UnnamedField

     Special value for a field name to leave it unnamed.

 -- C Function: PyObject* PyStructSequence_New (PyTypeObject *type)

     Creates an instance of `type', which must have been created with
     *note PyStructSequence_NewType(): 3646.

 -- C Function: PyObject* PyStructSequence_GetItem (PyObject *p,
          Py_ssize_t pos)

     Return the object at position `pos' in the struct sequence pointed
     to by `p'.  No bounds checking is performed.

 -- C Function: PyObject* PyStructSequence_GET_ITEM (PyObject *p,
          Py_ssize_t pos)

     Macro equivalent of *note PyStructSequence_GetItem(): 364b.

 -- C Function: void PyStructSequence_SetItem (PyObject *p,
          Py_ssize_t pos, PyObject *o)

     Sets the field at index `pos' of the struct sequence `p' to value
     `o'.  Like *note PyTuple_SET_ITEM(): 3643, this should only be used
     to fill in brand new instances.

          Note: This function "steals" a reference to `o'.

 -- C Function: PyObject* PyStructSequence_SET_ITEM (PyObject *p,
          Py_ssize_t *pos, PyObject *o)

     Macro equivalent of *note PyStructSequence_SetItem(): 364d.

          Note: This function "steals" a reference to `o'.


File: python.info,  Node: List Objects,  Prev: Struct Sequence Objects,  Up: Sequence Objects

7.8.3.32 List Objects
.....................

 -- C Type: PyListObject

     This subtype of *note PyObject: 9f5. represents a Python list
     object.

 -- C Variable: PyTypeObject PyList_Type

     This instance of *note PyTypeObject: 3bc. represents the Python
     list type.  This is the same object as *note list: 25d. in the
     Python layer.

 -- C Function: int PyList_Check (PyObject *p)

     Return true if `p' is a list object or an instance of a subtype of
     the list type.

 -- C Function: int PyList_CheckExact (PyObject *p)

     Return true if `p' is a list object, but not an instance of a
     subtype of the list type.

 -- C Function: PyObject* PyList_New (Py_ssize_t len)
     `Return value: New reference.'  Return a new list of length `len'
     on success, or `NULL' on failure.

          Note: If `len' is greater than zero, the returned list
          object’s items are set to ‘NULL’.  Thus you cannot use
          abstract API functions such as *note PySequence_SetItem():
          339f. or expose the object to Python code before setting all
          items to a real object with *note PyList_SetItem(): 3322.

 -- C Function: Py_ssize_t PyList_Size (PyObject *list)

     Return the length of the list object in `list'; this is equivalent
     to ‘len(list)’ on a list object.

 -- C Function: Py_ssize_t PyList_GET_SIZE (PyObject *list)

     Macro form of *note PyList_Size(): 9f6. without error checking.

 -- C Function: PyObject* PyList_GetItem (PyObject *list,
          Py_ssize_t index)
     `Return value: Borrowed reference.'  Return the object at position
     `index' in the list pointed to by `list'.  The position must be
     positive, indexing from the end of the list is not supported.  If
     `index' is out of bounds, return `NULL' and set an *note
     IndexError: afb. exception.

 -- C Function: PyObject* PyList_GET_ITEM (PyObject *list, Py_ssize_t i)
     `Return value: Borrowed reference.'  Macro form of *note
     PyList_GetItem(): 331d. without error checking.

 -- C Function: int PyList_SetItem (PyObject *list, Py_ssize_t index,
          PyObject *item)

     Set the item at index `index' in list to `item'.  Return ‘0’ on
     success or ‘-1’ on failure.

          Note: This function "steals" a reference to `item' and
          discards a reference to an item already in the list at the
          affected position.

 -- C Function: void PyList_SET_ITEM (PyObject *list, Py_ssize_t i,
          PyObject *o)

     Macro form of *note PyList_SetItem(): 3322. without error checking.
     This is normally only used to fill in new lists where there is no
     previous content.

          Note: This macro "steals" a reference to `item', and, unlike
          *note PyList_SetItem(): 3322, does `not' discard a reference
          to any item that is being replaced; any reference in `list' at
          position `i' will be leaked.

 -- C Function: int PyList_Insert (PyObject *list, Py_ssize_t index,
          PyObject *item)

     Insert the item `item' into list `list' in front of index `index'.
     Return ‘0’ if successful; return ‘-1’ and set an exception if
     unsuccessful.  Analogous to ‘list.insert(index, item)’.

 -- C Function: int PyList_Append (PyObject *list, PyObject *item)

     Append the object `item' at the end of list `list'.  Return ‘0’ if
     successful; return ‘-1’ and set an exception if unsuccessful.
     Analogous to ‘list.append(item)’.

 -- C Function: PyObject* PyList_GetSlice (PyObject *list,
          Py_ssize_t low, Py_ssize_t high)
     `Return value: New reference.'  Return a list of the objects in
     `list' containing the objects `between' `low' and `high'.  Return
     `NULL' and set an exception if unsuccessful.  Analogous to
     ‘list[low:high]’.  Negative indices, as when slicing from Python,
     are not supported.

 -- C Function: int PyList_SetSlice (PyObject *list, Py_ssize_t low,
          Py_ssize_t high, PyObject *itemlist)

     Set the slice of `list' between `low' and `high' to the contents of
     `itemlist'.  Analogous to ‘list[low:high] = itemlist’.  The
     `itemlist' may be `NULL', indicating the assignment of an empty
     list (slice deletion).  Return ‘0’ on success, ‘-1’ on failure.
     Negative indices, as when slicing from Python, are not supported.

 -- C Function: int PyList_Sort (PyObject *list)

     Sort the items of `list' in place.  Return ‘0’ on success, ‘-1’ on
     failure.  This is equivalent to ‘list.sort()’.

 -- C Function: int PyList_Reverse (PyObject *list)

     Reverse the items of `list' in place.  Return ‘0’ on success, ‘-1’
     on failure.  This is the equivalent of ‘list.reverse()’.

 -- C Function: PyObject* PyList_AsTuple (PyObject *list)
     `Return value: New reference.'

     Return a new tuple object containing the contents of `list';
     equivalent to ‘tuple(list)’.

 -- C Function: int PyList_ClearFreeList ()

     Clear the free list.  Return the total number of freed items.

     New in version 3.3.


File: python.info,  Node: Container Objects,  Next: Function Objects<2>,  Prev: Sequence Objects,  Up: Concrete Objects Layer

7.8.4 Container Objects
-----------------------

* Menu:

* Dictionary Objects:: 
* Set Objects:: 


File: python.info,  Node: Dictionary Objects,  Next: Set Objects,  Up: Container Objects

7.8.4.1 Dictionary Objects
..........................

 -- C Type: PyDictObject

     This subtype of *note PyObject: 9f5. represents a Python dictionary
     object.

 -- C Variable: PyTypeObject PyDict_Type

     This instance of *note PyTypeObject: 3bc. represents the Python
     dictionary type.  This is the same object as *note dict: 3b0. in
     the Python layer.

 -- C Function: int PyDict_Check (PyObject *p)

     Return true if `p' is a dict object or an instance of a subtype of
     the dict type.

 -- C Function: int PyDict_CheckExact (PyObject *p)

     Return true if `p' is a dict object, but not an instance of a
     subtype of the dict type.

 -- C Function: PyObject* PyDict_New ()
     `Return value: New reference.'  Return a new empty dictionary, or
     `NULL' on failure.

 -- C Function: PyObject* PyDictProxy_New (PyObject *mapping)
     `Return value: New reference.'  Return a *note
     types.MappingProxyType: 6f2. object for a mapping which enforces
     read-only behavior.  This is normally used to create a view to
     prevent modification of the dictionary for non-dynamic class types.

 -- C Function: void PyDict_Clear (PyObject *p)

     Empty an existing dictionary of all key-value pairs.

 -- C Function: int PyDict_Contains (PyObject *p, PyObject *key)

     Determine if dictionary `p' contains `key'.  If an item in `p' is
     matches `key', return ‘1’, otherwise return ‘0’.  On error, return
     ‘-1’.  This is equivalent to the Python expression ‘key in p’.

 -- C Function: PyObject* PyDict_Copy (PyObject *p)
     `Return value: New reference.'  Return a new dictionary that
     contains the same key-value pairs as `p'.

 -- C Function: int PyDict_SetItem (PyObject *p, PyObject *key,
          PyObject *val)

     Insert `value' into the dictionary `p' with a key of `key'.  `key'
     must be *note hashable: de9.; if it isn’t, *note TypeError: 562.
     will be raised.  Return ‘0’ on success or ‘-1’ on failure.

 -- C Function: int PyDict_SetItemString (PyObject *p, const char *key,
          PyObject *val)

     Insert `value' into the dictionary `p' using `key' as a key.  `key'
     should be a ‘char*’.  The key object is created using
     ‘PyUnicode_FromString(key)’.  Return ‘0’ on success or ‘-1’ on
     failure.

 -- C Function: int PyDict_DelItem (PyObject *p, PyObject *key)

     Remove the entry in dictionary `p' with key `key'.  `key' must be
     hashable; if it isn’t, *note TypeError: 562. is raised.  Return ‘0’
     on success or ‘-1’ on failure.

 -- C Function: int PyDict_DelItemString (PyObject *p, const char *key)

     Remove the entry in dictionary `p' which has a key specified by the
     string `key'.  Return ‘0’ on success or ‘-1’ on failure.

 -- C Function: PyObject* PyDict_GetItem (PyObject *p, PyObject *key)
     `Return value: Borrowed reference.'  Return the object from
     dictionary `p' which has a key `key'.  Return `NULL' if the key
     `key' is not present, but `without' setting an exception.

 -- C Function: PyObject* PyDict_GetItemWithError (PyObject *p,
          PyObject *key)

     Variant of *note PyDict_GetItem(): 331e. that does not suppress
     exceptions.  Return `NULL' `with' an exception set if an exception
     occurred.  Return `NULL' `without' an exception set if the key
     wasn’t present.

 -- C Function: PyObject* PyDict_GetItemString (PyObject *p, const
          char *key)
     `Return value: Borrowed reference.'  This is the same as *note
     PyDict_GetItem(): 331e, but `key' is specified as a ‘char*’, rather
     than a *note PyObject*: 9f5.

 -- C Function: PyObject* PyDict_SetDefault (PyObject *p, PyObject *key,
          PyObject *default)
     `Return value: Borrowed reference.'  This is the same as the
     Python-level *note dict.setdefault(): 5e1.  If present, it returns
     the value corresponding to `key' from the dictionary `p'.  If the
     key is not in the dict, it is inserted with value `defaultobj' and
     `defaultobj' is returned.  This function evaluates the hash
     function of `key' only once, instead of evaluating it independently
     for the lookup and the insertion.

 -- C Function: PyObject* PyDict_Items (PyObject *p)
     `Return value: New reference.'  Return a *note PyListObject: 3652.
     containing all the items from the dictionary.

 -- C Function: PyObject* PyDict_Keys (PyObject *p)
     `Return value: New reference.'  Return a *note PyListObject: 3652.
     containing all the keys from the dictionary.

 -- C Function: PyObject* PyDict_Values (PyObject *p)
     `Return value: New reference.'  Return a *note PyListObject: 3652.
     containing all the values from the dictionary `p'.

 -- C Function: Py_ssize_t PyDict_Size (PyObject *p)

     Return the number of items in the dictionary.  This is equivalent
     to ‘len(p)’ on a dictionary.

 -- C Function: int PyDict_Next (PyObject *p, Py_ssize_t *ppos,
          PyObject **pkey, PyObject **pvalue)

     Iterate over all key-value pairs in the dictionary `p'.  The
     ‘Py_ssize_t’ referred to by `ppos' must be initialized to ‘0’ prior
     to the first call to this function to start the iteration; the
     function returns true for each pair in the dictionary, and false
     once all pairs have been reported.  The parameters `pkey' and
     `pvalue' should either point to *note PyObject*: 9f5. variables
     that will be filled in with each key and value, respectively, or
     may be `NULL'. Any references returned through them are borrowed.
     `ppos' should not be altered during iteration.  Its value
     represents offsets within the internal dictionary structure, and
     since the structure is sparse, the offsets are not consecutive.

     For example:

          PyObject *key, *value;
          Py_ssize_t pos = 0;

          while (PyDict_Next(self->dict, &pos, &key, &value)) {
              /* do something interesting with the values... */
              ...
          }

     The dictionary `p' should not be mutated during iteration.  It is
     safe to modify the values of the keys as you iterate over the
     dictionary, but only so long as the set of keys does not change.
     For example:

          PyObject *key, *value;
          Py_ssize_t pos = 0;

          while (PyDict_Next(self->dict, &pos, &key, &value)) {
              long i = PyLong_AsLong(value);
              if (i == -1 && PyErr_Occurred()) {
                  return -1;
              }
              PyObject *o = PyLong_FromLong(i + 1);
              if (o == NULL)
                  return -1;
              if (PyDict_SetItem(self->dict, key, o) < 0) {
                  Py_DECREF(o);
                  return -1;
              }
              Py_DECREF(o);
          }

 -- C Function: int PyDict_Merge (PyObject *a, PyObject *b,
          int override)

     Iterate over mapping object `b' adding key-value pairs to
     dictionary `a'.  `b' may be a dictionary, or any object supporting
     *note PyMapping_Keys(): 350f. and *note PyObject_GetItem(): 33a2.
     If `override' is true, existing pairs in `a' will be replaced if a
     matching key is found in `b', otherwise pairs will only be added if
     there is not a matching key in `a'.  Return ‘0’ on success or ‘-1’
     if an exception was raised.

 -- C Function: int PyDict_Update (PyObject *a, PyObject *b)

     This is the same as ‘PyDict_Merge(a, b, 1)’ in C, and is similar to
     ‘a.update(b)’ in Python except that *note PyDict_Update(): 3678.
     doesn’t fall back to the iterating over a sequence of key value
     pairs if the second argument has no "keys" attribute.  Return ‘0’
     on success or ‘-1’ if an exception was raised.

 -- C Function: int PyDict_MergeFromSeq2 (PyObject *a, PyObject *seq2,
          int override)

     Update or merge into dictionary `a', from the key-value pairs in
     `seq2'.  `seq2' must be an iterable object producing iterable
     objects of length 2, viewed as key-value pairs.  In case of
     duplicate keys, the last wins if `override' is true, else the first
     wins.  Return ‘0’ on success or ‘-1’ if an exception was raised.
     Equivalent Python (except for the return value):

          def PyDict_MergeFromSeq2(a, seq2, override):
              for key, value in seq2:
                  if override or key not in a:
                      a[key] = value

 -- C Function: int PyDict_ClearFreeList ()

     Clear the free list.  Return the total number of freed items.

     New in version 3.3.

