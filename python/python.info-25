This is python.info, produced by makeinfo version 6.0 from python.texi.

     Python 3.6.0a0, May 06, 2016

     Georg Brandl

     Copyright © 2001-2016, Python Software Foundation

INFO-DIR-SECTION Documentation tools
START-INFO-DIR-ENTRY
* Python: (python.info). The Python Programming Language
END-INFO-DIR-ENTRY


   Generated by Sphinx 1.4.1.


File: python.info,  Node: Simple Usage Checking Examples in Docstrings,  Next: Simple Usage Checking Examples in a Text File,  Up: doctest --- Test interactive Python examples

5.26.3.1 Simple Usage: Checking Examples in Docstrings
......................................................

The simplest way to start using doctest (but not necessarily the way
you’ll continue to do it) is to end each module ‘M’ with:

     if __name__ == "__main__":
         import doctest
         doctest.testmod()

*note doctest: 65. then examines docstrings in module ‘M’.

Running the module as a script causes the examples in the docstrings to
get executed and verified:

     python M.py

This won’t display anything unless an example fails, in which case the
failing example(s) and the cause(s) of the failure(s) are printed to
stdout, and the final line of output is ‘***Test Failed*** N failures.’,
where `N' is the number of examples that failed.

Run it with the ‘-v’ switch instead:

     python M.py -v

and a detailed report of all examples tried is printed to standard
output, along with assorted summaries at the end.

You can force verbose mode by passing ‘verbose=True’ to *note testmod():
a4c, or prohibit it by passing ‘verbose=False’.  In either of those
cases, ‘sys.argv’ is not examined by *note testmod(): a4c. (so passing
‘-v’ or not has no effect).

There is also a command line shortcut for running *note testmod(): a4c.
You can instruct the Python interpreter to run the doctest module
directly from the standard library and pass the module name(s) on the
command line:

     python -m doctest -v example.py

This will import ‘example.py’ as a standalone module and run *note
testmod(): a4c. on it.  Note that this may not work correctly if the
file is part of a package and imports other submodules from that
package.

For more information on *note testmod(): a4c, see section *note Basic
API: 2b35.


File: python.info,  Node: Simple Usage Checking Examples in a Text File,  Next: How It Works,  Prev: Simple Usage Checking Examples in Docstrings,  Up: doctest --- Test interactive Python examples

5.26.3.2 Simple Usage: Checking Examples in a Text File
.......................................................

Another simple application of doctest is testing interactive examples in
a text file.  This can be done with the *note testfile(): 2b38.
function:

     import doctest
     doctest.testfile("example.txt")

That short script executes and verifies any interactive Python examples
contained in the file ‘example.txt’.  The file content is treated as if
it were a single giant docstring; the file doesn’t need to contain a
Python program!  For example, perhaps ‘example.txt’ contains this:

     The ``example`` module
     ======================

     Using ``factorial``
     -------------------

     This is an example text file in reStructuredText format.  First import
     ``factorial`` from the ``example`` module:

         >>> from example import factorial

     Now use it:

         >>> factorial(6)
         120

Running ‘doctest.testfile("example.txt")’ then finds the error in this
documentation:

     File "./example.txt", line 14, in example.txt
     Failed example:
         factorial(6)
     Expected:
         120
     Got:
         720

As with *note testmod(): a4c, *note testfile(): 2b38. won’t display
anything unless an example fails.  If an example does fail, then the
failing example(s) and the cause(s) of the failure(s) are printed to
stdout, using the same format as *note testmod(): a4c.

By default, *note testfile(): 2b38. looks for files in the calling
module’s directory.  See section *note Basic API: 2b35. for a
description of the optional arguments that can be used to tell it to
look for files in other locations.

Like *note testmod(): a4c, *note testfile(): 2b38.’s verbosity can be
set with the ‘-v’ command-line switch or with the optional keyword
argument `verbose'.

There is also a command line shortcut for running *note testfile():
2b38.  You can instruct the Python interpreter to run the doctest module
directly from the standard library and pass the file name(s) on the
command line:

     python -m doctest -v example.txt

Because the file name does not end with ‘.py’, *note doctest: 65. infers
that it must be run with *note testfile(): 2b38, not *note testmod():
a4c.

For more information on *note testfile(): 2b38, see section *note Basic
API: 2b35.


File: python.info,  Node: How It Works,  Next: Basic API,  Prev: Simple Usage Checking Examples in a Text File,  Up: doctest --- Test interactive Python examples

5.26.3.3 How It Works
.....................

This section examines in detail how doctest works: which docstrings it
looks at, how it finds interactive examples, what execution context it
uses, how it handles exceptions, and how option flags can be used to
control its behavior.  This is the information that you need to know to
write doctest examples; for information about actually running doctest
on these examples, see the following sections.

* Menu:

* Which Docstrings Are Examined?:: 
* How are Docstring Examples Recognized?:: 
* What's the Execution Context?:: 
* What About Exceptions?:: 
* Option Flags:: 
* Directives:: 
* Warnings: Warnings<2>. 


File: python.info,  Node: Which Docstrings Are Examined?,  Next: How are Docstring Examples Recognized?,  Up: How It Works

5.26.3.4 Which Docstrings Are Examined?
.......................................

The module docstring, and all function, class and method docstrings are
searched.  Objects imported into the module are not searched.

In addition, if ‘M.__test__’ exists and "is true", it must be a dict,
and each entry maps a (string) name to a function object, class object,
or string.  Function and class object docstrings found from ‘M.__test__’
are searched, and strings are treated as if they were docstrings.  In
output, a key ‘K’ in ‘M.__test__’ appears with name

     <name of M>.__test__.K

Any classes found are recursively searched similarly, to test docstrings
in their contained methods and nested classes.

`CPython implementation detail:' Prior to version 3.4, extension modules
written in C were not fully searched by doctest.


File: python.info,  Node: How are Docstring Examples Recognized?,  Next: What's the Execution Context?,  Prev: Which Docstrings Are Examined?,  Up: How It Works

5.26.3.5 How are Docstring Examples Recognized?
...............................................

In most cases a copy-and-paste of an interactive console session works
fine, but doctest isn’t trying to do an exact emulation of any specific
Python shell.

     >>> # comments are ignored
     >>> x = 12
     >>> x
     12
     >>> if x == 13:
     ...     print("yes")
     ... else:
     ...     print("no")
     ...     print("NO")
     ...     print("NO!!!")
     ...
     no
     NO
     NO!!!
     >>>

Any expected output must immediately follow the final ‘'>>> '’ or ‘'...
'’ line containing the code, and the expected output (if any) extends to
the next ‘'>>> '’ or all-whitespace line.

The fine print:

   * Expected output cannot contain an all-whitespace line, since such a
     line is taken to signal the end of expected output.  If expected
     output does contain a blank line, put ‘<BLANKLINE>’ in your doctest
     example each place a blank line is expected.

   * All hard tab characters are expanded to spaces, using 8-column tab
     stops.  Tabs in output generated by the tested code are not
     modified.  Because any hard tabs in the sample output `are'
     expanded, this means that if the code output includes hard tabs,
     the only way the doctest can pass is if the *note
     NORMALIZE_WHITESPACE: 2b3f. option or *note directive: 2b40. is in
     effect.  Alternatively, the test can be rewritten to capture the
     output and compare it to an expected value as part of the test.
     This handling of tabs in the source was arrived at through trial
     and error, and has proven to be the least error prone way of
     handling them.  It is possible to use a different algorithm for
     handling tabs by writing a custom *note DocTestParser: 2b41. class.

   * Output to stdout is captured, but not output to stderr (exception
     tracebacks are captured via a different means).

   * If you continue a line via backslashing in an interactive session,
     or for any other reason use a backslash, you should use a raw
     docstring, which will preserve your backslashes exactly as you type
     them:

          >>> def f(x):
          ...     r'''Backslashes in a raw docstring: m\n'''
          >>> print(f.__doc__)
          Backslashes in a raw docstring: m\n

     Otherwise, the backslash will be interpreted as part of the string.
     For example, the ‘\n’ above would be interpreted as a newline
     character.  Alternatively, you can double each backslash in the
     doctest version (and not use a raw string):

          >>> def f(x):
          ...     '''Backslashes in a raw docstring: m\\n'''
          >>> print(f.__doc__)
          Backslashes in a raw docstring: m\n

   * The starting column doesn’t matter:

          >>> assert "Easy!"
                >>> import math
                    >>> math.floor(1.9)
                    1

     and as many leading whitespace characters are stripped from the
     expected output as appeared in the initial ‘'>>> '’ line that
     started the example.


File: python.info,  Node: What's the Execution Context?,  Next: What About Exceptions?,  Prev: How are Docstring Examples Recognized?,  Up: How It Works

5.26.3.6 What’s the Execution Context?
......................................

By default, each time *note doctest: 65. finds a docstring to test, it
uses a `shallow copy' of ‘M’’s globals, so that running tests doesn’t
change the module’s real globals, and so that one test in ‘M’ can’t
leave behind crumbs that accidentally allow another test to work.  This
means examples can freely use any names defined at top-level in ‘M’, and
names defined earlier in the docstring being run.  Examples cannot see
names defined in other docstrings.

You can force use of your own dict as the execution context by passing
‘globs=your_dict’ to *note testmod(): a4c. or *note testfile(): 2b38.
instead.


File: python.info,  Node: What About Exceptions?,  Next: Option Flags,  Prev: What's the Execution Context?,  Up: How It Works

5.26.3.7 What About Exceptions?
...............................

No problem, provided that the traceback is the only output produced by
the example: just paste in the traceback.  (1) Since tracebacks contain
details that are likely to change rapidly (for example, exact file paths
and line numbers), this is one case where doctest works hard to be
flexible in what it accepts.

Simple example:

     >>> [1, 2, 3].remove(42)
     Traceback (most recent call last):
       File "<stdin>", line 1, in ?
     ValueError: list.remove(x): x not in list

That doctest succeeds if *note ValueError: 19c. is raised, with the
‘list.remove(x): x not in list’ detail as shown.

The expected output for an exception must start with a traceback header,
which may be either of the following two lines, indented the same as the
first line of the example:

     Traceback (most recent call last):
     Traceback (innermost last):

The traceback header is followed by an optional traceback stack, whose
contents are ignored by doctest.  The traceback stack is typically
omitted, or copied verbatim from an interactive session.

The traceback stack is followed by the most interesting part: the
line(s) containing the exception type and detail.  This is usually the
last line of a traceback, but can extend across multiple lines if the
exception has a multi-line detail:

     >>> raise ValueError('multi\n    line\ndetail')
     Traceback (most recent call last):
       File "<stdin>", line 1, in ?
     ValueError: multi
         line
     detail

The last three lines (starting with *note ValueError: 19c.) are compared
against the exception’s type and detail, and the rest are ignored.

Best practice is to omit the traceback stack, unless it adds significant
documentation value to the example.  So the last example is probably
better as:

     >>> raise ValueError('multi\n    line\ndetail')
     Traceback (most recent call last):
         ...
     ValueError: multi
         line
     detail

Note that tracebacks are treated very specially.  In particular, in the
rewritten example, the use of ‘...’ is independent of doctest’s *note
ELLIPSIS: a4d. option.  The ellipsis in that example could be left out,
or could just as well be three (or three hundred) commas or digits, or
an indented transcript of a Monty Python skit.

Some details you should read once, but won’t need to remember:

   * Doctest can’t guess whether your expected output came from an
     exception traceback or from ordinary printing.  So, e.g., an
     example that expects ‘ValueError: 42 is prime’ will pass whether
     *note ValueError: 19c. is actually raised or if the example merely
     prints that traceback text.  In practice, ordinary output rarely
     begins with a traceback header line, so this doesn’t create real
     problems.

   * Each line of the traceback stack (if present) must be indented
     further than the first line of the example, `or' start with a
     non-alphanumeric character.  The first line following the traceback
     header indented the same and starting with an alphanumeric is taken
     to be the start of the exception detail.  Of course this does the
     right thing for genuine tracebacks.

   * When the *note IGNORE_EXCEPTION_DETAIL: 2b46. doctest option is
     specified, everything following the leftmost colon and any module
     information in the exception name is ignored.

   * The interactive shell omits the traceback header line for some
     *note SyntaxError: 3a6.s.  But doctest uses the traceback header
     line to distinguish exceptions from non-exceptions.  So in the rare
     case where you need to test a *note SyntaxError: 3a6. that omits
     the traceback header, you will need to manually add the traceback
     header line to your test example.

   * For some *note SyntaxError: 3a6.s, Python displays the character
     position of the syntax error, using a ‘^’ marker:

          >>> 1 1
            File "<stdin>", line 1
              1 1
                ^
          SyntaxError: invalid syntax

     Since the lines showing the position of the error come before the
     exception type and detail, they are not checked by doctest.  For
     example, the following test would pass, even though it puts the ‘^’
     marker in the wrong location:

          >>> 1 1
          Traceback (most recent call last):
            File "<stdin>", line 1
              1 1
              ^
          SyntaxError: invalid syntax

   ---------- Footnotes ----------

   (1) Examples containing both expected output and an exception are not
supported.  Trying to guess where one ends and the other begins is too
error-prone, and that also makes for a confusing test.


File: python.info,  Node: Option Flags,  Next: Directives,  Prev: What About Exceptions?,  Up: How It Works

5.26.3.8 Option Flags
.....................

A number of option flags control various aspects of doctest’s behavior.
Symbolic names for the flags are supplied as module constants, which can
be or’ed together and passed to various functions.  The names can also
be used in *note doctest directives: 2b40, and may be passed to the
doctest command line interface via the ‘-o’ option.

New in version 3.4: The ‘-o’ command line option.

The first group of options define test semantics, controlling aspects of
how doctest decides whether actual output matches an example’s expected
output:

 -- Data: doctest.DONT_ACCEPT_TRUE_FOR_1

     By default, if an expected output block contains just ‘1’, an
     actual output block containing just ‘1’ or just ‘True’ is
     considered to be a match, and similarly for ‘0’ versus ‘False’.
     When *note DONT_ACCEPT_TRUE_FOR_1: 2b49. is specified, neither
     substitution is allowed.  The default behavior caters to that
     Python changed the return type of many functions from integer to
     boolean; doctests expecting "little integer" output still work in
     these cases.  This option will probably go away, but not for
     several years.

 -- Data: doctest.DONT_ACCEPT_BLANKLINE

     By default, if an expected output block contains a line containing
     only the string ‘<BLANKLINE>’, then that line will match a blank
     line in the actual output.  Because a genuinely blank line delimits
     the expected output, this is the only way to communicate that a
     blank line is expected.  When *note DONT_ACCEPT_BLANKLINE: 2b4a. is
     specified, this substitution is not allowed.

 -- Data: doctest.NORMALIZE_WHITESPACE

     When specified, all sequences of whitespace (blanks and newlines)
     are treated as equal.  Any sequence of whitespace within the
     expected output will match any sequence of whitespace within the
     actual output.  By default, whitespace must match exactly.  *note
     NORMALIZE_WHITESPACE: 2b3f. is especially useful when a line of
     expected output is very long, and you want to wrap it across
     multiple lines in your source.

 -- Data: doctest.ELLIPSIS

     When specified, an ellipsis marker (‘...’) in the expected output
     can match any substring in the actual output.  This includes
     substrings that span line boundaries, and empty substrings, so it’s
     best to keep usage of this simple.  Complicated uses can lead to
     the same kinds of "oops, it matched too much!"  surprises that ‘.*’
     is prone to in regular expressions.

 -- Data: doctest.IGNORE_EXCEPTION_DETAIL

     When specified, an example that expects an exception passes if an
     exception of the expected type is raised, even if the exception
     detail does not match.  For example, an example expecting
     ‘ValueError: 42’ will pass if the actual exception raised is
     ‘ValueError: 3*14’, but will fail, e.g., if *note TypeError: 562.
     is raised.

     It will also ignore the module name used in Python 3 doctest
     reports.  Hence both of these variations will work with the flag
     specified, regardless of whether the test is run under Python 2.7
     or Python 3.2 (or later versions):

          >>> raise CustomError('message')
          Traceback (most recent call last):
          CustomError: message

          >>> raise CustomError('message')
          Traceback (most recent call last):
          my_module.CustomError: message

     Note that *note ELLIPSIS: a4d. can also be used to ignore the
     details of the exception message, but such a test may still fail
     based on whether or not the module details are printed as part of
     the exception name.  Using *note IGNORE_EXCEPTION_DETAIL: 2b46. and
     the details from Python 2.3 is also the only clear way to write a
     doctest that doesn’t care about the exception detail yet continues
     to pass under Python 2.3 or earlier (those releases do not support
     *note doctest directives: 2b40. and ignore them as irrelevant
     comments).  For example:

          >>> (1, 2)[3] = 'moo'
          Traceback (most recent call last):
            File "<stdin>", line 1, in ?
          TypeError: object doesn't support item assignment

     passes under Python 2.3 and later Python versions with the flag
     specified, even though the detail changed in Python 2.4 to say
     "does not" instead of "doesn’t".

     Changed in version 3.2: *note IGNORE_EXCEPTION_DETAIL: 2b46. now
     also ignores any information relating to the module containing the
     exception under test.

 -- Data: doctest.SKIP

     When specified, do not run the example at all.  This can be useful
     in contexts where doctest examples serve as both documentation and
     test cases, and an example should be included for documentation
     purposes, but should not be checked.  E.g., the example’s output
     might be random; or the example might depend on resources which
     would be unavailable to the test driver.

     The SKIP flag can also be used for temporarily "commenting out"
     examples.

 -- Data: doctest.COMPARISON_FLAGS

     A bitmask or’ing together all the comparison flags above.

The second group of options controls how test failures are reported:

 -- Data: doctest.REPORT_UDIFF

     When specified, failures that involve multi-line expected and
     actual outputs are displayed using a unified diff.

 -- Data: doctest.REPORT_CDIFF

     When specified, failures that involve multi-line expected and
     actual outputs will be displayed using a context diff.

 -- Data: doctest.REPORT_NDIFF

     When specified, differences are computed by ‘difflib.Differ’, using
     the same algorithm as the popular ‘ndiff.py’ utility.  This is the
     only method that marks differences within lines as well as across
     lines.  For example, if a line of expected output contains digit
     ‘1’ where actual output contains letter ‘l’, a line is inserted
     with a caret marking the mismatching column positions.

 -- Data: doctest.REPORT_ONLY_FIRST_FAILURE

     When specified, display the first failing example in each doctest,
     but suppress output for all remaining examples.  This will prevent
     doctest from reporting correct examples that break because of
     earlier failures; but it might also hide incorrect examples that
     fail independently of the first failure.  When *note
     REPORT_ONLY_FIRST_FAILURE: 2b4d. is specified, the remaining
     examples are still run, and still count towards the total number of
     failures reported; only the output is suppressed.

 -- Data: doctest.FAIL_FAST

     When specified, exit after the first failing example and don’t
     attempt to run the remaining examples.  Thus, the number of
     failures reported will be at most 1.  This flag may be useful
     during debugging, since examples after the first failure won’t even
     produce debugging output.

     The doctest command line accepts the option ‘-f’ as a shorthand for
     ‘-o FAIL_FAST’.

     New in version 3.4.

 -- Data: doctest.REPORTING_FLAGS

     A bitmask or’ing together all the reporting flags above.

There is also a way to register new option flag names, though this isn’t
useful unless you intend to extend *note doctest: 65. internals via
subclassing:

 -- Function: doctest.register_optionflag (name)

     Create a new option flag with a given name, and return the new
     flag’s integer value.  *note register_optionflag(): 2b4f. can be
     used when subclassing *note OutputChecker: 2b50. or *note
     DocTestRunner: 2b51. to create new options that are supported by
     your subclasses.  *note register_optionflag(): 2b4f. should always
     be called using the following idiom:

          MY_FLAG = register_optionflag('MY_FLAG')


File: python.info,  Node: Directives,  Next: Warnings<2>,  Prev: Option Flags,  Up: How It Works

5.26.3.9 Directives
...................

Doctest directives may be used to modify the *note option flags: 42e.
for an individual example.  Doctest directives are special Python
comments following an example’s source code:

     directive             ::= "#" "doctest:" directive_options
     directive_options     ::= directive_option ("," directive_option)\*
     directive_option      ::= on_or_off directive_option_name
     on_or_off             ::= "+" \| "-"
     directive_option_name ::= "DONT_ACCEPT_BLANKLINE" \| "NORMALIZE_WHITESPACE" \| ...

Whitespace is not allowed between the ‘+’ or ‘-’ and the directive
option name.  The directive option name can be any of the option flag
names explained above.

An example’s doctest directives modify doctest’s behavior for that
single example.  Use ‘+’ to enable the named behavior, or ‘-’ to disable
it.

For example, this test passes:

     >>> print(list(range(20))) # doctest: +NORMALIZE_WHITESPACE
     [0,   1,  2,  3,  4,  5,  6,  7,  8,  9,
     10,  11, 12, 13, 14, 15, 16, 17, 18, 19]

Without the directive it would fail, both because the actual output
doesn’t have two blanks before the single-digit list elements, and
because the actual output is on a single line.  This test also passes,
and also requires a directive to do so:

     >>> print(list(range(20))) # doctest: +ELLIPSIS
     [0, 1, ..., 18, 19]

Multiple directives can be used on a single physical line, separated by
commas:

     >>> print(list(range(20))) # doctest: +ELLIPSIS, +NORMALIZE_WHITESPACE
     [0,    1, ...,   18,    19]

If multiple directive comments are used for a single example, then they
are combined:

     >>> print(list(range(20))) # doctest: +ELLIPSIS
     ...                        # doctest: +NORMALIZE_WHITESPACE
     [0,    1, ...,   18,    19]

As the previous example shows, you can add ‘...’ lines to your example
containing only directives.  This can be useful when an example is too
long for a directive to comfortably fit on the same line:

     >>> print(list(range(5)) + list(range(10, 20)) + list(range(30, 40)))
     ... # doctest: +ELLIPSIS
     [0, ..., 4, 10, ..., 19, 30, ..., 39]

Note that since all options are disabled by default, and directives
apply only to the example they appear in, enabling options (via ‘+’ in a
directive) is usually the only meaningful choice.  However, option flags
can also be passed to functions that run doctests, establishing
different defaults.  In such cases, disabling an option via ‘-’ in a
directive can be useful.


File: python.info,  Node: Warnings<2>,  Prev: Directives,  Up: How It Works

5.26.3.10 Warnings
..................

*note doctest: 65. is serious about requiring exact matches in expected
output.  If even a single character doesn’t match, the test fails.  This
will probably surprise you a few times, as you learn exactly what Python
does and doesn’t guarantee about output.  For example, when printing a
dict, Python doesn’t guarantee that the key-value pairs will be printed
in any particular order, so a test like

     >>> foo()
     {"Hermione": "hippogryph", "Harry": "broomstick"}

is vulnerable!  One workaround is to do

     >>> foo() == {"Hermione": "hippogryph", "Harry": "broomstick"}
     True

instead.  Another is to do

     >>> d = sorted(foo().items())
     >>> d
     [('Harry', 'broomstick'), ('Hermione', 'hippogryph')]

There are others, but you get the idea.

Another bad idea is to print things that embed an object address, like

     >>> id(1.0) # certain to fail some of the time
     7948648
     >>> class C: pass
     >>> C()   # the default repr() for instances embeds an address
     <__main__.C instance at 0x00AC18F0>

The *note ELLIPSIS: a4d. directive gives a nice approach for the last
example:

     >>> C() #doctest: +ELLIPSIS
     <__main__.C instance at 0x...>

Floating-point numbers are also subject to small output variations
across platforms, because Python defers to the platform C library for
float formatting, and C libraries vary widely in quality here.

     >>> 1./7  # risky
     0.14285714285714285
     >>> print(1./7) # safer
     0.142857142857
     >>> print(round(1./7, 6)) # much safer
     0.142857

Numbers of the form ‘I/2.**J’ are safe across all platforms, and I often
contrive doctest examples to produce numbers of that form:

     >>> 3./4  # utterly safe
     0.75

Simple fractions are also easier for people to understand, and that
makes for better documentation.


File: python.info,  Node: Basic API,  Next: Unittest API,  Prev: How It Works,  Up: doctest --- Test interactive Python examples

5.26.3.11 Basic API
...................

The functions *note testmod(): a4c. and *note testfile(): 2b38. provide
a simple interface to doctest that should be sufficient for most basic
uses.  For a less formal introduction to these two functions, see
sections *note Simple Usage; Checking Examples in Docstrings: 2b33. and
*note Simple Usage; Checking Examples in a Text File: 2b37.

 -- Function: doctest.testfile (filename, module_relative=True,
          name=None, package=None, globs=None, verbose=None,
          report=True, optionflags=0, extraglobs=None,
          raise_on_error=False, parser=DocTestParser(), encoding=None)

     All arguments except `filename' are optional, and should be
     specified in keyword form.

     Test examples in the file named `filename'.  Return
     ‘(failure_count, test_count)’.

     Optional argument `module_relative' specifies how the filename
     should be interpreted:

        * If `module_relative' is ‘True’ (the default), then `filename'
          specifies an OS-independent module-relative path.  By default,
          this path is relative to the calling module’s directory; but
          if the `package' argument is specified, then it is relative to
          that package.  To ensure OS-independence, `filename' should
          use ‘/’ characters to separate path segments, and may not be
          an absolute path (i.e., it may not begin with ‘/’).

        * If `module_relative' is ‘False’, then `filename' specifies an
          OS-specific path.  The path may be absolute or relative;
          relative paths are resolved with respect to the current
          working directory.

     Optional argument `name' gives the name of the test; by default, or
     if ‘None’, ‘os.path.basename(filename)’ is used.

     Optional argument `package' is a Python package or the name of a
     Python package whose directory should be used as the base directory
     for a module-relative filename.  If no package is specified, then
     the calling module’s directory is used as the base directory for
     module-relative filenames.  It is an error to specify `package' if
     `module_relative' is ‘False’.

     Optional argument `globs' gives a dict to be used as the globals
     when executing examples.  A new shallow copy of this dict is
     created for the doctest, so its examples start with a clean slate.
     By default, or if ‘None’, a new empty dict is used.

     Optional argument `extraglobs' gives a dict merged into the globals
     used to execute examples.  This works like *note dict.update():
     a45.: if `globs' and `extraglobs' have a common key, the associated
     value in `extraglobs' appears in the combined dict.  By default, or
     if ‘None’, no extra globals are used.  This is an advanced feature
     that allows parameterization of doctests.  For example, a doctest
     can be written for a base class, using a generic name for the
     class, then reused to test any number of subclasses by passing an
     `extraglobs' dict mapping the generic name to the subclass to be
     tested.

     Optional argument `verbose' prints lots of stuff if true, and
     prints only failures if false; by default, or if ‘None’, it’s true
     if and only if ‘'-v'’ is in ‘sys.argv’.

     Optional argument `report' prints a summary at the end when true,
     else prints nothing at the end.  In verbose mode, the summary is
     detailed, else the summary is very brief (in fact, empty if all
     tests passed).

     Optional argument `optionflags' (default value 0) takes the
     bitwise-or of option flags.  See section *note Option Flags: 42e.

     Optional argument `raise_on_error' defaults to false.  If true, an
     exception is raised upon the first failure or unexpected exception
     in an example.  This allows failures to be post-mortem debugged.
     Default behavior is to continue running examples.

     Optional argument `parser' specifies a *note DocTestParser: 2b41.
     (or subclass) that should be used to extract tests from the files.
     It defaults to a normal parser (i.e., ‘DocTestParser()’).

     Optional argument `encoding' specifies an encoding that should be
     used to convert the file to unicode.

 -- Function: doctest.testmod (m=None, name=None, globs=None,
          verbose=None, report=True, optionflags=0, extraglobs=None,
          raise_on_error=False, exclude_empty=False)

     All arguments are optional, and all except for `m' should be
     specified in keyword form.

     Test examples in docstrings in functions and classes reachable from
     module `m' (or module *note __main__: 1. if `m' is not supplied or
     is ‘None’), starting with ‘m.__doc__’.

     Also test examples reachable from dict ‘m.__test__’, if it exists
     and is not ‘None’.  ‘m.__test__’ maps names (strings) to functions,
     classes and strings; function and class docstrings are searched for
     examples; strings are searched directly, as if they were
     docstrings.

     Only docstrings attached to objects belonging to module `m' are
     searched.

     Return ‘(failure_count, test_count)’.

     Optional argument `name' gives the name of the module; by default,
     or if ‘None’, ‘m.__name__’ is used.

     Optional argument `exclude_empty' defaults to false.  If true,
     objects for which no doctests are found are excluded from
     consideration.  The default is a backward compatibility hack, so
     that code still using ‘doctest.master.summarize()’ in conjunction
     with *note testmod(): a4c. continues to get output for objects with
     no tests.  The `exclude_empty' argument to the newer *note
     DocTestFinder: 2b5b. constructor defaults to true.

     Optional arguments `extraglobs', `verbose', `report',
     `optionflags', `raise_on_error', and `globs' are the same as for
     function *note testfile(): 2b38. above, except that `globs'
     defaults to ‘m.__dict__’.

 -- Function: doctest.run_docstring_examples (f, globs, verbose=False,
          name="NoName", compileflags=None, optionflags=0)

     Test examples associated with object `f'; for example, `f' may be a
     string, a module, a function, or a class object.

     A shallow copy of dictionary argument `globs' is used for the
     execution context.

     Optional argument `name' is used in failure messages, and defaults
     to ‘"NoName"’.

     If optional argument `verbose' is true, output is generated even if
     there are no failures.  By default, output is generated only in
     case of an example failure.

     Optional argument `compileflags' gives the set of flags that should
     be used by the Python compiler when running the examples.  By
     default, or if ‘None’, flags are deduced corresponding to the set
     of future features found in `globs'.

     Optional argument `optionflags' works as for function *note
     testfile(): 2b38. above.


File: python.info,  Node: Unittest API,  Next: Advanced API,  Prev: Basic API,  Up: doctest --- Test interactive Python examples

5.26.3.12 Unittest API
......................

As your collection of doctest’ed modules grows, you’ll want a way to run
all their doctests systematically.  *note doctest: 65. provides two
functions that can be used to create *note unittest: 118. test suites
from modules and text files containing doctests.  To integrate with
*note unittest: 118. test discovery, include a ‘load_tests()’ function
in your test module:

     import unittest
     import doctest
     import my_module_with_doctests

     def load_tests(loader, tests, ignore):
         tests.addTests(doctest.DocTestSuite(my_module_with_doctests))
         return tests

There are two main functions for creating *note unittest.TestSuite: 27d.
instances from text files and modules with doctests:

 -- Function: doctest.DocFileSuite (*paths, module_relative=True,
          package=None, setUp=None, tearDown=None, globs=None,
          optionflags=0, parser=DocTestParser(), encoding=None)

     Convert doctest tests from one or more text files to a *note
     unittest.TestSuite: 27d.

     The returned *note unittest.TestSuite: 27d. is to be run by the
     unittest framework and runs the interactive examples in each file.
     If an example in any file fails, then the synthesized unit test
     fails, and a ‘failureException’ exception is raised showing the
     name of the file containing the test and a (sometimes approximate)
     line number.

     Pass one or more paths (as strings) to text files to be examined.

     Options may be provided as keyword arguments:

     Optional argument `module_relative' specifies how the filenames in
     `paths' should be interpreted:

        * If `module_relative' is ‘True’ (the default), then each
          filename in `paths' specifies an OS-independent
          module-relative path.  By default, this path is relative to
          the calling module’s directory; but if the `package' argument
          is specified, then it is relative to that package.  To ensure
          OS-independence, each filename should use ‘/’ characters to
          separate path segments, and may not be an absolute path (i.e.,
          it may not begin with ‘/’).

        * If `module_relative' is ‘False’, then each filename in `paths'
          specifies an OS-specific path.  The path may be absolute or
          relative; relative paths are resolved with respect to the
          current working directory.

     Optional argument `package' is a Python package or the name of a
     Python package whose directory should be used as the base directory
     for module-relative filenames in `paths'.  If no package is
     specified, then the calling module’s directory is used as the base
     directory for module-relative filenames.  It is an error to specify
     `package' if `module_relative' is ‘False’.

     Optional argument `setUp' specifies a set-up function for the test
     suite.  This is called before running the tests in each file.  The
     `setUp' function will be passed a *note DocTest: 2b60. object.  The
     setUp function can access the test globals as the `globs' attribute
     of the test passed.

     Optional argument `tearDown' specifies a tear-down function for the
     test suite.  This is called after running the tests in each file.
     The `tearDown' function will be passed a *note DocTest: 2b60.
     object.  The setUp function can access the test globals as the
     `globs' attribute of the test passed.

     Optional argument `globs' is a dictionary containing the initial
     global variables for the tests.  A new copy of this dictionary is
     created for each test.  By default, `globs' is a new empty
     dictionary.

     Optional argument `optionflags' specifies the default doctest
     options for the tests, created by or-ing together individual option
     flags.  See section *note Option Flags: 42e.  See function *note
     set_unittest_reportflags(): 2b61. below for a better way to set
     reporting options.

     Optional argument `parser' specifies a *note DocTestParser: 2b41.
     (or subclass) that should be used to extract tests from the files.
     It defaults to a normal parser (i.e., ‘DocTestParser()’).

     Optional argument `encoding' specifies an encoding that should be
     used to convert the file to unicode.

     The global ‘__file__’ is added to the globals provided to doctests
     loaded from a text file using *note DocFileSuite(): 2b5f.

 -- Function: doctest.DocTestSuite (module=None, globs=None,
          extraglobs=None, test_finder=None, setUp=None, tearDown=None,
          checker=None)

     Convert doctest tests for a module to a *note unittest.TestSuite:
     27d.

     The returned *note unittest.TestSuite: 27d. is to be run by the
     unittest framework and runs each doctest in the module.  If any of
     the doctests fail, then the synthesized unit test fails, and a
     ‘failureException’ exception is raised showing the name of the file
     containing the test and a (sometimes approximate) line number.

     Optional argument `module' provides the module to be tested.  It
     can be a module object or a (possibly dotted) module name.  If not
     specified, the module calling this function is used.

     Optional argument `globs' is a dictionary containing the initial
     global variables for the tests.  A new copy of this dictionary is
     created for each test.  By default, `globs' is a new empty
     dictionary.

     Optional argument `extraglobs' specifies an extra set of global
     variables, which is merged into `globs'.  By default, no extra
     globals are used.

     Optional argument `test_finder' is the *note DocTestFinder: 2b5b.
     object (or a drop-in replacement) that is used to extract doctests
     from the module.

     Optional arguments `setUp', `tearDown', and `optionflags' are the
     same as for function *note DocFileSuite(): 2b5f. above.

     This function uses the same search technique as *note testmod():
     a4c.

     Changed in version 3.5: *note DocTestSuite(): 27c. returns an empty
     *note unittest.TestSuite: 27d. if `module' contains no docstrings
     instead of raising *note ValueError: 19c.

Under the covers, *note DocTestSuite(): 27c. creates a *note
unittest.TestSuite: 27d. out of ‘doctest.DocTestCase’ instances, and
‘DocTestCase’ is a subclass of *note unittest.TestCase: 501.
‘DocTestCase’ isn’t documented here (it’s an internal detail), but
studying its code can answer questions about the exact details of *note
unittest: 118. integration.

Similarly, *note DocFileSuite(): 2b5f. creates a *note
unittest.TestSuite: 27d. out of ‘doctest.DocFileCase’ instances, and
‘DocFileCase’ is a subclass of ‘DocTestCase’.

So both ways of creating a *note unittest.TestSuite: 27d. run instances
of ‘DocTestCase’.  This is important for a subtle reason: when you run
*note doctest: 65. functions yourself, you can control the *note
doctest: 65. options in use directly, by passing option flags to *note
doctest: 65. functions.  However, if you’re writing a *note unittest:
118. framework, *note unittest: 118. ultimately controls when and how
tests get run.  The framework author typically wants to control *note
doctest: 65. reporting options (perhaps, e.g., specified by command line
options), but there’s no way to pass options through *note unittest:
118. to *note doctest: 65. test runners.

For this reason, *note doctest: 65. also supports a notion of *note
doctest: 65. reporting flags specific to *note unittest: 118. support,
via this function:

 -- Function: doctest.set_unittest_reportflags (flags)

     Set the *note doctest: 65. reporting flags to use.

     Argument `flags' takes the bitwise-or of option flags.  See section
     *note Option Flags: 42e.  Only "reporting flags" can be used.

     This is a module-global setting, and affects all future doctests
     run by module *note unittest: 118.: the ‘runTest()’ method of
     ‘DocTestCase’ looks at the option flags specified for the test case
     when the ‘DocTestCase’ instance was constructed.  If no reporting
     flags were specified (which is the typical and expected case),
     *note doctest: 65.’s *note unittest: 118. reporting flags are or’ed
     into the option flags, and the option flags so augmented are passed
     to the *note DocTestRunner: 2b51. instance created to run the
     doctest.  If any reporting flags were specified when the
     ‘DocTestCase’ instance was constructed, *note doctest: 65.’s *note
     unittest: 118. reporting flags are ignored.

     The value of the *note unittest: 118. reporting flags in effect
     before the function was called is returned by the function.


File: python.info,  Node: Advanced API,  Next: Debugging,  Prev: Unittest API,  Up: doctest --- Test interactive Python examples

5.26.3.13 Advanced API
......................

The basic API is a simple wrapper that’s intended to make doctest easy
to use.  It is fairly flexible, and should meet most users’ needs;
however, if you require more fine-grained control over testing, or wish
to extend doctest’s capabilities, then you should use the advanced API.

The advanced API revolves around two container classes, which are used
to store the interactive examples extracted from doctest cases:

   * *note Example: 2b64.: A single Python *note statement: 1521, paired
     with its expected output.

   * *note DocTest: 2b60.: A collection of *note Example: 2b64.s,
     typically extracted from a single docstring or text file.

Additional processing classes are defined to find, parse, and run, and
check doctest examples:

   * *note DocTestFinder: 2b5b.: Finds all docstrings in a given module,
     and uses a *note DocTestParser: 2b41. to create a *note DocTest:
     2b60. from every docstring that contains interactive examples.

   * *note DocTestParser: 2b41.: Creates a *note DocTest: 2b60. object
     from a string (such as an object’s docstring).

   * *note DocTestRunner: 2b51.: Executes the examples in a *note
     DocTest: 2b60, and uses an *note OutputChecker: 2b50. to verify
     their output.

   * *note OutputChecker: 2b50.: Compares the actual output from a
     doctest example with the expected output, and decides whether they
     match.

The relationships among these processing classes are summarized in the
following diagram:

                                 list of:
     +------+                   +---------+
     |module| --DocTestFinder-> | DocTest | --DocTestRunner-> results
     +------+    |        ^     +---------+     |       ^    (printed)
                 |        |     | Example |     |       |
                 v        |     |   ...   |     v       |
                DocTestParser   | Example |   OutputChecker
                                +---------+

* Menu:

* DocTest Objects:: 
* Example Objects:: 
* DocTestFinder objects:: 
* DocTestParser objects:: 
* DocTestRunner objects:: 
* OutputChecker objects:: 


File: python.info,  Node: DocTest Objects,  Next: Example Objects,  Up: Advanced API

5.26.3.14 DocTest Objects
.........................

 -- Class: doctest.DocTest (examples, globs, name, filename, lineno,
          docstring)

     A collection of doctest examples that should be run in a single
     namespace.  The constructor arguments are used to initialize the
     attributes of the same names.

     *note DocTest: 2b60. defines the following attributes.  They are
     initialized by the constructor, and should not be modified
     directly.

      -- Attribute: examples

          A list of *note Example: 2b64. objects encoding the individual
          interactive Python examples that should be run by this test.

      -- Attribute: globs

          The namespace (aka globals) that the examples should be run
          in.  This is a dictionary mapping names to values.  Any
          changes to the namespace made by the examples (such as binding
          new variables) will be reflected in *note globs: 2b68. after
          the test is run.

      -- Attribute: name

          A string name identifying the *note DocTest: 2b60.  Typically,
          this is the name of the object or file that the test was
          extracted from.

      -- Attribute: filename

          The name of the file that this *note DocTest: 2b60. was
          extracted from; or ‘None’ if the filename is unknown, or if
          the *note DocTest: 2b60. was not extracted from a file.

      -- Attribute: lineno

          The line number within *note filename: 2b6a. where this *note
          DocTest: 2b60. begins, or ‘None’ if the line number is
          unavailable.  This line number is zero-based with respect to
          the beginning of the file.

      -- Attribute: docstring

          The string that the test was extracted from, or ’None’ if the
          string is unavailable, or if the test was not extracted from a
          string.


File: python.info,  Node: Example Objects,  Next: DocTestFinder objects,  Prev: DocTest Objects,  Up: Advanced API

5.26.3.15 Example Objects
.........................

 -- Class: doctest.Example (source, want, exc_msg=None, lineno=0,
          indent=0, options=None)

     A single interactive example, consisting of a Python statement and
     its expected output.  The constructor arguments are used to
     initialize the attributes of the same names.

     *note Example: 2b64. defines the following attributes.  They are
     initialized by the constructor, and should not be modified
     directly.

      -- Attribute: source

          A string containing the example’s source code.  This source
          code consists of a single Python statement, and always ends
          with a newline; the constructor adds a newline when necessary.

      -- Attribute: want

          The expected output from running the example’s source code
          (either from stdout, or a traceback in case of exception).
          *note want: 2b70. ends with a newline unless no output is
          expected, in which case it’s an empty string.  The constructor
          adds a newline when necessary.

      -- Attribute: exc_msg

          The exception message generated by the example, if the example
          is expected to generate an exception; or ‘None’ if it is not
          expected to generate an exception.  This exception message is
          compared against the return value of *note
          traceback.format_exception_only(): 2b72.  *note exc_msg: 2b71.
          ends with a newline unless it’s ‘None’.  The constructor adds
          a newline if needed.

      -- Attribute: lineno

          The line number within the string containing this example
          where the example begins.  This line number is zero-based with
          respect to the beginning of the containing string.

      -- Attribute: indent

          The example’s indentation in the containing string, i.e., the
          number of space characters that precede the example’s first
          prompt.

      -- Attribute: options

          A dictionary mapping from option flags to ‘True’ or ‘False’,
          which is used to override default options for this example.
          Any option flags not contained in this dictionary are left at
          their default value (as specified by the *note DocTestRunner:
          2b51.’s ‘optionflags’).  By default, no options are set.


File: python.info,  Node: DocTestFinder objects,  Next: DocTestParser objects,  Prev: Example Objects,  Up: Advanced API

5.26.3.16 DocTestFinder objects
...............................

 -- Class: doctest.DocTestFinder (verbose=False, parser=DocTestParser(),
          recurse=True, exclude_empty=True)

     A processing class used to extract the *note DocTest: 2b60.s that
     are relevant to a given object, from its docstring and the
     docstrings of its contained objects.  *note DocTest: 2b60.s can be
     extracted from modules, classes, functions, methods, staticmethods,
     classmethods, and properties.

     The optional argument `verbose' can be used to display the objects
     searched by the finder.  It defaults to ‘False’ (no output).

     The optional argument `parser' specifies the *note DocTestParser:
     2b41. object (or a drop-in replacement) that is used to extract
     doctests from docstrings.

     If the optional argument `recurse' is false, then *note
     DocTestFinder.find(): 2b78. will only examine the given object, and
     not any contained objects.

     If the optional argument `exclude_empty' is false, then *note
     DocTestFinder.find(): 2b78. will include tests for objects with
     empty docstrings.

     *note DocTestFinder: 2b5b. defines the following method:

      -- Method: find (obj[, name][, module][, globs][, extraglobs])

          Return a list of the *note DocTest: 2b60.s that are defined by
          `obj'’s docstring, or by any of its contained objects’
          docstrings.

          The optional argument `name' specifies the object’s name; this
          name will be used to construct names for the returned *note
          DocTest: 2b60.s.  If `name' is not specified, then
          ‘obj.__name__’ is used.

          The optional parameter `module' is the module that contains
          the given object.  If the module is not specified or is None,
          then the test finder will attempt to automatically determine
          the correct module.  The object’s module is used:

             * As a default namespace, if `globs' is not specified.

             * To prevent the DocTestFinder from extracting DocTests
               from objects that are imported from other modules.
               (Contained objects with modules other than `module' are
               ignored.)

             * To find the name of the file containing the object.

             * To help find the line number of the object within its
               file.

          If `module' is ‘False’, no attempt to find the module will be
          made.  This is obscure, of use mostly in testing doctest
          itself: if `module' is ‘False’, or is ‘None’ but cannot be
          found automatically, then all objects are considered to belong
          to the (non-existent) module, so all contained objects will
          (recursively) be searched for doctests.

          The globals for each *note DocTest: 2b60. is formed by
          combining `globs' and `extraglobs' (bindings in `extraglobs'
          override bindings in `globs').  A new shallow copy of the
          globals dictionary is created for each *note DocTest: 2b60.
          If `globs' is not specified, then it defaults to the module’s
          `__dict__', if specified, or ‘{}’ otherwise.  If `extraglobs'
          is not specified, then it defaults to ‘{}’.


File: python.info,  Node: DocTestParser objects,  Next: DocTestRunner objects,  Prev: DocTestFinder objects,  Up: Advanced API

5.26.3.17 DocTestParser objects
...............................

 -- Class: doctest.DocTestParser

     A processing class used to extract interactive examples from a
     string, and use them to create a *note DocTest: 2b60. object.

     *note DocTestParser: 2b41. defines the following methods:

      -- Method: get_doctest (string, globs, name, filename, lineno)

          Extract all doctest examples from the given string, and
          collect them into a *note DocTest: 2b60. object.

          `globs', `name', `filename', and `lineno' are attributes for
          the new *note DocTest: 2b60. object.  See the documentation
          for *note DocTest: 2b60. for more information.

      -- Method: get_examples (string, name='<string>')

          Extract all doctest examples from the given string, and return
          them as a list of *note Example: 2b64. objects.  Line numbers
          are 0-based.  The optional argument `name' is a name
          identifying this string, and is only used for error messages.

      -- Method: parse (string, name='<string>')

          Divide the given string into examples and intervening text,
          and return them as a list of alternating *note Example: 2b64.s
          and strings.  Line numbers for the *note Example: 2b64.s are
          0-based.  The optional argument `name' is a name identifying
          this string, and is only used for error messages.


File: python.info,  Node: DocTestRunner objects,  Next: OutputChecker objects,  Prev: DocTestParser objects,  Up: Advanced API

5.26.3.18 DocTestRunner objects
...............................

 -- Class: doctest.DocTestRunner (checker=None, verbose=None,
          optionflags=0)

     A processing class used to execute and verify the interactive
     examples in a *note DocTest: 2b60.

     The comparison between expected outputs and actual outputs is done
     by an *note OutputChecker: 2b50.  This comparison may be customized
     with a number of option flags; see section *note Option Flags: 42e.
     for more information.  If the option flags are insufficient, then
     the comparison may also be customized by passing a subclass of
     *note OutputChecker: 2b50. to the constructor.

     The test runner’s display output can be controlled in two ways.
     First, an output function can be passed to ‘TestRunner.run()’; this
     function will be called with strings that should be displayed.  It
     defaults to ‘sys.stdout.write’.  If capturing the output is not
     sufficient, then the display output can be also customized by
     subclassing DocTestRunner, and overriding the methods *note
     report_start(): 2b80, *note report_success(): 2b81, *note
     report_unexpected_exception(): 2b82, and *note report_failure():
     2b83.

     The optional keyword argument `checker' specifies the *note
     OutputChecker: 2b50. object (or drop-in replacement) that should be
     used to compare the expected outputs to the actual outputs of
     doctest examples.

     The optional keyword argument `verbose' controls the *note
     DocTestRunner: 2b51.’s verbosity.  If `verbose' is ‘True’, then
     information is printed about each example, as it is run.  If
     `verbose' is ‘False’, then only failures are printed.  If `verbose'
     is unspecified, or ‘None’, then verbose output is used iff the
     command-line switch ‘-v’ is used.

     The optional keyword argument `optionflags' can be used to control
     how the test runner compares expected output to actual output, and
     how it displays failures.  For more information, see section *note
     Option Flags: 42e.

     *note DocTestParser: 2b41. defines the following methods:

      -- Method: report_start (out, test, example)

          Report that the test runner is about to process the given
          example.  This method is provided to allow subclasses of *note
          DocTestRunner: 2b51. to customize their output; it should not
          be called directly.

          `example' is the example about to be processed.  `test' is the
          test `containing example'.  `out' is the output function that
          was passed to *note DocTestRunner.run(): 2b84.

      -- Method: report_success (out, test, example, got)

          Report that the given example ran successfully.  This method
          is provided to allow subclasses of *note DocTestRunner: 2b51.
          to customize their output; it should not be called directly.

          `example' is the example about to be processed.  `got' is the
          actual output from the example.  `test' is the test containing
          `example'.  `out' is the output function that was passed to
          *note DocTestRunner.run(): 2b84.

      -- Method: report_failure (out, test, example, got)

          Report that the given example failed.  This method is provided
          to allow subclasses of *note DocTestRunner: 2b51. to customize
          their output; it should not be called directly.

          `example' is the example about to be processed.  `got' is the
          actual output from the example.  `test' is the test containing
          `example'.  `out' is the output function that was passed to
          *note DocTestRunner.run(): 2b84.

      -- Method: report_unexpected_exception (out, test, example,
               exc_info)

          Report that the given example raised an unexpected exception.
          This method is provided to allow subclasses of *note
          DocTestRunner: 2b51. to customize their output; it should not
          be called directly.

          `example' is the example about to be processed.  `exc_info' is
          a tuple containing information about the unexpected exception
          (as returned by *note sys.exc_info(): 8ca.).  `test' is the
          test containing `example'.  `out' is the output function that
          was passed to *note DocTestRunner.run(): 2b84.

      -- Method: run (test, compileflags=None, out=None,
               clear_globs=True)

          Run the examples in `test' (a *note DocTest: 2b60. object),
          and display the results using the writer function `out'.

          The examples are run in the namespace ‘test.globs’.  If
          `clear_globs' is true (the default), then this namespace will
          be cleared after the test runs, to help with garbage
          collection.  If you would like to examine the namespace after
          the test completes, then use `clear_globs=False'.

          `compileflags' gives the set of flags that should be used by
          the Python compiler when running the examples.  If not
          specified, then it will default to the set of future-import
          flags that apply to `globs'.

          The output of each example is checked using the *note
          DocTestRunner: 2b51.’s output checker, and the results are
          formatted by the ‘DocTestRunner.report_*()’ methods.

      -- Method: summarize (verbose=None)

          Print a summary of all the test cases that have been run by
          this DocTestRunner, and return a *note named tuple: 787.
          ‘TestResults(failed, attempted)’.

          The optional `verbose' argument controls how detailed the
          summary is.  If the verbosity is not specified, then the *note
          DocTestRunner: 2b51.’s verbosity is used.


File: python.info,  Node: OutputChecker objects,  Prev: DocTestRunner objects,  Up: Advanced API

5.26.3.19 OutputChecker objects
...............................

 -- Class: doctest.OutputChecker

     A class used to check the whether the actual output from a doctest
     example matches the expected output.  *note OutputChecker: 2b50.
     defines two methods: *note check_output(): 2b88, which compares a
     given pair of outputs, and returns true if they match; and *note
     output_difference(): 2b89, which returns a string describing the
     differences between two outputs.

     *note OutputChecker: 2b50. defines the following methods:

      -- Method: check_output (want, got, optionflags)

          Return ‘True’ iff the actual output from an example (`got')
          matches the expected output (`want').  These strings are
          always considered to match if they are identical; but
          depending on what option flags the test runner is using,
          several non-exact match types are also possible.  See section
          *note Option Flags: 42e. for more information about option
          flags.

      -- Method: output_difference (example, got, optionflags)

          Return a string describing the differences between the
          expected output for a given example (`example') and the actual
          output (`got').  `optionflags' is the set of option flags used
          to compare `want' and `got'.


File: python.info,  Node: Debugging,  Next: Soapbox,  Prev: Advanced API,  Up: doctest --- Test interactive Python examples

5.26.3.20 Debugging
...................

Doctest provides several mechanisms for debugging doctest examples:

   * Several functions convert doctests to executable Python programs,
     which can be run under the Python debugger, *note pdb: c7.

   * The *note DebugRunner: 2b8c. class is a subclass of *note
     DocTestRunner: 2b51. that raises an exception for the first failing
     example, containing information about that example.  This
     information can be used to perform post-mortem debugging on the
     example.

   * The *note unittest: 118. cases generated by *note DocTestSuite():
     27c. support the *note debug(): 2b8d. method defined by *note
     unittest.TestCase: 501.

   * You can add a call to *note pdb.set_trace(): 2b8e. in a doctest
     example, and you’ll drop into the Python debugger when that line is
     executed.  Then you can inspect current values of variables, and so
     on.  For example, suppose ‘a.py’ contains just this module
     docstring:

          """
          >>> def f(x):
          ...     g(x*2)
          >>> def g(x):
          ...     print(x+3)
          ...     import pdb; pdb.set_trace()
          >>> f(3)
          9
          """

     Then an interactive Python session may look like this:

          >>> import a, doctest
          >>> doctest.testmod(a)
          --Return--
          > <doctest a[1]>(3)g()->None
          -> import pdb; pdb.set_trace()
          (Pdb) list
            1     def g(x):
            2         print(x+3)
            3  ->     import pdb; pdb.set_trace()
          [EOF]
          (Pdb) p x
          6
          (Pdb) step
          --Return--
          > <doctest a[0]>(2)f()->None
          -> g(x*2)
          (Pdb) list
            1     def f(x):
            2  ->     g(x*2)
          [EOF]
          (Pdb) p x
          3
          (Pdb) step
          --Return--
          > <doctest a[2]>(1)?()->None
          -> f(3)
          (Pdb) cont
          (0, 3)
          >>>

Functions that convert doctests to Python code, and possibly run the
synthesized code under the debugger:

 -- Function: doctest.script_from_examples (s)

     Convert text with examples to a script.

     Argument `s' is a string containing doctest examples.  The string
     is converted to a Python script, where doctest examples in `s' are
     converted to regular code, and everything else is converted to
     Python comments.  The generated script is returned as a string.
     For example,

          import doctest
          print(doctest.script_from_examples(r"""
              Set x and y to 1 and 2.
              >>> x, y = 1, 2

              Print their sum:
              >>> print(x+y)
              3
          """))

     displays:

          # Set x and y to 1 and 2.
          x, y = 1, 2
          #
          # Print their sum:
          print(x+y)
          # Expected:
          ## 3

     This function is used internally by other functions (see below),
     but can also be useful when you want to transform an interactive
     Python session into a Python script.

 -- Function: doctest.testsource (module, name)

     Convert the doctest for an object to a script.

     Argument `module' is a module object, or dotted name of a module,
     containing the object whose doctests are of interest.  Argument
     `name' is the name (within the module) of the object with the
     doctests of interest.  The result is a string, containing the
     object’s docstring converted to a Python script, as described for
     *note script_from_examples(): 2b8f. above.  For example, if module
     ‘a.py’ contains a top-level function ‘f()’, then

          import a, doctest
          print(doctest.testsource(a, "a.f"))

     prints a script version of function ‘f()’’s docstring, with
     doctests converted to code, and the rest placed in comments.

 -- Function: doctest.debug (module, name, pm=False)

     Debug the doctests for an object.

     The `module' and `name' arguments are the same as for function
     *note testsource(): 2b90. above.  The synthesized Python script for
     the named object’s docstring is written to a temporary file, and
     then that file is run under the control of the Python debugger,
     *note pdb: c7.

     A shallow copy of ‘module.__dict__’ is used for both local and
     global execution context.

     Optional argument `pm' controls whether post-mortem debugging is
     used.  If `pm' has a true value, the script file is run directly,
     and the debugger gets involved only if the script terminates via
     raising an unhandled exception.  If it does, then post-mortem
     debugging is invoked, via *note pdb.post_mortem(): 9bb, passing the
     traceback object from the unhandled exception.  If `pm' is not
     specified, or is false, the script is run under the debugger from
     the start, via passing an appropriate *note exec(): 8ac. call to
     *note pdb.run(): 2b91.

 -- Function: doctest.debug_src (src, pm=False, globs=None)

     Debug the doctests in a string.

     This is like function *note debug(): 2b8d. above, except that a
     string containing doctest examples is specified directly, via the
     `src' argument.

     Optional argument `pm' has the same meaning as in function *note
     debug(): 2b8d. above.

     Optional argument `globs' gives a dictionary to use as both local
     and global execution context.  If not specified, or ‘None’, an
     empty dictionary is used.  If specified, a shallow copy of the
     dictionary is used.

The *note DebugRunner: 2b8c. class, and the special exceptions it may
raise, are of most interest to testing framework authors, and will only
be sketched here.  See the source code, and especially *note
DebugRunner: 2b8c.’s docstring (which is a doctest!)  for more details:

 -- Class: doctest.DebugRunner (checker=None, verbose=None,
          optionflags=0)

     A subclass of *note DocTestRunner: 2b51. that raises an exception
     as soon as a failure is encountered.  If an unexpected exception
     occurs, an *note UnexpectedException: 2b93. exception is raised,
     containing the test, the example, and the original exception.  If
     the output doesn’t match, then a *note DocTestFailure: 2b94.
     exception is raised, containing the test, the example, and the
     actual output.

     For information about the constructor parameters and methods, see
     the documentation for *note DocTestRunner: 2b51. in section *note
     Advanced API: 2b62.

There are two exceptions that may be raised by *note DebugRunner: 2b8c.
instances:

 -- Exception: doctest.DocTestFailure (test, example, got)

     An exception raised by *note DocTestRunner: 2b51. to signal that a
     doctest example’s actual output did not match its expected output.
     The constructor arguments are used to initialize the attributes of
     the same names.

*note DocTestFailure: 2b94. defines the following attributes:

 -- Attribute: DocTestFailure.test

     The *note DocTest: 2b60. object that was being run when the example
     failed.

 -- Attribute: DocTestFailure.example

     The *note Example: 2b64. that failed.

 -- Attribute: DocTestFailure.got

     The example’s actual output.

 -- Exception: doctest.UnexpectedException (test, example, exc_info)

     An exception raised by *note DocTestRunner: 2b51. to signal that a
     doctest example raised an unexpected exception.  The constructor
     arguments are used to initialize the attributes of the same names.

*note UnexpectedException: 2b93. defines the following attributes:

 -- Attribute: UnexpectedException.test

     The *note DocTest: 2b60. object that was being run when the example
     failed.

 -- Attribute: UnexpectedException.example

     The *note Example: 2b64. that failed.

 -- Attribute: UnexpectedException.exc_info

     A tuple containing information about the unexpected exception, as
     returned by *note sys.exc_info(): 8ca.


File: python.info,  Node: Soapbox,  Prev: Debugging,  Up: doctest --- Test interactive Python examples

5.26.3.21 Soapbox
.................

As mentioned in the introduction, *note doctest: 65. has grown to have
three primary uses:

  1. Checking examples in docstrings.

  2. Regression testing.

  3. Executable documentation / literate testing.

These uses have different requirements, and it is important to
distinguish them.  In particular, filling your docstrings with obscure
test cases makes for bad documentation.

When writing a docstring, choose docstring examples with care.  There’s
an art to this that needs to be learned—it may not be natural at first.
Examples should add genuine value to the documentation.  A good example
can often be worth many words.  If done with care, the examples will be
invaluable for your users, and will pay back the time it takes to
collect them many times over as the years go by and things change.  I’m
still amazed at how often one of my *note doctest: 65. examples stops
working after a "harmless" change.

Doctest also makes an excellent tool for regression testing, especially
if you don’t skimp on explanatory text.  By interleaving prose and
examples, it becomes much easier to keep track of what’s actually being
tested, and why.  When a test fails, good prose can make it much easier
to figure out what the problem is, and how it should be fixed.  It’s
true that you could write extensive comments in code-based testing, but
few programmers do.  Many have found that using doctest approaches
instead leads to much clearer tests.  Perhaps this is simply because
doctest makes writing prose a little easier than writing code, while
writing comments in code is a little harder.  I think it goes deeper
than just that: the natural attitude when writing a doctest-based test
is that you want to explain the fine points of your software, and
illustrate them with examples.  This in turn naturally leads to test
files that start with the simplest features, and logically progress to
complications and edge cases.  A coherent narrative is the result,
instead of a collection of isolated functions that test isolated bits of
functionality seemingly at random.  It’s a different attitude, and
produces different results, blurring the distinction between testing and
explaining.

Regression testing is best confined to dedicated objects or files.
There are several options for organizing tests:

   * Write text files containing test cases as interactive examples, and
     test the files using *note testfile(): 2b38. or *note
     DocFileSuite(): 2b5f.  This is recommended, although is easiest to
     do for new projects, designed from the start to use doctest.

   * Define functions named ‘_regrtest_topic’ that consist of single
     docstrings, containing test cases for the named topics.  These
     functions can be included in the same file as the module, or
     separated out into a separate test file.

   * Define a ‘__test__’ dictionary mapping from regression test topics
     to docstrings containing test cases.

When you have placed your tests in a module, the module can itself be
the test runner.  When a test fails, you can arrange for your test
runner to re-run only the failing doctest while you debug the problem.
Here is a minimal example of such a test runner:

     if __name__ == '__main__':
         import doctest
         flags = doctest.REPORT_NDIFF|doctest.FAIL_FAST
         if len(sys.argv) > 1:
             name = sys.argv[1]
             if name in globals():
                 obj = globals()[name]
             else:
                 obj = __test__[name]
             doctest.run_docstring_examples(obj, globals(), name=name,
                                            optionflags=flags)
         else:
             fail, total = doctest.testmod(optionflags=flags)
             print("{} failures out of {} tests".format(fail, total))


File: python.info,  Node: unittest --- Unit testing framework,  Next: unittest mock --- mock object library,  Prev: doctest --- Test interactive Python examples,  Up: Development Tools

5.26.4 ‘unittest’ — Unit testing framework
------------------------------------------

(If you are already familiar with the basic concepts of testing, you
might want to skip to *note the list of assert methods: 2b9f.)

The *note unittest: 118. unit testing framework was originally inspired
by JUnit and has a similar flavor as major unit testing frameworks in
other languages.  It supports test automation, sharing of setup and
shutdown code for tests, aggregation of tests into collections, and
independence of the tests from the reporting framework.

To achieve this, *note unittest: 118. supports some important concepts
in an object-oriented way:

test fixture

     A `test fixture' represents the preparation needed to perform one
     or more tests, and any associate cleanup actions.  This may
     involve, for example, creating temporary or proxy databases,
     directories, or starting a server process.

test case

     A `test case' is the individual unit of testing.  It checks for a
     specific response to a particular set of inputs.  *note unittest:
     118. provides a base class, *note TestCase: 501, which may be used
     to create new test cases.

test suite

     A `test suite' is a collection of test cases, test suites, or both.
     It is used to aggregate tests that should be executed together.

test runner

     A `test runner' is a component which orchestrates the execution of
     tests and provides the outcome to the user.  The runner may use a
     graphical interface, a textual interface, or return a special value
     to indicate the results of executing the tests.

See also
........

Module *note doctest: 65.

     Another test-support module with a very different flavor.

Simple Smalltalk Testing: With Patterns(1)

     Kent Beck’s original paper on testing frameworks using the pattern
     shared by *note unittest: 118.

Nose(2) and py.test(3)

     Third-party unittest frameworks with a lighter-weight syntax for
     writing tests.  For example, ‘assert func(10) == 42’.

The Python Testing Tools Taxonomy(4)

     An extensive list of Python testing tools including functional
     testing frameworks and mock object libraries.

Testing in Python Mailing List(5)

     A special-interest-group for discussion of testing, and testing
     tools, in Python.

The script ‘Tools/unittestgui/unittestgui.py’ in the Python source
distribution is a GUI tool for test discovery and execution.  This is
intended largely for ease of use for those new to unit testing.  For
production environments it is recommended that tests be driven by a
continuous integration system such as Buildbot(6), Jenkins(7) or
Hudson(8).

* Menu:

* Basic example:: 
* Command-Line Interface:: 
* Test Discovery:: 
* Organizing test code:: 
* Re-using old test code:: 
* Skipping tests and expected failures:: 
* Distinguishing test iterations using subtests:: 
* Classes and functions:: 
* Class and Module Fixtures:: 
* Signal Handling:: 

   ---------- Footnotes ----------

   (1) 
https://web.archive.org/web/20150315073817/http://www.xprogramming.com/testfram.htm

   (2) https://nose.readthedocs.org/en/latest/

   (3) http://pytest.org

   (4) https://wiki.python.org/moin/PythonTestingToolsTaxonomy

   (5) http://lists.idyll.org/listinfo/testing-in-python

   (6) http://buildbot.net/

   (7) http://jenkins-ci.org/

   (8) http://hudson-ci.org/


File: python.info,  Node: Basic example,  Next: Command-Line Interface,  Up: unittest --- Unit testing framework

5.26.4.1 Basic example
......................

The *note unittest: 118. module provides a rich set of tools for
constructing and running tests.  This section demonstrates that a small
subset of the tools suffice to meet the needs of most users.

Here is a short script to test three string methods:

     import unittest

     class TestStringMethods(unittest.TestCase):

       def test_upper(self):
           self.assertEqual('foo'.upper(), 'FOO')

       def test_isupper(self):
           self.assertTrue('FOO'.isupper())
           self.assertFalse('Foo'.isupper())

       def test_split(self):
           s = 'hello world'
           self.assertEqual(s.split(), ['hello', 'world'])
           # check that s.split fails when the separator is not a string
           with self.assertRaises(TypeError):
               s.split(2)

     if __name__ == '__main__':
         unittest.main()

A testcase is created by subclassing *note unittest.TestCase: 501.  The
three individual tests are defined with methods whose names start with
the letters ‘test’.  This naming convention informs the test runner
about which methods represent tests.

The crux of each test is a call to *note assertEqual(): 813. to check
for an expected result; *note assertTrue(): 812. or *note assertFalse():
93d. to verify a condition; or *note assertRaises(): 6f6. to verify that
a specific exception gets raised.  These methods are used instead of the
*note assert: a87. statement so the test runner can accumulate all test
results and produce a report.

The *note setUp(): 943. and *note tearDown(): 944. methods allow you to
define instructions that will be executed before and after each test
method.  They are covered in more detail in the section *note Organizing
test code: 2ba2.

The final block shows a simple way to run the tests.  *note
unittest.main(): 504. provides a command-line interface to the test
script.  When run from the command line, the above script produces an
output that looks like this:

     ...
     ----------------------------------------------------------------------
     Ran 3 tests in 0.000s

     OK

Passing the ‘-v’ option to your test script will instruct *note
unittest.main(): 504. to enable a higher level of verbosity, and produce
the following output:

     test_isupper (__main__.TestStringMethods) ... ok
     test_split (__main__.TestStringMethods) ... ok
     test_upper (__main__.TestStringMethods) ... ok

     ----------------------------------------------------------------------
     Ran 3 tests in 0.001s

     OK

The above examples show the most commonly used *note unittest: 118.
features which are sufficient to meet many everyday testing needs.  The
remainder of the documentation explores the full feature set from first
principles.


File: python.info,  Node: Command-Line Interface,  Next: Test Discovery,  Prev: Basic example,  Up: unittest --- Unit testing framework

5.26.4.2 Command-Line Interface
...............................

The unittest module can be used from the command line to run tests from
modules, classes or even individual test methods:

     python -m unittest test_module1 test_module2
     python -m unittest test_module.TestClass
     python -m unittest test_module.TestClass.test_method

You can pass in a list with any combination of module names, and fully
qualified class or method names.

Test modules can be specified by file path as well:

     python -m unittest tests/test_something.py

This allows you to use the shell filename completion to specify the test
module.  The file specified must still be importable as a module.  The
path is converted to a module name by removing the ’.py’ and converting
path separators into ’.’.  If you want to execute a test file that isn’t
importable as a module you should execute the file directly instead.

You can run tests with more detail (higher verbosity) by passing in the
-v flag:

     python -m unittest -v test_module

When executed without arguments *note Test Discovery: 2ba5. is started:

     python -m unittest

For a list of all the command-line options:

     python -m unittest -h

Changed in version 3.2: In earlier versions it was only possible to run
individual test methods and not modules or classes.

* Menu:

* Command-line options:: 


File: python.info,  Node: Command-line options,  Up: Command-Line Interface

5.26.4.3 Command-line options
.............................

‘unittest’ supports these command-line options:

 -- Program Option: -b, --buffer

     The standard output and standard error streams are buffered during
     the test run.  Output during a passing test is discarded.  Output
     is echoed normally on test fail or error and is added to the
     failure messages.

 -- Program Option: -c, --catch

     ‘Control-C’ during the test run waits for the current test to end
     and then reports all the results so far.  A second ‘Control-C’
     raises the normal *note KeyboardInterrupt: 1a3. exception.

     See *note Signal Handling: 2ba9. for the functions that provide
     this functionality.

 -- Program Option: -f, --failfast

     Stop the test run on the first error or failure.

 -- Program Option: --locals

     Show local variables in tracebacks.

New in version 3.2: The command-line options ‘-b’, ‘-c’ and ‘-f’ were
added.

New in version 3.5: The command-line option ‘--locals’.

The command line can also be used for test discovery, for running all of
the tests in a project or just a subset.


File: python.info,  Node: Test Discovery,  Next: Organizing test code,  Prev: Command-Line Interface,  Up: unittest --- Unit testing framework

5.26.4.4 Test Discovery
.......................

New in version 3.2.

Unittest supports simple test discovery.  In order to be compatible with
test discovery, all of the test files must be *note modules: c3d. or
*note packages: c4a. (including *note namespace packages: e7b.)
importable from the top-level directory of the project (this means that
their filenames must be valid *note identifiers: d90.).

Test discovery is implemented in *note TestLoader.discover(): 506, but
can also be used from the command line.  The basic command-line usage
is:

     cd project_directory
     python -m unittest discover

     Note: As a shortcut, ‘python -m unittest’ is the equivalent of
     ‘python -m unittest discover’.  If you want to pass arguments to
     test discovery the ‘discover’ sub-command must be used explicitly.

The ‘discover’ sub-command has the following options:

 -- Program Option: -v, --verbose

     Verbose output

 -- Program Option: -s, --start-directory directory

     Directory to start discovery (‘.’ default)

 -- Program Option: -p, --pattern pattern

     Pattern to match test files (‘test*.py’ default)

 -- Program Option: -t, --top-level-directory directory

     Top level directory of project (defaults to start directory)

The *note -s: 2baf, *note -p: 2bb1, and *note -t: 2bb3. options can be
passed in as positional arguments in that order.  The following two
command lines are equivalent:

     python -m unittest discover -s project_directory -p "*_test.py"
     python -m unittest discover project_directory "*_test.py"

As well as being a path it is possible to pass a package name, for
example ‘myproject.subpackage.test’, as the start directory.  The
package name you supply will then be imported and its location on the
filesystem will be used as the start directory.

     Caution: Test discovery loads tests by importing them.  Once test
     discovery has found all the test files from the start directory you
     specify it turns the paths into package names to import.  For
     example ‘foo/bar/baz.py’ will be imported as ‘foo.bar.baz’.

     If you have a package installed globally and attempt test discovery
     on a different copy of the package then the import `could' happen
     from the wrong place.  If this happens test discovery will warn you
     and exit.

     If you supply the start directory as a package name rather than a
     path to a directory then discover assumes that whichever location
     it imports from is the location you intended, so you will not get
     the warning.

Test modules and packages can customize test loading and discovery by
through the *note load_tests protocol: 2bb5.

Changed in version 3.4: Test discovery supports *note namespace
packages: e7b.


File: python.info,  Node: Organizing test code,  Next: Re-using old test code,  Prev: Test Discovery,  Up: unittest --- Unit testing framework

5.26.4.5 Organizing test code
.............................

The basic building blocks of unit testing are `test cases' — single
scenarios that must be set up and checked for correctness.  In *note
unittest: 118, test cases are represented by *note unittest.TestCase:
501. instances.  To make your own test cases you must write subclasses
of *note TestCase: 501. or use *note FunctionTestCase: 2bb7.

The testing code of a *note TestCase: 501. instance should be entirely
self contained, such that it can be run either in isolation or in
arbitrary combination with any number of other test cases.

The simplest *note TestCase: 501. subclass will simply implement a test
method (i.e.  a method whose name starts with ‘test’) in order to
perform specific testing code:

     import unittest

     class DefaultWidgetSizeTestCase(unittest.TestCase):
         def test_default_widget_size(self):
             widget = Widget('The widget')
             self.assertEqual(widget.size(), (50, 50))

Note that in order to test something, we use one of the ‘assert*()’
methods provided by the *note TestCase: 501. base class.  If the test
fails, an exception will be raised, and *note unittest: 118. will
identify the test case as a `failure'.  Any other exceptions will be
treated as `errors'.

Tests can be numerous, and their set-up can be repetitive.  Luckily, we
can factor out set-up code by implementing a method called *note
setUp(): 943, which the testing framework will automatically call for
every single test we run:

     import unittest

     class SimpleWidgetTestCase(unittest.TestCase):
         def setUp(self):
             self.widget = Widget('The widget')

         def test_default_widget_size(self):
             self.assertEqual(self.widget.size(), (50,50),
                              'incorrect default size')

         def test_widget_resize(self):
             self.widget.resize(100,150)
             self.assertEqual(self.widget.size(), (100,150),
                              'wrong size after resize')

     Note: The order in which the various tests will be run is
     determined by sorting the test method names with respect to the
     built-in ordering for strings.

If the *note setUp(): 943. method raises an exception while the test is
running, the framework will consider the test to have suffered an error,
and the test method will not be executed.

Similarly, we can provide a *note tearDown(): 944. method that tidies up
after the test method has been run:

     import unittest

     class SimpleWidgetTestCase(unittest.TestCase):
         def setUp(self):
             self.widget = Widget('The widget')

         def tearDown(self):
             self.widget.dispose()

If *note setUp(): 943. succeeded, *note tearDown(): 944. will be run
whether the test method succeeded or not.

Such a working environment for the testing code is called a `fixture'.

Test case instances are grouped together according to the features they
test.  *note unittest: 118. provides a mechanism for this: the `test
suite', represented by *note unittest: 118.’s *note TestSuite: 27d.
class.  In most cases, calling *note unittest.main(): 504. will do the
right thing and collect all the module’s test cases for you, and then
execute them.

However, should you want to customize the building of your test suite,
you can do it yourself:

     def suite():
         suite = unittest.TestSuite()
         suite.addTest(WidgetTestCase('test_default_size'))
         suite.addTest(WidgetTestCase('test_resize'))
         return suite

You can place the definitions of test cases and test suites in the same
modules as the code they are to test (such as ‘widget.py’), but there
are several advantages to placing the test code in a separate module,
such as ‘test_widget.py’:

   * The test module can be run standalone from the command line.

   * The test code can more easily be separated from shipped code.

   * There is less temptation to change test code to fit the code it
     tests without a good reason.

   * Test code should be modified much less frequently than the code it
     tests.

   * Tested code can be refactored more easily.

   * Tests for modules written in C must be in separate modules anyway,
     so why not be consistent?

   * If the testing strategy changes, there is no need to change the
     source code.


File: python.info,  Node: Re-using old test code,  Next: Skipping tests and expected failures,  Prev: Organizing test code,  Up: unittest --- Unit testing framework

5.26.4.6 Re-using old test code
...............................

Some users will find that they have existing test code that they would
like to run from *note unittest: 118, without converting every old test
function to a *note TestCase: 501. subclass.

For this reason, *note unittest: 118. provides a *note FunctionTestCase:
2bb7. class.  This subclass of *note TestCase: 501. can be used to wrap
an existing test function.  Set-up and tear-down functions can also be
provided.

Given the following test function:

     def testSomething():
         something = makeSomething()
         assert something.name is not None
         # ...

one can create an equivalent test case instance as follows, with
optional set-up and tear-down methods:

     testcase = unittest.FunctionTestCase(testSomething,
                                          setUp=makeSomethingDB,
                                          tearDown=deleteSomethingDB)

     Note: Even though *note FunctionTestCase: 2bb7. can be used to
     quickly convert an existing test base over to a *note unittest:
     118.-based system, this approach is not recommended.  Taking the
     time to set up proper *note TestCase: 501. subclasses will make
     future test refactorings infinitely easier.

In some cases, the existing tests may have been written using the *note
doctest: 65. module.  If so, *note doctest: 65. provides a
‘DocTestSuite’ class that can automatically build *note
unittest.TestSuite: 27d. instances from the existing *note doctest:
65.-based tests.


File: python.info,  Node: Skipping tests and expected failures,  Next: Distinguishing test iterations using subtests,  Prev: Re-using old test code,  Up: unittest --- Unit testing framework

5.26.4.7 Skipping tests and expected failures
.............................................

New in version 3.1.

Unittest supports skipping individual test methods and even whole
classes of tests.  In addition, it supports marking a test as an
"expected failure," a test that is broken and will fail, but shouldn’t
be counted as a failure on a *note TestResult: 6fb.

Skipping a test is simply a matter of using the *note skip(): 2bbc.
*note decorator: f6c. or one of its conditional variants.

Basic skipping looks like this:

     class MyTestCase(unittest.TestCase):

         @unittest.skip("demonstrating skipping")
         def test_nothing(self):
             self.fail("shouldn't happen")

         @unittest.skipIf(mylib.__version__ < (1, 3),
                          "not supported in this library version")
         def test_format(self):
             # Tests that work for only a certain version of the library.
             pass

         @unittest.skipUnless(sys.platform.startswith("win"), "requires Windows")
         def test_windows_support(self):
             # windows specific testing code
             pass

This is the output of running the example above in verbose mode:

     test_format (__main__.MyTestCase) ... skipped 'not supported in this library version'
     test_nothing (__main__.MyTestCase) ... skipped 'demonstrating skipping'
     test_windows_support (__main__.MyTestCase) ... skipped 'requires Windows'

     ----------------------------------------------------------------------
     Ran 3 tests in 0.005s

     OK (skipped=3)

Classes can be skipped just like methods:

     @unittest.skip("showing class skipping")
     class MySkippedTestCase(unittest.TestCase):
         def test_not_run(self):
             pass

*note TestCase.setUp(): 943. can also skip the test.  This is useful
when a resource that needs to be set up is not available.

Expected failures use the *note expectedFailure(): 2bbd. decorator.

     class ExpectedFailureTestCase(unittest.TestCase):
         @unittest.expectedFailure
         def test_fail(self):
             self.assertEqual(1, 0, "broken")

It’s easy to roll your own skipping decorators by making a decorator
that calls *note skip(): 2bbc. on the test when it wants it to be
skipped.  This decorator skips the test unless the passed object has a
certain attribute:

     def skipUnlessHasattr(obj, attr):
         if hasattr(obj, attr):
             return lambda func: func
         return unittest.skip("{!r} doesn't have {!r}".format(obj, attr))

The following decorators implement test skipping and expected failures:

 -- Function: @unittest.skip (reason)

     Unconditionally skip the decorated test.  `reason' should describe
     why the test is being skipped.

 -- Function: @unittest.skipIf (condition, reason)

     Skip the decorated test if `condition' is true.

 -- Function: @unittest.skipUnless (condition, reason)

     Skip the decorated test unless `condition' is true.

 -- Function: @unittest.expectedFailure

     Mark the test as an expected failure.  If the test fails when run,
     the test is not counted as a failure.

 -- Exception: unittest.SkipTest (reason)

     This exception is raised to skip a test.

     Usually you can use *note TestCase.skipTest(): 2bc0. or one of the
     skipping decorators instead of raising this directly.

Skipped tests will not have *note setUp(): 943. or *note tearDown():
944. run around them.  Skipped classes will not have *note setUpClass():
93f. or *note tearDownClass(): 940. run.  Skipped modules will not have
‘setUpModule()’ or ‘tearDownModule()’ run.


File: python.info,  Node: Distinguishing test iterations using subtests,  Next: Classes and functions,  Prev: Skipping tests and expected failures,  Up: unittest --- Unit testing framework

5.26.4.8 Distinguishing test iterations using subtests
......................................................

New in version 3.4.

When some of your tests differ only by a some very small differences,
for instance some parameters, unittest allows you to distinguish them
inside the body of a test method using the *note subTest(): 502. context
manager.

For example, the following test:

     class NumbersTest(unittest.TestCase):

         def test_even(self):
             """
             Test that numbers between 0 and 5 are all even.
             """
             for i in range(0, 6):
                 with self.subTest(i=i):
                     self.assertEqual(i % 2, 0)

will produce the following output:

     ======================================================================
     FAIL: test_even (__main__.NumbersTest) (i=1)
     ----------------------------------------------------------------------
     Traceback (most recent call last):
       File "subtests.py", line 32, in test_even
         self.assertEqual(i % 2, 0)
     AssertionError: 1 != 0

     ======================================================================
     FAIL: test_even (__main__.NumbersTest) (i=3)
     ----------------------------------------------------------------------
     Traceback (most recent call last):
       File "subtests.py", line 32, in test_even
         self.assertEqual(i % 2, 0)
     AssertionError: 1 != 0

     ======================================================================
     FAIL: test_even (__main__.NumbersTest) (i=5)
     ----------------------------------------------------------------------
     Traceback (most recent call last):
       File "subtests.py", line 32, in test_even
         self.assertEqual(i % 2, 0)
     AssertionError: 1 != 0

Without using a subtest, execution would stop after the first failure,
and the error would be less easy to diagnose because the value of ‘i’
wouldn’t be displayed:

     ======================================================================
     FAIL: test_even (__main__.NumbersTest)
     ----------------------------------------------------------------------
     Traceback (most recent call last):
       File "subtests.py", line 32, in test_even
         self.assertEqual(i % 2, 0)
     AssertionError: 1 != 0


File: python.info,  Node: Classes and functions,  Next: Class and Module Fixtures,  Prev: Distinguishing test iterations using subtests,  Up: unittest --- Unit testing framework

5.26.4.9 Classes and functions
..............................

This section describes in depth the API of *note unittest: 118.

* Menu:

* Test cases:: 
* Grouping tests:: 
* Loading and running tests:: 


File: python.info,  Node: Test cases,  Next: Grouping tests,  Up: Classes and functions

5.26.4.10 Test cases
....................

 -- Class: unittest.TestCase (methodName='runTest')

     Instances of the *note TestCase: 501. class represent the logical
     test units in the *note unittest: 118. universe.  This class is
     intended to be used as a base class, with specific tests being
     implemented by concrete subclasses.  This class implements the
     interface needed by the test runner to allow it to drive the tests,
     and methods that the test code can use to check for and report
     various kinds of failure.

     Each instance of *note TestCase: 501. will run a single base
     method: the method named `methodName'.  In most uses of *note
     TestCase: 501, you will neither change the `methodName' nor
     reimplement the default ‘runTest()’ method.

     Changed in version 3.2: *note TestCase: 501. can be instantiated
     successfully without providing a `methodName'.  This makes it
     easier to experiment with *note TestCase: 501. from the interactive
     interpreter.

     *note TestCase: 501. instances provide three groups of methods: one
     group used to run the test, another used by the test implementation
     to check conditions and report failures, and some inquiry methods
     allowing information about the test itself to be gathered.

     Methods in the first group (running the test) are:

      -- Method: setUp ()

          Method called to prepare the test fixture.  This is called
          immediately before calling the test method; other than *note
          AssertionError: f30. or *note SkipTest: 505, any exception
          raised by this method will be considered an error rather than
          a test failure.  The default implementation does nothing.

      -- Method: tearDown ()

          Method called immediately after the test method has been
          called and the result recorded.  This is called even if the
          test method raised an exception, so the implementation in
          subclasses may need to be particularly careful about checking
          internal state.  Any exception, other than *note
          AssertionError: f30. or *note SkipTest: 505, raised by this
          method will be considered an additional error rather than a
          test failure (thus increasing the total number of reported
          errors).  This method will only be called if the *note
          setUp(): 943. succeeds, regardless of the outcome of the test
          method.  The default implementation does nothing.

      -- Method: setUpClass ()

          A class method called before tests in an individual class run.
          ‘setUpClass’ is called with the class as the only argument and
          must be decorated as a *note classmethod(): 5f4.:

               @classmethod
               def setUpClass(cls):
                   ...

          See *note Class and Module Fixtures: 2bc6. for more details.

          New in version 3.2.

      -- Method: tearDownClass ()

          A class method called after tests in an individual class have
          run.  ‘tearDownClass’ is called with the class as the only
          argument and must be decorated as a *note classmethod(): 5f4.:

               @classmethod
               def tearDownClass(cls):
                   ...

          See *note Class and Module Fixtures: 2bc6. for more details.

          New in version 3.2.

      -- Method: run (result=None)

          Run the test, collecting the result into the *note TestResult:
          6fb. object passed as `result'.  If `result' is omitted or
          ‘None’, a temporary result object is created (by calling the
          *note defaultTestResult(): 2bc7. method) and used.  The result
          object is returned to *note run(): 6fa.’s caller.

          The same effect may be had by simply calling the *note
          TestCase: 501. instance.

          Changed in version 3.3: Previous versions of ‘run’ did not
          return the result.  Neither did calling an instance.

      -- Method: skipTest (reason)

          Calling this during a test method or *note setUp(): 943. skips
          the current test.  See *note Skipping tests and expected
          failures: 2bbb. for more information.

          New in version 3.1.

      -- Method: subTest (msg=None, **params)

          Return a context manager which executes the enclosed code
          block as a subtest.  `msg' and `params' are optional,
          arbitrary values which are displayed whenever a subtest fails,
          allowing you to identify them clearly.

          A test case can contain any number of subtest declarations,
          and they can be arbitrarily nested.

          See *note Distinguishing test iterations using subtests: 503.
          for more information.

          New in version 3.4.

      -- Method: debug ()

          Run the test without collecting the result.  This allows
          exceptions raised by the test to be propagated to the caller,
          and can be used to support running tests under a debugger.
     The *note TestCase: 501. class provides several assert methods to
     check for and report failures.  The following table lists the most
     commonly used methods (see the tables below for more assert
     methods):

     Method                                        Checks that                       New in
                                                                                     
     ----------------------------------------------------------------------------------------------------
                                                                                     
     *note assertEqual(a, b): 813.                 ‘a == b’
                                                   
                                                                                     
     *note assertNotEqual(a, b): 814.              ‘a != b’
                                                   
                                                                                     
     *note assertTrue(x): 812.                     ‘bool(x) is True’
                                                   
                                                                                     
     *note assertFalse(x): 93d.                    ‘bool(x) is False’
                                                   
                                                                                     
     *note assertIs(a, b): 947.                    ‘a is b’                          3.1
                                                                                     
                                                                                     
     *note assertIsNot(a, b): 948.                 ‘a is not b’                      3.1
                                                                                     
                                                                                     
     *note assertIsNone(x): 945.                   ‘x is None’                       3.1
                                                                                     
                                                                                     
     *note assertIsNotNone(x): 946.                ‘x is not None’                   3.1
                                                                                     
                                                                                     
     *note assertIn(a, b): 950.                    ‘a in b’                          3.1
                                                                                     
                                                                                     
     *note assertNotIn(a, b): 951.                 ‘a not in b’                      3.1
                                                                                     
                                                                                     
     *note assertIsInstance(a, b): 949.            ‘isinstance(a, b)’                3.2
                                                                                     
                                                                                     
     *note assertNotIsInstance(a, b): 94a.         ‘not isinstance(a, b)’            3.2
                                                                                     

     All the assert methods accept a `msg' argument that, if specified,
     is used as the error message on failure (see also *note
     longMessage: 93e.).  Note that the `msg' keyword argument can be
     passed to *note assertRaises(): 6f6, *note assertRaisesRegex():
     6f7, *note assertWarns(): 6f8, *note assertWarnsRegex(): 6f9. only
     when they are used as a context manager.

      -- Method: assertEqual (first, second, msg=None)

          Test that `first' and `second' are equal.  If the values do
          not compare equal, the test will fail.

          In addition, if `first' and `second' are the exact same type
          and one of list, tuple, dict, set, frozenset or str or any
          type that a subclass registers with *note
          addTypeEqualityFunc(): 959. the type-specific equality
          function will be called in order to generate a more useful
          default error message (see also the *note list of
          type-specific methods: 2bc9.).

          Changed in version 3.1: Added the automatic calling of
          type-specific equality function.

          Changed in version 3.2: *note assertMultiLineEqual(): 94f.
          added as the default type equality function for comparing
          strings.

      -- Method: assertNotEqual (first, second, msg=None)

          Test that `first' and `second' are not equal.  If the values
          do compare equal, the test will fail.

      -- Method: assertTrue (expr, msg=None)
      -- Method: assertFalse (expr, msg=None)

          Test that `expr' is true (or false).

          Note that this is equivalent to ‘bool(expr) is True’ and not
          to ‘expr is True’ (use ‘assertIs(expr, True)’ for the latter).
          This method should also be avoided when more specific methods
          are available (e.g.  ‘assertEqual(a, b)’ instead of
          ‘assertTrue(a == b)’), because they provide a better error
          message in case of failure.

      -- Method: assertIs (first, second, msg=None)
      -- Method: assertIsNot (first, second, msg=None)

          Test that `first' and `second' evaluate (or don’t evaluate) to
          the same object.

          New in version 3.1.

      -- Method: assertIsNone (expr, msg=None)
      -- Method: assertIsNotNone (expr, msg=None)

          Test that `expr' is (or is not) None.

          New in version 3.1.

      -- Method: assertIn (first, second, msg=None)
      -- Method: assertNotIn (first, second, msg=None)

          Test that `first' is (or is not) in `second'.

          New in version 3.1.

      -- Method: assertIsInstance (obj, cls, msg=None)
      -- Method: assertNotIsInstance (obj, cls, msg=None)

          Test that `obj' is (or is not) an instance of `cls' (which can
          be a class or a tuple of classes, as supported by *note
          isinstance(): 998.).  To check for the exact type, use *note
          assertIs(type(obj), cls): 947.

          New in version 3.2.

     It is also possible to check the production of exceptions,
     warnings, and log messages using the following methods:

     Method                                                        Checks that                                New in
                                                                                                              
     --------------------------------------------------------------------------------------------------------------------------
                                                                                                              
     *note assertRaises(exc, fun, *args, **kwds): 6f6.             ‘fun(*args, **kwds)’ raises `exc'
                                                                   
                                                                                                              
     *note assertRaisesRegex(exc, r, fun, *args, **kwds): 6f7.     ‘fun(*args, **kwds)’ raises `exc' and      3.1
                                                                   the message matches regex `r'              
                                                                   
                                                                                                              
     *note assertWarns(warn, fun, *args, **kwds): 6f8.             ‘fun(*args, **kwds)’ raises `warn'         3.2
                                                                                                              
                                                                                                              
     *note assertWarnsRegex(warn, r, fun, *args, **kwds): 6f9.     ‘fun(*args, **kwds)’ raises `warn' and     3.2
                                                                   the message matches regex `r'              
                                                                   
                                                                                                              
     *note assertLogs(logger, level): 507.                         The ‘with’ block logs on `logger' with     3.4
                                                                   minimum `level'                            
                                                                   

      -- Method: assertRaises (exception, callable, *args, **kwds)

      -- Method: assertRaises (exception, msg=None)

          Test that an exception is raised when `callable' is called
          with any positional or keyword arguments that are also passed
          to *note assertRaises(): 6f6.  The test passes if `exception'
          is raised, is an error if another exception is raised, or
          fails if no exception is raised.  To catch any of a group of
          exceptions, a tuple containing the exception classes may be
          passed as `exception'.

          If only the `exception' and possibly the `msg' arguments are
          given, return a context manager so that the code under test
          can be written inline rather than as a function:

               with self.assertRaises(SomeException):
                   do_something()

          When used as a context manager, *note assertRaises(): 6f6.
          accepts the additional keyword argument `msg'.

          The context manager will store the caught exception object in
          its ‘exception’ attribute.  This can be useful if the
          intention is to perform additional checks on the exception
          raised:

               with self.assertRaises(SomeException) as cm:
                   do_something()

               the_exception = cm.exception
               self.assertEqual(the_exception.error_code, 3)

          Changed in version 3.1: Added the ability to use *note
          assertRaises(): 6f6. as a context manager.

          Changed in version 3.2: Added the ‘exception’ attribute.

          Changed in version 3.3: Added the `msg' keyword argument when
          used as a context manager.

      -- Method: assertRaisesRegex (exception, regex, callable, *args,
               **kwds)

      -- Method: assertRaisesRegex (exception, regex, msg=None)

          Like *note assertRaises(): 6f6. but also tests that `regex'
          matches on the string representation of the raised exception.
          `regex' may be a regular expression object or a string
          containing a regular expression suitable for use by *note
          re.search(): 810.  Examples:

               self.assertRaisesRegex(ValueError, "invalid literal for.*XYZ'$",
                                      int, 'XYZ')

          or:

               with self.assertRaisesRegex(ValueError, 'literal'):
                  int('XYZ')

          New in version 3.1: under the name ‘assertRaisesRegexp’.

          Changed in version 3.2: Renamed to *note assertRaisesRegex():
          6f7.

          Changed in version 3.3: Added the `msg' keyword argument when
          used as a context manager.

      -- Method: assertWarns (warning, callable, *args, **kwds)

      -- Method: assertWarns (warning, msg=None)

          Test that a warning is triggered when `callable' is called
          with any positional or keyword arguments that are also passed
          to *note assertWarns(): 6f8.  The test passes if `warning' is
          triggered and fails if it isn’t.  Any exception is an error.
          To catch any of a group of warnings, a tuple containing the
          warning classes may be passed as `warnings'.

          If only the `warning' and possibly the `msg' arguments are
          given, return a context manager so that the code under test
          can be written inline rather than as a function:

               with self.assertWarns(SomeWarning):
                   do_something()

          When used as a context manager, *note assertWarns(): 6f8.
          accepts the additional keyword argument `msg'.

          The context manager will store the caught warning object in
          its ‘warning’ attribute, and the source line which triggered
          the warnings in the ‘filename’ and ‘lineno’ attributes.  This
          can be useful if the intention is to perform additional checks
          on the warning caught:

               with self.assertWarns(SomeWarning) as cm:
                   do_something()

               self.assertIn('myfile.py', cm.filename)
               self.assertEqual(320, cm.lineno)

          This method works regardless of the warning filters in place
          when it is called.

          New in version 3.2.

          Changed in version 3.3: Added the `msg' keyword argument when
          used as a context manager.

      -- Method: assertWarnsRegex (warning, regex, callable, *args,
               **kwds)

      -- Method: assertWarnsRegex (warning, regex, msg=None)

          Like *note assertWarns(): 6f8. but also tests that `regex'
          matches on the message of the triggered warning.  `regex' may
          be a regular expression object or a string containing a
          regular expression suitable for use by *note re.search(): 810.
          Example:

               self.assertWarnsRegex(DeprecationWarning,
                                     r'legacy_function\(\) is deprecated',
                                     legacy_function, 'XYZ')

          or:

               with self.assertWarnsRegex(RuntimeWarning, 'unsafe frobnicating'):
                   frobnicate('/etc/passwd')

          New in version 3.2.

          Changed in version 3.3: Added the `msg' keyword argument when
          used as a context manager.

      -- Method: assertLogs (logger=None, level=None)

          A context manager to test that at least one message is logged
          on the `logger' or one of its children, with at least the
          given `level'.

          If given, `logger' should be a *note logging.Logger: 2c6.
          object or a *note str: 25a. giving the name of a logger.  The
          default is the root logger, which will catch all messages.

          If given, `level' should be either a numeric logging level or
          its string equivalent (for example either ‘"ERROR"’ or
          ‘logging.ERROR’).  The default is ‘logging.INFO’.

          The test passes if at least one message emitted inside the
          ‘with’ block matches the `logger' and `level' conditions,
          otherwise it fails.

          The object returned by the context manager is a recording
          helper which keeps tracks of the matching log messages.  It
          has two attributes:

           -- Attribute: records

               A list of *note logging.LogRecord: 508. objects of the
               matching log messages.

           -- Attribute: output

               A list of *note str: 25a. objects with the formatted
               output of matching messages.

          Example:

               with self.assertLogs('foo', level='INFO') as cm:
                  logging.getLogger('foo').info('first message')
                  logging.getLogger('foo.bar').error('second message')
               self.assertEqual(cm.output, ['INFO:foo:first message',
                                            'ERROR:foo.bar:second message'])

          New in version 3.4.

     There are also other methods used to perform more specific checks,
     such as:

     Method                                      Checks that                          New in
                                                                                      
     ----------------------------------------------------------------------------------------------------
                                                                                      
     *note assertAlmostEqual(a, b): 815.         ‘round(a-b, 7) == 0’
                                                 
                                                                                      
     *note assertNotAlmostEqual(a, b): 816.      ‘round(a-b, 7) != 0’
                                                 
                                                                                      
     *note assertGreater(a, b): 94b.             ‘a > b’                              3.1
                                                                                      
                                                                                      
     *note assertGreaterEqual(a, b): 94c.        ‘a >= b’                             3.1
                                                                                      
                                                                                      
     *note assertLess(a, b): 94d.                ‘a < b’                              3.1
                                                                                      
                                                                                      
     *note assertLessEqual(a, b): 94e.           ‘a <= b’                             3.1
                                                                                      
                                                                                      
     *note assertRegex(s, r): 80f.               ‘r.search(s)’                        3.1
                                                                                      
                                                                                      
     *note assertNotRegex(s, r): 2bcc.           ‘not r.search(s)’                    3.2
                                                                                      
                                                                                      
     *note assertCountEqual(a, b): 80d.          `a' and `b' have the same elements   3.2
                                                 in the same number, regardless of    
                                                 their order
                                                 

      -- Method: assertAlmostEqual (first, second, places=7, msg=None,
               delta=None)
      -- Method: assertNotAlmostEqual (first, second, places=7,
               msg=None, delta=None)

          Test that `first' and `second' are approximately (or not
          approximately) equal by computing the difference, rounding to
          the given number of decimal `places' (default 7), and
          comparing to zero.  Note that these methods round the values
          to the given number of `decimal places' (i.e.  like the *note
          round(): 8d9. function) and not `significant digits'.

          If `delta' is supplied instead of `places' then the difference
          between `first' and `second' must be less or equal to (or
          greater than) `delta'.

          Supplying both `delta' and `places' raises a ‘TypeError’.

          Changed in version 3.2: *note assertAlmostEqual(): 815.
          automatically considers almost equal objects that compare
          equal.  *note assertNotAlmostEqual(): 816. automatically fails
          if the objects compare equal.  Added the `delta' keyword
          argument.

      -- Method: assertGreater (first, second, msg=None)
      -- Method: assertGreaterEqual (first, second, msg=None)
      -- Method: assertLess (first, second, msg=None)
      -- Method: assertLessEqual (first, second, msg=None)

          Test that `first' is respectively >, >=, < or <= than `second'
          depending on the method name.  If not, the test will fail:

               >>> self.assertGreaterEqual(3, 4)
               AssertionError: "3" unexpectedly not greater than or equal to "4"

          New in version 3.1.

      -- Method: assertRegex (text, regex, msg=None)
      -- Method: assertNotRegex (text, regex, msg=None)

          Test that a `regex' search matches (or does not match) `text'.
          In case of failure, the error message will include the pattern
          and the `text' (or the pattern and the part of `text' that
          unexpectedly matched).  `regex' may be a regular expression
          object or a string containing a regular expression suitable
          for use by *note re.search(): 810.

          New in version 3.1: under the name ‘assertRegexpMatches’.

          Changed in version 3.2: The method ‘assertRegexpMatches()’ has
          been renamed to *note assertRegex(): 80f.

          New in version 3.2: *note assertNotRegex(): 2bcc.

      -- Method: assertCountEqual (first, second, msg=None)

          Test that sequence `first' contains the same elements as
          `second', regardless of their order.  When they don’t, an
          error message listing the differences between the sequences
          will be generated.

          Duplicate elements are `not' ignored when comparing `first'
          and `second'.  It verifies whether each element has the same
          count in both sequences.  Equivalent to:
          ‘assertEqual(Counter(list(first)), Counter(list(second)))’ but
          works with sequences of unhashable objects as well.

          New in version 3.2.

     The *note assertEqual(): 813. method dispatches the equality check
     for objects of the same type to different type-specific methods.
     These methods are already implemented for most of the built-in
     types, but it’s also possible to register new methods using *note
     addTypeEqualityFunc(): 959.:

      -- Method: addTypeEqualityFunc (typeobj, function)

          Registers a type-specific method called by *note
          assertEqual(): 813. to check if two objects of exactly the
          same `typeobj' (not subclasses) compare equal.  `function'
          must take two positional arguments and a third msg=None
          keyword argument just as *note assertEqual(): 813. does.  It
          must raise *note self.failureException(msg): 2bcd. when
          inequality between the first two parameters is detected –
          possibly providing useful information and explaining the
          inequalities in details in the error message.

          New in version 3.1.

     The list of type-specific methods automatically used by *note
     assertEqual(): 813. are summarized in the following table.  Note
     that it’s usually not necessary to invoke these methods directly.

     Method                                        Used to compare                   New in
                                                                                     
     ---------------------------------------------------------------------------------------------------
                                                                                     
     *note assertMultiLineEqual(a, b): 94f.        strings                           3.1
                                                                                     
                                                                                     
     *note assertSequenceEqual(a, b): 955.         sequences                         3.1
                                                                                     
                                                                                     
     *note assertListEqual(a, b): 953.             lists                             3.1
                                                                                     
                                                                                     
     *note assertTupleEqual(a, b): 954.            tuples                            3.1
                                                                                     
                                                                                     
     *note assertSetEqual(a, b): 952.              sets or frozensets                3.1
                                                                                     
                                                                                     
     *note assertDictEqual(a, b): 956.             dicts                             3.1
                                                                                     

      -- Method: assertMultiLineEqual (first, second, msg=None)

          Test that the multiline string `first' is equal to the string
          `second'.  When not equal a diff of the two strings
          highlighting the differences will be included in the error
          message.  This method is used by default when comparing
          strings with *note assertEqual(): 813.

          New in version 3.1.

      -- Method: assertSequenceEqual (first, second, msg=None,
               seq_type=None)

          Tests that two sequences are equal.  If a `seq_type' is
          supplied, both `first' and `second' must be instances of
          `seq_type' or a failure will be raised.  If the sequences are
          different an error message is constructed that shows the
          difference between the two.

          This method is not called directly by *note assertEqual():
          813, but it’s used to implement *note assertListEqual(): 953.
          and *note assertTupleEqual(): 954.

          New in version 3.1.

      -- Method: assertListEqual (first, second, msg=None)
      -- Method: assertTupleEqual (first, second, msg=None)

          Tests that two lists or tuples are equal.  If not, an error
          message is constructed that shows only the differences between
          the two.  An error is also raised if either of the parameters
          are of the wrong type.  These methods are used by default when
          comparing lists or tuples with *note assertEqual(): 813.

          New in version 3.1.

      -- Method: assertSetEqual (first, second, msg=None)

          Tests that two sets are equal.  If not, an error message is
          constructed that lists the differences between the sets.  This
          method is used by default when comparing sets or frozensets
          with *note assertEqual(): 813.

          Fails if either of `first' or `second' does not have a *note
          set.difference(): 107b. method.

          New in version 3.1.

      -- Method: assertDictEqual (first, second, msg=None)

          Test that two dictionaries are equal.  If not, an error
          message is constructed that shows the differences in the
          dictionaries.  This method will be used by default to compare
          dictionaries in calls to *note assertEqual(): 813.

          New in version 3.1.

     Finally the *note TestCase: 501. provides the following methods and
     attributes:

      -- Method: fail (msg=None)

          Signals a test failure unconditionally, with `msg' or ‘None’
          for the error message.

      -- Attribute: failureException

          This class attribute gives the exception raised by the test
          method.  If a test framework needs to use a specialized
          exception, possibly to carry additional information, it must
          subclass this exception in order to "play fair" with the
          framework.  The initial value of this attribute is *note
          AssertionError: f30.

      -- Attribute: longMessage

          If set to ‘True’ then any explicit failure message you pass in
          to the *note assert methods: 2b9f. will be appended to the end
          of the normal failure message.  The normal messages contain
          useful information about the objects involved, for example the
          message from assertEqual shows you the repr of the two unequal
          objects.  Setting this attribute to ‘True’ allows you to have
          a custom error message in addition to the normal one.

          This attribute defaults to ‘True’.  If set to False then a
          custom message passed to an assert method will silence the
          normal message.

          The class setting can be overridden in individual tests by
          assigning an instance attribute to ‘True’ or ‘False’ before
          calling the assert methods.

          New in version 3.1.

      -- Attribute: maxDiff

          This attribute controls the maximum length of diffs output by
          assert methods that report diffs on failure.  It defaults to
          80*8 characters.  Assert methods affected by this attribute
          are *note assertSequenceEqual(): 955. (including all the
          sequence comparison methods that delegate to it), *note
          assertDictEqual(): 956. and *note assertMultiLineEqual(): 94f.

          Setting ‘maxDiff’ to None means that there is no maximum
          length of diffs.

          New in version 3.2.

     Testing frameworks can use the following methods to collect
     information on the test:

      -- Method: countTestCases ()

          Return the number of tests represented by this test object.
          For *note TestCase: 501. instances, this will always be ‘1’.

      -- Method: defaultTestResult ()

          Return an instance of the test result class that should be
          used for this test case class (if no other result instance is
          provided to the *note run(): 6fa. method).

          For *note TestCase: 501. instances, this will always be an
          instance of *note TestResult: 6fb.; subclasses of *note
          TestCase: 501. should override this as necessary.

      -- Method: id ()

          Return a string identifying the specific test case.  This is
          usually the full name of the test method, including the module
          and class name.

      -- Method: shortDescription ()

          Returns a description of the test, or ‘None’ if no description
          has been provided.  The default implementation of this method
          returns the first line of the test method’s docstring, if
          available, or ‘None’.

          Changed in version 3.1: In 3.1 this was changed to add the
          test name to the short description even in the presence of a
          docstring.  This caused compatibility issues with unittest
          extensions and adding the test name was moved to the *note
          TextTestResult: 2bd3. in Python 3.2.

      -- Method: addCleanup (function, *args, **kwargs)

          Add a function to be called after *note tearDown(): 944. to
          cleanup resources used during the test.  Functions will be
          called in reverse order to the order they are added (LIFO).
          They are called with any arguments and keyword arguments
          passed into *note addCleanup(): 941. when they are added.

          If *note setUp(): 943. fails, meaning that *note tearDown():
          944. is not called, then any cleanup functions added will
          still be called.

          New in version 3.1.

      -- Method: doCleanups ()

          This method is called unconditionally after *note tearDown():
          944, or after *note setUp(): 943. if *note setUp(): 943.
          raises an exception.

          It is responsible for calling all the cleanup functions added
          by *note addCleanup(): 941.  If you need cleanup functions to
          be called `prior' to *note tearDown(): 944. then you can call
          *note doCleanups(): 942. yourself.

          *note doCleanups(): 942. pops methods off the stack of cleanup
          functions one at a time, so it can be called at any time.

          New in version 3.1.

 -- Class: unittest.FunctionTestCase (testFunc, setUp=None,
          tearDown=None, description=None)

     This class implements the portion of the *note TestCase: 501.
     interface which allows the test runner to drive the test, but does
     not provide the methods which test code can use to check and report
     errors.  This is used to create test cases using legacy test code,
     allowing it to be integrated into a *note unittest: 118.-based test
     framework.

* Menu:

* Deprecated aliases:: 


File: python.info,  Node: Deprecated aliases,  Up: Test cases

5.26.4.11 Deprecated aliases
............................

For historical reasons, some of the *note TestCase: 501. methods had one
or more aliases that are now deprecated.  The following table lists the
correct names along with their deprecated aliases:

     Method Name                        Deprecated alias           Deprecated alias
                                                                   
     -----------------------------------------------------------------------------------------
                                                                   
     *note assertEqual(): 813.          failUnlessEqual            assertEquals
                                                                   
                                                                   
     *note assertNotEqual(): 814.       failIfEqual                assertNotEquals
                                                                   
                                                                   
     *note assertTrue(): 812.           failUnless                 assert_
                                                                   
                                                                   
     *note assertFalse(): 93d.          failIf
                                        
                                                                   
     *note assertRaises(): 6f6.         failUnlessRaises
                                        
                                                                   
     *note assertAlmostEqual(): 815.    failUnlessAlmostEqual      assertAlmostEquals
                                                                   
                                                                   
     *note assertNotAlmostEqual(): 816. failIfAlmostEqual          assertNotAlmostEquals
                                                                   
                                                                   
     *note assertRegex(): 80f.                                     assertRegexpMatches
                                                                   
                                                                   
     *note assertRaisesRegex(): 6f7.                               assertRaisesRegexp
                                                                   

     Deprecated since version 3.1: the fail* aliases listed in the
     second column.

     Deprecated since version 3.2: the assert* aliases listed in the
     third column.

     Deprecated since version 3.2: ‘assertRegexpMatches’ and
     ‘assertRaisesRegexp’ have been renamed to *note assertRegex(): 80f.
     and *note assertRaisesRegex(): 6f7.


File: python.info,  Node: Grouping tests,  Next: Loading and running tests,  Prev: Test cases,  Up: Classes and functions

5.26.4.12 Grouping tests
........................

 -- Class: unittest.TestSuite (tests=())

     This class represents an aggregation of individual tests cases and
     test suites.  The class presents the interface needed by the test
     runner to allow it to be run as any other test case.  Running a
     *note TestSuite: 27d. instance is the same as iterating over the
     suite, running each test individually.

     If `tests' is given, it must be an iterable of individual test
     cases or other test suites that will be used to build the suite
     initially.  Additional methods are provided to add test cases and
     suites to the collection later on.

     *note TestSuite: 27d. objects behave much like *note TestCase: 501.
     objects, except they do not actually implement a test.  Instead,
     they are used to aggregate tests into groups of tests that should
     be run together.  Some additional methods are available to add
     tests to *note TestSuite: 27d. instances:

      -- Method: addTest (test)

          Add a *note TestCase: 501. or *note TestSuite: 27d. to the
          suite.

      -- Method: addTests (tests)

          Add all the tests from an iterable of *note TestCase: 501. and
          *note TestSuite: 27d. instances to this test suite.

          This is equivalent to iterating over `tests', calling *note
          addTest(): 2bd7. for each element.

     *note TestSuite: 27d. shares the following methods with *note
     TestCase: 501.:

      -- Method: run (result)

          Run the tests associated with this suite, collecting the
          result into the test result object passed as `result'.  Note
          that unlike *note TestCase.run(): 6fa, *note TestSuite.run():
          2bd9. requires the result object to be passed in.

      -- Method: debug ()

          Run the tests associated with this suite without collecting
          the result.  This allows exceptions raised by the test to be
          propagated to the caller and can be used to support running
          tests under a debugger.

      -- Method: countTestCases ()

          Return the number of tests represented by this test object,
          including all individual tests and sub-suites.

      -- Method: __iter__ ()

          Tests grouped by a *note TestSuite: 27d. are always accessed
          by iteration.  Subclasses can lazily provide tests by
          overriding *note __iter__(): 57c.  Note that this method may
          be called several times on a single suite (for example when
          counting tests or comparing for equality) so the tests
          returned by repeated iterations before *note TestSuite.run():
          2bd9. must be the same for each call iteration.  After *note
          TestSuite.run(): 2bd9, callers should not rely on the tests
          returned by this method unless the caller uses a subclass that
          overrides ‘TestSuite._removeTestAtIndex()’ to preserve test
          references.

          Changed in version 3.2: In earlier versions the *note
          TestSuite: 27d. accessed tests directly rather than through
          iteration, so overriding *note __iter__(): 57c. wasn’t
          sufficient for providing tests.

          Changed in version 3.4: In earlier versions the *note
          TestSuite: 27d. held references to each *note TestCase: 501.
          after *note TestSuite.run(): 2bd9.  Subclasses can restore
          that behavior by overriding ‘TestSuite._removeTestAtIndex()’.

     In the typical usage of a *note TestSuite: 27d. object, the *note
     run(): 2bd9. method is invoked by a ‘TestRunner’ rather than by the
     end-user test harness.


File: python.info,  Node: Loading and running tests,  Prev: Grouping tests,  Up: Classes and functions

5.26.4.13 Loading and running tests
...................................

 -- Class: unittest.TestLoader

     The *note TestLoader: 354. class is used to create test suites from
     classes and modules.  Normally, there is no need to create an
     instance of this class; the *note unittest: 118. module provides an
     instance that can be shared as *note unittest.defaultTestLoader:
     2bdd.  Using a subclass or instance, however, allows customization
     of some configurable properties.

     *note TestLoader: 354. objects have the following attributes:

      -- Attribute: errors

          A list of the non-fatal errors encountered while loading
          tests.  Not reset by the loader at any point.  Fatal errors
          are signalled by the relevant a method raising an exception to
          the caller.  Non-fatal errors are also indicated by a
          synthetic test that will raise the original error when run.

          New in version 3.5.

     *note TestLoader: 354. objects have the following methods:

      -- Method: loadTestsFromTestCase (testCaseClass)

          Return a suite of all tests cases contained in the *note
          TestCase: 501.-derived ‘testCaseClass’.

          A test case instance is created for each method named by *note
          getTestCaseNames(): 2bdf.  By default these are the method
          names beginning with ‘test’.  If *note getTestCaseNames():
          2bdf. returns no methods, but the ‘runTest()’ method is
          implemented, a single test case is created for that method
          instead.

      -- Method: loadTestsFromModule (module, pattern=None)

          Return a suite of all tests cases contained in the given
          module.  This method searches `module' for classes derived
          from *note TestCase: 501. and creates an instance of the class
          for each test method defined for the class.

               Note: While using a hierarchy of *note TestCase:
               501.-derived classes can be convenient in sharing
               fixtures and helper functions, defining test methods on
               base classes that are not intended to be instantiated
               directly does not play well with this method.  Doing so,
               however, can be useful when the fixtures are different
               and defined in subclasses.

          If a module provides a ‘load_tests’ function it will be called
          to load the tests.  This allows modules to customize test
          loading.  This is the *note load_tests protocol: 2bb5.  The
          `pattern' argument is passed as the third argument to
          ‘load_tests’.

          Changed in version 3.2: Support for ‘load_tests’ added.

          Changed in version 3.5: The undocumented and unofficial
          `use_load_tests' default argument is deprecated and ignored,
          although it is still accepted for backward compatibility.  The
          method also now accepts a keyword-only argument `pattern'
          which is passed to ‘load_tests’ as the third argument.

      -- Method: loadTestsFromName (name, module=None)

          Return a suite of all tests cases given a string specifier.

          The specifier `name' is a "dotted name" that may resolve
          either to a module, a test case class, a test method within a
          test case class, a *note TestSuite: 27d. instance, or a
          callable object which returns a *note TestCase: 501. or *note
          TestSuite: 27d. instance.  These checks are applied in the
          order listed here; that is, a method on a possible test case
          class will be picked up as "a test method within a test case
          class", rather than "a callable object".

          For example, if you have a module ‘SampleTests’ containing a
          *note TestCase: 501.-derived class ‘SampleTestCase’ with three
          test methods (‘test_one()’, ‘test_two()’, and ‘test_three()’),
          the specifier ‘'SampleTests.SampleTestCase'’ would cause this
          method to return a suite which will run all three test
          methods.  Using the specifier
          ‘'SampleTests.SampleTestCase.test_two'’ would cause it to
          return a test suite which will run only the ‘test_two()’ test
          method.  The specifier can refer to modules and packages which
          have not been imported; they will be imported as a
          side-effect.

          The method optionally resolves `name' relative to the given
          `module'.

     Changed in version 3.5: If an *note ImportError: 19f. or *note
     AttributeError: 356. occurs while traversing `name' then a
     synthetic test that raises that error when run will be returned.
     These errors are included in the errors accumulated by self.errors.

      -- Method: loadTestsFromNames (names, module=None)

          Similar to *note loadTestsFromName(): 957, but takes a
          sequence of names rather than a single name.  The return value
          is a test suite which supports all the tests defined for each
          name.

      -- Method: getTestCaseNames (testCaseClass)

          Return a sorted sequence of method names found within
          `testCaseClass'; this should be a subclass of *note TestCase:
          501.

      -- Method: discover (start_dir, pattern='test*.py',
               top_level_dir=None)

          Find all the test modules by recursing into subdirectories
          from the specified start directory, and return a TestSuite
          object containing them.  Only test files that match `pattern'
          will be loaded.  (Using shell style pattern matching.)  Only
          module names that are importable (i.e.  are valid Python
          identifiers) will be loaded.

          All test modules must be importable from the top level of the
          project.  If the start directory is not the top level
          directory then the top level directory must be specified
          separately.

          If importing a module fails, for example due to a syntax
          error, then this will be recorded as a single error and
          discovery will continue.  If the import failure is due to
          *note SkipTest: 505. being raised, it will be recorded as a
          skip instead of an error.

          If a package (a directory containing a file named
          ‘__init__.py’) is found, the package will be checked for a
          ‘load_tests’ function.  If this exists then it will be called
          ‘package.load_tests(loader, tests, pattern)’.  Test discovery
          takes care to ensure that a package is only checked for tests
          once during an invocation, even if the load_tests function
          itself calls ‘loader.discover’.

          If ‘load_tests’ exists then discovery does `not' recurse into
          the package, ‘load_tests’ is responsible for loading all tests
          in the package.

          The pattern is deliberately not stored as a loader attribute
          so that packages can continue discovery themselves.
          `top_level_dir' is stored so ‘load_tests’ does not need to
          pass this argument in to ‘loader.discover()’.

          `start_dir' can be a dotted module name as well as a
          directory.

          New in version 3.2.

          Changed in version 3.4: Modules that raise *note SkipTest:
          505. on import are recorded as skips, not errors.  Discovery
          works for *note namespace packages: e7b.  Paths are sorted
          before being imported so that execution order is the same even
          if the underlying file system’s ordering is not dependent on
          file name.

          Changed in version 3.5: Found packages are now checked for
          ‘load_tests’ regardless of whether their path matches
          `pattern', because it is impossible for a package name to
          match the default pattern.

     The following attributes of a *note TestLoader: 354. can be
     configured either by subclassing or assignment on an instance:

      -- Attribute: testMethodPrefix

          String giving the prefix of method names which will be
          interpreted as test methods.  The default value is ‘'test'’.

          This affects *note getTestCaseNames(): 2bdf. and all the
          ‘loadTestsFrom*()’ methods.

      -- Attribute: sortTestMethodsUsing

          Function to be used to compare method names when sorting them
          in *note getTestCaseNames(): 2bdf. and all the
          ‘loadTestsFrom*()’ methods.

      -- Attribute: suiteClass

          Callable object that constructs a test suite from a list of
          tests.  No methods on the resulting object are needed.  The
          default value is the *note TestSuite: 27d. class.

          This affects all the ‘loadTestsFrom*()’ methods.

 -- Class: unittest.TestResult

     This class is used to compile information about which tests have
     succeeded and which have failed.

     A *note TestResult: 6fb. object stores the results of a set of
     tests.  The *note TestCase: 501. and *note TestSuite: 27d. classes
     ensure that results are properly recorded; test authors do not need
     to worry about recording the outcome of tests.

     Testing frameworks built on top of *note unittest: 118. may want
     access to the *note TestResult: 6fb. object generated by running a
     set of tests for reporting purposes; a *note TestResult: 6fb.
     instance is returned by the ‘TestRunner.run()’ method for this
     purpose.

     *note TestResult: 6fb. instances have the following attributes that
     will be of interest when inspecting the results of running a set of
     tests:

      -- Attribute: errors

          A list containing 2-tuples of *note TestCase: 501. instances
          and strings holding formatted tracebacks.  Each tuple
          represents a test which raised an unexpected exception.

      -- Attribute: failures

          A list containing 2-tuples of *note TestCase: 501. instances
          and strings holding formatted tracebacks.  Each tuple
          represents a test where a failure was explicitly signalled
          using the ‘TestCase.assert*()’ methods.

      -- Attribute: skipped

          A list containing 2-tuples of *note TestCase: 501. instances
          and strings holding the reason for skipping the test.

          New in version 3.1.

      -- Attribute: expectedFailures

          A list containing 2-tuples of *note TestCase: 501. instances
          and strings holding formatted tracebacks.  Each tuple
          represents an expected failure of the test case.

      -- Attribute: unexpectedSuccesses

          A list containing *note TestCase: 501. instances that were
          marked as expected failures, but succeeded.

      -- Attribute: shouldStop

          Set to ‘True’ when the execution of tests should stop by *note
          stop(): 2be9.

      -- Attribute: testsRun

          The total number of tests run so far.

      -- Attribute: buffer

          If set to true, ‘sys.stdout’ and ‘sys.stderr’ will be buffered
          in between *note startTest(): 2bec. and *note stopTest():
          2bed. being called.  Collected output will only be echoed onto
          the real ‘sys.stdout’ and ‘sys.stderr’ if the test fails or
          errors.  Any output is also attached to the failure / error
          message.

          New in version 3.2.

      -- Attribute: failfast

          If set to true *note stop(): 2be9. will be called on the first
          failure or error, halting the test run.

          New in version 3.2.

      -- Attribute: tb_locals

          If set to true then local variables will be shown in
          tracebacks.

          New in version 3.5.

      -- Method: wasSuccessful ()

          Return ‘True’ if all tests run so far have passed, otherwise
          returns ‘False’.

          Changed in version 3.4: Returns ‘False’ if there were any
          *note unexpectedSuccesses: 2be7. from tests marked with the
          *note expectedFailure(): 2bbd. decorator.

      -- Method: stop ()

          This method can be called to signal that the set of tests
          being run should be aborted by setting the *note shouldStop:
          2be8. attribute to ‘True’.  ‘TestRunner’ objects should
          respect this flag and return without running any additional
          tests.

          For example, this feature is used by the *note TextTestRunner:
          2bf1. class to stop the test framework when the user signals
          an interrupt from the keyboard.  Interactive tools which
          provide ‘TestRunner’ implementations can use this in a similar
          manner.

     The following methods of the *note TestResult: 6fb. class are used
     to maintain the internal data structures, and may be extended in
     subclasses to support additional reporting requirements.  This is
     particularly useful in building tools which support interactive
     reporting while tests are being run.

      -- Method: startTest (test)

          Called when the test case `test' is about to be run.

      -- Method: stopTest (test)

          Called after the test case `test' has been executed,
          regardless of the outcome.

      -- Method: startTestRun ()

          Called once before any tests are executed.

          New in version 3.1.

      -- Method: stopTestRun ()

          Called once after all tests are executed.

          New in version 3.1.

      -- Method: addError (test, err)

          Called when the test case `test' raises an unexpected
          exception.  `err' is a tuple of the form returned by *note
          sys.exc_info(): 8ca.: ‘(type, value, traceback)’.

          The default implementation appends a tuple ‘(test,
          formatted_err)’ to the instance’s *note errors: 2be3.
          attribute, where `formatted_err' is a formatted traceback
          derived from `err'.

      -- Method: addFailure (test, err)

          Called when the test case `test' signals a failure.  `err' is
          a tuple of the form returned by *note sys.exc_info(): 8ca.:
          ‘(type, value, traceback)’.

          The default implementation appends a tuple ‘(test,
          formatted_err)’ to the instance’s *note failures: 2be4.
          attribute, where `formatted_err' is a formatted traceback
          derived from `err'.

      -- Method: addSuccess (test)

          Called when the test case `test' succeeds.

          The default implementation does nothing.

      -- Method: addSkip (test, reason)

          Called when the test case `test' is skipped.  `reason' is the
          reason the test gave for skipping.

          The default implementation appends a tuple ‘(test, reason)’ to
          the instance’s *note skipped: 2be5. attribute.

      -- Method: addExpectedFailure (test, err)

          Called when the test case `test' fails, but was marked with
          the *note expectedFailure(): 2bbd. decorator.

          The default implementation appends a tuple ‘(test,
          formatted_err)’ to the instance’s *note expectedFailures:
          2be6. attribute, where `formatted_err' is a formatted
          traceback derived from `err'.

      -- Method: addUnexpectedSuccess (test)

          Called when the test case `test' was marked with the *note
          expectedFailure(): 2bbd. decorator, but succeeded.

          The default implementation appends the test to the instance’s
          *note unexpectedSuccesses: 2be7. attribute.

      -- Method: addSubTest (test, subtest, outcome)

          Called when a subtest finishes.  `test' is the test case
          corresponding to the test method.  `subtest' is a custom *note
          TestCase: 501. instance describing the subtest.

          If `outcome' is *note None: 19d, the subtest succeeded.
          Otherwise, it failed with an exception where `outcome' is a
          tuple of the form returned by *note sys.exc_info(): 8ca.:
          ‘(type, value, traceback)’.

          The default implementation does nothing when the outcome is a
          success, and records subtest failures as normal failures.

          New in version 3.4.

 -- Class: unittest.TextTestResult (stream, descriptions, verbosity)

     A concrete implementation of *note TestResult: 6fb. used by the
     *note TextTestRunner: 2bf1.

     New in version 3.2: This class was previously named
     ‘_TextTestResult’.  The old name still exists as an alias but is
     deprecated.

 -- Data: unittest.defaultTestLoader

     Instance of the *note TestLoader: 354. class intended to be shared.
     If no customization of the *note TestLoader: 354. is needed, this
     instance can be used instead of repeatedly creating new instances.

 -- Class: unittest.TextTestRunner (stream=None, descriptions=True,
          verbosity=1, failfast=False, buffer=False, resultclass=None,
          warnings=None, *, tb_locals=False)

     A basic test runner implementation that outputs results to a
     stream.  If `stream' is ‘None’, the default, *note sys.stderr: 270.
     is used as the output stream.  This class has a few configurable
     parameters, but is essentially very simple.  Graphical applications
     which run test suites should provide alternate implementations.
     Such implementations should accept ‘**kwargs’ as the interface to
     construct runners changes when features are added to unittest.

     By default this runner shows *note DeprecationWarning: 192, *note
     PendingDeprecationWarning: 19e, *note ResourceWarning: 166. and
     *note ImportWarning: 18f. even if they are *note ignored by
     default: 2bf9.  Deprecation warnings caused by *note deprecated
     unittest methods: 817. are also special-cased and, when the warning
     filters are ‘'default'’ or ‘'always'’, they will appear only once
     per-module, in order to avoid too many warning messages.  This
     behavior can be overridden using the ‘-Wd’ or ‘-Wa’ options and
     leaving `warnings' to ‘None’.

     Changed in version 3.2: Added the ‘warnings’ argument.

     Changed in version 3.2: The default stream is set to *note
     sys.stderr: 270. at instantiation time rather than import time.

     Changed in version 3.5: Added the tb_locals parameter.

      -- Method: _makeResult ()

          This method returns the instance of ‘TestResult’ used by *note
          run(): 2bfb.  It is not intended to be called directly, but
          can be overridden in subclasses to provide a custom
          ‘TestResult’.

          ‘_makeResult()’ instantiates the class or callable passed in
          the ‘TextTestRunner’ constructor as the ‘resultclass’
          argument.  It defaults to *note TextTestResult: 2bd3. if no
          ‘resultclass’ is provided.  The result class is instantiated
          with the following arguments:

               stream, descriptions, verbosity

      -- Method: run (test)

          This method is the main public interface to the
          ‘TextTestRunner’.  This method takes a *note TestSuite: 27d.
          or *note TestCase: 501. instance.  A *note TestResult: 6fb. is
          created by calling *note _makeResult(): 2bfa. and the test(s)
          are run and the results printed to stdout.

 -- Function: unittest.main (module='__main__', defaultTest=None,
          argv=None, testRunner=None,
          testLoader=unittest.defaultTestLoader, exit=True, verbosity=1,
          failfast=None, catchbreak=None, buffer=None, warnings=None)

     A command-line program that loads a set of tests from `module' and
     runs them; this is primarily for making test modules conveniently
     executable.  The simplest use for this function is to include the
     following line at the end of a test script:

          if __name__ == '__main__':
              unittest.main()

     You can run tests with more detailed information by passing in the
     verbosity argument:

          if __name__ == '__main__':
              unittest.main(verbosity=2)

     The `defaultTest' argument is either the name of a single test or
     an iterable of test names to run if no test names are specified via
     `argv'.  If not specified or ‘None’ and no test names are provided
     via `argv', all tests found in `module' are run.

     The `argv' argument can be a list of options passed to the program,
     with the first element being the program name.  If not specified or
     ‘None’, the values of *note sys.argv: 85c. are used.

     The `testRunner' argument can either be a test runner class or an
     already created instance of it.  By default ‘main’ calls *note
     sys.exit(): 95a. with an exit code indicating success or failure of
     the tests run.

     The `testLoader' argument has to be a *note TestLoader: 354.
     instance, and defaults to *note defaultTestLoader: 2bdd.

     ‘main’ supports being used from the interactive interpreter by
     passing in the argument ‘exit=False’.  This displays the result on
     standard output without calling *note sys.exit(): 95a.:

          >>> from unittest import main
          >>> main(module='test_module', exit=False)

     The `failfast', `catchbreak' and `buffer' parameters have the same
     effect as the same-name *note command-line options: 2ba6.

     The `warning' argument specifies the *note warning filter: 2bfc.
     that should be used while running the tests.  If it’s not
     specified, it will remain ‘None’ if a ‘-W’ option is passed to
     ‘python’, otherwise it will be set to ‘'default'’.

     Calling ‘main’ actually returns an instance of the ‘TestProgram’
     class.  This stores the result of the tests run as the ‘result’
     attribute.

     Changed in version 3.1: The `exit' parameter was added.

     Changed in version 3.2: The `verbosity', `failfast', `catchbreak',
     `buffer' and `warnings' parameters were added.

     Changed in version 3.4: The `defaultTest' parameter was changed to
     also accept an iterable of test names.

* Menu:

* load_tests Protocol:: 


File: python.info,  Node: load_tests Protocol,  Up: Loading and running tests

5.26.4.14 load_tests Protocol
.............................

New in version 3.2.

Modules or packages can customize how tests are loaded from them during
normal test runs or test discovery by implementing a function called
‘load_tests’.

If a test module defines ‘load_tests’ it will be called by *note
TestLoader.loadTestsFromModule(): 352. with the following arguments:

     load_tests(loader, standard_tests, pattern)

where `pattern' is passed straight through from ‘loadTestsFromModule’.
It defaults to ‘None’.

It should return a *note TestSuite: 27d.

`loader' is the instance of *note TestLoader: 354. doing the loading.
`standard_tests' are the tests that would be loaded by default from the
module.  It is common for test modules to only want to add or remove
tests from the standard set of tests.  The third argument is used when
loading packages as part of test discovery.

A typical ‘load_tests’ function that loads tests from a specific set of
*note TestCase: 501. classes may look like:

     test_cases = (TestCase1, TestCase2, TestCase3)

     def load_tests(loader, tests, pattern):
         suite = TestSuite()
         for test_class in test_cases:
             tests = loader.loadTestsFromTestCase(test_class)
             suite.addTests(tests)
         return suite

If discovery is started in a directory containing a package, either from
the command line or by calling *note TestLoader.discover(): 506, then
the package ‘__init__.py’ will be checked for ‘load_tests’.  If that
function does not exist, discovery will recurse into the package as
though it were just another directory.  Otherwise, discovery of the
package’s tests will be left up to ‘load_tests’ which is called with the
following arguments:

     load_tests(loader, standard_tests, pattern)

This should return a *note TestSuite: 27d. representing all the tests
from the package.  (‘standard_tests’ will only contain tests collected
from ‘__init__.py’.)

Because the pattern is passed into ‘load_tests’ the package is free to
continue (and potentially modify) test discovery.  A ’do nothing’
‘load_tests’ function for a test package would look like:

     def load_tests(loader, standard_tests, pattern):
         # top level directory cached on loader instance
         this_dir = os.path.dirname(__file__)
         package_tests = loader.discover(start_dir=this_dir, pattern=pattern)
         standard_tests.addTests(package_tests)
         return standard_tests

Changed in version 3.5: Discovery no longer checks package names for
matching `pattern' due to the impossibility of package names matching
the default pattern.


File: python.info,  Node: Class and Module Fixtures,  Next: Signal Handling,  Prev: Classes and functions,  Up: unittest --- Unit testing framework

5.26.4.15 Class and Module Fixtures
...................................

Class and module level fixtures are implemented in *note TestSuite: 27d.
When the test suite encounters a test from a new class then
‘tearDownClass()’ from the previous class (if there is one) is called,
followed by ‘setUpClass()’ from the new class.

Similarly if a test is from a different module from the previous test
then ‘tearDownModule’ from the previous module is run, followed by
‘setUpModule’ from the new module.

After all the tests have run the final ‘tearDownClass’ and
‘tearDownModule’ are run.

Note that shared fixtures do not play well with [potential] features
like test parallelization and they break test isolation.  They should be
used with care.

The default ordering of tests created by the unittest test loaders is to
group all tests from the same modules and classes together.  This will
lead to ‘setUpClass’ / ‘setUpModule’ (etc) being called exactly once per
class and module.  If you randomize the order, so that tests from
different modules and classes are adjacent to each other, then these
shared fixture functions may be called multiple times in a single test
run.

Shared fixtures are not intended to work with suites with non-standard
ordering.  A ‘BaseTestSuite’ still exists for frameworks that don’t want
to support shared fixtures.

If there are any exceptions raised during one of the shared fixture
functions the test is reported as an error.  Because there is no
corresponding test instance an ‘_ErrorHolder’ object (that has the same
interface as a *note TestCase: 501.) is created to represent the error.
If you are just using the standard unittest test runner then this detail
doesn’t matter, but if you are a framework author it may be relevant.

* Menu:

* setUpClass and tearDownClass:: 
* setUpModule and tearDownModule:: 


File: python.info,  Node: setUpClass and tearDownClass,  Next: setUpModule and tearDownModule,  Up: Class and Module Fixtures

5.26.4.16 setUpClass and tearDownClass
......................................

These must be implemented as class methods:

     import unittest

     class Test(unittest.TestCase):
         @classmethod
         def setUpClass(cls):
             cls._connection = createExpensiveConnectionObject()

         @classmethod
         def tearDownClass(cls):
             cls._connection.destroy()

If you want the ‘setUpClass’ and ‘tearDownClass’ on base classes called
then you must call up to them yourself.  The implementations in *note
TestCase: 501. are empty.

If an exception is raised during a ‘setUpClass’ then the tests in the
class are not run and the ‘tearDownClass’ is not run.  Skipped classes
will not have ‘setUpClass’ or ‘tearDownClass’ run.  If the exception is
a *note SkipTest: 505. exception then the class will be reported as
having been skipped instead of as an error.


File: python.info,  Node: setUpModule and tearDownModule,  Prev: setUpClass and tearDownClass,  Up: Class and Module Fixtures

5.26.4.17 setUpModule and tearDownModule
........................................

These should be implemented as functions:

     def setUpModule():
         createConnection()

     def tearDownModule():
         closeConnection()

If an exception is raised in a ‘setUpModule’ then none of the tests in
the module will be run and the ‘tearDownModule’ will not be run.  If the
exception is a *note SkipTest: 505. exception then the module will be
reported as having been skipped instead of as an error.


File: python.info,  Node: Signal Handling,  Prev: Class and Module Fixtures,  Up: unittest --- Unit testing framework

5.26.4.18 Signal Handling
.........................

New in version 3.2.

The *note -c/–catch: 93a. command-line option to unittest, along with
the ‘catchbreak’ parameter to *note unittest.main(): 504, provide more
friendly handling of control-C during a test run.  With catch break
behavior enabled control-C will allow the currently running test to
complete, and the test run will then end and report all the results so
far.  A second control-c will raise a *note KeyboardInterrupt: 1a3. in
the usual way.

The control-c handling signal handler attempts to remain compatible with
code or tests that install their own ‘signal.SIGINT’ handler.  If the
‘unittest’ handler is called but `isn’t' the installed ‘signal.SIGINT’
handler, i.e.  it has been replaced by the system under test and
delegated to, then it calls the default handler.  This will normally be
the expected behavior by code that replaces an installed handler and
delegates to it.  For individual tests that need ‘unittest’ control-c
handling disabled the *note removeHandler(): 93b. decorator can be used.

There are a few utility functions for framework authors to enable
control-c handling functionality within test frameworks.

 -- Function: unittest.installHandler ()

     Install the control-c handler.  When a ‘signal.SIGINT’ is received
     (usually in response to the user pressing control-c) all registered
     results have *note stop(): 2be9. called.

 -- Function: unittest.registerResult (result)

     Register a *note TestResult: 6fb. object for control-c handling.
     Registering a result stores a weak reference to it, so it doesn’t
     prevent the result from being garbage collected.

     Registering a *note TestResult: 6fb. object has no side-effects if
     control-c handling is not enabled, so test frameworks can
     unconditionally register all results they create independently of
     whether or not handling is enabled.

 -- Function: unittest.removeResult (result)

     Remove a registered result.  Once a result has been removed then
     *note stop(): 2be9. will no longer be called on that result object
     in response to a control-c.

 -- Function: unittest.removeHandler (function=None)

     When called without arguments this function removes the control-c
     handler if it has been installed.  This function can also be used
     as a test decorator to temporarily remove the handler whilst the
     test is being executed:

          @unittest.removeHandler
          def test_signal_handling(self):
              ...


File: python.info,  Node: unittest mock --- mock object library,  Next: unittest mock --- getting started,  Prev: unittest --- Unit testing framework,  Up: Development Tools

5.26.5 ‘unittest.mock’ — mock object library
--------------------------------------------

New in version 3.3.

*note unittest.mock: 119. is a library for testing in Python.  It allows
you to replace parts of your system under test with mock objects and
make assertions about how they have been used.

*note unittest.mock: 119. provides a core *note Mock: 172. class
removing the need to create a host of stubs throughout your test suite.
After performing an action, you can make assertions about which methods
/ attributes were used and arguments they were called with.  You can
also specify return values and set needed attributes in the normal way.

Additionally, mock provides a *note patch(): 35b. decorator that handles
patching module and class level attributes within the scope of a test,
along with *note sentinel: 2c03. for creating unique objects.  See the
*note quick guide: 2c04. for some examples of how to use *note Mock:
172, *note MagicMock: 358. and *note patch(): 35b.

Mock is very easy to use and is designed for use with *note unittest:
118.  Mock is based on the ’action -> assertion’ pattern instead of
’record -> replay’ used by many mocking frameworks.

There is a backport of *note unittest.mock: 119. for earlier versions of
Python, available as mock on PyPI(1).

`Source code:' Lib/unittest/mock.py(2)

* Menu:

* Quick Guide:: 
* The Mock Class:: 
* The patchers:: 
* MagicMock and magic method support:: 
* Helpers:: 

   ---------- Footnotes ----------

   (1) https://pypi.python.org/pypi/mock

   (2) https://hg.python.org/cpython/file/default/Lib/unittest/mock.py


File: python.info,  Node: Quick Guide,  Next: The Mock Class,  Up: unittest mock --- mock object library

5.26.5.1 Quick Guide
....................

*note Mock: 172. and *note MagicMock: 358. objects create all attributes
and methods as you access them and store details of how they have been
used.  You can configure them, to specify return values or limit what
attributes are available, and then make assertions about how they have
been used:

     >>> from unittest.mock import MagicMock
     >>> thing = ProductionClass()
     >>> thing.method = MagicMock(return_value=3)
     >>> thing.method(3, 4, 5, key='value')
     3
     >>> thing.method.assert_called_with(3, 4, 5, key='value')

‘side_effect’ allows you to perform side effects, including raising an
exception when a mock is called:

     >>> mock = Mock(side_effect=KeyError('foo'))
     >>> mock()
     Traceback (most recent call last):
      ...
     KeyError: 'foo'

     >>> values = {'a': 1, 'b': 2, 'c': 3}
     >>> def side_effect(arg):
     ...     return values[arg]
     ...
     >>> mock.side_effect = side_effect
     >>> mock('a'), mock('b'), mock('c')
     (1, 2, 3)
     >>> mock.side_effect = [5, 4, 3, 2, 1]
     >>> mock(), mock(), mock()
     (5, 4, 3)

Mock has many other ways you can configure it and control its behaviour.
For example the `spec' argument configures the mock to take its
specification from another object.  Attempting to access attributes or
methods on the mock that don’t exist on the spec will fail with an *note
AttributeError: 356.

The *note patch(): 35b. decorator / context manager makes it easy to
mock classes or objects in a module under test.  The object you specify
will be replaced with a mock (or other object) during the test and
restored when the test ends:

     >>> from unittest.mock import patch
     >>> @patch('module.ClassName2')
     ... @patch('module.ClassName1')
     ... def test(MockClass1, MockClass2):
     ...     module.ClassName1()
     ...     module.ClassName2()
     ...     assert MockClass1 is module.ClassName1
     ...     assert MockClass2 is module.ClassName2
     ...     assert MockClass1.called
     ...     assert MockClass2.called
     ...
     >>> test()

     Note: When you nest patch decorators the mocks are passed in to the
     decorated function in the same order they applied (the normal
     `python' order that decorators are applied).  This means from the
     bottom up, so in the example above the mock for ‘module.ClassName1’
     is passed in first.

     With *note patch(): 35b. it matters that you patch objects in the
     namespace where they are looked up.  This is normally
     straightforward, but for a quick guide read *note where to patch:
     2c05.

As well as a decorator *note patch(): 35b. can be used as a context
manager in a with statement:

     >>> with patch.object(ProductionClass, 'method', return_value=None) as mock_method:
     ...     thing = ProductionClass()
     ...     thing.method(1, 2, 3)
     ...
     >>> mock_method.assert_called_once_with(1, 2, 3)

There is also *note patch.dict(): 2c06. for setting values in a
dictionary just during a scope and restoring the dictionary to its
original state when the test ends:

     >>> foo = {'key': 'value'}
     >>> original = foo.copy()
     >>> with patch.dict(foo, {'newkey': 'newvalue'}, clear=True):
     ...     assert foo == {'newkey': 'newvalue'}
     ...
     >>> assert foo == original

Mock supports the mocking of Python *note magic methods: 2c07.  The
easiest way of using magic methods is with the *note MagicMock: 358.
class.  It allows you to do things like:

     >>> mock = MagicMock()
     >>> mock.__str__.return_value = 'foobarbaz'
     >>> str(mock)
     'foobarbaz'
     >>> mock.__str__.assert_called_with()

Mock allows you to assign functions (or other Mock instances) to magic
methods and they will be called appropriately.  The *note MagicMock:
358. class is just a Mock variant that has all of the magic methods
pre-created for you (well, all the useful ones anyway).

The following is an example of using magic methods with the ordinary
Mock class:

     >>> mock = Mock()
     >>> mock.__str__ = Mock(return_value='wheeeeee')
     >>> str(mock)
     'wheeeeee'

For ensuring that the mock objects in your tests have the same api as
the objects they are replacing, you can use *note auto-speccing: 2c08.
Auto-speccing can be done through the `autospec' argument to patch, or
the *note create_autospec(): 2c09. function.  Auto-speccing creates mock
objects that have the same attributes and methods as the objects they
are replacing, and any functions and methods (including constructors)
have the same call signature as the real object.

This ensures that your mocks will fail in the same way as your
production code if they are used incorrectly:

     >>> from unittest.mock import create_autospec
     >>> def function(a, b, c):
     ...     pass
     ...
     >>> mock_function = create_autospec(function, return_value='fishy')
     >>> mock_function(1, 2, 3)
     'fishy'
     >>> mock_function.assert_called_once_with(1, 2, 3)
     >>> mock_function('wrong arguments')
     Traceback (most recent call last):
      ...
     TypeError: <lambda>() takes exactly 3 arguments (1 given)

*note create_autospec(): 2c09. can also be used on classes, where it
copies the signature of the ‘__init__’ method, and on callable objects
where it copies the signature of the ‘__call__’ method.


File: python.info,  Node: The Mock Class,  Next: The patchers,  Prev: Quick Guide,  Up: unittest mock --- mock object library

5.26.5.2 The Mock Class
.......................

*note Mock: 172. is a flexible mock object intended to replace the use
of stubs and test doubles throughout your code.  Mocks are callable and
create attributes as new mocks when you access them (1).  Accessing the
same attribute will always return the same mock.  Mocks record how you
use them, allowing you to make assertions about what your code has done
to them.

*note MagicMock: 358. is a subclass of *note Mock: 172. with all the
magic methods pre-created and ready to use.  There are also non-callable
variants, useful when you are mocking out objects that aren’t callable:
*note NonCallableMock: 2c0b. and *note NonCallableMagicMock: 2c0c.

The *note patch(): 35b. decorators makes it easy to temporarily replace
classes in a particular module with a *note Mock: 172. object.  By
default *note patch(): 35b. will create a *note MagicMock: 358. for you.
You can specify an alternative class of *note Mock: 172. using the
`new_callable' argument to *note patch(): 35b.

 -- Class: unittest.mock.Mock (spec=None, side_effect=None,
          return_value=DEFAULT, wraps=None, name=None, spec_set=None,
          unsafe=False, **kwargs)

     Create a new *note Mock: 172. object.  *note Mock: 172. takes
     several optional arguments that specify the behaviour of the Mock
     object:

        * `spec': This can be either a list of strings or an existing
          object (a class or instance) that acts as the specification
          for the mock object.  If you pass in an object then a list of
          strings is formed by calling dir on the object (excluding
          unsupported magic attributes and methods).  Accessing any
          attribute not in this list will raise an *note AttributeError:
          356.

          If `spec' is an object (rather than a list of strings) then
          *note __class__: df5. returns the class of the spec object.
          This allows mocks to pass *note isinstance(): 998. tests.

        * `spec_set': A stricter variant of `spec'.  If used, attempting
          to `set' or get an attribute on the mock that isn’t on the
          object passed as `spec_set' will raise an *note
          AttributeError: 356.

        * `side_effect': A function to be called whenever the Mock is
          called.  See the *note side_effect: 2c0d. attribute.  Useful
          for raising exceptions or dynamically changing return values.
          The function is called with the same arguments as the mock,
          and unless it returns *note DEFAULT: 2c0e, the return value of
          this function is used as the return value.

          Alternatively `side_effect' can be an exception class or
          instance.  In this case the exception will be raised when the
          mock is called.

          If `side_effect' is an iterable then each call to the mock
          will return the next value from the iterable.

          A `side_effect' can be cleared by setting it to ‘None’.

        * `return_value': The value returned when the mock is called.
          By default this is a new Mock (created on first access).  See
          the *note return_value: 2c0f. attribute.

        * `unsafe': By default if any attribute starts with `assert' or
          `assret' will raise an *note AttributeError: 356.  Passing
          ‘unsafe=True’ will allow access to these attributes.

          New in version 3.5.

        * `wraps': Item for the mock object to wrap.  If `wraps' is not
          None then calling the Mock will pass the call through to the
          wrapped object (returning the real result).  Attribute access
          on the mock will return a Mock object that wraps the
          corresponding attribute of the wrapped object (so attempting
          to access an attribute that doesn’t exist will raise an *note
          AttributeError: 356.).

          If the mock has an explicit `return_value' set then calls are
          not passed to the wrapped object and the `return_value' is
          returned instead.

        * `name': If the mock has a name then it will be used in the
          repr of the mock.  This can be useful for debugging.  The name
          is propagated to child mocks.

     Mocks can also be called with arbitrary keyword arguments.  These
     will be used to set attributes on the mock after it is created.
     See the *note configure_mock(): 2c10. method for details.

      -- Method: assert_called (*args, **kwargs)

          Assert that the mock was called at least once.

               >>> mock = Mock()
               >>> mock.method()
               <Mock name='mock.method()' id='...'>
               >>> mock.method.assert_called()

          New in version 3.6.

      -- Method: assert_called_once (*args, **kwargs)

          Assert that the mock was called exactly once.

               >>> mock = Mock()
               >>> mock.method()
               <Mock name='mock.method()' id='...'>
               >>> mock.method.assert_called_once()
               >>> mock.method()
               <Mock name='mock.method()' id='...'>
               >>> mock.method.assert_called_once()
               Traceback (most recent call last):
               ...
               AssertionError: Expected 'method' to have been called once. Called 2 times.

          New in version 3.6.

      -- Method: assert_called_with (*args, **kwargs)

          This method is a convenient way of asserting that calls are
          made in a particular way:

               >>> mock = Mock()
               >>> mock.method(1, 2, 3, test='wow')
               <Mock name='mock.method()' id='...'>
               >>> mock.method.assert_called_with(1, 2, 3, test='wow')

      -- Method: assert_called_once_with (*args, **kwargs)

          Assert that the mock was called exactly once and with the
          specified arguments.

               >>> mock = Mock(return_value=None)
               >>> mock('foo', bar='baz')
               >>> mock.assert_called_once_with('foo', bar='baz')
               >>> mock('foo', bar='baz')
               >>> mock.assert_called_once_with('foo', bar='baz')
               Traceback (most recent call last):
                 ...
               AssertionError: Expected 'mock' to be called once. Called 2 times.

      -- Method: assert_any_call (*args, **kwargs)

          assert the mock has been called with the specified arguments.

          The assert passes if the mock has `ever' been called, unlike
          *note assert_called_with(): 2c11. and *note
          assert_called_once_with(): 2c12. that only pass if the call is
          the most recent one.

               >>> mock = Mock(return_value=None)
               >>> mock(1, 2, arg='thing')
               >>> mock('some', 'thing', 'else')
               >>> mock.assert_any_call(1, 2, arg='thing')

      -- Method: assert_has_calls (calls, any_order=False)

          assert the mock has been called with the specified calls.  The
          *note mock_calls: 2c15. list is checked for the calls.

          If `any_order' is false (the default) then the calls must be
          sequential.  There can be extra calls before or after the
          specified calls.

          If `any_order' is true then the calls can be in any order, but
          they must all appear in *note mock_calls: 2c15.

               >>> mock = Mock(return_value=None)
               >>> mock(1)
               >>> mock(2)
               >>> mock(3)
               >>> mock(4)
               >>> calls = [call(2), call(3)]
               >>> mock.assert_has_calls(calls)
               >>> calls = [call(4), call(2), call(3)]
               >>> mock.assert_has_calls(calls, any_order=True)

      -- Method: assert_not_called (*args, **kwargs)

          Assert the mock was never called.

               >>> m = Mock()
               >>> m.hello.assert_not_called()
               >>> obj = m.hello()
               >>> m.hello.assert_not_called()
               Traceback (most recent call last):
                 ...
               AssertionError: Expected 'hello' to not have been called. Called 1 times.

          New in version 3.5.

      -- Method: reset_mock ()

          The reset_mock method resets all the call attributes on a mock
          object:

               >>> mock = Mock(return_value=None)
               >>> mock('hello')
               >>> mock.called
               True
               >>> mock.reset_mock()
               >>> mock.called
               False

          This can be useful where you want to make a series of
          assertions that reuse the same object.  Note that *note
          reset_mock(): 2c16. `doesn’t' clear the return value, *note
          side_effect: 2c0d. or any child attributes you have set using
          normal assignment.  Child mocks and the return value mock (if
          any) are reset as well.

      -- Method: mock_add_spec (spec, spec_set=False)

          Add a spec to a mock.  `spec' can either be an object or a
          list of strings.  Only attributes on the `spec' can be fetched
          as attributes from the mock.

          If `spec_set' is true then only attributes on the spec can be
          set.

      -- Method: attach_mock (mock, attribute)

          Attach a mock as an attribute of this one, replacing its name
          and parent.  Calls to the attached mock will be recorded in
          the *note method_calls: 2c19. and *note mock_calls: 2c15.
          attributes of this one.

      -- Method: configure_mock (**kwargs)

          Set attributes on the mock through keyword arguments.

          Attributes plus return values and side effects can be set on
          child mocks using standard dot notation and unpacking a
          dictionary in the method call:

               >>> mock = Mock()
               >>> attrs = {'method.return_value': 3, 'other.side_effect': KeyError}
               >>> mock.configure_mock(**attrs)
               >>> mock.method()
               3
               >>> mock.other()
               Traceback (most recent call last):
                 ...
               KeyError

          The same thing can be achieved in the constructor call to
          mocks:

               >>> attrs = {'method.return_value': 3, 'other.side_effect': KeyError}
               >>> mock = Mock(some_attribute='eggs', **attrs)
               >>> mock.some_attribute
               'eggs'
               >>> mock.method()
               3
               >>> mock.other()
               Traceback (most recent call last):
                 ...
               KeyError

          *note configure_mock(): 2c10. exists to make it easier to do
          configuration after the mock has been created.

      -- Method: __dir__ ()

          *note Mock: 172. objects limit the results of ‘dir(some_mock)’
          to useful results.  For mocks with a `spec' this includes all
          the permitted attributes for the mock.

          See *note FILTER_DIR: 2c1b. for what this filtering does, and
          how to switch it off.

      -- Method: _get_child_mock (**kw)

          Create the child mocks for attributes and return value.  By
          default child mocks will be the same type as the parent.
          Subclasses of Mock may want to override this to customize the
          way child mocks are made.

          For non-callable mocks the callable variant will be used
          (rather than any custom subclass).

      -- Attribute: called

          A boolean representing whether or not the mock object has been
          called:

               >>> mock = Mock(return_value=None)
               >>> mock.called
               False
               >>> mock()
               >>> mock.called
               True

      -- Attribute: call_count

          An integer telling you how many times the mock object has been
          called:

               >>> mock = Mock(return_value=None)
               >>> mock.call_count
               0
               >>> mock()
               >>> mock()
               >>> mock.call_count
               2

      -- Attribute: return_value

          Set this to configure the value returned by calling the mock:

               >>> mock = Mock()
               >>> mock.return_value = 'fish'
               >>> mock()
               'fish'

          The default return value is a mock object and you can
          configure it in the normal way:

               >>> mock = Mock()
               >>> mock.return_value.attribute = sentinel.Attribute
               >>> mock.return_value()
               <Mock name='mock()()' id='...'>
               >>> mock.return_value.assert_called_with()

          *note return_value: 2c0f. can also be set in the constructor:

               >>> mock = Mock(return_value=3)
               >>> mock.return_value
               3
               >>> mock()
               3

      -- Attribute: side_effect

          This can either be a function to be called when the mock is
          called, an iterable or an exception (class or instance) to be
          raised.

          If you pass in a function it will be called with same
          arguments as the mock and unless the function returns the
          *note DEFAULT: 2c0e. singleton the call to the mock will then
          return whatever the function returns.  If the function returns
          *note DEFAULT: 2c0e. then the mock will return its normal
          value (from the *note return_value: 2c0f.).

          If you pass in an iterable, it is used to retrieve an iterator
          which must yield a value on every call.  This value can either
          be an exception instance to be raised, or a value to be
          returned from the call to the mock (*note DEFAULT: 2c0e.
          handling is identical to the function case).

          An example of a mock that raises an exception (to test
          exception handling of an API):

               >>> mock = Mock()
               >>> mock.side_effect = Exception('Boom!')
               >>> mock()
               Traceback (most recent call last):
                 ...
               Exception: Boom!

          Using *note side_effect: 2c0d. to return a sequence of values:

               >>> mock = Mock()
               >>> mock.side_effect = [3, 2, 1]
               >>> mock(), mock(), mock()
               (3, 2, 1)

          Using a callable:

               >>> mock = Mock(return_value=3)
               >>> def side_effect(*args, **kwargs):
               ...     return DEFAULT
               ...
               >>> mock.side_effect = side_effect
               >>> mock()
               3

          *note side_effect: 2c0d. can be set in the constructor.
          Here’s an example that adds one to the value the mock is
          called with and returns it:

               >>> side_effect = lambda value: value + 1
               >>> mock = Mock(side_effect=side_effect)
               >>> mock(3)
               4
               >>> mock(-8)
               -7

          Setting *note side_effect: 2c0d. to ‘None’ clears it:

               >>> m = Mock(side_effect=KeyError, return_value=3)
               >>> m()
               Traceback (most recent call last):
                ...
               KeyError
               >>> m.side_effect = None
               >>> m()
               3

      -- Attribute: call_args

          This is either ‘None’ (if the mock hasn’t been called), or the
          arguments that the mock was last called with.  This will be in
          the form of a tuple: the first member is any ordered arguments
          the mock was called with (or an empty tuple) and the second
          member is any keyword arguments (or an empty dictionary).

               >>> mock = Mock(return_value=None)
               >>> print(mock.call_args)
               None
               >>> mock()
               >>> mock.call_args
               call()
               >>> mock.call_args == ()
               True
               >>> mock(3, 4)
               >>> mock.call_args
               call(3, 4)
               >>> mock.call_args == ((3, 4),)
               True
               >>> mock(3, 4, 5, key='fish', next='w00t!')
               >>> mock.call_args
               call(3, 4, 5, key='fish', next='w00t!')

          *note call_args: 2c1f, along with members of the lists *note
          call_args_list: 2c20, *note method_calls: 2c19. and *note
          mock_calls: 2c15. are *note call: 2c21. objects.  These are
          tuples, so they can be unpacked to get at the individual
          arguments and make more complex assertions.  See *note calls
          as tuples: 2c22.

      -- Attribute: call_args_list

          This is a list of all the calls made to the mock object in
          sequence (so the length of the list is the number of times it
          has been called).  Before any calls have been made it is an
          empty list.  The *note call: 2c21. object can be used for
          conveniently constructing lists of calls to compare with *note
          call_args_list: 2c20.

               >>> mock = Mock(return_value=None)
               >>> mock()
               >>> mock(3, 4)
               >>> mock(key='fish', next='w00t!')
               >>> mock.call_args_list
               [call(), call(3, 4), call(key='fish', next='w00t!')]
               >>> expected = [(), ((3, 4),), ({'key': 'fish', 'next': 'w00t!'},)]
               >>> mock.call_args_list == expected
               True

          Members of *note call_args_list: 2c20. are *note call: 2c21.
          objects.  These can be unpacked as tuples to get at the
          individual arguments.  See *note calls as tuples: 2c22.

      -- Attribute: method_calls

          As well as tracking calls to themselves, mocks also track
          calls to methods and attributes, and `their' methods and
          attributes:

               >>> mock = Mock()
               >>> mock.method()
               <Mock name='mock.method()' id='...'>
               >>> mock.property.method.attribute()
               <Mock name='mock.property.method.attribute()' id='...'>
               >>> mock.method_calls
               [call.method(), call.property.method.attribute()]

          Members of *note method_calls: 2c19. are *note call: 2c21.
          objects.  These can be unpacked as tuples to get at the
          individual arguments.  See *note calls as tuples: 2c22.

      -- Attribute: mock_calls

          *note mock_calls: 2c15. records `all' calls to the mock
          object, its methods, magic methods `and' return value mocks.

               >>> mock = MagicMock()
               >>> result = mock(1, 2, 3)
               >>> mock.first(a=3)
               <MagicMock name='mock.first()' id='...'>
               >>> mock.second()
               <MagicMock name='mock.second()' id='...'>
               >>> int(mock)
               1
               >>> result(1)
               <MagicMock name='mock()()' id='...'>
               >>> expected = [call(1, 2, 3), call.first(a=3), call.second(),
               ... call.__int__(), call()(1)]
               >>> mock.mock_calls == expected
               True

          Members of *note mock_calls: 2c15. are *note call: 2c21.
          objects.  These can be unpacked as tuples to get at the
          individual arguments.  See *note calls as tuples: 2c22.

      -- Attribute: __class__

          Normally the *note __class__: 2c23. attribute of an object
          will return its type.  For a mock object with a ‘spec’,
          ‘__class__’ returns the spec class instead.  This allows mock
          objects to pass *note isinstance(): 998. tests for the object
          they are replacing / masquerading as:

               >>> mock = Mock(spec=3)
               >>> isinstance(mock, int)
               True

          *note __class__: 2c23. is assignable to, this allows a mock to
          pass an *note isinstance(): 998. check without forcing you to
          use a spec:

               >>> mock = Mock()
               >>> mock.__class__ = dict
               >>> isinstance(mock, dict)
               True

 -- Class: unittest.mock.NonCallableMock (spec=None, wraps=None,
          name=None, spec_set=None, **kwargs)

     A non-callable version of *note Mock: 172.  The constructor
     parameters have the same meaning of *note Mock: 172, with the
     exception of `return_value' and `side_effect' which have no meaning
     on a non-callable mock.

Mock objects that use a class or an instance as a ‘spec’ or ‘spec_set’
are able to pass *note isinstance(): 998. tests:

     >>> mock = Mock(spec=SomeClass)
     >>> isinstance(mock, SomeClass)
     True
     >>> mock = Mock(spec_set=SomeClass())
     >>> isinstance(mock, SomeClass)
     True

The *note Mock: 172. classes have support for mocking magic methods.
See *note magic methods: 2c07. for the full details.

The mock classes and the *note patch(): 35b. decorators all take
arbitrary keyword arguments for configuration.  For the *note patch():
35b. decorators the keywords are passed to the constructor of the mock
being created.  The keyword arguments are for configuring attributes of
the mock:

     >>> m = MagicMock(attribute=3, other='fish')
     >>> m.attribute
     3
     >>> m.other
     'fish'

The return value and side effect of child mocks can be set in the same
way, using dotted notation.  As you can’t use dotted names directly in a
call you have to create a dictionary and unpack it using ‘**’:

     >>> attrs = {'method.return_value': 3, 'other.side_effect': KeyError}
     >>> mock = Mock(some_attribute='eggs', **attrs)
     >>> mock.some_attribute
     'eggs'
     >>> mock.method()
     3
     >>> mock.other()
     Traceback (most recent call last):
       ...
     KeyError

A callable mock which was created with a `spec' (or a `spec_set') will
introspect the specification object’s signature when matching calls to
the mock.  Therefore, it can match the actual call’s arguments
regardless of whether they were passed positionally or by name:

     >>> def f(a, b, c): pass
     ...
     >>> mock = Mock(spec=f)
     >>> mock(1, 2, c=3)
     <Mock name='mock()' id='140161580456576'>
     >>> mock.assert_called_with(1, 2, 3)
     >>> mock.assert_called_with(a=1, b=2, c=3)

This applies to *note assert_called_with(): 2c11, *note
assert_called_once_with(): 2c12, *note assert_has_calls(): 2c14. and
*note assert_any_call(): 2c13.  When *note Autospeccing: 2c08, it will
also apply to method calls on the mock object.

     Changed in version 3.4: Added signature introspection on specced
     and autospecced mock objects.

 -- Class: unittest.mock.PropertyMock (*args, **kwargs)

     A mock intended to be used as a property, or other descriptor, on a
     class.  *note PropertyMock: 2c24. provides *note __get__(): e02.
     and *note __set__(): e03. methods so you can specify a return value
     when it is fetched.

     Fetching a *note PropertyMock: 2c24. instance from an object calls
     the mock, with no args.  Setting it calls the mock with the value
     being set.

          >>> class Foo:
          ...     @property
          ...     def foo(self):
          ...         return 'something'
          ...     @foo.setter
          ...     def foo(self, value):
          ...         pass
          ...
          >>> with patch('__main__.Foo.foo', new_callable=PropertyMock) as mock_foo:
          ...     mock_foo.return_value = 'mockity-mock'
          ...     this_foo = Foo()
          ...     print(this_foo.foo)
          ...     this_foo.foo = 6
          ...
          mockity-mock
          >>> mock_foo.mock_calls
          [call(), call(6)]

Because of the way mock attributes are stored you can’t directly attach
a *note PropertyMock: 2c24. to a mock object.  Instead you can attach it
to the mock type object:

     >>> m = MagicMock()
     >>> p = PropertyMock(return_value=3)
     >>> type(m).foo = p
     >>> m.foo
     3
     >>> p.assert_called_once_with()

* Menu:

* Calling:: 
* Deleting Attributes:: 
* Mock names and the name attribute:: 
* Attaching Mocks as Attributes:: 

   ---------- Footnotes ----------

   (1) The only exceptions are magic methods and attributes (those that
have leading and trailing double underscores).  Mock doesn’t create
these but instead raises an *note AttributeError: 356.  This is because
the interpreter will often implicitly request these methods, and gets
`very' confused to get a new Mock object when it expects a magic method.
If you need magic method support see *note magic methods: 2c07.


File: python.info,  Node: Calling,  Next: Deleting Attributes,  Up: The Mock Class

5.26.5.3 Calling
................

Mock objects are callable.  The call will return the value set as the
*note return_value: 2c0f. attribute.  The default return value is a new
Mock object; it is created the first time the return value is accessed
(either explicitly or by calling the Mock) - but it is stored and the
same one returned each time.

Calls made to the object will be recorded in the attributes like *note
call_args: 2c1f. and *note call_args_list: 2c20.

If *note side_effect: 2c0d. is set then it will be called after the call
has been recorded, so if ‘side_effect’ raises an exception the call is
still recorded.

The simplest way to make a mock raise an exception when called is to
make *note side_effect: 2c0d. an exception class or instance:

     >>> m = MagicMock(side_effect=IndexError)
     >>> m(1, 2, 3)
     Traceback (most recent call last):
       ...
     IndexError
     >>> m.mock_calls
     [call(1, 2, 3)]
     >>> m.side_effect = KeyError('Bang!')
     >>> m('two', 'three', 'four')
     Traceback (most recent call last):
       ...
     KeyError: 'Bang!'
     >>> m.mock_calls
     [call(1, 2, 3), call('two', 'three', 'four')]

If ‘side_effect’ is a function then whatever that function returns is
what calls to the mock return.  The ‘side_effect’ function is called
with the same arguments as the mock.  This allows you to vary the return
value of the call dynamically, based on the input:

     >>> def side_effect(value):
     ...     return value + 1
     ...
     >>> m = MagicMock(side_effect=side_effect)
     >>> m(1)
     2
     >>> m(2)
     3
     >>> m.mock_calls
     [call(1), call(2)]

If you want the mock to still return the default return value (a new
mock), or any set return value, then there are two ways of doing this.
Either return ‘mock.return_value’ from inside ‘side_effect’, or return
*note DEFAULT: 2c0e.:

     >>> m = MagicMock()
     >>> def side_effect(*args, **kwargs):
     ...     return m.return_value
     ...
     >>> m.side_effect = side_effect
     >>> m.return_value = 3
     >>> m()
     3
     >>> def side_effect(*args, **kwargs):
     ...     return DEFAULT
     ...
     >>> m.side_effect = side_effect
     >>> m()
     3

To remove a ‘side_effect’, and return to the default behaviour, set the
‘side_effect’ to ‘None’:

     >>> m = MagicMock(return_value=6)
     >>> def side_effect(*args, **kwargs):
     ...     return 3
     ...
     >>> m.side_effect = side_effect
     >>> m()
     3
     >>> m.side_effect = None
     >>> m()
     6

The ‘side_effect’ can also be any iterable object.  Repeated calls to
the mock will return values from the iterable (until the iterable is
exhausted and a *note StopIteration: 191. is raised):

     >>> m = MagicMock(side_effect=[1, 2, 3])
     >>> m()
     1
     >>> m()
     2
     >>> m()
     3
     >>> m()
     Traceback (most recent call last):
       ...
     StopIteration

If any members of the iterable are exceptions they will be raised
instead of returned:

     >>> iterable = (33, ValueError, 66)
     >>> m = MagicMock(side_effect=iterable)
     >>> m()
     33
     >>> m()
     Traceback (most recent call last):
      ...
     ValueError
     >>> m()
     66


File: python.info,  Node: Deleting Attributes,  Next: Mock names and the name attribute,  Prev: Calling,  Up: The Mock Class

5.26.5.4 Deleting Attributes
............................

Mock objects create attributes on demand.  This allows them to pretend
to be objects of any type.

You may want a mock object to return ‘False’ to a *note hasattr(): 780.
call, or raise an *note AttributeError: 356. when an attribute is
fetched.  You can do this by providing an object as a ‘spec’ for a mock,
but that isn’t always convenient.

You "block" attributes by deleting them.  Once deleted, accessing an
attribute will raise an *note AttributeError: 356.

     >>> mock = MagicMock()
     >>> hasattr(mock, 'm')
     True
     >>> del mock.m
     >>> hasattr(mock, 'm')
     False
     >>> del mock.f
     >>> mock.f
     Traceback (most recent call last):
         ...
     AttributeError: f


File: python.info,  Node: Mock names and the name attribute,  Next: Attaching Mocks as Attributes,  Prev: Deleting Attributes,  Up: The Mock Class

5.26.5.5 Mock names and the name attribute
..........................................

Since "name" is an argument to the *note Mock: 172. constructor, if you
want your mock object to have a "name" attribute you can’t just pass it
in at creation time.  There are two alternatives.  One option is to use
*note configure_mock(): 2c10.:

     >>> mock = MagicMock()
     >>> mock.configure_mock(name='my_name')
     >>> mock.name
     'my_name'

A simpler option is to simply set the "name" attribute after mock
creation:

     >>> mock = MagicMock()
     >>> mock.name = "foo"


File: python.info,  Node: Attaching Mocks as Attributes,  Prev: Mock names and the name attribute,  Up: The Mock Class

5.26.5.6 Attaching Mocks as Attributes
......................................

When you attach a mock as an attribute of another mock (or as the return
value) it becomes a "child" of that mock.  Calls to the child are
recorded in the *note method_calls: 2c19. and *note mock_calls: 2c15.
attributes of the parent.  This is useful for configuring child mocks
and then attaching them to the parent, or for attaching mocks to a
parent that records all calls to the children and allows you to make
assertions about the order of calls between mocks:

     >>> parent = MagicMock()
     >>> child1 = MagicMock(return_value=None)
     >>> child2 = MagicMock(return_value=None)
     >>> parent.child1 = child1
     >>> parent.child2 = child2
     >>> child1(1)
     >>> child2(2)
     >>> parent.mock_calls
     [call.child1(1), call.child2(2)]

The exception to this is if the mock has a name.  This allows you to
prevent the "parenting" if for some reason you don’t want it to happen.

     >>> mock = MagicMock()
     >>> not_a_child = MagicMock(name='not-a-child')
     >>> mock.attribute = not_a_child
     >>> mock.attribute()
     <MagicMock name='not-a-child()' id='...'>
     >>> mock.mock_calls
     []

Mocks created for you by *note patch(): 35b. are automatically given
names.  To attach mocks that have names to a parent you use the *note
attach_mock(): 2c18. method:

     >>> thing1 = object()
     >>> thing2 = object()
     >>> parent = MagicMock()
     >>> with patch('__main__.thing1', return_value=None) as child1:
     ...     with patch('__main__.thing2', return_value=None) as child2:
     ...         parent.attach_mock(child1, 'child1')
     ...         parent.attach_mock(child2, 'child2')
     ...         child1('one')
     ...         child2('two')
     ...
     >>> parent.mock_calls
     [call.child1('one'), call.child2('two')]


File: python.info,  Node: The patchers,  Next: MagicMock and magic method support,  Prev: The Mock Class,  Up: unittest mock --- mock object library

5.26.5.7 The patchers
.....................

The patch decorators are used for patching objects only within the scope
of the function they decorate.  They automatically handle the unpatching
for you, even if exceptions are raised.  All of these functions can also
be used in with statements or as class decorators.

* Menu:

* patch:: 
* patch.object: patch object. 
* patch.dict: patch dict. 
* patch.multiple: patch multiple. 
* patch methods; start and stop: patch methods start and stop. 
* patch builtins:: 
* TEST_PREFIX:: 
* Nesting Patch Decorators:: 
* Where to patch:: 
* Patching Descriptors and Proxy Objects:: 


File: python.info,  Node: patch,  Next: patch object,  Up: The patchers

5.26.5.8 patch
..............

     Note: *note patch(): 35b. is straightforward to use.  The key is to
     do the patching in the right namespace.  See the section *note
     where to patch: 2c2c.

 -- Function: unittest.mock.patch (target, new=DEFAULT, spec=None,
          create=False, spec_set=None, autospec=None, new_callable=None,
          **kwargs)

     *note patch(): 35b. acts as a function decorator, class decorator
     or a context manager.  Inside the body of the function or with
     statement, the `target' is patched with a `new' object.  When the
     function/with statement exits the patch is undone.

     If `new' is omitted, then the target is replaced with a *note
     MagicMock: 358.  If *note patch(): 35b. is used as a decorator and
     `new' is omitted, the created mock is passed in as an extra
     argument to the decorated function.  If *note patch(): 35b. is used
     as a context manager the created mock is returned by the context
     manager.

     `target' should be a string in the form
     ‘'package.module.ClassName'’.  The `target' is imported and the
     specified object replaced with the `new' object, so the `target'
     must be importable from the environment you are calling *note
     patch(): 35b. from.  The target is imported when the decorated
     function is executed, not at decoration time.

     The `spec' and `spec_set' keyword arguments are passed to the *note
     MagicMock: 358. if patch is creating one for you.

     In addition you can pass ‘spec=True’ or ‘spec_set=True’, which
     causes patch to pass in the object being mocked as the
     spec/spec_set object.

     `new_callable' allows you to specify a different class, or callable
     object, that will be called to create the `new' object.  By default
     *note MagicMock: 358. is used.

     A more powerful form of `spec' is `autospec'.  If you set
     ‘autospec=True’ then the mock will be created with a spec from the
     object being replaced.  All attributes of the mock will also have
     the spec of the corresponding attribute of the object being
     replaced.  Methods and functions being mocked will have their
     arguments checked and will raise a *note TypeError: 562. if they
     are called with the wrong signature.  For mocks replacing a class,
     their return value (the ’instance’) will have the same spec as the
     class.  See the *note create_autospec(): 2c09. function and *note
     Autospeccing: 2c08.

     Instead of ‘autospec=True’ you can pass ‘autospec=some_object’ to
     use an arbitrary object as the spec instead of the one being
     replaced.

     By default *note patch(): 35b. will fail to replace attributes that
     don’t exist.  If you pass in ‘create=True’, and the attribute
     doesn’t exist, patch will create the attribute for you when the
     patched function is called, and delete it again afterwards.  This
     is useful for writing tests against attributes that your production
     code creates at runtime.  It is off by default because it can be
     dangerous.  With it switched on you can write passing tests against
     APIs that don’t actually exist!

          Note: 
          Changed in version 3.5: If you are patching builtins in a
          module then you don’t need to pass ‘create=True’, it will be
          added by default.

     Patch can be used as a ‘TestCase’ class decorator.  It works by
     decorating each test method in the class.  This reduces the
     boilerplate code when your test methods share a common patchings
     set.  *note patch(): 35b. finds tests by looking for method names
     that start with ‘patch.TEST_PREFIX’.  By default this is ‘'test'’,
     which matches the way *note unittest: 118. finds tests.  You can
     specify an alternative prefix by setting ‘patch.TEST_PREFIX’.

     Patch can be used as a context manager, with the with statement.
     Here the patching applies to the indented block after the with
     statement.  If you use "as" then the patched object will be bound
     to the name after the "as"; very useful if *note patch(): 35b. is
     creating a mock object for you.

     *note patch(): 35b. takes arbitrary keyword arguments.  These will
     be passed to the *note Mock: 172. (or `new_callable') on
     construction.

     ‘patch.dict(...)’, ‘patch.multiple(...)’ and ‘patch.object(...)’
     are available for alternate use-cases.

*note patch(): 35b. as function decorator, creating the mock for you and
passing it into the decorated function:

     >>> @patch('__main__.SomeClass')
     ... def function(normal_argument, mock_class):
     ...     print(mock_class is SomeClass)
     ...
     >>> function(None)
     True

Patching a class replaces the class with a *note MagicMock: 358.
`instance'.  If the class is instantiated in the code under test then it
will be the *note return_value: 2c0f. of the mock that will be used.

If the class is instantiated multiple times you could use *note
side_effect: 2c0d. to return a new mock each time.  Alternatively you
can set the `return_value' to be anything you want.

To configure return values on methods of `instances' on the patched
class you must do this on the ‘return_value’.  For example:

     >>> class Class:
     ...     def method(self):
     ...         pass
     ...
     >>> with patch('__main__.Class') as MockClass:
     ...     instance = MockClass.return_value
     ...     instance.method.return_value = 'foo'
     ...     assert Class() is instance
     ...     assert Class().method() == 'foo'
     ...

If you use `spec' or `spec_set' and *note patch(): 35b. is replacing a
`class', then the return value of the created mock will have the same
spec.

     >>> Original = Class
     >>> patcher = patch('__main__.Class', spec=True)
     >>> MockClass = patcher.start()
     >>> instance = MockClass()
     >>> assert isinstance(instance, Original)
     >>> patcher.stop()

The `new_callable' argument is useful where you want to use an
alternative class to the default *note MagicMock: 358. for the created
mock.  For example, if you wanted a *note NonCallableMock: 2c0b. to be
used:

     >>> thing = object()
     >>> with patch('__main__.thing', new_callable=NonCallableMock) as mock_thing:
     ...     assert thing is mock_thing
     ...     thing()
     ...
     Traceback (most recent call last):
       ...
     TypeError: 'NonCallableMock' object is not callable

Another use case might be to replace an object with an *note
io.StringIO: 41e. instance:

     >>> from io import StringIO
     >>> def foo():
     ...     print('Something')
     ...
     >>> @patch('sys.stdout', new_callable=StringIO)
     ... def test(mock_stdout):
     ...     foo()
     ...     assert mock_stdout.getvalue() == 'Something\n'
     ...
     >>> test()

When *note patch(): 35b. is creating a mock for you, it is common that
the first thing you need to do is to configure the mock.  Some of that
configuration can be done in the call to patch.  Any arbitrary keywords
you pass into the call will be used to set attributes on the created
mock:

     >>> patcher = patch('__main__.thing', first='one', second='two')
     >>> mock_thing = patcher.start()
     >>> mock_thing.first
     'one'
     >>> mock_thing.second
     'two'

As well as attributes on the created mock attributes, like the *note
return_value: 2c0f. and *note side_effect: 2c0d, of child mocks can also
be configured.  These aren’t syntactically valid to pass in directly as
keyword arguments, but a dictionary with these as keys can still be
expanded into a *note patch(): 35b. call using ‘**’:

     >>> config = {'method.return_value': 3, 'other.side_effect': KeyError}
     >>> patcher = patch('__main__.thing', **config)
     >>> mock_thing = patcher.start()
     >>> mock_thing.method()
     3
     >>> mock_thing.other()
     Traceback (most recent call last):
       ...
     KeyError


File: python.info,  Node: patch object,  Next: patch dict,  Prev: patch,  Up: The patchers

5.26.5.9 patch.object
.....................

 -- Function: patch.object (target, attribute, new=DEFAULT, spec=None,
          create=False, spec_set=None, autospec=None, new_callable=None,
          **kwargs)

     patch the named member (`attribute') on an object (`target') with a
     mock object.

     *note patch.object(): 2c2e. can be used as a decorator, class
     decorator or a context manager.  Arguments `new', `spec', `create',
     `spec_set', `autospec' and `new_callable' have the same meaning as
     for *note patch(): 35b.  Like *note patch(): 35b, *note
     patch.object(): 2c2e. takes arbitrary keyword arguments for
     configuring the mock object it creates.

     When used as a class decorator *note patch.object(): 2c2e. honours
     ‘patch.TEST_PREFIX’ for choosing which methods to wrap.

You can either call *note patch.object(): 2c2e. with three arguments or
two arguments.  The three argument form takes the object to be patched,
the attribute name and the object to replace the attribute with.

When calling with the two argument form you omit the replacement object,
and a mock is created for you and passed in as an extra argument to the
decorated function:

     >>> @patch.object(SomeClass, 'class_method')
     ... def test(mock_method):
     ...     SomeClass.class_method(3)
     ...     mock_method.assert_called_with(3)
     ...
     >>> test()

`spec', `create' and the other arguments to *note patch.object(): 2c2e.
have the same meaning as they do for *note patch(): 35b.


File: python.info,  Node: patch dict,  Next: patch multiple,  Prev: patch object,  Up: The patchers

5.26.5.10 patch.dict
....................

 -- Function: patch.dict (in_dict, values=(), clear=False, **kwargs)

     Patch a dictionary, or dictionary like object, and restore the
     dictionary to its original state after the test.

     `in_dict' can be a dictionary or a mapping like container.  If it
     is a mapping then it must at least support getting, setting and
     deleting items plus iterating over keys.

     `in_dict' can also be a string specifying the name of the
     dictionary, which will then be fetched by importing it.

     `values' can be a dictionary of values to set in the dictionary.
     `values' can also be an iterable of ‘(key, value)’ pairs.

     If `clear' is true then the dictionary will be cleared before the
     new values are set.

     *note patch.dict(): 2c06. can also be called with arbitrary keyword
     arguments to set values in the dictionary.

     *note patch.dict(): 2c06. can be used as a context manager,
     decorator or class decorator.  When used as a class decorator *note
     patch.dict(): 2c06. honours ‘patch.TEST_PREFIX’ for choosing which
     methods to wrap.

*note patch.dict(): 2c06. can be used to add members to a dictionary, or
simply let a test change a dictionary, and ensure the dictionary is
restored when the test ends.

     >>> foo = {}
     >>> with patch.dict(foo, {'newkey': 'newvalue'}):
     ...     assert foo == {'newkey': 'newvalue'}
     ...
     >>> assert foo == {}

     >>> import os
     >>> with patch.dict('os.environ', {'newkey': 'newvalue'}):
     ...     print(os.environ['newkey'])
     ...
     newvalue
     >>> assert 'newkey' not in os.environ

Keywords can be used in the *note patch.dict(): 2c06. call to set values
in the dictionary:

     >>> mymodule = MagicMock()
     >>> mymodule.function.return_value = 'fish'
     >>> with patch.dict('sys.modules', mymodule=mymodule):
     ...     import mymodule
     ...     mymodule.function('some', 'args')
     ...
     'fish'

*note patch.dict(): 2c06. can be used with dictionary like objects that
aren’t actually dictionaries.  At the very minimum they must support
item getting, setting, deleting and either iteration or membership test.
This corresponds to the magic methods *note __getitem__(): a84, *note
__setitem__(): 8cd, *note __delitem__(): 8ce. and either *note
__iter__(): 99b. or *note __contains__(): 99c.

     >>> class Container:
     ...     def __init__(self):
     ...         self.values = {}
     ...     def __getitem__(self, name):
     ...         return self.values[name]
     ...     def __setitem__(self, name, value):
     ...         self.values[name] = value
     ...     def __delitem__(self, name):
     ...         del self.values[name]
     ...     def __iter__(self):
     ...         return iter(self.values)
     ...
     >>> thing = Container()
     >>> thing['one'] = 1
     >>> with patch.dict(thing, one=2, two=3):
     ...     assert thing['one'] == 2
     ...     assert thing['two'] == 3
     ...
     >>> assert thing['one'] == 1
     >>> assert list(thing) == ['one']


File: python.info,  Node: patch multiple,  Next: patch methods start and stop,  Prev: patch dict,  Up: The patchers

5.26.5.11 patch.multiple
........................

 -- Function: patch.multiple (target, spec=None, create=False,
          spec_set=None, autospec=None, new_callable=None, **kwargs)

     Perform multiple patches in a single call.  It takes the object to
     be patched (either as an object or a string to fetch the object by
     importing) and keyword arguments for the patches:

          with patch.multiple(settings, FIRST_PATCH='one', SECOND_PATCH='two'):
              ...

     Use *note DEFAULT: 2c0e. as the value if you want *note
     patch.multiple(): 2c31. to create mocks for you.  In this case the
     created mocks are passed into a decorated function by keyword, and
     a dictionary is returned when *note patch.multiple(): 2c31. is used
     as a context manager.

     *note patch.multiple(): 2c31. can be used as a decorator, class
     decorator or a context manager.  The arguments `spec', `spec_set',
     `create', `autospec' and `new_callable' have the same meaning as
     for *note patch(): 35b.  These arguments will be applied to `all'
     patches done by *note patch.multiple(): 2c31.

     When used as a class decorator *note patch.multiple(): 2c31.
     honours ‘patch.TEST_PREFIX’ for choosing which methods to wrap.

If you want *note patch.multiple(): 2c31. to create mocks for you, then
you can use *note DEFAULT: 2c0e. as the value.  If you use *note
patch.multiple(): 2c31. as a decorator then the created mocks are passed
into the decorated function by keyword.

     >>> thing = object()
     >>> other = object()

     >>> @patch.multiple('__main__', thing=DEFAULT, other=DEFAULT)
     ... def test_function(thing, other):
     ...     assert isinstance(thing, MagicMock)
     ...     assert isinstance(other, MagicMock)
     ...
     >>> test_function()

*note patch.multiple(): 2c31. can be nested with other ‘patch’
decorators, but put arguments passed by keyword `after' any of the
standard arguments created by *note patch(): 35b.:

     >>> @patch('sys.exit')
     ... @patch.multiple('__main__', thing=DEFAULT, other=DEFAULT)
     ... def test_function(mock_exit, other, thing):
     ...     assert 'other' in repr(other)
     ...     assert 'thing' in repr(thing)
     ...     assert 'exit' in repr(mock_exit)
     ...
     >>> test_function()

If *note patch.multiple(): 2c31. is used as a context manager, the value
returned by the context manger is a dictionary where created mocks are
keyed by name:

     >>> with patch.multiple('__main__', thing=DEFAULT, other=DEFAULT) as values:
     ...     assert 'other' in repr(values['other'])
     ...     assert 'thing' in repr(values['thing'])
     ...     assert values['thing'] is thing
     ...     assert values['other'] is other
     ...


File: python.info,  Node: patch methods start and stop,  Next: patch builtins,  Prev: patch multiple,  Up: The patchers

5.26.5.12 patch methods: start and stop
.......................................

All the patchers have ‘start()’ and ‘stop()’ methods.  These make it
simpler to do patching in ‘setUp’ methods or where you want to do
multiple patches without nesting decorators or with statements.

To use them call *note patch(): 35b, *note patch.object(): 2c2e. or
*note patch.dict(): 2c06. as normal and keep a reference to the returned
‘patcher’ object.  You can then call ‘start()’ to put the patch in place
and ‘stop()’ to undo it.

If you are using *note patch(): 35b. to create a mock for you then it
will be returned by the call to ‘patcher.start’.

     >>> patcher = patch('package.module.ClassName')
     >>> from package import module
     >>> original = module.ClassName
     >>> new_mock = patcher.start()
     >>> assert module.ClassName is not original
     >>> assert module.ClassName is new_mock
     >>> patcher.stop()
     >>> assert module.ClassName is original
     >>> assert module.ClassName is not new_mock

A typical use case for this might be for doing multiple patches in the
‘setUp’ method of a ‘TestCase’:

     >>> class MyTest(TestCase):
     ...     def setUp(self):
     ...         self.patcher1 = patch('package.module.Class1')
     ...         self.patcher2 = patch('package.module.Class2')
     ...         self.MockClass1 = self.patcher1.start()
     ...         self.MockClass2 = self.patcher2.start()
     ...
     ...     def tearDown(self):
     ...         self.patcher1.stop()
     ...         self.patcher2.stop()
     ...
     ...     def test_something(self):
     ...         assert package.module.Class1 is self.MockClass1
     ...         assert package.module.Class2 is self.MockClass2
     ...
     >>> MyTest('test_something').run()

     Caution: If you use this technique you must ensure that the
     patching is "undone" by calling ‘stop’.  This can be fiddlier than
     you might think, because if an exception is raised in the ‘setUp’
     then ‘tearDown’ is not called.  *note
     unittest.TestCase.addCleanup(): 941. makes this easier:

          >>> class MyTest(TestCase):
          ...     def setUp(self):
          ...         patcher = patch('package.module.Class')
          ...         self.MockClass = patcher.start()
          ...         self.addCleanup(patcher.stop)
          ...
          ...     def test_something(self):
          ...         assert package.module.Class is self.MockClass
          ...

     As an added bonus you no longer need to keep a reference to the
     ‘patcher’ object.

It is also possible to stop all patches which have been started by using
*note patch.stopall(): 2c34.

 -- Function: patch.stopall ()

     Stop all active patches.  Only stops patches started with ‘start’.


File: python.info,  Node: patch builtins,  Next: TEST_PREFIX,  Prev: patch methods start and stop,  Up: The patchers

5.26.5.13 patch builtins
........................

You can patch any builtins within a module.  The following example
patches builtin *note ord(): de6.:

     >>> @patch('__main__.ord')
     ... def test(mock_ord):
     ...     mock_ord.return_value = 101
     ...     print(ord('c'))
     ...
     >>> test()
     101


File: python.info,  Node: TEST_PREFIX,  Next: Nesting Patch Decorators,  Prev: patch builtins,  Up: The patchers

5.26.5.14 TEST_PREFIX
.....................

All of the patchers can be used as class decorators.  When used in this
way they wrap every test method on the class.  The patchers recognise
methods that start with ‘'test'’ as being test methods.  This is the
same way that the *note unittest.TestLoader: 354. finds test methods by
default.

It is possible that you want to use a different prefix for your tests.
You can inform the patchers of the different prefix by setting
‘patch.TEST_PREFIX’:

     >>> patch.TEST_PREFIX = 'foo'
     >>> value = 3
     >>>
     >>> @patch('__main__.value', 'not three')
     ... class Thing:
     ...     def foo_one(self):
     ...         print(value)
     ...     def foo_two(self):
     ...         print(value)
     ...
     >>>
     >>> Thing().foo_one()
     not three
     >>> Thing().foo_two()
     not three
     >>> value
     3


File: python.info,  Node: Nesting Patch Decorators,  Next: Where to patch,  Prev: TEST_PREFIX,  Up: The patchers

5.26.5.15 Nesting Patch Decorators
..................................

If you want to perform multiple patches then you can simply stack up the
decorators.

You can stack up multiple patch decorators using this pattern:

     >>> @patch.object(SomeClass, 'class_method')
     ... @patch.object(SomeClass, 'static_method')
     ... def test(mock1, mock2):
     ...     assert SomeClass.static_method is mock1
     ...     assert SomeClass.class_method is mock2
     ...     SomeClass.static_method('foo')
     ...     SomeClass.class_method('bar')
     ...     return mock1, mock2
     ...
     >>> mock1, mock2 = test()
     >>> mock1.assert_called_once_with('foo')
     >>> mock2.assert_called_once_with('bar')

Note that the decorators are applied from the bottom upwards.  This is
the standard way that Python applies decorators.  The order of the
created mocks passed into your test function matches this order.


File: python.info,  Node: Where to patch,  Next: Patching Descriptors and Proxy Objects,  Prev: Nesting Patch Decorators,  Up: The patchers

5.26.5.16 Where to patch
........................

*note patch(): 35b. works by (temporarily) changing the object that a
`name' points to with another one.  There can be many names pointing to
any individual object, so for patching to work you must ensure that you
patch the name used by the system under test.

The basic principle is that you patch where an object is `looked up',
which is not necessarily the same place as where it is defined.  A
couple of examples will help to clarify this.

Imagine we have a project that we want to test with the following
structure:

     a.py
         -> Defines SomeClass

     b.py
         -> from a import SomeClass
         -> some_function instantiates SomeClass

Now we want to test ‘some_function’ but we want to mock out ‘SomeClass’
using *note patch(): 35b.  The problem is that when we import module b,
which we will have to do then it imports ‘SomeClass’ from module a.  If
we use *note patch(): 35b. to mock out ‘a.SomeClass’ then it will have
no effect on our test; module b already has a reference to the `real'
‘SomeClass’ and it looks like our patching had no effect.

The key is to patch out ‘SomeClass’ where it is used (or where it is
looked up ).  In this case ‘some_function’ will actually look up
‘SomeClass’ in module b, where we have imported it.  The patching should
look like:

     @patch('b.SomeClass')

However, consider the alternative scenario where instead of ‘from a
import SomeClass’ module b does ‘import a’ and ‘some_function’ uses
‘a.SomeClass’.  Both of these import forms are common.  In this case the
class we want to patch is being looked up in the module and so we have
to patch ‘a.SomeClass’ instead:

     @patch('a.SomeClass')


File: python.info,  Node: Patching Descriptors and Proxy Objects,  Prev: Where to patch,  Up: The patchers

5.26.5.17 Patching Descriptors and Proxy Objects
................................................

Both *note patch: 2c2b. and *note patch.object: 2c2d. correctly patch
and restore descriptors: class methods, static methods and properties.
You should patch these on the `class' rather than an instance.  They
also work with `some' objects that proxy attribute access, like the
django settings object(1).

   ---------- Footnotes ----------

   (1) 
http://www.voidspace.org.uk/python/weblog/arch_d7_2010_12_04.shtml#e1198


File: python.info,  Node: MagicMock and magic method support,  Next: Helpers,  Prev: The patchers,  Up: unittest mock --- mock object library

5.26.5.18 MagicMock and magic method support
............................................

* Menu:

* Mocking Magic Methods:: 
* Magic Mock:: 


File: python.info,  Node: Mocking Magic Methods,  Next: Magic Mock,  Up: MagicMock and magic method support

5.26.5.19 Mocking Magic Methods
...............................

*note Mock: 172. supports mocking the Python protocol methods, also
known as "magic methods".  This allows mock objects to replace
containers or other objects that implement Python protocols.

Because magic methods are looked up differently from normal methods (1),
this support has been specially implemented.  This means that only
specific magic methods are supported.  The supported list includes
`almost' all of them.  If there are any missing that you need please let
us know.

You mock magic methods by setting the method you are interested in to a
function or a mock instance.  If you are using a function then it `must'
take ‘self’ as the first argument (2).

     >>> def __str__(self):
     ...     return 'fooble'
     ...
     >>> mock = Mock()
     >>> mock.__str__ = __str__
     >>> str(mock)
     'fooble'

     >>> mock = Mock()
     >>> mock.__str__ = Mock()
     >>> mock.__str__.return_value = 'fooble'
     >>> str(mock)
     'fooble'

     >>> mock = Mock()
     >>> mock.__iter__ = Mock(return_value=iter([]))
     >>> list(mock)
     []

One use case for this is for mocking objects used as context managers in
a *note with: 29d. statement:

     >>> mock = Mock()
     >>> mock.__enter__ = Mock(return_value='foo')
     >>> mock.__exit__ = Mock(return_value=False)
     >>> with mock as m:
     ...     assert m == 'foo'
     ...
     >>> mock.__enter__.assert_called_with()
     >>> mock.__exit__.assert_called_with(None, None, None)

Calls to magic methods do not appear in *note method_calls: 2c19, but
they are recorded in *note mock_calls: 2c15.

     Note: If you use the `spec' keyword argument to create a mock then
     attempting to set a magic method that isn’t in the spec will raise
     an *note AttributeError: 356.

The full list of supported magic methods is:

   * ‘__hash__’, ‘__sizeof__’, ‘__repr__’ and ‘__str__’

   * ‘__dir__’, ‘__format__’ and ‘__subclasses__’

   * ‘__floor__’, ‘__trunc__’ and ‘__ceil__’

   * Comparisons: ‘__lt__’, ‘__gt__’, ‘__le__’, ‘__ge__’, ‘__eq__’ and
     ‘__ne__’

   * Container methods: ‘__getitem__’, ‘__setitem__’, ‘__delitem__’,
     ‘__contains__’, ‘__len__’, ‘__iter__’, ‘__reversed__’ and
     ‘__missing__’

   * Context manager: ‘__enter__’ and ‘__exit__’

   * Unary numeric methods: ‘__neg__’, ‘__pos__’ and ‘__invert__’

   * The numeric methods (including right hand and in-place variants):
     ‘__add__’, ‘__sub__’, ‘__mul__’, ‘__matmul__’, ‘__div__’,
     ‘__truediv__’, ‘__floordiv__’, ‘__mod__’, ‘__divmod__’,
     ‘__lshift__’, ‘__rshift__’, ‘__and__’, ‘__xor__’, ‘__or__’, and
     ‘__pow__’

   * Numeric conversion methods: ‘__complex__’, ‘__int__’, ‘__float__’
     and ‘__index__’

   * Descriptor methods: ‘__get__’, ‘__set__’ and ‘__delete__’

   * Pickling: ‘__reduce__’, ‘__reduce_ex__’, ‘__getinitargs__’,
     ‘__getnewargs__’, ‘__getstate__’ and ‘__setstate__’

The following methods exist but are `not' supported as they are either
in use by mock, can’t be set dynamically, or can cause problems:

   * ‘__getattr__’, ‘__setattr__’, ‘__init__’ and ‘__new__’

   * ‘__prepare__’, ‘__instancecheck__’, ‘__subclasscheck__’, ‘__del__’

   ---------- Footnotes ----------

   (1) Magic methods `should' be looked up on the class rather than the
instance.  Different versions of Python are inconsistent about applying
this rule.  The supported protocol methods should work with all
supported versions of Python.

   (2) The function is basically hooked up to the class, but each ‘Mock’
instance is kept isolated from the others.


File: python.info,  Node: Magic Mock,  Prev: Mocking Magic Methods,  Up: MagicMock and magic method support

5.26.5.20 Magic Mock
....................

There are two ‘MagicMock’ variants: *note MagicMock: 358. and *note
NonCallableMagicMock: 2c0c.

 -- Class: unittest.mock.MagicMock (*args, **kw)

     ‘MagicMock’ is a subclass of *note Mock: 172. with default
     implementations of most of the magic methods.  You can use
     ‘MagicMock’ without having to configure the magic methods yourself.

     The constructor parameters have the same meaning as for *note Mock:
     172.

     If you use the `spec' or `spec_set' arguments then `only' magic
     methods that exist in the spec will be created.

 -- Class: unittest.mock.NonCallableMagicMock (*args, **kw)

     A non-callable version of *note MagicMock: 358.

     The constructor parameters have the same meaning as for *note
     MagicMock: 358, with the exception of `return_value' and
     `side_effect' which have no meaning on a non-callable mock.

The magic methods are setup with *note MagicMock: 358. objects, so you
can configure them and use them in the usual way:

     >>> mock = MagicMock()
     >>> mock[3] = 'fish'
     >>> mock.__setitem__.assert_called_with(3, 'fish')
     >>> mock.__getitem__.return_value = 'result'
     >>> mock[2]
     'result'

By default many of the protocol methods are required to return objects
of a specific type.  These methods are preconfigured with a default
return value, so that they can be used without you having to do anything
if you aren’t interested in the return value.  You can still `set' the
return value manually if you want to change the default.

Methods and their defaults:

   * ‘__lt__’: NotImplemented

   * ‘__gt__’: NotImplemented

   * ‘__le__’: NotImplemented

   * ‘__ge__’: NotImplemented

   * ‘__int__’: 1

   * ‘__contains__’: False

   * ‘__len__’: 0

   * ‘__iter__’: iter([])

   * ‘__exit__’: False

   * ‘__complex__’: 1j

   * ‘__float__’: 1.0

   * ‘__bool__’: True

   * ‘__index__’: 1

   * ‘__hash__’: default hash for the mock

   * ‘__str__’: default str for the mock

   * ‘__sizeof__’: default sizeof for the mock

For example:

     >>> mock = MagicMock()
     >>> int(mock)
     1
     >>> len(mock)
     0
     >>> list(mock)
     []
     >>> object() in mock
     False

The two equality methods, *note __eq__(): 89a. and *note __ne__(): adb,
are special.  They do the default equality comparison on identity, using
the *note side_effect: 2c0d. attribute, unless you change their return
value to return something else:

     >>> MagicMock() == 3
     False
     >>> MagicMock() != 3
     True
     >>> mock = MagicMock()
     >>> mock.__eq__.return_value = True
     >>> mock == 3
     True

The return value of ‘MagicMock.__iter__()’ can be any iterable object
and isn’t required to be an iterator:

     >>> mock = MagicMock()
     >>> mock.__iter__.return_value = ['a', 'b', 'c']
     >>> list(mock)
     ['a', 'b', 'c']
     >>> list(mock)
     ['a', 'b', 'c']

If the return value `is' an iterator, then iterating over it once will
consume it and subsequent iterations will result in an empty list:

     >>> mock.__iter__.return_value = iter(['a', 'b', 'c'])
     >>> list(mock)
     ['a', 'b', 'c']
     >>> list(mock)
     []

‘MagicMock’ has all of the supported magic methods configured except for
some of the obscure and obsolete ones.  You can still set these up if
you want.

Magic methods that are supported but not setup by default in ‘MagicMock’
are:

   * ‘__subclasses__’

   * ‘__dir__’

   * ‘__format__’

   * ‘__get__’, ‘__set__’ and ‘__delete__’

   * ‘__reversed__’ and ‘__missing__’

   * ‘__reduce__’, ‘__reduce_ex__’, ‘__getinitargs__’, ‘__getnewargs__’,
     ‘__getstate__’ and ‘__setstate__’

   * ‘__getformat__’ and ‘__setformat__’


File: python.info,  Node: Helpers,  Prev: MagicMock and magic method support,  Up: unittest mock --- mock object library

5.26.5.21 Helpers
.................

* Menu:

* sentinel:: 
* DEFAULT:: 
* call:: 
* create_autospec:: 
* ANY:: 
* FILTER_DIR:: 
* mock_open:: 
* Autospeccing:: 


File: python.info,  Node: sentinel,  Next: DEFAULT,  Up: Helpers

5.26.5.22 sentinel
..................

 -- Data: unittest.mock.sentinel

     The ‘sentinel’ object provides a convenient way of providing unique
     objects for your tests.

     Attributes are created on demand when you access them by name.
     Accessing the same attribute will always return the same object.
     The objects returned have a sensible repr so that test failure
     messages are readable.

Sometimes when testing you need to test that a specific object is passed
as an argument to another method, or returned.  It can be common to
create named sentinel objects to test this.  *note sentinel: 2c03.
provides a convenient way of creating and testing the identity of
objects like this.

In this example we monkey patch ‘method’ to return
‘sentinel.some_object’:

     >>> real = ProductionClass()
     >>> real.method = Mock(name="method")
     >>> real.method.return_value = sentinel.some_object
     >>> result = real.method()
     >>> assert result is sentinel.some_object
     >>> sentinel.some_object
     sentinel.some_object


File: python.info,  Node: DEFAULT,  Next: call,  Prev: sentinel,  Up: Helpers

5.26.5.23 DEFAULT
.................

 -- Data: unittest.mock.DEFAULT

     The *note DEFAULT: 2c0e. object is a pre-created sentinel (actually
     ‘sentinel.DEFAULT’).  It can be used by *note side_effect: 2c0d.
     functions to indicate that the normal return value should be used.


File: python.info,  Node: call,  Next: create_autospec,  Prev: DEFAULT,  Up: Helpers

5.26.5.24 call
..............

 -- Function: unittest.mock.call (*args, **kwargs)

     *note call(): 2c21. is a helper object for making simpler
     assertions, for comparing with *note call_args: 2c1f, *note
     call_args_list: 2c20, *note mock_calls: 2c15. and *note
     method_calls: 2c19.  *note call(): 2c21. can also be used with
     *note assert_has_calls(): 2c14.

          >>> m = MagicMock(return_value=None)
          >>> m(1, 2, a='foo', b='bar')
          >>> m()
          >>> m.call_args_list == [call(1, 2, a='foo', b='bar'), call()]
          True

 -- Method: call.call_list ()

     For a call object that represents multiple calls, *note
     call_list(): 2c41. returns a list of all the intermediate calls as
     well as the final call.

‘call_list’ is particularly useful for making assertions on "chained
calls".  A chained call is multiple calls on a single line of code.
This results in multiple entries in *note mock_calls: 2c15. on a mock.
Manually constructing the sequence of calls can be tedious.

*note call_list(): 2c41. can construct the sequence of calls from the
same chained call:

     >>> m = MagicMock()
     >>> m(1).method(arg='foo').other('bar')(2.0)
     <MagicMock name='mock().method().other()()' id='...'>
     >>> kall = call(1).method(arg='foo').other('bar')(2.0)
     >>> kall.call_list()
     [call(1),
      call().method(arg='foo'),
      call().method().other('bar'),
      call().method().other()(2.0)]
     >>> m.mock_calls == kall.call_list()
     True
A ‘call’ object is either a tuple of (positional args, keyword args) or
(name, positional args, keyword args) depending on how it was
constructed.  When you construct them yourself this isn’t particularly
interesting, but the ‘call’ objects that are in the *note
Mock.call_args: 2c1f, *note Mock.call_args_list: 2c20. and *note
Mock.mock_calls: 2c15. attributes can be introspected to get at the
individual arguments they contain.

The ‘call’ objects in *note Mock.call_args: 2c1f. and *note
Mock.call_args_list: 2c20. are two-tuples of (positional args, keyword
args) whereas the ‘call’ objects in *note Mock.mock_calls: 2c15, along
with ones you construct yourself, are three-tuples of (name, positional
args, keyword args).

You can use their "tupleness" to pull out the individual arguments for
more complex introspection and assertions.  The positional arguments are
a tuple (an empty tuple if there are no positional arguments) and the
keyword arguments are a dictionary:

     >>> m = MagicMock(return_value=None)
     >>> m(1, 2, 3, arg='one', arg2='two')
     >>> kall = m.call_args
     >>> args, kwargs = kall
     >>> args
     (1, 2, 3)
     >>> kwargs
     {'arg2': 'two', 'arg': 'one'}
     >>> args is kall[0]
     True
     >>> kwargs is kall[1]
     True

     >>> m = MagicMock()
     >>> m.foo(4, 5, 6, arg='two', arg2='three')
     <MagicMock name='mock.foo()' id='...'>
     >>> kall = m.mock_calls[0]
     >>> name, args, kwargs = kall
     >>> name
     'foo'
     >>> args
     (4, 5, 6)
     >>> kwargs
     {'arg2': 'three', 'arg': 'two'}
     >>> name is m.mock_calls[0][0]
     True


File: python.info,  Node: create_autospec,  Next: ANY,  Prev: call,  Up: Helpers

5.26.5.25 create_autospec
.........................

 -- Function: unittest.mock.create_autospec (spec, spec_set=False,
          instance=False, **kwargs)

     Create a mock object using another object as a spec.  Attributes on
     the mock will use the corresponding attribute on the `spec' object
     as their spec.

     Functions or methods being mocked will have their arguments checked
     to ensure that they are called with the correct signature.

     If `spec_set' is ‘True’ then attempting to set attributes that
     don’t exist on the spec object will raise an *note AttributeError:
     356.

     If a class is used as a spec then the return value of the mock (the
     instance of the class) will have the same spec.  You can use a
     class as the spec for an instance object by passing
     ‘instance=True’.  The returned mock will only be callable if
     instances of the mock are callable.

     *note create_autospec(): 2c09. also takes arbitrary keyword
     arguments that are passed to the constructor of the created mock.

See *note Autospeccing: 2c08. for examples of how to use auto-speccing
with *note create_autospec(): 2c09. and the `autospec' argument to *note
patch(): 35b.


File: python.info,  Node: ANY,  Next: FILTER_DIR,  Prev: create_autospec,  Up: Helpers

5.26.5.26 ANY
.............

 -- Data: unittest.mock.ANY

Sometimes you may need to make assertions about `some' of the arguments
in a call to mock, but either not care about some of the arguments or
want to pull them individually out of *note call_args: 2c1f. and make
more complex assertions on them.

To ignore certain arguments you can pass in objects that compare equal
to `everything'.  Calls to *note assert_called_with(): 2c11. and *note
assert_called_once_with(): 2c12. will then succeed no matter what was
passed in.

     >>> mock = Mock(return_value=None)
     >>> mock('foo', bar=object())
     >>> mock.assert_called_once_with('foo', bar=ANY)

*note ANY: 2c44. can also be used in comparisons with call lists like
*note mock_calls: 2c15.:

     >>> m = MagicMock(return_value=None)
     >>> m(1)
     >>> m(1, 2)
     >>> m(object())
     >>> m.mock_calls == [call(1), call(1, 2), ANY]
     True


File: python.info,  Node: FILTER_DIR,  Next: mock_open,  Prev: ANY,  Up: Helpers

5.26.5.27 FILTER_DIR
....................

 -- Data: unittest.mock.FILTER_DIR

*note FILTER_DIR: 2c1b. is a module level variable that controls the way
mock objects respond to *note dir(): 16a. (only for Python 2.6 or more
recent).  The default is ‘True’, which uses the filtering described
below, to only show useful members.  If you dislike this filtering, or
need to switch it off for diagnostic purposes, then set ‘mock.FILTER_DIR
= False’.

With filtering on, ‘dir(some_mock)’ shows only useful attributes and
will include any dynamically created attributes that wouldn’t normally
be shown.  If the mock was created with a `spec' (or `autospec' of
course) then all the attributes from the original are shown, even if
they haven’t been accessed yet:

     >>> dir(Mock())
     ['assert_any_call',
      'assert_called_once_with',
      'assert_called_with',
      'assert_has_calls',
      'attach_mock',
      ...
     >>> from urllib import request
     >>> dir(Mock(spec=request))
     ['AbstractBasicAuthHandler',
      'AbstractDigestAuthHandler',
      'AbstractHTTPHandler',
      'BaseHandler',
      ...

Many of the not-very-useful (private to *note Mock: 172. rather than the
thing being mocked) underscore and double underscore prefixed attributes
have been filtered from the result of calling *note dir(): 16a. on a
*note Mock: 172.  If you dislike this behaviour you can switch it off by
setting the module level switch *note FILTER_DIR: 2c1b.:

     >>> from unittest import mock
     >>> mock.FILTER_DIR = False
     >>> dir(mock.Mock())
     ['_NonCallableMock__get_return_value',
      '_NonCallableMock__get_side_effect',
      '_NonCallableMock__return_value_doc',
      '_NonCallableMock__set_return_value',
      '_NonCallableMock__set_side_effect',
      '__call__',
      '__class__',
      ...

Alternatively you can just use ‘vars(my_mock)’ (instance members) and
‘dir(type(my_mock))’ (type members) to bypass the filtering irrespective
of ‘mock.FILTER_DIR’.


File: python.info,  Node: mock_open,  Next: Autospeccing,  Prev: FILTER_DIR,  Up: Helpers

5.26.5.28 mock_open
...................

 -- Function: unittest.mock.mock_open (mock=None, read_data=None)

          A helper function to create a mock to replace the use of *note
          open(): 1e8.  It works for *note open(): 1e8. called directly
          or used as a context manager.

          The `mock' argument is the mock object to configure.  If
          ‘None’ (the default) then a *note MagicMock: 358. will be
          created for you, with the API limited to methods or attributes
          available on standard file handles.

          `read_data' is a string for the ‘read()’, *note readline():
          10b8, and *note readlines(): 113f. methods of the file handle
          to return.  Calls to those methods will take data from
          `read_data' until it is depleted.  The mock of these methods
          is pretty simplistic: every time the `mock' is called, the
          `read_data' is rewound to the start.  If you need more control
          over the data that you are feeding to the tested code you will
          need to customize this mock for yourself.  When that is
          insufficient, one of the in-memory filesystem packages on
          PyPI(1) can offer a realistic filesystem for testing.

     Changed in version 3.4: Added *note readline(): 10b8. and *note
     readlines(): 113f. support.  The mock of ‘read()’ changed to
     consume `read_data' rather than returning it on each call.

     Changed in version 3.5: `read_data' is now reset on each call to
     the `mock'.

Using *note open(): 1e8. as a context manager is a great way to ensure
your file handles are closed properly and is becoming common:

     with open('/some/path', 'w') as f:
         f.write('something')

The issue is that even if you mock out the call to *note open(): 1e8. it
is the `returned object' that is used as a context manager (and has
*note __enter__(): 907. and *note __exit__(): 908. called).

Mocking context managers with a *note MagicMock: 358. is common enough
and fiddly enough that a helper function is useful.

     >>> m = mock_open()
     >>> with patch('__main__.open', m):
     ...     with open('foo', 'w') as h:
     ...         h.write('some stuff')
     ...
     >>> m.mock_calls
     [call('foo', 'w'),
      call().__enter__(),
      call().write('some stuff'),
      call().__exit__(None, None, None)]
     >>> m.assert_called_once_with('foo', 'w')
     >>> handle = m()
     >>> handle.write.assert_called_once_with('some stuff')

And for reading files:

     >>> with patch('__main__.open', mock_open(read_data='bibble')) as m:
     ...     with open('foo') as h:
     ...         result = h.read()
     ...
     >>> m.assert_called_once_with('foo')
     >>> assert result == 'bibble'

   ---------- Footnotes ----------

   (1) https://pypi.python.org/pypi


File: python.info,  Node: Autospeccing,  Prev: mock_open,  Up: Helpers

5.26.5.29 Autospeccing
......................

Autospeccing is based on the existing ‘spec’ feature of mock.  It limits
the api of mocks to the api of an original object (the spec), but it is
recursive (implemented lazily) so that attributes of mocks only have the
same api as the attributes of the spec.  In addition mocked functions /
methods have the same call signature as the original so they raise a
*note TypeError: 562. if they are called incorrectly.

Before I explain how auto-speccing works, here’s why it is needed.

*note Mock: 172. is a very powerful and flexible object, but it suffers
from two flaws when used to mock out objects from a system under test.
One of these flaws is specific to the *note Mock: 172. api and the other
is a more general problem with using mock objects.

First the problem specific to *note Mock: 172.  *note Mock: 172. has two
assert methods that are extremely handy: *note assert_called_with():
2c11. and *note assert_called_once_with(): 2c12.

     >>> mock = Mock(name='Thing', return_value=None)
     >>> mock(1, 2, 3)
     >>> mock.assert_called_once_with(1, 2, 3)
     >>> mock(1, 2, 3)
     >>> mock.assert_called_once_with(1, 2, 3)
     Traceback (most recent call last):
      ...
     AssertionError: Expected 'mock' to be called once. Called 2 times.

Because mocks auto-create attributes on demand, and allow you to call
them with arbitrary arguments, if you misspell one of these assert
methods then your assertion is gone:

     >>> mock = Mock(name='Thing', return_value=None)
     >>> mock(1, 2, 3)
     >>> mock.assret_called_once_with(4, 5, 6)

Your tests can pass silently and incorrectly because of the typo.

The second issue is more general to mocking.  If you refactor some of
your code, rename members and so on, any tests for code that is still
using the `old api' but uses mocks instead of the real objects will
still pass.  This means your tests can all pass even though your code is
broken.

Note that this is another reason why you need integration tests as well
as unit tests.  Testing everything in isolation is all fine and dandy,
but if you don’t test how your units are "wired together" there is still
lots of room for bugs that tests might have caught.

‘mock’ already provides a feature to help with this, called speccing.
If you use a class or instance as the ‘spec’ for a mock then you can
only access attributes on the mock that exist on the real class:

     >>> from urllib import request
     >>> mock = Mock(spec=request.Request)
     >>> mock.assret_called_with
     Traceback (most recent call last):
      ...
     AttributeError: Mock object has no attribute 'assret_called_with'

The spec only applies to the mock itself, so we still have the same
issue with any methods on the mock:

     >>> mock.has_data()
     <mock.Mock object at 0x...>
     >>> mock.has_data.assret_called_with()

Auto-speccing solves this problem.  You can either pass ‘autospec=True’
to *note patch(): 35b. / *note patch.object(): 2c2e. or use the *note
create_autospec(): 2c09. function to create a mock with a spec.  If you
use the ‘autospec=True’ argument to *note patch(): 35b. then the object
that is being replaced will be used as the spec object.  Because the
speccing is done "lazily" (the spec is created as attributes on the mock
are accessed) you can use it with very complex or deeply nested objects
(like modules that import modules that import modules) without a big
performance hit.

Here’s an example of it in use:

     >>> from urllib import request
     >>> patcher = patch('__main__.request', autospec=True)
     >>> mock_request = patcher.start()
     >>> request is mock_request
     True
     >>> mock_request.Request
     <MagicMock name='request.Request' spec='Request' id='...'>

You can see that ‘request.Request’ has a spec.  ‘request.Request’ takes
two arguments in the constructor (one of which is `self').  Here’s what
happens if we try to call it incorrectly:

     >>> req = request.Request()
     Traceback (most recent call last):
      ...
     TypeError: <lambda>() takes at least 2 arguments (1 given)

The spec also applies to instantiated classes (i.e.  the return value of
specced mocks):

     >>> req = request.Request('foo')
     >>> req
     <NonCallableMagicMock name='request.Request()' spec='Request' id='...'>

‘Request’ objects are not callable, so the return value of instantiating
our mocked out ‘request.Request’ is a non-callable mock.  With the spec
in place any typos in our asserts will raise the correct error:

     >>> req.add_header('spam', 'eggs')
     <MagicMock name='request.Request().add_header()' id='...'>
     >>> req.add_header.assret_called_with
     Traceback (most recent call last):
      ...
     AttributeError: Mock object has no attribute 'assret_called_with'
     >>> req.add_header.assert_called_with('spam', 'eggs')

In many cases you will just be able to add ‘autospec=True’ to your
existing *note patch(): 35b. calls and then be protected against bugs
due to typos and api changes.

As well as using `autospec' through *note patch(): 35b. there is a *note
create_autospec(): 2c09. for creating autospecced mocks directly:

     >>> from urllib import request
     >>> mock_request = create_autospec(request)
     >>> mock_request.Request('foo', 'bar')
     <NonCallableMagicMock name='mock.Request()' spec='Request' id='...'>

This isn’t without caveats and limitations however, which is why it is
not the default behaviour.  In order to know what attributes are
available on the spec object, autospec has to introspect (access
attributes) the spec.  As you traverse attributes on the mock a
corresponding traversal of the original object is happening under the
hood.  If any of your specced objects have properties or descriptors
that can trigger code execution then you may not be able to use
autospec.  On the other hand it is much better to design your objects so
that introspection is safe (1).

A more serious problem is that it is common for instance attributes to
be created in the *note __init__(): 9d5. method and not to exist on the
class at all.  `autospec' can’t know about any dynamically created
attributes and restricts the api to visible attributes.

     >>> class Something:
     ...   def __init__(self):
     ...     self.a = 33
     ...
     >>> with patch('__main__.Something', autospec=True):
     ...   thing = Something()
     ...   thing.a
     ...
     Traceback (most recent call last):
       ...
     AttributeError: Mock object has no attribute 'a'

There are a few different ways of resolving this problem.  The easiest,
but not necessarily the least annoying, way is to simply set the
required attributes on the mock after creation.  Just because `autospec'
doesn’t allow you to fetch attributes that don’t exist on the spec it
doesn’t prevent you setting them:

     >>> with patch('__main__.Something', autospec=True):
     ...   thing = Something()
     ...   thing.a = 33
     ...

There is a more aggressive version of both `spec' and `autospec' that
`does' prevent you setting non-existent attributes.  This is useful if
you want to ensure your code only `sets' valid attributes too, but
obviously it prevents this particular scenario:

     >>> with patch('__main__.Something', autospec=True, spec_set=True):
     ...   thing = Something()
     ...   thing.a = 33
     ...
     Traceback (most recent call last):
      ...
     AttributeError: Mock object has no attribute 'a'

Probably the best way of solving the problem is to add class attributes
as default values for instance members initialised in *note __init__():
9d5.  Note that if you are only setting default attributes in *note
__init__(): 9d5. then providing them via class attributes (shared
between instances of course) is faster too.  e.g.

     class Something:
         a = 33

This brings up another issue.  It is relatively common to provide a
default value of ‘None’ for members that will later be an object of a
different type.  ‘None’ would be useless as a spec because it wouldn’t
let you access `any' attributes or methods on it.  As ‘None’ is `never'
going to be useful as a spec, and probably indicates a member that will
normally of some other type, autospec doesn’t use a spec for members
that are set to ‘None’.  These will just be ordinary mocks (well -
MagicMocks):

     >>> class Something:
     ...     member = None
     ...
     >>> mock = create_autospec(Something)
     >>> mock.member.foo.bar.baz()
     <MagicMock name='mock.member.foo.bar.baz()' id='...'>

If modifying your production classes to add defaults isn’t to your
liking then there are more options.  One of these is simply to use an
instance as the spec rather than the class.  The other is to create a
subclass of the production class and add the defaults to the subclass
without affecting the production class.  Both of these require you to
use an alternative object as the spec.  Thankfully *note patch(): 35b.
supports this - you can simply pass the alternative object as the
`autospec' argument:

     >>> class Something:
     ...   def __init__(self):
     ...     self.a = 33
     ...
     >>> class SomethingForTest(Something):
     ...   a = 33
     ...
     >>> p = patch('__main__.Something', autospec=SomethingForTest)
     >>> mock = p.start()
     >>> mock.a
     <NonCallableMagicMock name='Something.a' spec='int' id='...'>

   ---------- Footnotes ----------

   (1) This only applies to classes or already instantiated objects.
Calling a mocked class to create a mock instance `does not' create a
real instance.  It is only attribute lookups - along with calls to *note
dir(): 16a. - that are done.


File: python.info,  Node: unittest mock --- getting started,  Next: 2to3 - Automated Python 2 to 3 code translation,  Prev: unittest mock --- mock object library,  Up: Development Tools

5.26.6 ‘unittest.mock’ — getting started
----------------------------------------

New in version 3.3.

* Menu:

* Using Mock:: 
* Patch Decorators:: 
* Further Examples:: 


File: python.info,  Node: Using Mock,  Next: Patch Decorators,  Up: unittest mock --- getting started

5.26.6.1 Using Mock
...................

* Menu:

* Mock Patching Methods:: 
* Mock for Method Calls on an Object:: 
* Mocking Classes:: 
* Naming your mocks:: 
* Tracking all Calls:: 
* Setting Return Values and Attributes:: 
* Raising exceptions with mocks:: 
* Side effect functions and iterables:: 
* Creating a Mock from an Existing Object:: 


File: python.info,  Node: Mock Patching Methods,  Next: Mock for Method Calls on an Object,  Up: Using Mock

5.26.6.2 Mock Patching Methods
..............................

Common uses for *note Mock: 172. objects include:

   * Patching methods

   * Recording method calls on objects

You might want to replace a method on an object to check that it is
called with the correct arguments by another part of the system:

     >>> real = SomeClass()
     >>> real.method = MagicMock(name='method')
     >>> real.method(3, 4, 5, key='value')
     <MagicMock name='method()' id='...'>

Once our mock has been used (‘real.method’ in this example) it has
methods and attributes that allow you to make assertions about how it
has been used.

     Note: In most of these examples the *note Mock: 172. and *note
     MagicMock: 358. classes are interchangeable.  As the ‘MagicMock’ is
     the more capable class it makes a sensible one to use by default.

Once the mock has been called its *note called: 2c1d. attribute is set
to ‘True’.  More importantly we can use the *note assert_called_with():
2c11. or *note assert_called_once_with(): 2c12. method to check that it
was called with the correct arguments.

This example tests that calling ‘ProductionClass().method’ results in a
call to the ‘something’ method:

     >>> class ProductionClass:
     ...     def method(self):
     ...         self.something(1, 2, 3)
     ...     def something(self, a, b, c):
     ...         pass
     ...
     >>> real = ProductionClass()
     >>> real.something = MagicMock()
     >>> real.method()
     >>> real.something.assert_called_once_with(1, 2, 3)


File: python.info,  Node: Mock for Method Calls on an Object,  Next: Mocking Classes,  Prev: Mock Patching Methods,  Up: Using Mock

5.26.6.3 Mock for Method Calls on an Object
...........................................

In the last example we patched a method directly on an object to check
that it was called correctly.  Another common use case is to pass an
object into a method (or some part of the system under test) and then
check that it is used in the correct way.

The simple ‘ProductionClass’ below has a ‘closer’ method.  If it is
called with an object then it calls ‘close’ on it.

     >>> class ProductionClass:
     ...     def closer(self, something):
     ...         something.close()
     ...

So to test it we need to pass in an object with a ‘close’ method and
check that it was called correctly.

     >>> real = ProductionClass()
     >>> mock = Mock()
     >>> real.closer(mock)
     >>> mock.close.assert_called_with()

We don’t have to do any work to provide the ’close’ method on our mock.
Accessing close creates it.  So, if ’close’ hasn’t already been called
then accessing it in the test will create it, but *note
assert_called_with(): 2c11. will raise a failure exception.


File: python.info,  Node: Mocking Classes,  Next: Naming your mocks,  Prev: Mock for Method Calls on an Object,  Up: Using Mock

5.26.6.4 Mocking Classes
........................

A common use case is to mock out classes instantiated by your code under
test.  When you patch a class, then that class is replaced with a mock.
Instances are created by `calling the class'.  This means you access the
"mock instance" by looking at the return value of the mocked class.

In the example below we have a function ‘some_function’ that
instantiates ‘Foo’ and calls a method on it.  The call to *note patch():
35b. replaces the class ‘Foo’ with a mock.  The ‘Foo’ instance is the
result of calling the mock, so it is configured by modifying the mock
*note return_value: 2c0f.

     >>> def some_function():
     ...     instance = module.Foo()
     ...     return instance.method()
     ...
     >>> with patch('module.Foo') as mock:
     ...     instance = mock.return_value
     ...     instance.method.return_value = 'the result'
     ...     result = some_function()
     ...     assert result == 'the result'


File: python.info,  Node: Naming your mocks,  Next: Tracking all Calls,  Prev: Mocking Classes,  Up: Using Mock

5.26.6.5 Naming your mocks
..........................

It can be useful to give your mocks a name.  The name is shown in the
repr of the mock and can be helpful when the mock appears in test
failure messages.  The name is also propagated to attributes or methods
of the mock:

     >>> mock = MagicMock(name='foo')
     >>> mock
     <MagicMock name='foo' id='...'>
     >>> mock.method
     <MagicMock name='foo.method' id='...'>


File: python.info,  Node: Tracking all Calls,  Next: Setting Return Values and Attributes,  Prev: Naming your mocks,  Up: Using Mock

5.26.6.6 Tracking all Calls
...........................

Often you want to track more than a single call to a method.  The *note
mock_calls: 2c15. attribute records all calls to child attributes of the
mock - and also to their children.

     >>> mock = MagicMock()
     >>> mock.method()
     <MagicMock name='mock.method()' id='...'>
     >>> mock.attribute.method(10, x=53)
     <MagicMock name='mock.attribute.method()' id='...'>
     >>> mock.mock_calls
     [call.method(), call.attribute.method(10, x=53)]

If you make an assertion about ‘mock_calls’ and any unexpected methods
have been called, then the assertion will fail.  This is useful because
as well as asserting that the calls you expected have been made, you are
also checking that they were made in the right order and with no
additional calls:

You use the *note call: 2c21. object to construct lists for comparing
with ‘mock_calls’:

     >>> expected = [call.method(), call.attribute.method(10, x=53)]
     >>> mock.mock_calls == expected
     True


File: python.info,  Node: Setting Return Values and Attributes,  Next: Raising exceptions with mocks,  Prev: Tracking all Calls,  Up: Using Mock

5.26.6.7 Setting Return Values and Attributes
.............................................

Setting the return values on a mock object is trivially easy:

     >>> mock = Mock()
     >>> mock.return_value = 3
     >>> mock()
     3

Of course you can do the same for methods on the mock:

     >>> mock = Mock()
     >>> mock.method.return_value = 3
     >>> mock.method()
     3

The return value can also be set in the constructor:

     >>> mock = Mock(return_value=3)
     >>> mock()
     3

If you need an attribute setting on your mock, just do it:

     >>> mock = Mock()
     >>> mock.x = 3
     >>> mock.x
     3

Sometimes you want to mock up a more complex situation, like for example
‘mock.connection.cursor().execute("SELECT 1")’.  If we wanted this call
to return a list, then we have to configure the result of the nested
call.

We can use *note call: 2c21. to construct the set of calls in a "chained
call" like this for easy assertion afterwards:

     >>> mock = Mock()
     >>> cursor = mock.connection.cursor.return_value
     >>> cursor.execute.return_value = ['foo']
     >>> mock.connection.cursor().execute("SELECT 1")
     ['foo']
     >>> expected = call.connection.cursor().execute("SELECT 1").call_list()
     >>> mock.mock_calls
     [call.connection.cursor(), call.connection.cursor().execute('SELECT 1')]
     >>> mock.mock_calls == expected
     True

It is the call to ‘.call_list()’ that turns our call object into a list
of calls representing the chained calls.


File: python.info,  Node: Raising exceptions with mocks,  Next: Side effect functions and iterables,  Prev: Setting Return Values and Attributes,  Up: Using Mock

5.26.6.8 Raising exceptions with mocks
......................................

A useful attribute is *note side_effect: 2c0d.  If you set this to an
exception class or instance then the exception will be raised when the
mock is called.

     >>> mock = Mock(side_effect=Exception('Boom!'))
     >>> mock()
     Traceback (most recent call last):
       ...
     Exception: Boom!


File: python.info,  Node: Side effect functions and iterables,  Next: Creating a Mock from an Existing Object,  Prev: Raising exceptions with mocks,  Up: Using Mock

5.26.6.9 Side effect functions and iterables
............................................

‘side_effect’ can also be set to a function or an iterable.  The use
case for ‘side_effect’ as an iterable is where your mock is going to be
called several times, and you want each call to return a different
value.  When you set ‘side_effect’ to an iterable every call to the mock
returns the next value from the iterable:

     >>> mock = MagicMock(side_effect=[4, 5, 6])
     >>> mock()
     4
     >>> mock()
     5
     >>> mock()
     6

For more advanced use cases, like dynamically varying the return values
depending on what the mock is called with, ‘side_effect’ can be a
function.  The function will be called with the same arguments as the
mock.  Whatever the function returns is what the call returns:

     >>> vals = {(1, 2): 1, (2, 3): 2}
     >>> def side_effect(*args):
     ...     return vals[args]
     ...
     >>> mock = MagicMock(side_effect=side_effect)
     >>> mock(1, 2)
     1
     >>> mock(2, 3)
     2


File: python.info,  Node: Creating a Mock from an Existing Object,  Prev: Side effect functions and iterables,  Up: Using Mock

5.26.6.10 Creating a Mock from an Existing Object
.................................................

One problem with over use of mocking is that it couples your tests to
the implementation of your mocks rather than your real code.  Suppose
you have a class that implements ‘some_method’.  In a test for another
class, you provide a mock of this object that `also' provides
‘some_method’.  If later you refactor the first class, so that it no
longer has ‘some_method’ - then your tests will continue to pass even
though your code is now broken!

*note Mock: 172. allows you to provide an object as a specification for
the mock, using the `spec' keyword argument.  Accessing methods /
attributes on the mock that don’t exist on your specification object
will immediately raise an attribute error.  If you change the
implementation of your specification, then tests that use that class
will start failing immediately without you having to instantiate the
class in those tests.

     >>> mock = Mock(spec=SomeClass)
     >>> mock.old_method()
     Traceback (most recent call last):
        ...
     AttributeError: object has no attribute 'old_method'

Using a specification also enables a smarter matching of calls made to
the mock, regardless of whether some parameters were passed as
positional or named arguments:

     >>> def f(a, b, c): pass
     ...
     >>> mock = Mock(spec=f)
     >>> mock(1, 2, 3)
     <Mock name='mock()' id='140161580456576'>
     >>> mock.assert_called_with(a=1, b=2, c=3)

If you want this smarter matching to also work with method calls on the
mock, you can use *note auto-speccing: 2c08.

If you want a stronger form of specification that prevents the setting
of arbitrary attributes as well as the getting of them then you can use
`spec_set' instead of `spec'.


File: python.info,  Node: Patch Decorators,  Next: Further Examples,  Prev: Using Mock,  Up: unittest mock --- getting started

5.26.6.11 Patch Decorators
..........................

     Note: With *note patch(): 35b. it matters that you patch objects in
     the namespace where they are looked up.  This is normally
     straightforward, but for a quick guide read *note where to patch:
     2c05.

A common need in tests is to patch a class attribute or a module
attribute, for example patching a builtin or patching a class in a
module to test that it is instantiated.  Modules and classes are
effectively global, so patching on them has to be undone after the test
or the patch will persist into other tests and cause hard to diagnose
problems.

mock provides three convenient decorators for this: *note patch(): 35b,
*note patch.object(): 2c2e. and *note patch.dict(): 2c06.  ‘patch’ takes
a single string, of the form ‘package.module.Class.attribute’ to specify
the attribute you are patching.  It also optionally takes a value that
you want the attribute (or class or whatever) to be replaced with.
’patch.object’ takes an object and the name of the attribute you would
like patched, plus optionally the value to patch it with.

‘patch.object’:

     >>> original = SomeClass.attribute
     >>> @patch.object(SomeClass, 'attribute', sentinel.attribute)
     ... def test():
     ...     assert SomeClass.attribute == sentinel.attribute
     ...
     >>> test()
     >>> assert SomeClass.attribute == original

     >>> @patch('package.module.attribute', sentinel.attribute)
     ... def test():
     ...     from package.module import attribute
     ...     assert attribute is sentinel.attribute
     ...
     >>> test()

If you are patching a module (including *note builtins: 13.) then use
*note patch(): 35b. instead of *note patch.object(): 2c2e.:

     >>> mock = MagicMock(return_value=sentinel.file_handle)
     >>> with patch('builtins.open', mock):
     ...     handle = open('filename', 'r')
     ...
     >>> mock.assert_called_with('filename', 'r')
     >>> assert handle == sentinel.file_handle, "incorrect file handle returned"

The module name can be ’dotted’, in the form ‘package.module’ if needed:

     >>> @patch('package.module.ClassName.attribute', sentinel.attribute)
     ... def test():
     ...     from package.module import ClassName
     ...     assert ClassName.attribute == sentinel.attribute
     ...
     >>> test()

A nice pattern is to actually decorate test methods themselves:

     >>> class MyTest(unittest.TestCase):
     ...     @patch.object(SomeClass, 'attribute', sentinel.attribute)
     ...     def test_something(self):
     ...         self.assertEqual(SomeClass.attribute, sentinel.attribute)
     ...
     >>> original = SomeClass.attribute
     >>> MyTest('test_something').test_something()
     >>> assert SomeClass.attribute == original

If you want to patch with a Mock, you can use *note patch(): 35b. with
only one argument (or *note patch.object(): 2c2e. with two arguments).
The mock will be created for you and passed into the test function /
method:

     >>> class MyTest(unittest.TestCase):
     ...     @patch.object(SomeClass, 'static_method')
     ...     def test_something(self, mock_method):
     ...         SomeClass.static_method()
     ...         mock_method.assert_called_with()
     ...
     >>> MyTest('test_something').test_something()

You can stack up multiple patch decorators using this pattern:

     >>> class MyTest(unittest.TestCase):
     ...     @patch('package.module.ClassName1')
     ...     @patch('package.module.ClassName2')
     ...     def test_something(self, MockClass2, MockClass1):
     ...         self.assertIs(package.module.ClassName1, MockClass1)
     ...         self.assertIs(package.module.ClassName2, MockClass2)
     ...
     >>> MyTest('test_something').test_something()

When you nest patch decorators the mocks are passed in to the decorated
function in the same order they applied (the normal `python' order that
decorators are applied).  This means from the bottom up, so in the
example above the mock for ‘test_module.ClassName2’ is passed in first.

There is also *note patch.dict(): 2c06. for setting values in a
dictionary just during a scope and restoring the dictionary to its
original state when the test ends:

     >>> foo = {'key': 'value'}
     >>> original = foo.copy()
     >>> with patch.dict(foo, {'newkey': 'newvalue'}, clear=True):
     ...     assert foo == {'newkey': 'newvalue'}
     ...
     >>> assert foo == original

‘patch’, ‘patch.object’ and ‘patch.dict’ can all be used as context
managers.

Where you use *note patch(): 35b. to create a mock for you, you can get
a reference to the mock using the "as" form of the with statement:

     >>> class ProductionClass:
     ...     def method(self):
     ...         pass
     ...
     >>> with patch.object(ProductionClass, 'method') as mock_method:
     ...     mock_method.return_value = None
     ...     real = ProductionClass()
     ...     real.method(1, 2, 3)
     ...
     >>> mock_method.assert_called_with(1, 2, 3)

As an alternative ‘patch’, ‘patch.object’ and ‘patch.dict’ can be used
as class decorators.  When used in this way it is the same as applying
the decorator individually to every method whose name starts with
"test".


File: python.info,  Node: Further Examples,  Prev: Patch Decorators,  Up: unittest mock --- getting started

5.26.6.12 Further Examples
..........................

Here are some more examples for some slightly more advanced scenarios.

* Menu:

* Mocking chained calls:: 
* Partial mocking:: 
* Mocking a Generator Method:: 
* Applying the same patch to every test method:: 
* Mocking Unbound Methods:: 
* Checking multiple calls with mock:: 
* Coping with mutable arguments:: 
* Nesting Patches:: 
* Mocking a dictionary with MagicMock:: 
* Mock subclasses and their attributes:: 
* Mocking imports with patch.dict: Mocking imports with patch dict. 
* Tracking order of calls and less verbose call assertions:: 
* More complex argument matching:: 


File: python.info,  Node: Mocking chained calls,  Next: Partial mocking,  Up: Further Examples

5.26.6.13 Mocking chained calls
...............................

Mocking chained calls is actually straightforward with mock once you
understand the *note return_value: 2c0f. attribute.  When a mock is
called for the first time, or you fetch its ‘return_value’ before it has
been called, a new *note Mock: 172. is created.

This means that you can see how the object returned from a call to a
mocked object has been used by interrogating the ‘return_value’ mock:

     >>> mock = Mock()
     >>> mock().foo(a=2, b=3)
     <Mock name='mock().foo()' id='...'>
     >>> mock.return_value.foo.assert_called_with(a=2, b=3)

From here it is a simple step to configure and then make assertions
about chained calls.  Of course another alternative is writing your code
in a more testable way in the first place...

So, suppose we have some code that looks a little bit like this:

     >>> class Something:
     ...     def __init__(self):
     ...         self.backend = BackendProvider()
     ...     def method(self):
     ...         response = self.backend.get_endpoint('foobar').create_call('spam', 'eggs').start_call()
     ...         # more code

Assuming that ‘BackendProvider’ is already well tested, how do we test
‘method()’?  Specifically, we want to test that the code section ‘# more
code’ uses the response object in the correct way.

As this chain of calls is made from an instance attribute we can monkey
patch the ‘backend’ attribute on a ‘Something’ instance.  In this
particular case we are only interested in the return value from the
final call to ‘start_call’ so we don’t have much configuration to do.
Let’s assume the object it returns is ’file-like’, so we’ll ensure that
our response object uses the builtin *note open(): 1e8. as its ‘spec’.

To do this we create a mock instance as our mock backend and create a
mock response object for it.  To set the response as the return value
for that final ‘start_call’ we could do this:

     mock_backend.get_endpoint.return_value.create_call.return_value.start_call.return_value = mock_response

We can do that in a slightly nicer way using the *note configure_mock():
2c10. method to directly set the return value for us:

     >>> something = Something()
     >>> mock_response = Mock(spec=open)
     >>> mock_backend = Mock()
     >>> config = {'get_endpoint.return_value.create_call.return_value.start_call.return_value': mock_response}
     >>> mock_backend.configure_mock(**config)

With these we monkey patch the "mock backend" in place and can make the
real call:

     >>> something.backend = mock_backend
     >>> something.method()

Using *note mock_calls: 2c15. we can check the chained call with a
single assert.  A chained call is several calls in one line of code, so
there will be several entries in ‘mock_calls’.  We can use *note
call.call_list(): 2c41. to create this list of calls for us:

     >>> chained = call.get_endpoint('foobar').create_call('spam', 'eggs').start_call()
     >>> call_list = chained.call_list()
     >>> assert mock_backend.mock_calls == call_list


File: python.info,  Node: Partial mocking,  Next: Mocking a Generator Method,  Prev: Mocking chained calls,  Up: Further Examples

5.26.6.14 Partial mocking
.........................

In some tests I wanted to mock out a call to *note
datetime.date.today(): 1254. to return a known date, but I didn’t want
to prevent the code under test from creating new date objects.
Unfortunately *note datetime.date: 9c0. is written in C, and so I
couldn’t just monkey-patch out the static ‘date.today()’ method.

I found a simple way of doing this that involved effectively wrapping
the date class with a mock, but passing through calls to the constructor
to the real class (and returning real instances).

The *note patch decorator: 35b. is used here to mock out the ‘date’
class in the module under test.  The ‘side_effect’ attribute on the mock
date class is then set to a lambda function that returns a real date.
When the mock date class is called a real date will be constructed and
returned by ‘side_effect’.

     >>> from datetime import date
     >>> with patch('mymodule.date') as mock_date:
     ...     mock_date.today.return_value = date(2010, 10, 8)
     ...     mock_date.side_effect = lambda *args, **kw: date(*args, **kw)
     ...
     ...     assert mymodule.date.today() == date(2010, 10, 8)
     ...     assert mymodule.date(2009, 6, 8) == date(2009, 6, 8)
     ...

Note that we don’t patch *note datetime.date: 9c0. globally, we patch
‘date’ in the module that `uses' it.  See *note where to patch: 2c05.

When ‘date.today()’ is called a known date is returned, but calls to the
‘date(...)’ constructor still return normal dates.  Without this you can
find yourself having to calculate an expected result using exactly the
same algorithm as the code under test, which is a classic testing
anti-pattern.

Calls to the date constructor are recorded in the ‘mock_date’ attributes
(‘call_count’ and friends) which may also be useful for your tests.

An alternative way of dealing with mocking dates, or other builtin
classes, is discussed in this blog entry(1).

   ---------- Footnotes ----------

   (1) 
http://williambert.online/2011/07/how-to-unit-testing-in-django-with-mocking-and-patching/


File: python.info,  Node: Mocking a Generator Method,  Next: Applying the same patch to every test method,  Prev: Partial mocking,  Up: Further Examples

5.26.6.15 Mocking a Generator Method
....................................

A Python generator is a function or method that uses the *note yield:
480. statement to return a series of values when iterated over (1).

A generator method / function is called to return the generator object.
It is the generator object that is then iterated over.  The protocol
method for iteration is *note __iter__(): fe0, so we can mock this using
a *note MagicMock: 358.

Here’s an example class with an "iter" method implemented as a
generator:

     >>> class Foo:
     ...     def iter(self):
     ...         for i in [1, 2, 3]:
     ...             yield i
     ...
     >>> foo = Foo()
     >>> list(foo.iter())
     [1, 2, 3]

How would we mock this class, and in particular its "iter" method?

To configure the values returned from the iteration (implicit in the
call to *note list: 25d.), we need to configure the object returned by
the call to ‘foo.iter()’.

     >>> mock_foo = MagicMock()
     >>> mock_foo.iter.return_value = iter([1, 2, 3])
     >>> list(mock_foo.iter())
     [1, 2, 3]

   ---------- Footnotes ----------

   (1) There are also generator expressions and more advanced uses
(http://www.dabeaz.com/coroutines/index.html) of generators, but we
aren’t concerned about them here.  A very good introduction to
generators and how powerful they are is: Generator Tricks for Systems
Programmers (http://www.dabeaz.com/generators/).


File: python.info,  Node: Applying the same patch to every test method,  Next: Mocking Unbound Methods,  Prev: Mocking a Generator Method,  Up: Further Examples

5.26.6.16 Applying the same patch to every test method
......................................................

If you want several patches in place for multiple test methods the
obvious way is to apply the patch decorators to every method.  This can
feel like unnecessary repetition.  For Python 2.6 or more recent you can
use *note patch(): 35b. (in all its various forms) as a class decorator.
This applies the patches to all test methods on the class.  A test
method is identified by methods whose names start with ‘test’:

     >>> @patch('mymodule.SomeClass')
     ... class MyTest(TestCase):
     ...
     ...     def test_one(self, MockSomeClass):
     ...         self.assertIs(mymodule.SomeClass, MockSomeClass)
     ...
     ...     def test_two(self, MockSomeClass):
     ...         self.assertIs(mymodule.SomeClass, MockSomeClass)
     ...
     ...     def not_a_test(self):
     ...         return 'something'
     ...
     >>> MyTest('test_one').test_one()
     >>> MyTest('test_two').test_two()
     >>> MyTest('test_two').not_a_test()
     'something'

An alternative way of managing patches is to use the *note patch
methods; start and stop: 2c32.  These allow you to move the patching
into your ‘setUp’ and ‘tearDown’ methods.

     >>> class MyTest(TestCase):
     ...     def setUp(self):
     ...         self.patcher = patch('mymodule.foo')
     ...         self.mock_foo = self.patcher.start()
     ...
     ...     def test_foo(self):
     ...         self.assertIs(mymodule.foo, self.mock_foo)
     ...
     ...     def tearDown(self):
     ...         self.patcher.stop()
     ...
     >>> MyTest('test_foo').run()

If you use this technique you must ensure that the patching is "undone"
by calling ‘stop’.  This can be fiddlier than you might think, because
if an exception is raised in the setUp then tearDown is not called.
*note unittest.TestCase.addCleanup(): 941. makes this easier:

     >>> class MyTest(TestCase):
     ...     def setUp(self):
     ...         patcher = patch('mymodule.foo')
     ...         self.addCleanup(patcher.stop)
     ...         self.mock_foo = patcher.start()
     ...
     ...     def test_foo(self):
     ...         self.assertIs(mymodule.foo, self.mock_foo)
     ...
     >>> MyTest('test_foo').run()

