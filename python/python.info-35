This is python.info, produced by makeinfo version 6.0 from python.texi.

     Python 3.6.0a0, May 06, 2016

     Georg Brandl

     Copyright © 2001-2016, Python Software Foundation

INFO-DIR-SECTION Documentation tools
START-INFO-DIR-ENTRY
* Python: (python.info). The Python Programming Language
END-INFO-DIR-ENTRY


   Generated by Sphinx 1.4.1.


File: python.info,  Node: An Introduction to Distutils,  Next: Writing the Setup Script,  Up: Distributing Python Modules Legacy version

17.1 An Introduction to Distutils
=================================

This document covers using the Distutils to distribute your Python
modules, concentrating on the role of developer/distributor: if you’re
looking for information on installing Python modules, you should refer
to the *note Installing Python Modules (Legacy version): 3e7. chapter.

* Menu:

* Concepts & Terminology:: 
* A Simple Example: A Simple Example<2>. 
* General Python terminology:: 
* Distutils-specific terminology:: 


File: python.info,  Node: Concepts & Terminology,  Next: A Simple Example<2>,  Up: An Introduction to Distutils

17.1.1 Concepts & Terminology
-----------------------------

Using the Distutils is quite simple, both for module developers and for
users/administrators installing third-party modules.  As a developer,
your responsibilities (apart from writing solid, well-documented and
well-tested code, of course!)  are:

   * write a setup script (‘setup.py’ by convention)

   * (optional) write a setup configuration file

   * create a source distribution

   * (optional) create one or more built (binary) distributions

Each of these tasks is covered in this document.

Not all module developers have access to a multitude of platforms, so
it’s not always feasible to expect them to create a multitude of built
distributions.  It is hoped that a class of intermediaries, called
`packagers', will arise to address this need.  Packagers will take
source distributions released by module developers, build them on one or
more platforms, and release the resulting built distributions.  Thus,
users on the most popular platforms will be able to install most popular
Python module distributions in the most natural way for their platform,
without having to run a single setup script or compile a line of code.


File: python.info,  Node: A Simple Example<2>,  Next: General Python terminology,  Prev: Concepts & Terminology,  Up: An Introduction to Distutils

17.1.2 A Simple Example
-----------------------

The setup script is usually quite simple, although since it’s written in
Python, there are no arbitrary limits to what you can do with it, though
you should be careful about putting arbitrarily expensive operations in
your setup script.  Unlike, say, Autoconf-style configure scripts, the
setup script may be run multiple times in the course of building and
installing your module distribution.

If all you want to do is distribute a module called ‘foo’, contained in
a file ‘foo.py’, then your setup script can be as simple as this:

     from distutils.core import setup
     setup(name='foo',
           version='1.0',
           py_modules=['foo'],
           )

Some observations:

   * most information that you supply to the Distutils is supplied as
     keyword arguments to the ‘setup()’ function

   * those keyword arguments fall into two categories: package metadata
     (name, version number) and information about what’s in the package
     (a list of pure Python modules, in this case)

   * modules are specified by module name, not filename (the same will
     hold true for packages and extensions)

   * it’s recommended that you supply a little more metadata, in
     particular your name, email address and a URL for the project (see
     section *note Writing the Setup Script: 3a89. for an example)

To create a source distribution for this module, you would create a
setup script, ‘setup.py’, containing the above code, and run this
command from a terminal:

     python setup.py sdist

For Windows, open a command prompt window (Start ‣ Accessories) and
change the command to:

     setup.py sdist

‘sdist’ will create an archive file (e.g., tarball on Unix, ZIP file on
Windows) containing your setup script ‘setup.py’, and your module
‘foo.py’.  The archive file will be named ‘foo-1.0.tar.gz’ (or ‘.zip’),
and will unpack into a directory ‘foo-1.0’.

If an end-user wishes to install your ‘foo’ module, all she has to do is
download ‘foo-1.0.tar.gz’ (or ‘.zip’), unpack it, and—from the ‘foo-1.0’
directory—run

     python setup.py install

which will ultimately copy ‘foo.py’ to the appropriate directory for
third-party modules in their Python installation.

This simple example demonstrates some fundamental concepts of the
Distutils.  First, both developers and installers have the same basic
user interface, i.e.  the setup script.  The difference is which
Distutils `commands' they use: the ‘sdist’ command is almost exclusively
for module developers, while ‘install’ is more often for installers
(although most developers will want to install their own code
occasionally).

If you want to make things really easy for your users, you can create
one or more built distributions for them.  For instance, if you are
running on a Windows machine, and want to make things easy for other
Windows users, you can create an executable installer (the most
appropriate type of built distribution for this platform) with the
‘bdist_wininst’ command.  For example:

     python setup.py bdist_wininst

will create an executable installer, ‘foo-1.0.win32.exe’, in the current
directory.

Other useful built distribution formats are RPM, implemented by the
‘bdist_rpm’ command, Solaris ‘pkgtool’ (‘bdist_pkgtool’), and HP-UX
‘swinstall’ (‘bdist_sdux’).  For example, the following command will
create an RPM file called ‘foo-1.0.noarch.rpm’:

     python setup.py bdist_rpm

(The ‘bdist_rpm’ command uses the ‘rpm’ executable, therefore this has
to be run on an RPM-based system such as Red Hat Linux, SuSE Linux, or
Mandrake Linux.)

You can find out what distribution formats are available at any time by
running

     python setup.py bdist --help-formats


File: python.info,  Node: General Python terminology,  Next: Distutils-specific terminology,  Prev: A Simple Example<2>,  Up: An Introduction to Distutils

17.1.3 General Python terminology
---------------------------------

If you’re reading this document, you probably have a good idea of what
modules, extensions, and so forth are.  Nevertheless, just to be sure
that everyone is operating from a common starting point, we offer the
following glossary of common Python terms:

module

     the basic unit of code reusability in Python: a block of code
     imported by some other code.  Three types of modules concern us
     here: pure Python modules, extension modules, and packages.

pure Python module

     a module written in Python and contained in a single ‘.py’ file
     (and possibly associated ‘.pyc’ files).  Sometimes referred to as a
     "pure module."

extension module

     a module written in the low-level language of the Python
     implementation: C/C++ for Python, Java for Jython.  Typically
     contained in a single dynamically loadable pre-compiled file, e.g.
     a shared object (‘.so’) file for Python extensions on Unix, a DLL
     (given the ‘.pyd’ extension) for Python extensions on Windows, or a
     Java class file for Jython extensions.  (Note that currently, the
     Distutils only handles C/C++ extensions for Python.)

package

     a module that contains other modules; typically contained in a
     directory in the filesystem and distinguished from other
     directories by the presence of a file ‘__init__.py’.

root package

     the root of the hierarchy of packages.  (This isn’t really a
     package, since it doesn’t have an ‘__init__.py’ file.  But we have
     to call it something.)  The vast majority of the standard library
     is in the root package, as are many small, standalone third-party
     modules that don’t belong to a larger module collection.  Unlike
     regular packages, modules in the root package can be found in many
     directories: in fact, every directory listed in ‘sys.path’
     contributes modules to the root package.


File: python.info,  Node: Distutils-specific terminology,  Prev: General Python terminology,  Up: An Introduction to Distutils

17.1.4 Distutils-specific terminology
-------------------------------------

The following terms apply more specifically to the domain of
distributing Python modules using the Distutils:

module distribution

     a collection of Python modules distributed together as a single
     downloadable resource and meant to be installed `en masse'.
     Examples of some well-known module distributions are NumPy, SciPy,
     PIL (the Python Imaging Library), or mxBase.  (This would be called
     a `package', except that term is already taken in the Python
     context: a single module distribution may contain zero, one, or
     many Python packages.)

pure module distribution

     a module distribution that contains only pure Python modules and
     packages.  Sometimes referred to as a "pure distribution."

non-pure module distribution

     a module distribution that contains at least one extension module.
     Sometimes referred to as a "non-pure distribution."

distribution root

     the top-level directory of your source tree (or source
     distribution); the directory where ‘setup.py’ exists.  Generally
     ‘setup.py’ will be run from this directory.


File: python.info,  Node: Writing the Setup Script,  Next: Writing the Setup Configuration File,  Prev: An Introduction to Distutils,  Up: Distributing Python Modules Legacy version

17.2 Writing the Setup Script
=============================

The setup script is the centre of all activity in building,
distributing, and installing modules using the Distutils.  The main
purpose of the setup script is to describe your module distribution to
the Distutils, so that the various commands that operate on your modules
do the right thing.  As we saw in section *note A Simple Example: 3a88.
above, the setup script consists mainly of a call to ‘setup()’, and most
information supplied to the Distutils by the module developer is
supplied as keyword arguments to ‘setup()’.

Here’s a slightly more involved example, which we’ll follow for the next
couple of sections: the Distutils’ own setup script.  (Keep in mind that
although the Distutils are included with Python 1.6 and later, they also
have an independent existence so that Python 1.5.2 users can use them to
install other module distributions.  The Distutils’ own setup script,
shown here, is used to install the package into Python 1.5.2.)

     #!/usr/bin/env python

     from distutils.core import setup

     setup(name='Distutils',
           version='1.0',
           description='Python Distribution Utilities',
           author='Greg Ward',
           author_email='gward@python.net',
           url='https://www.python.org/sigs/distutils-sig/',
           packages=['distutils', 'distutils.command'],
          )

There are only two differences between this and the trivial one-file
distribution presented in section *note A Simple Example: 3a88.: more
metadata, and the specification of pure Python modules by package,
rather than by module.  This is important since the Distutils consist of
a couple of dozen modules split into (so far) two packages; an explicit
list of every module would be tedious to generate and difficult to
maintain.  For more information on the additional meta-data, see section
*note Additional meta-data: 3a90.

Note that any pathnames (files or directories) supplied in the setup
script should be written using the Unix convention, i.e.
slash-separated.  The Distutils will take care of converting this
platform-neutral representation into whatever is appropriate on your
current platform before actually using the pathname.  This makes your
setup script portable across operating systems, which of course is one
of the major goals of the Distutils.  In this spirit, all pathnames in
this document are slash-separated.

This, of course, only applies to pathnames given to Distutils functions.
If you, for example, use standard Python functions such as *note
glob.glob(): 28e. or *note os.listdir(): 675. to specify files, you
should be careful to write portable code instead of hardcoding path
separators:

     glob.glob(os.path.join('mydir', 'subdir', '*.html'))
     os.listdir(os.path.join('mydir', 'subdir'))

* Menu:

* Listing whole packages:: 
* Listing individual modules:: 
* Describing extension modules:: 
* Relationships between Distributions and Packages:: 
* Installing Scripts:: 
* Installing Package Data:: 
* Installing Additional Files:: 
* Additional meta-data:: 
* Debugging the setup script:: 


File: python.info,  Node: Listing whole packages,  Next: Listing individual modules,  Up: Writing the Setup Script

17.2.1 Listing whole packages
-----------------------------

The ‘packages’ option tells the Distutils to process (build, distribute,
install, etc.)  all pure Python modules found in each package mentioned
in the ‘packages’ list.  In order to do this, of course, there has to be
a correspondence between package names and directories in the
filesystem.  The default correspondence is the most obvious one, i.e.
package *note distutils: 37. is found in the directory ‘distutils’
relative to the distribution root.  Thus, when you say ‘packages =
['foo']’ in your setup script, you are promising that the Distutils will
find a file ‘foo/__init__.py’ (which might be spelled differently on
your system, but you get the idea) relative to the directory where your
setup script lives.  If you break this promise, the Distutils will issue
a warning but still process the broken package anyway.

If you use a different convention to lay out your source directory,
that’s no problem: you just have to supply the ‘package_dir’ option to
tell the Distutils about your convention.  For example, say you keep all
Python source under ‘lib’, so that modules in the "root package" (i.e.,
not in any package at all) are in ‘lib’, modules in the ‘foo’ package
are in ‘lib/foo’, and so forth.  Then you would put

     package_dir = {'': 'lib'}

in your setup script.  The keys to this dictionary are package names,
and an empty package name stands for the root package.  The values are
directory names relative to your distribution root.  In this case, when
you say ‘packages = ['foo']’, you are promising that the file
‘lib/foo/__init__.py’ exists.

Another possible convention is to put the ‘foo’ package right in ‘lib’,
the ‘foo.bar’ package in ‘lib/bar’, etc.  This would be written in the
setup script as

     package_dir = {'foo': 'lib'}

A ‘package: dir’ entry in the ‘package_dir’ dictionary implicitly
applies to all packages below `package', so the ‘foo.bar’ case is
automatically handled here.  In this example, having ‘packages = ['foo',
'foo.bar']’ tells the Distutils to look for ‘lib/__init__.py’ and
‘lib/bar/__init__.py’.  (Keep in mind that although ‘package_dir’
applies recursively, you must explicitly list all packages in
‘packages’: the Distutils will `not' recursively scan your source tree
looking for any directory with an ‘__init__.py’ file.)


File: python.info,  Node: Listing individual modules,  Next: Describing extension modules,  Prev: Listing whole packages,  Up: Writing the Setup Script

17.2.2 Listing individual modules
---------------------------------

For a small module distribution, you might prefer to list all modules
rather than listing packages—especially the case of a single module that
goes in the "root package" (i.e., no package at all).  This simplest
case was shown in section *note A Simple Example: 3a88.; here is a
slightly more involved example:

     py_modules = ['mod1', 'pkg.mod2']

This describes two modules, one of them in the "root" package, the other
in the ‘pkg’ package.  Again, the default package/directory layout
implies that these two modules can be found in ‘mod1.py’ and
‘pkg/mod2.py’, and that ‘pkg/__init__.py’ exists as well.  And again,
you can override the package/directory correspondence using the
‘package_dir’ option.


File: python.info,  Node: Describing extension modules,  Next: Relationships between Distributions and Packages,  Prev: Listing individual modules,  Up: Writing the Setup Script

17.2.3 Describing extension modules
-----------------------------------

Just as writing Python extension modules is a bit more complicated than
writing pure Python modules, describing them to the Distutils is a bit
more complicated.  Unlike pure modules, it’s not enough just to list
modules or packages and expect the Distutils to go out and find the
right files; you have to specify the extension name, source file(s), and
any compile/link requirements (include directories, libraries to link
with, etc.).

All of this is done through another keyword argument to ‘setup()’, the
‘ext_modules’ option.  ‘ext_modules’ is just a list of *note Extension:
3a97. instances, each of which describes a single extension module.
Suppose your distribution includes a single extension, called ‘foo’ and
implemented by ‘foo.c’.  If no additional instructions to the
compiler/linker are needed, describing this extension is quite simple:

     Extension('foo', ['foo.c'])

The ‘Extension’ class can be imported from *note distutils.core: 52.
along with ‘setup()’.  Thus, the setup script for a module distribution
that contains only this one extension and nothing else might be:

     from distutils.core import setup, Extension
     setup(name='foo',
           version='1.0',
           ext_modules=[Extension('foo', ['foo.c'])],
           )

The ‘Extension’ class (actually, the underlying extension-building
machinery implemented by the ‘build_ext’ command) supports a great deal
of flexibility in describing Python extensions, which is explained in
the following sections.

* Menu:

* Extension names and packages:: 
* Extension source files:: 
* Preprocessor options:: 
* Library options:: 
* Other options: Other options<2>. 


File: python.info,  Node: Extension names and packages,  Next: Extension source files,  Up: Describing extension modules

17.2.3.1 Extension names and packages
.....................................

The first argument to the *note Extension: 3a97. constructor is always
the name of the extension, including any package names.  For example,

     Extension('foo', ['src/foo1.c', 'src/foo2.c'])

describes an extension that lives in the root package, while

     Extension('pkg.foo', ['src/foo1.c', 'src/foo2.c'])

describes the same extension in the ‘pkg’ package.  The source files and
resulting object code are identical in both cases; the only difference
is where in the filesystem (and therefore where in Python’s namespace
hierarchy) the resulting extension lives.

If you have a number of extensions all in the same package (or all under
the same base package), use the ‘ext_package’ keyword argument to
‘setup()’.  For example,

     setup(...,
           ext_package='pkg',
           ext_modules=[Extension('foo', ['foo.c']),
                        Extension('subpkg.bar', ['bar.c'])],
          )

will compile ‘foo.c’ to the extension ‘pkg.foo’, and ‘bar.c’ to
‘pkg.subpkg.bar’.


File: python.info,  Node: Extension source files,  Next: Preprocessor options,  Prev: Extension names and packages,  Up: Describing extension modules

17.2.3.2 Extension source files
...............................

The second argument to the *note Extension: 3a97. constructor is a list
of source files.  Since the Distutils currently only support C, C++, and
Objective-C extensions, these are normally C/C++/Objective-C source
files.  (Be sure to use appropriate extensions to distinguish C++source
files: ‘.cc’ and ‘.cpp’ seem to be recognized by both Unix and Windows
compilers.)

However, you can also include SWIG interface (‘.i’) files in the list;
the ‘build_ext’ command knows how to deal with SWIG extensions: it will
run SWIG on the interface file and compile the resulting C/C++ file into
your extension.

This warning notwithstanding, options to SWIG can be currently passed
like this:

     setup(...,
           ext_modules=[Extension('_foo', ['foo.i'],
                                  swig_opts=['-modern', '-I../include'])],
           py_modules=['foo'],
          )

Or on the commandline like this:

     > python setup.py build_ext --swig-opts="-modern -I../include"

On some platforms, you can include non-source files that are processed
by the compiler and included in your extension.  Currently, this just
means Windows message text (‘.mc’) files and resource definition (‘.rc’)
files for Visual C++.  These will be compiled to binary resource
(‘.res’) files and linked into the executable.


File: python.info,  Node: Preprocessor options,  Next: Library options,  Prev: Extension source files,  Up: Describing extension modules

17.2.3.3 Preprocessor options
.............................

Three optional arguments to *note Extension: 3a97. will help if you need
to specify include directories to search or preprocessor macros to
define/undefine: ‘include_dirs’, ‘define_macros’, and ‘undef_macros’.

For example, if your extension requires header files in the ‘include’
directory under your distribution root, use the ‘include_dirs’ option:

     Extension('foo', ['foo.c'], include_dirs=['include'])

You can specify absolute directories there; if you know that your
extension will only be built on Unix systems with X11R6 installed to
‘/usr’, you can get away with

     Extension('foo', ['foo.c'], include_dirs=['/usr/include/X11'])

You should avoid this sort of non-portable usage if you plan to
distribute your code: it’s probably better to write C code like

     #include <X11/Xlib.h>

If you need to include header files from some other Python extension,
you can take advantage of the fact that header files are installed in a
consistent way by the Distutils ‘install_headers’ command.  For example,
the Numerical Python header files are installed (on a standard Unix
installation) to ‘/usr/local/include/python1.5/Numerical’.  (The exact
location will differ according to your platform and Python
installation.)  Since the Python include
directory—‘/usr/local/include/python1.5’ in this case—is always included
in the search path when building Python extensions, the best approach is
to write C code like

     #include <Numerical/arrayobject.h>

If you must put the ‘Numerical’ include directory right into your header
search path, though, you can find that directory using the Distutils
*note distutils.sysconfig: 60. module:

     from distutils.sysconfig import get_python_inc
     incdir = os.path.join(get_python_inc(plat_specific=1), 'Numerical')
     setup(...,
           Extension(..., include_dirs=[incdir]),
           )

Even though this is quite portable—it will work on any Python
installation, regardless of platform—it’s probably easier to just write
your C code in the sensible way.

You can define and undefine pre-processor macros with the
‘define_macros’ and ‘undef_macros’ options.  ‘define_macros’ takes a
list of ‘(name, value)’ tuples, where ‘name’ is the name of the macro to
define (a string) and ‘value’ is its value: either a string or ‘None’.
(Defining a macro ‘FOO’ to ‘None’ is the equivalent of a bare ‘#define
FOO’ in your C source: with most compilers, this sets ‘FOO’ to the
string ‘1’.)  ‘undef_macros’ is just a list of macros to undefine.

For example:

     Extension(...,
               define_macros=[('NDEBUG', '1'),
                              ('HAVE_STRFTIME', None)],
               undef_macros=['HAVE_FOO', 'HAVE_BAR'])

is the equivalent of having this at the top of every C source file:

     #define NDEBUG 1
     #define HAVE_STRFTIME
     #undef HAVE_FOO
     #undef HAVE_BAR


File: python.info,  Node: Library options,  Next: Other options<2>,  Prev: Preprocessor options,  Up: Describing extension modules

17.2.3.4 Library options
........................

You can also specify the libraries to link against when building your
extension, and the directories to search for those libraries.  The
‘libraries’ option is a list of libraries to link against,
‘library_dirs’ is a list of directories to search for libraries at
link-time, and ‘runtime_library_dirs’ is a list of directories to search
for shared (dynamically loaded) libraries at run-time.

For example, if you need to link against libraries known to be in the
standard library search path on target systems

     Extension(...,
               libraries=['gdbm', 'readline'])

If you need to link with libraries in a non-standard location, you’ll
have to include the location in ‘library_dirs’:

     Extension(...,
               library_dirs=['/usr/X11R6/lib'],
               libraries=['X11', 'Xt'])

(Again, this sort of non-portable construct should be avoided if you
intend to distribute your code.)


File: python.info,  Node: Other options<2>,  Prev: Library options,  Up: Describing extension modules

17.2.3.5 Other options
......................

There are still some other options which can be used to handle special
cases.

The ‘optional’ option is a boolean; if it is true, a build failure in
the extension will not abort the build process, but instead simply not
install the failing extension.

The ‘extra_objects’ option is a list of object files to be passed to the
linker.  These files must not have extensions, as the default extension
for the compiler is used.

‘extra_compile_args’ and ‘extra_link_args’ can be used to specify
additional command line options for the respective compiler and linker
command lines.

‘export_symbols’ is only useful on Windows.  It can contain a list of
symbols (functions or variables) to be exported.  This option is not
needed when building compiled extensions: Distutils will automatically
add ‘initmodule’ to the list of exported symbols.

The ‘depends’ option is a list of files that the extension depends on
(for example header files).  The build command will call the compiler on
the sources to rebuild extension if any on this files has been modified
since the previous build.


File: python.info,  Node: Relationships between Distributions and Packages,  Next: Installing Scripts,  Prev: Describing extension modules,  Up: Writing the Setup Script

17.2.4 Relationships between Distributions and Packages
-------------------------------------------------------

A distribution may relate to packages in three specific ways:

  1. It can require packages or modules.

  2. It can provide packages or modules.

  3. It can obsolete packages or modules.

These relationships can be specified using keyword arguments to the
*note distutils.core.setup(): 3372. function.

Dependencies on other Python modules and packages can be specified by
supplying the `requires' keyword argument to ‘setup()’.  The value must
be a list of strings.  Each string specifies a package that is required,
and optionally what versions are sufficient.

To specify that any version of a module or package is required, the
string should consist entirely of the module or package name.  Examples
include ‘'mymodule'’ and ‘'xml.parsers.expat'’.

If specific versions are required, a sequence of qualifiers can be
supplied in parentheses.  Each qualifier may consist of a comparison
operator and a version number.  The accepted comparison operators are:

     <    >    ==
     <=   >=   !=

These can be combined by using multiple qualifiers separated by commas
(and optional whitespace).  In this case, all of the qualifiers must be
matched; a logical AND is used to combine the evaluations.

Let’s look at a bunch of examples:

Requires Expression           Explanation
                              
---------------------------------------------------------------------------------
                              
‘==1.0’                       Only version ‘1.0’ is compatible
                              
                              
‘>1.0, !=1.5.1, <2.0’         Any version after ‘1.0’ and before ‘2.0’ is
                              compatible, except ‘1.5.1’
                              

Now that we can specify dependencies, we also need to be able to specify
what we provide that other distributions can require.  This is done
using the `provides' keyword argument to ‘setup()’.  The value for this
keyword is a list of strings, each of which names a Python module or
package, and optionally identifies the version.  If the version is not
specified, it is assumed to match that of the distribution.

Some examples:

Provides Expression       Explanation
                          
-----------------------------------------------------------------------------
                          
‘mypkg’                   Provide ‘mypkg’, using the distribution version
                          
                          
‘mypkg (1.1)’             Provide ‘mypkg’ version 1.1, regardless of the
                          distribution version
                          

A package can declare that it obsoletes other packages using the
`obsoletes' keyword argument.  The value for this is similar to that of
the `requires' keyword: a list of strings giving module or package
specifiers.  Each specifier consists of a module or package name
optionally followed by one or more version qualifiers.  Version
qualifiers are given in parentheses after the module or package name.

The versions identified by the qualifiers are those that are obsoleted
by the distribution being described.  If no qualifiers are given, all
versions of the named module or package are understood to be obsoleted.


File: python.info,  Node: Installing Scripts,  Next: Installing Package Data,  Prev: Relationships between Distributions and Packages,  Up: Writing the Setup Script

17.2.5 Installing Scripts
-------------------------

So far we have been dealing with pure and non-pure Python modules, which
are usually not run by themselves but imported by scripts.

Scripts are files containing Python source code, intended to be started
from the command line.  Scripts don’t require Distutils to do anything
very complicated.  The only clever feature is that if the first line of
the script starts with ‘#!’ and contains the word "python", the
Distutils will adjust the first line to refer to the current interpreter
location.  By default, it is replaced with the current interpreter
location.  The ‘--executable’ (or *note -e: 1783.) option will allow the
interpreter path to be explicitly overridden.

The ‘scripts’ option simply is a list of files to be handled in this
way.  From the PyXML setup script:

     setup(...,
           scripts=['scripts/xmlproc_parse', 'scripts/xmlproc_val']
           )

Changed in version 3.1: All the scripts will also be added to the
‘MANIFEST’ file if no template is provided.  See *note Specifying the
files to distribute: 3375.


File: python.info,  Node: Installing Package Data,  Next: Installing Additional Files,  Prev: Installing Scripts,  Up: Writing the Setup Script

17.2.6 Installing Package Data
------------------------------

Often, additional files need to be installed into a package.  These
files are often data that’s closely related to the package’s
implementation, or text files containing documentation that might be of
interest to programmers using the package.  These files are called
`package data'.

Package data can be added to packages using the ‘package_data’ keyword
argument to the ‘setup()’ function.  The value must be a mapping from
package name to a list of relative path names that should be copied into
the package.  The paths are interpreted as relative to the directory
containing the package (information from the ‘package_dir’ mapping is
used if appropriate); that is, the files are expected to be part of the
package in the source directories.  They may contain glob patterns as
well.

The path names may contain directory portions; any necessary directories
will be created in the installation.

For example, if a package should contain a subdirectory with several
data files, the files can be arranged like this in the source tree:

     setup.py
     src/
         mypkg/
             __init__.py
             module.py
             data/
                 tables.dat
                 spoons.dat
                 forks.dat

The corresponding call to ‘setup()’ might be:

     setup(...,
           packages=['mypkg'],
           package_dir={'mypkg': 'src/mypkg'},
           package_data={'mypkg': ['data/*.dat']},
           )

Changed in version 3.1: All the files that match ‘package_data’ will be
added to the ‘MANIFEST’ file if no template is provided.  See *note
Specifying the files to distribute: 3375.


File: python.info,  Node: Installing Additional Files,  Next: Additional meta-data,  Prev: Installing Package Data,  Up: Writing the Setup Script

17.2.7 Installing Additional Files
----------------------------------

The ‘data_files’ option can be used to specify additional files needed
by the module distribution: configuration files, message catalogs, data
files, anything which doesn’t fit in the previous categories.

‘data_files’ specifies a sequence of (`directory', `files') pairs in the
following way:

     setup(...,
           data_files=[('bitmaps', ['bm/b1.gif', 'bm/b2.gif']),
                       ('config', ['cfg/data.cfg']),
                       ('/etc/init.d', ['init-script'])]
          )

Note that you can specify the directory names where the data files will
be installed, but you cannot rename the data files themselves.

Each (`directory', `files') pair in the sequence specifies the
installation directory and the files to install there.  If `directory'
is a relative path, it is interpreted relative to the installation
prefix (Python’s ‘sys.prefix’ for pure-Python packages,
‘sys.exec_prefix’ for packages that contain extension modules).  Each
file name in `files' is interpreted relative to the ‘setup.py’ script at
the top of the package source distribution.  No directory information
from `files' is used to determine the final location of the installed
file; only the name of the file is used.

You can specify the ‘data_files’ options as a simple sequence of files
without specifying a target directory, but this is not recommended, and
the ‘install’ command will print a warning in this case.  To install
data files directly in the target directory, an empty string should be
given as the directory.

Changed in version 3.1: All the files that match ‘data_files’ will be
added to the ‘MANIFEST’ file if no template is provided.  See *note
Specifying the files to distribute: 3375.


File: python.info,  Node: Additional meta-data,  Next: Debugging the setup script,  Prev: Installing Additional Files,  Up: Writing the Setup Script

17.2.8 Additional meta-data
---------------------------

The setup script may include additional meta-data beyond the name and
version.  This information includes:

Meta-Data                  Description                     Value                 Notes
                                                                                 
----------------------------------------------------------------------------------------------
                                                                                 
‘name’                     name of the package             short string          (1)
                                                                                 
                                                                                 
‘version’                  version of this release         short string          (1)(2)
                                                                                 
                                                                                 
‘author’                   package author’s name           short string          (3)
                                                                                 
                                                                                 
‘author_email’             email address of the package    email address         (3)
                           author                                                
                           
                                                                                 
‘maintainer’               package maintainer’s name       short string          (3)
                                                                                 
                                                                                 
‘maintainer_email’         email address of the package    email address         (3)
                           maintainer                                            
                           
                                                                                 
‘url’                      home page for the package       URL                   (1)
                                                                                 
                                                                                 
‘description’              short, summary description of   short string
                           the package                     
                           
                                                                                 
‘long_description’         longer description of the       long string           (5)
                           package                                               
                           
                                                                                 
‘download_url’             location where the package      URL                   (4)
                           may be downloaded                                     
                           
                                                                                 
‘classifiers’              a list of classifiers           list of strings       (4)
                                                                                 
                                                                                 
‘platforms’                a list of platforms             list of strings
                                                           
                                                                                 
‘license’                  license for the package         short string          (6)
                                                                                 

Notes:

  1. These fields are required.

  2. It is recommended that versions take the form
     `major.minor[.patch[.sub]]'.

  3. Either the author or the maintainer must be identified.  If
     maintainer is provided, distutils lists it as the author in
     ‘PKG-INFO’.

  4. These fields should not be used if your package is to be compatible
     with Python versions prior to 2.2.3 or 2.3.  The list is available
     from the PyPI website(1).

  5. The ‘long_description’ field is used by PyPI when you are *note
     registering: 3aa5. a package, to *note build its home page: 3aa6.

  6. The ‘license’ field is a text indicating the license covering the
     package where the license is not a selection from the "License"
     Trove classifiers.  See the ‘Classifier’ field.  Notice that
     there’s a ‘licence’ distribution option which is deprecated but
     still acts as an alias for ‘license’.

’short string’

     A single line of text, not more than 200 characters.

’long string’

     Multiple lines of plain text in reStructuredText format (see
     ‘http://docutils.sourceforge.net/’).

’list of strings’

     See below.

Encoding the version information is an art in itself.  Python packages
generally adhere to the version format `major.minor[.patch][sub]'.  The
major number is 0 for initial, experimental releases of software.  It is
incremented for releases that represent major milestones in a package.
The minor number is incremented when important new features are added to
the package.  The patch number increments when bug-fix releases are
made.  Additional trailing version information is sometimes used to
indicate sub-releases.  These are "a1,a2,...,aN" (for alpha releases,
where functionality and API may change), "b1,b2,...,bN" (for beta
releases, which only fix bugs) and "pr1,pr2,...,prN" (for final
pre-release release testing).  Some examples:

0.1.0

     the first, experimental release of a package

1.0.1a2

     the second alpha release of the first patch version of 1.0

‘classifiers’ are specified in a Python list:

     setup(...,
           classifiers=[
               'Development Status :: 4 - Beta',
               'Environment :: Console',
               'Environment :: Web Environment',
               'Intended Audience :: End Users/Desktop',
               'Intended Audience :: Developers',
               'Intended Audience :: System Administrators',
               'License :: OSI Approved :: Python Software Foundation License',
               'Operating System :: MacOS :: MacOS X',
               'Operating System :: Microsoft :: Windows',
               'Operating System :: POSIX',
               'Programming Language :: Python',
               'Topic :: Communications :: Email',
               'Topic :: Office/Business',
               'Topic :: Software Development :: Bug Tracking',
               ],
           )

   ---------- Footnotes ----------

   (1) https://pypi.python.org/pypi


File: python.info,  Node: Debugging the setup script,  Prev: Additional meta-data,  Up: Writing the Setup Script

17.2.9 Debugging the setup script
---------------------------------

Sometimes things go wrong, and the setup script doesn’t do what the
developer wants.

Distutils catches any exceptions when running the setup script, and
print a simple error message before the script is terminated.  The
motivation for this behaviour is to not confuse administrators who don’t
know much about Python and are trying to install a package.  If they get
a big long traceback from deep inside the guts of Distutils, they may
think the package or the Python installation is broken because they
don’t read all the way down to the bottom and see that it’s a permission
problem.

On the other hand, this doesn’t help the developer to find the cause of
the failure.  For this purpose, the ‘DISTUTILS_DEBUG’ environment
variable can be set to anything except an empty string, and distutils
will now print detailed information about what it is doing, dump the
full traceback when an exception occurs, and print the whole command
line when an external program (like a C compiler) fails.


File: python.info,  Node: Writing the Setup Configuration File,  Next: Creating a Source Distribution,  Prev: Writing the Setup Script,  Up: Distributing Python Modules Legacy version

17.3 Writing the Setup Configuration File
=========================================

Often, it’s not possible to write down everything needed to build a
distribution `a priori': you may need to get some information from the
user, or from the user’s system, in order to proceed.  As long as that
information is fairly simple—a list of directories to search for C
header files or libraries, for example—then providing a configuration
file, ‘setup.cfg’, for users to edit is a cheap and easy way to solicit
it.  Configuration files also let you provide default values for any
command option, which the installer can then override either on the
command-line or by editing the config file.

The setup configuration file is a useful middle-ground between the setup
script —which, ideally, would be opaque to installers (1)—and the
command-line to the setup script, which is outside of your control and
entirely up to the installer.  In fact, ‘setup.cfg’ (and any other
Distutils configuration files present on the target system) are
processed after the contents of the setup script, but before the
command-line.  This has several useful consequences:

   * installers can override some of what you put in ‘setup.py’ by
     editing ‘setup.cfg’

   * you can provide non-standard defaults for options that are not
     easily set in ‘setup.py’

   * installers can override anything in ‘setup.cfg’ using the
     command-line options to ‘setup.py’

The basic syntax of the configuration file is simple:

     [command]
     option=value
     ...

where `command' is one of the Distutils commands (e.g.  ‘build_py’,
‘install’), and `option' is one of the options that command supports.
Any number of options can be supplied for each command, and any number
of command sections can be included in the file.  Blank lines are
ignored, as are comments, which run from a ‘'#'’ character until the end
of the line.  Long option values can be split across multiple lines
simply by indenting the continuation lines.

You can find out the list of options supported by a particular command
with the universal ‘--help’ option, e.g.

     > python setup.py --help build_ext
     [...]
     Options for 'build_ext' command:
       --build-lib (-b)     directory for compiled extension modules
       --build-temp (-t)    directory for temporary files (build by-products)
       --inplace (-i)       ignore build-lib and put compiled extensions into the
                            source directory alongside your pure Python modules
       --include-dirs (-I)  list of directories to search for header files
       --define (-D)        C preprocessor macros to define
       --undef (-U)         C preprocessor macros to undefine
       --swig-opts          list of SWIG command line options
     [...]

Note that an option spelled ‘--foo-bar’ on the command-line is spelled
‘foo_bar’ in configuration files.  For example, say you want your
extensions to be built "in-place"—that is, you have an extension
‘pkg.ext’, and you want the compiled extension file (‘ext.so’ on Unix,
say) to be put in the same source directory as your pure Python modules
‘pkg.mod1’ and ‘pkg.mod2’.  You can always use the ‘--inplace’ option on
the command-line to ensure this:

     python setup.py build_ext --inplace

But this requires that you always specify the ‘build_ext’ command
explicitly, and remember to provide ‘--inplace’.  An easier way is to
"set and forget" this option, by encoding it in ‘setup.cfg’, the
configuration file for this distribution:

     [build_ext]
     inplace=1

This will affect all builds of this module distribution, whether or not
you explicitly specify ‘build_ext’.  If you include ‘setup.cfg’ in your
source distribution, it will also affect end-user builds—which is
probably a bad idea for this option, since always building extensions
in-place would break installation of the module distribution.  In
certain peculiar cases, though, modules are built right in their
installation directory, so this is conceivably a useful ability.
(Distributing extensions that expect to be built in their installation
directory is almost always a bad idea, though.)

Another example: certain commands take a lot of options that don’t
change from run to run; for example, ‘bdist_rpm’ needs to know
everything required to generate a "spec" file for creating an RPM
distribution.  Some of this information comes from the setup script, and
some is automatically generated by the Distutils (such as the list of
files installed).  But some of it has to be supplied as options to
‘bdist_rpm’, which would be very tedious to do on the command-line for
every run.  Hence, here is a snippet from the Distutils’ own
‘setup.cfg’:

     [bdist_rpm]
     release = 1
     packager = Greg Ward <gward@python.net>
     doc_files = CHANGES.txt
                 README.txt
                 USAGE.txt
                 doc/
                 examples/

Note that the ‘doc_files’ option is simply a whitespace-separated string
split across multiple lines for readability.

See also
........

*note Syntax of config files: 3aad. in "Installing Python Modules"

     More information on the configuration files is available in the
     manual for system administrators.

   ---------- Footnotes ----------

   (1) This ideal probably won’t be achieved until auto-configuration is
fully supported by the Distutils.


File: python.info,  Node: Creating a Source Distribution,  Next: Creating Built Distributions,  Prev: Writing the Setup Configuration File,  Up: Distributing Python Modules Legacy version

17.4 Creating a Source Distribution
===================================

As shown in section *note A Simple Example: 3a88, you use the ‘sdist’
command to create a source distribution.  In the simplest case,

     python setup.py sdist

(assuming you haven’t specified any ‘sdist’ options in the setup script
or config file), ‘sdist’ creates the archive of the default format for
the current platform.  The default format is a gzip’ed tar file
(‘.tar.gz’) on Unix, and ZIP file on Windows.

You can specify as many formats as you like using the ‘--formats’
option, for example:

     python setup.py sdist --formats=gztar,zip

to create a gzipped tarball and a zip file.  The available formats are:

Format          Description                   Notes
                                              
------------------------------------------------------------
                                              
‘zip’           zip file (‘.zip’)             (1),(3)
                                              
                                              
‘gztar’         gzip’ed tar file              (2)
                (‘.tar.gz’)                   
                
                                              
‘bztar’         bzip2’ed tar file
                (‘.tar.bz2’)
                
                                              
‘xztar’         xz’ed tar file (‘.tar.xz’)
                
                                              
‘ztar’          compressed tar file           (4)
                (‘.tar.Z’)                    
                
                                              
‘tar’           tar file (‘.tar’)
                

Changed in version 3.5: Added support for the ‘xztar’ format.

Notes:

  1. default on Windows

  2. default on Unix

  3. requires either external ‘zip’ utility or *note zipfile: 13f.
     module (part of the standard Python library since Python 1.6)

  4. requires the ‘compress’ program.  Notice that this format is now
     pending for deprecation and will be removed in the future versions
     of Python.

When using any ‘tar’ format (‘gztar’, ‘bztar’, ‘xztar’, ‘ztar’ or
‘tar’), under Unix you can specify the ‘owner’ and ‘group’ names that
will be set for each member of the archive.

For example, if you want all files of the archive to be owned by root:

     python setup.py sdist --owner=root --group=root

* Menu:

* Specifying the files to distribute:: 
* Manifest-related options:: 


File: python.info,  Node: Specifying the files to distribute,  Next: Manifest-related options,  Up: Creating a Source Distribution

17.4.1 Specifying the files to distribute
-----------------------------------------

If you don’t supply an explicit list of files (or instructions on how to
generate one), the ‘sdist’ command puts a minimal default set into the
source distribution:

   * all Python source files implied by the ‘py_modules’ and ‘packages’
     options

   * all C source files mentioned in the ‘ext_modules’ or ‘libraries’
     options

   * scripts identified by the ‘scripts’ option See *note Installing
     Scripts: 3a9f.

   * anything that looks like a test script: ‘test/test*.py’ (currently,
     the Distutils don’t do anything with test scripts except include
     them in source distributions, but in the future there will be a
     standard for testing Python module distributions)

   * ‘README.txt’ (or ‘README’), ‘setup.py’ (or whatever you called your
     setup script), and ‘setup.cfg’

   * all files that matches the ‘package_data’ metadata.  See *note
     Installing Package Data: 3aa0.

   * all files that matches the ‘data_files’ metadata.  See *note
     Installing Additional Files: 3aa3.

Sometimes this is enough, but usually you will want to specify
additional files to distribute.  The typical way to do this is to write
a `manifest template', called ‘MANIFEST.in’ by default.  The manifest
template is just a list of instructions for how to generate your
manifest file, ‘MANIFEST’, which is the exact list of files to include
in your source distribution.  The ‘sdist’ command processes this
template and generates a manifest based on its instructions and what it
finds in the filesystem.

If you prefer to roll your own manifest file, the format is simple: one
filename per line, regular files (or symlinks to them) only.  If you do
supply your own ‘MANIFEST’, you must specify everything: the default set
of files described above does not apply in this case.

Changed in version 3.1: An existing generated ‘MANIFEST’ will be
regenerated without ‘sdist’ comparing its modification time to the one
of ‘MANIFEST.in’ or ‘setup.py’.

Changed in version 3.1.3: ‘MANIFEST’ files start with a comment
indicating they are generated.  Files without this comment are not
overwritten or removed.

Changed in version 3.2.2: ‘sdist’ will read a ‘MANIFEST’ file if no
‘MANIFEST.in’ exists, like it used to do.

The manifest template has one command per line, where each command
specifies a set of files to include or exclude from the source
distribution.  For an example, again we turn to the Distutils’ own
manifest template:

     include *.txt
     recursive-include examples *.txt *.py
     prune examples/sample?/build

The meanings should be fairly clear: include all files in the
distribution root matching ‘*.txt’, all files anywhere under the
‘examples’ directory matching ‘*.txt’ or ‘*.py’, and exclude all
directories matching ‘examples/sample?/build’.  All of this is done
`after' the standard include set, so you can exclude files from the
standard set with explicit instructions in the manifest template.  (Or,
you can use the ‘--no-defaults’ option to disable the standard set
entirely.)  There are several other commands available in the manifest
template mini-language; see section *note Creating a source
distribution; the sdist command: 3ab2.

The order of commands in the manifest template matters: initially, we
have the list of default files as described above, and each command in
the template adds to or removes from that list of files.  Once we have
fully processed the manifest template, we remove files that should not
be included in the source distribution:

   * all files in the Distutils "build" tree (default ‘build/’)

   * all files in directories named ‘RCS’, ‘CVS’, ‘.svn’, ‘.hg’, ‘.git’,
     ‘.bzr’ or ‘_darcs’

Now we have our complete list of files, which is written to the manifest
for future reference, and then used to build the source distribution
archive(s).

You can disable the default set of included files with the
‘--no-defaults’ option, and you can disable the standard exclude set
with ‘--no-prune’.

Following the Distutils’ own manifest template, let’s trace how the
‘sdist’ command builds the list of files to include in the Distutils
source distribution:

  1. include all Python source files in the ‘distutils’ and
     ‘distutils/command’ subdirectories (because packages corresponding
     to those two directories were mentioned in the ‘packages’ option in
     the setup script—see section *note Writing the Setup Script: 3a89.)

  2. include ‘README.txt’, ‘setup.py’, and ‘setup.cfg’ (standard files)

  3. include ‘test/test*.py’ (standard files)

  4. include ‘*.txt’ in the distribution root (this will find
     ‘README.txt’ a second time, but such redundancies are weeded out
     later)

  5. include anything matching ‘*.txt’ or ‘*.py’ in the sub-tree under
     ‘examples’,

  6. exclude all files in the sub-trees starting at directories matching
     ‘examples/sample?/build’—this may exclude files included by the
     previous two steps, so it’s important that the ‘prune’ command in
     the manifest template comes after the ‘recursive-include’ command

  7. exclude the entire ‘build’ tree, and any ‘RCS’, ‘CVS’, ‘.svn’,
     ‘.hg’, ‘.git’, ‘.bzr’ and ‘_darcs’ directories

Just like in the setup script, file and directory names in the manifest
template should always be slash-separated; the Distutils will take care
of converting them to the standard representation on your platform.
That way, the manifest template is portable across operating systems.


File: python.info,  Node: Manifest-related options,  Prev: Specifying the files to distribute,  Up: Creating a Source Distribution

17.4.2 Manifest-related options
-------------------------------

The normal course of operations for the ‘sdist’ command is as follows:

   * if the manifest file (‘MANIFEST’ by default) exists and the first
     line does not have a comment indicating it is generated from
     ‘MANIFEST.in’, then it is used as is, unaltered

   * if the manifest file doesn’t exist or has been previously
     automatically generated, read ‘MANIFEST.in’ and create the manifest

   * if neither ‘MANIFEST’ nor ‘MANIFEST.in’ exist, create a manifest
     with just the default file set

   * use the list of files now in ‘MANIFEST’ (either just generated or
     read in) to create the source distribution archive(s)

There are a couple of options that modify this behaviour.  First, use
the ‘--no-defaults’ and ‘--no-prune’ to disable the standard "include"
and "exclude" sets.

Second, you might just want to (re)generate the manifest, but not create
a source distribution:

     python setup.py sdist --manifest-only

‘-o’ is a shortcut for ‘--manifest-only’.


File: python.info,  Node: Creating Built Distributions,  Next: The Python Package Index PyPI,  Prev: Creating a Source Distribution,  Up: Distributing Python Modules Legacy version

17.5 Creating Built Distributions
=================================

A "built distribution" is what you’re probably used to thinking of
either as a "binary package" or an "installer" (depending on your
background).  It’s not necessarily binary, though, because it might
contain only Python source code and/or byte-code; and we don’t call it a
package, because that word is already spoken for in Python.  (And
"installer" is a term specific to the world of mainstream desktop
systems.)

A built distribution is how you make life as easy as possible for
installers of your module distribution: for users of RPM-based Linux
systems, it’s a binary RPM; for Windows users, it’s an executable
installer; for Debian-based Linux users, it’s a Debian package; and so
forth.  Obviously, no one person will be able to create built
distributions for every platform under the sun, so the Distutils are
designed to enable module developers to concentrate on their
specialty—writing code and creating source distributions—while an
intermediary species called `packagers' springs up to turn source
distributions into built distributions for as many platforms as there
are packagers.

Of course, the module developer could be his own packager; or the
packager could be a volunteer "out there" somewhere who has access to a
platform which the original developer does not; or it could be software
periodically grabbing new source distributions and turning them into
built distributions for as many platforms as the software has access to.
Regardless of who they are, a packager uses the setup script and the
‘bdist’ command family to generate built distributions.

As a simple example, if I run the following command in the Distutils
source tree:

     python setup.py bdist

then the Distutils builds my module distribution (the Distutils itself
in this case), does a "fake" installation (also in the ‘build’
directory), and creates the default type of built distribution for my
platform.  The default format for built distributions is a "dumb" tar
file on Unix, and a simple executable installer on Windows.  (That tar
file is considered "dumb" because it has to be unpacked in a specific
location to work.)

Thus, the above command on a Unix system creates
‘Distutils-1.0.`plat'.tar.gz’; unpacking this tarball from the right
place installs the Distutils just as though you had downloaded the
source distribution and run ‘python setup.py install’.  (The "right
place" is either the root of the filesystem or Python’s ‘`prefix'’
directory, depending on the options given to the ‘bdist_dumb’ command;
the default is to make dumb distributions relative to ‘`prefix'’.)

Obviously, for pure Python distributions, this isn’t any simpler than
just running ‘python setup.py install’—but for non-pure distributions,
which include extensions that would need to be compiled, it can mean the
difference between someone being able to use your extensions or not.
And creating "smart" built distributions, such as an RPM package or an
executable installer for Windows, is far more convenient for users even
if your distribution doesn’t include any extensions.

The ‘bdist’ command has a ‘--formats’ option, similar to the ‘sdist’
command, which you can use to select the types of built distribution to
generate: for example,

     python setup.py bdist --format=zip

would, when run on a Unix system, create
‘Distutils-1.0.`plat'.zip’—again, this archive would be unpacked from
the root directory to install the Distutils.

The available formats for built distributions are:

Format            Description                        Notes
                                                     
-------------------------------------------------------------------
                                                     
‘gztar’           gzipped tar file (‘.tar.gz’)       (1)
                                                     
                                                     
‘bztar’           bzipped tar file (‘.tar.bz2’)
                  
                                                     
‘xztar’           xzipped tar file (‘.tar.xz’)
                  
                                                     
‘ztar’            compressed tar file (‘.tar.Z’)     (3)
                                                     
                                                     
‘tar’             tar file (‘.tar’)
                  
                                                     
‘zip’             zip file (‘.zip’)                  (2),(4)
                                                     
                                                     
‘rpm’             RPM                                (5)
                                                     
                                                     
‘pkgtool’         Solaris ‘pkgtool’
                  
                                                     
‘sdux’            HP-UX ‘swinstall’
                  
                                                     
‘wininst’         self-extracting ZIP file for       (4)
                  Windows                            
                  
                                                     
‘msi’             Microsoft Installer.
                  

Changed in version 3.5: Added support for the ‘xztar’ format.

Notes:

  1. default on Unix

  2. default on Windows

  3. requires external ‘compress’ utility.

  4. requires either external ‘zip’ utility or *note zipfile: 13f.
     module (part of the standard Python library since Python 1.6)

  5. requires external ‘rpm’ utility, version 3.0.4 or better (use ‘rpm
     --version’ to find out which version you have)

You don’t have to use the ‘bdist’ command with the ‘--formats’ option;
you can also use the command that directly implements the format you’re
interested in.  Some of these ‘bdist’ "sub-commands" actually generate
several similar formats; for instance, the ‘bdist_dumb’ command
generates all the "dumb" archive formats (‘tar’, ‘gztar’, ‘bztar’,
‘xztar’, ‘ztar’, and ‘zip’), and ‘bdist_rpm’ generates both binary and
source RPMs.  The ‘bdist’ sub-commands, and the formats generated by
each, are:

Command                        Formats
                               
-------------------------------------------------------------------------
                               
‘bdist_dumb’                   tar, gztar, bztar, xztar, ztar, zip
                               
                               
‘bdist_rpm’                    rpm, srpm
                               
                               
‘bdist_wininst’                wininst
                               
                               
‘bdist_msi’                    msi
                               

The following sections give details on the individual ‘bdist_*’
commands.

* Menu:

* Creating RPM packages:: 
* Creating Windows Installers:: 
* Cross-compiling on Windows:: 
* Vista User Access Control (UAC): Vista User Access Control UAC. 


File: python.info,  Node: Creating RPM packages,  Next: Creating Windows Installers,  Up: Creating Built Distributions

17.5.1 Creating RPM packages
----------------------------

The RPM format is used by many popular Linux distributions, including
Red Hat, SuSE, and Mandrake.  If one of these (or any of the other
RPM-based Linux distributions) is your usual environment, creating RPM
packages for other users of that same distribution is trivial.
Depending on the complexity of your module distribution and differences
between Linux distributions, you may also be able to create RPMs that
work on different RPM-based distributions.

The usual way to create an RPM of your module distribution is to run the
‘bdist_rpm’ command:

     python setup.py bdist_rpm

or the ‘bdist’ command with the ‘--format’ option:

     python setup.py bdist --formats=rpm

The former allows you to specify RPM-specific options; the latter allows
you to easily specify multiple formats in one run.  If you need to do
both, you can explicitly specify multiple ‘bdist_*’ commands and their
options:

     python setup.py bdist_rpm --packager="John Doe <jdoe@example.org>" \
                     bdist_wininst --target-version="2.0"

Creating RPM packages is driven by a ‘.spec’ file, much as using the
Distutils is driven by the setup script.  To make your life easier, the
‘bdist_rpm’ command normally creates a ‘.spec’ file based on the
information you supply in the setup script, on the command line, and in
any Distutils configuration files.  Various options and sections in the
‘.spec’ file are derived from options in the setup script as follows:

RPM ‘.spec’ file option or section             Distutils setup script option
                                               
--------------------------------------------------------------------------------------------------
                                               
Name                                           ‘name’
                                               
                                               
Summary (in preamble)                          ‘description’
                                               
                                               
Version                                        ‘version’
                                               
                                               
Vendor                                         ‘author’ and ‘author_email’, or — & ‘maintainer’
                                               and ‘maintainer_email’
                                               
                                               
Copyright                                      ‘license’
                                               
                                               
Url                                            ‘url’
                                               
                                               
%description (section)                         ‘long_description’
                                               

Additionally, there are many options in ‘.spec’ files that don’t have
corresponding options in the setup script.  Most of these are handled
through options to the ‘bdist_rpm’ command as follows:

RPM ‘.spec’ file option or          ‘bdist_rpm’ option                default value
section                                                               

----------------------------------------------------------------------------------------------------
                                                                      
Release                             ‘release’                         "1"
                                                                      
                                                                      
Group                               ‘group’                           "Development/Libraries"
                                                                      
                                                                      
Vendor                              ‘vendor’                          (see above)
                                                                      
                                                                      
Packager                            ‘packager’                        (none)
                                                                      
                                                                      
Provides                            ‘provides’                        (none)
                                                                      
                                                                      
Requires                            ‘requires’                        (none)
                                                                      
                                                                      
Conflicts                           ‘conflicts’                       (none)
                                                                      
                                                                      
Obsoletes                           ‘obsoletes’                       (none)
                                                                      
                                                                      
Distribution                        ‘distribution_name’               (none)
                                                                      
                                                                      
BuildRequires                       ‘build_requires’                  (none)
                                                                      
                                                                      
Icon                                ‘icon’                            (none)
                                                                      

Obviously, supplying even a few of these options on the command-line
would be tedious and error-prone, so it’s usually best to put them in
the setup configuration file, ‘setup.cfg’—see section *note Writing the
Setup Configuration File: 3aa9.  If you distribute or package many
Python module distributions, you might want to put options that apply to
all of them in your personal Distutils configuration file
(‘~/.pydistutils.cfg’).  If you want to temporarily disable this file,
you can pass the ‘--no-user-cfg’ option to ‘setup.py’.

There are three steps to building a binary RPM package, all of which are
handled automatically by the Distutils:

  1. create a ‘.spec’ file, which describes the package (analogous to
     the Distutils setup script; in fact, much of the information in the
     setup script winds up in the ‘.spec’ file)

  2. create the source RPM

  3. create the "binary" RPM (which may or may not contain binary code,
     depending on whether your module distribution contains Python
     extensions)

Normally, RPM bundles the last two steps together; when you use the
Distutils, all three steps are typically bundled together.

If you wish, you can separate these three steps.  You can use the
‘--spec-only’ option to make ‘bdist_rpm’ just create the ‘.spec’ file
and exit; in this case, the ‘.spec’ file will be written to the
"distribution directory"—normally ‘dist/’, but customizable with the
‘--dist-dir’ option.  (Normally, the ‘.spec’ file winds up deep in the
"build tree," in a temporary directory created by ‘bdist_rpm’.)


File: python.info,  Node: Creating Windows Installers,  Next: Cross-compiling on Windows,  Prev: Creating RPM packages,  Up: Creating Built Distributions

17.5.2 Creating Windows Installers
----------------------------------

Executable installers are the natural format for binary distributions on
Windows.  They display a nice graphical user interface, display some
information about the module distribution to be installed taken from the
metadata in the setup script, let the user select a few options, and
start or cancel the installation.

Since the metadata is taken from the setup script, creating Windows
installers is usually as easy as running:

     python setup.py bdist_wininst

or the ‘bdist’ command with the ‘--formats’ option:

     python setup.py bdist --formats=wininst

If you have a pure module distribution (only containing pure Python
modules and packages), the resulting installer will be version
independent and have a name like ‘foo-1.0.win32.exe’.  These installers
can even be created on Unix platforms or Mac OS X.

If you have a non-pure distribution, the extensions can only be created
on a Windows platform, and will be Python version dependent.  The
installer filename will reflect this and now has the form
‘foo-1.0.win32-py2.0.exe’.  You have to create a separate installer for
every Python version you want to support.

The installer will try to compile pure modules into *note bytecode: d06.
after installation on the target system in normal and optimizing mode.
If you don’t want this to happen for some reason, you can run the
‘bdist_wininst’ command with the ‘--no-target-compile’ and/or the
‘--no-target-optimize’ option.

By default the installer will display the cool "Python Powered" logo
when it is run, but you can also supply your own 152x261 bitmap which
must be a Windows ‘.bmp’ file with the ‘--bitmap’ option.

The installer will also display a large title on the desktop background
window when it is run, which is constructed from the name of your
distribution and the version number.  This can be changed to another
text by using the ‘--title’ option.

The installer file will be written to the "distribution directory" —
normally ‘dist/’, but customizable with the ‘--dist-dir’ option.


File: python.info,  Node: Cross-compiling on Windows,  Next: Vista User Access Control UAC,  Prev: Creating Windows Installers,  Up: Creating Built Distributions

17.5.3 Cross-compiling on Windows
---------------------------------

Starting with Python 2.6, distutils is capable of cross-compiling
between Windows platforms.  In practice, this means that with the
correct tools installed, you can use a 32bit version of Windows to
create 64bit extensions and vice-versa.

To build for an alternate platform, specify the ‘--plat-name’ option to
the build command.  Valid values are currently ’win32’, ’win-amd64’ and
’win-ia64’.  For example, on a 32bit version of Windows, you could
execute:

     python setup.py build --plat-name=win-amd64

to build a 64bit version of your extension.  The Windows Installers also
support this option, so the command:

     python setup.py build --plat-name=win-amd64 bdist_wininst

would create a 64bit installation executable on your 32bit version of
Windows.

To cross-compile, you must download the Python source code and
cross-compile Python itself for the platform you are targeting - it is
not possible from a binary installation of Python (as the .lib etc file
for other platforms are not included.)  In practice, this means the user
of a 32 bit operating system will need to use Visual Studio 2008 to open
the ‘PCBuild/PCbuild.sln’ solution in the Python source tree and build
the "x64" configuration of the ’pythoncore’ project before
cross-compiling extensions is possible.

Note that by default, Visual Studio 2008 does not install 64bit
compilers or tools.  You may need to reexecute the Visual Studio setup
process and select these tools (using Control Panel->[Add/Remove]
Programs is a convenient way to check or modify your existing install.)

* Menu:

* The Postinstallation script:: 


File: python.info,  Node: The Postinstallation script,  Up: Cross-compiling on Windows

17.5.3.1 The Postinstallation script
....................................

Starting with Python 2.3, a postinstallation script can be specified
with the ‘--install-script’ option.  The basename of the script must be
specified, and the script filename must also be listed in the scripts
argument to the setup function.

This script will be run at installation time on the target system after
all the files have been copied, with ‘argv[1]’ set to ‘-install’, and
again at uninstallation time before the files are removed with ‘argv[1]’
set to ‘-remove’.

The installation script runs embedded in the windows installer, every
output (‘sys.stdout’, ‘sys.stderr’) is redirected into a buffer and will
be displayed in the GUI after the script has finished.

Some functions especially useful in this context are available as
additional built-in functions in the installation script.

 -- Function: directory_created (path)
 -- Function: file_created (path)

     These functions should be called when a directory or file is
     created by the postinstall script at installation time.  It will
     register `path' with the uninstaller, so that it will be removed
     when the distribution is uninstalled.  To be safe, directories are
     only removed if they are empty.

 -- Function: get_special_folder_path (csidl_string)

     This function can be used to retrieve special folder locations on
     Windows like the Start Menu or the Desktop.  It returns the full
     path to the folder.  `csidl_string' must be one of the following
     strings:

          "CSIDL_APPDATA"

          "CSIDL_COMMON_STARTMENU"
          "CSIDL_STARTMENU"

          "CSIDL_COMMON_DESKTOPDIRECTORY"
          "CSIDL_DESKTOPDIRECTORY"

          "CSIDL_COMMON_STARTUP"
          "CSIDL_STARTUP"

          "CSIDL_COMMON_PROGRAMS"
          "CSIDL_PROGRAMS"

          "CSIDL_FONTS"

     If the folder cannot be retrieved, *note OSError: 4b6. is raised.

     Which folders are available depends on the exact Windows version,
     and probably also the configuration.  For details refer to
     Microsoft’s documentation of the ‘SHGetSpecialFolderPath()’
     function.

 -- Function: create_shortcut (target, description, filename[,
          arguments[, workdir[, iconpath[, iconindex]]]])

     This function creates a shortcut.  `target' is the path to the
     program to be started by the shortcut.  `description' is the
     description of the shortcut.  `filename' is the title of the
     shortcut that the user will see.  `arguments' specifies the command
     line arguments, if any.  `workdir' is the working directory for the
     program.  `iconpath' is the file containing the icon for the
     shortcut, and `iconindex' is the index of the icon in the file
     `iconpath'.  Again, for details consult the Microsoft documentation
     for the ‘IShellLink’ interface.


File: python.info,  Node: Vista User Access Control UAC,  Prev: Cross-compiling on Windows,  Up: Creating Built Distributions

17.5.4 Vista User Access Control (UAC)
--------------------------------------

Starting with Python 2.6, bdist_wininst supports a
‘--user-access-control’ option.  The default is ’none’ (meaning no UAC
handling is done), and other valid values are ’auto’ (meaning prompt for
UAC elevation if Python was installed for all users) and ’force’
(meaning always prompt for elevation).


File: python.info,  Node: The Python Package Index PyPI,  Next: Examples<29>,  Prev: Creating Built Distributions,  Up: Distributing Python Modules Legacy version

17.6 The Python Package Index (PyPI)
====================================

The Python Package Index (PyPI)(1) stores *note meta-data: 3a90.
describing distributions packaged with distutils, as well as package
data like distribution files if a package author wishes.

Distutils provides the ‘register’ and ‘upload’ commands for pushing
meta-data and distribution files to PyPI, respectively.  See *note
Distutils commands: 3ac8. for information on these commands.

* Menu:

* PyPI overview:: 
* Distutils commands:: 
* PyPI package display:: 

   ---------- Footnotes ----------

   (1) https://pypi.python.org/pypi


File: python.info,  Node: PyPI overview,  Next: Distutils commands,  Up: The Python Package Index PyPI

17.6.1 PyPI overview
--------------------

PyPI lets you submit any number of versions of your distribution to the
index.  If you alter the meta-data for a particular version, you can
submit it again and the index will be updated.

PyPI holds a record for each (name, version) combination submitted.  The
first user to submit information for a given name is designated the
Owner of that name.  Changes can be submitted through the ‘register’
command or through the web interface.  Owners can designate other users
as Owners or Maintainers.  Maintainers can edit the package information,
but not designate new Owners or Maintainers.

By default PyPI displays only the newest version of a given package.
The web interface lets one change this default behavior and manually
select which versions to display and hide.

For each version, PyPI displays a home page.  The home page is created
from the ‘long_description’ which can be submitted via the ‘register’
command.  See *note PyPI package display: 3aa6. for more information.


File: python.info,  Node: Distutils commands,  Next: PyPI package display,  Prev: PyPI overview,  Up: The Python Package Index PyPI

17.6.2 Distutils commands
-------------------------

Distutils exposes two commands for submitting package data to PyPI: the
*note register: 3aa5. command for submitting meta-data to PyPI and the
*note upload: 3acb. command for submitting distribution files.  Both
commands read configuration data from a special file called a *note
.pypirc file: 3acc.

* Menu:

* The register command:: 
* The upload command:: 
* Additional command options:: 
* The .pypirc file: The pypirc file. 


File: python.info,  Node: The register command,  Next: The upload command,  Up: Distutils commands

17.6.2.1 The ‘register’ command
...............................

The distutils command ‘register’ is used to submit your distribution’s
meta-data to an index server.  It is invoked as follows:

     python setup.py register

Distutils will respond with the following prompt:

     running register
     We need to know who you are, so please choose either:
         1. use your existing login,
         2. register as a new user,
         3. have the server generate a new password for you (and email it to you), or
         4. quit
     Your selection [default 1]:

Note: if your username and password are saved locally, you will not see
this menu.  Also, refer to *note The .pypirc file: 3acc. for how to
store your credentials in a ‘.pypirc’ file.

If you have not registered with PyPI, then you will need to do so now.
You should choose option 2, and enter your details as required.  Soon
after submitting your details, you will receive an email which will be
used to confirm your registration.

Once you are registered, you may choose option 1 from the menu.  You
will be prompted for your PyPI username and password, and ‘register’
will then submit your meta-data to the index.

See *note Additional command options: 3ace. for options to the
‘register’ command.


File: python.info,  Node: The upload command,  Next: Additional command options,  Prev: The register command,  Up: Distutils commands

17.6.2.2 The ‘upload’ command
.............................

The distutils command ‘upload’ pushes the distribution files to PyPI.

The command is invoked immediately after building one or more
distribution files.  For example, the command

     python setup.py sdist bdist_wininst upload

will cause the source distribution and the Windows installer to be
uploaded to PyPI. Note that these will be uploaded even if they are
built using an earlier invocation of ‘setup.py’, but that only
distributions named on the command line for the invocation including the
‘upload’ command are uploaded.

If a ‘register’ command was previously called in the same command, and
if the password was entered in the prompt, ‘upload’ will reuse the
entered password.  This is useful if you do not want to store a password
in clear text in a ‘.pypirc’ file.

You can use the ‘--sign’ option to tell ‘upload’ to sign each uploaded
file using GPG (GNU Privacy Guard).  The ‘gpg’ program must be available
for execution on the system ‘PATH’.  You can also specify which key to
use for signing using the ‘--identity=name’ option.

See *note Additional command options: 3ace. for additional options to
the ‘upload’ command.


File: python.info,  Node: Additional command options,  Next: The pypirc file,  Prev: The upload command,  Up: Distutils commands

17.6.2.3 Additional command options
...................................

This section describes options common to both the ‘register’ and
‘upload’ commands.

The ‘--repository’ or ‘-r’ option lets you specify a PyPI server
different from the default.  For example:

     python setup.py sdist bdist_wininst upload -r https://example.com/pypi

For convenience, a name can be used in place of the URL when the
‘.pypirc’ file is configured to do so.  For example:

     python setup.py register -r other

See *note The .pypirc file: 3acc. for more information on defining
alternate servers.

The ‘--show-response’ option displays the full response text from the
PyPI server, which is useful when debugging problems with registering
and uploading.


File: python.info,  Node: The pypirc file,  Prev: Additional command options,  Up: Distutils commands

17.6.2.4 The ‘.pypirc’ file
...........................

The ‘register’ and ‘upload’ commands both check for the existence of a
‘.pypirc’ file at the location ‘$HOME/.pypirc’.  If this file exists,
the command uses the username, password, and repository URL configured
in the file.  The format of a ‘.pypirc’ file is as follows:

     [distutils]
     index-servers =
         pypi

     [pypi]
     repository: <repository-url>
     username: <username>
     password: <password>

The `distutils' section defines an `index-servers' variable that lists
the name of all sections describing a repository.

Each section describing a repository defines three variables:

   - 
     `repository', that defines the url of the PyPI server. Defaults to

          ‘https://www.python.org/pypi’.

   - `username', which is the registered username on the PyPI server.

   - 
     `password', that will be used to authenticate. If omitted the user

          will be prompt to type it when needed.

If you want to define another server a new section can be created and
listed in the `index-servers' variable:

     [distutils]
     index-servers =
         pypi
         other

     [pypi]
     repository: <repository-url>
     username: <username>
     password: <password>

     [other]
     repository: https://example.com/pypi
     username: <username>
     password: <password>

This allows the ‘register’ and ‘upload’ commands to be called with the
‘--repository’ option as described in *note Additional command options:
3ace.

Specifically, you might want to add the PyPI Test Repository(1) to your
‘.pypirc’ to facilitate testing before doing your first upload to ‘PyPI’
itself.

   ---------- Footnotes ----------

   (1) https://wiki.python.org/moin/TestPyPI


File: python.info,  Node: PyPI package display,  Prev: Distutils commands,  Up: The Python Package Index PyPI

17.6.3 PyPI package display
---------------------------

The ‘long_description’ field plays a special role at PyPI. It is used by
the server to display a home page for the registered package.

If you use the reStructuredText(1) syntax for this field, PyPI will
parse it and display an HTML output for the package home page.

The ‘long_description’ field can be attached to a text file located in
the package:

     from distutils.core import setup

     with open('README.txt') as file:
         long_description = file.read()

     setup(name='Distutils',
           long_description=long_description)

In that case, ‘README.txt’ is a regular reStructuredText text file
located in the root of the package besides ‘setup.py’.

To prevent registering broken reStructuredText content, you can use the
‘rst2html’ program that is provided by the ‘docutils’ package and check
the ‘long_description’ from the command line:

     $ python setup.py --long-description | rst2html.py > output.html

‘docutils’ will display a warning if there’s something wrong with your
syntax.  Because PyPI applies additional checks (e.g.  by passing
‘--no-raw’ to ‘rst2html.py’ in the command above), being able to run the
command above without warnings does not guarantee that PyPI will convert
the content successfully.

   ---------- Footnotes ----------

   (1) http://docutils.sourceforge.net/rst.html


File: python.info,  Node: Examples<29>,  Next: Extending Distutils,  Prev: The Python Package Index PyPI,  Up: Distributing Python Modules Legacy version

17.7 Examples
=============

This chapter provides a number of basic examples to help get started
with distutils.  Additional information about using distutils can be
found in the Distutils Cookbook.

See also
........

Distutils Cookbook(1)

     Collection of recipes showing how to achieve more control over
     distutils.

* Menu:

* Pure Python distribution (by module): Pure Python distribution by module. 
* Pure Python distribution (by package): Pure Python distribution by package. 
* Single extension module:: 
* Checking a package:: 
* Reading the metadata:: 

   ---------- Footnotes ----------

   (1) https://wiki.python.org/moin/Distutils/Cookbook


File: python.info,  Node: Pure Python distribution by module,  Next: Pure Python distribution by package,  Up: Examples<29>

17.7.1 Pure Python distribution (by module)
-------------------------------------------

If you’re just distributing a couple of modules, especially if they
don’t live in a particular package, you can specify them individually
using the ‘py_modules’ option in the setup script.

In the simplest case, you’ll have two files to worry about: a setup
script and the single module you’re distributing, ‘foo.py’ in this
example:

     <root>/
             setup.py
             foo.py

(In all diagrams in this section, `<root>' will refer to the
distribution root directory.)  A minimal setup script to describe this
situation would be:

     from distutils.core import setup
     setup(name='foo',
           version='1.0',
           py_modules=['foo'],
           )

Note that the name of the distribution is specified independently with
the ‘name’ option, and there’s no rule that says it has to be the same
as the name of the sole module in the distribution (although that’s
probably a good convention to follow).  However, the distribution name
is used to generate filenames, so you should stick to letters, digits,
underscores, and hyphens.

Since ‘py_modules’ is a list, you can of course specify multiple
modules, eg.  if you’re distributing modules ‘foo’ and ‘bar’, your setup
might look like this:

     <root>/
             setup.py
             foo.py
             bar.py

and the setup script might be

     from distutils.core import setup
     setup(name='foobar',
           version='1.0',
           py_modules=['foo', 'bar'],
           )

You can put module source files into another directory, but if you have
enough modules to do that, it’s probably easier to specify modules by
package rather than listing them individually.


File: python.info,  Node: Pure Python distribution by package,  Next: Single extension module,  Prev: Pure Python distribution by module,  Up: Examples<29>

17.7.2 Pure Python distribution (by package)
--------------------------------------------

If you have more than a couple of modules to distribute, especially if
they are in multiple packages, it’s probably easier to specify whole
packages rather than individual modules.  This works even if your
modules are not in a package; you can just tell the Distutils to process
modules from the root package, and that works the same as any other
package (except that you don’t have to have an ‘__init__.py’ file).

The setup script from the last example could also be written as

     from distutils.core import setup
     setup(name='foobar',
           version='1.0',
           packages=[''],
           )

(The empty string stands for the root package.)

If those two files are moved into a subdirectory, but remain in the root
package, e.g.:

     <root>/
             setup.py
             src/      foo.py
                       bar.py

then you would still specify the root package, but you have to tell the
Distutils where source files in the root package live:

     from distutils.core import setup
     setup(name='foobar',
           version='1.0',
           package_dir={'': 'src'},
           packages=[''],
           )

More typically, though, you will want to distribute multiple modules in
the same package (or in sub-packages).  For example, if the ‘foo’ and
‘bar’ modules belong in package ‘foobar’, one way to layout your source
tree is

     <root>/
             setup.py
             foobar/
                      __init__.py
                      foo.py
                      bar.py

This is in fact the default layout expected by the Distutils, and the
one that requires the least work to describe in your setup script:

     from distutils.core import setup
     setup(name='foobar',
           version='1.0',
           packages=['foobar'],
           )

If you want to put modules in directories not named for their package,
then you need to use the ‘package_dir’ option again.  For example, if
the ‘src’ directory holds modules in the ‘foobar’ package:

     <root>/
             setup.py
             src/
                      __init__.py
                      foo.py
                      bar.py

an appropriate setup script would be

     from distutils.core import setup
     setup(name='foobar',
           version='1.0',
           package_dir={'foobar': 'src'},
           packages=['foobar'],
           )

Or, you might put modules from your main package right in the
distribution root:

     <root>/
             setup.py
             __init__.py
             foo.py
             bar.py

in which case your setup script would be

     from distutils.core import setup
     setup(name='foobar',
           version='1.0',
           package_dir={'foobar': ''},
           packages=['foobar'],
           )

(The empty string also stands for the current directory.)

If you have sub-packages, they must be explicitly listed in ‘packages’,
but any entries in ‘package_dir’ automatically extend to sub-packages.
(In other words, the Distutils does `not' scan your source tree, trying
to figure out which directories correspond to Python packages by looking
for ‘__init__.py’ files.)  Thus, if the default layout grows a
sub-package:

     <root>/
             setup.py
             foobar/
                      __init__.py
                      foo.py
                      bar.py
                      subfoo/
                                __init__.py
                                blah.py

then the corresponding setup script would be

     from distutils.core import setup
     setup(name='foobar',
           version='1.0',
           packages=['foobar', 'foobar.subfoo'],
           )


File: python.info,  Node: Single extension module,  Next: Checking a package,  Prev: Pure Python distribution by package,  Up: Examples<29>

17.7.3 Single extension module
------------------------------

Extension modules are specified using the ‘ext_modules’ option.
‘package_dir’ has no effect on where extension source files are found;
it only affects the source for pure Python modules.  The simplest case,
a single extension module in a single C source file, is:

     <root>/
             setup.py
             foo.c

If the ‘foo’ extension belongs in the root package, the setup script for
this could be

     from distutils.core import setup
     from distutils.extension import Extension
     setup(name='foobar',
           version='1.0',
           ext_modules=[Extension('foo', ['foo.c'])],
           )

If the extension actually belongs in a package, say ‘foopkg’, then

With exactly the same source tree layout, this extension can be put in
the ‘foopkg’ package simply by changing the name of the extension:

     from distutils.core import setup
     from distutils.extension import Extension
     setup(name='foobar',
           version='1.0',
           ext_modules=[Extension('foopkg.foo', ['foo.c'])],
           )


File: python.info,  Node: Checking a package,  Next: Reading the metadata,  Prev: Single extension module,  Up: Examples<29>

17.7.4 Checking a package
-------------------------

The ‘check’ command allows you to verify if your package meta-data meet
the minimum requirements to build a distribution.

To run it, just call it using your ‘setup.py’ script.  If something is
missing, ‘check’ will display a warning.

Let’s take an example with a simple script:

     from distutils.core import setup

     setup(name='foobar')

Running the ‘check’ command will display some warnings:

     $ python setup.py check
     running check
     warning: check: missing required meta-data: version, url
     warning: check: missing meta-data: either (author and author_email) or
              (maintainer and maintainer_email) must be supplied

If you use the reStructuredText syntax in the ‘long_description’ field
and docutils(1) is installed you can check if the syntax is fine with
the ‘check’ command, using the ‘restructuredtext’ option.

For example, if the ‘setup.py’ script is changed like this:

     from distutils.core import setup

     desc = """\
     My description
     ==============

     This is the description of the ``foobar`` package.
     """

     setup(name='foobar', version='1', author='tarek',
         author_email='tarek@ziade.org',
         url='http://example.com', long_description=desc)

Where the long description is broken, ‘check’ will be able to detect it
by using the ‘docutils’ parser:

     $ python setup.py check --restructuredtext
     running check
     warning: check: Title underline too short. (line 2)
     warning: check: Could not finish the parsing.

   ---------- Footnotes ----------

   (1) http://docutils.sourceforge.net


File: python.info,  Node: Reading the metadata,  Prev: Checking a package,  Up: Examples<29>

17.7.5 Reading the metadata
---------------------------

The *note distutils.core.setup(): 3372. function provides a command-line
interface that allows you to query the metadata fields of a project
through the ‘setup.py’ script of a given project:

     $ python setup.py --name
     distribute

This call reads the ‘name’ metadata by running the *note
distutils.core.setup(): 3372. function.  Although, when a source or
binary distribution is created with Distutils, the metadata fields are
written in a static file called ‘PKG-INFO’.  When a Distutils-based
project is installed in Python, the ‘PKG-INFO’ file is copied alongside
the modules and packages of the distribution under
‘NAME-VERSION-pyX.X.egg-info’, where ‘NAME’ is the name of the project,
‘VERSION’ its version as defined in the Metadata, and ‘pyX.X’ the major
and minor version of Python like ‘2.7’ or ‘3.2’.

You can read back this static file, by using the
‘distutils.dist.DistributionMetadata’ class and its ‘read_pkg_file()’
method:

     >>> from distutils.dist import DistributionMetadata
     >>> metadata = DistributionMetadata()
     >>> metadata.read_pkg_file(open('distribute-0.6.8-py2.7.egg-info'))
     >>> metadata.name
     'distribute'
     >>> metadata.version
     '0.6.8'
     >>> metadata.description
     'Easily download, build, install, upgrade, and uninstall Python packages'

Notice that the class can also be instanciated with a metadata file path
to loads its values:

     >>> pkg_info_path = 'distribute-0.6.8-py2.7.egg-info'
     >>> DistributionMetadata(pkg_info_path).name
     'distribute'


File: python.info,  Node: Extending Distutils,  Next: Command Reference,  Prev: Examples<29>,  Up: Distributing Python Modules Legacy version

17.8 Extending Distutils
========================

Distutils can be extended in various ways.  Most extensions take the
form of new commands or replacements for existing commands.  New
commands may be written to support new types of platform-specific
packaging, for example, while replacements for existing commands may be
made to modify details of how the command operates on a package.

Most extensions of the distutils are made within ‘setup.py’ scripts that
want to modify existing commands; many simply add a few file extensions
that should be copied into packages in addition to ‘.py’ files as a
convenience.

Most distutils command implementations are subclasses of the *note
distutils.cmd.Command: 3ae2. class.  New commands may directly inherit
from ‘Command’, while replacements often derive from ‘Command’
indirectly, directly subclassing the command they are replacing.
Commands are required to derive from ‘Command’.

* Menu:

* Integrating new commands:: 
* Adding new distribution types:: 


File: python.info,  Node: Integrating new commands,  Next: Adding new distribution types,  Up: Extending Distutils

17.8.1 Integrating new commands
-------------------------------

There are different ways to integrate new command implementations into
distutils.  The most difficult is to lobby for the inclusion of the new
features in distutils itself, and wait for (and require) a version of
Python that provides that support.  This is really hard for many
reasons.

The most common, and possibly the most reasonable for most needs, is to
include the new implementations with your ‘setup.py’ script, and cause
the *note distutils.core.setup(): 3372. function use them:

     from distutils.command.build_py import build_py as _build_py
     from distutils.core import setup

     class build_py(_build_py):
         """Specialized Python source builder."""

         # implement whatever needs to be different...

     setup(cmdclass={'build_py': build_py},
           ...)

This approach is most valuable if the new implementations must be used
to use a particular package, as everyone interested in the package will
need to have the new command implementation.

Beginning with Python 2.4, a third option is available, intended to
allow new commands to be added which can support existing ‘setup.py’
scripts without requiring modifications to the Python installation.
This is expected to allow third-party extensions to provide support for
additional packaging systems, but the commands can be used for anything
distutils commands can be used for.  A new configuration option,
‘command_packages’ (command-line option ‘--command-packages’), can be
used to specify additional packages to be searched for modules
implementing commands.  Like all distutils options, this can be
specified on the command line or in a configuration file.  This option
can only be set in the ‘[global]’ section of a configuration file, or
before any commands on the command line.  If set in a configuration
file, it can be overridden from the command line; setting it to an empty
string on the command line causes the default to be used.  This should
never be set in a configuration file provided with a package.

This new option can be used to add any number of packages to the list of
packages searched for command implementations; multiple package names
should be separated by commas.  When not specified, the search is only
performed in the *note distutils.command: 3c. package.  When ‘setup.py’
is run with the option ‘--command-packages distcmds,buildcmds’, however,
the packages *note distutils.command: 3c, ‘distcmds’, and ‘buildcmds’
will be searched in that order.  New commands are expected to be
implemented in modules of the same name as the command by classes
sharing the same name.  Given the example command line option above, the
command ‘bdist_openpkg’ could be implemented by the class
‘distcmds.bdist_openpkg.bdist_openpkg’ or
‘buildcmds.bdist_openpkg.bdist_openpkg’.


File: python.info,  Node: Adding new distribution types,  Prev: Integrating new commands,  Up: Extending Distutils

17.8.2 Adding new distribution types
------------------------------------

Commands that create distributions (files in the ‘dist/’ directory) need
to add ‘(command, filename)’ pairs to ‘self.distribution.dist_files’ so
that ‘upload’ can upload it to PyPI. The `filename' in the pair contains
no path information, only the name of the file itself.  In dry-run mode,
pairs should still be added to represent what would have been created.


File: python.info,  Node: Command Reference,  Next: API Reference,  Prev: Extending Distutils,  Up: Distributing Python Modules Legacy version

17.9 Command Reference
======================

* Menu:

* Installing modules; the install command family: Installing modules the install command family. 
* Creating a source distribution; the sdist command: Creating a source distribution the sdist command. 


File: python.info,  Node: Installing modules the install command family,  Next: Creating a source distribution the sdist command,  Up: Command Reference

17.9.1 Installing modules: the ‘install’ command family
-------------------------------------------------------

The install command ensures that the build commands have been run and
then runs the subcommands ‘install_lib’, ‘install_data’ and
‘install_scripts’.

* Menu:

* install_data:: 
* install_scripts:: 


File: python.info,  Node: install_data,  Next: install_scripts,  Up: Installing modules the install command family

17.9.1.1 ‘install_data’
.......................

This command installs all data files provided with the distribution.


File: python.info,  Node: install_scripts,  Prev: install_data,  Up: Installing modules the install command family

17.9.1.2 ‘install_scripts’
..........................

This command installs all (Python) scripts in the distribution.


File: python.info,  Node: Creating a source distribution the sdist command,  Prev: Installing modules the install command family,  Up: Command Reference

17.9.2 Creating a source distribution: the ‘sdist’ command
----------------------------------------------------------

The manifest template commands are:

Command                                         Description
                                                
----------------------------------------------------------------------------------------------------
                                                
‘include pat1 pat2 ...’                         include all files matching any of the listed
                                                patterns
                                                
                                                
‘exclude pat1 pat2 ...’                         exclude all files matching any of the listed
                                                patterns
                                                
                                                
‘recursive-include dir pat1 pat2 ...’           include all files under `dir' matching any of the
                                                listed patterns
                                                
                                                
‘recursive-exclude dir pat1 pat2 ...’           exclude all files under `dir' matching any of the
                                                listed patterns
                                                
                                                
‘global-include pat1 pat2 ...’                  include all files anywhere in the source tree
                                                matching — & any of the listed patterns
                                                
                                                
‘global-exclude pat1 pat2 ...’                  exclude all files anywhere in the source tree
                                                matching — & any of the listed patterns
                                                
                                                
‘prune dir’                                     exclude all files under `dir'
                                                
                                                
‘graft dir’                                     include all files under `dir'
                                                

The patterns here are Unix-style "glob" patterns: ‘*’ matches any
sequence of regular filename characters, ‘?’ matches any single regular
filename character, and ‘[range]’ matches any of the characters in
`range' (e.g., ‘a-z’, ‘a-zA-Z’, ‘a-f0-9_.’).  The definition of "regular
filename character" is platform-specific: on Unix it is anything except
slash; on Windows anything except backslash or colon.


File: python.info,  Node: API Reference,  Prev: Command Reference,  Up: Distributing Python Modules Legacy version

17.10 API Reference
===================

* Menu:

* distutils.core: distutils core --- Core Distutils functionality. Core Distutils functionality
* distutils.ccompiler: distutils ccompiler --- CCompiler base class. CCompiler base class
* distutils.unixccompiler: distutils unixccompiler --- Unix C Compiler. Unix C Compiler
* distutils.msvccompiler: distutils msvccompiler --- Microsoft Compiler. Microsoft Compiler
* distutils.bcppcompiler: distutils bcppcompiler --- Borland Compiler. Borland Compiler
* distutils.cygwincompiler: distutils cygwincompiler --- Cygwin Compiler. Cygwin Compiler
* distutils.archive_util: distutils archive_util --- Archiving utilities. Archiving utilities
* distutils.dep_util: distutils dep_util --- Dependency checking. Dependency checking
* distutils.dir_util: distutils dir_util --- Directory tree operations. Directory tree operations
* distutils.file_util: distutils file_util --- Single file operations. Single file operations
* distutils.util: distutils util --- Miscellaneous other utility functions. Miscellaneous other utility functions
* distutils.dist: distutils dist --- The Distribution class. The Distribution class
* distutils.extension: distutils extension --- The Extension class. The Extension class
* distutils.debug: distutils debug --- Distutils debug mode. Distutils debug mode
* distutils.errors: distutils errors --- Distutils exceptions. Distutils exceptions
* distutils.fancy_getopt: distutils fancy_getopt --- Wrapper around the standard getopt module. Wrapper around the standard getopt module
* distutils.filelist: distutils filelist --- The FileList class. The FileList class
* distutils.log: distutils log --- Simple PEP 282-style logging. Simple PEP 282-style logging
* distutils.spawn: distutils spawn --- Spawn a sub-process. Spawn a sub-process
* distutils.sysconfig: distutils sysconfig --- System configuration information. System configuration information
* distutils.text_file: distutils text_file --- The TextFile class. The TextFile class
* distutils.version: distutils version --- Version number classes. Version number classes
* distutils.cmd: distutils cmd --- Abstract base class for Distutils commands. Abstract base class for Distutils commands
* Creating a new Distutils command:: 
* distutils.command: distutils command --- Individual Distutils commands. Individual Distutils commands
* distutils.command.bdist: distutils command bdist --- Build a binary installer. Build a binary installer
* distutils.command.bdist_packager: distutils command bdist_packager --- Abstract base class for packagers. Abstract base class for packagers
* distutils.command.bdist_dumb: distutils command bdist_dumb --- Build a "dumb" installer. Build a "dumb" installer
* distutils.command.bdist_msi: distutils command bdist_msi --- Build a Microsoft Installer binary package. Build a Microsoft Installer binary package
* distutils.command.bdist_rpm: distutils command bdist_rpm --- Build a binary distribution as a Redhat RPM and SRPM. Build a binary distribution as a Redhat RPM and
                               SRPM
* distutils.command.bdist_wininst: distutils command bdist_wininst --- Build a Windows installer. Build a Windows installer
* distutils.command.sdist: distutils command sdist --- Build a source distribution. Build a source distribution
* distutils.command.build: distutils command build --- Build all files of a package. Build all files of a package
* distutils.command.build_clib: distutils command build_clib --- Build any C libraries in a package. Build any C libraries in a package
* distutils.command.build_ext: distutils command build_ext --- Build any extensions in a package. Build any extensions in a package
* distutils.command.build_py: distutils command build_py --- Build the py/ pyc files of a package. Build the .py/.pyc files of a package
* distutils.command.build_scripts: distutils command build_scripts --- Build the scripts of a package. Build the scripts of a package
* distutils.command.clean: distutils command clean --- Clean a package build area. Clean a package build area
* distutils.command.config: distutils command config --- Perform package configuration. Perform package configuration
* distutils.command.install: distutils command install --- Install a package. Install a package
* distutils.command.install_data: distutils command install_data --- Install data files from a package. Install data files from a package
* distutils.command.install_headers: distutils command install_headers --- Install C/C++ header files from a package. Install C/C++ header files from a package
* distutils.command.install_lib: distutils command install_lib --- Install library files from a package. Install library files from a package
* distutils.command.install_scripts: distutils command install_scripts --- Install script files from a package. Install script files from a package
* distutils.command.register: distutils command register --- Register a module with the Python Package Index. Register a module with the Python Package Index
* distutils.command.check: distutils command check --- Check the meta-data of a package. Check the meta-data of a package


File: python.info,  Node: distutils core --- Core Distutils functionality,  Next: distutils ccompiler --- CCompiler base class,  Up: API Reference

17.10.1 ‘distutils.core’ — Core Distutils functionality
-------------------------------------------------------

The *note distutils.core: 52. module is the only module that needs to be
installed to use the Distutils.  It provides the *note setup(): 3372.
(which is called from the setup script).  Indirectly provides the
‘distutils.dist.Distribution’ and *note distutils.cmd.Command: 3ae2.
class.

 -- Function: distutils.core.setup (arguments)

     The basic do-everything function that does most everything you
     could ever ask for from a Distutils method.

     The setup function takes a large number of arguments.  These are
     laid out in the following table.

     argument name            value                                type
                                                                   
     --------------------------------------------------------------------------------------------------------------------------------
                                                                   
     `name'                   The name of the package              a string
                                                                   
                                                                   
     `version'                The version number of the package;   a string
                              see *note distutils.version: 64.     
                              
                                                                   
     `description'            A single line describing the         a string
                              package                              
                              
                                                                   
     `long_description'       Longer description of the package    a string
                                                                   
                                                                   
     `author'                 The name of the package author       a string
                                                                   
                                                                   
     `author_email'           The email address of the package     a string
                              author                               
                              
                                                                   
     `maintainer'             The name of the current              a string
                              maintainer, if different from the    
                              author.  Note that if the
                              maintainer is provided, distutils
                              will use it as the author in
                              ‘PKG-INFO’
                              
                                                                   
     `maintainer_email'       The email address of the current     a string
                              maintainer, if different from the    
                              author
                              
                                                                   
     `url'                    A URL for the package (homepage)     a string
                                                                   
                                                                   
     `download_url'           A URL to download the package        a string
                                                                   
                                                                   
     `packages'               A list of Python packages that       a list of strings
                              distutils will manipulate            
                              
                                                                   
     `py_modules'             A list of Python modules that        a list of strings
                              distutils will manipulate            
                              
                                                                   
     `scripts'                A list of standalone script files    a list of strings
                              to be built and installed            
                              
                                                                   
     `ext_modules'            A list of Python extensions to be    a list of instances of *note distutils.core.Extension: 3a97.
                              built                                
                              
                                                                   
     `classifiers'            A list of categories for the         a list of strings; valid classifiers are listed on PyPI(1).
                              package                              
                              
                                                                   
     `distclass'              the *note Distribution: 3af3.        a subclass of *note distutils.core.Distribution: 3af3.
                              class to use                         
                              
                                                                   
     `script_name'            The name of the setup.py script -    a string
                              defaults to ‘sys.argv[0]’            
                              
                                                                   
     `script_args'            Arguments to supply to the setup     a list of strings
                              script                               
                              
                                                                   
     `options'                default options for the setup        a dictionary
                              script                               
                              
                                                                   
     `license'                The license for the package          a string
                                                                   
                                                                   
     `keywords'               Descriptive meta-data, see PEP       a list of strings or a comma-separated string
                              314(2)                               
                              
                                                                   
     `platforms'                                                   a list of strings or a comma-separated string
                                                                   
                                                                   
     `cmdclass'               A mapping of command names to        a dictionary
                              *note Command: 3af4. subclasses      
                              
                                                                   
     `data_files'             A list of data files to install      a list
                                                                   
                                                                   
     `package_dir'            A mapping of package to directory    a dictionary
                              names                                
                              

 -- Function: distutils.core.run_setup (script_name[, script_args=None,
          stop_after='run'])

     Run a setup script in a somewhat controlled environment, and return
     the ‘distutils.dist.Distribution’ instance that drives things.
     This is useful if you need to find out the distribution meta-data
     (passed as keyword args from `script' to *note setup(): 3372.), or
     the contents of the config files or command-line.

     `script_name' is a file that will be read and run with *note
     exec(): 8ac.  ‘sys.argv[0]’ will be replaced with `script' for the
     duration of the call.  `script_args' is a list of strings; if
     supplied, ‘sys.argv[1:]’ will be replaced by `script_args' for the
     duration of the call.

     `stop_after' tells *note setup(): 3372. when to stop processing;
     possible values:

     value               description
                         
     ----------------------------------------------------------------------
                         
     `init'              Stop after the *note Distribution: 3af3.
                         instance has been created and populated with
                         the keyword arguments to *note setup(): 3372.
                         
                         
     `config'            Stop after config files have been parsed (and
                         their data stored in the
                         *note Distribution: 3af3. instance)
                         
                         
     `commandline'       Stop after the command-line (‘sys.argv[1:]’ or
                         `script_args') have been parsed (and the data
                         stored in the *note Distribution: 3af3.
                         instance.)
                         
                         
     `run'               Stop after all commands have been run (the same
                         as if *note setup(): 3372. had been called in
                         the usual way).  This is the default value.
                         

In addition, the *note distutils.core: 52. module exposed a number of
classes that live elsewhere.

   * ‘Extension’ from *note distutils.extension: 59.

   * *note Command: 3ae2. from *note distutils.cmd: 3b.

   * ‘Distribution’ from *note distutils.dist: 57.

A short description of each of these follows, but see the relevant
module for the full reference.

 -- Class: distutils.core.Extension

     The Extension class describes a single C or C++extension module in
     a setup script.  It accepts the following keyword arguments in its
     constructor:

     argument name                value                                type
                                                                       
     --------------------------------------------------------------------------------------------------
                                                                       
     `name'                       the full name of the extension,      a string
                                  including any packages — ie.         
                                  `not' a filename or pathname, but
                                  Python dotted name
                                  
                                                                       
     `sources'                    list of source filenames, relative   a list of strings
                                  to the distribution root (where      
                                  the setup script lives), in Unix
                                  form (slash- separated) for
                                  portability.  Source files may be
                                  C, C++, SWIG (.i),
                                  platform-specific resource files,
                                  or whatever else is recognized by
                                  the ‘build_ext’ command as source
                                  for a Python extension.
                                  
                                                                       
     `include_dirs'               list of directories to search for    a list of strings
                                  C/C++ header files (in Unix form     
                                  for portability)
                                  
                                                                       
     `define_macros'              list of macros to define; each       a list of tuples
                                  macro is defined using a 2-tuple     
                                  ‘(name, value)’, where `value' is
                                  either the string to define it to
                                  or ‘None’ to define it without a
                                  particular value (equivalent of
                                  ‘#define FOO’ in source or ‘-DFOO’
                                  on Unix C compiler command line)
                                  
                                                                       
     `undef_macros'               list of macros to undefine           a list of strings
                                  explicitly                           
                                  
                                                                       
     `library_dirs'               list of directories to search for    a list of strings
                                  C/C++ libraries at link time         
                                  
                                                                       
     `libraries'                  list of library names (not           a list of strings
                                  filenames or paths) to link          
                                  against
                                  
                                                                       
     `runtime_library_dirs'       list of directories to search for    a list of strings
                                  C/C++ libraries at run time (for     
                                  shared extensions, this is when
                                  the extension is loaded)
                                  
                                                                       
     `extra_objects'              list of extra files to link with     a list of strings
                                  (eg.  object files not implied by    
                                  ’sources’, static library that
                                  must be explicitly specified,
                                  binary resource files, etc.)
                                  
                                                                       
     `extra_compile_args'         any extra platform- and              a list of strings
                                  compiler-specific information to     
                                  use when compiling the source
                                  files in ’sources’.  For platforms
                                  and compilers where a command line
                                  makes sense, this is typically a
                                  list of command-line arguments,
                                  but for other platforms it could
                                  be anything.
                                  
                                                                       
     `extra_link_args'            any extra platform- and              a list of strings
                                  compiler-specific information to     
                                  use when linking object files
                                  together to create the extension
                                  (or to create a new static Python
                                  interpreter).  Similar
                                  interpretation as for
                                  ’extra_compile_args’.
                                  
                                                                       
     `export_symbols'             list of symbols to be exported       a list of strings
                                  from a shared extension.  Not used   
                                  on all platforms, and not
                                  generally necessary for Python
                                  extensions, which typically export
                                  exactly one symbol: ‘init’ +
                                  extension_name.
                                  
                                                                       
     `depends'                    list of files that the extension     a list of strings
                                  depends on                           
                                  
                                                                       
     `language'                   extension language (i.e.  ‘'c'’,     a string
                                  ‘'c++'’, ‘'objc'’).  Will be         
                                  detected from the source
                                  extensions if not provided.
                                  
                                                                       
     `optional'                   specifies that a build failure in    a boolean
                                  the extension should not abort the   
                                  build process, but simply skip the
                                  extension.
                                  

 -- Class: distutils.core.Distribution

     A *note Distribution: 3af3. describes how to build, install and
     package up a Python software package.

     See the *note setup(): 3372. function for a list of keyword
     arguments accepted by the Distribution constructor.  *note setup():
     3372. creates a Distribution instance.

 -- Class: distutils.core.Command

     A *note Command: 3af4. class (or rather, an instance of one of its
     subclasses) implement a single distutils command.

   ---------- Footnotes ----------

   (1) https://pypi.python.org/pypi?:action=list_classifiers

   (2) https://www.python.org/dev/peps/pep-0314


File: python.info,  Node: distutils ccompiler --- CCompiler base class,  Next: distutils unixccompiler --- Unix C Compiler,  Prev: distutils core --- Core Distutils functionality,  Up: API Reference

17.10.2 ‘distutils.ccompiler’ — CCompiler base class
----------------------------------------------------

This module provides the abstract base class for the *note CCompiler:
3af7. classes.  A *note CCompiler: 3af7. instance can be used for all
the compile and link steps needed to build a single project.  Methods
are provided to set options for the compiler — macro definitions,
include directories, link path, libraries and the like.

This module provides the following functions.

 -- Function: distutils.ccompiler.gen_lib_options (compiler,
          library_dirs, runtime_library_dirs, libraries)

     Generate linker options for searching library directories and
     linking with specific libraries.  `libraries' and `library_dirs'
     are, respectively, lists of library names (not filenames!)  and
     search directories.  Returns a list of command-line options
     suitable for use with some compiler (depending on the two format
     strings passed in).

 -- Function: distutils.ccompiler.gen_preprocess_options (macros,
          include_dirs)

     Generate C pre-processor options (‘-D’, ‘-U’, ‘-I’) as used by at
     least two types of compilers: the typical Unix compiler and Visual
     C++.  `macros' is the usual thing, a list of 1- or 2-tuples, where
     ‘(name,)’ means undefine (‘-U’) macro `name', and ‘(name, value)’
     means define (‘-D’) macro `name' to `value'.  `include_dirs' is
     just a list of directory names to be added to the header file
     search path (‘-I’).  Returns a list of command-line options
     suitable for either Unix compilers or Visual C++.

 -- Function: distutils.ccompiler.get_default_compiler (osname,
          platform)

     Determine the default compiler to use for the given platform.

     `osname' should be one of the standard Python OS names (i.e.  the
     ones returned by ‘os.name’) and `platform' the common value
     returned by ‘sys.platform’ for the platform in question.

     The default values are ‘os.name’ and ‘sys.platform’ in case the
     parameters are not given.

 -- Function: distutils.ccompiler.new_compiler (plat=None,
          compiler=None, verbose=0, dry_run=0, force=0)

     Factory function to generate an instance of some CCompiler subclass
     for the supplied platform/compiler combination.  `plat' defaults to
     ‘os.name’ (eg.  ‘'posix'’, ‘'nt'’), and `compiler' defaults to the
     default compiler for that platform.  Currently only ‘'posix'’ and
     ‘'nt'’ are supported, and the default compilers are "traditional
     Unix interface" (‘UnixCCompiler’ class) and Visual C++
     (‘MSVCCompiler’ class).  Note that it’s perfectly possible to ask
     for a Unix compiler object under Windows, and a Microsoft compiler
     object under Unix—if you supply a value for `compiler', `plat' is
     ignored.

 -- Function: distutils.ccompiler.show_compilers ()

     Print list of available compilers (used by the ‘--help-compiler’
     options to ‘build’, ‘build_ext’, ‘build_clib’).

 -- Class: distutils.ccompiler.CCompiler ([verbose=0, dry_run=0,
          force=0])

     The abstract base class *note CCompiler: 3af7. defines the
     interface that must be implemented by real compiler classes.  The
     class also has some utility methods used by several compiler
     classes.

     The basic idea behind a compiler abstraction class is that each
     instance can be used for all the compile/link steps in building a
     single project.  Thus, attributes common to all of those compile
     and link steps — include directories, macros to define, libraries
     to link against, etc.  — are attributes of the compiler instance.
     To allow for variability in how individual files are treated, most
     of those attributes may be varied on a per-compilation or per-link
     basis.

     The constructor for each subclass creates an instance of the
     Compiler object.  Flags are `verbose' (show verbose output),
     `dry_run' (don’t actually execute the steps) and `force' (rebuild
     everything, regardless of dependencies).  All of these flags
     default to ‘0’ (off).  Note that you probably don’t want to
     instantiate *note CCompiler: 3af7. or one of its subclasses
     directly - use the ‘distutils.CCompiler.new_compiler()’ factory
     function instead.

     The following methods allow you to manually alter compiler options
     for the instance of the Compiler class.

      -- Method: add_include_dir (dir)

          Add `dir' to the list of directories that will be searched for
          header files.  The compiler is instructed to search
          directories in the order in which they are supplied by
          successive calls to *note add_include_dir(): 3afd.

      -- Method: set_include_dirs (dirs)

          Set the list of directories that will be searched to `dirs' (a
          list of strings).  Overrides any preceding calls to *note
          add_include_dir(): 3afd.; subsequent calls to *note
          add_include_dir(): 3afd. add to the list passed to *note
          set_include_dirs(): 3afe.  This does not affect any list of
          standard include directories that the compiler may search by
          default.

      -- Method: add_library (libname)

          Add `libname' to the list of libraries that will be included
          in all links driven by this compiler object.  Note that
          `libname' should *not* be the name of a file containing a
          library, but the name of the library itself: the actual
          filename will be inferred by the linker, the compiler, or the
          compiler class (depending on the platform).

          The linker will be instructed to link against libraries in the
          order they were supplied to *note add_library(): 3aff. and/or
          *note set_libraries(): 3b00.  It is perfectly valid to
          duplicate library names; the linker will be instructed to link
          against libraries as many times as they are mentioned.

      -- Method: set_libraries (libnames)

          Set the list of libraries to be included in all links driven
          by this compiler object to `libnames' (a list of strings).
          This does not affect any standard system libraries that the
          linker may include by default.

      -- Method: add_library_dir (dir)

          Add `dir' to the list of directories that will be searched for
          libraries specified to *note add_library(): 3aff. and *note
          set_libraries(): 3b00.  The linker will be instructed to
          search for libraries in the order they are supplied to *note
          add_library_dir(): 3b01. and/or *note set_library_dirs():
          3b02.

      -- Method: set_library_dirs (dirs)

          Set the list of library search directories to `dirs' (a list
          of strings).  This does not affect any standard library search
          path that the linker may search by default.

      -- Method: add_runtime_library_dir (dir)

          Add `dir' to the list of directories that will be searched for
          shared libraries at runtime.

      -- Method: set_runtime_library_dirs (dirs)

          Set the list of directories to search for shared libraries at
          runtime to `dirs' (a list of strings).  This does not affect
          any standard search path that the runtime linker may search by
          default.

      -- Method: define_macro (name[, value=None])

          Define a preprocessor macro for all compilations driven by
          this compiler object.  The optional parameter `value' should
          be a string; if it is not supplied, then the macro will be
          defined without an explicit value and the exact outcome
          depends on the compiler used.

      -- Method: undefine_macro (name)

          Undefine a preprocessor macro for all compilations driven by
          this compiler object.  If the same macro is defined by *note
          define_macro(): 3b05. and undefined by *note undefine_macro():
          3b06. the last call takes precedence (including multiple
          redefinitions or undefinitions).  If the macro is
          redefined/undefined on a per-compilation basis (ie.  in the
          call to *note compile(): 903.), then that takes precedence.

      -- Method: add_link_object (object)

          Add `object' to the list of object files (or analogues, such
          as explicitly named library files or the output of "resource
          compilers") to be included in every link driven by this
          compiler object.

      -- Method: set_link_objects (objects)

          Set the list of object files (or analogues) to be included in
          every link to `objects'.  This does not affect any standard
          object files that the linker may include by default (such as
          system libraries).

     The following methods implement methods for autodetection of
     compiler options, providing some functionality similar to GNU
     ‘autoconf’.

      -- Method: detect_language (sources)

          Detect the language of a given file, or list of files.  Uses
          the instance attributes ‘language_map’ (a dictionary), and
          ‘language_order’ (a list) to do the job.

      -- Method: find_library_file (dirs, lib[, debug=0])

          Search the specified list of directories for a static or
          shared library file `lib' and return the full path to that
          file.  If `debug' is true, look for a debugging version (if
          that makes sense on the current platform).  Return ‘None’ if
          `lib' wasn’t found in any of the specified directories.

      -- Method: has_function (funcname[, includes=None,
               include_dirs=None, libraries=None, library_dirs=None])

          Return a boolean indicating whether `funcname' is supported on
          the current platform.  The optional arguments can be used to
          augment the compilation environment by providing additional
          include files and paths and libraries and paths.

      -- Method: library_dir_option (dir)

          Return the compiler option to add `dir' to the list of
          directories searched for libraries.

      -- Method: library_option (lib)

          Return the compiler option to add `lib' to the list of
          libraries linked into the shared library or executable.

      -- Method: runtime_library_dir_option (dir)

          Return the compiler option to add `dir' to the list of
          directories searched for runtime libraries.

      -- Method: set_executables (**args)

          Define the executables (and options for them) that will be run
          to perform the various stages of compilation.  The exact set
          of executables that may be specified here depends on the
          compiler class (via the ’executables’ class attribute), but
          most will have:

          attribute          description
                             
          ------------------------------------------------------------------
                             
          `compiler'         the C/C++ compiler
                             
                             
          `linker_so'        linker used to create shared objects and
                             libraries
                             
                             
          `linker_exe'       linker used to create binary executables
                             
                             
          `archiver'         static library creator
                             

          On platforms with a command-line (Unix, DOS/Windows), each of
          these is a string that will be split into executable name and
          (optional) list of arguments.  (Splitting the string is done
          similarly to how Unix shells operate: words are delimited by
          spaces, but quotes and backslashes can override this.  See
          *note distutils.util.split_quoted(): 3b10.)

     The following methods invoke stages in the build process.

      -- Method: compile (sources[, output_dir=None, macros=None,
               include_dirs=None, debug=0, extra_preargs=None,
               extra_postargs=None, depends=None])

          Compile one or more source files.  Generates object files
          (e.g.  transforms a ‘.c’ file to a ‘.o’ file.)

          `sources' must be a list of filenames, most likely C/C++
          files, but in reality anything that can be handled by a
          particular compiler and compiler class (eg.  ‘MSVCCompiler’
          can handle resource files in `sources').  Return a list of
          object filenames, one per source filename in `sources'.
          Depending on the implementation, not all source files will
          necessarily be compiled, but all corresponding object
          filenames will be returned.

          If `output_dir' is given, object files will be put under it,
          while retaining their original path component.  That is,
          ‘foo/bar.c’ normally compiles to ‘foo/bar.o’ (for a Unix
          implementation); if `output_dir' is `build', then it would
          compile to ‘build/foo/bar.o’.

          `macros', if given, must be a list of macro definitions.  A
          macro definition is either a ‘(name, value)’ 2-tuple or a
          ‘(name,)’ 1-tuple.  The former defines a macro; if the value
          is ‘None’, the macro is defined without an explicit value.
          The 1-tuple case undefines a macro.  Later
          definitions/redefinitions/undefinitions take precedence.

          `include_dirs', if given, must be a list of strings, the
          directories to add to the default include file search path for
          this compilation only.

          `debug' is a boolean; if true, the compiler will be instructed
          to output debug symbols in (or alongside) the object file(s).

          `extra_preargs' and `extra_postargs' are
          implementation-dependent.  On platforms that have the notion
          of a command-line (e.g.  Unix, DOS/Windows), they are most
          likely lists of strings: extra command-line arguments to
          prepend/append to the compiler command line.  On other
          platforms, consult the implementation class documentation.  In
          any event, they are intended as an escape hatch for those
          occasions when the abstract compiler framework doesn’t cut the
          mustard.

          `depends', if given, is a list of filenames that all targets
          depend on.  If a source file is older than any file in
          depends, then the source file will be recompiled.  This
          supports dependency tracking, but only at a coarse
          granularity.

          Raises ‘CompileError’ on failure.

      -- Method: create_static_lib (objects, output_libname[,
               output_dir=None, debug=0, target_lang=None])

          Link a bunch of stuff together to create a static library
          file.  The "bunch of stuff" consists of the list of object
          files supplied as `objects', the extra object files supplied
          to *note add_link_object(): 3b07. and/or *note
          set_link_objects(): 3b08, the libraries supplied to *note
          add_library(): 3aff. and/or *note set_libraries(): 3b00, and
          the libraries supplied as `libraries' (if any).

          `output_libname' should be a library name, not a filename; the
          filename will be inferred from the library name.  `output_dir'
          is the directory where the library file will be put.

          `debug' is a boolean; if true, debugging information will be
          included in the library (note that on most platforms, it is
          the compile step where this matters: the `debug' flag is
          included here just for consistency).

          `target_lang' is the target language for which the given
          objects are being compiled.  This allows specific linkage time
          treatment of certain languages.

          Raises ‘LibError’ on failure.

      -- Method: link (target_desc, objects, output_filename[,
               output_dir=None, libraries=None, library_dirs=None,
               runtime_library_dirs=None, export_symbols=None, debug=0,
               extra_preargs=None, extra_postargs=None, build_temp=None,
               target_lang=None])

          Link a bunch of stuff together to create an executable or
          shared library file.

          The "bunch of stuff" consists of the list of object files
          supplied as `objects'.  `output_filename' should be a
          filename.  If `output_dir' is supplied, `output_filename' is
          relative to it (i.e.  `output_filename' can provide directory
          components if needed).

          `libraries' is a list of libraries to link against.  These are
          library names, not filenames, since they’re translated into
          filenames in a platform-specific way (eg.  `foo' becomes
          ‘libfoo.a’ on Unix and ‘foo.lib’ on DOS/Windows).  However,
          they can include a directory component, which means the linker
          will look in that specific directory rather than searching all
          the normal locations.

          `library_dirs', if supplied, should be a list of directories
          to search for libraries that were specified as bare library
          names (ie.  no directory component).  These are on top of the
          system default and those supplied to *note add_library_dir():
          3b01. and/or *note set_library_dirs(): 3b02.
          `runtime_library_dirs' is a list of directories that will be
          embedded into the shared library and used to search for other
          shared libraries that *it* depends on at run-time.  (This may
          only be relevant on Unix.)

          `export_symbols' is a list of symbols that the shared library
          will export.  (This appears to be relevant only on Windows.)

          `debug' is as for *note compile(): 903. and *note
          create_static_lib(): 3b12, with the slight distinction that it
          actually matters on most platforms (as opposed to *note
          create_static_lib(): 3b12, which includes a `debug' flag
          mostly for form’s sake).

          `extra_preargs' and `extra_postargs' are as for *note
          compile(): 903. (except of course that they supply
          command-line arguments for the particular linker being used).

          `target_lang' is the target language for which the given
          objects are being compiled.  This allows specific linkage time
          treatment of certain languages.

          Raises ‘LinkError’ on failure.

      -- Method: link_executable (objects, output_progname[,
               output_dir=None, libraries=None, library_dirs=None,
               runtime_library_dirs=None, debug=0, extra_preargs=None,
               extra_postargs=None, target_lang=None])

          Link an executable.  `output_progname' is the name of the file
          executable, while `objects' are a list of object filenames to
          link in.  Other arguments are as for the *note link(): 3b13.
          method.

      -- Method: link_shared_lib (objects, output_libname[,
               output_dir=None, libraries=None, library_dirs=None,
               runtime_library_dirs=None, export_symbols=None, debug=0,
               extra_preargs=None, extra_postargs=None, build_temp=None,
               target_lang=None])

          Link a shared library.  `output_libname' is the name of the
          output library, while `objects' is a list of object filenames
          to link in.  Other arguments are as for the *note link():
          3b13. method.

      -- Method: link_shared_object (objects, output_filename[,
               output_dir=None, libraries=None, library_dirs=None,
               runtime_library_dirs=None, export_symbols=None, debug=0,
               extra_preargs=None, extra_postargs=None, build_temp=None,
               target_lang=None])

          Link a shared object.  `output_filename' is the name of the
          shared object that will be created, while `objects' is a list
          of object filenames to link in.  Other arguments are as for
          the *note link(): 3b13. method.

      -- Method: preprocess (source[, output_file=None, macros=None,
               include_dirs=None, extra_preargs=None,
               extra_postargs=None])

          Preprocess a single C/C++ source file, named in `source'.
          Output will be written to file named `output_file', or
          `stdout' if `output_file' not supplied.  `macros' is a list of
          macro definitions as for *note compile(): 903, which will
          augment the macros set with *note define_macro(): 3b05. and
          *note undefine_macro(): 3b06.  `include_dirs' is a list of
          directory names that will be added to the default list, in the
          same way as *note add_include_dir(): 3afd.

          Raises ‘PreprocessError’ on failure.

     The following utility methods are defined by the *note CCompiler:
     3af7. class, for use by the various concrete subclasses.

      -- Method: executable_filename (basename[, strip_dir=0,
               output_dir=''])

          Returns the filename of the executable for the given
          `basename'.  Typically for non-Windows platforms this is the
          same as the basename, while Windows will get a ‘.exe’ added.

      -- Method: library_filename (libname[, lib_type='static',
               strip_dir=0, output_dir=''])

          Returns the filename for the given library name on the current
          platform.  On Unix a library with `lib_type' of ‘'static'’
          will typically be of the form ‘liblibname.a’, while a
          `lib_type' of ‘'dynamic'’ will be of the form ‘liblibname.so’.

      -- Method: object_filenames (source_filenames[, strip_dir=0,
               output_dir=''])

          Returns the name of the object files for the given source
          files.  `source_filenames' should be a list of filenames.

      -- Method: shared_object_filename (basename[, strip_dir=0,
               output_dir=''])

          Returns the name of a shared object file for the given file
          name `basename'.

      -- Method: execute (func, args[, msg=None, level=1])

          Invokes *note distutils.util.execute(): 3b1d.  This method
          invokes a Python function `func' with the given arguments
          `args', after logging and taking into account the `dry_run'
          flag.

      -- Method: spawn (cmd)

          Invokes ‘distutils.util.spawn()’.  This invokes an external
          process to run the given command.

      -- Method: mkpath (name[, mode=511])

          Invokes *note distutils.dir_util.mkpath(): 3b20.  This creates
          a directory and any missing ancestor directories.

      -- Method: move_file (src, dst)

          Invokes *note distutils.file_util.move_file(): 3b22.  Renames
          `src' to `dst'.

      -- Method: announce (msg[, level=1])

          Write a message using ‘distutils.log.debug()’.

      -- Method: warn (msg)

          Write a warning message `msg' to standard error.

      -- Method: debug_print (msg)

          If the `debug' flag is set on this *note CCompiler: 3af7.
          instance, print `msg' to standard output, otherwise do
          nothing.


File: python.info,  Node: distutils unixccompiler --- Unix C Compiler,  Next: distutils msvccompiler --- Microsoft Compiler,  Prev: distutils ccompiler --- CCompiler base class,  Up: API Reference

17.10.3 ‘distutils.unixccompiler’ — Unix C Compiler
---------------------------------------------------

This module provides the ‘UnixCCompiler’ class, a subclass of
‘CCompiler’ that handles the typical Unix-style command-line C compiler:

   * macros defined with ‘-Dname[=value]’

   * macros undefined with ‘-Uname’

   * include search directories specified with ‘-Idir’

   * libraries specified with ‘-llib’

   * library search directories specified with ‘-Ldir’

   * compile handled by ‘cc’ (or similar) executable with ‘-c’ option:
     compiles ‘.c’ to ‘.o’

   * link static library handled by ‘ar’ command (possibly with
     ‘ranlib’)

   * link shared library handled by ‘cc’ ‘-shared’


File: python.info,  Node: distutils msvccompiler --- Microsoft Compiler,  Next: distutils bcppcompiler --- Borland Compiler,  Prev: distutils unixccompiler --- Unix C Compiler,  Up: API Reference

17.10.4 ‘distutils.msvccompiler’ — Microsoft Compiler
-----------------------------------------------------

This module provides ‘MSVCCompiler’, an implementation of the abstract
‘CCompiler’ class for Microsoft Visual Studio.  Typically, extension
modules need to be compiled with the same compiler that was used to
compile Python.  For Python 2.3 and earlier, the compiler was Visual
Studio 6.  For Python 2.4 and 2.5, the compiler is Visual Studio .NET
2003.  The AMD64 and Itanium binaries are created using the Platform
SDK.

‘MSVCCompiler’ will normally choose the right compiler, linker etc.  on
its own.  To override this choice, the environment variables
`DISTUTILS_USE_SDK' and `MSSdk' must be both set.  `MSSdk' indicates
that the current environment has been setup by the SDK’s ‘SetEnv.Cmd’
script, or that the environment variables had been registered when the
SDK was installed; `DISTUTILS_USE_SDK' indicates that the distutils user
has made an explicit choice to override the compiler selection by
‘MSVCCompiler’.


File: python.info,  Node: distutils bcppcompiler --- Borland Compiler,  Next: distutils cygwincompiler --- Cygwin Compiler,  Prev: distutils msvccompiler --- Microsoft Compiler,  Up: API Reference

17.10.5 ‘distutils.bcppcompiler’ — Borland Compiler
---------------------------------------------------

This module provides ‘BorlandCCompiler’, a subclass of the abstract
‘CCompiler’ class for the Borland C++ compiler.


File: python.info,  Node: distutils cygwincompiler --- Cygwin Compiler,  Next: distutils archive_util --- Archiving utilities,  Prev: distutils bcppcompiler --- Borland Compiler,  Up: API Reference

17.10.6 ‘distutils.cygwincompiler’ — Cygwin Compiler
----------------------------------------------------

This module provides the ‘CygwinCCompiler’ class, a subclass of
‘UnixCCompiler’ that handles the Cygwin port of the GNU C compiler to
Windows.  It also contains the Mingw32CCompiler class which handles the
mingw32 port of GCC (same as cygwin in no-cygwin mode).


File: python.info,  Node: distutils archive_util --- Archiving utilities,  Next: distutils dep_util --- Dependency checking,  Prev: distutils cygwincompiler --- Cygwin Compiler,  Up: API Reference

17.10.7 ‘distutils.archive_util’ — Archiving utilities
------------------------------------------------------

This module provides a few functions for creating archive files, such as
tarballs or zipfiles.

 -- Function: distutils.archive_util.make_archive (base_name, format[,
          root_dir=None, base_dir=None, verbose=0, dry_run=0])

     Create an archive file (eg.  ‘zip’ or ‘tar’).  `base_name' is the
     name of the file to create, minus any format-specific extension;
     `format' is the archive format: one of ‘zip’, ‘tar’, ‘gztar’,
     ‘bztar’, ‘xztar’, or ‘ztar’.  `root_dir' is a directory that will
     be the root directory of the archive; ie.  we typically ‘chdir’
     into `root_dir' before creating the archive.  `base_dir' is the
     directory where we start archiving from; ie.  `base_dir' will be
     the common prefix of all files and directories in the archive.
     `root_dir' and `base_dir' both default to the current directory.
     Returns the name of the archive file.

     Changed in version 3.5: Added support for the ‘xztar’ format.

 -- Function: distutils.archive_util.make_tarball (base_name, base_dir[,
          compress='gzip', verbose=0, dry_run=0])

     ’Create an (optional compressed) archive as a tar file from all
     files in and under `base_dir'.  `compress' must be ‘'gzip'’ (the
     default), ‘'bzip2'’, ‘'xz'’, ‘'compress'’, or ‘None’.  For the
     ‘'compress'’ method the compression utility named by ‘compress’
     must be on the default program search path, so this is probably
     Unix-specific.  The output tar file will be named ‘base_dir.tar’,
     possibly plus the appropriate compression extension (‘.gz’, ‘.bz2’,
     ‘.xz’ or ‘.Z’).  Return the output filename.

     Changed in version 3.5: Added support for the ‘xz’ compression.

 -- Function: distutils.archive_util.make_zipfile (base_name, base_dir[,
          verbose=0, dry_run=0])

     Create a zip file from all files in and under `base_dir'.  The
     output zip file will be named `base_name' + ‘.zip’.  Uses either
     the *note zipfile: 13f. Python module (if available) or the InfoZIP
     ‘zip’ utility (if installed and found on the default search path).
     If neither tool is available, raises ‘DistutilsExecError’.  Returns
     the name of the output zip file.


File: python.info,  Node: distutils dep_util --- Dependency checking,  Next: distutils dir_util --- Directory tree operations,  Prev: distutils archive_util --- Archiving utilities,  Up: API Reference

17.10.8 ‘distutils.dep_util’ — Dependency checking
--------------------------------------------------

This module provides functions for performing simple, timestamp-based
dependency of files and groups of files; also, functions based entirely
on such timestamp dependency analysis.

 -- Function: distutils.dep_util.newer (source, target)

     Return true if `source' exists and is more recently modified than
     `target', or if `source' exists and `target' doesn’t.  Return false
     if both exist and `target' is the same age or newer than `source'.
     Raise ‘DistutilsFileError’ if `source' does not exist.

 -- Function: distutils.dep_util.newer_pairwise (sources, targets)

     Walk two filename lists in parallel, testing if each source is
     newer than its corresponding target.  Return a pair of lists
     (`sources', `targets') where source is newer than target, according
     to the semantics of *note newer(): 3b2f.

 -- Function: distutils.dep_util.newer_group (sources, target[,
          missing='error'])

     Return true if `target' is out-of-date with respect to any file
     listed in `sources' In other words, if `target' exists and is newer
     than every file in `sources', return false; otherwise return true.
     `missing' controls what we do when a source file is missing; the
     default (‘'error'’) is to blow up with an *note OSError: 4b6. from
     inside *note os.stat(): 1e2.; if it is ‘'ignore'’, we silently drop
     any missing source files; if it is ‘'newer'’, any missing source
     files make us assume that `target' is out-of-date (this is handy in
     "dry-run" mode: it’ll make you pretend to carry out commands that
     wouldn’t work because inputs are missing, but that doesn’t matter
     because you’re not actually going to run the commands).


File: python.info,  Node: distutils dir_util --- Directory tree operations,  Next: distutils file_util --- Single file operations,  Prev: distutils dep_util --- Dependency checking,  Up: API Reference

17.10.9 ‘distutils.dir_util’ — Directory tree operations
--------------------------------------------------------

This module provides functions for operating on directories and trees of
directories.

 -- Function: distutils.dir_util.mkpath (name[, mode=0o777, verbose=0,
          dry_run=0])

     Create a directory and any missing ancestor directories.  If the
     directory already exists (or if `name' is the empty string, which
     means the current directory, which of course exists), then do
     nothing.  Raise ‘DistutilsFileError’ if unable to create some
     directory along the way (eg.  some sub-path exists, but is a file
     rather than a directory).  If `verbose' is true, print a one-line
     summary of each mkdir to stdout.  Return the list of directories
     actually created.

 -- Function: distutils.dir_util.create_tree (base_dir, files[,
          mode=0o777, verbose=0, dry_run=0])

     Create all the empty directories under `base_dir' needed to put
     `files' there.  `base_dir' is just the name of a directory which
     doesn’t necessarily exist yet; `files' is a list of filenames to be
     interpreted relative to `base_dir'.  `base_dir' + the directory
     portion of every file in `files' will be created if it doesn’t
     already exist.  `mode', `verbose' and `dry_run' flags are as for
     *note mkpath(): 3b20.

 -- Function: distutils.dir_util.copy_tree (src, dst[, preserve_mode=1,
          preserve_times=1, preserve_symlinks=0, update=0, verbose=0,
          dry_run=0])

     Copy an entire directory tree `src' to a new location `dst'.  Both
     `src' and `dst' must be directory names.  If `src' is not a
     directory, raise ‘DistutilsFileError’.  If `dst' does not exist, it
     is created with *note mkpath(): 3b20.  The end result of the copy
     is that every file in `src' is copied to `dst', and directories
     under `src' are recursively copied to `dst'.  Return the list of
     files that were copied or might have been copied, using their
     output name.  The return value is unaffected by `update' or
     `dry_run': it is simply the list of all files under `src', with the
     names changed to be under `dst'.

     `preserve_mode' and `preserve_times' are the same as for *note
     distutils.file_util.copy_file(): 3b35.; note that they only apply
     to regular files, not to directories.  If `preserve_symlinks' is
     true, symlinks will be copied as symlinks (on platforms that
     support them!); otherwise (the default), the destination of the
     symlink will be copied.  `update' and `verbose' are the same as for
     ‘copy_file()’.

     Files in `src' that begin with ‘.nfs’ are skipped (more information
     on these files is available in answer D2 of the NFS FAQ page(1)).

     Changed in version 3.3.1: NFS files are ignored.

 -- Function: distutils.dir_util.remove_tree (directory[, verbose=0,
          dry_run=0])

     Recursively remove `directory' and all files and directories
     underneath it.  Any errors are ignored (apart from being reported
     to ‘sys.stdout’ if `verbose' is true).

   ---------- Footnotes ----------

   (1) http://nfs.sourceforge.net/#section_d


File: python.info,  Node: distutils file_util --- Single file operations,  Next: distutils util --- Miscellaneous other utility functions,  Prev: distutils dir_util --- Directory tree operations,  Up: API Reference

17.10.10 ‘distutils.file_util’ — Single file operations
-------------------------------------------------------

This module contains some utility functions for operating on individual
files.

 -- Function: distutils.file_util.copy_file (src, dst[, preserve_mode=1,
          preserve_times=1, update=0, link=None, verbose=0, dry_run=0])

     Copy file `src' to `dst'.  If `dst' is a directory, then `src' is
     copied there with the same name; otherwise, it must be a filename.
     (If the file exists, it will be ruthlessly clobbered.)  If
     `preserve_mode' is true (the default), the file’s mode (type and
     permission bits, or whatever is analogous on the current platform)
     is copied.  If `preserve_times' is true (the default), the
     last-modified and last-access times are copied as well.  If
     `update' is true, `src' will only be copied if `dst' does not
     exist, or if `dst' does exist but is older than `src'.

     `link' allows you to make hard links (using *note os.link(): 667.)
     or symbolic links (using *note os.symlink(): 66f.) instead of
     copying: set it to ‘'hard'’ or ‘'sym'’; if it is ‘None’ (the
     default), files are copied.  Don’t set `link' on systems that don’t
     support it: *note copy_file(): 3b35. doesn’t check if hard or
     symbolic linking is available.  It uses ‘_copy_file_contents()’ to
     copy file contents.

     Return a tuple ‘(dest_name, copied)’: `dest_name' is the actual
     name of the output file, and `copied' is true if the file was
     copied (or would have been copied, if `dry_run' true).

 -- Function: distutils.file_util.move_file (src, dst[, verbose,
          dry_run])

     Move file `src' to `dst'.  If `dst' is a directory, the file will
     be moved into it with the same name; otherwise, `src' is just
     renamed to `dst'.  Returns the new full name of the file.

          Warning: Handles cross-device moves on Unix using *note
          copy_file(): 3b35.  What about other systems?

 -- Function: distutils.file_util.write_file (filename, contents)

     Create a file called `filename' and write `contents' (a sequence of
     strings without line terminators) to it.


File: python.info,  Node: distutils util --- Miscellaneous other utility functions,  Next: distutils dist --- The Distribution class,  Prev: distutils file_util --- Single file operations,  Up: API Reference

17.10.11 ‘distutils.util’ — Miscellaneous other utility functions
-----------------------------------------------------------------

This module contains other assorted bits and pieces that don’t fit into
any other utility module.

 -- Function: distutils.util.get_platform ()

     Return a string that identifies the current platform.  This is used
     mainly to distinguish platform-specific build directories and
     platform-specific built distributions.  Typically includes the OS
     name and version and the architecture (as supplied by
     ’os.uname()’), although the exact information included depends on
     the OS; eg.  for IRIX the architecture isn’t particularly important
     (IRIX only runs on SGI hardware), but for Linux the kernel version
     isn’t particularly important.

     Examples of returned values:

        * ‘linux-i586’

        * ‘linux-alpha’

        * ‘solaris-2.6-sun4u’

        * ‘irix-5.3’

        * ‘irix64-6.2’

     For non-POSIX platforms, currently just returns ‘sys.platform’.

     For Mac OS X systems the OS version reflects the minimal version on
     which binaries will run (that is, the value of
     ‘MACOSX_DEPLOYMENT_TARGET’ during the build of Python), not the OS
     version of the current system.

     For universal binary builds on Mac OS X the architecture value
     reflects the universal binary status instead of the architecture of
     the current processor.  For 32-bit universal binaries the
     architecture is ‘fat’, for 64-bit universal binaries the
     architecture is ‘fat64’, and for 4-way universal binaries the
     architecture is ‘universal’.  Starting from Python 2.7 and Python
     3.2 the architecture ‘fat3’ is used for a 3-way universal build
     (ppc, i386, x86_64) and ‘intel’ is used for a universal build with
     the i386 and x86_64 architectures

     Examples of returned values on Mac OS X:

        * ‘macosx-10.3-ppc’

        * ‘macosx-10.3-fat’

        * ‘macosx-10.5-universal’

        * ‘macosx-10.6-intel’

 -- Function: distutils.util.convert_path (pathname)

     Return ’pathname’ as a name that will work on the native
     filesystem, i.e.  split it on ’/’ and put it back together again
     using the current directory separator.  Needed because filenames in
     the setup script are always supplied in Unix style, and have to be
     converted to the local convention before we can actually use them
     in the filesystem.  Raises *note ValueError: 19c. on non-Unix-ish
     systems if `pathname' either starts or ends with a slash.

 -- Function: distutils.util.change_root (new_root, pathname)

     Return `pathname' with `new_root' prepended.  If `pathname' is
     relative, this is equivalent to ‘os.path.join(new_root,pathname)’
     Otherwise, it requires making `pathname' relative and then joining
     the two, which is tricky on DOS/Windows.

 -- Function: distutils.util.check_environ ()

     Ensure that ’os.environ’ has all the environment variables we
     guarantee that users can use in config files, command-line options,
     etc.  Currently this includes:

        * ‘HOME’ - user’s home directory (Unix only)

        * ‘PLAT’ - description of the current platform, including
          hardware and OS (see *note get_platform(): 3b3a.)

 -- Function: distutils.util.subst_vars (s, local_vars)

     Perform shell/Perl-style variable substitution on `s'.  Every
     occurrence of ‘$’ followed by a name is considered a variable, and
     variable is substituted by the value found in the `local_vars'
     dictionary, or in ‘os.environ’ if it’s not in `local_vars'.
     `os.environ' is first checked/augmented to guarantee that it
     contains certain values: see *note check_environ(): 3b3d.  Raise
     *note ValueError: 19c. for any variables not found in either
     `local_vars' or ‘os.environ’.

     Note that this is not a fully-fledged string interpolation
     function.  A valid ‘$variable’ can consist only of upper and lower
     case letters, numbers and an underscore.  No { } or ( ) style
     quoting is available.

 -- Function: distutils.util.split_quoted (s)

     Split a string up according to Unix shell-like rules for quotes and
     backslashes.  In short: words are delimited by spaces, as long as
     those spaces are not escaped by a backslash, or inside a quoted
     string.  Single and double quotes are equivalent, and the quote
     characters can be backslash-escaped.  The backslash is stripped
     from any two-character escape sequence, leaving only the escaped
     character.  The quote characters are stripped from any quoted
     string.  Returns a list of words.

 -- Function: distutils.util.execute (func, args[, msg=None, verbose=0,
          dry_run=0])

     Perform some action that affects the outside world (for instance,
     writing to the filesystem).  Such actions are special because they
     are disabled by the `dry_run' flag.  This method takes care of all
     that bureaucracy for you; all you have to do is supply the function
     to call and an argument tuple for it (to embody the "external
     action" being performed), and an optional message to print.

 -- Function: distutils.util.strtobool (val)

     Convert a string representation of truth to true (1) or false (0).

     True values are ‘y’, ‘yes’, ‘t’, ‘true’, ‘on’ and ‘1’; false values
     are ‘n’, ‘no’, ‘f’, ‘false’, ‘off’ and ‘0’.  Raises *note
     ValueError: 19c. if `val' is anything else.

 -- Function: distutils.util.byte_compile (py_files[, optimize=0,
          force=0, prefix=None, base_dir=None, verbose=1, dry_run=0,
          direct=None])

     Byte-compile a collection of Python source files to ‘.pyc’ files in
     a ‘__pycache__’ subdirectory (see PEP 3147(1) and PEP 488(2)).
     `py_files' is a list of files to compile; any files that don’t end
     in ‘.py’ are silently skipped.  `optimize' must be one of the
     following:

        * ‘0’ - don’t optimize

        * ‘1’ - normal optimization (like ‘python -O’)

        * ‘2’ - extra optimization (like ‘python -OO’)

     If `force' is true, all files are recompiled regardless of
     timestamps.

     The source filename encoded in each *note bytecode: d06. file
     defaults to the filenames listed in `py_files'; you can modify
     these with `prefix' and `basedir'.  `prefix' is a string that will
     be stripped off of each source filename, and `base_dir' is a
     directory name that will be prepended (after `prefix' is stripped).
     You can supply either or both (or neither) of `prefix' and
     `base_dir', as you wish.

     If `dry_run' is true, doesn’t actually do anything that would
     affect the filesystem.

     Byte-compilation is either done directly in this interpreter
     process with the standard *note py_compile: d5. module, or
     indirectly by writing a temporary script and executing it.
     Normally, you should let *note byte_compile(): 3b40. figure out to
     use direct compilation or not (see the source for details).  The
     `direct' flag is used by the script generated in indirect mode;
     unless you know what you’re doing, leave it set to ‘None’.

     Changed in version 3.2.3: Create ‘.pyc’ files with an *note import
     magic tag: 32de. in their name, in a ‘__pycache__’ subdirectory
     instead of files without tag in the current directory.

     Changed in version 3.5: Create ‘.pyc’ files according to PEP
     488(3).

 -- Function: distutils.util.rfc822_escape (header)

     Return a version of `header' escaped for inclusion in an RFC 822(4)
     header, by ensuring there are 8 spaces space after each newline.
     Note that it does no other modification of the string.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3147

   (2) https://www.python.org/dev/peps/pep-0488

   (3) https://www.python.org/dev/peps/pep-0488

   (4) https://tools.ietf.org/html/rfc822.html


File: python.info,  Node: distutils dist --- The Distribution class,  Next: distutils extension --- The Extension class,  Prev: distutils util --- Miscellaneous other utility functions,  Up: API Reference

17.10.12 ‘distutils.dist’ — The Distribution class
--------------------------------------------------

This module provides the *note Distribution: 3af3. class, which
represents the module distribution being built/installed/distributed.


File: python.info,  Node: distutils extension --- The Extension class,  Next: distutils debug --- Distutils debug mode,  Prev: distutils dist --- The Distribution class,  Up: API Reference

17.10.13 ‘distutils.extension’ — The Extension class
----------------------------------------------------

This module provides the ‘Extension’ class, used to describe C/C++
extension modules in setup scripts.


File: python.info,  Node: distutils debug --- Distutils debug mode,  Next: distutils errors --- Distutils exceptions,  Prev: distutils extension --- The Extension class,  Up: API Reference

17.10.14 ‘distutils.debug’ — Distutils debug mode
-------------------------------------------------

This module provides the DEBUG flag.


File: python.info,  Node: distutils errors --- Distutils exceptions,  Next: distutils fancy_getopt --- Wrapper around the standard getopt module,  Prev: distutils debug --- Distutils debug mode,  Up: API Reference

17.10.15 ‘distutils.errors’ — Distutils exceptions
--------------------------------------------------

Provides exceptions used by the Distutils modules.  Note that Distutils
modules may raise standard exceptions; in particular, SystemExit is
usually raised for errors that are obviously the end-user’s fault (eg.
bad command-line arguments).

This module is safe to use in ‘from ... import *’ mode; it only exports
symbols whose names start with ‘Distutils’ and end with ‘Error’.


File: python.info,  Node: distutils fancy_getopt --- Wrapper around the standard getopt module,  Next: distutils filelist --- The FileList class,  Prev: distutils errors --- Distutils exceptions,  Up: API Reference

17.10.16 ‘distutils.fancy_getopt’ — Wrapper around the standard getopt module
-----------------------------------------------------------------------------

This module provides a wrapper around the standard *note getopt: 86.
module that provides the following additional features:

   * short and long options are tied together

   * options have help strings, so *note fancy_getopt(): 3b47. could
     potentially create a complete usage summary

   * options set attributes of a passed-in object

   * boolean options can have "negative aliases" — eg.  if ‘--quiet’ is
     the "negative alias" of *note –verbose: 178d, then ‘--quiet’ on the
     command line sets `verbose' to false.

 -- Function: distutils.fancy_getopt.fancy_getopt (options,
          negative_opt, object, args)

     Wrapper function.  `options' is a list of ‘(long_option,
     short_option, help_string)’ 3-tuples as described in the
     constructor for *note FancyGetopt: 3b48.  `negative_opt' should be
     a dictionary mapping option names to option names, both the key and
     value should be in the `options' list.  `object' is an object which
     will be used to store values (see the *note getopt(): 86. method of
     the *note FancyGetopt: 3b48. class).  `args' is the argument list.
     Will use ‘sys.argv[1:]’ if you pass ‘None’ as `args'.

 -- Function: distutils.fancy_getopt.wrap_text (text, width)

     Wraps `text' to less than `width' wide.

 -- Class: distutils.fancy_getopt.FancyGetopt ([option_table=None])

     The option_table is a list of 3-tuples: ‘(long_option,
     short_option, help_string)’

     If an option takes an argument, its `long_option' should have ‘'='’
     appended; `short_option' should just be a single character, no
     ‘':'’ in any case.  `short_option' should be ‘None’ if a
     `long_option' doesn’t have a corresponding `short_option'.  All
     option tuples must have long options.

The *note FancyGetopt: 3b48. class provides the following methods:

 -- Method: FancyGetopt.getopt ([args=None, object=None])

     Parse command-line options in args.  Store as attributes on
     `object'.

     If `args' is ‘None’ or not supplied, uses ‘sys.argv[1:]’.  If
     `object' is ‘None’ or not supplied, creates a new ‘OptionDummy’
     instance, stores option values there, and returns a tuple ‘(args,
     object)’.  If `object' is supplied, it is modified in place and
     *note getopt(): 86. just returns `args'; in both cases, the
     returned `args' is a modified copy of the passed-in `args' list,
     which is left untouched.

 -- Method: FancyGetopt.get_option_order ()

     Returns the list of ‘(option, value)’ tuples processed by the
     previous run of *note getopt(): 86. Raises *note RuntimeError: 193.
     if *note getopt(): 86. hasn’t been called yet.

 -- Method: FancyGetopt.generate_help ([header=None])

     Generate help text (a list of strings, one per suggested line of
     output) from the option table for this *note FancyGetopt: 3b48.
     object.

     If supplied, prints the supplied `header' at the top of the help.


File: python.info,  Node: distutils filelist --- The FileList class,  Next: distutils log --- Simple PEP 282-style logging,  Prev: distutils fancy_getopt --- Wrapper around the standard getopt module,  Up: API Reference

17.10.17 ‘distutils.filelist’ — The FileList class
--------------------------------------------------

This module provides the ‘FileList’ class, used for poking about the
filesystem and building lists of files.


File: python.info,  Node: distutils log --- Simple PEP 282-style logging,  Next: distutils spawn --- Spawn a sub-process,  Prev: distutils filelist --- The FileList class,  Up: API Reference

17.10.18 ‘distutils.log’ — Simple PEP 282-style logging
-------------------------------------------------------


File: python.info,  Node: distutils spawn --- Spawn a sub-process,  Next: distutils sysconfig --- System configuration information,  Prev: distutils log --- Simple PEP 282-style logging,  Up: API Reference

17.10.19 ‘distutils.spawn’ — Spawn a sub-process
------------------------------------------------

This module provides the ‘spawn()’ function, a front-end to various
platform-specific functions for launching another program in a
sub-process.  Also provides ‘find_executable()’ to search the path for a
given executable name.


File: python.info,  Node: distutils sysconfig --- System configuration information,  Next: distutils text_file --- The TextFile class,  Prev: distutils spawn --- Spawn a sub-process,  Up: API Reference

17.10.20 ‘distutils.sysconfig’ — System configuration information
-----------------------------------------------------------------

The *note distutils.sysconfig: 60. module provides access to Python’s
low-level configuration information.  The specific configuration
variables available depend heavily on the platform and configuration.
The specific variables depend on the build process for the specific
version of Python being run; the variables are those found in the
‘Makefile’ and configuration header that are installed with Python on
Unix systems.  The configuration header is called ‘pyconfig.h’ for
Python versions starting with 2.2, and ‘config.h’ for earlier versions
of Python.

Some additional functions are provided which perform some useful
manipulations for other parts of the *note distutils: 37. package.

 -- Data: distutils.sysconfig.PREFIX

     The result of ‘os.path.normpath(sys.prefix)’.

 -- Data: distutils.sysconfig.EXEC_PREFIX

     The result of ‘os.path.normpath(sys.exec_prefix)’.

 -- Function: distutils.sysconfig.get_config_var (name)

     Return the value of a single variable.  This is equivalent to
     ‘get_config_vars().get(name)’.

 -- Function: distutils.sysconfig.get_config_vars (...)

     Return a set of variable definitions.  If there are no arguments,
     this returns a dictionary mapping names of configuration variables
     to values.  If arguments are provided, they should be strings, and
     the return value will be a sequence giving the associated values.
     If a given name does not have a corresponding value, ‘None’ will be
     included for that variable.

 -- Function: distutils.sysconfig.get_config_h_filename ()

     Return the full path name of the configuration header.  For Unix,
     this will be the header generated by the ‘configure’ script; for
     other platforms the header will have been supplied directly by the
     Python source distribution.  The file is a platform-specific text
     file.

 -- Function: distutils.sysconfig.get_makefile_filename ()

     Return the full path name of the ‘Makefile’ used to build Python.
     For Unix, this will be a file generated by the ‘configure’ script;
     the meaning for other platforms will vary.  The file is a
     platform-specific text file, if it exists.  This function is only
     useful on POSIX platforms.

 -- Function: distutils.sysconfig.get_python_inc ([plat_specific[,
          prefix]])

     Return the directory for either the general or platform-dependent C
     include files.  If `plat_specific' is true, the platform-dependent
     include directory is returned; if false or omitted, the
     platform-independent directory is returned.  If `prefix' is given,
     it is used as either the prefix instead of *note PREFIX: 3b51, or
     as the exec-prefix instead of *note EXEC_PREFIX: 3b52. if
     `plat_specific' is true.

 -- Function: distutils.sysconfig.get_python_lib ([plat_specific[,
          standard_lib[, prefix]]])

     Return the directory for either the general or platform-dependent
     library installation.  If `plat_specific' is true, the
     platform-dependent include directory is returned; if false or
     omitted, the platform-independent directory is returned.  If
     `prefix' is given, it is used as either the prefix instead of *note
     PREFIX: 3b51, or as the exec-prefix instead of *note EXEC_PREFIX:
     3b52. if `plat_specific' is true.  If `standard_lib' is true, the
     directory for the standard library is returned rather than the
     directory for the installation of third-party extensions.

The following function is only intended for use within the *note
distutils: 37. package.

 -- Function: distutils.sysconfig.customize_compiler (compiler)

     Do any platform-specific customization of a *note
     distutils.ccompiler.CCompiler: 3af7. instance.

     This function is only needed on Unix at this time, but should be
     called consistently to support forward-compatibility.  It inserts
     the information that varies across Unix flavors and is stored in
     Python’s ‘Makefile’.  This information includes the selected
     compiler, compiler and linker options, and the extension used by
     the linker for shared objects.

This function is even more special-purpose, and should only be used from
Python’s own build procedures.

 -- Function: distutils.sysconfig.set_python_build ()

     Inform the *note distutils.sysconfig: 60. module that it is being
     used as part of the build process for Python.  This changes a lot
     of relative locations for files, allowing them to be located in the
     build area rather than in an installed Python.


File: python.info,  Node: distutils text_file --- The TextFile class,  Next: distutils version --- Version number classes,  Prev: distutils sysconfig --- System configuration information,  Up: API Reference

17.10.21 ‘distutils.text_file’ — The TextFile class
---------------------------------------------------

This module provides the *note TextFile: 3b5c. class, which gives an
interface to text files that (optionally) takes care of stripping
comments, ignoring blank lines, and joining lines with backslashes.

 -- Class: distutils.text_file.TextFile ([filename=None, file=None,
          **options])

     This class provides a file-like object that takes care of all the
     things you commonly want to do when processing a text file that has
     some line-by-line syntax: strip comments (as long as ‘#’ is your
     comment character), skip blank lines, join adjacent lines by
     escaping the newline (ie.  backslash at end of line), strip leading
     and/or trailing whitespace.  All of these are optional and
     independently controllable.

     The class provides a *note warn(): 3b5d. method so you can generate
     warning messages that report physical line number, even if the
     logical line in question spans multiple physical lines.  Also
     provides *note unreadline(): 3b5e. for implementing line-at-a-time
     lookahead.

     *note TextFile: 3b5c. instances are create with either `filename',
     `file', or both.  *note RuntimeError: 193. is raised if both are
     ‘None’.  `filename' should be a string, and `file' a file object
     (or something that provides *note readline(): dc. and *note
     close(): 3b5f. methods).  It is recommended that you supply at
     least `filename', so that *note TextFile: 3b5c. can include it in
     warning messages.  If `file' is not supplied, *note TextFile: 3b5c.
     creates its own using the *note open(): 1e8. built-in function.

     The options are all boolean, and affect the values returned by
     *note readline(): dc.

     option name            description                          default
                                                                 
     --------------------------------------------------------------------------
                                                                 
     `strip_comments'       strip from ‘'#'’ to end-of- line,    true
                            as well as any whitespace leading    
                            up to the ‘'#'’—unless it is
                            escaped by a backslash
                            
                                                                 
     `lstrip_ws'            strip leading whitespace from each   false
                            line before returning it             
                            
                                                                 
     `rstrip_ws'            strip trailing whitespace            true
                            (including line terminator!)  from   
                            each line before returning it.
                            
                                                                 
     `skip_blanks'          skip lines that are empty *after*    true
                            stripping comments and whitespace.   
                            (If both lstrip_ws and rstrip_ws
                            are false, then some lines may
                            consist of solely whitespace:
                            these will *not* be skipped, even
                            if `skip_blanks' is true.)
                            
                                                                 
     `join_lines'           if a backslash is the last           false
                            non-newline character on a line      
                            after stripping comments and
                            whitespace, join the following
                            line to it to form one logical
                            line; if N consecutive lines end
                            with a backslash, then N+1
                            physical lines will be joined to
                            form one logical line.
                            
                                                                 
     `collapse_join'        strip leading whitespace from        false
                            lines that are joined to their       
                            predecessor; only matters if
                            ‘(join_lines and not lstrip_ws)’
                            

     Note that since `rstrip_ws' can strip the trailing newline, the
     semantics of *note readline(): dc. must differ from those of the
     built-in file object’s *note readline(): dc. method!  In
     particular, *note readline(): dc. returns ‘None’ for end-of-file:
     an empty string might just be a blank line (or an all-whitespace
     line), if `rstrip_ws' is true but `skip_blanks' is not.

      -- Method: open (filename)

          Open a new file `filename'.  This overrides any `file' or
          `filename' constructor arguments.

      -- Method: close ()

          Close the current file and forget everything we know about it
          (including the filename and the current line number).

      -- Method: warn (msg[, line=None])

          Print (to stderr) a warning message tied to the current
          logical line in the current file.  If the current logical line
          in the file spans multiple physical lines, the warning refers
          to the whole range, such as ‘"lines 3-5"’.  If `line' is
          supplied, it overrides the current line number; it may be a
          list or tuple to indicate a range of physical lines, or an
          integer for a single physical line.

      -- Method: readline ()

          Read and return a single logical line from the current file
          (or from an internal buffer if lines have previously been
          "unread" with *note unreadline(): 3b5e.).  If the `join_lines'
          option is true, this may involve reading multiple physical
          lines concatenated into a single string.  Updates the current
          line number, so calling *note warn(): 3b5d. after *note
          readline(): dc. emits a warning about the physical line(s)
          just read.  Returns ‘None’ on end-of-file, since the empty
          string can occur if `rstrip_ws' is true but `strip_blanks' is
          not.

      -- Method: readlines ()

          Read and return the list of all logical lines remaining in the
          current file.  This updates the current line number to the
          last line of the file.

      -- Method: unreadline (line)

          Push `line' (a string) onto an internal buffer that will be
          checked by future *note readline(): dc. calls.  Handy for
          implementing a parser with line-at-a-time lookahead.  Note
          that lines that are "unread" with *note unreadline(): 3b5e.
          are not subsequently re-cleansed (whitespace stripped, or
          whatever) when read with *note readline(): dc.  If multiple
          calls are made to *note unreadline(): 3b5e. before a call to
          *note readline(): dc, the lines will be returned most in most
          recent first order.


File: python.info,  Node: distutils version --- Version number classes,  Next: distutils cmd --- Abstract base class for Distutils commands,  Prev: distutils text_file --- The TextFile class,  Up: API Reference

17.10.22 ‘distutils.version’ — Version number classes
-----------------------------------------------------


File: python.info,  Node: distutils cmd --- Abstract base class for Distutils commands,  Next: Creating a new Distutils command,  Prev: distutils version --- Version number classes,  Up: API Reference

17.10.23 ‘distutils.cmd’ — Abstract base class for Distutils commands
---------------------------------------------------------------------

This module supplies the abstract base class *note Command: 3ae2.

 -- Class: distutils.cmd.Command (dist)

     Abstract base class for defining command classes, the "worker bees"
     of the Distutils.  A useful analogy for command classes is to think
     of them as subroutines with local variables called `options'.  The
     options are declared in *note initialize_options(): 3b65. and
     defined (given their final values) in *note finalize_options():
     3b66, both of which must be defined by every command class.  The
     distinction between the two is necessary because option values
     might come from the outside world (command line, config file, ...),
     and any options dependent on other options must be computed after
     these outside influences have been processed — hence *note
     finalize_options(): 3b66.  The body of the subroutine, where it
     does all its work based on the values of its options, is the *note
     run(): 3b67. method, which must also be implemented by every
     command class.

     The class constructor takes a single argument `dist', a *note
     Distribution: 3af3. instance.


File: python.info,  Node: Creating a new Distutils command,  Next: distutils command --- Individual Distutils commands,  Prev: distutils cmd --- Abstract base class for Distutils commands,  Up: API Reference

17.10.24 Creating a new Distutils command
-----------------------------------------

This section outlines the steps to create a new Distutils command.

A new command lives in a module in the *note distutils.command: 3c.
package.  There is a sample template in that directory called
‘command_template’.  Copy this file to a new module with the same name
as the new command you’re implementing.  This module should implement a
class with the same name as the module (and the command).  So, for
instance, to create the command ‘peel_banana’ (so that users can run
‘setup.py peel_banana’), you’d copy ‘command_template’ to
‘distutils/command/peel_banana.py’, then edit it so that it’s
implementing the class ‘peel_banana’, a subclass of *note
distutils.cmd.Command: 3ae2.

Subclasses of *note Command: 3ae2. must define the following methods.

 -- Method: Command.initialize_options ()

     Set default values for all the options that this command supports.
     Note that these defaults may be overridden by other commands, by
     the setup script, by config files, or by the command-line.  Thus,
     this is not the place to code dependencies between options;
     generally, *note initialize_options(): 3b65. implementations are
     just a bunch of ‘self.foo = None’ assignments.

 -- Method: Command.finalize_options ()

     Set final values for all the options that this command supports.
     This is always called as late as possible, ie.  after any option
     assignments from the command-line or from other commands have been
     done.  Thus, this is the place to code option dependencies: if
     `foo' depends on `bar', then it is safe to set `foo' from `bar' as
     long as `foo' still has the same value it was assigned in *note
     initialize_options(): 3b65.

 -- Method: Command.run ()

     A command’s raison d’etre: carry out the action it exists to
     perform, controlled by the options initialized in *note
     initialize_options(): 3b65, customized by other commands, the setup
     script, the command-line, and config files, and finalized in *note
     finalize_options(): 3b66.  All terminal output and filesystem
     interaction should be done by *note run(): 3b67.

 -- Attribute: Command.sub_commands

     `sub_commands' formalizes the notion of a "family" of commands,
     e.g.  ‘install’ as the parent with sub-commands ‘install_lib’,
     ‘install_headers’, etc.  The parent of a family of commands defines
     `sub_commands' as a class attribute; it’s a list of 2-tuples
     ‘(command_name, predicate)’, with `command_name' a string and
     `predicate' a function, a string or ‘None’.  `predicate' is a
     method of the parent command that determines whether the
     corresponding command is applicable in the current situation.
     (E.g.  ‘install_headers’ is only applicable if we have any C header
     files to install.)  If `predicate' is ‘None’, that command is
     always applicable.

     `sub_commands' is usually defined at the `end' of a class, because
     predicates can be methods of the class, so they must already have
     been defined.  The canonical example is the ‘install’ command.


File: python.info,  Node: distutils command --- Individual Distutils commands,  Next: distutils command bdist --- Build a binary installer,  Prev: Creating a new Distutils command,  Up: API Reference

17.10.25 ‘distutils.command’ — Individual Distutils commands
------------------------------------------------------------


File: python.info,  Node: distutils command bdist --- Build a binary installer,  Next: distutils command bdist_packager --- Abstract base class for packagers,  Prev: distutils command --- Individual Distutils commands,  Up: API Reference

17.10.26 ‘distutils.command.bdist’ — Build a binary installer
-------------------------------------------------------------


File: python.info,  Node: distutils command bdist_packager --- Abstract base class for packagers,  Next: distutils command bdist_dumb --- Build a "dumb" installer,  Prev: distutils command bdist --- Build a binary installer,  Up: API Reference

17.10.27 ‘distutils.command.bdist_packager’ — Abstract base class for packagers
-------------------------------------------------------------------------------


File: python.info,  Node: distutils command bdist_dumb --- Build a "dumb" installer,  Next: distutils command bdist_msi --- Build a Microsoft Installer binary package,  Prev: distutils command bdist_packager --- Abstract base class for packagers,  Up: API Reference

17.10.28 ‘distutils.command.bdist_dumb’ — Build a "dumb" installer
------------------------------------------------------------------


File: python.info,  Node: distutils command bdist_msi --- Build a Microsoft Installer binary package,  Next: distutils command bdist_rpm --- Build a binary distribution as a Redhat RPM and SRPM,  Prev: distutils command bdist_dumb --- Build a "dumb" installer,  Up: API Reference

17.10.29 ‘distutils.command.bdist_msi’ — Build a Microsoft Installer binary package
-----------------------------------------------------------------------------------

 -- Class: distutils.command.bdist_msi.bdist_msi

     Builds a Windows Installer(1) (.msi) binary package.

     In most cases, the ‘bdist_msi’ installer is a better choice than
     the ‘bdist_wininst’ installer, because it provides better support
     for Win64 platforms, allows administrators to perform
     non-interactive installations, and allows installation through
     group policies.

   ---------- Footnotes ----------

   (1) https://msdn.microsoft.com/en-us/library/cc185688(VS.85).aspx


File: python.info,  Node: distutils command bdist_rpm --- Build a binary distribution as a Redhat RPM and SRPM,  Next: distutils command bdist_wininst --- Build a Windows installer,  Prev: distutils command bdist_msi --- Build a Microsoft Installer binary package,  Up: API Reference

17.10.30 ‘distutils.command.bdist_rpm’ — Build a binary distribution as a Redhat RPM and SRPM
---------------------------------------------------------------------------------------------


File: python.info,  Node: distutils command bdist_wininst --- Build a Windows installer,  Next: distutils command sdist --- Build a source distribution,  Prev: distutils command bdist_rpm --- Build a binary distribution as a Redhat RPM and SRPM,  Up: API Reference

17.10.31 ‘distutils.command.bdist_wininst’ — Build a Windows installer
----------------------------------------------------------------------


File: python.info,  Node: distutils command sdist --- Build a source distribution,  Next: distutils command build --- Build all files of a package,  Prev: distutils command bdist_wininst --- Build a Windows installer,  Up: API Reference

17.10.32 ‘distutils.command.sdist’ — Build a source distribution
----------------------------------------------------------------


File: python.info,  Node: distutils command build --- Build all files of a package,  Next: distutils command build_clib --- Build any C libraries in a package,  Prev: distutils command sdist --- Build a source distribution,  Up: API Reference

17.10.33 ‘distutils.command.build’ — Build all files of a package
-----------------------------------------------------------------


File: python.info,  Node: distutils command build_clib --- Build any C libraries in a package,  Next: distutils command build_ext --- Build any extensions in a package,  Prev: distutils command build --- Build all files of a package,  Up: API Reference

17.10.34 ‘distutils.command.build_clib’ — Build any C libraries in a package
----------------------------------------------------------------------------


File: python.info,  Node: distutils command build_ext --- Build any extensions in a package,  Next: distutils command build_py --- Build the py/ pyc files of a package,  Prev: distutils command build_clib --- Build any C libraries in a package,  Up: API Reference

17.10.35 ‘distutils.command.build_ext’ — Build any extensions in a package
--------------------------------------------------------------------------


File: python.info,  Node: distutils command build_py --- Build the py/ pyc files of a package,  Next: distutils command build_scripts --- Build the scripts of a package,  Prev: distutils command build_ext --- Build any extensions in a package,  Up: API Reference

17.10.36 ‘distutils.command.build_py’ — Build the .py/.pyc files of a package
-----------------------------------------------------------------------------

 -- Class: distutils.command.build_py.build_py

 -- Class: distutils.command.build_py.build_py_2to3

     Alternative implementation of build_py which also runs the 2to3
     conversion library on each .py file that is going to be installed.
     To use this in a setup.py file for a distribution that is designed
     to run with both Python 2.x and 3.x, add:

          try:
             from distutils.command.build_py import build_py_2to3 as build_py
          except ImportError:
             from distutils.command.build_py import build_py

     to your setup.py, and later:

          cmdclass = {'build_py': build_py}

     to the invocation of setup().


File: python.info,  Node: distutils command build_scripts --- Build the scripts of a package,  Next: distutils command clean --- Clean a package build area,  Prev: distutils command build_py --- Build the py/ pyc files of a package,  Up: API Reference

17.10.37 ‘distutils.command.build_scripts’ — Build the scripts of a package
---------------------------------------------------------------------------


File: python.info,  Node: distutils command clean --- Clean a package build area,  Next: distutils command config --- Perform package configuration,  Prev: distutils command build_scripts --- Build the scripts of a package,  Up: API Reference

17.10.38 ‘distutils.command.clean’ — Clean a package build area
---------------------------------------------------------------

This command removes the temporary files created by ‘build’ and its
subcommands, like intermediary compiled object files.  With the ‘--all’
option, the complete build directory will be removed.

Extension modules built *note in place: 3aac. will not be cleaned, as
they are not in the build directory.


File: python.info,  Node: distutils command config --- Perform package configuration,  Next: distutils command install --- Install a package,  Prev: distutils command clean --- Clean a package build area,  Up: API Reference

17.10.39 ‘distutils.command.config’ — Perform package configuration
-------------------------------------------------------------------


File: python.info,  Node: distutils command install --- Install a package,  Next: distutils command install_data --- Install data files from a package,  Prev: distutils command config --- Perform package configuration,  Up: API Reference

17.10.40 ‘distutils.command.install’ — Install a package
--------------------------------------------------------


File: python.info,  Node: distutils command install_data --- Install data files from a package,  Next: distutils command install_headers --- Install C/C++ header files from a package,  Prev: distutils command install --- Install a package,  Up: API Reference

17.10.41 ‘distutils.command.install_data’ — Install data files from a package
-----------------------------------------------------------------------------


File: python.info,  Node: distutils command install_headers --- Install C/C++ header files from a package,  Next: distutils command install_lib --- Install library files from a package,  Prev: distutils command install_data --- Install data files from a package,  Up: API Reference

17.10.42 ‘distutils.command.install_headers’ — Install C/C++ header files from a package
----------------------------------------------------------------------------------------


File: python.info,  Node: distutils command install_lib --- Install library files from a package,  Next: distutils command install_scripts --- Install script files from a package,  Prev: distutils command install_headers --- Install C/C++ header files from a package,  Up: API Reference

17.10.43 ‘distutils.command.install_lib’ — Install library files from a package
-------------------------------------------------------------------------------


File: python.info,  Node: distutils command install_scripts --- Install script files from a package,  Next: distutils command register --- Register a module with the Python Package Index,  Prev: distutils command install_lib --- Install library files from a package,  Up: API Reference

17.10.44 ‘distutils.command.install_scripts’ — Install script files from a package
----------------------------------------------------------------------------------


File: python.info,  Node: distutils command register --- Register a module with the Python Package Index,  Next: distutils command check --- Check the meta-data of a package,  Prev: distutils command install_scripts --- Install script files from a package,  Up: API Reference

17.10.45 ‘distutils.command.register’ — Register a module with the Python Package Index
---------------------------------------------------------------------------------------

The ‘register’ command registers the package with the Python Package
Index.  This is described in more detail in PEP 301(1).

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0301


File: python.info,  Node: distutils command check --- Check the meta-data of a package,  Prev: distutils command register --- Register a module with the Python Package Index,  Up: API Reference

17.10.46 ‘distutils.command.check’ — Check the meta-data of a package
---------------------------------------------------------------------

The ‘check’ command performs some tests on the meta-data of a package.
For example, it verifies that all required meta-data are provided as the
arguments passed to the ‘setup()’ function.


File: python.info,  Node: Installing Python Modules Legacy version,  Next: Python Module Index,  Prev: Distributing Python Modules Legacy version,  Up: Top

18 Installing Python Modules (Legacy version)
*********************************************


Author: Greg Ward

This document describes the Python Distribution Utilities ("Distutils")
from the end-user’s point-of-view, describing how to extend the
capabilities of a standard Python installation by building and
installing third-party Python modules and extensions.

     Note: This guide only covers the basic tools for building and
     distributing extensions that are provided as part of this version
     of Python.  Third party tools offer easier to use and more secure
     alternatives.  Refer to the quick recommendations section(1) in the
     Python Packaging User Guide for more information.

* Menu:

* Introduction: Introduction<17>. 
* Standard Build and Install:: 
* Alternate Installation:: 
* Custom Installation:: 
* Distutils Configuration Files:: 
* Building Extensions; Tips and Tricks: Building Extensions Tips and Tricks. 

   ---------- Footnotes ----------

   (1) https://packaging.python.org/en/latest/current/


File: python.info,  Node: Introduction<17>,  Next: Standard Build and Install,  Up: Installing Python Modules Legacy version

18.1 Introduction
=================

Although Python’s extensive standard library covers many programming
needs, there often comes a time when you need to add some new
functionality to your Python installation in the form of third-party
modules.  This might be necessary to support your own programming, or to
support an application that you want to use and that happens to be
written in Python.

In the past, there has been little support for adding third-party
modules to an existing Python installation.  With the introduction of
the Python Distribution Utilities (Distutils for short) in Python 2.0,
this changed.

This document is aimed primarily at the people who need to install
third-party Python modules: end-users and system administrators who just
need to get some Python application running, and existing Python
programmers who want to add some new goodies to their toolbox.  You
don’t need to know Python to read this document; there will be some
brief forays into using Python’s interactive mode to explore your
installation, but that’s it.  If you’re looking for information on how
to distribute your own Python modules so that others may use them, see
the *note Distributing Python Modules (Legacy version): 3e8. manual.
*note Debugging the setup script: 3aa7. may also be of interest.

* Menu:

* Best case; trivial installation: Best case trivial installation. 
* The new standard; Distutils: The new standard Distutils. 


File: python.info,  Node: Best case trivial installation,  Next: The new standard Distutils,  Up: Introduction<17>

18.1.1 Best case: trivial installation
--------------------------------------

In the best case, someone will have prepared a special version of the
module distribution you want to install that is targeted specifically at
your platform and is installed just like any other software on your
platform.  For example, the module developer might make an executable
installer available for Windows users, an RPM package for users of
RPM-based Linux systems (Red Hat, SuSE, Mandrake, and many others), a
Debian package for users of Debian-based Linux systems, and so forth.

In that case, you would download the installer appropriate to your
platform and do the obvious thing with it: run it if it’s an executable
installer, ‘rpm --install’ it if it’s an RPM, etc.  You don’t need to
run Python or a setup script, you don’t need to compile anything—you
might not even need to read any instructions (although it’s always a
good idea to do so anyway).

Of course, things will not always be that easy.  You might be interested
in a module distribution that doesn’t have an easy-to-use installer for
your platform.  In that case, you’ll have to start with the source
distribution released by the module’s author/maintainer.  Installing
from a source distribution is not too hard, as long as the modules are
packaged in the standard way.  The bulk of this document is about
building and installing modules from standard source distributions.


File: python.info,  Node: The new standard Distutils,  Prev: Best case trivial installation,  Up: Introduction<17>

18.1.2 The new standard: Distutils
----------------------------------

If you download a module source distribution, you can tell pretty
quickly if it was packaged and distributed in the standard way, i.e.
using the Distutils.  First, the distribution’s name and version number
will be featured prominently in the name of the downloaded archive, e.g.
‘foo-1.0.tar.gz’ or ‘widget-0.9.7.zip’.  Next, the archive will unpack
into a similarly-named directory: ‘foo-1.0’ or ‘widget-0.9.7’.
Additionally, the distribution will contain a setup script ‘setup.py’,
and a file named ‘README.txt’ or possibly just ‘README’, which should
explain that building and installing the module distribution is a simple
matter of running one command from a terminal:

     python setup.py install

For Windows, this command should be run from a command prompt window
(Start ‣ Accessories):

     setup.py install

If all these things are true, then you already know how to build and
install the modules you’ve just downloaded: Run the command above.
Unless you need to install things in a non-standard way or customize the
build process, you don’t really need this manual.  Or rather, the above
command is everything you need to get out of this manual.


File: python.info,  Node: Standard Build and Install,  Next: Alternate Installation,  Prev: Introduction<17>,  Up: Installing Python Modules Legacy version

18.2 Standard Build and Install
===============================

As described in section *note The new standard; Distutils: 3b89,
building and installing a module distribution using the Distutils is
usually one simple command to run from a terminal:

     python setup.py install

* Menu:

* Platform variations:: 
* Splitting the job up:: 
* How building works:: 
* How installation works:: 


File: python.info,  Node: Platform variations,  Next: Splitting the job up,  Up: Standard Build and Install

18.2.1 Platform variations
--------------------------

You should always run the setup command from the distribution root
directory, i.e.  the top-level subdirectory that the module source
distribution unpacks into.  For example, if you’ve just downloaded a
module source distribution ‘foo-1.0.tar.gz’ onto a Unix system, the
normal thing to do is:

     gunzip -c foo-1.0.tar.gz | tar xf -    # unpacks into directory foo-1.0
     cd foo-1.0
     python setup.py install

On Windows, you’d probably download ‘foo-1.0.zip’.  If you downloaded
the archive file to ‘C:\Temp’, then it would unpack into
‘C:\Temp\foo-1.0’; you can use either an archive manipulator with a
graphical user interface (such as WinZip) or a command-line tool (such
as ‘unzip’ or ‘pkunzip’) to unpack the archive.  Then, open a command
prompt window and run:

     cd c:\Temp\foo-1.0
     python setup.py install


File: python.info,  Node: Splitting the job up,  Next: How building works,  Prev: Platform variations,  Up: Standard Build and Install

18.2.2 Splitting the job up
---------------------------

Running ‘setup.py install’ builds and installs all modules in one run.
If you prefer to work incrementally—especially useful if you want to
customize the build process, or if things are going wrong—you can use
the setup script to do one thing at a time.  This is particularly
helpful when the build and install will be done by different users—for
example, you might want to build a module distribution and hand it off
to a system administrator for installation (or do it yourself, with
super-user privileges).

For example, you can build everything in one step, and then install
everything in a second step, by invoking the setup script twice:

     python setup.py build
     python setup.py install

If you do this, you will notice that running the ‘install’ command first
runs the ‘build’ command, which—in this case—quickly notices that it has
nothing to do, since everything in the ‘build’ directory is up-to-date.

You may not need this ability to break things down often if all you do
is install modules downloaded off the ’net, but it’s very handy for more
advanced tasks.  If you get into distributing your own Python modules
and extensions, you’ll run lots of individual Distutils commands on
their own.


File: python.info,  Node: How building works,  Next: How installation works,  Prev: Splitting the job up,  Up: Standard Build and Install

18.2.3 How building works
-------------------------

As implied above, the ‘build’ command is responsible for putting the
files to install into a `build directory'.  By default, this is ‘build’
under the distribution root; if you’re excessively concerned with speed,
or want to keep the source tree pristine, you can change the build
directory with the ‘--build-base’ option.  For example:

     python setup.py build --build-base=/path/to/pybuild/foo-1.0

(Or you could do this permanently with a directive in your system or
personal Distutils configuration file; see section *note Distutils
Configuration Files: 3b93.)  Normally, this isn’t necessary.

The default layout for the build tree is as follows:

     --- build/ --- lib/
     or
     --- build/ --- lib.<plat>/
                    temp.<plat>/

where ‘<plat>’ expands to a brief description of the current OS/hardware
platform and Python version.  The first form, with just a ‘lib’
directory, is used for "pure module distributions"—that is, module
distributions that include only pure Python modules.  If a module
distribution contains any extensions (modules written in C/C++), then
the second form, with two ‘<plat>’ directories, is used.  In that case,
the ‘temp.`plat'’ directory holds temporary files generated by the
compile/link process that don’t actually get installed.  In either case,
the ‘lib’ (or ‘lib.`plat'’) directory contains all Python modules (pure
Python and extensions) that will be installed.

In the future, more directories will be added to handle Python scripts,
documentation, binary executables, and whatever else is needed to handle
the job of installing Python modules and applications.


File: python.info,  Node: How installation works,  Prev: How building works,  Up: Standard Build and Install

18.2.4 How installation works
-----------------------------

After the ‘build’ command runs (whether you run it explicitly, or the
‘install’ command does it for you), the work of the ‘install’ command is
relatively simple: all it has to do is copy everything under ‘build/lib’
(or ‘build/lib.`plat'’) to your chosen installation directory.

If you don’t choose an installation directory—i.e., if you just run
‘setup.py install’—then the ‘install’ command installs to the standard
location for third-party Python modules.  This location varies by
platform and by how you built/installed Python itself.  On Unix (and Mac
OS X, which is also Unix-based), it also depends on whether the module
distribution being installed is pure Python or contains extensions
("non-pure"):

Platform              Standard installation location                            Default value                                          Notes
                                                                                                                                       
---------------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                       
Unix (pure)           ‘`prefix'/lib/python`X.Y'/site-packages’                  ‘/usr/local/lib/python`X.Y'/site-packages’             (1)
                                                                                                                                       
                                                                                                                                       
Unix (non-pure)       ‘`exec-prefix'/lib/python`X.Y'/site-packages’             ‘/usr/local/lib/python`X.Y'/site-packages’             (1)
                                                                                                                                       
                                                                                                                                       
Windows               ‘`prefix'\Lib\site-packages’                              ‘C:\Python`XY'\Lib\site-packages’                      (2)
                                                                                                                                       

Notes:

  1. Most Linux distributions include Python as a standard part of the
     system, so ‘`prefix'’ and ‘`exec-prefix'’ are usually both ‘/usr’
     on Linux.  If you build Python yourself on Linux (or any Unix-like
     system), the default ‘`prefix'’ and ‘`exec-prefix'’ are
     ‘/usr/local’.

  2. The default installation directory on Windows was ‘C:\Program
     Files\Python’ under Python 1.6a1, 1.5.2, and earlier.

‘`prefix'’ and ‘`exec-prefix'’ stand for the directories that Python is
installed to, and where it finds its libraries at run-time.  They are
always the same under Windows, and very often the same under Unix and
Mac OS X. You can find out what your Python installation uses for
‘`prefix'’ and ‘`exec-prefix'’ by running Python in interactive mode and
typing a few simple commands.  Under Unix, just type ‘python’ at the
shell prompt.  Under Windows, choose Start ‣ Programs ‣ Python X.Y ‣
Python (command line).  Once the interpreter is started, you type Python
code at the prompt.  For example, on my Linux system, I type the three
Python statements shown below, and get the output as shown, to find out
my ‘`prefix'’ and ‘`exec-prefix'’:

     Python 2.4 (#26, Aug  7 2004, 17:19:02)
     Type "help", "copyright", "credits" or "license" for more information.
     >>> import sys
     >>> sys.prefix
     '/usr'
     >>> sys.exec_prefix
     '/usr'

A few other placeholders are used in this document: ‘`X.Y'’ stands for
the version of Python, for example ‘3.2’; ‘`abiflags'’ will be replaced
by the value of *note sys.abiflags: 2e24. or the empty string for
platforms which don’t define ABI flags; ‘`distname'’ will be replaced by
the name of the module distribution being installed.  Dots and
capitalization are important in the paths; for example, a value that
uses ‘python3.2’ on UNIX will typically use ‘Python32’ on Windows.

If you don’t want to install modules to the standard location, or if you
don’t have permission to write there, then you need to read about
alternate installations in section *note Alternate Installation: 3b96.
If you want to customize your installation directories more heavily, see
section *note Custom Installation: 3b97. on custom installations.


File: python.info,  Node: Alternate Installation,  Next: Custom Installation,  Prev: Standard Build and Install,  Up: Installing Python Modules Legacy version

18.3 Alternate Installation
===========================

Often, it is necessary or desirable to install modules to a location
other than the standard location for third-party Python modules.  For
example, on a Unix system you might not have permission to write to the
standard third-party module directory.  Or you might wish to try out a
module before making it a standard part of your local Python
installation.  This is especially true when upgrading a distribution
already present: you want to make sure your existing base of scripts
still works with the new version before actually upgrading.

The Distutils ‘install’ command is designed to make installing module
distributions to an alternate location simple and painless.  The basic
idea is that you supply a base directory for the installation, and the
‘install’ command picks a set of directories (called an `installation
scheme') under this base directory in which to install files.  The
details differ across platforms, so read whichever of the following
sections applies to you.

Note that the various alternate installation schemes are mutually
exclusive: you can pass ‘--user’, or ‘--home’, or ‘--prefix’ and
‘--exec-prefix’, or ‘--install-base’ and ‘--install-platbase’, but you
can’t mix from these groups.

* Menu:

* Alternate installation; the user scheme: Alternate installation the user scheme. 
* Alternate installation; the home scheme: Alternate installation the home scheme. 
* Alternate installation; Unix (the prefix scheme): Alternate installation Unix the prefix scheme. 
* Alternate installation; Windows (the prefix scheme): Alternate installation Windows the prefix scheme. 


File: python.info,  Node: Alternate installation the user scheme,  Next: Alternate installation the home scheme,  Up: Alternate Installation

18.3.1 Alternate installation: the user scheme
----------------------------------------------

This scheme is designed to be the most convenient solution for users
that don’t have write permission to the global site-packages directory
or don’t want to install into it.  It is enabled with a simple option:

     python setup.py install --user

Files will be installed into subdirectories of *note site.USER_BASE:
d18. (written as ‘`userbase'’ hereafter).  This scheme installs pure
Python modules and extension modules in the same location (also known as
*note site.USER_SITE: d0a.).  Here are the values for UNIX, including
Mac OS X:

Type of file        Installation directory
                    
------------------------------------------------------------------------------------
                    
modules             ‘`userbase'/lib/python`X.Y'/site-packages’
                    
                    
scripts             ‘`userbase'/bin’
                    
                    
data                ‘`userbase'’
                    
                    
C headers           ‘`userbase'/include/python`X.Y'`abiflags'/`distname'’
                    

And here are the values used on Windows:

Type of file        Installation directory
                    
------------------------------------------------------------------------------------
                    
modules             ‘`userbase'\Python`XY'\site-packages’
                    
                    
scripts             ‘`userbase'\Python`XY'\Scripts’
                    
                    
data                ‘`userbase'’
                    
                    
C headers           ‘`userbase'\Python`XY'\Include\`distname'’
                    

The advantage of using this scheme compared to the other ones described
below is that the user site-packages directory is under normal
conditions always included in *note sys.path: 16c. (see *note site: e9.
for more information), which means that there is no additional step to
perform after running the ‘setup.py’ script to finalize the
installation.

The ‘build_ext’ command also has a ‘--user’ option to add
‘`userbase'/include’ to the compiler search path for header files and
‘`userbase'/lib’ to the compiler search path for libraries as well as to
the runtime search path for shared C libraries (rpath).


File: python.info,  Node: Alternate installation the home scheme,  Next: Alternate installation Unix the prefix scheme,  Prev: Alternate installation the user scheme,  Up: Alternate Installation

18.3.2 Alternate installation: the home scheme
----------------------------------------------

The idea behind the "home scheme" is that you build and maintain a
personal stash of Python modules.  This scheme’s name is derived from
the idea of a "home" directory on Unix, since it’s not unusual for a
Unix user to make their home directory have a layout similar to ‘/usr/’
or ‘/usr/local/’.  This scheme can be used by anyone, regardless of the
operating system they are installing for.

Installing a new module distribution is as simple as

     python setup.py install --home=<dir>

where you can supply any directory you like for the ‘--home’ option.  On
Unix, lazy typists can just type a tilde (‘~’); the ‘install’ command
will expand this to your home directory:

     python setup.py install --home=~

To make Python find the distributions installed with this scheme, you
may have to *note modify Python’s search path: 3b9c. or edit
‘sitecustomize’ (see *note site: e9.) to call *note site.addsitedir():
2eef. or edit *note sys.path: 16c.

The ‘--home’ option defines the installation base directory.  Files are
installed to the following directories under the installation base as
follows:

Type of file        Installation directory
                    
------------------------------------------------------------------------------------
                    
modules             ‘`home'/lib/python’
                    
                    
scripts             ‘`home'/bin’
                    
                    
data                ‘`home'’
                    
                    
C headers           ‘`home'/include/python/`distname'’
                    

(Mentally replace slashes with backslashes if you’re on Windows.)


File: python.info,  Node: Alternate installation Unix the prefix scheme,  Next: Alternate installation Windows the prefix scheme,  Prev: Alternate installation the home scheme,  Up: Alternate Installation

18.3.3 Alternate installation: Unix (the prefix scheme)
-------------------------------------------------------

The "prefix scheme" is useful when you wish to use one Python
installation to perform the build/install (i.e., to run the setup
script), but install modules into the third-party module directory of a
different Python installation (or something that looks like a different
Python installation).  If this sounds a trifle unusual, it is—that’s why
the user and home schemes come before.  However, there are at least two
known cases where the prefix scheme will be useful.

First, consider that many Linux distributions put Python in ‘/usr’,
rather than the more traditional ‘/usr/local’.  This is entirely
appropriate, since in those cases Python is part of "the system" rather
than a local add-on.  However, if you are installing Python modules from
source, you probably want them to go in ‘/usr/local/lib/python2.`X'’
rather than ‘/usr/lib/python2.`X'’.  This can be done with

     /usr/bin/python setup.py install --prefix=/usr/local

Another possibility is a network filesystem where the name used to write
to a remote directory is different from the name used to read it: for
example, the Python interpreter accessed as ‘/usr/local/bin/python’
might search for modules in ‘/usr/local/lib/python2.`X'’, but those
modules would have to be installed to, say,
‘/mnt/`@server'/export/lib/python2.`X'’.  This could be done with

     /usr/local/bin/python setup.py install --prefix=/mnt/@server/export

In either case, the ‘--prefix’ option defines the installation base, and
the ‘--exec-prefix’ option defines the platform-specific installation
base, which is used for platform-specific files.  (Currently, this just
means non-pure module distributions, but could be expanded to C
libraries, binary executables, etc.)  If ‘--exec-prefix’ is not
supplied, it defaults to ‘--prefix’.  Files are installed as follows:

Type of file          Installation directory
                      
-------------------------------------------------------------------------------------
                      
Python modules        ‘`prefix'/lib/python`X.Y'/site-packages’
                      
                      
extension modules     ‘`exec-prefix'/lib/python`X.Y'/site-packages’
                      
                      
scripts               ‘`prefix'/bin’
                      
                      
data                  ‘`prefix'’
                      
                      
C headers             ‘`prefix'/include/python`X.Y'`abiflags'/`distname'’
                      

There is no requirement that ‘--prefix’ or ‘--exec-prefix’ actually
point to an alternate Python installation; if the directories listed
above do not already exist, they are created at installation time.

Incidentally, the real reason the prefix scheme is important is simply
that a standard Unix installation uses the prefix scheme, but with
‘--prefix’ and ‘--exec-prefix’ supplied by Python itself as ‘sys.prefix’
and ‘sys.exec_prefix’.  Thus, you might think you’ll never use the
prefix scheme, but every time you run ‘python setup.py install’ without
any other options, you’re using it.

Note that installing extensions to an alternate Python installation has
no effect on how those extensions are built: in particular, the Python
header files (‘Python.h’ and friends) installed with the Python
interpreter used to run the setup script will be used in compiling
extensions.  It is your responsibility to ensure that the interpreter
used to run extensions installed in this way is compatible with the
interpreter used to build them.  The best way to do this is to ensure
that the two interpreters are the same version of Python (possibly
different builds, or possibly copies of the same build).  (Of course, if
your ‘--prefix’ and ‘--exec-prefix’ don’t even point to an alternate
Python installation, this is immaterial.)


File: python.info,  Node: Alternate installation Windows the prefix scheme,  Prev: Alternate installation Unix the prefix scheme,  Up: Alternate Installation

18.3.4 Alternate installation: Windows (the prefix scheme)
----------------------------------------------------------

Windows has no concept of a user’s home directory, and since the
standard Python installation under Windows is simpler than under Unix,
the ‘--prefix’ option has traditionally been used to install additional
packages in separate locations on Windows.

     python setup.py install --prefix="\Temp\Python"

to install modules to the ‘\Temp\Python’ directory on the current drive.

The installation base is defined by the ‘--prefix’ option; the
‘--exec-prefix’ option is not supported under Windows, which means that
pure Python modules and extension modules are installed into the same
location.  Files are installed as follows:

Type of file        Installation directory
                    
-----------------------------------------------------------------------------------
                    
modules             ‘`prefix'\Lib\site-packages’
                    
                    
scripts             ‘`prefix'\Scripts’
                    
                    
data                ‘`prefix'’
                    
                    
C headers           ‘`prefix'\Include\`distname'’
                    


File: python.info,  Node: Custom Installation,  Next: Distutils Configuration Files,  Prev: Alternate Installation,  Up: Installing Python Modules Legacy version

18.4 Custom Installation
========================

Sometimes, the alternate installation schemes described in section *note
Alternate Installation: 3b96. just don’t do what you want.  You might
want to tweak just one or two directories while keeping everything under
the same base directory, or you might want to completely redefine the
installation scheme.  In either case, you’re creating a `custom
installation scheme'.

To create a custom installation scheme, you start with one of the
alternate schemes and override some of the installation directories used
for the various types of files, using these options:

Type of file               Override option
                           
-------------------------------------------------------
                           
Python modules             ‘--install-purelib’
                           
                           
extension modules          ‘--install-platlib’
                           
                           
all modules                ‘--install-lib’
                           
                           
scripts                    ‘--install-scripts’
                           
                           
data                       ‘--install-data’
                           
                           
C headers                  ‘--install-headers’
                           

These override options can be relative, absolute, or explicitly defined
in terms of one of the installation base directories.  (There are two
installation base directories, and they are normally the same— they only
differ when you use the Unix "prefix scheme" and supply different
‘--prefix’ and ‘--exec-prefix’ options; using ‘--install-lib’ will
override values computed or given for ‘--install-purelib’ and
‘--install-platlib’, and is recommended for schemes that don’t make a
difference between Python and extension modules.)

For example, say you’re installing a module distribution to your home
directory under Unix—but you want scripts to go in ‘~/scripts’ rather
than ‘~/bin’.  As you might expect, you can override this directory with
the ‘--install-scripts’ option; in this case, it makes most sense to
supply a relative path, which will be interpreted relative to the
installation base directory (your home directory, in this case):

     python setup.py install --home=~ --install-scripts=scripts

Another Unix example: suppose your Python installation was built and
installed with a prefix of ‘/usr/local/python’, so under a standard
installation scripts will wind up in ‘/usr/local/python/bin’.  If you
want them in ‘/usr/local/bin’ instead, you would supply this absolute
directory for the ‘--install-scripts’ option:

     python setup.py install --install-scripts=/usr/local/bin

(This performs an installation using the "prefix scheme," where the
prefix is whatever your Python interpreter was installed with—
‘/usr/local/python’ in this case.)

If you maintain Python on Windows, you might want third-party modules to
live in a subdirectory of ‘`prefix'’, rather than right in ‘`prefix'’
itself.  This is almost as easy as customizing the script installation
directory —you just have to remember that there are two types of modules
to worry about, Python and extension modules, which can conveniently be
both controlled by one option:

     python setup.py install --install-lib=Site

The specified installation directory is relative to ‘`prefix'’.  Of
course, you also have to ensure that this directory is in Python’s
module search path, such as by putting a ‘.pth’ file in a site directory
(see *note site: e9.).  See section *note Modifying Python’s Search
Path: 3b9c. to find out how to modify Python’s search path.

If you want to define an entire installation scheme, you just have to
supply all of the installation directory options.  The recommended way
to do this is to supply relative paths; for example, if you want to
maintain all Python module-related files under ‘python’ in your home
directory, and you want a separate directory for each platform that you
use your home directory from, you might define the following
installation scheme:

     python setup.py install --home=~ \
                             --install-purelib=python/lib \
                             --install-platlib=python/lib.$PLAT \
                             --install-scripts=python/scripts
                             --install-data=python/data

or, equivalently,

     python setup.py install --home=~/python \
                             --install-purelib=lib \
                             --install-platlib='lib.$PLAT' \
                             --install-scripts=scripts
                             --install-data=data

‘$PLAT’ is not (necessarily) an environment variable—it will be expanded
by the Distutils as it parses your command line options, just as it does
when parsing your configuration file(s).

Obviously, specifying the entire installation scheme every time you
install a new module distribution would be very tedious.  Thus, you can
put these options into your Distutils config file (see section *note
Distutils Configuration Files: 3b93.):

     [install]
     install-base=$HOME
     install-purelib=python/lib
     install-platlib=python/lib.$PLAT
     install-scripts=python/scripts
     install-data=python/data

or, equivalently,

     [install]
     install-base=$HOME/python
     install-purelib=lib
     install-platlib=lib.$PLAT
     install-scripts=scripts
     install-data=data

Note that these two are `not' equivalent if you supply a different
installation base directory when you run the setup script.  For example,

     python setup.py install --install-base=/tmp

would install pure modules to ‘/tmp/python/lib’ in the first case, and
to ‘/tmp/lib’ in the second case.  (For the second case, you probably
want to supply an installation base of ‘/tmp/python’.)

You probably noticed the use of ‘$HOME’ and ‘$PLAT’ in the sample
configuration file input.  These are Distutils configuration variables,
which bear a strong resemblance to environment variables.  In fact, you
can use environment variables in config files on platforms that have
such a notion but the Distutils additionally define a few extra
variables that may not be in your environment, such as ‘$PLAT’.  (And of
course, on systems that don’t have environment variables, such as Mac OS
9, the configuration variables supplied by the Distutils are the only
ones you can use.)  See section *note Distutils Configuration Files:
3b93. for details.

     Note: When a *note virtual environment: d6c. is activated, any
     options that change the installation path will be ignored from all
     distutils configuration files to prevent inadvertently installing
     projects outside of the virtual environment.

* Menu:

* Modifying Python's Search Path:: 


File: python.info,  Node: Modifying Python's Search Path,  Up: Custom Installation

18.4.1 Modifying Python’s Search Path
-------------------------------------

When the Python interpreter executes an *note import: 881. statement, it
searches for both Python code and extension modules along a search path.
A default value for the path is configured into the Python binary when
the interpreter is built.  You can determine the path by importing the
*note sys: fb. module and printing the value of ‘sys.path’.

     $ python
     Python 2.2 (#11, Oct  3 2002, 13:31:27)
     [GCC 2.96 20000731 (Red Hat Linux 7.3 2.96-112)] on linux2
     Type "help", "copyright", "credits" or "license" for more information.
     >>> import sys
     >>> sys.path
     ['', '/usr/local/lib/python2.3', '/usr/local/lib/python2.3/plat-linux2',
      '/usr/local/lib/python2.3/lib-tk', '/usr/local/lib/python2.3/lib-dynload',
      '/usr/local/lib/python2.3/site-packages']
     >>>

The null string in ‘sys.path’ represents the current working directory.

The expected convention for locally installed packages is to put them in
the ‘`...'/site-packages/’ directory, but you may want to install Python
modules into some arbitrary directory.  For example, your site may have
a convention of keeping all software related to the web server under
‘/www’.  Add-on Python modules might then belong in ‘/www/python’, and
in order to import them, this directory must be added to ‘sys.path’.
There are several different ways to add the directory.

The most convenient way is to add a path configuration file to a
directory that’s already on Python’s path, usually to the
‘.../site-packages/’ directory.  Path configuration files have an
extension of ‘.pth’, and each line must contain a single path that will
be appended to ‘sys.path’.  (Because the new paths are appended to
‘sys.path’, modules in the added directories will not override standard
modules.  This means you can’t use this mechanism for installing fixed
versions of standard modules.)

Paths can be absolute or relative, in which case they’re relative to the
directory containing the ‘.pth’ file.  See the documentation of the
*note site: e9. module for more information.

A slightly less convenient way is to edit the ‘site.py’ file in Python’s
standard library, and modify ‘sys.path’.  ‘site.py’ is automatically
imported when the Python interpreter is executed, unless the *note -S:
766. switch is supplied to suppress this behaviour.  So you could simply
edit ‘site.py’ and add two lines to it:

     import sys
     sys.path.append('/www/python/')

However, if you reinstall the same major version of Python (perhaps when
upgrading from 2.2 to 2.2.2, for example) ‘site.py’ will be overwritten
by the stock version.  You’d have to remember that it was modified and
save a copy before doing the installation.

There are two environment variables that can modify ‘sys.path’.  *note
PYTHONHOME: d04. sets an alternate value for the prefix of the Python
installation.  For example, if *note PYTHONHOME: d04. is set to
‘/www/python’, the search path will be set to ‘['',
'/www/python/lib/pythonX.Y/', '/www/python/lib/pythonX.Y/plat-linux2',
...]’.

The *note PYTHONPATH: 567. variable can be set to a list of paths that
will be added to the beginning of ‘sys.path’.  For example, if *note
PYTHONPATH: 567. is set to ‘/www/python:/opt/py’, the search path will
begin with ‘['/www/python', '/opt/py']’.  (Note that directories must
exist in order to be added to ‘sys.path’; the *note site: e9. module
removes paths that don’t exist.)

Finally, ‘sys.path’ is just a regular Python list, so any Python
application can modify it by adding or removing entries.


File: python.info,  Node: Distutils Configuration Files,  Next: Building Extensions Tips and Tricks,  Prev: Custom Installation,  Up: Installing Python Modules Legacy version

18.5 Distutils Configuration Files
==================================

As mentioned above, you can use Distutils configuration files to record
personal or site preferences for any Distutils options.  That is, any
option to any command can be stored in one of two or three (depending on
your platform) configuration files, which will be consulted before the
command-line is parsed.  This means that configuration files will
override default values, and the command-line will in turn override
configuration files.  Furthermore, if multiple configuration files
apply, values from "earlier" files are overridden by "later" files.

* Menu:

* Location and names of config files:: 
* Syntax of config files:: 


File: python.info,  Node: Location and names of config files,  Next: Syntax of config files,  Up: Distutils Configuration Files

18.5.1 Location and names of config files
-----------------------------------------

The names and locations of the configuration files vary slightly across
platforms.  On Unix and Mac OS X, the three configuration files (in the
order they are processed) are:

Type of file       Location and filename                                          Notes
                                                                                  
----------------------------------------------------------------------------------------------
                                                                                  
system             ‘`prefix'/lib/python`ver'/distutils/distutils.cfg’             (1)
                                                                                  
                                                                                  
personal           ‘$HOME/.pydistutils.cfg’                                       (2)
                                                                                  
                                                                                  
local              ‘setup.cfg’                                                    (3)
                                                                                  

And on Windows, the configuration files are:

Type of file       Location and filename                                 Notes
                                                                         
-------------------------------------------------------------------------------------
                                                                         
system             ‘`prefix'\Lib\distutils\distutils.cfg’                (4)
                                                                         
                                                                         
personal           ‘%HOME%\pydistutils.cfg’                              (5)
                                                                         
                                                                         
local              ‘setup.cfg’                                           (3)
                                                                         

On all platforms, the "personal" file can be temporarily disabled by
passing the ‘–no-user-cfg’ option.

Notes:

  1. Strictly speaking, the system-wide configuration file lives in the
     directory where the Distutils are installed; under Python 1.6 and
     later on Unix, this is as shown.  For Python 1.5.2, the Distutils
     will normally be installed to
     ‘`prefix'/lib/python1.5/site-packages/distutils’, so the system
     configuration file should be put there under Python 1.5.2.

  2. On Unix, if the ‘HOME’ environment variable is not defined, the
     user’s home directory will be determined with the ‘getpwuid()’
     function from the standard *note pwd: d4. module.  This is done by
     the *note os.path.expanduser(): 1569. function used by Distutils.

  3. I.e., in the current directory (usually the location of the setup
     script).

  4. (See also note (1).)  Under Python 1.6 and later, Python’s default
     "installation prefix" is ‘C:\Python’, so the system configuration
     file is normally ‘C:\Python\Lib\distutils\distutils.cfg’.  Under
     Python 1.5.2, the default prefix was ‘C:\Program Files\Python’, and
     the Distutils were not part of the standard library—so the system
     configuration file would be ‘C:\Program
     Files\Python\distutils\distutils.cfg’ in a standard Python 1.5.2
     installation under Windows.

  5. On Windows, if the ‘HOME’ environment variable is not defined,
     ‘USERPROFILE’ then ‘HOMEDRIVE’ and ‘HOMEPATH’ will be tried.  This
     is done by the *note os.path.expanduser(): 1569. function used by
     Distutils.


File: python.info,  Node: Syntax of config files,  Prev: Location and names of config files,  Up: Distutils Configuration Files

18.5.2 Syntax of config files
-----------------------------

The Distutils configuration files all have the same syntax.  The config
files are grouped into sections.  There is one section for each
Distutils command, plus a ‘global’ section for global options that
affect every command.  Each section consists of one option per line,
specified as ‘option=value’.

For example, the following is a complete config file that just forces
all commands to run quietly by default:

     [global]
     verbose=0

If this is installed as the system config file, it will affect all
processing of any Python module distribution by any user on the current
system.  If it is installed as your personal config file (on systems
that support them), it will affect only module distributions processed
by you.  And if it is used as the ‘setup.cfg’ for a particular module
distribution, it affects only that distribution.

You could override the default "build base" directory and make the
‘build*’ commands always forcibly rebuild all files with the following:

     [build]
     build-base=blib
     force=1

which corresponds to the command-line arguments

     python setup.py build --build-base=blib --force

except that including the ‘build’ command on the command-line means that
command will be run.  Including a particular command in config files has
no such implication; it only means that if the command is run, the
options in the config file will apply.  (Or if other commands that
derive values from it are run, they will use the values in the config
file.)

You can find out the complete list of options for any command using the
‘--help’ option, e.g.:

     python setup.py build --help

and you can find out the complete list of global options by using
‘--help’ without a command:

     python setup.py --help

See also the "Reference" section of the "Distributing Python Modules"
manual.


File: python.info,  Node: Building Extensions Tips and Tricks,  Prev: Distutils Configuration Files,  Up: Installing Python Modules Legacy version

18.6 Building Extensions: Tips and Tricks
=========================================

Whenever possible, the Distutils try to use the configuration
information made available by the Python interpreter used to run the
‘setup.py’ script.  For example, the same compiler and linker flags used
to compile Python will also be used for compiling extensions.  Usually
this will work well, but in complicated situations this might be
inappropriate.  This section discusses how to override the usual
Distutils behaviour.

* Menu:

* Tweaking compiler/linker flags:: 
* Using non-Microsoft compilers on Windows:: 


File: python.info,  Node: Tweaking compiler/linker flags,  Next: Using non-Microsoft compilers on Windows,  Up: Building Extensions Tips and Tricks

18.6.1 Tweaking compiler/linker flags
-------------------------------------

Compiling a Python extension written in C or C++ will sometimes require
specifying custom flags for the compiler and linker in order to use a
particular library or produce a special kind of object code.  This is
especially true if the extension hasn’t been tested on your platform, or
if you’re trying to cross-compile Python.

In the most general case, the extension author might have foreseen that
compiling the extensions would be complicated, and provided a ‘Setup’
file for you to edit.  This will likely only be done if the module
distribution contains many separate extension modules, or if they often
require elaborate sets of compiler flags in order to work.

A ‘Setup’ file, if present, is parsed in order to get a list of
extensions to build.  Each line in a ‘Setup’ describes a single module.
Lines have the following structure:

     module ... [sourcefile ...] [cpparg ...] [library ...]

Let’s examine each of the fields in turn.

   * `module' is the name of the extension module to be built, and
     should be a valid Python identifier.  You can’t just change this in
     order to rename a module (edits to the source code would also be
     needed), so this should be left alone.

   * `sourcefile' is anything that’s likely to be a source code file, at
     least judging by the filename.  Filenames ending in ‘.c’ are
     assumed to be written in C, filenames ending in ‘.C’, ‘.cc’, and
     ‘.c++’ are assumed to be C++, and filenames ending in ‘.m’ or ‘.mm’
     are assumed to be in Objective C.

   * `cpparg' is an argument for the C preprocessor, and is anything
     starting with ‘-I’, ‘-D’, ‘-U’ or ‘-C’.

   * `library' is anything ending in ‘.a’ or beginning with *note -l:
     1784. or ‘-L’.

If a particular platform requires a special library on your platform,
you can add it by editing the ‘Setup’ file and running ‘python setup.py
build’.  For example, if the module defined by the line

     foo foomodule.c

must be linked with the math library ‘libm.a’ on your platform, simply
add ‘-lm’ to the line:

     foo foomodule.c -lm

Arbitrary switches intended for the compiler or the linker can be
supplied with the ‘-Xcompiler’ `arg' and ‘-Xlinker’ `arg' options:

     foo foomodule.c -Xcompiler -o32 -Xlinker -shared -lm

The next option after ‘-Xcompiler’ and ‘-Xlinker’ will be appended to
the proper command line, so in the above example the compiler will be
passed the ‘-o32’ option, and the linker will be passed ‘-shared’.  If a
compiler option requires an argument, you’ll have to supply multiple
‘-Xcompiler’ options; for example, to pass ‘-x c++’ the ‘Setup’ file
would have to contain ‘-Xcompiler -x -Xcompiler c++’.

Compiler flags can also be supplied through setting the ‘CFLAGS’
environment variable.  If set, the contents of ‘CFLAGS’ will be added to
the compiler flags specified in the ‘Setup’ file.


File: python.info,  Node: Using non-Microsoft compilers on Windows,  Prev: Tweaking compiler/linker flags,  Up: Building Extensions Tips and Tricks

18.6.2 Using non-Microsoft compilers on Windows
-----------------------------------------------

* Menu:

* Borland/CodeGear C++:: 
* GNU C / Cygwin / MinGW:: 


File: python.info,  Node: Borland/CodeGear C++,  Next: GNU C / Cygwin / MinGW,  Up: Using non-Microsoft compilers on Windows

18.6.2.1 Borland/CodeGear C++
.............................

This subsection describes the necessary steps to use Distutils with the
Borland C++ compiler version 5.5.  First you have to know that Borland’s
object file format (OMF) is different from the format used by the Python
version you can download from the Python or ActiveState Web site.
(Python is built with Microsoft Visual C++, which uses COFF as the
object file format.)  For this reason you have to convert Python’s
library ‘python25.lib’ into the Borland format.  You can do this as
follows:

     coff2omf python25.lib python25_bcpp.lib

The ‘coff2omf’ program comes with the Borland compiler.  The file
‘python25.lib’ is in the ‘Libs’ directory of your Python installation.
If your extension uses other libraries (zlib, ...)  you have to convert
them too.

The converted files have to reside in the same directories as the normal
libraries.

How does Distutils manage to use these libraries with their changed
names?  If the extension needs a library (eg.  ‘foo’) Distutils checks
first if it finds a library with suffix ‘_bcpp’ (eg.  ‘foo_bcpp.lib’)
and then uses this library.  In the case it doesn’t find such a special
library it uses the default name (‘foo.lib’.)  (1)

To let Distutils compile your extension with Borland C++ you now have to
type:

     python setup.py build --compiler=bcpp

If you want to use the Borland C++ compiler as the default, you could
specify this in your personal or system-wide configuration file for
Distutils (see section *note Distutils Configuration Files: 3b93.)

See also
........

C++Builder Compiler(2)

     Information about the free C++ compiler from Borland, including
     links to the download pages.

Creating Python Extensions Using Borland’s Free Compiler(3)

     Document describing how to use Borland’s free command-line C++
     compiler to build Python.

   ---------- Footnotes ----------

   (1) This also means you could replace all existing COFF-libraries
with OMF-libraries of the same name.

   (2) http://www.embarcadero.com/downloads

   (3) http://www.cyberus.ca/~g_will/pyExtenDL.shtml


File: python.info,  Node: GNU C / Cygwin / MinGW,  Prev: Borland/CodeGear C++,  Up: Using non-Microsoft compilers on Windows

18.6.2.2 GNU C / Cygwin / MinGW
...............................

This section describes the necessary steps to use Distutils with the GNU
C/C++ compilers in their Cygwin and MinGW distributions.  (1) For a
Python interpreter that was built with Cygwin, everything should work
without any of these following steps.

Not all extensions can be built with MinGW or Cygwin, but many can.
Extensions most likely to not work are those that use C++ or depend on
Microsoft Visual C extensions.

To let Distutils compile your extension with Cygwin you have to type:

     python setup.py build --compiler=cygwin

and for Cygwin in no-cygwin mode (2) or for MinGW type:

     python setup.py build --compiler=mingw32

If you want to use any of these options/compilers as default, you should
consider writing it in your personal or system-wide configuration file
for Distutils (see section *note Distutils Configuration Files: 3b93.)

* Menu:

* Older Versions of Python and MinGW:: 

   ---------- Footnotes ----------

   (1) Check ‘http://www.sourceware.org/cygwin/’ and
‘http://www.mingw.org/’ for more information

   (2) Then you have no POSIX emulation available, but you also don’t
need ‘cygwin1.dll’.


File: python.info,  Node: Older Versions of Python and MinGW,  Up: GNU C / Cygwin / MinGW

18.6.2.3 Older Versions of Python and MinGW
...........................................

The following instructions only apply if you’re using a version of
Python inferior to 2.4.1 with a MinGW inferior to 3.0.0 (with
binutils-2.13.90-20030111-1).

These compilers require some special libraries.  This task is more
complex than for Borland’s C++, because there is no program to convert
the library.  First you have to create a list of symbols which the
Python DLL exports.  (You can find a good program for this task at
‘http://sourceforge.net/projects/mingw/files/MinGW/Extension/pexports/’).

     pexports python25.dll >python25.def

The location of an installed ‘python25.dll’ will depend on the
installation options and the version and language of Windows.  In a
"just for me" installation, it will appear in the root of the
installation directory.  In a shared installation, it will be located in
the system directory.

Then you can create from these information an import library for gcc.

     /cygwin/bin/dlltool --dllname python25.dll --def python25.def --output-lib libpython25.a

The resulting library has to be placed in the same directory as
‘python25.lib’.  (Should be the ‘libs’ directory under your Python
installation directory.)

If your extension uses other libraries (zlib,...)  you might have to
convert them too.  The converted files have to reside in the same
directories as the normal libraries do.

See also
........

Building Python modules on MS Windows platform with MinGW(1)

     Information about building the required libraries for the MinGW
     environment.

   ---------- Footnotes ----------

   (1) http://old.zope.org/Members/als/tips/win32_mingw_modules


File: python.info,  Node: Python Module Index,  Next: Index,  Prev: Installing Python Modules Legacy version,  Up: Top

Python Module Index
*******************

* Menu:

* __future__: 0. Future statement definitions
* __main__: 1. The environment where the top-level script is run.
* _dummy_thread: 2. Drop-in replacement for the _thread module.
* _thread: 3. Low-level threading API.
* abc: 4. Abstract base classes according to PEP 3119.
* aifc: 5. Read and write audio files in AIFF or AIFC format.
* argparse: 6. Command-line option and argument parsing library.
* array: 7. Space efficient arrays of uniformly typed numeric
                        values.
* ast: 8. Abstract Syntax Tree classes and manipulation.
* asynchat: 9. Support for asynchronous command/response protocols.
* asyncio: a. Asynchronous I/O, event loop, coroutines
                        and tasks.
* asyncore: b. A base class for developing asynchronous socket
                        handling services.
* atexit: c. Register and execute cleanup functions.
* audioop: d. Manipulate raw audio data.
* base64: e. RFC 3548: Base16, Base32, Base64 Data
                        Encodings; Base85 and Ascii85
* bdb: f. Debugger framework.
* binascii: 10. Tools for converting between binary and various ASCII-
                        encoded binary representations.
* binhex: 11. Encode and decode files in binhex4 format.
* bisect: 12. Array bisection algorithms for binary searching.
* builtins: 13. The module that provides the built-in namespace.
* bz2: 14. Interfaces for bzip2 compression and decompression.
* calendar: 15. Functions for working with calendars, including
                        some emulation of the Unix cal program.
* cgi: 16. Helpers for running Python scripts via the Common
                        Gateway Interface.
* cgitb: 17. Configurable traceback handler for CGI scripts.
* chunk: 18. Module to read IFF chunks.
* cmath: 19. Mathematical functions for complex numbers.
* cmd: 1a. Build line-oriented command interpreters.
* code: 1b. Facilities to implement read-eval-print loops.
* codecs: 1c. Encode and decode data and streams.
* codeop: 1d. Compile (possibly incomplete) Python code.
* collections: 1e. Container datatypes
* collections.abc: 1f. Abstract base classes for containers
* colorsys: 20. Conversion functions between RGB and other color
                        systems.
* compileall: 21. Tools for byte-compiling all Python source files in a
                        directory tree.
* concurrent.futures: 22. Execute computations concurrently using threads or
                        processes.
* configparser: 23. Configuration file parser.
* contextlib: 24. Utilities for with-statement contexts.
* copy: 25. Shallow and deep copy operations.
* copyreg: 26. Register pickle support functions.
* cProfile: 27. 
* crypt: 28. The crypt() function used to check Unix passwords.
* csv: 29. Write and read tabular data to and from delimited
                        files.
* ctypes: 2a. A foreign function library for Python.
* curses: 2b. An interface to the curses library, providing
                        portable terminal handling.
* curses.ascii: 2c. Constants and set-membership functions for ASCII
                        characters.
* curses.panel: 2d. A panel stack extension that adds depth to curses
                        windows.
* curses.textpad: 2e. Emacs-like input editing in a curses window.
* datetime: 2f. Basic date and time types.
* dbm: 30. Interfaces to various Unix "database" formats.
* dbm.dumb: 31. Portable implementation of the simple DBM interface.
* dbm.gnu: 32. GNU’s reinterpretation of dbm.
* dbm.ndbm: 33. The standard "database" interface, based on
                        ndbm.
* decimal: 34. Implementation of the General Decimal Arithmetic
                        Specification.
* difflib: 35. Helpers for computing differences between objects.
* dis: 36. Disassembler for Python bytecode.
* distutils: 37. Support for building and installing Python modules
                        into an existing Python installation.
* distutils.archive_util: 38. Utility functions for creating archive files
                          (tarballs, zip files, ...)
* distutils.bcppcompiler: 39. 
* distutils.ccompiler: 3a. Abstract CCompiler class
* distutils.cmd: 3b. This module provides the abstract base class Command.
                        This class is subclassed by the modules in the
                        distutils.command subpackage.
* distutils.command: 3c. This subpackage contains one module for each standard
                        Distutils command.
* distutils.command.bdist: 3d. Build a binary installer for a package
* distutils.command.bdist_dumb: 3e. Build a "dumb" installer - a simple archive of
                                files
* distutils.command.bdist_msi: 3f. Build a binary distribution as a Windows MSI
                               file
* distutils.command.bdist_packager: 40. Abstract base class for packagers
* distutils.command.bdist_rpm: 41. Build a binary distribution as a Redhat RPM and
                               SRPM
* distutils.command.bdist_wininst: 42. Build a Windows installer
* distutils.command.build: 43. Build all files of a package
* distutils.command.build_clib: 44. Build any C libraries in a package
* distutils.command.build_ext: 45. Build any extensions in a package
* distutils.command.build_py: 46. Build the .py/.pyc files of a package
* distutils.command.build_scripts: 47. Build the scripts of a package
* distutils.command.check: 48. Check the metadata of a package
* distutils.command.clean: 49. Clean a package build area
* distutils.command.config: 4a. Perform package configuration
* distutils.command.install: 4b. Install a package
* distutils.command.install_data: 4c. Install data files from a package
* distutils.command.install_headers: 4d. Install C/C++ header files from a package
* distutils.command.install_lib: 4e. Install library files from a package
* distutils.command.install_scripts: 4f. Install script files from a package
* distutils.command.register: 50. Register a module with the Python Package Index
* distutils.command.sdist: 51. Build a source distribution
* distutils.core: 52. The core Distutils functionality
* distutils.cygwinccompiler: 53. 
* distutils.debug: 54. Provides the debug flag for distutils
* distutils.dep_util: 55. Utility functions for simple dependency checking
* distutils.dir_util: 56. Utility functions for operating on directories and
                        directory trees
* distutils.dist: 57. Provides the Distribution class, which
                        represents the module distribution being
                        built/installed/distributed
* distutils.errors: 58. Provides standard distutils exceptions
* distutils.extension: 59. Provides the Extension class, used to describe
                        C/C++ extension modules in setup scripts
* distutils.fancy_getopt: 5a. Additional getopt functionality
* distutils.file_util: 5b. Utility functions for operating on single files
* distutils.filelist: 5c. The FileList class, used for poking about the
                        file system and building lists of files.
* distutils.log: 5d. A simple logging mechanism, 282-style
* distutils.msvccompiler: 5e. Microsoft Compiler
* distutils.spawn: 5f. Provides the spawn() function
* distutils.sysconfig: 60. Low-level access to configuration information of the
                        Python interpreter.
* distutils.text_file: 61. provides the TextFile class, a simple interface
                        to text files
* distutils.unixccompiler: 62. UNIX C Compiler
* distutils.util: 63. Miscellaneous other utility functions
* distutils.version: 64. implements classes that represent module version
                        numbers.
* doctest: 65. Test pieces of code within docstrings.
* dummy_threading: 66. Drop-in replacement for the threading module.
* email: 67. Package supporting the parsing,
                        manipulating, and generating email
                        messages, including MIME documents.
* email.charset: 68. Character Sets
* email.contentmanager: 69. Storing and Retrieving Content from MIME Parts
* email.encoders: 6a. Encoders for email message payloads.
* email.errors: 6b. The exception classes used by the email package.
* email.generator: 6c. Generate flat text email messages from a message
                        structure.
* email.header: 6d. Representing non-ASCII headers
* email.headerregistry: 6e. Automatic Parsing of headers based on the field name
* email.iterators: 6f. Iterate over a message object tree.
* email.message: 70. The base class representing email messages.
* email.mime: 71. Build MIME messages.
* email.parser: 72. Parse flat text email messages to produce a message
                        object structure.
* email.policy: 73. Controlling the parsing and generating of messages
* email.utils: 74. Miscellaneous email package utilities.
* encodings.idna: 75. Internationalized Domain Names implementation
* encodings.mbcs: 76. Windows ANSI codepage
* encodings.utf_8_sig: 77. UTF-8 codec with BOM signature
* ensurepip: 78. Bootstrapping the "pip" installer into an existing
                        Python installation or virtual environment.
* enum: 79. Implementation of an enumeration class.
* errno: 7a. Standard errno system symbols.
* faulthandler: 7b. Dump the Python traceback.
* fcntl: 7c. The fcntl() and ioctl() system calls.
* filecmp: 7d. Compare files efficiently.
* fileinput: 7e. Loop over standard input or a list of files.
* fnmatch: 7f. Unix shell style filename pattern matching.
* formatter: 80. Generic output formatter and device interface.
* fpectl: 81. Provide control for floating point exception handling.
* fractions: 82. Rational numbers.
* ftplib: 83. FTP protocol client (requires sockets).
* functools: 84. Higher-order functions and operations on callable
                        objects.
* gc: 85. Interface to the cycle-detecting garbage collector.
* getopt: 86. Portable parser for command line options; support both
                        short and long option names.
* getpass: 87. Portable reading of passwords and retrieval of the
                        userid.
* gettext: 88. Multilingual internationalization services.
* glob: 89. Unix shell style pathname pattern expansion.
* grp: 8a. The group database (getgrnam() and friends).
* gzip: 8b. Interfaces for gzip compression and decompression
                        using file objects.
* hashlib: 8c. Secure hash and message digest algorithms.
* heapq: 8d. Heap queue algorithm (a.k.a. priority queue).
* hmac: 8e. Keyed-Hashing for Message Authentication (HMAC)
                        implementation
* html: 8f. Helpers for manipulating HTML.
* html.entities: 90. Definitions of HTML general entities.
* html.parser: 91. A simple parser that can handle HTML and XHTML.
* http: 92. HTTP status codes and messages
* http.client: 93. HTTP and HTTPS protocol client (requires sockets).
* http.cookiejar: 94. Classes for automatic handling of HTTP cookies.
* http.cookies: 95. Support for HTTP state management (cookies).
* http.server: 96. HTTP server and request handlers.
* imaplib: 97. IMAP4 protocol client (requires sockets).
* imghdr: 98. Determine the type of image contained in a file or
                        byte stream.
* imp: 99. Access the implementation of the import statement.
* importlib: 9a. The implementation of the import machinery.
* importlib.abc: 9b. Abstract base classes related to import
* importlib.machinery: 9c. Importers and path hooks
* importlib.util: 9d. Utility code for importers
* inspect: 9e. Extract information and source code from live objects.
* io: 9f. Core tools for working with streams.
* ipaddress: a0. IPv4/IPv6 manipulation library.
* itertools: a1. Functions creating iterators for efficient looping.
* json: a2. Encode and decode the JSON format.
* json.tool: a3. 
* keyword: a4. Test whether a string is a keyword in Python.
* lib2to3: a5. the 2to3 library
* linecache: a6. This module provides random access to individual lines
                        from text files.
* locale: a7. Internationalization services.
* logging: a8. Flexible event logging system for applications.
* logging.config: a9. Configuration of the logging module.
* logging.handlers: aa. Handlers for the logging module.
* lzma: ab. A Python wrapper for the liblzma compression library.
* macpath: ac. Mac OS 9 path manipulation functions.
* mailbox: ad. Manipulate mailboxes in various formats
* mailcap: ae. Mailcap file handling.
* marshal: af. Convert Python objects to streams of bytes and back
                        (with different constraints).
* math: b0. Mathematical functions (sin() etc.).
* mimetypes: b1. Mapping of filename extensions to MIME types.
* mmap: b2. Interface to memory-mapped files for Unix and Windows.
* modulefinder: b3. Find modules used by a script.
* msilib: b4. Creation of Microsoft Installer files, and CAB
                        files.
* msvcrt: b5. Miscellaneous useful routines from the MS VC++
                        runtime.
* multiprocessing: b6. Process-based parallelism.
* multiprocessing.connection: b7. API for dealing with sockets.
* multiprocessing.dummy: b8. Dumb wrapper around threading.
* multiprocessing.managers: b9. Share data between process with shared objects.
* multiprocessing.pool: ba. Create pools of processes.
* multiprocessing.sharedctypes: bb. Allocate ctypes objects from shared memory.
* netrc: bc. Loading of .netrc files.
* nis: bd. Interface to Sun’s NIS (Yellow Pages) library.
* nntplib: be. NNTP protocol client (requires sockets).
* numbers: bf. Numeric abstract base classes (Complex,
                        Real, Integral, etc.).
* operator: c0. Functions corresponding to the standard operators.
* optparse: c1. Command-line option parsing library.
* os: c2. Miscellaneous operating system interfaces.
* os.path: c3. Operations on pathnames.
* ossaudiodev: c4. Access to OSS-compatible audio devices.
* parser: c5. Access parse trees for Python source code.
* pathlib: c6. Object-oriented filesystem paths
* pdb: c7. The Python debugger for interactive interpreters.
* pickle: c8. Convert Python objects to streams of bytes and back.
* pickletools: c9. Contains extensive comments about the pickle protocols
                        and pickle-machine opcodes, as well as some
                        useful functions.
* pipes: ca. A Python interface to Unix shell pipelines.
* pkgutil: cb. Utilities for the import system.
* platform: cc. Retrieves as much platform identifying data as
                        possible.
* plistlib: cd. Generate and parse Mac OS X plist files.
* poplib: ce. POP3 protocol client (requires sockets).
* posix: cf. The most common POSIX system calls (normally used via
                        module os).
* pprint: d0. Data pretty printer.
* profile: d1. Python source profiler.
* pstats: d2. Statistics object for use with the profiler.
* pty: d3. Pseudo-Terminal Handling for Linux.
* pwd: d4. The password database (getpwnam() and friends).
* py_compile: d5. Generate byte-code files from Python source files.
* pyclbr: d6. Supports information extraction for a Python class
                        browser.
* pydoc: d7. Documentation generator and online help system.
* queue: d8. A synchronized queue class.
* quopri: d9. Encode and decode files using the MIME quoted-
                        printable encoding.
* random: da. Generate pseudo-random numbers with various common
                        distributions.
* re: db. Regular expression operations.
* readline: dc. GNU readline support for Python.
* reprlib: dd. Alternate repr() implementation with size limits.
* resource: de. An interface to provide resource usage information on
                        the current process.
* rlcompleter: df. Python identifier completion, suitable for the
                        GNU readline library.
* runpy: e0. Locate and run Python modules without importing them
                        first.
* sched: e1. General purpose event scheduler.
* secrets: e2. Generate secure random numbers for managing secrets.
* select: e3. Wait for I/O completion on multiple streams.
* selectors: e4. High-level I/O multiplexing.
* shelve: e5. Python object persistence.
* shlex: e6. Simple lexical analysis for Unix shell-like languages.
* shutil: e7. High-level file operations, including copying.
* signal: e8. Set handlers for asynchronous events.
* site: e9. Module responsible for site-specific configuration.
* smtpd: ea. A SMTP server implementation in Python.
* smtplib: eb. SMTP protocol client (requires sockets).
* sndhdr: ec. Determine type of a sound file.
* socket: ed. Low-level networking interface.
* socketserver: ee. A framework for network servers.
* spwd: ef. The shadow password database (getspnam() and friends).
* sqlite3: f0. A DB-API 2.0 implementation using SQLite 3.x.
* ssl: f1. TLS/SSL wrapper for socket objects
* stat: f2. Utilities for interpreting the results of
                        os.stat(), os.lstat() and os.fstat().
* statistics: f3. mathematical statistics functions
* string: f4. Common string operations.
* stringprep: f5. String preparation, as per RFC 3453
* struct: f6. Interpret bytes as packed binary data.
* subprocess: f7. Subprocess management.
* sunau: f8. Provide an interface to the Sun AU sound format.
* symbol: f9. Constants representing internal nodes of the parse
                        tree.
* symtable: fa. Interface to the compiler’s internal symbol tables.
* sys: fb. Access system-specific parameters and functions.
* sysconfig: fc. Python’s configuration information
* syslog: fd. An interface to the Unix syslog library routines.
* tabnanny: fe. Tool for detecting white space related problems in
                        Python source files in a directory tree.
* tarfile: ff. Read and write tar-format archive files.
* telnetlib: 100. Telnet client class.
* tempfile: 101. Generate temporary files and directories.
* termios: 102. POSIX style tty control.
* test: 103. Regression tests package containing the testing suite
                        for Python.
* test.support: 104. Support for Python’s regression test suite.
* textwrap: 105. Text wrapping and filling
* threading: 106. Thread-based parallelism.
* time: 107. Time access and conversions.
* timeit: 108. Measure the execution time of small code snippets.
* tkinter: 109. Interface to Tcl/Tk for graphical user interfaces
* tkinter.scrolledtext: 10a. Text widget with a vertical scroll bar.
* tkinter.tix: 10b. Tk Extension Widgets for Tkinter
* tkinter.ttk: 10c. Tk themed widget set
* token: 10d. Constants representing terminal nodes of the parse
                        tree.
* tokenize: 10e. Lexical scanner for Python source code.
* trace: 10f. Trace or track Python statement execution.
* traceback: 110. Print or retrieve a stack traceback.
* tracemalloc: 111. Trace memory allocations.
* tty: 112. Utility functions that perform common terminal control
                        operations.
* turtle: 113. An educational framework for simple graphics
                        applications
* turtledemo: 114. A viewer for example turtle scripts
* types: 115. Names for built-in types.
* typing: 116. Support for type hints (see PEP 484).
* unicodedata: 117. Access the Unicode Database.
* unittest: 118. Unit testing framework for Python.
* unittest.mock: 119. Mock object library.
* urllib: 11a. 
* urllib.error: 11b. Exception classes raised by urllib.request.
* urllib.parse: 11c. Parse URLs into or assemble them from components.
* urllib.request: 11d. Extensible library for opening URLs.
* urllib.response: 11e. Response classes used by urllib.
* urllib.robotparser: 11f. Load a robots.txt file and answer questions about
                        fetchability of other URLs.
* uu: 120. Encode and decode files in uuencode format.
* uuid: 121. UUID objects (universally unique identifiers)
                        according to RFC 4122
* venv: 122. Creation of virtual environments.
* warnings: 123. Issue warning messages and control their disposition.
* wave: 124. Provide an interface to the WAV sound format.
* weakref: 125. Support for weak references and weak dictionaries.
* webbrowser: 126. Easy-to-use controller for Web browsers.
* winreg: 127. Routines and objects for manipulating the Windows
                        registry.
* winsound: 128. Access to the sound-playing machinery for Windows.
* wsgiref: 129. WSGI Utilities and Reference Implementation.
* wsgiref.handlers: 12a. WSGI server/gateway base classes.
* wsgiref.headers: 12b. WSGI response header tools.
* wsgiref.simple_server: 12c. A simple WSGI HTTP server.
* wsgiref.util: 12d. WSGI environment utilities.
* wsgiref.validate: 12e. WSGI conformance checker.
* xdrlib: 12f. Encoders and decoders for the External Data
                        Representation (XDR).
* xml: 130. Package containing XML processing modules
* xml.dom: 131. Document Object Model API for Python.
* xml.dom.minidom: 132. Minimal Document Object Model (DOM) implementation.
* xml.dom.pulldom: 133. Support for building partial DOM trees from SAX
                        events.
* xml.etree.ElementTree: 134. Implementation of the ElementTree API.
* xml.parsers.expat: 135. An interface to the Expat non-validating XML parser.
* xml.parsers.expat.errors: 136. 
* xml.parsers.expat.model: 137. 
* xml.sax: 138. Package containing SAX2 base classes and convenience
                        functions.
* xml.sax.handler: 139. Base classes for SAX event handlers.
* xml.sax.saxutils: 13a. Convenience functions and classes for use with SAX.
* xml.sax.xmlreader: 13b. Interface which SAX-compliant XML parsers must
                        implement.
* xmlrpc.client: 13c. XML-RPC client access.
* xmlrpc.server: 13d. Basic XML-RPC server implementations.
* zipapp: 13e. Manage executable python zip archives
* zipfile: 13f. Read and write ZIP-format archive files.
* zipimport: 140. support for importing Python modules from ZIP
                        archives.
* zlib: 141. Low-level interface to compression and decompression
                        routines compatible with gzip.


File: python.info,  Node: Index,  Prev: Python Module Index,  Up: Top

Index
*****

 [index ]
* Menu:

* ! (pdb command):                       Debugger Commands.  (line  310)
* % formatting:                          printf-style String Formatting.
                                                             (line    6)
* % formatting <1>:                      printf-style Bytes Formatting.
                                                             (line    6)
* % interpolation:                       printf-style String Formatting.
                                                             (line    6)
* % interpolation <1>:                   printf-style Bytes Formatting.
                                                             (line    6)
* %=; augmented assignment:              Augmented assignment statements.
                                                             (line    6)
* &=; augmented assignment:              Augmented assignment statements.
                                                             (line    6)
* **; in function calls:                 Calls.              (line  100)
* **=; augmented assignment:             Augmented assignment statements.
                                                             (line    6)
* *; in function calls:                  Calls.              (line   73)
* *=; augmented assignment:              Augmented assignment statements.
                                                             (line    6)
* +=; augmented assignment:              Augmented assignment statements.
                                                             (line    6)
* -=; augmented assignment:              Augmented assignment statements.
                                                             (line    6)
* -> (return annotation assignment):     Function Annotations.
                                                             (line    6)
* ...:                                   Glossary.           (line   10)
* .ini; file:                            configparser --- Configuration file parser.
                                                             (line    8)
* .pdbrc; file:                          Debugger Commands.  (line   37)
* .pypirc file:                          Additional command options.
                                                             (line   26)
* //=; augmented assignment:             Augmented assignment statements.
                                                             (line    6)
* /=; augmented assignment:              Augmented assignment statements.
                                                             (line    6)
* 2to3:                                  Glossary.           (line   17)
* ; package; namespace:                  Namespace packages. (line    6)
* ; package; portion:                    Namespace packages. (line    6)
* <<=; augmented assignment:             Augmented assignment statements.
                                                             (line    6)
* <protocol>_proxy:                      urllib request --- Extensible library for opening URLs.
                                                             (line  259)
* =; assignment statement:               Assignment statements.
                                                             (line    6)
* >>=; augmented assignment:             Augmented assignment statements.
                                                             (line    6)
* >>>:                                   Glossary.           (line    6)
* ^=; augmented assignment:              Augmented assignment statements.
                                                             (line    6)
* _anonymous_ (ctypes.Structure attribute): Structured data types.
                                                             (line   74)
* _asdict() (collections.somenamedtuple method): namedtuple Factory Function for Tuples with Named Fields.
                                                             (line   94)
* _b_base_ (ctypes._CData attribute):    Data types.         (line   61)
* _b_needsfree_ (ctypes._CData attribute): Data types.       (line   68)
* _callmethod() (multiprocessing.managers.BaseProxy method): Proxy Objects.
                                                             (line   60)
* _CData (class in ctypes):              Data types.         (line    6)
* _clear_type_cache() (in module sys):   sys --- System-specific parameters and functions.
                                                             (line   84)
* _current_frames() (in module sys):     sys --- System-specific parameters and functions.
                                                             (line   93)
* _debugmallocstats() (in module sys):   sys --- System-specific parameters and functions.
                                                             (line  110)
* _dummy_thread (module):                _dummy_thread --- Drop-in replacement for the _thread module.
                                                             (line    6)
* _exit() (in module os):                Process Management. (line   86)
* _fields (ast.AST attribute):           Node classes.       (line   22)
* _fields (collections.somenamedtuple attribute): namedtuple Factory Function for Tuples with Named Fields.
                                                             (line  127)
* _fields_ (ctypes.Structure attribute): Structured data types.
                                                             (line   31)
* _flush() (wsgiref.handlers.BaseHandler method): wsgiref handlers -- server/gateway base classes.
                                                             (line  113)
* _frozen (C type):                      Importing Modules<2>.
                                                             (line  258)
* _FuncPtr (class in ctypes):            Foreign functions.  (line   12)
* _getframe() (in module sys):           sys --- System-specific parameters and functions.
                                                             (line  516)
* _getvalue() (multiprocessing.managers.BaseProxy method): Proxy Objects.
                                                             (line  102)
* _get_child_mock() (unittest.mock.Mock method): The Mock Class.
                                                             (line  277)
* _handle (ctypes.PyDLL attribute):      Loading shared libraries.
                                                             (line  116)
* _inittab (C type):                     Importing Modules<2>.
                                                             (line  290)
* _length_ (ctypes.Array attribute):     Arrays and pointers.
                                                             (line   18)
* _make() (collections.somenamedtuple class method): namedtuple Factory Function for Tuples with Named Fields.
                                                             (line   85)
* _makeResult() (unittest.TextTestRunner method): Loading and running tests.
                                                             (line  445)
* _name (ctypes.PyDLL attribute):        Loading shared libraries.
                                                             (line  120)
* _objects (ctypes._CData attribute):    Data types.         (line   73)
* _pack_ (ctypes.Structure attribute):   Structured data types.
                                                             (line   67)
* _parse() (gettext.NullTranslations method): The NullTranslations class.
                                                             (line   21)
* _Pointer (class in ctypes):            Arrays and pointers.
                                                             (line   31)
* _PyBytes_Resize (C function):          Bytes Objects.      (line  185)
* _PyImport_FindExtension (C function):  Importing Modules<2>.
                                                             (line  235)
* _PyImport_Fini (C function):           Importing Modules<2>.
                                                             (line  231)
* _PyImport_Init (C function):           Importing Modules<2>.
                                                             (line  223)
* _PyObject_GC_TRACK (C function):       Supporting Cyclic Garbage Collection.
                                                             (line   61)
* _PyObject_GC_UNTRACK (C function):     Supporting Cyclic Garbage Collection.
                                                             (line   89)
* _PyObject_New (C function):            Allocating Objects on the Heap.
                                                             (line    6)
* _PyObject_NewVar (C function):         Allocating Objects on the Heap.
                                                             (line    9)
* _PyTuple_Resize (C function):          Tuple Objects.      (line   80)
* _Py_c_diff (C function):               Complex Numbers as C Structures.
                                                             (line   27)
* _Py_c_neg (C function):                Complex Numbers as C Structures.
                                                             (line   33)
* _Py_c_pow (C function):                Complex Numbers as C Structures.
                                                             (line   53)
* _Py_c_prod (C function):               Complex Numbers as C Structures.
                                                             (line   38)
* _Py_c_quot (C function):               Complex Numbers as C Structures.
                                                             (line   44)
* _Py_c_sum (C function):                Complex Numbers as C Structures.
                                                             (line   22)
* _Py_NoneStruct (C variable):           Allocating Objects on the Heap.
                                                             (line   59)
* _replace() (collections.somenamedtuple method): namedtuple Factory Function for Tuples with Named Fields.
                                                             (line  106)
* _setroot() (xml.etree.ElementTree.ElementTree method): ElementTree Objects.
                                                             (line   15)
* _SimpleCData (class in ctypes):        Fundamental data types<2>.
                                                             (line    6)
* _source (collections.somenamedtuple attribute): namedtuple Factory Function for Tuples with Named Fields.
                                                             (line  118)
* _structure() (in module email.iterators): email iterators Iterators.
                                                             (line   40)
* _thread (module):                      _thread --- Low-level threading API.
                                                             (line    6)
* _type_ (ctypes.Array attribute):       Arrays and pointers.
                                                             (line   24)
* _type_ (ctypes._Pointer attribute):    Arrays and pointers.
                                                             (line   46)
* _write() (wsgiref.handlers.BaseHandler method): wsgiref handlers -- server/gateway base classes.
                                                             (line  105)
* _xoptions (in module sys):             sys --- System-specific parameters and functions.
                                                             (line 1317)
* __abs__() (in module operator):        operator --- Standard operators as functions.
                                                             (line   71)
* __abs__() (object method):             Emulating numeric types.
                                                             (line  104)
* __add__() (in module operator):        operator --- Standard operators as functions.
                                                             (line   76)
* __add__() (object method):             Emulating numeric types.
                                                             (line   11)
* __aenter__() (object method):          Asynchronous Context Managers.
                                                             (line   12)
* __aexit__() (object method):           Asynchronous Context Managers.
                                                             (line   17)
* __aiter__() (object method):           Asynchronous Iterators.
                                                             (line   13)
* __all__:                               Importing * From a Package.
                                                             (line    6)
* __all__ (optional module attribute):   The import statement.
                                                             (line   84)
* __all__ (package variable):            Importing Modules<2>.
                                                             (line    7)
* __and__() (in module operator):        operator --- Standard operators as functions.
                                                             (line   81)
* __and__() (object method):             Emulating numeric types.
                                                             (line   11)
* __anext__() (object method):           Asynchronous Iterators.
                                                             (line   18)
* __annotations__ (function attribute):  The standard type hierarchy.
                                                             (line  350)
* __await__() (object method):           Awaitable Objects.  (line   15)
* __bases__ (class attribute):           The standard type hierarchy.
                                                             (line  539)
* __bases__ (class attribute) <1>:       Special Attributes. (line   19)
* __bool__() (object method):            Basic customization.
                                                             (line  285)
* __bool__() (object method) <1>:        Emulating container types.
                                                             (line   39)
* __bytes__() (email.message.Message method): email message Representing an email message.
                                                             (line  122)
* __bytes__() (object method):           Basic customization.
                                                             (line  137)
* __cached__:                            Import-related module attributes.
                                                             (line   69)
* __callback__ (weakref.ref attribute):  weakref --- Weak references.
                                                             (line  122)
* __call__() (email.headerregistry.HeaderRegistry method): email headerregistry Custom Header Objects.
                                                             (line  366)
* __call__() (object method):            Emulating callable objects.
                                                             (line    6)
* __call__() (object method) <1>:        Calls.              (line  142)
* __call__() (weakref.finalize method):  weakref --- Weak references.
                                                             (line  264)
* __cause__ (exception attribute):       The raise statement.
                                                             (line   30)
* __cause__ (traceback.TracebackException attribute): TracebackException Objects.
                                                             (line   21)
* __ceil__() (fractions.Fraction method): fractions --- Rational numbers.
                                                             (line  151)
* __class__ (instance attribute):        The standard type hierarchy.
                                                             (line  574)
* __class__ (instance attribute) <1>:    Special Attributes. (line   15)
* __class__ (unittest.mock.Mock attribute): The Mock Class.  (line  503)
* __closure__ (function attribute):      The standard type hierarchy.
                                                             (line  350)
* __code__ (function attribute):         The standard type hierarchy.
                                                             (line  350)
* __code__ (function object attribute):  Code Objects.       (line    6)
* __complex__() (object method):         Emulating numeric types.
                                                             (line  112)
* __concat__() (in module operator):     operator --- Standard operators as functions.
                                                             (line  170)
* __contains__() (email.message.Message method): email message Representing an email message.
                                                             (line  265)
* __contains__() (in module operator):   operator --- Standard operators as functions.
                                                             (line  175)
* __contains__() (mailbox.Mailbox method): Mailbox objects.  (line  195)
* __contains__() (object method):        Emulating container types.
                                                             (line  139)
* __context__ (exception attribute):     The raise statement.
                                                             (line   30)
* __context__ (traceback.TracebackException attribute): TracebackException Objects.
                                                             (line   25)
* __copy__() (copy protocol):            copy --- Shallow and deep copy operations.
                                                             (line   71)
* __debug__:                             The assert statement.
                                                             (line   21)
* __debug__ (built-in variable):         Built-in Constants. (line   49)
* __deepcopy__() (copy protocol):        copy --- Shallow and deep copy operations.
                                                             (line   71)
* __defaults__ (function attribute):     The standard type hierarchy.
                                                             (line  350)
* __delattr__() (object method):         Customizing attribute access.
                                                             (line   59)
* __delete__() (object method):          Implementing Descriptors.
                                                             (line   28)
* __delitem__() (email.message.Message method): email message Representing an email message.
                                                             (line  299)
* __delitem__() (in module operator):    operator --- Standard operators as functions.
                                                             (line  185)
* __delitem__() (mailbox.Mailbox method): Mailbox objects.   (line   76)
* __delitem__() (mailbox.MH method):     MH.                 (line   76)
* __delitem__() (object method):         Emulating container types.
                                                             (line   98)
* __del__() (io.IOBase method):          I/O Base Classes.   (line  164)
* __del__() (object method):             Basic customization.
                                                             (line   53)
* __dict__ (class attribute):            The standard type hierarchy.
                                                             (line  539)
* __dict__ (function attribute):         The standard type hierarchy.
                                                             (line  350)
* __dict__ (instance attribute):         The standard type hierarchy.
                                                             (line  574)
* __dict__ (module attribute):           The standard type hierarchy.
                                                             (line  488)
* __dict__ (module attribute) <1>:       Module Objects.     (line   40)
* __dict__ (object attribute):           Special Attributes. (line   10)
* __dir__() (object method):             Customizing attribute access.
                                                             (line   65)
* __dir__() (unittest.mock.Mock method): The Mock Class.     (line  268)
* __displayhook__ (in module sys):       sys --- System-specific parameters and functions.
                                                             (line  186)
* __divmod__() (object method):          Emulating numeric types.
                                                             (line   11)
* __doc__ (class attribute):             The standard type hierarchy.
                                                             (line  539)
* __doc__ (function attribute):          The standard type hierarchy.
                                                             (line  350)
* __doc__ (method attribute):            The standard type hierarchy.
                                                             (line  355)
* __doc__ (module attribute):            The standard type hierarchy.
                                                             (line  497)
* __doc__ (module attribute) <1>:        Module Objects.     (line   24)
* __doc__ (types.ModuleType attribute):  Standard Interpreter Types.
                                                             (line   58)
* __enter__() (contextmanager method):   Context Manager Types.
                                                             (line   12)
* __enter__() (object method):           With Statement Context Managers.
                                                             (line   21)
* __enter__() (winreg.PyHKEY method):    Registry Handle Objects.
                                                             (line   53)
* __eq__() (email.charset.Charset method): email charset Representing character sets.
                                                             (line  140)
* __eq__() (email.header.Header method): email header Internationalized headers.
                                                             (line  156)
* __eq__() (in module operator):         operator --- Standard operators as functions.
                                                             (line   22)
* __eq__() (instance method):            Comparisons<2>.     (line   52)
* __eq__() (memoryview method):          Memory Views.       (line  108)
* __eq__() (object method):              Basic customization.
                                                             (line  162)
* __excepthook__ (in module sys):        sys --- System-specific parameters and functions.
                                                             (line  186)
* __exit__() (contextmanager method):    Context Manager Types.
                                                             (line   32)
* __exit__() (object method):            With Statement Context Managers.
                                                             (line   28)
* __exit__() (winreg.PyHKEY method):     Registry Handle Objects.
                                                             (line   53)
* __file__:                              Import-related module attributes.
                                                             (line   67)
* __file__ (module attribute):           The standard type hierarchy.
                                                             (line  497)
* __file__ (module attribute) <1>:       Module Objects.     (line   24)
* __file__ (module attribute) <2>:       Module Objects.     (line   75)
* __float__() (object method):           Emulating numeric types.
                                                             (line  112)
* __floordiv__() (in module operator):   operator --- Standard operators as functions.
                                                             (line   86)
* __floordiv__() (object method):        Emulating numeric types.
                                                             (line   11)
* __floor__() (fractions.Fraction method): fractions --- Rational numbers.
                                                             (line  141)
* __format__:                            Built-in Functions. (line  556)
* __format__() (datetime.date method):   date Objects.       (line  228)
* __format__() (datetime.datetime method): datetime Objects. (line  551)
* __format__() (datetime.time method):   time Objects.       (line  171)
* __format__() (object method):          Basic customization.
                                                             (line  142)
* __func__ (method attribute):           The standard type hierarchy.
                                                             (line  355)
* __future__:                            Glossary.           (line  390)
* __future__ (module):                   __future__ --- Future statement definitions.
                                                             (line    6)
* __getattribute__() (object method):    Customizing attribute access.
                                                             (line   30)
* __getattr__() (object method):         Customizing attribute access.
                                                             (line   10)
* __getitem__() (email.headerregistry.HeaderRegistry method): email headerregistry Custom Header Objects.
                                                             (line  361)
* __getitem__() (email.message.Message method): email message Representing an email message.
                                                             (line  274)
* __getitem__() (in module operator):    operator --- Standard operators as functions.
                                                             (line  190)
* __getitem__() (mailbox.Mailbox method): Mailbox objects.   (line  140)
* __getitem__() (mapping object method): Special method names.
                                                             (line    6)
* __getitem__() (object method):         Emulating container types.
                                                             (line   67)
* __getnewargs_ex__() (object method):   Pickling Class Instances.
                                                             (line   29)
* __getnewargs__() (object method):      Pickling Class Instances.
                                                             (line   47)
* __getstate__() (copy protocol):        Handling Stateful Objects.
                                                             (line    6)
* __getstate__() (object method):        Pickling Class Instances.
                                                             (line   61)
* __get__() (object method):             Implementing Descriptors.
                                                             (line   13)
* __ge__() (in module operator):         operator --- Standard operators as functions.
                                                             (line   22)
* __ge__() (instance method):            Comparisons<2>.     (line   52)
* __ge__() (object method):              Basic customization.
                                                             (line  162)
* __globals__ (function attribute):      The standard type hierarchy.
                                                             (line  350)
* __gt__() (in module operator):         operator --- Standard operators as functions.
                                                             (line   22)
* __gt__() (instance method):            Comparisons<2>.     (line   52)
* __gt__() (object method):              Basic customization.
                                                             (line  162)
* __hash__() (object method):            Basic customization.
                                                             (line  207)
* __iadd__() (in module operator):       Inplace Operators.  (line   36)
* __iadd__() (object method):            Emulating numeric types.
                                                             (line   75)
* __iand__() (in module operator):       Inplace Operators.  (line   41)
* __iand__() (object method):            Emulating numeric types.
                                                             (line   75)
* __iconcat__() (in module operator):    Inplace Operators.  (line   46)
* __ifloordiv__() (in module operator):  Inplace Operators.  (line   52)
* __ifloordiv__() (object method):       Emulating numeric types.
                                                             (line   75)
* __ilshift__() (in module operator):    Inplace Operators.  (line   57)
* __ilshift__() (object method):         Emulating numeric types.
                                                             (line   75)
* __imatmul__() (in module operator):    Inplace Operators.  (line   72)
* __imatmul__() (object method):         Emulating numeric types.
                                                             (line   75)
* __imod__() (in module operator):       Inplace Operators.  (line   62)
* __imod__() (object method):            Emulating numeric types.
                                                             (line   75)
* __import__() (built-in function):      Built-in Functions. (line 1540)
* __import__() (in module importlib):    Functions<8>.       (line    6)
* __imul__() (in module operator):       Inplace Operators.  (line   67)
* __imul__() (object method):            Emulating numeric types.
                                                             (line   75)
* __index__() (in module operator):      operator --- Standard operators as functions.
                                                             (line   91)
* __index__() (object method):           Emulating numeric types.
                                                             (line  121)
* __init__() (difflib.HtmlDiff method):  difflib --- Helpers for computing deltas.
                                                             (line   89)
* __init__() (logging.Handler method):   Handler Objects.    (line   11)
* __init__() (logging.logging.Formatter method): Formatters. (line   13)
* __init__() (object method):            Basic customization.
                                                             (line   37)
* __instancecheck__() (class method):    Customizing instance and subclass checks.
                                                             (line   15)
* __interactivehook__ (in module sys):   sys --- System-specific parameters and functions.
                                                             (line  733)
* __int__() (object method):             Emulating numeric types.
                                                             (line  112)
* __invert__() (in module operator):     operator --- Standard operators as functions.
                                                             (line   96)
* __invert__() (object method):          Emulating numeric types.
                                                             (line  104)
* __inv__() (in module operator):        operator --- Standard operators as functions.
                                                             (line   96)
* __ior__() (in module operator):        Inplace Operators.  (line   79)
* __ior__() (object method):             Emulating numeric types.
                                                             (line   75)
* __ipow__() (in module operator):       Inplace Operators.  (line   84)
* __ipow__() (object method):            Emulating numeric types.
                                                             (line   75)
* __irshift__() (in module operator):    Inplace Operators.  (line   89)
* __irshift__() (object method):         Emulating numeric types.
                                                             (line   75)
* __isub__() (in module operator):       Inplace Operators.  (line   94)
* __isub__() (object method):            Emulating numeric types.
                                                             (line   75)
* __iter__() (container method):         Iterator Types.     (line   14)
* __iter__() (iterator method):          Iterator Types.     (line   29)
* __iter__() (mailbox.Mailbox method):   Mailbox objects.    (line  114)
* __iter__() (object method):            Emulating container types.
                                                             (line  107)
* __iter__() (unittest.TestSuite method): Grouping tests.    (line   60)
* __itruediv__() (in module operator):   Inplace Operators.  (line   99)
* __itruediv__() (object method):        Emulating numeric types.
                                                             (line   75)
* __ixor__() (in module operator):       Inplace Operators.  (line  104)
* __ixor__() (object method):            Emulating numeric types.
                                                             (line   75)
* __kwdefaults__ (function attribute):   The standard type hierarchy.
                                                             (line  350)
* __length_hint__() (object method):     Emulating container types.
                                                             (line   45)
* __len__() (email.message.Message method): email message Representing an email message.
                                                             (line  261)
* __len__() (mailbox.Mailbox method):    Mailbox objects.    (line  200)
* __len__() (mapping object method):     Basic customization.
                                                             (line  287)
* __len__() (object method):             Emulating container types.
                                                             (line   37)
* __le__() (in module operator):         operator --- Standard operators as functions.
                                                             (line   22)
* __le__() (instance method):            Comparisons<2>.     (line   52)
* __le__() (object method):              Basic customization.
                                                             (line  162)
* __loader__:                            Import-related module attributes.
                                                             (line   16)
* __loader__ (module attribute):         Module Objects.     (line   24)
* __loader__ (types.ModuleType attribute): Standard Interpreter Types.
                                                             (line   62)
* __lshift__() (in module operator):     operator --- Standard operators as functions.
                                                             (line  104)
* __lshift__() (object method):          Emulating numeric types.
                                                             (line   11)
* __lt__() (in module operator):         operator --- Standard operators as functions.
                                                             (line   22)
* __lt__() (instance method):            Comparisons<2>.     (line   52)
* __lt__() (object method):              Basic customization.
                                                             (line  162)
* __main__ (module):                     __main__ --- Top-level script environment.
                                                             (line    6)
* __matmul__() (in module operator):     operator --- Standard operators as functions.
                                                             (line  119)
* __matmul__() (object method):          Emulating numeric types.
                                                             (line   11)
* __missing__():                         Mapping Types --- dict.
                                                             (line   80)
* __missing__() (collections.defaultdict method): defaultdict objects.
                                                             (line   22)
* __missing__() (object method):         Emulating container types.
                                                             (line   84)
* __module__ (class attribute):          The standard type hierarchy.
                                                             (line  539)
* __module__ (function attribute):       The standard type hierarchy.
                                                             (line  350)
* __module__ (method attribute):         The standard type hierarchy.
                                                             (line  355)
* __mod__() (in module operator):        operator --- Standard operators as functions.
                                                             (line  109)
* __mod__() (object method):             Emulating numeric types.
                                                             (line   11)
* __mro__ (class attribute):             Special Attributes. (line   33)
* __mul__() (in module operator):        operator --- Standard operators as functions.
                                                             (line  114)
* __mul__() (object method):             Emulating numeric types.
                                                             (line   11)
* __name__:                              Import-related module attributes.
                                                             (line   10)
* __name__ (class attribute):            The standard type hierarchy.
                                                             (line  539)
* __name__ (class attribute) <1>:        Special Attributes. (line   23)
* __name__ (function attribute):         The standard type hierarchy.
                                                             (line  350)
* __name__ (method attribute):           The standard type hierarchy.
                                                             (line  355)
* __name__ (module attribute):           The standard type hierarchy.
                                                             (line  497)
* __name__ (module attribute) <1>:       Module Objects.     (line   24)
* __name__ (module attribute) <2>:       Module Objects.     (line   50)
* __name__ (types.ModuleType attribute): Standard Interpreter Types.
                                                             (line   70)
* __neg__() (in module operator):        operator --- Standard operators as functions.
                                                             (line  126)
* __neg__() (object method):             Emulating numeric types.
                                                             (line  104)
* __new__() (object method):             Basic customization.
                                                             (line    6)
* __next__() (csv.csvreader method):     Reader Objects.     (line   10)
* __next__() (generator method):         Generator-iterator methods.
                                                             (line   12)
* __next__() (iterator method):          Iterator Types.     (line   37)
* __ne__() (email.charset.Charset method): email charset Representing character sets.
                                                             (line  145)
* __ne__() (email.header.Header method): email header Internationalized headers.
                                                             (line  161)
* __ne__() (in module operator):         operator --- Standard operators as functions.
                                                             (line   22)
* __ne__() (instance method):            Comparisons<2>.     (line   52)
* __ne__() (object method):              Basic customization.
                                                             (line  162)
* __not__() (in module operator):        operator --- Standard operators as functions.
                                                             (line   47)
* __or__() (in module operator):         operator --- Standard operators as functions.
                                                             (line  131)
* __or__() (object method):              Emulating numeric types.
                                                             (line   11)
* __package__:                           Import-related module attributes.
                                                             (line   23)
* __package__ (module attribute):        Module Objects.     (line   24)
* __package__ (types.ModuleType attribute): Standard Interpreter Types.
                                                             (line   74)
* __path__:                              Import-related module attributes.
                                                             (line   56)
* __pos__() (in module operator):        operator --- Standard operators as functions.
                                                             (line  136)
* __pos__() (object method):             Emulating numeric types.
                                                             (line  104)
* __pow__() (in module operator):        operator --- Standard operators as functions.
                                                             (line  141)
* __pow__() (object method):             Emulating numeric types.
                                                             (line   11)
* __qualname__ (class attribute):        Special Attributes. (line   27)
* __radd__() (object method):            Emulating numeric types.
                                                             (line   41)
* __rand__() (object method):            Emulating numeric types.
                                                             (line   41)
* __rdivmod__() (object method):         Emulating numeric types.
                                                             (line   41)
* __reduce_ex__() (object method):       Pickling Class Instances.
                                                             (line  152)
* __reduce__() (object method):          Pickling Class Instances.
                                                             (line  107)
* __repr__() (multiprocessing.managers.BaseProxy method): Proxy Objects.
                                                             (line  109)
* __repr__() (netrc.netrc method):       netrc Objects.      (line   16)
* __repr__() (object method):            Basic customization.
                                                             (line  106)
* __reversed__() (object method):        Emulating container types.
                                                             (line  118)
* __rfloordiv__() (object method):       Emulating numeric types.
                                                             (line   41)
* __rlshift__() (object method):         Emulating numeric types.
                                                             (line   41)
* __rmatmul__() (object method):         Emulating numeric types.
                                                             (line   41)
* __rmod__() (object method):            Emulating numeric types.
                                                             (line   41)
* __rmul__() (object method):            Emulating numeric types.
                                                             (line   41)
* __ror__() (object method):             Emulating numeric types.
                                                             (line   41)
* __round__() (fractions.Fraction method): fractions --- Rational numbers.
                                                             (line  156)
* __round__() (object method):           Emulating numeric types.
                                                             (line  112)
* __rpow__() (object method):            Emulating numeric types.
                                                             (line   41)
* __rrshift__() (object method):         Emulating numeric types.
                                                             (line   41)
* __rshift__() (in module operator):     operator --- Standard operators as functions.
                                                             (line  146)
* __rshift__() (object method):          Emulating numeric types.
                                                             (line   11)
* __rsub__() (object method):            Emulating numeric types.
                                                             (line   41)
* __rtruediv__() (object method):        Emulating numeric types.
                                                             (line   41)
* __rxor__() (object method):            Emulating numeric types.
                                                             (line   41)
* __self__ (method attribute):           The standard type hierarchy.
                                                             (line  355)
* __setattr__() (object method):         Customizing attribute access.
                                                             (line   48)
* __setitem__() (email.message.Message method): email message Representing an email message.
                                                             (line  285)
* __setitem__() (in module operator):    operator --- Standard operators as functions.
                                                             (line  199)
* __setitem__() (mailbox.Mailbox method): Mailbox objects.   (line   90)
* __setitem__() (mailbox.Maildir method): Maildir.           (line   87)
* __setitem__() (object method):         Emulating container types.
                                                             (line   89)
* __setstate__() (copy protocol):        Handling Stateful Objects.
                                                             (line    6)
* __setstate__() (object method):        Pickling Class Instances.
                                                             (line   70)
* __set__() (object method):             Implementing Descriptors.
                                                             (line   23)
* __slots__:                             Glossary.           (line  992)
* __spec__:                              Import-related module attributes.
                                                             (line   40)
* __stderr__ (in module sys):            sys --- System-specific parameters and functions.
                                                             (line 1211)
* __stdin__ (in module sys):             sys --- System-specific parameters and functions.
                                                             (line 1211)
* __stdout__ (in module sys):            sys --- System-specific parameters and functions.
                                                             (line 1211)
* __str__() (datetime.date method):      date Objects.       (line  208)
* __str__() (datetime.datetime method):  datetime Objects.   (line  530)
* __str__() (datetime.time method):      time Objects.       (line  161)
* __str__() (email.charset.Charset method): email charset Representing character sets.
                                                             (line  135)
* __str__() (email.header.Header method): email header Internationalized headers.
                                                             (line  144)
* __str__() (email.headerregistry.Address method): email headerregistry Custom Header Objects.
                                                             (line  424)
* __str__() (email.headerregistry.Group method): email headerregistry Custom Header Objects.
                                                             (line  459)
* __str__() (email.message.Message method): email message Representing an email message.
                                                             (line   85)
* __str__() (multiprocessing.managers.BaseProxy method): Proxy Objects.
                                                             (line  113)
* __str__() (object method):             Basic customization.
                                                             (line  122)
* __subclasscheck__() (class method):    Customizing instance and subclass checks.
                                                             (line   21)
* __subclasses__() (class method):       Special Attributes. (line   44)
* __subclasshook__() (abc.ABCMeta method): abc --- Abstract Base Classes.
                                                             (line   64)
* __sub__() (in module operator):        operator --- Standard operators as functions.
                                                             (line  151)
* __sub__() (object method):             Emulating numeric types.
                                                             (line   11)
* __suppress_context__ (traceback.TracebackException attribute): TracebackException Objects.
                                                             (line   30)
* __traceback__ (exception attribute):   The raise statement.
                                                             (line    6)
* __truediv__() (in module operator):    operator --- Standard operators as functions.
                                                             (line  156)
* __truediv__() (object method):         Emulating numeric types.
                                                             (line   11)
* __xor__() (in module operator):        operator --- Standard operators as functions.
                                                             (line  162)
* __xor__() (object method):             Emulating numeric types.
                                                             (line   11)
* |=; augmented assignment:              Augmented assignment statements.
                                                             (line    6)
* A (in module re):                      Module Contents.    (line   40)
* a-LAW:                                 audioop --- Manipulate raw audio data.
                                                             (line   15)
* A-LAW:                                 aifc --- Read and write AIFF and AIFC files.
                                                             (line  164)
* A-LAW <1>:                             sndhdr --- Determine type of sound file.
                                                             (line    6)
* a2b_base64() (in module binascii):     binascii --- Convert between binary and ASCII.
                                                             (line   36)
* a2b_hex() (in module binascii):        binascii --- Convert between binary and ASCII.
                                                             (line  132)
* a2b_hqx() (in module binascii):        binascii --- Convert between binary and ASCII.
                                                             (line   71)
* a2b_qp() (in module binascii):         binascii --- Convert between binary and ASCII.
                                                             (line   50)
* a2b_uu() (in module binascii):         binascii --- Convert between binary and ASCII.
                                                             (line   24)
* a85decode() (in module base64):        base64 --- Base16 Base32 Base64 Base85 Data Encodings.
                                                             (line  159)
* a85encode() (in module base64):        base64 --- Base16 Base32 Base64 Base85 Data Encodings.
                                                             (line  136)
* ABC (class in abc):                    abc --- Abstract Base Classes.
                                                             (line  131)
* abc (module):                          abc --- Abstract Base Classes.
                                                             (line    6)
* ABCMeta (class in abc):                abc --- Abstract Base Classes.
                                                             (line   24)
* abiflags (in module sys):              sys --- System-specific parameters and functions.
                                                             (line   10)
* abort():                               Process Control.    (line    8)
* abort() (asyncio.DatagramTransport method): DatagramTransport.
                                                             (line   15)
* abort() (asyncio.WriteTransport method): WriteTransport.   (line   10)
* abort() (ftplib.FTP method):           FTP Objects.        (line   58)
* abort() (in module os):                Process Management. (line   16)
* abort() (threading.Barrier method):    Barrier Objects.    (line   81)
* above() (curses.panel.Panel method):   Panel Objects.      (line   13)
* abs() (built-in function):             Built-in Functions. (line   55)
* abs() (decimal.Context method):        Context objects.    (line  230)
* abs() (in module operator):            operator --- Standard operators as functions.
                                                             (line   71)
* abspath() (in module os.path):         os path --- Common pathname manipulations.
                                                             (line   46)
* abstract base class:                   Glossary.           (line   27)
* AbstractBasicAuthHandler (class in urllib.request): urllib request --- Extensible library for opening URLs.
                                                             (line  292)
* abstractclassmethod() (in module abc): abc --- Abstract Base Classes.
                                                             (line  221)
* AbstractContextManager (class in contextlib): Utilities.   (line    8)
* AbstractDigestAuthHandler (class in urllib.request): urllib request --- Extensible library for opening URLs.
                                                             (line  331)
* AbstractEventLoopPolicy (class in asyncio): Event loop policy interface.
                                                             (line    8)
* AbstractFormatter (class in formatter): Formatter Implementations.
                                                             (line   18)
* abstractmethod() (in module abc):      abc --- Abstract Base Classes.
                                                             (line  147)
* abstractproperty() (in module abc):    abc --- Abstract Base Classes.
                                                             (line  265)
* AbstractSet (class in typing):         Classes functions and decorators.
                                                             (line  190)
* abstractstaticmethod() (in module abc): abc --- Abstract Base Classes.
                                                             (line  243)
* AbstractWriter (class in formatter):   Writer Implementations.
                                                             (line   16)
* accept() (asyncore.dispatcher method): asyncore --- Asynchronous socket handler.
                                                             (line  229)
* accept() (multiprocessing.connection.Listener method): Listeners and Clients.
                                                             (line   92)
* accept() (socket.socket method):       Socket Objects.     (line   13)
* access() (in module os):               Files and Directories.
                                                             (line   45)
* accumulate() (in module itertools):    Itertool functions. (line   10)
* acos() (in module cmath):              Trigonometric functions<2>.
                                                             (line    6)
* acos() (in module math):               Trigonometric functions.
                                                             (line    6)
* acosh() (in module cmath):             Hyperbolic functions<2>.
                                                             (line    6)
* acosh() (in module math):              Hyperbolic functions.
                                                             (line    9)
* acquire() (asyncio.Condition method):  Condition.          (line   22)
* acquire() (asyncio.Lock method):       Lock.               (line   67)
* acquire() (asyncio.Semaphore method):  Semaphore.          (line   24)
* acquire() (logging.Handler method):    Handler Objects.    (line   23)
* acquire() (multiprocessing.Lock method): Synchronization primitives.
                                                             (line   64)
* acquire() (multiprocessing.RLock method): Synchronization primitives.
                                                             (line  118)
* acquire() (threading.Condition method): Condition Objects. (line   85)
* acquire() (threading.Lock method):     Lock Objects.       (line   41)
* acquire() (threading.RLock method):    RLock Objects.      (line   35)
* acquire() (threading.Semaphore method): Semaphore Objects. (line   34)
* acquire() (_thread.lock method):       _thread --- Low-level threading API.
                                                             (line   96)
* acquire_lock() (in module imp):        imp --- Access the import internals.
                                                             (line  274)
* Action (class in argparse):            Action classes.     (line   11)
* action (optparse.Option attribute):    Option attributes.  (line   11)
* ACTIONS (optparse.Option attribute):   Adding new actions. (line   31)
* active_children() (in module multiprocessing): Miscellaneous<3>.
                                                             (line    6)
* active_count() (in module threading):  threading --- Thread-based parallelism.
                                                             (line   24)
* add() (decimal.Context method):        Context objects.    (line  234)
* add() (in module audioop):             audioop --- Manipulate raw audio data.
                                                             (line   29)
* add() (in module operator):            operator --- Standard operators as functions.
                                                             (line   76)
* add() (mailbox.Mailbox method):        Mailbox objects.    (line   59)
* add() (mailbox.Maildir method):        Maildir.            (line   87)
* add() (msilib.RadioButtonGroup method): GUI classes.       (line   34)
* add() (pstats.Stats method):           The Stats Class.    (line   48)
* add() (set method):                    Set Types --- set frozenset.
                                                             (line  184)
* add() (tarfile.TarFile method):        TarFile Objects.    (line  187)
* add() (tkinter.ttk.Notebook method):   ttk Notebook.       (line    8)
* addch() (curses.window method):        Window Objects.     (line    9)
* addCleanup() (unittest.TestCase method): Test cases.       (line  743)
* addcomponent() (turtle.Shape method):  Public classes.     (line   66)
* addError() (unittest.TestResult method): Loading and running tests.
                                                             (line  331)
* addExpectedFailure() (unittest.TestResult method): Loading and running tests.
                                                             (line  367)
* addFailure() (unittest.TestResult method): Loading and running tests.
                                                             (line  342)
* addfile() (tarfile.TarFile method):    TarFile Objects.    (line  210)
* addFilter() (logging.Handler method):  Handler Objects.    (line   48)
* addFilter() (logging.Logger method):   Logger Objects.     (line  224)
* addHandler() (logging.Logger method):  Logger Objects.     (line  241)
* addition:                              Binary arithmetic operations.
                                                             (line   60)
* addLevelName() (in module logging):    Module-Level Functions.
                                                             (line  180)
* addnstr() (curses.window method):      Window Objects.     (line   24)
* AddPackagePath() (in module modulefinder): modulefinder --- Find modules used by a script.
                                                             (line   16)
* addr (smtpd.SMTPChannel attribute):    SMTPChannel Objects.
                                                             (line   51)
* Address (class in email.headerregistry): email headerregistry Custom Header Objects.
                                                             (line  379)
* address (email.headerregistry.SingleAddressHeader attribute): email headerregistry Custom Header Objects.
                                                             (line  220)
* address (multiprocessing.connection.Listener attribute): Listeners and Clients.
                                                             (line  107)
* address (multiprocessing.managers.BaseManager attribute): Managers.
                                                             (line  120)
* addresses (email.headerregistry.AddressHeader attribute): email headerregistry Custom Header Objects.
                                                             (line  193)
* addresses (email.headerregistry.Group attribute): email headerregistry Custom Header Objects.
                                                             (line  454)
* AddressHeader (class in email.headerregistry): email headerregistry Custom Header Objects.
                                                             (line  178)
* addressof() (in module ctypes):        Utility functions.  (line    6)
* AddressValueError:                     Custom Exceptions.  (line    9)
* address_exclude() (ipaddress.IPv4Network method): Network objects.
                                                             (line  147)
* address_exclude() (ipaddress.IPv6Network method): Network objects.
                                                             (line  296)
* address_family (socketserver.BaseServer attribute): Server Objects.
                                                             (line   63)
* address_string() (http.server.BaseHTTPRequestHandler method): http server --- HTTP servers.
                                                             (line  302)
* addr_spec (email.headerregistry.Address attribute): email headerregistry Custom Header Objects.
                                                             (line  418)
* addshape() (in module turtle):         Settings and special methods.
                                                             (line   71)
* addsitedir() (in module site):         Module contents<3>. (line   51)
* addSkip() (unittest.TestResult method): Loading and running tests.
                                                             (line  359)
* addstr() (curses.window method):       Window Objects.     (line   31)
* addSubTest() (unittest.TestResult method): Loading and running tests.
                                                             (line  385)
* addSuccess() (unittest.TestResult method): Loading and running tests.
                                                             (line  353)
* addTest() (unittest.TestSuite method): Grouping tests.     (line   25)
* addTests() (unittest.TestSuite method): Grouping tests.    (line   30)
* addTypeEqualityFunc() (unittest.TestCase method): Test cases.
                                                             (line  558)
* addUnexpectedSuccess() (unittest.TestResult method): Loading and running tests.
                                                             (line  377)
* add_alias() (in module email.charset): email charset Representing character sets.
                                                             (line  183)
* add_alternative() (email.message.EmailMessage method): email contentmanager Managing MIME Content.
                                                             (line  194)
* add_argument() (argparse.ArgumentParser method): The add_argument method.
                                                             (line    6)
* add_argument_group() (argparse.ArgumentParser method): Argument groups.
                                                             (line    6)
* add_attachment() (email.message.EmailMessage method): email contentmanager Managing MIME Content.
                                                             (line  206)
* add_cgi_vars() (wsgiref.handlers.BaseHandler method): wsgiref handlers -- server/gateway base classes.
                                                             (line  129)
* add_charset() (in module email.charset): email charset Representing character sets.
                                                             (line  154)
* add_codec() (in module email.charset): email charset Representing character sets.
                                                             (line  192)
* add_cookie_header() (http.cookiejar.CookieJar method): CookieJar and FileCookieJar Objects.
                                                             (line   11)
* add_data() (in module msilib):         msilib --- Read and write Microsoft Installer files.
                                                             (line   70)
* add_done_callback() (asyncio.Future method): Future.       (line   64)
* add_done_callback() (concurrent.futures.Future method): Future Objects.
                                                             (line   69)
* add_fallback() (gettext.NullTranslations method): The NullTranslations class.
                                                             (line   28)
* add_file() (msilib.Directory method):  Directory Objects.  (line   30)
* add_flag() (mailbox.MaildirMessage method): MaildirMessage.
                                                             (line   76)
* add_flag() (mailbox.mboxMessage method): mboxMessage.      (line   79)
* add_flag() (mailbox.MMDFMessage method): MMDFMessage.      (line   78)
* add_flowing_data() (formatter.formatter method): The Formatter Interface.
                                                             (line   43)
* add_folder() (mailbox.Maildir method): Maildir.            (line   67)
* add_folder() (mailbox.MH method):      MH.                 (line   42)
* add_get_handler() (email.contentmanager.ContentManager method): email contentmanager Managing MIME Content.
                                                             (line  301)
* add_handler() (urllib.request.OpenerDirector method): OpenerDirector Objects.
                                                             (line    8)
* add_header() (email.message.Message method): email message Representing an email message.
                                                             (line  333)
* add_header() (urllib.request.Request method): Request Objects.
                                                             (line   79)
* add_header() (wsgiref.headers.Headers method): wsgiref headers -- WSGI response header tools.
                                                             (line   61)
* add_history() (in module readline):    History list.       (line   38)
* add_hor_rule() (formatter.formatter method): The Formatter Interface.
                                                             (line   36)
* add_include_dir() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line   96)
* add_label() (mailbox.BabylMessage method): BabylMessage.   (line   55)
* add_label_data() (formatter.formatter method): The Formatter Interface.
                                                             (line   59)
* add_library() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  113)
* add_library_dir() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  135)
* add_line_break() (formatter.formatter method): The Formatter Interface.
                                                             (line   31)
* add_link_object() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  180)
* add_literal_data() (formatter.formatter method): The Formatter Interface.
                                                             (line   53)
* add_mutually_exclusive_group() (argparse.ArgumentParser method): Mutual exclusion.
                                                             (line    6)
* add_option() (optparse.OptionParser method): Defining options.
                                                             (line   14)
* add_parent() (urllib.request.BaseHandler method): BaseHandler Objects.
                                                             (line   10)
* add_password() (urllib.request.HTTPPasswordMgr method): HTTPPasswordMgr Objects.
                                                             (line    9)
* add_password() (urllib.request.HTTPPasswordMgrWithPriorAuth method): HTTPPasswordMgrWithPriorAuth Objects.
                                                             (line   10)
* add_reader() (asyncio.BaseEventLoop method): Watch file descriptors.
                                                             (line   12)
* add_related() (email.message.EmailMessage method): email contentmanager Managing MIME Content.
                                                             (line  181)
* add_runtime_library_dir() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  150)
* add_section() (configparser.ConfigParser method): ConfigParser Objects.
                                                             (line   80)
* add_section() (configparser.RawConfigParser method): RawConfigParser Objects.
                                                             (line   21)
* add_sequence() (mailbox.MHMessage method): MHMessage.      (line   41)
* add_set_handler() (email.contentmanager.ContentManager method): email contentmanager Managing MIME Content.
                                                             (line  306)
* add_signal_handler() (asyncio.BaseEventLoop method): UNIX signals.
                                                             (line    8)
* add_stream() (in module msilib):       msilib --- Read and write Microsoft Installer files.
                                                             (line  100)
* add_subparsers() (argparse.ArgumentParser method): Sub-commands.
                                                             (line    6)
* add_tables() (in module msilib):       msilib --- Read and write Microsoft Installer files.
                                                             (line   91)
* add_type() (in module mimetypes):      mimetypes --- Map filenames to MIME types.
                                                             (line   98)
* add_unredirected_header() (urllib.request.Request method): Request Objects.
                                                             (line   90)
* add_writer() (asyncio.BaseEventLoop method): Watch file descriptors.
                                                             (line   23)
* adjusted() (decimal.Decimal method):   Decimal objects.    (line  110)
* adler32() (in module zlib):            zlib --- Compression compatible with gzip.
                                                             (line   26)
* ADPCM, Intel/DVI:                      audioop --- Manipulate raw audio data.
                                                             (line   15)
* adpcm2lin() (in module audioop):       audioop --- Manipulate raw audio data.
                                                             (line   36)
* AF_CAN (in module socket):             Constants<6>.       (line   82)
* AF_INET (in module socket):            Constants<6>.       (line   11)
* AF_INET6 (in module socket):           Constants<6>.       (line   11)
* AF_LINK (in module socket):            Constants<6>.       (line  146)
* AF_RDS (in module socket):             Constants<6>.       (line  121)
* AF_UNIX (in module socket):            Constants<6>.       (line   11)
* aifc (module):                         aifc --- Read and write AIFF and AIFC files.
                                                             (line    6)
* aifc() (aifc.aifc method):             aifc --- Read and write AIFF and AIFC files.
                                                             (line  138)
* AIFF:                                  aifc --- Read and write AIFF and AIFC files.
                                                             (line    6)
* AIFF <1>:                              chunk --- Read IFF chunked data.
                                                             (line    6)
* aiff() (aifc.aifc method):             aifc --- Read and write AIFF and AIFC files.
                                                             (line  132)
* AIFF-C:                                aifc --- Read and write AIFF and AIFC files.
                                                             (line    6)
* AIFF-C <1>:                            chunk --- Read IFF chunked data.
                                                             (line    6)
* alarm() (in module signal):            Module contents<2>. (line  116)
* alaw2lin() (in module audioop):        audioop --- Manipulate raw audio data.
                                                             (line   43)
* ALERT_DESCRIPTION_HANDSHAKE_FAILURE (in module ssl): Constants<7>.
                                                             (line  282)
* ALERT_DESCRIPTION_INTERNAL_ERROR (in module ssl): Constants<7>.
                                                             (line  282)
* algorithms_available (in module hashlib): Hash algorithms. (line   69)
* algorithms_guaranteed (in module hashlib): Hash algorithms.
                                                             (line   62)
* alias (pdb command):                   Debugger Commands.  (line  282)
* alignment() (in module ctypes):        Utility functions.  (line   11)
* alive (weakref.finalize attribute):    weakref --- Weak references.
                                                             (line  281)
* all() (built-in function):             Built-in Functions. (line   61)
* allocate_lock() (in module _thread):   _thread --- Low-level threading API.
                                                             (line   53)
* allowed_domains() (http.cookiejar.DefaultCookiePolicy method): DefaultCookiePolicy Objects.
                                                             (line   65)
* allow_reuse_address (socketserver.BaseServer attribute): Server Objects.
                                                             (line   90)
* all_errors (in module ftplib):         ftplib --- FTP protocol client.
                                                             (line  128)
* all_features (in module xml.sax.handler): xml sax handler --- Base classes for SAX handlers.
                                                             (line   86)
* all_frames (tracemalloc.Filter attribute): Filter.         (line   53)
* all_properties (in module xml.sax.handler): xml sax handler --- Base classes for SAX handlers.
                                                             (line  118)
* all_suffixes() (in module importlib.machinery): importlib machinery -- Importers and path hooks.
                                                             (line   53)
* all_tasks() (asyncio.Task class method): Task.             (line   40)
* alt() (in module curses.ascii):        curses ascii --- Utilities for ASCII characters.
                                                             (line  217)
* altsep (in module os):                 Miscellaneous System Information.
                                                             (line  102)
* altzone (in module time):              time --- Time access and conversions.
                                                             (line   97)
* ALT_DIGITS (in module locale):         locale --- Internationalization services.
                                                             (line  284)
* ALWAYS_TYPED_ACTIONS (optparse.Option attribute): Adding new actions.
                                                             (line   43)
* AMPER (in module token):               token --- Constants used with Python parse trees.
                                                             (line   40)
* AMPEREQUAL (in module token):          token --- Constants used with Python parse trees.
                                                             (line   40)
* and_() (in module operator):           operator --- Standard operators as functions.
                                                             (line   81)
* annotation (inspect.Parameter attribute): Introspecting callables with the Signature object.
                                                             (line  158)
* announce() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  503)
* anonymous; function:                   Lambdas.            (line    6)
* answer_challenge() (in module multiprocessing.connection): Listeners and Clients.
                                                             (line   25)
* anticipate_failure() (in module test.support): test support --- Utilities for the Python test suite.
                                                             (line  240)
* Any (class in typing):                 Classes functions and decorators.
                                                             (line    8)
* ANY (in module unittest.mock):         ANY.                (line    6)
* any() (built-in function):             Built-in Functions. (line   72)
* api_version (in module sys):           sys --- System-specific parameters and functions.
                                                             (line 1283)
* apop() (poplib.POP3 method):           POP3 Objects.       (line   41)
* APPDATA:                               PEP 370 Per-user site-packages Directory.
                                                             (line   26)
* append() (array.array method):         array --- Efficient arrays of numeric values.
                                                             (line  114)
* append() (collections.deque method):   deque objects.      (line   35)
* append() (email.header.Header method): email header Internationalized headers.
                                                             (line   82)
* append() (imaplib.IMAP4 method):       IMAP4 Objects.      (line   33)
* append() (msilib.CAB method):          CAB Objects.        (line   15)
* append() (pipes.Template method):      Template Objects.   (line   22)
* append() (sequence method):            Mutable Sequence Types.
                                                             (line   16)
* append() (xml.etree.ElementTree.Element method): Element Objects.
                                                             (line   87)
* appendChild() (xml.dom.Node method):   Node Objects.       (line  115)
* appendleft() (collections.deque method): deque objects.    (line   39)
* append_history_file() (in module readline): History file.  (line   20)
* application_uri() (in module wsgiref.util): wsgiref util -- WSGI environment utilities.
                                                             (line   32)
* apply (2to3 fixer):                    Fixers.             (line   10)
* apply() (multiprocessing.pool.Pool method): Process Pools. (line   51)
* apply_async() (multiprocessing.pool.Pool method): Process Pools.
                                                             (line   59)
* apply_defaults() (inspect.BoundArguments method): Introspecting callables with the Signature object.
                                                             (line  279)
* architecture() (in module platform):   Cross Platform.     (line    6)
* archive (zipimport.zipimporter attribute): zipimporter Objects.
                                                             (line   69)
* aRepr (in module reprlib):             reprlib --- Alternate repr implementation.
                                                             (line   24)
* argparse (module):                     argparse --- Parser for command-line options arguments and sub-commands.
                                                             (line    6)
* args (BaseException attribute):        Base classes.       (line   17)
* args (functools.partial attribute):    partial Objects.    (line   15)
* args (inspect.BoundArguments attribute): Introspecting callables with the Signature object.
                                                             (line  265)
* args (pdb command):                    Debugger Commands.  (line  228)
* args (subprocess.CompletedProcess attribute): Using the subprocess Module.
                                                             (line   70)
* args (subprocess.Popen attribute):     Popen Objects.      (line  101)
* argtypes (ctypes._FuncPtr attribute):  Foreign functions.  (line   36)
* argument:                              Glossary.           (line   42)
* argument; call semantics:              Slicings.           (line   37)
* argument; difference from parameter:   How can I pass optional or keyword parameters from one function to another?.
                                                             (line   17)
* argument; function definition:         Function definitions.
                                                             (line   47)
* ArgumentDefaultsHelpFormatter (class in argparse): formatter_class.
                                                             (line   10)
* ArgumentError:                         Foreign functions.  (line   83)
* ArgumentParser (class in argparse):    ArgumentParser objects.
                                                             (line    6)
* arguments (inspect.BoundArguments attribute): Introspecting callables with the Signature object.
                                                             (line  249)
* argv (in module sys):                  sys --- System-specific parameters and functions.
                                                             (line   18)
* argv (in module sys) <1>:              Process-wide parameters.
                                                             (line  214)
* arithmetic:                            Numeric Types --- int float complex.
                                                             (line   27)
* arithmetic; conversion:                Arithmetic conversions.
                                                             (line    6)
* ArithmeticError:                       Base classes.       (line   43)
* array (class in array):                array --- Efficient arrays of numeric values.
                                                             (line   79)
* Array (class in ctypes):               Arrays and pointers.
                                                             (line    6)
* array (module):                        array --- Efficient arrays of numeric values.
                                                             (line    6)
* Array() (in module multiprocessing):   Shared ctypes Objects.
                                                             (line   42)
* Array() (in module multiprocessing.sharedctypes): The multiprocessing sharedctypes module.
                                                             (line   51)
* Array() (multiprocessing.managers.SyncManager method): Managers.
                                                             (line  194)
* arrays:                                array --- Efficient arrays of numeric values.
                                                             (line    6)
* article() (nntplib.NNTP method):       Methods<3>.         (line  241)
* as; import statement:                  The import statement.
                                                             (line   39)
* as; with statement:                    The with statement. (line    6)
* ASCII:                                 Notation.           (line   31)
* ASCII <1>:                             String and Bytes literals.
                                                             (line    6)
* ASCII (in module re):                  Module Contents.    (line   40)
* ascii() (built-in function):           Built-in Functions. (line   83)
* ascii() (in module curses.ascii):      curses ascii --- Utilities for ASCII characters.
                                                             (line  208)
* ascii_letters (in module string):      String constants.   (line    8)
* ascii_lowercase (in module string):    String constants.   (line   14)
* ascii_uppercase (in module string):    String constants.   (line   19)
* asctime() (in module time):            time --- Time access and conversions.
                                                             (line  104)
* asin() (in module cmath):              Trigonometric functions<2>.
                                                             (line   13)
* asin() (in module math):               Trigonometric functions.
                                                             (line   10)
* asinh() (in module cmath):             Hyperbolic functions<2>.
                                                             (line   12)
* asinh() (in module math):              Hyperbolic functions.
                                                             (line   13)
* assertAlmostEqual() (unittest.TestCase method): Test cases.
                                                             (line  483)
* assertCountEqual() (unittest.TestCase method): Test cases. (line  537)
* assertDictEqual() (unittest.TestCase method): Test cases.  (line  646)
* assertEqual() (unittest.TestCase method): Test cases.      (line  177)
* assertFalse() (unittest.TestCase method): Test cases.      (line  202)
* assertGreater() (unittest.TestCase method): Test cases.    (line  507)
* assertGreaterEqual() (unittest.TestCase method): Test cases.
                                                             (line  507)
* assertIn() (unittest.TestCase method): Test cases.         (line  229)
* AssertionError:                        Concrete exceptions.
                                                             (line    8)
* assertIs() (unittest.TestCase method): Test cases.         (line  214)
* assertIsInstance() (unittest.TestCase method): Test cases. (line  236)
* assertIsNone() (unittest.TestCase method): Test cases.     (line  222)
* assertIsNot() (unittest.TestCase method): Test cases.      (line  214)
* assertIsNotNone() (unittest.TestCase method): Test cases.  (line  222)
* assertLess() (unittest.TestCase method): Test cases.       (line  507)
* assertLessEqual() (unittest.TestCase method): Test cases.  (line  507)
* assertListEqual() (unittest.TestCase method): Test cases.  (line  623)
* assertLogs() (unittest.TestCase method): Test cases.       (line  405)
* assertMultiLineEqual() (unittest.TestCase method): Test cases.
                                                             (line  598)
* assertNotAlmostEqual() (unittest.TestCase method): Test cases.
                                                             (line  483)
* assertNotEqual() (unittest.TestCase method): Test cases.   (line  197)
* assertNotIn() (unittest.TestCase method): Test cases.      (line  229)
* assertNotIsInstance() (unittest.TestCase method): Test cases.
                                                             (line  236)
* assertNotRegex() (unittest.TestCase method): Test cases.   (line  520)
* assertRaises() (unittest.TestCase method): Test cases.     (line  271)
* assertRaisesRegex() (unittest.TestCase method): Test cases.
                                                             (line  312)
* assertRegex() (unittest.TestCase method): Test cases.      (line  520)
* asserts (2to3 fixer):                  Fixers.             (line   15)
* assertSequenceEqual() (unittest.TestCase method): Test cases.
                                                             (line  608)
* assertSetEqual() (unittest.TestCase method): Test cases.   (line  634)
* assertTrue() (unittest.TestCase method): Test cases.       (line  202)
* assertTupleEqual() (unittest.TestCase method): Test cases. (line  623)
* assertWarns() (unittest.TestCase method): Test cases.      (line  339)
* assertWarnsRegex() (unittest.TestCase method): Test cases. (line  380)
* assert_any_call() (unittest.mock.Mock method): The Mock Class.
                                                             (line  147)
* assert_called() (unittest.mock.Mock method): The Mock Class.
                                                             (line   95)
* assert_called_once() (unittest.mock.Mock method): The Mock Class.
                                                             (line  106)
* assert_called_once_with() (unittest.mock.Mock method): The Mock Class.
                                                             (line  133)
* assert_called_with() (unittest.mock.Mock method): The Mock Class.
                                                             (line  123)
* assert_has_calls() (unittest.mock.Mock method): The Mock Class.
                                                             (line  161)
* assert_line_data() (formatter.formatter method): The Formatter Interface.
                                                             (line  143)
* assert_not_called() (unittest.mock.Mock method): The Mock Class.
                                                             (line  183)
* assignment; statement:                 The standard type hierarchy.
                                                             (line  174)
* assignment; statement <1>:             Assignment statements.
                                                             (line    6)
* AST (class in ast):                    Node classes.       (line    6)
* ast (module):                          ast --- Abstract Syntax Trees.
                                                             (line    6)
* astimezone() (datetime.datetime method): datetime Objects. (line  322)
* ASYNC (in module token):               token --- Constants used with Python parse trees.
                                                             (line   40)
* async() (in module asyncio):           Task functions.     (line   44)
* asynchat (module):                     asynchat --- Asynchronous socket command/response handler.
                                                             (line    6)
* asynchronous context manager:          Glossary.           (line   75)
* asynchronous iterable:                 Glossary.           (line   81)
* asynchronous iterator:                 Glossary.           (line   88)
* asyncio (module):                      asyncio -- Asynchronous I/O event loop coroutines and tasks.
                                                             (line    6)
* asyncio.subprocess.DEVNULL (in module asyncio): Constants<8>.
                                                             (line   20)
* asyncio.subprocess.PIPE (in module asyncio): Constants<8>. (line    6)
* asyncio.subprocess.Process (class in asyncio): Process.    (line    6)
* asyncio.subprocess.STDOUT (in module asyncio): Constants<8>.
                                                             (line   13)
* AsyncIterable (class in collections.abc): Collections Abstract Base Classes.
                                                             (line  199)
* AsyncIterator (class in collections.abc): Collections Abstract Base Classes.
                                                             (line  206)
* asyncore (module):                     asyncore --- Asynchronous socket handler.
                                                             (line    6)
* AsyncResult (class in multiprocessing.pool): Process Pools.
                                                             (line  173)
* async_chat (class in asynchat):        asynchat --- Asynchronous socket command/response handler.
                                                             (line   26)
* async_chat.ac_in_buffer_size (in module asynchat): asynchat --- Asynchronous socket command/response handler.
                                                             (line   45)
* async_chat.ac_out_buffer_size (in module asynchat): asynchat --- Asynchronous socket command/response handler.
                                                             (line   49)
* as_bytes() (email.message.Message method): email message Representing an email message.
                                                             (line   90)
* as_completed() (in module asyncio):    Task functions.     (line   11)
* as_completed() (in module concurrent.futures): Module Functions.
                                                             (line   42)
* as_integer_ratio() (decimal.Decimal method): Decimal objects.
                                                             (line  118)
* as_integer_ratio() (float method):     Additional Methods on Float.
                                                             (line    9)
* AS_IS (in module formatter):           The Formatter Interface.
                                                             (line   12)
* as_posix() (pathlib.PurePath method):  Methods and properties.
                                                             (line  165)
* as_string() (email.message.Message method): email message Representing an email message.
                                                             (line   44)
* as_tuple() (decimal.Decimal method):   Decimal objects.    (line  132)
* as_uri() (pathlib.PurePath method):    Methods and properties.
                                                             (line  176)
* AT (in module token):                  token --- Constants used with Python parse trees.
                                                             (line   40)
* atan() (in module cmath):              Trigonometric functions<2>.
                                                             (line   18)
* atan() (in module math):               Trigonometric functions.
                                                             (line   14)
* atan2() (in module math):              Trigonometric functions.
                                                             (line   18)
* atanh() (in module cmath):             Hyperbolic functions<2>.
                                                             (line   19)
* atanh() (in module math):              Hyperbolic functions.
                                                             (line   17)
* ATEQUAL (in module token):             token --- Constants used with Python parse trees.
                                                             (line   40)
* atexit (module):                       atexit --- Exit handlers.
                                                             (line    6)
* atexit (weakref.finalize attribute):   weakref --- Weak references.
                                                             (line  286)
* atof() (in module locale):             locale --- Internationalization services.
                                                             (line  420)
* atoi() (in module locale):             locale --- Internationalization services.
                                                             (line  425)
* atom:                                  Atoms.              (line    6)
* attach() (email.message.Message method): email message Representing an email message.
                                                             (line  150)
* attach_mock() (unittest.mock.Mock method): The Mock Class. (line  226)
* AttlistDeclHandler() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line  208)
* attrgetter() (in module operator):     operator --- Standard operators as functions.
                                                             (line  219)
* attrib (xml.etree.ElementTree.Element attribute): Element Objects.
                                                             (line   45)
* attribute:                             The standard type hierarchy.
                                                             (line   13)
* attribute <1>:                         Glossary.           (line   97)
* attribute; assignment:                 Assignment statements.
                                                             (line    6)
* attribute; assignment <1>:             Assignment statements.
                                                             (line   84)
* attribute; deletion:                   The del statement<2>.
                                                             (line   20)
* attribute; reference:                  Attribute references.
                                                             (line    6)
* AttributeError:                        Concrete exceptions.
                                                             (line   12)
* attributes (xml.dom.Node attribute):   Node Objects.       (line   26)
* AttributesImpl (class in xml.sax.xmlreader): xml sax xmlreader --- Interface for XML parsers.
                                                             (line   65)
* AttributesNSImpl (class in xml.sax.xmlreader): xml sax xmlreader --- Interface for XML parsers.
                                                             (line   76)
* attroff() (curses.window method):      Window Objects.     (line   38)
* attron() (curses.window method):       Window Objects.     (line   43)
* attrset() (curses.window method):      Window Objects.     (line   48)
* at_eof() (asyncio.StreamReader method): StreamReader.      (line   63)
* Audio Interchange File Format:         aifc --- Read and write AIFF and AIFC files.
                                                             (line    6)
* Audio Interchange File Format <1>:     chunk --- Read IFF chunked data.
                                                             (line    6)
* AUDIODEV:                              ossaudiodev --- Access to OSS-compatible audio devices.
                                                             (line   52)
* audioop (module):                      audioop --- Manipulate raw audio data.
                                                             (line    6)
* AUDIO_FILE_ENCODING_ADPCM_G721 (in module sunau): sunau --- Read and write Sun AU files.
                                                             (line   96)
* AUDIO_FILE_ENCODING_ADPCM_G722 (in module sunau): sunau --- Read and write Sun AU files.
                                                             (line   96)
* AUDIO_FILE_ENCODING_ADPCM_G723_3 (in module sunau): sunau --- Read and write Sun AU files.
                                                             (line   96)
* AUDIO_FILE_ENCODING_ADPCM_G723_5 (in module sunau): sunau --- Read and write Sun AU files.
                                                             (line   96)
* AUDIO_FILE_ENCODING_ALAW_8 (in module sunau): sunau --- Read and write Sun AU files.
                                                             (line   86)
* AUDIO_FILE_ENCODING_DOUBLE (in module sunau): sunau --- Read and write Sun AU files.
                                                             (line   96)
* AUDIO_FILE_ENCODING_FLOAT (in module sunau): sunau --- Read and write Sun AU files.
                                                             (line   96)
* AUDIO_FILE_ENCODING_LINEAR_16 (in module sunau): sunau --- Read and write Sun AU files.
                                                             (line   86)
* AUDIO_FILE_ENCODING_LINEAR_24 (in module sunau): sunau --- Read and write Sun AU files.
                                                             (line   86)
* AUDIO_FILE_ENCODING_LINEAR_32 (in module sunau): sunau --- Read and write Sun AU files.
                                                             (line   86)
* AUDIO_FILE_ENCODING_LINEAR_8 (in module sunau): sunau --- Read and write Sun AU files.
                                                             (line   86)
* AUDIO_FILE_ENCODING_MULAW_8 (in module sunau): sunau --- Read and write Sun AU files.
                                                             (line   86)
* AUDIO_FILE_MAGIC (in module sunau):    sunau --- Read and write Sun AU files.
                                                             (line   80)
* augmented; assignment:                 Augmented assignment statements.
                                                             (line    6)
* auth() (ftplib.FTP_TLS method):        FTP_TLS Objects.    (line   14)
* auth() (smtplib.SMTP method):          SMTP Objects.       (line  138)
* authenticate() (imaplib.IMAP4 method): IMAP4 Objects.      (line   37)
* AuthenticationError:                   Process and exceptions.
                                                             (line  196)
* authenticators() (netrc.netrc method): netrc Objects.      (line    8)
* authkey (multiprocessing.Process attribute): Process and exceptions.
                                                             (line  115)
* avg() (in module audioop):             audioop --- Manipulate raw audio data.
                                                             (line   49)
* avgpp() (in module audioop):           audioop --- Manipulate raw audio data.
                                                             (line   53)
* avoids_symlink_attacks (shutil.rmtree attribute): Directory and files operations.
                                                             (line  237)
* AWAIT (in module token):               token --- Constants used with Python parse trees.
                                                             (line   40)
* awaitable:                             Glossary.           (line  103)
* Awaitable (class in collections.abc):  Collections Abstract Base Classes.
                                                             (line  163)
* b16decode() (in module base64):        base64 --- Base16 Base32 Base64 Base85 Data Encodings.
                                                             (line  124)
* b16encode() (in module base64):        base64 --- Base16 Base32 Base64 Base85 Data Encodings.
                                                             (line  119)
* b2a_base64() (in module binascii):     binascii --- Convert between binary and ASCII.
                                                             (line   41)
* b2a_hex() (in module binascii):        binascii --- Convert between binary and ASCII.
                                                             (line  124)
* b2a_hqx() (in module binascii):        binascii --- Convert between binary and ASCII.
                                                             (line   95)
* b2a_qp() (in module binascii):         binascii --- Convert between binary and ASCII.
                                                             (line   57)
* b2a_uu() (in module binascii):         binascii --- Convert between binary and ASCII.
                                                             (line   30)
* b32decode() (in module base64):        base64 --- Base16 Base32 Base64 Base85 Data Encodings.
                                                             (line   99)
* b32encode() (in module base64):        base64 --- Base16 Base32 Base64 Base85 Data Encodings.
                                                             (line   94)
* b64decode() (in module base64):        base64 --- Base16 Base32 Base64 Base85 Data Encodings.
                                                             (line   51)
* b64encode() (in module base64):        base64 --- Base16 Base32 Base64 Base85 Data Encodings.
                                                             (line   39)
* b85decode() (in module base64):        base64 --- Base16 Base32 Base64 Base85 Data Encodings.
                                                             (line  191)
* b85encode() (in module base64):        base64 --- Base16 Base32 Base64 Base85 Data Encodings.
                                                             (line  180)
* Babyl (class in mailbox):              Babyl.              (line    6)
* BabylMessage (class in mailbox):       BabylMessage.       (line    6)
* back() (in module turtle):             Turtle motion.      (line   24)
* backslash character:                   Explicit line joining.
                                                             (line    6)
* backslashreplace_errors() (in module codecs): Error Handlers.
                                                             (line  151)
* backward() (in module turtle):         Turtle motion.      (line   24)
* BadStatusLine:                         http client --- HTTP protocol client.
                                                             (line  143)
* BadZipFile:                            zipfile --- Work with ZIP archives.
                                                             (line   24)
* BadZipfile:                            zipfile --- Work with ZIP archives.
                                                             (line   30)
* Balloon (class in tkinter.tix):        Basic Widgets.      (line    6)
* Barrier (class in multiprocessing):    Synchronization primitives.
                                                             (line   13)
* Barrier (class in threading):          Barrier Objects.    (line   35)
* Barrier() (multiprocessing.managers.SyncManager method): Managers.
                                                             (line  141)
* base64 (module):                       base64 --- Base16 Base32 Base64 Base85 Data Encodings.
                                                             (line    6)
* base64; encoding:                      base64 --- Base16 Base32 Base64 Base85 Data Encodings.
                                                             (line    6)
* BaseCGIHandler (class in wsgiref.handlers): wsgiref handlers -- server/gateway base classes.
                                                             (line   53)
* BaseCookie (class in http.cookies):    http cookies --- HTTP state management.
                                                             (line   38)
* BaseEventLoop (class in asyncio):      Base Event Loop.    (line   19)
* BaseException:                         Base classes.       (line    9)
* BaseHandler (class in urllib.request): urllib request --- Extensible library for opening URLs.
                                                             (line  236)
* BaseHandler (class in wsgiref.handlers): wsgiref handlers -- server/gateway base classes.
                                                             (line   85)
* BaseHeader (class in email.headerregistry): email headerregistry Custom Header Objects.
                                                             (line   38)
* BaseHTTPRequestHandler (class in http.server): http server --- HTTP servers.
                                                             (line   32)
* BaseManager (class in multiprocessing.managers): Managers. (line   23)
* basename() (in module os.path):        os path --- Common pathname manipulations.
                                                             (line   52)
* BaseProxy (class in multiprocessing.managers): Proxy Objects.
                                                             (line   56)
* BaseRequestHandler (class in socketserver): Request Handler Objects.
                                                             (line    6)
* BaseRotatingHandler (class in logging.handlers): BaseRotatingHandler.
                                                             (line   12)
* BaseSelector (class in selectors):     Classes<3>.         (line   53)
* BaseServer (class in socketserver):    Server Objects.     (line    6)
* basestring (2to3 fixer):               Fixers.             (line   60)
* BaseSubprocessTransport (class in asyncio): BaseSubprocessTransport.
                                                             (line    6)
* BaseTransport (class in asyncio):      BaseTransport.      (line    6)
* base_exec_prefix (in module sys):      sys --- System-specific parameters and functions.
                                                             (line   31)
* base_prefix (in module sys):           sys --- System-specific parameters and functions.
                                                             (line   45)
* basicConfig() (in module logging):     Module-Level Functions.
                                                             (line  225)
* BasicContext (class in decimal):       Context objects.    (line   47)
* BasicInterpolation (class in configparser): Interpolation of values.
                                                             (line   10)
* baudrate() (in module curses):         Functions<2>.       (line   18)
* bbox() (tkinter.ttk.Treeview method):  ttk Treeview.       (line    8)
* BDADDR_ANY (in module socket):         Constants<6>.       (line  157)
* BDADDR_LOCAL (in module socket):       Constants<6>.       (line  157)
* Bdb (class in bdb):                    bdb --- Debugger framework.
                                                             (line   79)
* bdb (module):                          bdb --- Debugger framework.
                                                             (line    6)
* BdbQuit:                               bdb --- Debugger framework.
                                                             (line   15)
* BDFL:                                  Glossary.           (line  109)
* bdist_msi (class in distutils.command.bdist_msi): distutils command bdist_msi --- Build a Microsoft Installer binary package.
                                                             (line    6)
* beep() (in module curses):             Functions<2>.       (line   26)
* Beep() (in module winsound):           winsound --- Sound-playing interface for Windows.
                                                             (line   10)
* BEFORE_ASYNC_WITH (opcode):            Python Bytecode Instructions.
                                                             (line  265)
* begin_fill() (in module turtle):       Filling.            (line   16)
* begin_poly() (in module turtle):       Special Turtle methods.
                                                             (line    6)
* below() (curses.panel.Panel method):   Panel Objects.      (line   17)
* benchmarking:                          time --- Time access and conversions.
                                                             (line  118)
* Benchmarking:                          timeit --- Measure execution time of small code snippets.
                                                             (line    6)
* betavariate() (in module random):      random --- Generate pseudo-random numbers.
                                                             (line  187)
* bgcolor() (in module turtle):          Window control.     (line    6)
* bgpic() (in module turtle):            Window control.     (line   21)
* bias() (in module audioop):            audioop --- Manipulate raw audio data.
                                                             (line   59)
* bidirectional() (in module unicodedata): unicodedata --- Unicode Database.
                                                             (line   52)
* BigEndianStructure (class in ctypes):  Structured data types.
                                                             (line   10)
* bin() (built-in function):             Built-in Functions. (line   91)
* Binary (class in msilib):              msilib --- Read and write Microsoft Installer files.
                                                             (line   85)
* binary file:                           Glossary.           (line  114)
* binary literal:                        Numeric literals.   (line    6)
* binary mode:                           Built-in Functions. (line 1067)
* binary semaphores:                     _thread --- Low-level threading API.
                                                             (line    6)
* binary; arithmetic; operation:         Binary arithmetic operations.
                                                             (line    6)
* binary; bitwise; operation:            Binary bitwise operations.
                                                             (line    6)
* binary; literals:                      Numeric Types --- int float complex.
                                                             (line   19)
* BINARY_ADD (opcode):                   Python Bytecode Instructions.
                                                             (line  146)
* BINARY_AND (opcode):                   Python Bytecode Instructions.
                                                             (line  166)
* BINARY_FLOOR_DIVIDE (opcode):          Python Bytecode Instructions.
                                                             (line  134)
* BINARY_LSHIFT (opcode):                Python Bytecode Instructions.
                                                             (line  158)
* BINARY_MATRIX_MULTIPLY (opcode):       Python Bytecode Instructions.
                                                             (line  128)
* BINARY_MODULO (opcode):                Python Bytecode Instructions.
                                                             (line  142)
* BINARY_MULTIPLY (opcode):              Python Bytecode Instructions.
                                                             (line  124)
* BINARY_OR (opcode):                    Python Bytecode Instructions.
                                                             (line  174)
* BINARY_POWER (opcode):                 Python Bytecode Instructions.
                                                             (line  120)
* BINARY_RSHIFT (opcode):                Python Bytecode Instructions.
                                                             (line  162)
* BINARY_SUBSCR (opcode):                Python Bytecode Instructions.
                                                             (line  154)
* BINARY_SUBTRACT (opcode):              Python Bytecode Instructions.
                                                             (line  150)
* BINARY_TRUE_DIVIDE (opcode):           Python Bytecode Instructions.
                                                             (line  138)
* BINARY_XOR (opcode):                   Python Bytecode Instructions.
                                                             (line  170)
* binascii (module):                     binascii --- Convert between binary and ASCII.
                                                             (line    6)
* bind (widgets):                        Bindings and Events.
                                                             (line    6)
* bind() (asyncore.dispatcher method):   asyncore --- Asynchronous socket handler.
                                                             (line  220)
* bind() (inspect.Signature method):     Introspecting callables with the Signature object.
                                                             (line   86)
* bind() (socket.socket method):         Socket Objects.     (line   30)
* binding; name:                         Binding of names.   (line    6)
* binding; name <1>:                     Assignment statements.
                                                             (line    6)
* bindtextdomain() (in module gettext):  GNU gettext API.    (line   14)
* bind_partial() (inspect.Signature method): Introspecting callables with the Signature object.
                                                             (line   93)
* bind_port() (in module test.support):  test support --- Utilities for the Python test suite.
                                                             (line  306)
* bind_textdomain_codeset() (in module gettext): GNU gettext API.
                                                             (line   26)
* binhex (module):                       binhex --- Encode and decode binhex4 files.
                                                             (line    6)
* binhex() (in module binhex):           binhex --- Encode and decode binhex4 files.
                                                             (line   12)
* bisect (module):                       bisect --- Array bisection algorithm.
                                                             (line    6)
* bisect() (in module bisect):           bisect --- Array bisection algorithm.
                                                             (line   34)
* bisect_left() (in module bisect):      bisect --- Array bisection algorithm.
                                                             (line   20)
* bisect_right() (in module bisect):     bisect --- Array bisection algorithm.
                                                             (line   34)
* bitmap() (msilib.Dialog method):       GUI classes.        (line   60)
* bitwise; and:                          Binary bitwise operations.
                                                             (line   12)
* bitwise; operations:                   Bitwise Operations on Integer Types.
                                                             (line    6)
* bitwise; or:                           Binary bitwise operations.
                                                             (line   18)
* bitwise; xor:                          Binary bitwise operations.
                                                             (line   15)
* bit_length() (int method):             Additional Methods on Integer Types.
                                                             (line    9)
* bk() (in module turtle):               Turtle motion.      (line   24)
* bkgd() (curses.window method):         Window Objects.     (line   53)
* bkgdset() (curses.window method):      Window Objects.     (line   65)
* blank line:                            Blank lines.        (line    6)
* block:                                 Structure of a program.
                                                             (line    6)
* blocked_domains() (http.cookiejar.DefaultCookiePolicy method): DefaultCookiePolicy Objects.
                                                             (line   52)
* BlockingIOError:                       OS exceptions.      (line    9)
* BlockingIOError <1>:                   High-level Module Interface.
                                                             (line   17)
* block_size (hmac.HMAC attribute):      hmac --- Keyed-Hashing for Message Authentication.
                                                             (line   78)
* BNF:                                   Notation.           (line    6)
* BNF <1>:                               Expressions.        (line    6)
* body() (nntplib.NNTP method):          Methods<3>.         (line  272)
* body_encode() (email.charset.Charset method): email charset Representing character sets.
                                                             (line  125)
* body_encoding (email.charset.Charset attribute): email charset Representing character sets.
                                                             (line   57)
* body_line_iterator() (in module email.iterators): email iterators Iterators.
                                                             (line   10)
* BOM (in module codecs):                codecs --- Codec registry and base classes.
                                                             (line  229)
* BOM_BE (in module codecs):             codecs --- Codec registry and base classes.
                                                             (line  229)
* BOM_LE (in module codecs):             codecs --- Codec registry and base classes.
                                                             (line  229)
* BOM_UTF16 (in module codecs):          codecs --- Codec registry and base classes.
                                                             (line  229)
* BOM_UTF16_BE (in module codecs):       codecs --- Codec registry and base classes.
                                                             (line  229)
* BOM_UTF16_LE (in module codecs):       codecs --- Codec registry and base classes.
                                                             (line  229)
* BOM_UTF32 (in module codecs):          codecs --- Codec registry and base classes.
                                                             (line  229)
* BOM_UTF32_BE (in module codecs):       codecs --- Codec registry and base classes.
                                                             (line  229)
* BOM_UTF32_LE (in module codecs):       codecs --- Codec registry and base classes.
                                                             (line  229)
* BOM_UTF8 (in module codecs):           codecs --- Codec registry and base classes.
                                                             (line  229)
* bool (built-in class):                 Built-in Functions. (line   98)
* Boolean; operation:                    Boolean operations. (line    6)
* Boolean; operations:                   Truth Value Testing.
                                                             (line    6)
* Boolean; operations <1>:               Boolean Operations --- and or not.
                                                             (line    6)
* Boolean; type:                         Built-in Functions. (line  108)
* Boolean; values:                       Boolean Values.     (line   15)
* BOOLEAN_STATES (in module configparser): Customizing Parser Behaviour.
                                                             (line  276)
* bootstrap() (in module ensurepip):     Module API.         (line   13)
* border() (curses.window method):       Window Objects.     (line   76)
* bottom() (curses.panel.Panel method):  Panel Objects.      (line   21)
* bottom_panel() (in module curses.panel): Functions<3>.     (line    8)
* BoundArguments (class in inspect):     Introspecting callables with the Signature object.
                                                             (line  243)
* BoundaryError:                         email errors Exception and Defect classes.
                                                             (line   33)
* BoundedSemaphore (class in asyncio):   BoundedSemaphore.   (line    6)
* BoundedSemaphore (class in multiprocessing): Synchronization primitives.
                                                             (line   19)
* BoundedSemaphore (class in threading): Semaphore Objects.  (line   67)
* BoundedSemaphore() (multiprocessing.managers.SyncManager method): Managers.
                                                             (line  148)
* box() (curses.window method):          Window Objects.     (line  116)
* bpformat() (bdb.Breakpoint method):    bdb --- Debugger framework.
                                                             (line   55)
* bpprint() (bdb.Breakpoint method):     bdb --- Debugger framework.
                                                             (line   74)
* break (pdb command):                   Debugger Commands.  (line   71)
* Breakpoint (class in bdb):             bdb --- Debugger framework.
                                                             (line   22)
* breakpoints:                           Help menu Shell and Editor.
                                                             (line   28)
* break_anywhere() (bdb.Bdb method):     bdb --- Debugger framework.
                                                             (line  204)
* break_here() (bdb.Bdb method):         bdb --- Debugger framework.
                                                             (line  197)
* break_long_words (textwrap.TextWrapper attribute): textwrap --- Text wrapping and filling.
                                                             (line  235)
* BREAK_LOOP (opcode):                   Python Bytecode Instructions.
                                                             (line  283)
* break_on_hyphens (textwrap.TextWrapper attribute): textwrap --- Text wrapping and filling.
                                                             (line  245)
* broadcast_address (ipaddress.IPv4Network attribute): Network objects.
                                                             (line   89)
* broadcast_address (ipaddress.IPv6Network attribute): Network objects.
                                                             (line  274)
* broken (threading.Barrier attribute):  Barrier Objects.    (line  100)
* BrokenBarrierError:                    Barrier Objects.    (line  105)
* BrokenPipeError:                       OS exceptions.      (line   37)
* BrokenProcessPool:                     Exception classes.  (line   14)
* BROWSER:                               webbrowser --- Convenient Web-browser controller.
                                                             (line   20)
* BROWSER <1>:                           webbrowser --- Convenient Web-browser controller.
                                                             (line   89)
* BsdDbShelf (class in shelve):          Restrictions.       (line   52)
* buffer (2to3 fixer):                   Fixers.             (line   64)
* buffer (io.TextIOBase attribute):      Text I/O<2>.        (line   31)
* buffer (unittest.TestResult attribute): Loading and running tests.
                                                             (line  256)
* buffer interface; (see buffer protocol): Iterator Protocol.
                                                             (line   45)
* buffer object; (see buffer protocol):  Iterator Protocol.  (line   44)
* buffer protocol:                       Iterator Protocol.  (line   45)
* buffer protocol; binary sequence types: printf-style String Formatting.
                                                             (line  191)
* buffer protocol; str (built-in class): Text Sequence Type --- str.
                                                             (line   60)
* buffer size, I/O:                      Built-in Functions. (line 1067)
* BufferedIOBase (class in io):          I/O Base Classes.   (line  217)
* BufferedRandom (class in io):          Buffered Streams.   (line  129)
* BufferedReader (class in io):          Buffered Streams.   (line   53)
* BufferedRWPair (class in io):          Buffered Streams.   (line  142)
* BufferedWriter (class in io):          Buffered Streams.   (line   90)
* BufferError:                           Base classes.       (line   49)
* BufferingHandler (class in logging.handlers): MemoryHandler.
                                                             (line   19)
* BufferTooShort:                        Process and exceptions.
                                                             (line  188)
* buffer_info() (array.array method):    array --- Efficient arrays of numeric values.
                                                             (line  118)
* buffer_size (xml.parsers.expat.xmlparser attribute): XMLParser Objects<2>.
                                                             (line   84)
* buffer_text (xml.parsers.expat.xmlparser attribute): XMLParser Objects<2>.
                                                             (line   91)
* buffer_used (xml.parsers.expat.xmlparser attribute): XMLParser Objects<2>.
                                                             (line  100)
* bufsize() (ossaudiodev.oss_audio_device method): Audio Device Objects.
                                                             (line  214)
* BUILD_LIST (opcode):                   Python Bytecode Instructions.
                                                             (line  460)
* BUILD_MAP (opcode):                    Python Bytecode Instructions.
                                                             (line  468)
* build_opener() (in module urllib.request): urllib request --- Extensible library for opening URLs.
                                                             (line  121)
* build_py (class in distutils.command.build_py): distutils command build_py --- Build the py/ pyc files of a package.
                                                             (line    6)
* build_py_2to3 (class in distutils.command.build_py): distutils command build_py --- Build the py/ pyc files of a package.
                                                             (line    8)
* BUILD_SET (opcode):                    Python Bytecode Instructions.
                                                             (line  464)
* BUILD_SLICE (opcode):                  Python Bytecode Instructions.
                                                             (line  641)
* BUILD_TUPLE (opcode):                  Python Bytecode Instructions.
                                                             (line  455)
* built-in function; abs:                Emulating numeric types.
                                                             (line  109)
* built-in function; abs <1>:            Number Protocol.    (line   85)
* built-in function; ascii:              Object Protocol.    (line  167)
* built-in function; bytes:              Basic customization.
                                                             (line  139)
* built-in function; bytes <1>:          Object Protocol.    (line  187)
* built-in function; call:               Calls.              (line  127)
* built-in function; chr:                The standard type hierarchy.
                                                             (line  138)
* built-in function; classmethod:        Common Object Structures.
                                                             (line  192)
* built-in function; compile:            The global statement.
                                                             (line   27)
* built-in function; compile <1>:        Code Objects.       (line    6)
* built-in function; compile <2>:        Standard Interpreter Types.
                                                             (line   36)
* built-in function; compile <3>:        Queries on ST Objects.
                                                             (line   14)
* built-in function; compile <4>:        Importing Modules<2>.
                                                             (line  120)
* built-in function; complex:            Emulating numeric types.
                                                             (line  117)
* built-in function; complex <1>:        Numeric Types --- int float complex.
                                                             (line   27)
* built-in function; divmod:             Emulating numeric types.
                                                             (line   26)
* built-in function; divmod <1>:         Emulating numeric types.
                                                             (line   56)
* built-in function; divmod <2>:         Number Protocol.    (line   58)
* built-in function; eval:               The global statement.
                                                             (line   27)
* built-in function; eval <1>:           Expression input.   (line    6)
* built-in function; eval <2>:           Code Objects.       (line   14)
* built-in function; eval <3>:           pprint --- Data pretty printer.
                                                             (line  111)
* built-in function; eval <4>:           PrettyPrinter Objects.
                                                             (line   26)
* built-in function; eval <5>:           Converting ST Objects.
                                                             (line   45)
* built-in function; exec:               The global statement.
                                                             (line   27)
* built-in function; exec <1>:           Built-in Functions. (line  445)
* built-in function; exec <2>:           Code Objects.       (line   14)
* built-in function; exec <3>:           Converting ST Objects.
                                                             (line   45)
* built-in function; float:              Emulating numeric types.
                                                             (line  117)
* built-in function; float <1>:          Numeric Types --- int float complex.
                                                             (line   27)
* built-in function; float <2>:          Number Protocol.    (line  238)
* built-in function; hash:               Basic customization.
                                                             (line  209)
* built-in function; hash <1>:           Immutable Sequence Types.
                                                             (line    6)
* built-in function; hash <2>:           Object Protocol.    (line  310)
* built-in function; hash <3>:           Type Objects<3>.    (line  371)
* built-in function; help:               Operating System Interface.
                                                             (line   20)
* built-in function; id:                 Objects values and types.
                                                             (line   11)
* built-in function; int:                Emulating numeric types.
                                                             (line  117)
* built-in function; int <1>:            Numeric Types --- int float complex.
                                                             (line   27)
* built-in function; int <2>:            Number Protocol.    (line  231)
* built-in function; len:                The standard type hierarchy.
                                                             (line  109)
* built-in function; len <1>:            The standard type hierarchy.
                                                             (line  201)
* built-in function; len <2>:            The standard type hierarchy.
                                                             (line  231)
* built-in function; len <3>:            Emulating container types.
                                                             (line   39)
* built-in function; len <4>:            Common Sequence Operations.
                                                             (line   21)
* built-in function; len <5>:            Mapping Types --- dict.
                                                             (line    6)
* built-in function; len <6>:            Object Protocol.    (line  356)
* built-in function; len <7>:            Sequence Protocol.  (line   14)
* built-in function; len <8>:            Mapping Protocol.   (line   14)
* built-in function; len <9>:            List Objects.       (line   39)
* built-in function; len <10>:           Dictionary Objects. (line  123)
* built-in function; len <11>:           Set Objects.        (line   90)
* built-in function; max:                Common Sequence Operations.
                                                             (line   21)
* built-in function; min:                Common Sequence Operations.
                                                             (line   21)
* built-in function; open:               Reading and Writing Files.
                                                             (line    6)
* built-in function; open <1>:           The standard type hierarchy.
                                                             (line  579)
* built-in function; ord:                The standard type hierarchy.
                                                             (line  138)
* built-in function; pow:                Emulating numeric types.
                                                             (line   26)
* built-in function; pow <1>:            Emulating numeric types.
                                                             (line   26)
* built-in function; pow <2>:            Emulating numeric types.
                                                             (line   56)
* built-in function; pow <3>:            Emulating numeric types.
                                                             (line   66)
* built-in function; pow <4>:            Number Protocol.    (line   67)
* built-in function; pow <5>:            Number Protocol.    (line  183)
* built-in function; print:              Basic customization.
                                                             (line  142)
* built-in function; range:              The for statement.  (line   39)
* built-in function; repr:               Expression statements.
                                                             (line   17)
* built-in function; repr <1>:           Finalization and De-allocation.
                                                             (line   78)
* built-in function; repr <2>:           Object Protocol.    (line  154)
* built-in function; repr <3>:           Type Objects<3>.    (line  325)
* built-in function; round:              Emulating numeric types.
                                                             (line  117)
* built-in function; slice:              The standard type hierarchy.
                                                             (line  718)
* built-in function; slice <1>:          Python Bytecode Instructions.
                                                             (line  643)
* built-in function; staticmethod:       Common Object Structures.
                                                             (line  199)
* built-in function; tuple:              Sequence Protocol.  (line  117)
* built-in function; tuple <1>:          List Objects.       (line  125)
* built-in function; type:               Objects values and types.
                                                             (line   11)
* built-in function; type <1>:           Type Objects.       (line    6)
* built-in function; type <2>:           Object Protocol.    (line  337)
* built-in function; __import__:         Importing Modules<2>.
                                                             (line   39)
* built-in method; call:                 Calls.              (line  127)
* built-in; method:                      The standard type hierarchy.
                                                             (line  450)
* built-in; types:                       Built-in Types.     (line    9)
* BuiltinFunctionType (in module types): Standard Interpreter Types.
                                                             (line   42)
* BuiltinImporter (class in importlib.machinery): importlib machinery -- Importers and path hooks.
                                                             (line   63)
* BuiltinMethodType (in module types):   Standard Interpreter Types.
                                                             (line   42)
* builtins (module):                     builtins --- Built-in objects.
                                                             (line    6)
* builtin_module_names (in module sys):  sys --- System-specific parameters and functions.
                                                             (line   66)
* ButtonBox (class in tkinter.tix):      Basic Widgets.      (line   13)
* bye() (in module turtle):              Methods specific to Screen not inherited from TurtleScreen.
                                                             (line    6)
* byref() (in module ctypes):            Utility functions.  (line   16)
* byte:                                  The standard type hierarchy.
                                                             (line  165)
* bytearray:                             The standard type hierarchy.
                                                             (line  189)
* bytearray (built-in class):            Built-in Functions. (line  108)
* bytearray; formatting:                 printf-style Bytes Formatting.
                                                             (line    6)
* bytearray; interpolation:              printf-style Bytes Formatting.
                                                             (line    6)
* bytearray; methods:                    Bytes and Bytearray Operations.
                                                             (line    6)
* bytecode:                              The standard type hierarchy.
                                                             (line  600)
* bytecode <1>:                          Glossary.           (line  143)
* Bytecode (class in dis):               Bytecode analysis.  (line   12)
* Bytecode.codeobj (in module dis):      Bytecode analysis.  (line   39)
* Bytecode.first_line (in module dis):   Bytecode analysis.  (line   43)
* BYTECODE_SUFFIXES (in module importlib.machinery): importlib machinery -- Importers and path hooks.
                                                             (line   36)
* byteorder (in module sys):             sys --- System-specific parameters and functions.
                                                             (line   59)
* bytes:                                 The standard type hierarchy.
                                                             (line  165)
* bytes (built-in class):                Built-in Functions. (line  139)
* bytes (uuid.UUID attribute):           uuid --- UUID objects according to RFC 4122.
                                                             (line   46)
* bytes literal:                         String and Bytes literals.
                                                             (line    6)
* bytes-like object:                     Glossary.           (line  126)
* bytes; formatting:                     printf-style Bytes Formatting.
                                                             (line    6)
* bytes; interpolation:                  printf-style Bytes Formatting.
                                                             (line    6)
* bytes; methods:                        Bytes and Bytearray Operations.
                                                             (line    6)
* bytes; str (built-in class):           Text Sequence Type --- str.
                                                             (line   60)
* BytesFeedParser (class in email.parser): FeedParser API.   (line   61)
* BytesGenerator (class in email.generator): email generator Generating MIME documents.
                                                             (line  118)
* BytesIO (class in io):                 Buffered Streams.   (line    9)
* BytesParser (class in email.parser):   Parser class API.   (line   69)
* ByteString (class in typing):          Classes functions and decorators.
                                                             (line  215)
* byteswap() (array.array method):       array --- Efficient arrays of numeric values.
                                                             (line  137)
* byteswap() (in module audioop):        audioop --- Manipulate raw audio data.
                                                             (line   64)
* BytesWarning:                          Warnings.           (line   47)
* bytes_le (uuid.UUID attribute):        uuid --- UUID objects according to RFC 4122.
                                                             (line   51)
* byte_compile() (in module distutils.util): distutils util --- Miscellaneous other utility functions.
                                                             (line  132)
* bz2 (module):                          bz2 --- Support for bzip2 compression.
                                                             (line    6)
* BZ2Compressor (class in bz2):          Incremental de compression.
                                                             (line    6)
* BZ2Decompressor (class in bz2):        Incremental de compression.
                                                             (line   33)
* BZ2File (class in bz2):                De compression of files.
                                                             (line   38)
* C:                                     String and Bytes literals.
                                                             (line   75)
* C-contiguous:                          shape strides suboffsets.
                                                             (line   26)
* C-contiguous <1>:                      Glossary.           (line  200)
* C; language:                           The standard type hierarchy.
                                                             (line    6)
* C; language <1>:                       The standard type hierarchy.
                                                             (line   89)
* C; language <2>:                       The standard type hierarchy.
                                                             (line  437)
* C; language <3>:                       Comparisons.        (line    6)
* C; language <4>:                       Numeric Types --- int float complex.
                                                             (line    6)
* C; language <5>:                       Numeric Types --- int float complex.
                                                             (line  103)
* C; structures:                         struct --- Interpret bytes as packed binary data.
                                                             (line    6)
* CAB (class in msilib):                 CAB Objects.        (line    6)
* cached (importlib.machinery.ModuleSpec attribute): importlib machinery -- Importers and path hooks.
                                                             (line  375)
* CacheFTPHandler (class in urllib.request): urllib request --- Extensible library for opening URLs.
                                                             (line  390)
* cache_from_source() (in module imp):   imp --- Access the import internals.
                                                             (line  202)
* cache_from_source() (in module importlib.util): importlib util -- Utility code for importers.
                                                             (line   17)
* calcsize() (in module struct):         Functions and Exceptions.
                                                             (line   55)
* Calendar (class in calendar):          calendar --- General calendar-related functions.
                                                             (line   26)
* calendar (module):                     calendar --- General calendar-related functions.
                                                             (line    6)
* calendar() (in module calendar):       calendar --- General calendar-related functions.
                                                             (line  250)
* call:                                  Slicings.           (line   38)
* call() (in module subprocess):         Older high-level API.
                                                             (line   10)
* call() (in module unittest.mock):      call.               (line    6)
* call; instance:                        Emulating callable objects.
                                                             (line    8)
* callable (2to3 fixer):                 Fixers.             (line   70)
* Callable (class in collections.abc):   Collections Abstract Base Classes.
                                                             (line   94)
* Callable (class in typing):            Classes functions and decorators.
                                                             (line  117)
* callable() (built-in function):        Built-in Functions. (line  156)
* CallableProxyType (in module weakref): weakref --- Weak references.
                                                             (line  309)
* callback (optparse.Option attribute):  Option attributes.  (line   60)
* callback() (contextlib.ExitStack method): Utilities.       (line  337)
* callbacks (in module gc):              gc --- Garbage Collector interface.
                                                             (line  188)
* callback_args (optparse.Option attribute): Option attributes.
                                                             (line   66)
* callback_kwargs (optparse.Option attribute): Option attributes.
                                                             (line   66)
* called (unittest.mock.Mock attribute): The Mock Class.     (line  287)
* CalledProcessError:                    Using the subprocess Module.
                                                             (line  164)
* calloc():                              Overview<2>.        (line   33)
* call_args (unittest.mock.Mock attribute): The Mock Class.  (line  406)
* call_args_list (unittest.mock.Mock attribute): The Mock Class.
                                                             (line  438)
* call_at() (asyncio.BaseEventLoop method): Delayed calls.   (line   32)
* call_count (unittest.mock.Mock attribute): The Mock Class. (line  299)
* call_exception_handler() (asyncio.BaseEventLoop method): Error Handling API.
                                                             (line   31)
* CALL_FUNCTION (opcode):                Python Bytecode Instructions.
                                                             (line  600)
* CALL_FUNCTION_KW (opcode):             Python Bytecode Instructions.
                                                             (line  661)
* CALL_FUNCTION_VAR (opcode):            Python Bytecode Instructions.
                                                             (line  655)
* CALL_FUNCTION_VAR_KW (opcode):         Python Bytecode Instructions.
                                                             (line  667)
* call_later() (asyncio.BaseEventLoop method): Delayed calls.
                                                             (line   14)
* call_list() (unittest.mock.call method): call.             (line   20)
* call_soon() (asyncio.BaseEventLoop method): Calls<2>.      (line   16)
* call_soon_threadsafe() (asyncio.BaseEventLoop method): Calls<2>.
                                                             (line   34)
* call_tracing() (in module sys):        sys --- System-specific parameters and functions.
                                                             (line   73)
* cancel() (asyncio.Future method):      Future.             (line   27)
* cancel() (asyncio.Handle method):      Handle.             (line   14)
* cancel() (asyncio.Task method):        Task.               (line   56)
* cancel() (concurrent.futures.Future method): Future Objects.
                                                             (line   16)
* cancel() (sched.scheduler method):     Scheduler Objects.  (line   40)
* cancel() (threading.Timer method):     Timer Objects.      (line   34)
* cancelled() (asyncio.Future method):   Future.             (line   35)
* cancelled() (concurrent.futures.Future method): Future Objects.
                                                             (line   23)
* CancelledError:                        Exception classes.  (line    6)
* cancel_dump_traceback_later() (in module faulthandler): Dumping the tracebacks after a timeout.
                                                             (line   28)
* cancel_join_thread() (multiprocessing.Queue method): Pipes and Queues.
                                                             (line  175)
* CannotSendHeader:                      http client --- HTTP protocol client.
                                                             (line  135)
* CannotSendRequest:                     http client --- HTTP protocol client.
                                                             (line  131)
* canonic() (bdb.Bdb method):            bdb --- Debugger framework.
                                                             (line   99)
* canonical() (decimal.Context method):  Context objects.    (line  238)
* canonical() (decimal.Decimal method):  Decimal objects.    (line  137)
* CAN_BCM (in module socket):            Constants<6>.       (line   96)
* can_change_color() (in module curses): Functions<2>.       (line   30)
* can_fetch() (urllib.robotparser.RobotFileParser method): urllib robotparser --- Parser for robots txt.
                                                             (line   29)
* CAN_RAW_FD_FRAMES (in module socket):  Constants<6>.       (line  108)
* can_symlink() (in module test.support): test support --- Utilities for the Python test suite.
                                                             (line  231)
* can_write_eof() (asyncio.StreamWriter method): StreamWriter.
                                                             (line   23)
* can_write_eof() (asyncio.WriteTransport method): WriteTransport.
                                                             (line   18)
* capa() (poplib.POP3 method):           POP3 Objects.       (line   24)
* capitalize() (bytearray method):       Bytes and Bytearray Operations.
                                                             (line  397)
* capitalize() (bytes method):           Bytes and Bytearray Operations.
                                                             (line  397)
* capitalize() (str method):             String Methods<2>.  (line   22)
* captured_stderr() (in module test.support): test support --- Utilities for the Python test suite.
                                                             (line  170)
* captured_stdin() (in module test.support): test support --- Utilities for the Python test suite.
                                                             (line  170)
* captured_stdout() (in module test.support): test support --- Utilities for the Python test suite.
                                                             (line  170)
* captureWarnings() (in module logging): Integration with the warnings module.
                                                             (line    9)
* capwords() (in module string):         Helper functions.   (line    6)
* casefold() (str method):               String Methods<2>.  (line   27)
* cast() (in module ctypes):             Utility functions.  (line   30)
* cast() (in module typing):             Classes functions and decorators.
                                                             (line  315)
* cast() (memoryview method):            Memory Views.       (line  237)
* cat() (in module nis):                 nis --- Interface to Sun's NIS Yellow Pages.
                                                             (line   27)
* catch_warnings (class in warnings):    Available Context Managers.
                                                             (line    6)
* category() (in module unicodedata):    unicodedata --- Unicode Database.
                                                             (line   47)
* cbreak() (in module curses):           Functions<2>.       (line   35)
* CC:                                    New Improved and Deprecated Modules<4>.
                                                             (line   58)
* ccc() (ftplib.FTP_TLS method):         FTP_TLS Objects.    (line   23)
* CCompiler (class in distutils.ccompiler): distutils ccompiler --- CCompiler base class.
                                                             (line   67)
* CDLL (class in ctypes):                Loading shared libraries.
                                                             (line    9)
* ceil() (in module math):               Numeric Types --- int float complex.
                                                             (line  103)
* ceil() (in module math) <1>:           Number-theoretic and representation functions.
                                                             (line    6)
* center() (bytearray method):           Bytes and Bytearray Operations.
                                                             (line  230)
* center() (bytes method):               Bytes and Bytearray Operations.
                                                             (line  230)
* center() (str method):                 String Methods<2>.  (line   43)
* CertificateError:                      Functions Constants and Exceptions.
                                                             (line   79)
* certificates:                          SSL Contexts.       (line  380)
* CERT_NONE (in module ssl):             Constants<7>.       (line    6)
* CERT_OPTIONAL (in module ssl):         Constants<7>.       (line   16)
* CERT_REQUIRED (in module ssl):         Constants<7>.       (line   28)
* cert_store_stats() (ssl.SSLContext method): SSL Contexts.  (line   30)
* cert_time_to_seconds() (in module ssl): Certificate handling.
                                                             (line   39)
* CFLAGS:                                New Improved and Deprecated Modules<4>.
                                                             (line   58)
* CFLAGS <1>:                            Tweaking compiler/linker flags.
                                                             (line   66)
* CFLAGS <2>:                            Tweaking compiler/linker flags.
                                                             (line   67)
* CFUNCTYPE() (in module ctypes):        Function prototypes.
                                                             (line   13)
* cgi (module):                          cgi --- Common Gateway Interface support.
                                                             (line    6)
* CGI; debugging:                        Debugging CGI scripts.
                                                             (line    6)
* CGI; exceptions:                       cgitb --- Traceback manager for CGI scripts.
                                                             (line    6)
* CGI; protocol:                         cgi --- Common Gateway Interface support.
                                                             (line    6)
* CGI; security:                         Caring about security.
                                                             (line    6)
* CGI; tracebacks:                       cgitb --- Traceback manager for CGI scripts.
                                                             (line    6)
* CGIHandler (class in wsgiref.handlers): wsgiref handlers -- server/gateway base classes.
                                                             (line   11)
* CGIHTTPRequestHandler (class in http.server): http server --- HTTP servers.
                                                             (line  409)
* cgitb (module):                        cgitb --- Traceback manager for CGI scripts.
                                                             (line    6)
* CGIXMLRPCRequestHandler (class in xmlrpc.server): xmlrpc server --- Basic XML-RPC servers.
                                                             (line   45)
* cgi_directories (http.server.CGIHTTPRequestHandler attribute): http server --- HTTP servers.
                                                             (line  435)
* chain() (in module itertools):         Itertool functions. (line   74)
* chaining; comparisons:                 Comparisons.        (line   17)
* chaining; comparisons <1>:             Comparisons<2>.     (line    6)
* ChainMap (class in collections):       ChainMap objects.   (line   16)
* change_cwd() (in module test.support): test support --- Utilities for the Python test suite.
                                                             (line  204)
* change_root() (in module distutils.util): distutils util --- Miscellaneous other utility functions.
                                                             (line   69)
* channels() (ossaudiodev.oss_audio_device method): Audio Device Objects.
                                                             (line  133)
* CHANNEL_BINDING_TYPES (in module ssl): Constants<7>.       (line  243)
* channel_class (smtpd.SMTPServer attribute): SMTPServer Objects.
                                                             (line   81)
* character:                             The standard type hierarchy.
                                                             (line  138)
* character <1>:                         Subscriptions.      (line   38)
* character <2>:                         unicodedata --- Unicode Database.
                                                             (line    6)
* CharacterDataHandler() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line  240)
* characters() (xml.sax.handler.ContentHandler method): ContentHandler Objects.
                                                             (line  129)
* characters_written (BlockingIOError attribute): OS exceptions.
                                                             (line   18)
* Charset (class in email.charset):      email charset Representing character sets.
                                                             (line   14)
* charset() (gettext.NullTranslations method): The NullTranslations class.
                                                             (line   63)
* CHAR_MAX (in module locale):           locale --- Internationalization services.
                                                             (line  476)
* chdir() (in module os):                Files and Directories.
                                                             (line  107)
* check (lzma.LZMADecompressor attribute): Compressing and decompressing data in memory.
                                                             (line  159)
* check() (imaplib.IMAP4 method):        IMAP4 Objects.      (line   58)
* check() (in module tabnanny):          tabnanny --- Detection of ambiguous indentation.
                                                             (line   17)
* checkbox() (msilib.Dialog method):     GUI classes.        (line   78)
* checkcache() (in module linecache):    linecache --- Random access to text lines.
                                                             (line   40)
* checkfuncname() (in module bdb):       bdb --- Debugger framework.
                                                             (line  386)
* CheckList (class in tkinter.tix):      Hierarchical ListBox.
                                                             (line   13)
* checksum; Cyclic Redundancy Check:     zlib --- Compression compatible with gzip.
                                                             (line   98)
* check_call() (in module subprocess):   Older high-level API.
                                                             (line   34)
* check_environ() (in module distutils.util): distutils util --- Miscellaneous other utility functions.
                                                             (line   76)
* check_hostname (ssl.SSLContext attribute): SSL Contexts.   (line  320)
* check_output() (doctest.OutputChecker method): OutputChecker objects.
                                                             (line   17)
* check_output() (in module subprocess): Older high-level API.
                                                             (line   60)
* check_returncode() (subprocess.CompletedProcess method): Using the subprocess Module.
                                                             (line   99)
* check_unused_args() (string.Formatter method): Custom String Formatting.
                                                             (line   91)
* check_warnings() (in module test.support): test support --- Utilities for the Python test suite.
                                                             (line  101)
* check__all__() (in module test.support): test support --- Utilities for the Python test suite.
                                                             (line  372)
* chflags() (in module os):              Files and Directories.
                                                             (line  117)
* chgat() (curses.window method):        Window Objects.     (line  122)
* childNodes (xml.dom.Node attribute):   Node Objects.       (line   49)
* ChildProcessError:                     OS exceptions.      (line   24)
* chmod() (in module os):                Files and Directories.
                                                             (line  153)
* chmod() (pathlib.Path method):         Methods<2>.         (line   39)
* choice() (in module random):           random --- Generate pseudo-random numbers.
                                                             (line  120)
* choice() (in module secrets):          Random numbers.     (line   15)
* choices (optparse.Option attribute):   Option attributes.  (line   55)
* chown() (in module os):                Files and Directories.
                                                             (line  210)
* chown() (in module shutil):            Directory and files operations.
                                                             (line  287)
* chr() (built-in function):             Built-in Functions. (line  168)
* chroot() (in module os):               Files and Directories.
                                                             (line  229)
* Chunk (class in chunk):                chunk --- Read IFF chunked data.
                                                             (line   45)
* chunk (module):                        chunk --- Read IFF chunked data.
                                                             (line    6)
* cipher() (ssl.SSLSocket method):       SSL Sockets.        (line  186)
* cipher; DES:                           crypt --- Function to check Unix passwords.
                                                             (line    6)
* circle() (in module turtle):           Turtle motion.      (line  177)
* CIRCUMFLEX (in module token):          token --- Constants used with Python parse trees.
                                                             (line   40)
* CIRCUMFLEXEQUAL (in module token):     token --- Constants used with Python parse trees.
                                                             (line   40)
* Clamped (class in decimal):            Signals.            (line   20)
* class:                                 Glossary.           (line  158)
* Class (class in symtable):             Examining Symbol Tables.
                                                             (line   89)
* Class browser:                         File menu Shell and Editor.
                                                             (line   22)
* class instance; attribute:             The standard type hierarchy.
                                                             (line  549)
* class instance; attribute; assignment: The standard type hierarchy.
                                                             (line  565)
* class instance; call:                  Calls.              (line  136)
* class object; call:                    The standard type hierarchy.
                                                             (line  524)
* class object; call <1>:                The standard type hierarchy.
                                                             (line  536)
* class object; call <2>:                Calls.              (line  132)
* class; attribute:                      The standard type hierarchy.
                                                             (line  524)
* class; attribute; assignment:          The standard type hierarchy.
                                                             (line  533)
* class; constructor:                    Basic customization.
                                                             (line   39)
* class; definition:                     The return statement.
                                                             (line    6)
* class; definition <1>:                 Class definitions.  (line    6)
* class; instance:                       The standard type hierarchy.
                                                             (line  549)
* class; name:                           Class definitions.  (line    6)
* classmethod() (built-in function):     Built-in Functions. (line  179)
* clause:                                Compound statements.
                                                             (line   18)
* CLD_CONTINUED (in module os):          Process Management. (line  547)
* CLD_DUMPED (in module os):             Process Management. (line  547)
* CLD_EXITED (in module os):             Process Management. (line  547)
* CLD_TRAPPED (in module os):            Process Management. (line  547)
* clean() (mailbox.Maildir method):      Maildir.            (line   78)
* cleandoc() (in module inspect):        Retrieving source code.
                                                             (line   63)
* cleanup functions:                     Process Control.    (line   26)
* clear (pdb command):                   Debugger Commands.  (line   93)
* Clear Breakpoint:                      Help menu Shell and Editor.
                                                             (line   29)
* clear() (asyncio.Event method):        Event.              (line   18)
* clear() (collections.deque method):    deque objects.      (line   43)
* clear() (curses.window method):        Window Objects.     (line  138)
* clear() (dict method):                 Mapping Types --- dict.
                                                             (line  126)
* clear() (email.message.EmailMessage method): email contentmanager Managing MIME Content.
                                                             (line  222)
* clear() (frame method):                The standard type hierarchy.
                                                             (line  676)
* clear() (http.cookiejar.CookieJar method): CookieJar and FileCookieJar Objects.
                                                             (line   77)
* clear() (in module turtle):            More drawing control.
                                                             (line   23)
* clear() (in module turtle) <1>:        Window control.     (line   39)
* clear() (mailbox.Mailbox method):      Mailbox objects.    (line  204)
* clear() (sequence method):             Mutable Sequence Types.
                                                             (line   16)
* clear() (set method):                  Set Types --- set frozenset.
                                                             (line  202)
* clear() (threading.Event method):      Event Objects.      (line   33)
* clear() (xml.etree.ElementTree.Element method): Element Objects.
                                                             (line   58)
* clearcache() (in module linecache):    linecache --- Random access to text lines.
                                                             (line   35)
* ClearData() (msilib.Record method):    Record Objects.     (line   37)
* clearok() (curses.window method):      Window Objects.     (line  143)
* clearscreen() (in module turtle):      Window control.     (line   39)
* clearstamp() (in module turtle):       Turtle motion.      (line  249)
* clearstamps() (in module turtle):      Turtle motion.      (line  268)
* clear_all_breaks() (bdb.Bdb method):   bdb --- Debugger framework.
                                                             (line  305)
* clear_all_file_breaks() (bdb.Bdb method): bdb --- Debugger framework.
                                                             (line  300)
* clear_bpbynumber() (bdb.Bdb method):   bdb --- Debugger framework.
                                                             (line  294)
* clear_break() (bdb.Bdb method):        bdb --- Debugger framework.
                                                             (line  289)
* clear_cache() (in module filecmp):     filecmp --- File and Directory Comparisons.
                                                             (line   53)
* clear_content() (email.message.EmailMessage method): email contentmanager Managing MIME Content.
                                                             (line  226)
* clear_flags() (decimal.Context method): Context objects.   (line  152)
* clear_frames() (in module traceback):  traceback --- Print or retrieve a stack traceback.
                                                             (line  138)
* clear_history() (in module readline):  History list.       (line    8)
* clear_session_cookies() (http.cookiejar.CookieJar method): CookieJar and FileCookieJar Objects.
                                                             (line   89)
* clear_traces() (in module tracemalloc): Functions<7>.      (line    6)
* clear_traps() (decimal.Context method): Context objects.   (line  156)
* Client() (in module multiprocessing.connection): Listeners and Clients.
                                                             (line   34)
* client_address (http.server.BaseHTTPRequestHandler attribute): http server --- HTTP servers.
                                                             (line   52)
* clock() (in module time):              time --- Time access and conversions.
                                                             (line  116)
* clock_getres() (in module time):       time --- Time access and conversions.
                                                             (line  133)
* clock_gettime() (in module time):      time --- Time access and conversions.
                                                             (line  141)
* CLOCK_HIGHRES (in module time):        time --- Time access and conversions.
                                                             (line  157)
* CLOCK_MONOTONIC (in module time):      time --- Time access and conversions.
                                                             (line  168)
* CLOCK_MONOTONIC_RAW (in module time):  time --- Time access and conversions.
                                                             (line  177)
* CLOCK_PROCESS_CPUTIME_ID (in module time): time --- Time access and conversions.
                                                             (line  186)
* CLOCK_REALTIME (in module time):       time --- Time access and conversions.
                                                             (line  194)
* clock_settime() (in module time):      time --- Time access and conversions.
                                                             (line  149)
* CLOCK_THREAD_CPUTIME_ID (in module time): time --- Time access and conversions.
                                                             (line  203)
* clone() (email.generator.BytesGenerator method): email generator Generating MIME documents.
                                                             (line  185)
* clone() (email.generator.Generator method): email generator Generating MIME documents.
                                                             (line  101)
* clone() (email.policy.Policy method):  email policy Policy Objects.
                                                             (line  178)
* clone() (in module turtle):            Special Turtle methods.
                                                             (line   32)
* clone() (pipes.Template method):       Template Objects.   (line   12)
* cloneNode() (xml.dom.Node method):     Node Objects.       (line  147)
* close() (aifc.aifc method):            aifc --- Read and write AIFF and AIFC files.
                                                             (line  120)
* close() (aifc.aifc method) <1>:        aifc --- Read and write AIFF and AIFC files.
                                                             (line  207)
* close() (asyncio.BaseEventLoop method): Run an event loop. (line   48)
* close() (asyncio.BaseSubprocessTransport method): BaseSubprocessTransport.
                                                             (line   61)
* close() (asyncio.BaseTransport method): BaseTransport.     (line   10)
* close() (asyncio.Server method):       Server.             (line   14)
* close() (asyncio.StreamWriter method): StreamWriter.       (line   29)
* close() (asyncore.dispatcher method):  asyncore --- Asynchronous socket handler.
                                                             (line  241)
* close() (chunk.Chunk method):          chunk --- Read IFF chunked data.
                                                             (line   74)
* close() (contextlib.ExitStack method): Utilities.          (line  369)
* close() (coroutine method):            Coroutine Objects.  (line   45)
* close() (dbm.dumb.dumbdbm method):     dbm dumb --- Portable DBM implementation.
                                                             (line   53)
* close() (dbm.gnu.gdbm method):         dbm gnu --- GNU's reinterpretation of dbm.
                                                             (line  114)
* close() (dbm.ndbm.ndbm method):        dbm ndbm --- Interface based on ndbm.
                                                             (line   62)
* close() (distutils.text_file.TextFile method): distutils text_file --- The TextFile class.
                                                             (line   96)
* close() (email.parser.FeedParser method): FeedParser API.  (line   54)
* close() (ftplib.FTP method):           FTP Objects.        (line  237)
* close() (generator method):            Generator-iterator methods.
                                                             (line   47)
* close() (html.parser.HTMLParser method): HTMLParser Methods.
                                                             (line   15)
* close() (http.client.HTTPConnection method): HTTPConnection Objects.
                                                             (line   94)
* close() (imaplib.IMAP4 method):        IMAP4 Objects.      (line   62)
* close() (in module fileinput):         fileinput --- Iterate over lines from multiple input streams.
                                                             (line  126)
* close() (in module os):                File Descriptor Operations.
                                                             (line   21)
* close() (in module os) <1>:            Sub-interpreter support.
                                                             (line   50)
* close() (io.IOBase method):            I/O Base Classes.   (line   49)
* close() (logging.FileHandler method):  FileHandler.        (line   20)
* close() (logging.Handler method):      Handler Objects.    (line   69)
* close() (logging.handlers.MemoryHandler method): MemoryHandler.
                                                             (line   48)
* close() (logging.handlers.NTEventLogHandler method): NTEventLogHandler.
                                                             (line   29)
* close() (logging.handlers.SocketHandler method): SocketHandler.
                                                             (line   20)
* close() (logging.handlers.SysLogHandler method): SysLogHandler.
                                                             (line   39)
* close() (mailbox.Mailbox method):      Mailbox objects.    (line  262)
* close() (mailbox.Maildir method):      Maildir.            (line  109)
* close() (mailbox.MH method):           MH.                 (line  104)
* close() (mmap.mmap method):            mmap --- Memory-mapped file support.
                                                             (line  153)
* Close() (msilib.View method):          View Objects.       (line   35)
* close() (multiprocessing.Connection method): Connection Objects<2>.
                                                             (line   35)
* close() (multiprocessing.connection.Listener method): Listeners and Clients.
                                                             (line   99)
* close() (multiprocessing.pool.Pool method): Process Pools. (line  150)
* close() (multiprocessing.Queue method): Pipes and Queues.  (line  156)
* close() (os.scandir method):           Files and Directories.
                                                             (line  612)
* close() (ossaudiodev.oss_audio_device method): Audio Device Objects.
                                                             (line   22)
* close() (ossaudiodev.oss_mixer_device method): Mixer Device Objects.
                                                             (line    8)
* close() (select.devpoll method):       /dev/poll Polling Objects.
                                                             (line   12)
* close() (select.epoll method):         Edge and Level Trigger Polling epoll Objects.
                                                             (line   52)
* close() (select.kqueue method):        Kqueue Objects.     (line    6)
* close() (selectors.BaseSelector method): Classes<3>.       (line  137)
* close() (shelve.Shelf method):         shelve --- Python object persistence.
                                                             (line   71)
* close() (socket.socket method):        Socket Objects.     (line   36)
* close() (sqlite3.Connection method):   Connection Objects. (line   45)
* close() (sqlite3.Cursor method):       Cursor Objects.     (line  162)
* close() (sunau.AU_read method):        AU_read Objects.    (line    9)
* close() (sunau.AU_write method):       AU_write Objects.   (line   59)
* close() (tarfile.TarFile method):      TarFile Objects.    (line  236)
* close() (telnetlib.Telnet method):     Telnet Objects.     (line   86)
* close() (urllib.request.BaseHandler method): BaseHandler Objects.
                                                             (line   14)
* close() (wave.Wave_read method):       Wave_read Objects.  (line    9)
* close() (wave.Wave_write method):      Wave_write Objects. (line   23)
* Close() (winreg.PyHKEY method):        Registry Handle Objects.
                                                             (line   34)
* close() (xml.etree.ElementTree.TreeBuilder method): TreeBuilder Objects.
                                                             (line   16)
* close() (xml.etree.ElementTree.XMLParser method): XMLParser Objects.
                                                             (line   23)
* close() (xml.etree.ElementTree.XMLPullParser method): XMLPullParser Objects.
                                                             (line   22)
* close() (xml.sax.xmlreader.IncrementalParser method): IncrementalParser Objects.
                                                             (line   13)
* close() (zipfile.ZipFile method):      ZipFile Objects.    (line   59)
* closed (http.client.HTTPResponse attribute): HTTPResponse Objects.
                                                             (line   65)
* closed (io.IOBase attribute):          I/O Base Classes.   (line   59)
* closed (mmap.mmap attribute):          mmap --- Memory-mapped file support.
                                                             (line  159)
* closed (ossaudiodev.oss_audio_device attribute): Audio Device Objects.
                                                             (line  230)
* closed (select.devpoll attribute):     /dev/poll Polling Objects.
                                                             (line   18)
* closed (select.epoll attribute):       Edge and Level Trigger Polling epoll Objects.
                                                             (line   56)
* closed (select.kqueue attribute):      Kqueue Objects.     (line   10)
* CloseKey() (in module winreg):         Functions<9>.       (line    8)
* closelog() (in module syslog):         syslog --- Unix syslog library routines.
                                                             (line   51)
* closerange() (in module os):           File Descriptor Operations.
                                                             (line   32)
* close_connection (http.server.BaseHTTPRequestHandler attribute): http server --- HTTP servers.
                                                             (line   61)
* close_when_done() (asynchat.async_chat method): asynchat --- Asynchronous socket command/response handler.
                                                             (line   71)
* closing() (in module contextlib):      Utilities.          (line   74)
* clrtobot() (curses.window method):     Window Objects.     (line  148)
* clrtoeol() (curses.window method):     Window Objects.     (line  154)
* cmath (module):                        cmath --- Mathematical functions for complex numbers.
                                                             (line    6)
* Cmd (class in cmd):                    cmd --- Support for line-oriented command interpreters.
                                                             (line   15)
* cmd (module):                          cmd --- Support for line-oriented command interpreters.
                                                             (line    6)
* cmd (subprocess.CalledProcessError attribute): Using the subprocess Module.
                                                             (line  174)
* cmd (subprocess.TimeoutExpired attribute): Using the subprocess Module.
                                                             (line  138)
* cmdloop() (cmd.Cmd method):            Cmd Objects.        (line    8)
* cmdqueue (cmd.Cmd attribute):          Cmd Objects.        (line  135)
* cmp() (in module filecmp):             filecmp --- File and Directory Comparisons.
                                                             (line   16)
* cmpfiles() (in module filecmp):        filecmp --- File and Directory Comparisons.
                                                             (line   33)
* cmp_op (in module dis):                Opcode collections. (line   17)
* cmp_to_key() (in module functools):    functools --- Higher-order functions and operations on callable objects.
                                                             (line   16)
* CMSG_LEN() (in module socket):         Other functions<2>. (line  243)
* CMSG_SPACE() (in module socket):       Other functions<2>. (line  258)
* code (module):                         code --- Interpreter base classes.
                                                             (line    6)
* code (SystemExit attribute):           Concrete exceptions.
                                                             (line  283)
* code (urllib.error.HTTPError attribute): urllib error --- Exception classes raised by urllib request.
                                                             (line   34)
* code (xml.etree.ElementTree.ParseError attribute): Exceptions<11>.
                                                             (line   14)
* code (xml.parsers.expat.ExpatError attribute): ExpatError Exceptions.
                                                             (line    9)
* code; block:                           Execution model.    (line    6)
* CodecInfo (class in codecs):           codecs --- Codec registry and base classes.
                                                             (line   56)
* Codecs:                                codecs --- Codec registry and base classes.
                                                             (line    8)
* codecs (module):                       codecs --- Codec registry and base classes.
                                                             (line    6)
* Codecs; decode:                        codecs --- Codec registry and base classes.
                                                             (line    8)
* Codecs; encode:                        codecs --- Codec registry and base classes.
                                                             (line    8)
* coded_value (http.cookies.Morsel attribute): Morsel Objects.
                                                             (line   46)
* codeop (module):                       codeop --- Compile Python code.
                                                             (line    6)
* codepoint2name (in module html.entities): html entities --- Definitions of HTML general entities.
                                                             (line   35)
* codes (in module xml.parsers.expat.errors): Expat error constants.
                                                             (line   16)
* CODESET (in module locale):            locale --- Internationalization services.
                                                             (line  172)
* CodeType (in module types):            Standard Interpreter Types.
                                                             (line   34)
* code_info() (in module dis):           Analysis functions. (line   11)
* coding; style:                         Intermezzo Coding Style.
                                                             (line    6)
* coercion:                              Glossary.           (line  164)
* collapse_addresses() (in module ipaddress): Other Module Level Functions.
                                                             (line   43)
* collapse_rfc2231_value() (in module email.utils): email utils Miscellaneous utilities.
                                                             (line  177)
* collect() (in module gc):              gc --- Garbage Collector interface.
                                                             (line   32)
* collections (module):                  collections --- Container datatypes.
                                                             (line    6)
* collections.abc (module):              collections abc --- Abstract Base Classes for Containers.
                                                             (line    6)
* collect_incoming_data() (asynchat.async_chat method): asynchat --- Asynchronous socket command/response handler.
                                                             (line   76)
* colno (json.JSONDecodeError attribute): Exceptions<9>.     (line   27)
* colno (re.error attribute):            Module Contents.    (line  331)
* COLON (in module token):               token --- Constants used with Python parse trees.
                                                             (line   40)
* color() (in module turtle):            Color control.      (line  105)
* colormode() (in module turtle):        Settings and special methods.
                                                             (line   34)
* colorsys (module):                     colorsys --- Conversions between color systems.
                                                             (line    6)
* color_content() (in module curses):    Functions<2>.       (line   45)
* color_pair() (in module curses):       Functions<2>.       (line   53)
* COLS:                                  curses.             (line    7)
* COLS <1>:                              Functions<2>.       (line  521)
* column() (tkinter.ttk.Treeview method): ttk Treeview.      (line   35)
* COLUMNS:                               Functions<2>.       (line  545)
* COLUMNS <1>:                           Functions<2>.       (line  548)
* columns (os.terminal_size attribute):  Querying the size of a terminal.
                                                             (line   30)
* col_offset (ast.AST attribute):        Node classes.       (line   39)
* combinations() (in module itertools):  Itertool functions. (line   99)
* combinations_with_replacement() (in module itertools): Itertool functions.
                                                             (line  149)
* combine() (datetime.datetime class method): datetime Objects.
                                                             (line  137)
* combining() (in module unicodedata):   unicodedata --- Unicode Database.
                                                             (line   57)
* ComboBox (class in tkinter.tix):       Basic Widgets.      (line   18)
* Combobox (class in tkinter.ttk):       ttk Combobox.       (line    6)
* comma:                                 Parenthesized forms.
                                                             (line   20)
* COMMA (in module token):               token --- Constants used with Python parse trees.
                                                             (line   40)
* Command (class in distutils.cmd):      distutils cmd --- Abstract base class for Distutils commands.
                                                             (line    8)
* Command (class in distutils.core):     distutils core --- Core Distutils functionality.
                                                             (line  300)
* command (http.server.BaseHTTPRequestHandler attribute): http server --- HTTP servers.
                                                             (line   74)
* command line:                          Complete Python programs.
                                                             (line   25)
* command line option; -?:               Generic options.    (line    6)
* command line option; -b:               Miscellaneous options.
                                                             (line    6)
* command line option; -B:               Miscellaneous options.
                                                             (line   16)
* command line option; -c <command>:     Interface options.  (line   36)
* command line option; -c <tarfile> <source1> <sourceN>: Command line options.
                                                             (line   11)
* command line option; –create <tarfile> <source1> <sourceN>: Command line options.
                                                             (line   11)
* command line option; -d:               Miscellaneous options.
                                                             (line   21)
* command line option; -E:               Miscellaneous options.
                                                             (line   26)
* command line option; -e <tarfile> [<output_dir>]: Command line options.
                                                             (line   16)
* command line option; –extract <tarfile> [<output_dir>]: Command line options.
                                                             (line   16)
* command line option; -h:               Generic options.    (line    6)
* command line option; -h, –help:        Command line options<2>.
                                                             (line   35)
* command line option; –help:            Generic options.    (line    6)
* command line option; -i:               Miscellaneous options.
                                                             (line   31)
* command line option; -I:               Miscellaneous options.
                                                             (line   42)
* command line option; -J:               Options you shouldn't use.
                                                             (line    6)
* command line option; -l <tarfile>:     Command line options.
                                                             (line    6)
* command line option; –list <tarfile>:  Command line options.
                                                             (line    6)
* command line option; -m <module-name>: Interface options.  (line   47)
* command line option; -O:               Miscellaneous options.
                                                             (line   52)
* command line option; -OO:              Miscellaneous options.
                                                             (line   58)
* command line option; -q:               Miscellaneous options.
                                                             (line   62)
* command line option; -R:               Miscellaneous options.
                                                             (line   69)
* command line option; -s:               Miscellaneous options.
                                                             (line   91)
* command line option; -S:               Miscellaneous options.
                                                             (line  101)
* command line option; –sort-keys:       Command line options<2>.
                                                             (line   29)
* command line option; -t <tarfile>:     Command line options.
                                                             (line   22)
* command line option; –test <tarfile>:  Command line options.
                                                             (line   22)
* command line option; -u:               Miscellaneous options.
                                                             (line  109)
* command line option; -V:               Generic options.    (line   12)
* command line option; -v:               Miscellaneous options.
                                                             (line  118)
* command line option; -v, –verbose:     Command line options.
                                                             (line   27)
* command line option; –version:         Generic options.    (line   12)
* command line option; -W arg:           Miscellaneous options.
                                                             (line  126)
* command line option; -x:               Miscellaneous options.
                                                             (line  204)
* command line option; -X:               Miscellaneous options.
                                                             (line  211)
* command line option; infile:           Command line options<2>.
                                                             (line    6)
* command line option; outfile:          Command line options<2>.
                                                             (line   24)
* CommandCompiler (class in codeop):     codeop --- Compile Python code.
                                                             (line   60)
* commands (pdb command):                Debugger Commands.  (line  126)
* comment:                               Comments.           (line    6)
* comment (http.cookiejar.Cookie attribute): Cookie Objects<2>.
                                                             (line   57)
* COMMENT (in module tokenize):          Tokenizing Input.   (line   42)
* comment (zipfile.ZipFile attribute):   ZipFile Objects.    (line  238)
* comment (zipfile.ZipInfo attribute):   ZipInfo Objects.    (line   69)
* Comment() (in module xml.etree.ElementTree): Functions<5>. (line    6)
* commenters (shlex.shlex attribute):    shlex Objects.      (line   85)
* CommentHandler() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line  295)
* comment_url (http.cookiejar.Cookie attribute): Cookie Objects<2>.
                                                             (line   62)
* commit() (msilib.CAB method):          CAB Objects.        (line   24)
* Commit() (msilib.Database method):     Database Objects.   (line   11)
* commit() (sqlite3.Connection method):  Connection Objects. (line   32)
* common (filecmp.dircmp attribute):     The dircmp class.   (line   59)
* Common Gateway Interface:              cgi --- Common Gateway Interface support.
                                                             (line    6)
* commonpath() (in module os.path):      os path --- Common pathname manipulations.
                                                             (line   61)
* commonprefix() (in module os.path):    os path --- Common pathname manipulations.
                                                             (line   72)
* common_dirs (filecmp.dircmp attribute): The dircmp class.  (line   71)
* common_files (filecmp.dircmp attribute): The dircmp class. (line   75)
* common_funny (filecmp.dircmp attribute): The dircmp class. (line   79)
* common_types (in module mimetypes):    mimetypes --- Map filenames to MIME types.
                                                             (line  135)
* communicate() (asyncio.asyncio.subprocess.Process method): Process.
                                                             (line   45)
* communicate() (subprocess.Popen method): Popen Objects.    (line   40)
* compare() (decimal.Context method):    Context objects.    (line  242)
* compare() (decimal.Decimal method):    Decimal objects.    (line  143)
* compare() (difflib.Differ method):     Differ Objects.     (line   38)
* compare_digest() (in module hmac):     hmac --- Keyed-Hashing for Message Authentication.
                                                             (line   93)
* compare_digest() (in module secrets):  Other functions.    (line    6)
* compare_networks() (ipaddress.IPv4Network method): Network objects.
                                                             (line  202)
* compare_networks() (ipaddress.IPv6Network method): Network objects.
                                                             (line  302)
* COMPARE_OP (opcode):                   Python Bytecode Instructions.
                                                             (line  477)
* compare_signal() (decimal.Context method): Context objects.
                                                             (line  246)
* compare_signal() (decimal.Decimal method): Decimal objects.
                                                             (line  154)
* compare_to() (tracemalloc.Snapshot method): Snapshot.      (line   13)
* compare_total() (decimal.Context method): Context objects. (line  250)
* compare_total() (decimal.Decimal method): Decimal objects. (line  161)
* compare_total_mag() (decimal.Context method): Context objects.
                                                             (line  254)
* compare_total_mag() (decimal.Decimal method): Decimal objects.
                                                             (line  186)
* comparison:                            Comparisons.        (line    6)
* comparisons:                           Basic customization.
                                                             (line  169)
* COMPARISON_FLAGS (in module doctest):  Option Flags.       (line  115)
* Compat32 (class in email.policy):      email policy Policy Objects.
                                                             (line  313)
* compat32 (in module email.policy):     email policy Policy Objects.
                                                             (line  370)
* Compile (class in codeop):             codeop --- Compile Python code.
                                                             (line   51)
* compile() (built-in function):         Built-in Functions. (line  207)
* compile() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  269)
* compile() (in module py_compile):      py_compile --- Compile Python source files.
                                                             (line   24)
* compile() (in module re):              Module Contents.    (line   11)
* compile() (parser.ST method):          ST Objects.         (line   17)
* compileall (module):                   compileall --- Byte-compile Python libraries.
                                                             (line    6)
* compileall command line option; -b:    Command-line use.   (line   52)
* compileall command line option; -d destdir: Command-line use.
                                                             (line   32)
* compileall command line option; -f:    Command-line use.   (line   22)
* compileall command line option; -i list: Command-line use. (line   46)
* compileall command line option; -j N:  Command-line use.   (line   67)
* compileall command line option; -l:    Command-line use.   (line   17)
* compileall command line option; -q:    Command-line use.   (line   26)
* compileall command line option; -r:    Command-line use.   (line   60)
* compileall command line option; -x regex: Command-line use.
                                                             (line   40)
* compileall command line option; directory ...: Command-line use.
                                                             (line    9)
* compileall command line option; file ...: Command-line use.
                                                             (line    9)
* compilest() (in module parser):        Converting ST Objects.
                                                             (line   43)
* compile_command() (in module code):    code --- Interpreter base classes.
                                                             (line   42)
* compile_command() (in module codeop):  codeop --- Compile Python code.
                                                             (line   25)
* compile_dir() (in module compileall):  Public functions.   (line    6)
* compile_file() (in module compileall): Public functions.   (line   62)
* compile_path() (in module compileall): Public functions.   (line  100)
* complete() (rlcompleter.Completer method): Completer Objects.
                                                             (line    8)
* completedefault() (cmd.Cmd method):    Cmd Objects.        (line   80)
* CompletedProcess (class in subprocess): Using the subprocess Module.
                                                             (line   65)
* complete_statement() (in module sqlite3): Module functions and constants.
                                                             (line  125)
* complex (built-in class):              Built-in Functions. (line  271)
* Complex (class in numbers):            The numeric tower.  (line    6)
* complex literal:                       Numeric literals.   (line    6)
* complex number:                        Glossary.           (line  176)
* complex number; literals:              Numeric Types --- int float complex.
                                                             (line   19)
* complex; number:                       The standard type hierarchy.
                                                             (line  101)
* compound; statement:                   Compound statements.
                                                             (line    6)
* compress() (bz2.BZ2Compressor method): Incremental de compression.
                                                             (line   15)
* compress() (in module bz2):            One-shot de compression.
                                                             (line    6)
* compress() (in module gzip):           gzip --- Support for gzip files.
                                                             (line  160)
* compress() (in module itertools):      Itertool functions. (line  199)
* compress() (in module lzma):           Compressing and decompressing data in memory.
                                                             (line  183)
* compress() (in module zlib):           zlib --- Compression compatible with gzip.
                                                             (line   43)
* compress() (lzma.LZMACompressor method): Compressing and decompressing data in memory.
                                                             (line   81)
* compress() (zlib.Compress method):     zlib --- Compression compatible with gzip.
                                                             (line  159)
* compressed (ipaddress.IPv4Address attribute): Address objects.
                                                             (line   51)
* compressed (ipaddress.IPv4Network attribute): Network objects.
                                                             (line  101)
* compressed (ipaddress.IPv6Address attribute): Address objects.
                                                             (line  146)
* compressed (ipaddress.IPv6Network attribute): Network objects.
                                                             (line  280)
* compression() (ssl.SSLSocket method):  SSL Sockets.        (line  204)
* CompressionError:                      tarfile --- Read and write tar archive files.
                                                             (line  188)
* compressobj() (in module zlib):        zlib --- Compression compatible with gzip.
                                                             (line   57)
* compress_size (zipfile.ZipInfo attribute): ZipInfo Objects.
                                                             (line  119)
* compress_type (zipfile.ZipInfo attribute): ZipInfo Objects.
                                                             (line   65)
* COMSPEC:                               Process Management. (line  457)
* COMSPEC <1>:                           Popen Constructor.  (line   75)
* concat() (in module operator):         operator --- Standard operators as functions.
                                                             (line  170)
* concatenation; operation:              Common Sequence Operations.
                                                             (line   21)
* concurrent.futures (module):           concurrent futures --- Launching parallel tasks.
                                                             (line    6)
* Condition (class in asyncio):          Condition.          (line    6)
* Condition (class in multiprocessing):  Synchronization primitives.
                                                             (line   32)
* Condition (class in threading):        Condition Objects.  (line   72)
* condition (pdb command):               Debugger Commands.  (line  119)
* condition() (msilib.Control method):   GUI classes.        (line   24)
* Condition() (multiprocessing.managers.SyncManager method): Managers.
                                                             (line  153)
* Conditional; expression:               Boolean operations. (line    6)
* conditional; expression:               Conditional expressions.
                                                             (line    6)
* ConfigParser (class in configparser):  ConfigParser Objects.
                                                             (line    6)
* configparser (module):                 configparser --- Configuration file parser.
                                                             (line    6)
* configuration information:             sysconfig --- Provide access to Python's configuration information.
                                                             (line    6)
* configuration; file:                   configparser --- Configuration file parser.
                                                             (line    8)
* configure() (tkinter.ttk.Style method): Ttk Styling.       (line   24)
* configure_mock() (unittest.mock.Mock method): The Mock Class.
                                                             (line  233)
* confstr() (in module os):              Miscellaneous System Information.
                                                             (line    6)
* confstr_names (in module os):          Miscellaneous System Information.
                                                             (line   28)
* conjugate() (complex number method):   Numeric Types --- int float complex.
                                                             (line   93)
* conjugate() (decimal.Decimal method):  Decimal objects.    (line  198)
* conjugate() (numbers.Complex method):  The numeric tower.  (line   23)
* conn (smtpd.SMTPChannel attribute):    SMTPChannel Objects.
                                                             (line   47)
* connect() (asyncore.dispatcher method): asyncore --- Asynchronous socket handler.
                                                             (line  192)
* connect() (ftplib.FTP method):         FTP Objects.        (line   22)
* connect() (http.client.HTTPConnection method): HTTPConnection Objects.
                                                             (line   88)
* connect() (in module sqlite3):         Module functions and constants.
                                                             (line   54)
* connect() (multiprocessing.managers.BaseManager method): Managers.
                                                             (line   59)
* connect() (smtplib.SMTP method):       SMTP Objects.       (line   33)
* connect() (socket.socket method):      Socket Objects.     (line   57)
* Connection (class in multiprocessing): Connection Objects<2>.
                                                             (line   13)
* Connection (class in sqlite3):         Connection Objects. (line    6)
* connection (sqlite3.Cursor attribute): Cursor Objects.     (line  211)
* ConnectionAbortedError:                OS exceptions.      (line   44)
* ConnectionError:                       OS exceptions.      (line   29)
* ConnectionRefusedError:                OS exceptions.      (line   50)
* ConnectionResetError:                  OS exceptions.      (line   56)
* connection_lost() (asyncio.BaseProtocol method): Connection callbacks.
                                                             (line   17)
* connection_made() (asyncio.BaseProtocol method): Connection callbacks.
                                                             (line    9)
* ConnectRegistry() (in module winreg):  Functions<9>.       (line   17)
* connect_ex() (socket.socket method):   Socket Objects.     (line   76)
* connect_read_pipe() (asyncio.BaseEventLoop method): Connect pipes.
                                                             (line   10)
* connect_write_pipe() (asyncio.BaseEventLoop method): Connect pipes.
                                                             (line   25)
* const (optparse.Option attribute):     Option attributes.  (line   50)
* constant:                              Literals.           (line    6)
* constructor() (in module copyreg):     copyreg --- Register pickle support functions.
                                                             (line   13)
* container:                             Objects values and types.
                                                             (line   67)
* container <1>:                         The standard type hierarchy.
                                                             (line  524)
* Container (class in collections.abc):  Collections Abstract Base Classes.
                                                             (line   94)
* Container (class in typing):           Classes functions and decorators.
                                                             (line  186)
* container; iteration over:             Iterator Types.     (line    6)
* contains() (in module operator):       operator --- Standard operators as functions.
                                                             (line  175)
* ContentDispositionHeader (class in email.headerregistry): email headerregistry Custom Header Objects.
                                                             (line  278)
* ContentHandler (class in xml.sax.handler): xml sax handler --- Base classes for SAX handlers.
                                                             (line   14)
* ContentManager (class in email.contentmanager): email contentmanager Managing MIME Content.
                                                             (line  238)
* contents (ctypes._Pointer attribute):  Arrays and pointers.
                                                             (line   50)
* ContentTooShortError:                  urllib error --- Exception classes raised by urllib request.
                                                             (line   52)
* ContentTransferEncoding (class in email.headerregistry): email headerregistry Custom Header Objects.
                                                             (line  288)
* ContentTypeHeader (class in email.headerregistry): email headerregistry Custom Header Objects.
                                                             (line  265)
* content_manager (email.policy.EmailPolicy attribute): email policy Policy Objects.
                                                             (line  435)
* content_type (email.headerregistry.ContentTypeHeader attribute): email headerregistry Custom Header Objects.
                                                             (line  270)
* Context (class in decimal):            Context objects.    (line   96)
* context (ssl.SSLSocket attribute):     SSL Sockets.        (line  273)
* context management protocol:           Context Manager Types.
                                                             (line    6)
* context manager:                       With Statement Context Managers.
                                                             (line   14)
* context manager <1>:                   Context Manager Types.
                                                             (line    6)
* context manager <2>:                   Glossary.           (line  190)
* ContextDecorator (class in contextlib): Utilities.         (line  187)
* contextlib (module):                   contextlib --- Utilities for with-statement contexts.
                                                             (line    6)
* ContextManager (class in typing):      Classes functions and decorators.
                                                             (line  262)
* contextmanager() (in module contextlib): Utilities.        (line   19)
* context_diff() (in module difflib):    difflib --- Helpers for computing deltas.
                                                             (line  151)
* contiguous:                            shape strides suboffsets.
                                                             (line   26)
* contiguous <1>:                        Glossary.           (line  196)
* contiguous (memoryview attribute):     Memory Views.       (line  450)
* continue (pdb command):                Debugger Commands.  (line  191)
* CONTINUE_LOOP (opcode):                Python Bytecode Instructions.
                                                             (line  287)
* Control (class in msilib):             GUI classes.        (line   11)
* Control (class in tkinter.tix):        Basic Widgets.      (line   24)
* control() (msilib.Dialog method):      GUI classes.        (line   47)
* control() (select.kqueue method):      Kqueue Objects.     (line   22)
* controlnames (in module curses.ascii): curses ascii --- Utilities for ASCII characters.
                                                             (line  236)
* controls() (ossaudiodev.oss_mixer_device method): Mixer Device Objects.
                                                             (line   23)
* ConversionError:                       Exceptions<5>.      (line   13)
* convert_arg_line_to_args() (argparse.ArgumentParser method): Customizing file parsing.
                                                             (line    6)
* convert_field() (string.Formatter method): Custom String Formatting.
                                                             (line  108)
* convert_path() (in module distutils.util): distutils util --- Miscellaneous other utility functions.
                                                             (line   59)
* Cookie (class in http.cookiejar):      http cookiejar --- Cookie handling for HTTP clients.
                                                             (line  102)
* CookieError:                           http cookies --- HTTP state management.
                                                             (line   33)
* CookieJar (class in http.cookiejar):   http cookiejar --- Cookie handling for HTTP clients.
                                                             (line   45)
* cookiejar (urllib.request.HTTPCookieProcessor attribute): HTTPCookieProcessor Objects.
                                                             (line    8)
* CookiePolicy (class in http.cookiejar): http cookiejar --- Cookie handling for HTTP clients.
                                                             (line   70)
* Coordinated Universal Time:            time --- Time access and conversions.
                                                             (line   37)
* Copy:                                  Help menu Shell and Editor.
                                                             (line   29)
* copy (module):                         copy --- Shallow and deep copy operations.
                                                             (line    6)
* copy() (collections.deque method):     deque objects.      (line   47)
* copy() (decimal.Context method):       Context objects.    (line  162)
* copy() (dict method):                  Mapping Types --- dict.
                                                             (line  130)
* copy() (hashlib.hash method):          Hash algorithms.    (line  129)
* copy() (hmac.HMAC method):             hmac --- Keyed-Hashing for Message Authentication.
                                                             (line   66)
* copy() (http.cookies.Morsel method):   Morsel Objects.     (line  101)
* copy() (imaplib.IMAP4 method):         IMAP4 Objects.      (line   68)
* copy() (in module copy):               copy --- Shallow and deep copy operations.
                                                             (line   14)
* copy() (in module multiprocessing.sharedctypes): The multiprocessing sharedctypes module.
                                                             (line   83)
* copy() (in module shutil):             Directory and files operations.
                                                             (line  105)
* copy() (pipes.Template method):        Template Objects.   (line   48)
* copy() (sequence method):              Mutable Sequence Types.
                                                             (line   16)
* copy() (set method):                   Set Types --- set frozenset.
                                                             (line  112)
* copy() (types.MappingProxyType method): Standard Interpreter Types.
                                                             (line  141)
* copy() (zlib.Compress method):         zlib --- Compression compatible with gzip.
                                                             (line  179)
* copy() (zlib.Decompress method):       zlib --- Compression compatible with gzip.
                                                             (line  242)
* copy2() (in module shutil):            Directory and files operations.
                                                             (line  125)
* copy; protocol:                        Pickling Class Instances.
                                                             (line   94)
* copyfile() (in module shutil):         Directory and files operations.
                                                             (line   17)
* copyfileobj() (in module shutil):      Directory and files operations.
                                                             (line    6)
* copying files:                         shutil --- High-level file operations.
                                                             (line    6)
* copymode() (in module shutil):         Directory and files operations.
                                                             (line   50)
* copyreg (module):                      copyreg --- Register pickle support functions.
                                                             (line    6)
* copyright (built-in variable):         Constants added by the site module.
                                                             (line   18)
* copyright (in module sys):             sys --- System-specific parameters and functions.
                                                             (line   79)
* copyright (in module sys) <1>:         Process-wide parameters.
                                                             (line  185)
* copysign() (in module math):           Number-theoretic and representation functions.
                                                             (line   12)
* copystat() (in module shutil):         Directory and files operations.
                                                             (line   64)
* copytree() (in module shutil):         Directory and files operations.
                                                             (line  153)
* copy_abs() (decimal.Context method):   Context objects.    (line  259)
* copy_abs() (decimal.Decimal method):   Decimal objects.    (line  203)
* copy_decimal() (decimal.Context method): Context objects.  (line  166)
* copy_file() (in module distutils.file_util): distutils file_util --- Single file operations.
                                                             (line    9)
* copy_location() (in module ast):       ast Helpers.        (line   50)
* copy_negate() (decimal.Context method): Context objects.   (line  263)
* copy_negate() (decimal.Decimal method): Decimal objects.   (line  209)
* copy_sign() (decimal.Context method):  Context objects.    (line  267)
* copy_sign() (decimal.Decimal method):  Decimal objects.    (line  215)
* copy_tree() (in module distutils.dir_util): distutils dir_util --- Directory tree operations.
                                                             (line   32)
* coroutine:                             Special method lookup.
                                                             (line   74)
* coroutine <1>:                         Yield expressions.  (line   31)
* coroutine <2>:                         Glossary.           (line  207)
* Coroutine (class in collections.abc):  Collections Abstract Base Classes.
                                                             (line  181)
* coroutine function:                    Glossary.           (line  215)
* coroutine() (in module asyncio):       Coroutines<3>.      (line   62)
* coroutine() (in module types):         Coroutine Utility Functions.
                                                             (line    6)
* coroutine; function:                   The standard type hierarchy.
                                                             (line  428)
* CoroutineType (in module types):       Standard Interpreter Types.
                                                             (line   27)
* cos() (in module cmath):               Trigonometric functions<2>.
                                                             (line   25)
* cos() (in module math):                Trigonometric functions.
                                                             (line   28)
* cosh() (in module cmath):              Hyperbolic functions<2>.
                                                             (line   26)
* cosh() (in module math):               Hyperbolic functions.
                                                             (line   21)
* count (tracemalloc.Statistic attribute): Statistic.        (line   15)
* count (tracemalloc.StatisticDiff attribute): StatisticDiff.
                                                             (line   15)
* count() (array.array method):          array --- Efficient arrays of numeric values.
                                                             (line  145)
* count() (bytearray method):            Bytes and Bytearray Operations.
                                                             (line   35)
* count() (bytes method):                Bytes and Bytearray Operations.
                                                             (line   35)
* count() (collections.deque method):    deque objects.      (line   53)
* count() (in module itertools):         Itertool functions. (line  212)
* count() (sequence method):             Common Sequence Operations.
                                                             (line   21)
* count() (str method):                  String Methods<2>.  (line   50)
* Counter (class in collections):        Counter objects.    (line   23)
* countOf() (in module operator):        operator --- Standard operators as functions.
                                                             (line  181)
* countTestCases() (unittest.TestCase method): Test cases.   (line  709)
* countTestCases() (unittest.TestSuite method): Grouping tests.
                                                             (line   55)
* count_diff (tracemalloc.StatisticDiff attribute): StatisticDiff.
                                                             (line   20)
* CoverageResults (class in trace):      Programmatic Interface.
                                                             (line   50)
* co_argcount (code object attribute):   The standard type hierarchy.
                                                             (line  611)
* co_cellvars (code object attribute):   The standard type hierarchy.
                                                             (line  611)
* co_code (code object attribute):       The standard type hierarchy.
                                                             (line  611)
* co_consts (code object attribute):     The standard type hierarchy.
                                                             (line  611)
* co_filename (code object attribute):   The standard type hierarchy.
                                                             (line  611)
* co_firstlineno (code object attribute): The standard type hierarchy.
                                                             (line  611)
* co_flags (code object attribute):      The standard type hierarchy.
                                                             (line  611)
* co_freevars (code object attribute):   The standard type hierarchy.
                                                             (line  611)
* CO_FUTURE_DIVISION (C variable):       The Very High Level Layer.
                                                             (line  400)
* co_lnotab (code object attribute):     The standard type hierarchy.
                                                             (line  611)
* co_name (code object attribute):       The standard type hierarchy.
                                                             (line  611)
* co_names (code object attribute):      The standard type hierarchy.
                                                             (line  611)
* co_nlocals (code object attribute):    The standard type hierarchy.
                                                             (line  611)
* co_stacksize (code object attribute):  The standard type hierarchy.
                                                             (line  611)
* co_varnames (code object attribute):   The standard type hierarchy.
                                                             (line  611)
* CPP:                                   New Improved and Deprecated Modules<4>.
                                                             (line   59)
* CPPFLAGS:                              New Improved and Deprecated Modules<4>.
                                                             (line   59)
* cProfile (module):                     profile and cProfile Module Reference.
                                                             (line    6)
* CPU time:                              time --- Time access and conversions.
                                                             (line  118)
* cpu_count() (in module multiprocessing): Miscellaneous<3>. (line   13)
* cpu_count() (in module os):            Miscellaneous System Information.
                                                             (line   37)
* CPython:                               Glossary.           (line  223)
* crawl_delay() (urllib.robotparser.RobotFileParser method): urllib robotparser --- Parser for robots txt.
                                                             (line   46)
* CRC (zipfile.ZipInfo attribute):       ZipInfo Objects.    (line  115)
* crc32() (in module binascii):          binascii --- Convert between binary and ASCII.
                                                             (line  106)
* crc32() (in module zlib):              zlib --- Compression compatible with gzip.
                                                             (line   96)
* crc_hqx() (in module binascii):        binascii --- Convert between binary and ASCII.
                                                             (line  101)
* create() (imaplib.IMAP4 method):       IMAP4 Objects.      (line   72)
* create() (in module venv):             API<2>.             (line  141)
* create() (venv.EnvBuilder method):     API<2>.             (line   45)
* createAttribute() (xml.dom.Document method): Document Objects.
                                                             (line   46)
* createAttributeNS() (xml.dom.Document method): Document Objects.
                                                             (line   53)
* createComment() (xml.dom.Document method): Document Objects.
                                                             (line   34)
* createDocument() (xml.dom.DOMImplementation method): DOMImplementation Objects.
                                                             (line   16)
* createDocumentType() (xml.dom.DOMImplementation method): DOMImplementation Objects.
                                                             (line   26)
* createElement() (xml.dom.Document method): Document Objects.
                                                             (line   14)
* createElementNS() (xml.dom.Document method): Document Objects.
                                                             (line   21)
* createfilehandler() (tkinter.Widget.tk method): File Handlers.
                                                             (line   27)
* CreateKey() (in module winreg):        Functions<9>.       (line   32)
* CreateKeyEx() (in module winreg):      Functions<9>.       (line   54)
* createLock() (logging.Handler method): Handler Objects.    (line   18)
* createLock() (logging.NullHandler method): NullHandler.    (line   24)
* createProcessingInstruction() (xml.dom.Document method): Document Objects.
                                                             (line   40)
* CreateRecord() (in module msilib):     msilib --- Read and write Microsoft Installer files.
                                                             (line   51)
* createSocket() (logging.handlers.SocketHandler method): SocketHandler.
                                                             (line   64)
* createTextNode() (xml.dom.Document method): Document Objects.
                                                             (line   28)
* create_aggregate() (sqlite3.Connection method): Connection Objects.
                                                             (line   99)
* create_archive() (in module zipapp):   Python API.         (line    8)
* create_autospec() (in module unittest.mock): create_autospec.
                                                             (line    6)
* create_collation() (sqlite3.Connection method): Connection Objects.
                                                             (line  135)
* create_configuration() (venv.EnvBuilder method): API<2>.   (line   82)
* create_connection() (asyncio.BaseEventLoop method): Creating connections.
                                                             (line    6)
* create_connection() (in module socket): Creating sockets.  (line   54)
* create_datagram_endpoint() (asyncio.BaseEventLoop method): Creating connections.
                                                             (line   90)
* create_decimal() (decimal.Context method): Context objects.
                                                             (line  170)
* create_decimal_from_float() (decimal.Context method): Context objects.
                                                             (line  194)
* create_default_context() (in module ssl): Context creation.
                                                             (line    9)
* create_function() (sqlite3.Connection method): Connection Objects.
                                                             (line   73)
* create_module (C function):            Multi-phase initialization.
                                                             (line   67)
* create_module() (importlib.abc.Loader method): importlib abc -- Abstract base classes related to import.
                                                             (line  155)
* create_module() (importlib.machinery.ExtensionFileLoader method): importlib machinery -- Importers and path hooks.
                                                             (line  301)
* CREATE_NEW_CONSOLE (in module subprocess): Constants<5>.   (line   38)
* CREATE_NEW_PROCESS_GROUP (in module subprocess): Constants<5>.
                                                             (line   43)
* create_server() (asyncio.BaseEventLoop method): Creating listening connections.
                                                             (line    6)
* create_shortcut() (built-in function): The Postinstallation script.
                                                             (line   62)
* create_socket() (asyncore.dispatcher method): asyncore --- Asynchronous socket handler.
                                                             (line  182)
* create_static_lib() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  323)
* create_stats() (profile.Profile method): profile and cProfile Module Reference.
                                                             (line   71)
* create_string_buffer() (in module ctypes): Utility functions.
                                                             (line   37)
* create_subprocess_exec() (in module asyncio): Create a subprocess high-level API using Process.
                                                             (line    6)
* create_subprocess_shell() (in module asyncio): Create a subprocess high-level API using Process.
                                                             (line   20)
* create_system (zipfile.ZipInfo attribute): ZipInfo Objects.
                                                             (line   79)
* create_task() (asyncio.BaseEventLoop method): Tasks.       (line    6)
* create_tree() (in module distutils.dir_util): distutils dir_util --- Directory tree operations.
                                                             (line   21)
* create_unicode_buffer() (in module ctypes): Utility functions.
                                                             (line   52)
* create_unix_connection() (asyncio.BaseEventLoop method): Creating connections.
                                                             (line  148)
* create_unix_server() (asyncio.BaseEventLoop method): Creating listening connections.
                                                             (line   70)
* create_version (zipfile.ZipInfo attribute): ZipInfo Objects.
                                                             (line   83)
* credits (built-in variable):           Constants added by the site module.
                                                             (line   18)
* critical() (in module logging):        Module-Level Functions.
                                                             (line  137)
* critical() (logging.Logger method):    Logger Objects.     (line  207)
* CRNCYSTR (in module locale):           locale --- Internationalization services.
                                                             (line  245)
* cross() (in module audioop):           audioop --- Manipulate raw audio data.
                                                             (line   72)
* crypt (module):                        crypt --- Function to check Unix passwords.
                                                             (line    6)
* crypt() (in module crypt):             Module Functions<2>.
                                                             (line    8)
* crypt(3):                              crypt --- Function to check Unix passwords.
                                                             (line    6)
* crypt(3) <1>:                          crypt --- Function to check Unix passwords.
                                                             (line   12)
* crypt(3) <2>:                          Module Functions<2>.
                                                             (line   32)
* cryptography:                          Cryptographic Services.
                                                             (line    6)
* csv:                                   csv --- CSV File Reading and Writing.
                                                             (line    8)
* csv (module):                          csv --- CSV File Reading and Writing.
                                                             (line    6)
* cte (email.headerregistry.ContentTransferEncoding attribute): email headerregistry Custom Header Objects.
                                                             (line  292)
* ctermid() (in module os):              Process Parameters. (line    9)
* cte_type (email.policy.Policy attribute): email policy Policy Objects.
                                                             (line  138)
* ctime() (datetime.date method):        date Objects.       (line  212)
* ctime() (datetime.datetime method):    datetime Objects.   (line  535)
* ctime() (in module time):              time --- Time access and conversions.
                                                             (line  211)
* ctrl() (in module curses.ascii):       curses ascii --- Utilities for ASCII characters.
                                                             (line  212)
* CTRL_BREAK_EVENT (in module signal):   Module contents<2>. (line   47)
* CTRL_C_EVENT (in module signal):       Module contents<2>. (line   38)
* ctypes (module):                       ctypes --- A foreign function library for Python.
                                                             (line    6)
* curdir (in module os):                 Miscellaneous System Information.
                                                             (line   81)
* currency() (in module locale):         locale --- Internationalization services.
                                                             (line  392)
* current() (tkinter.ttk.Combobox method): ttk Combobox.     (line    8)
* CurrentByteIndex (xml.parsers.expat.xmlparser attribute): XMLParser Objects<2>.
                                                             (line  157)
* CurrentColumnNumber (xml.parsers.expat.xmlparser attribute): XMLParser Objects<2>.
                                                             (line  161)
* currentframe() (in module inspect):    The interpreter stack.
                                                             (line   74)
* CurrentLineNumber (xml.parsers.expat.xmlparser attribute): XMLParser Objects<2>.
                                                             (line  165)
* current_process() (in module multiprocessing): Miscellaneous<3>.
                                                             (line   28)
* current_task() (asyncio.Task class method): Task.          (line   46)
* current_thread() (in module threading): threading --- Thread-based parallelism.
                                                             (line   30)
* curses (module):                       curses --- Terminal handling for character-cell displays.
                                                             (line    6)
* curses.ascii (module):                 curses ascii --- Utilities for ASCII characters.
                                                             (line    6)
* curses.panel (module):                 curses panel --- A panel stack extension for curses.
                                                             (line    6)
* curses.textpad (module):               curses textpad --- Text input widget for curses programs.
                                                             (line    6)
* Cursor (class in sqlite3):             Cursor Objects.     (line    6)
* cursor() (sqlite3.Connection method):  Connection Objects. (line   26)
* cursyncup() (curses.window method):    Window Objects.     (line  158)
* curs_set() (in module curses):         Functions<2>.       (line   60)
* customize_compiler() (in module distutils.sysconfig): distutils sysconfig --- System configuration information.
                                                             (line   84)
* Cut:                                   Help menu Shell and Editor.
                                                             (line   29)
* cwd() (ftplib.FTP method):             FTP Objects.        (line  204)
* cwd() (pathlib.Path class method):     Methods<2>.         (line   10)
* cycle() (in module itertools):         Itertool functions. (line  234)
* Cyclic Redundancy Check:               zlib --- Compression compatible with gzip.
                                                             (line   98)
* c_bool (class in ctypes):              Fundamental data types<2>.
                                                             (line  202)
* C_BUILTIN (in module imp):             imp --- Access the import internals.
                                                             (line  330)
* c_byte (class in ctypes):              Fundamental data types<2>.
                                                             (line   45)
* c_char (class in ctypes):              Fundamental data types<2>.
                                                             (line   51)
* c_char_p (class in ctypes):            Fundamental data types<2>.
                                                             (line   58)
* c_contiguous (memoryview attribute):   Memory Views.       (line  436)
* c_double (class in ctypes):            Fundamental data types<2>.
                                                             (line   65)
* C_EXTENSION (in module imp):           imp --- Access the import internals.
                                                             (line  318)
* c_float (class in ctypes):             Fundamental data types<2>.
                                                             (line   76)
* c_int (class in ctypes):               Fundamental data types<2>.
                                                             (line   81)
* c_int16 (class in ctypes):             Fundamental data types<2>.
                                                             (line   93)
* c_int32 (class in ctypes):             Fundamental data types<2>.
                                                             (line   98)
* c_int64 (class in ctypes):             Fundamental data types<2>.
                                                             (line  103)
* c_int8 (class in ctypes):              Fundamental data types<2>.
                                                             (line   88)
* c_long (class in ctypes):              Fundamental data types<2>.
                                                             (line  108)
* c_longdouble (class in ctypes):        Fundamental data types<2>.
                                                             (line   70)
* c_longlong (class in ctypes):          Fundamental data types<2>.
                                                             (line  113)
* c_short (class in ctypes):             Fundamental data types<2>.
                                                             (line  119)
* c_size_t (class in ctypes):            Fundamental data types<2>.
                                                             (line  124)
* c_ssize_t (class in ctypes):           Fundamental data types<2>.
                                                             (line  128)
* c_ubyte (class in ctypes):             Fundamental data types<2>.
                                                             (line  134)
* c_uint (class in ctypes):              Fundamental data types<2>.
                                                             (line  140)
* c_uint16 (class in ctypes):            Fundamental data types<2>.
                                                             (line  152)
* c_uint32 (class in ctypes):            Fundamental data types<2>.
                                                             (line  157)
* c_uint64 (class in ctypes):            Fundamental data types<2>.
                                                             (line  162)
* c_uint8 (class in ctypes):             Fundamental data types<2>.
                                                             (line  147)
* c_ulong (class in ctypes):             Fundamental data types<2>.
                                                             (line  167)
* c_ulonglong (class in ctypes):         Fundamental data types<2>.
                                                             (line  172)
* c_ushort (class in ctypes):            Fundamental data types<2>.
                                                             (line  178)
* c_void_p (class in ctypes):            Fundamental data types<2>.
                                                             (line  184)
* c_wchar (class in ctypes):             Fundamental data types<2>.
                                                             (line  189)
* c_wchar_p (class in ctypes):           Fundamental data types<2>.
                                                             (line  196)
* daemon (multiprocessing.Process attribute): Process and exceptions.
                                                             (line   84)
* daemon (threading.Thread attribute):   Thread Objects.     (line  162)
* dangling; else:                        Compound statements.
                                                             (line   54)
* data:                                  Objects values and types.
                                                             (line    6)
* Data (class in plistlib):              plistlib --- Generate and parse Mac OS X plist files.
                                                             (line  179)
* data (collections.UserDict attribute): UserDict objects.   (line   24)
* data (collections.UserList attribute): UserList objects.   (line   29)
* data (select.kevent attribute):        Kevent Objects.     (line  175)
* data (selectors.SelectorKey attribute): Classes<3>.        (line   48)
* data (urllib.request.Request attribute): Request Objects.  (line   39)
* data (xml.dom.Comment attribute):      Comment Objects.    (line    9)
* data (xml.dom.ProcessingInstruction attribute): ProcessingInstruction Objects.
                                                             (line   14)
* data (xml.dom.Text attribute):         Text and CDATASection Objects.
                                                             (line   15)
* data (xmlrpc.client.Binary attribute): Binary Objects.     (line   10)
* data() (xml.etree.ElementTree.TreeBuilder method): TreeBuilder Objects.
                                                             (line   21)
* data; tabular:                         csv --- CSV File Reading and Writing.
                                                             (line    8)
* data; type:                            The standard type hierarchy.
                                                             (line    6)
* databases:                             dbm dumb --- Portable DBM implementation.
                                                             (line    6)
* DatagramHandler (class in logging.handlers): DatagramHandler.
                                                             (line   10)
* DatagramProtocol (class in asyncio):   Protocol classes.   (line   11)
* DatagramRequestHandler (class in socketserver): Request Handler Objects.
                                                             (line   42)
* datagram_received() (asyncio.DatagramProtocol method): Datagram protocols.
                                                             (line    9)
* DataHandler (class in urllib.request): urllib request --- Extensible library for opening URLs.
                                                             (line  380)
* data_open() (urllib.request.DataHandler method): DataHandler Objects.
                                                             (line    6)
* data_received() (asyncio.Protocol method): Streaming protocols.
                                                             (line    8)
* date (class in datetime):              date Objects.       (line   15)
* date() (datetime.datetime method):     datetime Objects.   (line  297)
* date() (nntplib.NNTP method):          Methods<3>.         (line  298)
* DateHeader (class in email.headerregistry): email headerregistry Custom Header Objects.
                                                             (line  134)
* datetime (class in datetime):          datetime Objects.   (line   15)
* datetime (email.headerregistry.DateHeader attribute): email headerregistry Custom Header Objects.
                                                             (line  143)
* datetime (module):                     datetime --- Basic date and time types.
                                                             (line    6)
* date_time (zipfile.ZipInfo attribute): ZipInfo Objects.    (line   35)
* date_time_string() (http.server.BaseHTTPRequestHandler method): http server --- HTTP servers.
                                                             (line  289)
* datum:                                 Dictionary displays.
                                                             (line    6)
* day (datetime.date attribute):         date Objects.       (line   85)
* day (datetime.datetime attribute):     datetime Objects.   (line  184)
* daylight (in module time):             time --- Time access and conversions.
                                                             (line  219)
* Daylight Saving Time:                  time --- Time access and conversions.
                                                             (line   41)
* day_abbr (in module calendar):         calendar --- General calendar-related functions.
                                                             (line  272)
* day_name (in module calendar):         calendar --- General calendar-related functions.
                                                             (line  267)
* DbfilenameShelf (class in shelve):     Restrictions.       (line   64)
* dbm (module):                          dbm --- Interfaces to Unix "databases".
                                                             (line    6)
* dbm.dumb (module):                     dbm dumb --- Portable DBM implementation.
                                                             (line    6)
* dbm.gnu (module):                      dbm gnu --- GNU's reinterpretation of dbm.
                                                             (line    6)
* dbm.ndbm (module):                     dbm ndbm --- Interface based on ndbm.
                                                             (line    6)
* deallocation, object:                  Finalization and De-allocation.
                                                             (line    6)
* debug (imaplib.IMAP4 attribute):       IMAP4 Objects.      (line  372)
* DEBUG (in module re):                  Module Contents.    (line   53)
* debug (shlex.shlex attribute):         shlex Objects.      (line  149)
* debug (zipfile.ZipFile attribute):     ZipFile Objects.    (line  232)
* debug() (in module doctest):           Debugging.          (line  124)
* debug() (in module logging):           Module-Level Functions.
                                                             (line   44)
* debug() (logging.Logger method):       Logger Objects.     (line  109)
* debug() (pipes.Template method):       Template Objects.   (line   16)
* debug() (unittest.TestCase method):    Test cases.         (line  120)
* debug() (unittest.TestSuite method):   Grouping tests.     (line   48)
* debugger:                              Debug menu Shell window only.
                                                             (line   15)
* debugger <1>:                          sys --- System-specific parameters and functions.
                                                             (line  534)
* debugger <2>:                          sys --- System-specific parameters and functions.
                                                             (line 1036)
* debugger; configuration; file:         Debugger Commands.  (line   37)
* debugging:                             pdb --- The Python Debugger.
                                                             (line   10)
* debugging; assertions:                 The assert statement.
                                                             (line    6)
* DebuggingServer (class in smtpd):      DebuggingServer Objects.
                                                             (line    6)
* debuglevel (http.client.HTTPResponse attribute): HTTPResponse Objects.
                                                             (line   59)
* DebugRunner (class in doctest):        Debugging.          (line  168)
* DEBUG_BYTECODE_SUFFIXES (in module importlib.machinery): importlib machinery -- Importers and path hooks.
                                                             (line   16)
* DEBUG_COLLECTABLE (in module gc):      gc --- Garbage Collector interface.
                                                             (line  232)
* DEBUG_LEAK (in module gc):             gc --- Garbage Collector interface.
                                                             (line  252)
* debug_print() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  511)
* DEBUG_SAVEALL (in module gc):          gc --- Garbage Collector interface.
                                                             (line  246)
* debug_src() (in module doctest):       Debugging.          (line  147)
* DEBUG_STATS (in module gc):            gc --- Garbage Collector interface.
                                                             (line  227)
* DEBUG_UNCOLLECTABLE (in module gc):    gc --- Garbage Collector interface.
                                                             (line  236)
* Decimal (class in decimal):            Decimal objects.    (line    6)
* decimal (module):                      decimal --- Decimal fixed point and floating point arithmetic.
                                                             (line    6)
* decimal literal:                       Numeric literals.   (line    6)
* decimal() (in module unicodedata):     unicodedata --- Unicode Database.
                                                             (line   29)
* DecimalException (class in decimal):   Signals.            (line   28)
* decode (codecs.CodecInfo attribute):   codecs --- Codec registry and base classes.
                                                             (line   67)
* decode() (bytearray method):           Bytes and Bytearray Operations.
                                                             (line   48)
* decode() (bytes method):               Bytes and Bytearray Operations.
                                                             (line   48)
* decode() (codecs.Codec method):        Stateless Encoding and Decoding.
                                                             (line   26)
* decode() (codecs.IncrementalDecoder method): IncrementalDecoder Objects.
                                                             (line   28)
* decode() (in module base64):           base64 --- Base16 Base32 Base64 Base85 Data Encodings.
                                                             (line  207)
* decode() (in module codecs):           codecs --- Codec registry and base classes.
                                                             (line   32)
* decode() (in module quopri):           quopri --- Encode and decode MIME quoted-printable data.
                                                             (line   19)
* decode() (in module uu):               uu --- Encode and decode uuencode files.
                                                             (line   32)
* decode() (json.JSONDecoder method):    Encoders and Decoders.
                                                             (line   84)
* decode() (xmlrpc.client.Binary method): Binary Objects.    (line   18)
* decode() (xmlrpc.client.DateTime method): DateTime Objects.
                                                             (line   11)
* decodebytes() (in module base64):      base64 --- Base16 Base32 Base64 Base85 Data Encodings.
                                                             (line  214)
* DecodedGenerator (class in email.generator): email generator Generating MIME documents.
                                                             (line  206)
* decodestring() (in module base64):     base64 --- Base16 Base32 Base64 Base85 Data Encodings.
                                                             (line  214)
* decodestring() (in module quopri):     quopri --- Encode and decode MIME quoted-printable data.
                                                             (line   41)
* decode_header() (in module email.header): email header Internationalized headers.
                                                             (line  169)
* decode_header() (in module nntplib):   Utility functions<2>.
                                                             (line    8)
* decode_params() (in module email.utils): email utils Miscellaneous utilities.
                                                             (line  194)
* decode_rfc2231() (in module email.utils): email utils Miscellaneous utilities.
                                                             (line  164)
* decode_source() (in module importlib.util): importlib util -- Utility code for importers.
                                                             (line   64)
* decomposition() (in module unicodedata): unicodedata --- Unicode Database.
                                                             (line   73)
* decompress() (bz2.BZ2Decompressor method): Incremental de compression.
                                                             (line   45)
* decompress() (in module bz2):          One-shot de compression.
                                                             (line   16)
* decompress() (in module gzip):         gzip --- Support for gzip files.
                                                             (line  168)
* decompress() (in module lzma):         Compressing and decompressing data in memory.
                                                             (line  192)
* decompress() (in module zlib):         zlib --- Compression compatible with gzip.
                                                             (line  112)
* decompress() (lzma.LZMADecompressor method): Compressing and decompressing data in memory.
                                                             (line  132)
* decompress() (zlib.Decompress method): zlib --- Compression compatible with gzip.
                                                             (line  214)
* decompressobj() (in module zlib):      zlib --- Compression compatible with gzip.
                                                             (line  138)
* decorator:                             Glossary.           (line  230)
* DEDENT (in module token):              token --- Constants used with Python parse trees.
                                                             (line   40)
* DEDENT token:                          Indentation.        (line   33)
* DEDENT token <1>:                      Compound statements.
                                                             (line   54)
* dedent() (in module textwrap):         textwrap --- Text wrapping and filling.
                                                             (line   65)
* deepcopy() (in module copy):           copy --- Shallow and deep copy operations.
                                                             (line   18)
* default (in module email.policy):      email policy Policy Objects.
                                                             (line  516)
* DEFAULT (in module unittest.mock):     DEFAULT.            (line    6)
* default (inspect.Parameter attribute): Introspecting callables with the Signature object.
                                                             (line  152)
* default (optparse.Option attribute):   Option attributes.  (line   36)
* default() (cmd.Cmd method):            Cmd Objects.        (line   74)
* default() (json.JSONEncoder method):   Encoders and Decoders.
                                                             (line  192)
* default; parameter; value:             Function definitions.
                                                             (line   47)
* DefaultContext (class in decimal):     Context objects.    (line   72)
* DefaultCookiePolicy (class in http.cookiejar): http cookiejar --- Cookie handling for HTTP clients.
                                                             (line   75)
* defaultdict (class in collections):    defaultdict objects.
                                                             (line    6)
* DefaultHandler() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line  310)
* DefaultHandlerExpand() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line  317)
* defaults() (configparser.ConfigParser method): ConfigParser Objects.
                                                             (line   71)
* DefaultSelector (class in selectors):  Classes<3>.         (line  161)
* defaultTestLoader (in module unittest): Loading and running tests.
                                                             (line  410)
* defaultTestResult() (unittest.TestCase method): Test cases.
                                                             (line  714)
* DEFAULT_BUFFER_SIZE (in module io):    High-level Module Interface.
                                                             (line    6)
* default_bufsize (in module xml.dom.pulldom): xml dom pulldom --- Support for building partial DOM trees.
                                                             (line   92)
* default_exception_handler() (asyncio.BaseEventLoop method): Error Handling API.
                                                             (line   20)
* default_factory (collections.defaultdict attribute): defaultdict objects.
                                                             (line   49)
* DEFAULT_FORMAT (in module tarfile):    tarfile --- Read and write tar archive files.
                                                             (line  231)
* DEFAULT_IGNORES (in module filecmp):   The dircmp class.   (line  105)
* default_open() (urllib.request.BaseHandler method): BaseHandler Objects.
                                                             (line   30)
* DEFAULT_PROTOCOL (in module pickle):   Module Interface.   (line   21)
* default_timer() (in module timeit):    Python Interface.   (line   29)
* defects (email.headerregistry.BaseHeader attribute): email headerregistry Custom Header Objects.
                                                             (line   53)
* defects (email.message.Message attribute): email message Representing an email message.
                                                             (line  676)
* define_macro() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  162)
* defpath (in module os):                Miscellaneous System Information.
                                                             (line  121)
* DefragResult (class in urllib.parse):  Structured Parse Results.
                                                             (line   40)
* DefragResultBytes (class in urllib.parse): Structured Parse Results.
                                                             (line   65)
* def_prog_mode() (in module curses):    Functions<2>.       (line   69)
* def_shell_mode() (in module curses):   Functions<2>.       (line   76)
* degrees() (in module math):            Angular conversion. (line    6)
* degrees() (in module turtle):          Settings for measurement.
                                                             (line    6)
* delattr() (built-in function):         Built-in Functions. (line  291)
* delay() (in module turtle):            Animation control.  (line    6)
* delayload (http.cookiejar.FileCookieJar attribute): CookieJar and FileCookieJar Objects.
                                                             (line  158)
* delay_output() (in module curses):     Functions<2>.       (line   84)
* delch() (curses.window method):        Window Objects.     (line  163)
* dele() (poplib.POP3 method):           POP3 Objects.       (line   67)
* delete() (ftplib.FTP method):          FTP Objects.        (line  197)
* delete() (imaplib.IMAP4 method):       IMAP4 Objects.      (line   76)
* delete() (tkinter.ttk.Treeview method): ttk Treeview.      (line   79)
* deleteacl() (imaplib.IMAP4 method):    IMAP4 Objects.      (line   80)
* deletefilehandler() (tkinter.Widget.tk method): File Handlers.
                                                             (line   37)
* DeleteKey() (in module winreg):        Functions<9>.       (line   87)
* DeleteKeyEx() (in module winreg):      Functions<9>.       (line  106)
* deleteln() (curses.window method):     Window Objects.     (line  167)
* deleteMe() (bdb.Breakpoint method):    bdb --- Debugger framework.
                                                             (line   41)
* DeleteValue() (in module winreg):      Functions<9>.       (line  144)
* DELETE_ATTR (opcode):                  Python Bytecode Instructions.
                                                             (line  435)
* DELETE_DEREF (opcode):                 Python Bytecode Instructions.
                                                             (line  588)
* DELETE_FAST (opcode):                  Python Bytecode Instructions.
                                                             (line  560)
* DELETE_GLOBAL (opcode):                Python Bytecode Instructions.
                                                             (line  443)
* DELETE_NAME (opcode):                  Python Bytecode Instructions.
                                                             (line  409)
* DELETE_SUBSCR (opcode):                Python Bytecode Instructions.
                                                             (line  243)
* deletion; target:                      The del statement<2>.
                                                             (line    6)
* deletion; target; list:                The del statement<2>.
                                                             (line    6)
* delimiter (csv.Dialect attribute):     Dialects and Formatting Parameters.
                                                             (line   19)
* delimiters:                            Delimiters.         (line    6)
* delitem() (in module operator):        operator --- Standard operators as functions.
                                                             (line  185)
* deliver_challenge() (in module multiprocessing.connection): Listeners and Clients.
                                                             (line   15)
* delocalize() (in module locale):       locale --- Internationalization services.
                                                             (line  413)
* del_param() (email.message.Message method): email message Representing an email message.
                                                             (line  498)
* demo_app() (in module wsgiref.simple_server): wsgiref simple_server -- a simple WSGI HTTP server.
                                                             (line   36)
* denominator (fractions.Fraction attribute): fractions --- Rational numbers.
                                                             (line   94)
* denominator (numbers.Rational attribute): The numeric tower.
                                                             (line   51)
* DeprecationWarning:                    Warnings.           (line   17)
* deque (class in collections):          deque objects.      (line    6)
* dequeue() (logging.handlers.QueueListener method): QueueListener.
                                                             (line   42)
* derwin() (curses.window method):       Window Objects.     (line  172)
* DER_cert_to_PEM_cert() (in module ssl): Certificate handling.
                                                             (line   81)
* description (sqlite3.Cursor attribute): Cursor Objects.    (line  201)
* description() (nntplib.NNTP method):   Methods<3>.         (line  149)
* descriptions() (nntplib.NNTP method):  Methods<3>.         (line  135)
* descriptor:                            Glossary.           (line  252)
* dest (optparse.Option attribute):      Option attributes.  (line   27)
* destructor:                            Basic customization.
                                                             (line   55)
* destructor <1>:                        Assignment statements.
                                                             (line   74)
* detach() (io.BufferedIOBase method):   I/O Base Classes.   (line  250)
* detach() (io.TextIOBase method):       Text I/O<2>.        (line   38)
* detach() (socket.socket method):       Socket Objects.     (line   85)
* detach() (tkinter.ttk.Treeview method): ttk Treeview.      (line   85)
* detach() (weakref.finalize method):    weakref --- Weak references.
                                                             (line  270)
* Detach() (winreg.PyHKEY method):       Registry Handle Objects.
                                                             (line   40)
* detect_encoding() (in module tokenize): Tokenizing Input.  (line   81)
* detect_language() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  198)
* deterministic profiling:               Introduction to the profilers.
                                                             (line    6)
* device_encoding() (in module os):      File Descriptor Operations.
                                                             (line   44)
* devnull (in module os):                Miscellaneous System Information.
                                                             (line  136)
* DEVNULL (in module subprocess):        Using the subprocess Module.
                                                             (line  106)
* devpoll() (in module select):          select --- Waiting for I/O completion.
                                                             (line   29)
* DevpollSelector (class in selectors):  Classes<3>.         (line  184)
* dgettext() (in module gettext):        GNU gettext API.    (line   51)
* Dialect (class in csv):                Module Contents<3>. (line  168)
* dialect (csv.csvreader attribute):     Reader Objects.     (line   18)
* dialect (csv.csvwriter attribute):     Writer Objects.     (line   30)
* Dialog (class in msilib):              GUI classes.        (line   40)
* dict (2to3 fixer):                     Fixers.             (line   77)
* dict (built-in class):                 Mapping Types --- dict.
                                                             (line   27)
* Dict (class in typing):                Classes functions and decorators.
                                                             (line  268)
* dict() (multiprocessing.managers.SyncManager method): Managers.
                                                             (line  203)
* dictConfig() (in module logging.config): Configuration functions.
                                                             (line   13)
* dictionary:                            Glossary.           (line  268)
* dictionary view:                       Glossary.           (line  274)
* dictionary; display:                   Dictionary displays.
                                                             (line    6)
* DictReader (class in csv):             Module Contents<3>. (line  102)
* DictWriter (class in csv):             Module Contents<3>. (line  132)
* Differ (class in difflib):             difflib --- Helpers for computing deltas.
                                                             (line   48)
* Differ (class in difflib) <1>:         Differ Objects.     (line   15)
* difference() (set method):             Set Types --- set frozenset.
                                                             (line   98)
* difference_update() (set method):      Set Types --- set frozenset.
                                                             (line  171)
* difflib (module):                      difflib --- Helpers for computing deltas.
                                                             (line    6)
* diff_bytes() (in module difflib):      difflib --- Helpers for computing deltas.
                                                             (line  335)
* diff_files (filecmp.dircmp attribute): The dircmp class.   (line   90)
* digest() (hashlib.hash method):        Hash algorithms.    (line  116)
* digest() (hmac.HMAC method):           hmac --- Keyed-Hashing for Message Authentication.
                                                             (line   40)
* digest_size (hmac.HMAC attribute):     hmac --- Keyed-Hashing for Message Authentication.
                                                             (line   74)
* digit() (in module unicodedata):       unicodedata --- Unicode Database.
                                                             (line   35)
* digits (in module string):             String constants.   (line   24)
* dir() (built-in function):             Built-in Functions. (line  313)
* dir() (ftplib.FTP method):             FTP Objects.        (line  180)
* dircmp (class in filecmp):             The dircmp class.   (line    6)
* Directory (class in msilib):           Directory Objects.  (line    6)
* directory; changing:                   Files and Directories.
                                                             (line  109)
* directory; creating:                   Files and Directories.
                                                             (line  368)
* directory; deleting:                   Directory and files operations.
                                                             (line  207)
* directory; deleting <1>:               Files and Directories.
                                                             (line  516)
* directory; traversal:                  Files and Directories.
                                                             (line 1257)
* directory; traversal <1>:              Files and Directories.
                                                             (line 1348)
* directory; walking:                    Files and Directories.
                                                             (line 1257)
* directory; walking <1>:                Files and Directories.
                                                             (line 1348)
* directory_created() (built-in function): The Postinstallation script.
                                                             (line   23)
* DirEntry (class in os):                Files and Directories.
                                                             (line  645)
* DirList (class in tkinter.tix):        File Selectors.     (line    6)
* dirname() (in module os.path):         os path --- Common pathname manipulations.
                                                             (line   88)
* DirSelectBox (class in tkinter.tix):   File Selectors.     (line   26)
* DirSelectDialog (class in tkinter.tix): File Selectors.    (line   20)
* DirTree (class in tkinter.tix):        File Selectors.     (line   13)
* dis (module):                          dis --- Disassembler for Python bytecode.
                                                             (line    6)
* dis() (dis.Bytecode method):           Bytecode analysis.  (line   47)
* dis() (in module dis):                 Analysis functions. (line   37)
* dis() (in module pickletools):         Programmatic Interface<2>.
                                                             (line    6)
* disable (pdb command):                 Debugger Commands.  (line  100)
* disable() (bdb.Breakpoint method):     bdb --- Debugger framework.
                                                             (line   51)
* disable() (in module faulthandler):    Fault handler state.
                                                             (line   22)
* disable() (in module gc):              gc --- Garbage Collector interface.
                                                             (line   24)
* disable() (in module logging):         Module-Level Functions.
                                                             (line  166)
* disable() (profile.Profile method):    profile and cProfile Module Reference.
                                                             (line   67)
* DisableReflectionKey() (in module winreg): Functions<9>.   (line  427)
* disable_interspersed_args() (optparse.OptionParser method): Querying and manipulating your option parser.
                                                             (line   10)
* disassemble() (in module dis):         Analysis functions. (line   66)
* discard (http.cookiejar.Cookie attribute): Cookie Objects<2>.
                                                             (line   53)
* discard() (mailbox.Mailbox method):    Mailbox objects.    (line   76)
* discard() (mailbox.MH method):         MH.                 (line   76)
* discard() (set method):                Set Types --- set frozenset.
                                                             (line  193)
* discard_buffers() (asynchat.async_chat method): asynchat --- Asynchronous socket command/response handler.
                                                             (line   82)
* disco() (in module dis):               Analysis functions. (line   66)
* discover() (unittest.TestLoader method): Loading and running tests.
                                                             (line  116)
* disk_usage() (in module shutil):       Directory and files operations.
                                                             (line  277)
* dispatcher (class in asyncore):        asyncore --- Asynchronous socket handler.
                                                             (line   65)
* dispatcher_with_send (class in asyncore): asyncore --- Asynchronous socket handler.
                                                             (line  248)
* dispatch_call() (bdb.Bdb method):      bdb --- Debugger framework.
                                                             (line  157)
* dispatch_exception() (bdb.Bdb method): bdb --- Debugger framework.
                                                             (line  177)
* dispatch_line() (bdb.Bdb method):      bdb --- Debugger framework.
                                                             (line  147)
* dispatch_return() (bdb.Bdb method):    bdb --- Debugger framework.
                                                             (line  167)
* dispatch_table (pickle.Pickler attribute): Module Interface.
                                                             (line  173)
* display (pdb command):                 Debugger Commands.  (line  256)
* displayhook() (in module sys):         sys --- System-specific parameters and functions.
                                                             (line  129)
* display_name (email.headerregistry.Address attribute): email headerregistry Custom Header Objects.
                                                             (line  403)
* display_name (email.headerregistry.Group attribute): email headerregistry Custom Header Objects.
                                                             (line  448)
* dist() (in module platform):           Unix Platforms.     (line    6)
* distance() (in module turtle):         Tell Turtle's state.
                                                             (line   68)
* distb() (in module dis):               Analysis functions. (line   55)
* Distribution (class in distutils.core): distutils core --- Core Distutils functionality.
                                                             (line  291)
* distutils (module):                    distutils --- Building and installing Python modules.
                                                             (line    6)
* distutils.archive_util (module):       distutils archive_util --- Archiving utilities.
                                                             (line    6)
* distutils.bcppcompiler (module):       distutils bcppcompiler --- Borland Compiler.
                                                             (line    6)
* distutils.ccompiler (module):          distutils ccompiler --- CCompiler base class.
                                                             (line    6)
* distutils.cmd (module):                distutils cmd --- Abstract base class for Distutils commands.
                                                             (line    6)
* distutils.command (module):            distutils command --- Individual Distutils commands.
                                                             (line    5)
* distutils.command.bdist (module):      distutils command bdist --- Build a binary installer.
                                                             (line    5)
* distutils.command.bdist_dumb (module): distutils command bdist_dumb --- Build a "dumb" installer.
                                                             (line    5)
* distutils.command.bdist_msi (module):  distutils command bdist_msi --- Build a Microsoft Installer binary package.
                                                             (line    6)
* distutils.command.bdist_packager (module): distutils command bdist_packager --- Abstract base class for packagers.
                                                             (line    5)
* distutils.command.bdist_rpm (module):  distutils command bdist_rpm --- Build a binary distribution as a Redhat RPM and SRPM.
                                                             (line    5)
* distutils.command.bdist_wininst (module): distutils command bdist_wininst --- Build a Windows installer.
                                                             (line    5)
* distutils.command.build (module):      distutils command build --- Build all files of a package.
                                                             (line    5)
* distutils.command.build_clib (module): distutils command build_clib --- Build any C libraries in a package.
                                                             (line    5)
* distutils.command.build_ext (module):  distutils command build_ext --- Build any extensions in a package.
                                                             (line    5)
* distutils.command.build_py (module):   distutils command build_py --- Build the py/ pyc files of a package.
                                                             (line    6)
* distutils.command.build_scripts (module): distutils command build_scripts --- Build the scripts of a package.
                                                             (line    5)
* distutils.command.check (module):      distutils command check --- Check the meta-data of a package.
                                                             (line    6)
* distutils.command.clean (module):      distutils command clean --- Clean a package build area.
                                                             (line    6)
* distutils.command.config (module):     distutils command config --- Perform package configuration.
                                                             (line    5)
* distutils.command.install (module):    distutils command install --- Install a package.
                                                             (line    5)
* distutils.command.install_data (module): distutils command install_data --- Install data files from a package.
                                                             (line    5)
* distutils.command.install_headers (module): distutils command install_headers --- Install C/C++ header files from a package.
                                                             (line    5)
* distutils.command.install_lib (module): distutils command install_lib --- Install library files from a package.
                                                             (line    5)
* distutils.command.install_scripts (module): distutils command install_scripts --- Install script files from a package.
                                                             (line    5)
* distutils.command.register (module):   distutils command register --- Register a module with the Python Package Index.
                                                             (line    6)
* distutils.command.sdist (module):      distutils command sdist --- Build a source distribution.
                                                             (line    5)
* distutils.core (module):               distutils core --- Core Distutils functionality.
                                                             (line    6)
* distutils.cygwinccompiler (module):    distutils cygwincompiler --- Cygwin Compiler.
                                                             (line    6)
* distutils.debug (module):              distutils debug --- Distutils debug mode.
                                                             (line    6)
* distutils.dep_util (module):           distutils dep_util --- Dependency checking.
                                                             (line    6)
* distutils.dir_util (module):           distutils dir_util --- Directory tree operations.
                                                             (line    6)
* distutils.dist (module):               distutils dist --- The Distribution class.
                                                             (line    6)
* distutils.errors (module):             distutils errors --- Distutils exceptions.
                                                             (line    6)
* distutils.extension (module):          distutils extension --- The Extension class.
                                                             (line    6)
* distutils.fancy_getopt (module):       distutils fancy_getopt --- Wrapper around the standard getopt module.
                                                             (line    6)
* distutils.filelist (module):           distutils filelist --- The FileList class.
                                                             (line    6)
* distutils.file_util (module):          distutils file_util --- Single file operations.
                                                             (line    6)
* distutils.log (module):                distutils log --- Simple PEP 282-style logging.
                                                             (line    5)
* distutils.msvccompiler (module):       distutils msvccompiler --- Microsoft Compiler.
                                                             (line    6)
* distutils.spawn (module):              distutils spawn --- Spawn a sub-process.
                                                             (line    6)
* distutils.sysconfig (module):          distutils sysconfig --- System configuration information.
                                                             (line    6)
* distutils.text_file (module):          distutils text_file --- The TextFile class.
                                                             (line    6)
* distutils.unixccompiler (module):      distutils unixccompiler --- Unix C Compiler.
                                                             (line    6)
* distutils.util (module):               distutils util --- Miscellaneous other utility functions.
                                                             (line    6)
* distutils.version (module):            distutils version --- Version number classes.
                                                             (line    5)
* DISTUTILS_DEBUG:                       Debugging the setup script.
                                                             (line   19)
* divide() (decimal.Context method):     Context objects.    (line  271)
* divide_int() (decimal.Context method): Context objects.    (line  275)
* division:                              Binary arithmetic operations.
                                                             (line   28)
* DivisionByZero (class in decimal):     Signals.            (line   33)
* divmod() (built-in function):          Built-in Functions. (line  371)
* divmod() (decimal.Context method):     Context objects.    (line  279)
* DllCanUnloadNow() (in module ctypes):  Utility functions.  (line   67)
* DllGetClassObject() (in module ctypes): Utility functions. (line   73)
* dllhandle (in module sys):             sys --- System-specific parameters and functions.
                                                             (line  124)
* dngettext() (in module gettext):       GNU gettext API.    (line   82)
* doc (json.JSONDecodeError attribute):  Exceptions<9>.      (line   15)
* DocCGIXMLRPCRequestHandler (class in xmlrpc.server): Documenting XMLRPC server.
                                                             (line   22)
* DocFileSuite() (in module doctest):    Unittest API.       (line   24)
* doCleanups() (unittest.TestCase method): Test cases.       (line  757)
* docmd() (smtplib.SMTP method):         SMTP Objects.       (line   17)
* docstring:                             Class definitions.  (line    6)
* docstring <1>:                         Glossary.           (line  284)
* docstring (doctest.DocTest attribute): DocTest Objects.    (line   49)
* docstrings:                            Defining Functions. (line   21)
* docstrings <1>:                        Documentation Strings.
                                                             (line    6)
* DocTest (class in doctest):            DocTest Objects.    (line    6)
* doctest (module):                      doctest --- Test interactive Python examples.
                                                             (line    6)
* DocTestFailure:                        Debugging.          (line  186)
* DocTestFinder (class in doctest):      DocTestFinder objects.
                                                             (line    6)
* DocTestParser (class in doctest):      DocTestParser objects.
                                                             (line    6)
* DocTestRunner (class in doctest):      DocTestRunner objects.
                                                             (line    6)
* DocTestSuite() (in module doctest):    Unittest API.       (line   99)
* doctype() (xml.etree.ElementTree.TreeBuilder method): TreeBuilder Objects.
                                                             (line   40)
* doctype() (xml.etree.ElementTree.XMLParser method): XMLParser Objects.
                                                             (line   30)
* documentation string:                  The standard type hierarchy.
                                                             (line  648)
* documentation strings:                 Defining Functions. (line   21)
* documentation strings <1>:             Documentation Strings.
                                                             (line    6)
* documentation; generation:             pydoc --- Documentation generator and online help system.
                                                             (line    6)
* documentation; online:                 pydoc --- Documentation generator and online help system.
                                                             (line    6)
* documentElement (xml.dom.Document attribute): Document Objects.
                                                             (line   10)
* DocXMLRPCRequestHandler (class in xmlrpc.server): Documenting XMLRPC server.
                                                             (line   27)
* DocXMLRPCServer (class in xmlrpc.server): Documenting XMLRPC server.
                                                             (line   11)
* doc_header (cmd.Cmd attribute):        Cmd Objects.        (line  147)
* domain (email.headerregistry.Address attribute): email headerregistry Custom Header Objects.
                                                             (line  414)
* domain (tracemalloc.DomainFilter attribute): DomainFilter. (line   20)
* domain (tracemalloc.Filter attribute): Filter.             (line   30)
* DomainFilter (class in tracemalloc):   DomainFilter.       (line    6)
* DomainLiberal (http.cookiejar.DefaultCookiePolicy attribute): DefaultCookiePolicy Objects.
                                                             (line  156)
* DomainRFC2965Match (http.cookiejar.DefaultCookiePolicy attribute): DefaultCookiePolicy Objects.
                                                             (line  149)
* DomainStrict (http.cookiejar.DefaultCookiePolicy attribute): DefaultCookiePolicy Objects.
                                                             (line  161)
* DomainStrictNoDots (http.cookiejar.DefaultCookiePolicy attribute): DefaultCookiePolicy Objects.
                                                             (line  136)
* DomainStrictNonDomain (http.cookiejar.DefaultCookiePolicy attribute): DefaultCookiePolicy Objects.
                                                             (line  142)
* domain_initial_dot (http.cookiejar.Cookie attribute): Cookie Objects<2>.
                                                             (line   85)
* domain_return_ok() (http.cookiejar.CookiePolicy method): CookiePolicy Objects.
                                                             (line   27)
* domain_specified (http.cookiejar.Cookie attribute): Cookie Objects<2>.
                                                             (line   81)
* DOMEventStream (class in xml.dom.pulldom): DOMEventStream Objects.
                                                             (line    6)
* DOMException:                          Exceptions<12>.     (line   18)
* DomstringSizeErr:                      Exceptions<12>.     (line   23)
* done() (asyncio.Future method):        Future.             (line   39)
* done() (concurrent.futures.Future method): Future Objects. (line   32)
* done() (in module turtle):             Using screen events.
                                                             (line  106)
* done() (xdrlib.Unpacker method):       Unpacker Objects.   (line   26)
* DONT_ACCEPT_BLANKLINE (in module doctest): Option Flags.   (line   30)
* DONT_ACCEPT_TRUE_FOR_1 (in module doctest): Option Flags.  (line   18)
* dont_write_bytecode (in module sys):   sys --- System-specific parameters and functions.
                                                             (line  165)
* doRollover() (logging.handlers.RotatingFileHandler method): RotatingFileHandler.
                                                             (line   34)
* doRollover() (logging.handlers.TimedRotatingFileHandler method): TimedRotatingFileHandler.
                                                             (line   78)
* DOT (in module token):                 token --- Constants used with Python parse trees.
                                                             (line   40)
* dot() (in module turtle):              Turtle motion.      (line  218)
* DOTALL (in module re):                 Module Contents.    (line   90)
* doublequote (csv.Dialect attribute):   Dialects and Formatting Parameters.
                                                             (line   24)
* DOUBLESLASH (in module token):         token --- Constants used with Python parse trees.
                                                             (line   40)
* DOUBLESLASHEQUAL (in module token):    token --- Constants used with Python parse trees.
                                                             (line   40)
* DOUBLESTAR (in module token):          token --- Constants used with Python parse trees.
                                                             (line   40)
* DOUBLESTAREQUAL (in module token):     token --- Constants used with Python parse trees.
                                                             (line   40)
* doupdate() (in module curses):         Functions<2>.       (line   88)
* down (pdb command):                    Debugger Commands.  (line   61)
* down() (in module turtle):             Drawing state.      (line    6)
* do_clear() (bdb.Bdb method):           bdb --- Debugger framework.
                                                             (line  234)
* do_command() (curses.textpad.Textbox method): Textbox objects.
                                                             (line   29)
* do_GET() (http.server.SimpleHTTPRequestHandler method): http server --- HTTP servers.
                                                             (line  346)
* do_handshake() (ssl.SSLSocket method): SSL Sockets.        (line  107)
* do_HEAD() (http.server.SimpleHTTPRequestHandler method): http server --- HTTP servers.
                                                             (line  339)
* do_POST() (http.server.CGIHTTPRequestHandler method): http server --- HTTP servers.
                                                             (line  443)
* drain() (asyncio.StreamWriter method): StreamWriter.       (line   33)
* dropwhile() (in module itertools):     Itertool functions. (line  253)
* drop_whitespace (textwrap.TextWrapper attribute): textwrap --- Text wrapping and filling.
                                                             (line  187)
* dst() (datetime.datetime method):      datetime Objects.   (line  378)
* dst() (datetime.time method):          time Objects.       (line  187)
* dst() (datetime.timezone method):      timezone Objects.   (line   47)
* dst() (datetime.tzinfo method):        tzinfo Objects.     (line   59)
* DTDHandler (class in xml.sax.handler): xml sax handler --- Base classes for SAX handlers.
                                                             (line   20)
* duck-typing:                           Glossary.           (line  293)
* DumbWriter (class in formatter):       Writer Implementations.
                                                             (line   22)
* dummy_threading (module):              dummy_threading --- Drop-in replacement for the threading module.
                                                             (line    6)
* dump() (in module ast):                ast Helpers.        (line  138)
* dump() (in module json):               Basic Usage.        (line    6)
* dump() (in module marshal):            marshal --- Internal Python object serialization.
                                                             (line   45)
* dump() (in module pickle):             Module Interface.   (line   30)
* dump() (in module plistlib):           plistlib --- Generate and parse Mac OS X plist files.
                                                             (line   83)
* dump() (in module xml.etree.ElementTree): Functions<5>.    (line   20)
* dump() (pickle.Pickler method):        Module Interface.   (line  152)
* dump() (tracemalloc.Snapshot method):  Snapshot.           (line   29)
* dumps() (in module json):              Basic Usage.        (line   69)
* dumps() (in module marshal):           marshal --- Internal Python object serialization.
                                                             (line   72)
* dumps() (in module pickle):            Module Interface.   (line   52)
* dumps() (in module plistlib):          plistlib --- Generate and parse Mac OS X plist files.
                                                             (line  113)
* dumps() (in module xmlrpc.client):     Convenience Functions.
                                                             (line    6)
* dump_stats() (profile.Profile method): profile and cProfile Module Reference.
                                                             (line   81)
* dump_stats() (pstats.Stats method):    The Stats Class.    (line   58)
* dump_traceback() (in module faulthandler): Dumping the traceback.
                                                             (line    6)
* dump_traceback_later() (in module faulthandler): Dumping the tracebacks after a timeout.
                                                             (line    6)
* dup() (in module os):                  File Descriptor Operations.
                                                             (line   50)
* dup() (socket.socket method):          Socket Objects.     (line   93)
* dup2() (in module os):                 File Descriptor Operations.
                                                             (line   62)
* DuplicateOptionError:                  Exceptions<4>.      (line   24)
* DuplicateSectionError:                 Exceptions<4>.      (line   14)
* DUP_TOP (opcode):                      Python Bytecode Instructions.
                                                             (line   72)
* DUP_TOP_TWO (opcode):                  Python Bytecode Instructions.
                                                             (line   76)
* dwFlags (subprocess.STARTUPINFO attribute): Windows Popen Helpers.
                                                             (line   14)
* DynamicClassAttribute() (in module types): Additional Utility Classes and Functions.
                                                             (line   34)
* D_FMT (in module locale):              locale --- Internationalization services.
                                                             (line  183)
* D_T_FMT (in module locale):            locale --- Internationalization services.
                                                             (line  177)
* e (in module cmath):                   Constants<2>.       (line   10)
* e (in module math):                    Constants.          (line   10)
* E2BIG (in module errno):               errno --- Standard errno system symbols.
                                                             (line   53)
* EACCES (in module errno):              errno --- Standard errno system symbols.
                                                             (line   77)
* EADDRINUSE (in module errno):          errno --- Standard errno system symbols.
                                                             (line  417)
* EADDRNOTAVAIL (in module errno):       errno --- Standard errno system symbols.
                                                             (line  421)
* EADV (in module errno):                errno --- Standard errno system symbols.
                                                             (line  297)
* EAFNOSUPPORT (in module errno):        errno --- Standard errno system symbols.
                                                             (line  413)
* EAFP:                                  Glossary.           (line  306)
* EAGAIN (in module errno):              errno --- Standard errno system symbols.
                                                             (line   69)
* EALREADY (in module errno):            errno --- Standard errno system symbols.
                                                             (line  481)
* east_asian_width() (in module unicodedata): unicodedata --- Unicode Database.
                                                             (line   62)
* EBADE (in module errno):               errno --- Standard errno system symbols.
                                                             (line  233)
* EBADF (in module errno):               errno --- Standard errno system symbols.
                                                             (line   61)
* EBADFD (in module errno):              errno --- Standard errno system symbols.
                                                             (line  333)
* EBADMSG (in module errno):             errno --- Standard errno system symbols.
                                                             (line  321)
* EBADR (in module errno):               errno --- Standard errno system symbols.
                                                             (line  237)
* EBADRQC (in module errno):             errno --- Standard errno system symbols.
                                                             (line  249)
* EBADSLT (in module errno):             errno --- Standard errno system symbols.
                                                             (line  253)
* EBFONT (in module errno):              errno --- Standard errno system symbols.
                                                             (line  261)
* EBUSY (in module errno):               errno --- Standard errno system symbols.
                                                             (line   89)
* ECHILD (in module errno):              errno --- Standard errno system symbols.
                                                             (line   65)
* echo() (in module curses):             Functions<2>.       (line  104)
* echochar() (curses.window method):     Window Objects.     (line  182)
* ECHRNG (in module errno):              errno --- Standard errno system symbols.
                                                             (line  201)
* ECOMM (in module errno):               errno --- Standard errno system symbols.
                                                             (line  305)
* ECONNABORTED (in module errno):        errno --- Standard errno system symbols.
                                                             (line  437)
* ECONNREFUSED (in module errno):        errno --- Standard errno system symbols.
                                                             (line  469)
* ECONNRESET (in module errno):          errno --- Standard errno system symbols.
                                                             (line  441)
* EDEADLK (in module errno):             errno --- Standard errno system symbols.
                                                             (line  165)
* EDEADLOCK (in module errno):           errno --- Standard errno system symbols.
                                                             (line  257)
* EDESTADDRREQ (in module errno):        errno --- Standard errno system symbols.
                                                             (line  381)
* edit() (curses.textpad.Textbox method): Textbox objects.   (line   18)
* EDOM (in module errno):                errno --- Standard errno system symbols.
                                                             (line  157)
* EDOTDOT (in module errno):             errno --- Standard errno system symbols.
                                                             (line  317)
* EDQUOT (in module errno):              errno --- Standard errno system symbols.
                                                             (line  513)
* EEXIST (in module errno):              errno --- Standard errno system symbols.
                                                             (line   93)
* EFAULT (in module errno):              errno --- Standard errno system symbols.
                                                             (line   81)
* EFBIG (in module errno):               errno --- Standard errno system symbols.
                                                             (line  133)
* effective() (in module bdb):           bdb --- Debugger framework.
                                                             (line  397)
* ehlo() (smtplib.SMTP method):          SMTP Objects.       (line   55)
* ehlo_or_helo_if_needed() (smtplib.SMTP method): SMTP Objects.
                                                             (line   72)
* EHOSTDOWN (in module errno):           errno --- Standard errno system symbols.
                                                             (line  473)
* EHOSTUNREACH (in module errno):        errno --- Standard errno system symbols.
                                                             (line  477)
* EIDRM (in module errno):               errno --- Standard errno system symbols.
                                                             (line  197)
* EILSEQ (in module errno):              errno --- Standard errno system symbols.
                                                             (line  361)
* EINPROGRESS (in module errno):         errno --- Standard errno system symbols.
                                                             (line  485)
* EINTR (in module errno):               errno --- Standard errno system symbols.
                                                             (line   36)
* EINVAL (in module errno):              errno --- Standard errno system symbols.
                                                             (line  113)
* EIO (in module errno):                 errno --- Standard errno system symbols.
                                                             (line   45)
* EISCONN (in module errno):             errno --- Standard errno system symbols.
                                                             (line  449)
* EISDIR (in module errno):              errno --- Standard errno system symbols.
                                                             (line  109)
* EISNAM (in module errno):              errno --- Standard errno system symbols.
                                                             (line  505)
* EL2HLT (in module errno):              errno --- Standard errno system symbols.
                                                             (line  229)
* EL2NSYNC (in module errno):            errno --- Standard errno system symbols.
                                                             (line  205)
* EL3HLT (in module errno):              errno --- Standard errno system symbols.
                                                             (line  209)
* EL3RST (in module errno):              errno --- Standard errno system symbols.
                                                             (line  213)
* Element (class in xml.etree.ElementTree): Element Objects. (line    6)
* ElementDeclHandler() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line  202)
* elements() (collections.Counter method): Counter objects.  (line   59)
* ElementTree (class in xml.etree.ElementTree): ElementTree Objects.
                                                             (line    6)
* element_create() (tkinter.ttk.Style method): Ttk Styling.  (line  131)
* element_names() (tkinter.ttk.Style method): Ttk Styling.   (line  183)
* element_options() (tkinter.ttk.Style method): Ttk Styling. (line  187)
* ELIBACC (in module errno):             errno --- Standard errno system symbols.
                                                             (line  341)
* ELIBBAD (in module errno):             errno --- Standard errno system symbols.
                                                             (line  345)
* ELIBEXEC (in module errno):            errno --- Standard errno system symbols.
                                                             (line  357)
* ELIBMAX (in module errno):             errno --- Standard errno system symbols.
                                                             (line  353)
* ELIBSCN (in module errno):             errno --- Standard errno system symbols.
                                                             (line  349)
* Ellinghouse, Lance:                    uu --- Encode and decode uuencode files.
                                                             (line   20)
* Ellipsis (built-in variable):          Built-in Constants. (line   44)
* ELLIPSIS (in module doctest):          Option Flags.       (line   49)
* ELLIPSIS (in module token):            token --- Constants used with Python parse trees.
                                                             (line   40)
* ELNRNG (in module errno):              errno --- Standard errno system symbols.
                                                             (line  217)
* ELOOP (in module errno):               errno --- Standard errno system symbols.
                                                             (line  185)
* email (module):                        email --- An email and MIME handling package.
                                                             (line    6)
* email.charset (module):                email charset Representing character sets.
                                                             (line    6)
* email.contentmanager (module):         email contentmanager Managing MIME Content.
                                                             (line    6)
* email.encoders (module):               email encoders Encoders.
                                                             (line    6)
* email.errors (module):                 email errors Exception and Defect classes.
                                                             (line    6)
* email.generator (module):              email generator Generating MIME documents.
                                                             (line    6)
* email.header (module):                 email header Internationalized headers.
                                                             (line    6)
* email.headerregistry (module):         email headerregistry Custom Header Objects.
                                                             (line    6)
* email.iterators (module):              email iterators Iterators.
                                                             (line    6)
* email.message (module):                email message Representing an email message.
                                                             (line    6)
* email.mime (module):                   email mime Creating email and MIME objects from scratch.
                                                             (line    6)
* email.parser (module):                 email parser Parsing email messages.
                                                             (line    6)
* email.policy (module):                 email policy Policy Objects.
                                                             (line    6)
* email.utils (module):                  email utils Miscellaneous utilities.
                                                             (line    6)
* EmailMessage (class in email.message): email contentmanager Managing MIME Content.
                                                             (line   49)
* EmailPolicy (class in email.policy):   email policy Policy Objects.
                                                             (line  380)
* EMFILE (in module errno):              errno --- Standard errno system symbols.
                                                             (line  121)
* emit() (logging.FileHandler method):   FileHandler.        (line   24)
* emit() (logging.Handler method):       Handler Objects.    (line  102)
* emit() (logging.handlers.BufferingHandler method): MemoryHandler.
                                                             (line   23)
* emit() (logging.handlers.DatagramHandler method): DatagramHandler.
                                                             (line   20)
* emit() (logging.handlers.HTTPHandler method): HTTPHandler. (line   36)
* emit() (logging.handlers.NTEventLogHandler method): NTEventLogHandler.
                                                             (line   38)
* emit() (logging.handlers.QueueHandler method): QueueHandler.
                                                             (line   29)
* emit() (logging.handlers.RotatingFileHandler method): RotatingFileHandler.
                                                             (line   38)
* emit() (logging.handlers.SMTPHandler method): SMTPHandler. (line   35)
* emit() (logging.handlers.SocketHandler method): SocketHandler.
                                                             (line   24)
* emit() (logging.handlers.SysLogHandler method): SysLogHandler.
                                                             (line   43)
* emit() (logging.handlers.TimedRotatingFileHandler method): TimedRotatingFileHandler.
                                                             (line   82)
* emit() (logging.handlers.WatchedFileHandler method): WatchedFileHandler.
                                                             (line   43)
* emit() (logging.NullHandler method):   NullHandler.        (line   16)
* emit() (logging.StreamHandler method): StreamHandler.      (line   17)
* EMLINK (in module errno):              errno --- Standard errno system symbols.
                                                             (line  149)
* Empty:                                 queue --- A synchronized queue class.
                                                             (line   56)
* empty (inspect.Parameter attribute):   Introspecting callables with the Signature object.
                                                             (line  142)
* empty (inspect.Signature attribute):   Introspecting callables with the Signature object.
                                                             (line   70)
* empty() (asyncio.Queue method):        Queue.              (line   25)
* empty() (multiprocessing.Queue method): Pipes and Queues.  (line  108)
* empty() (multiprocessing.SimpleQueue method): Pipes and Queues.
                                                             (line  202)
* empty() (queue.Queue method):          Queue Objects.      (line   15)
* empty() (sched.scheduler method):      Scheduler Objects.  (line   46)
* empty; list:                           List displays.      (line    6)
* empty; tuple:                          The standard type hierarchy.
                                                             (line  154)
* empty; tuple <1>:                      Parenthesized forms.
                                                             (line   16)
* emptyline() (cmd.Cmd method):          Cmd Objects.        (line   68)
* EMPTY_NAMESPACE (in module xml.dom):   Module Contents<4>. (line   35)
* EMSGSIZE (in module errno):            errno --- Standard errno system symbols.
                                                             (line  385)
* EMULTIHOP (in module errno):           errno --- Standard errno system symbols.
                                                             (line  313)
* enable (pdb command):                  Debugger Commands.  (line  107)
* enable() (bdb.Breakpoint method):      bdb --- Debugger framework.
                                                             (line   47)
* enable() (imaplib.IMAP4 method):       IMAP4 Objects.      (line   84)
* enable() (in module cgitb):            cgitb --- Traceback manager for CGI scripts.
                                                             (line   26)
* enable() (in module faulthandler):     Fault handler state.
                                                             (line    6)
* enable() (in module gc):               gc --- Garbage Collector interface.
                                                             (line   20)
* enable() (profile.Profile method):     profile and cProfile Module Reference.
                                                             (line   63)
* EnableReflectionKey() (in module winreg): Functions<9>.    (line  442)
* enable_callback_tracebacks() (in module sqlite3): Module functions and constants.
                                                             (line  167)
* enable_interspersed_args() (optparse.OptionParser method): Querying and manipulating your option parser.
                                                             (line   31)
* enable_load_extension() (sqlite3.Connection method): Connection Objects.
                                                             (line  234)
* enable_traversal() (tkinter.ttk.Notebook method): ttk Notebook.
                                                             (line   75)
* ENABLE_USER_SITE (in module site):     Module contents<3>. (line   10)
* ENAMETOOLONG (in module errno):        errno --- Standard errno system symbols.
                                                             (line  169)
* ENAVAIL (in module errno):             errno --- Standard errno system symbols.
                                                             (line  501)
* enclose() (curses.window method):      Window Objects.     (line  187)
* encode (codecs.CodecInfo attribute):   codecs --- Codec registry and base classes.
                                                             (line   67)
* encode() (codecs.Codec method):        Stateless Encoding and Decoding.
                                                             (line    9)
* encode() (codecs.IncrementalEncoder method): IncrementalEncoder Objects.
                                                             (line   28)
* encode() (email.header.Header method): email header Internationalized headers.
                                                             (line  111)
* encode() (in module base64):           base64 --- Base16 Base32 Base64 Base85 Data Encodings.
                                                             (line  223)
* encode() (in module codecs):           codecs --- Codec registry and base classes.
                                                             (line   21)
* encode() (in module quopri):           quopri --- Encode and decode MIME quoted-printable data.
                                                             (line   29)
* encode() (in module uu):               uu --- Encode and decode uuencode files.
                                                             (line   25)
* encode() (json.JSONEncoder method):    Encoders and Decoders.
                                                             (line  211)
* encode() (str method):                 String Methods<2>.  (line   56)
* encode() (xmlrpc.client.Binary method): Binary Objects.    (line   23)
* encode() (xmlrpc.client.DateTime method): DateTime Objects.
                                                             (line   15)
* encodebytes() (in module base64):      base64 --- Base16 Base32 Base64 Base85 Data Encodings.
                                                             (line  233)
* EncodedFile() (in module codecs):      codecs --- Codec registry and base classes.
                                                             (line  191)
* encodePriority() (logging.handlers.SysLogHandler method): SysLogHandler.
                                                             (line   77)
* encodestring() (in module base64):     base64 --- Base16 Base32 Base64 Base85 Data Encodings.
                                                             (line  233)
* encodestring() (in module quopri):     quopri --- Encode and decode MIME quoted-printable data.
                                                             (line   46)
* encode_7or8bit() (in module email.encoders): email encoders Encoders.
                                                             (line   41)
* encode_base64() (in module email.encoders): email encoders Encoders.
                                                             (line   33)
* encode_noop() (in module email.encoders): email encoders Encoders.
                                                             (line   47)
* encode_quopri() (in module email.encoders): email encoders Encoders.
                                                             (line   26)
* encode_rfc2231() (in module email.utils): email utils Miscellaneous utilities.
                                                             (line  168)
* encoding (curses.window attribute):    Window Objects.     (line  194)
* ENCODING (in module tarfile):          tarfile --- Read and write tar archive files.
                                                             (line  210)
* ENCODING (in module tokenize):         Tokenizing Input.   (line   53)
* encoding (io.TextIOBase attribute):    Text I/O<2>.        (line   16)
* encoding (UnicodeError attribute):     Concrete exceptions.
                                                             (line  309)
* encoding declarations (source file):   Encoding declarations.
                                                             (line    6)
* encodings.idna (module):               encodings idna --- Internationalized Domain Names in Applications.
                                                             (line    6)
* encodings.mbcs (module):               encodings mbcs --- Windows ANSI codepage.
                                                             (line    6)
* encodings.utf_8_sig (module):          encodings utf_8_sig --- UTF-8 codec with BOM signature.
                                                             (line    6)
* encodings_map (in module mimetypes):   mimetypes --- Map filenames to MIME types.
                                                             (line  127)
* encodings_map (mimetypes.MimeTypes attribute): MimeTypes Objects.
                                                             (line   32)
* end (UnicodeError attribute):          Concrete exceptions.
                                                             (line  325)
* end() (re.match method):               Match Objects.      (line  117)
* end() (xml.etree.ElementTree.TreeBuilder method): TreeBuilder Objects.
                                                             (line   26)
* EndCdataSectionHandler() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line  306)
* EndDoctypeDeclHandler() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line  197)
* endDocument() (xml.sax.handler.ContentHandler method): ContentHandler Objects.
                                                             (line   40)
* endElement() (xml.sax.handler.ContentHandler method): ContentHandler Objects.
                                                             (line   95)
* EndElementHandler() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line  232)
* endElementNS() (xml.sax.handler.ContentHandler method): ContentHandler Objects.
                                                             (line  121)
* endheaders() (http.client.HTTPConnection method): HTTPConnection Objects.
                                                             (line  120)
* ENDMARKER (in module token):           token --- Constants used with Python parse trees.
                                                             (line   40)
* EndNamespaceDeclHandler() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line  285)
* endpos (re.match attribute):           Match Objects.      (line  156)
* endPrefixMapping() (xml.sax.handler.ContentHandler method): ContentHandler Objects.
                                                             (line   73)
* endswith() (bytearray method):         Bytes and Bytearray Operations.
                                                             (line   66)
* endswith() (bytes method):             Bytes and Bytearray Operations.
                                                             (line   66)
* endswith() (str method):               String Methods<2>.  (line   70)
* endwin() (in module curses):           Functions<2>.       (line  109)
* end_fill() (in module turtle):         Filling.            (line   20)
* END_FINALLY (opcode):                  Python Bytecode Instructions.
                                                             (line  347)
* end_headers() (http.server.BaseHTTPRequestHandler method): http server --- HTTP servers.
                                                             (line  244)
* end_paragraph() (formatter.formatter method): The Formatter Interface.
                                                             (line   26)
* end_poly() (in module turtle):         Special Turtle methods.
                                                             (line   11)
* ENETDOWN (in module errno):            errno --- Standard errno system symbols.
                                                             (line  425)
* ENETRESET (in module errno):           errno --- Standard errno system symbols.
                                                             (line  433)
* ENETUNREACH (in module errno):         errno --- Standard errno system symbols.
                                                             (line  429)
* ENFILE (in module errno):              errno --- Standard errno system symbols.
                                                             (line  117)
* ENOANO (in module errno):              errno --- Standard errno system symbols.
                                                             (line  245)
* ENOBUFS (in module errno):             errno --- Standard errno system symbols.
                                                             (line  445)
* ENOCSI (in module errno):              errno --- Standard errno system symbols.
                                                             (line  225)
* ENODATA (in module errno):             errno --- Standard errno system symbols.
                                                             (line  269)
* ENODEV (in module errno):              errno --- Standard errno system symbols.
                                                             (line  101)
* ENOENT (in module errno):              errno --- Standard errno system symbols.
                                                             (line   28)
* ENOEXEC (in module errno):             errno --- Standard errno system symbols.
                                                             (line   57)
* ENOLCK (in module errno):              errno --- Standard errno system symbols.
                                                             (line  173)
* ENOLINK (in module errno):             errno --- Standard errno system symbols.
                                                             (line  293)
* ENOMEM (in module errno):              errno --- Standard errno system symbols.
                                                             (line   73)
* ENOMSG (in module errno):              errno --- Standard errno system symbols.
                                                             (line  193)
* ENONET (in module errno):              errno --- Standard errno system symbols.
                                                             (line  281)
* ENOPKG (in module errno):              errno --- Standard errno system symbols.
                                                             (line  285)
* ENOPROTOOPT (in module errno):         errno --- Standard errno system symbols.
                                                             (line  393)
* ENOSPC (in module errno):              errno --- Standard errno system symbols.
                                                             (line  137)
* ENOSR (in module errno):               errno --- Standard errno system symbols.
                                                             (line  277)
* ENOSTR (in module errno):              errno --- Standard errno system symbols.
                                                             (line  265)
* ENOSYS (in module errno):              errno --- Standard errno system symbols.
                                                             (line  177)
* ENOTBLK (in module errno):             errno --- Standard errno system symbols.
                                                             (line   85)
* ENOTCONN (in module errno):            errno --- Standard errno system symbols.
                                                             (line  453)
* ENOTDIR (in module errno):             errno --- Standard errno system symbols.
                                                             (line  105)
* ENOTEMPTY (in module errno):           errno --- Standard errno system symbols.
                                                             (line  181)
* ENOTNAM (in module errno):             errno --- Standard errno system symbols.
                                                             (line  497)
* ENOTSOCK (in module errno):            errno --- Standard errno system symbols.
                                                             (line  377)
* ENOTTY (in module errno):              errno --- Standard errno system symbols.
                                                             (line  125)
* ENOTUNIQ (in module errno):            errno --- Standard errno system symbols.
                                                             (line  329)
* enqueue() (logging.handlers.QueueHandler method): QueueHandler.
                                                             (line   46)
* enqueue_sentinel() (logging.handlers.QueueListener method): QueueListener.
                                                             (line   83)
* ensurepip (module):                    ensurepip --- Bootstrapping the pip installer.
                                                             (line    6)
* ensure_directories() (venv.EnvBuilder method): API<2>.     (line   73)
* ensure_future() (in module asyncio):   Task functions.     (line   27)
* enter() (sched.scheduler method):      Scheduler Objects.  (line   29)
* enterabs() (sched.scheduler method):   Scheduler Objects.  (line    9)
* enter_context() (contextlib.ExitStack method): Utilities.  (line  305)
* entities (xml.dom.DocumentType attribute): DocumentType Objects.
                                                             (line   38)
* EntityDeclHandler() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line  258)
* entitydefs (in module html.entities):  html entities --- Definitions of HTML general entities.
                                                             (line   25)
* EntityResolver (class in xml.sax.handler): xml sax handler --- Base classes for SAX handlers.
                                                             (line   27)
* Enum (class in enum):                  Module Contents<2>. (line   10)
* enum (module):                         enum --- Support for enumerations.
                                                             (line    6)
* enumerate() (built-in function):       Built-in Functions. (line  383)
* enumerate() (in module threading):     threading --- Thread-based parallelism.
                                                             (line   47)
* EnumKey() (in module winreg):          Functions<9>.       (line  153)
* EnumValue() (in module winreg):        Functions<9>.       (line  169)
* enum_certificates() (in module ssl):   Certificate handling.
                                                             (line  116)
* enum_crls() (in module ssl):           Certificate handling.
                                                             (line  139)
* EnvBuilder (class in venv):            API<2>.             (line   11)
* environ (in module os):                Process Parameters. (line   16)
* environ (in module posix):             Notable Module Contents.
                                                             (line    9)
* environb (in module os):               Process Parameters. (line   55)
* environment:                           Resolution of names.
                                                             (line   12)
* environment variable; <protocol>_proxy: urllib request --- Extensible library for opening URLs.
                                                             (line  259)
* environment variable; APPDATA:         PEP 370 Per-user site-packages Directory.
                                                             (line   26)
* environment variable; AUDIODEV:        ossaudiodev --- Access to OSS-compatible audio devices.
                                                             (line   52)
* environment variable; BROWSER:         webbrowser --- Convenient Web-browser controller.
                                                             (line   20)
* environment variable; BROWSER <1>:     webbrowser --- Convenient Web-browser controller.
                                                             (line   89)
* environment variable; CC:              New Improved and Deprecated Modules<4>.
                                                             (line   58)
* environment variable; CFLAGS:          New Improved and Deprecated Modules<4>.
                                                             (line   58)
* environment variable; CFLAGS <1>:      Tweaking compiler/linker flags.
                                                             (line   66)
* environment variable; CFLAGS <2>:      Tweaking compiler/linker flags.
                                                             (line   67)
* environment variable; COLS:            curses.             (line    7)
* environment variable; COLS <1>:        Functions<2>.       (line  521)
* environment variable; COLUMNS:         Functions<2>.       (line  545)
* environment variable; COLUMNS <1>:     Functions<2>.       (line  548)
* environment variable; COMSPEC:         Process Management. (line  457)
* environment variable; COMSPEC <1>:     Popen Constructor.  (line   75)
* environment variable; CPP:             New Improved and Deprecated Modules<4>.
                                                             (line   59)
* environment variable; CPPFLAGS:        New Improved and Deprecated Modules<4>.
                                                             (line   59)
* environment variable; DISTUTILS_DEBUG: Debugging the setup script.
                                                             (line   19)
* environment variable; exec_prefix:     Python-related paths and files.
                                                             (line    7)
* environment variable; exec_prefix <1>: Include Files.      (line   32)
* environment variable; exec_prefix <2>: Include Files.      (line   43)
* environment variable; HOME:            os path --- Common pathname manipulations.
                                                             (line  116)
* environment variable; HOME <1>:        os path --- Common pathname manipulations.
                                                             (line  122)
* environment variable; HOME <2>:        distutils util --- Miscellaneous other utility functions.
                                                             (line   82)
* environment variable; HOME <3>:        Location and names of config files.
                                                             (line   50)
* environment variable; HOME <4>:        Location and names of config files.
                                                             (line   67)
* environment variable; HOMEDRIVE:       os path --- Common pathname manipulations.
                                                             (line  123)
* environment variable; HOMEDRIVE <1>:   Location and names of config files.
                                                             (line   68)
* environment variable; HOMEPATH:        os path --- Common pathname manipulations.
                                                             (line  123)
* environment variable; HOMEPATH <1>:    Location and names of config files.
                                                             (line   68)
* environment variable; http_proxy:      urllib request --- Extensible library for opening URLs.
                                                             (line   91)
* environment variable; http_proxy <1>:  Examples<15>.       (line   93)
* environment variable; http_proxy <2>:  Basic Authentication.
                                                             (line   62)
* environment variable; IDLESTARTUP:     Startup and code execution.
                                                             (line    7)
* environment variable; KDEDIR:          webbrowser --- Convenient Web-browser controller.
                                                             (line  175)
* environment variable; LANG:            GNU gettext API.    (line   21)
* environment variable; LANG <1>:        Class-based API.    (line   26)
* environment variable; LANG <2>:        locale --- Internationalization services.
                                                             (line   45)
* environment variable; LANG <3>:        locale --- Internationalization services.
                                                             (line  298)
* environment variable; LANG <4>:        locale --- Internationalization services.
                                                             (line  302)
* environment variable; LANGUAGE:        GNU gettext API.    (line   20)
* environment variable; LANGUAGE <1>:    Class-based API.    (line   25)
* environment variable; LC_ALL:          GNU gettext API.    (line   20)
* environment variable; LC_ALL <1>:      Class-based API.    (line   25)
* environment variable; LC_MESSAGES:     GNU gettext API.    (line   20)
* environment variable; LC_MESSAGES <1>: Class-based API.    (line   26)
* environment variable; LDCXXSHARED:     Build and C API Changes<7>.
                                                             (line  154)
* environment variable; LDFLAGS:         New Improved and Deprecated Modules<4>.
                                                             (line   59)
* environment variable; LINES:           curses.             (line    6)
* environment variable; LINES <1>:       Functions<2>.       (line  123)
* environment variable; LINES <2>:       Functions<2>.       (line  521)
* environment variable; LINES <3>:       Functions<2>.       (line  545)
* environment variable; LINES <4>:       Functions<2>.       (line  547)
* environment variable; LNAME:           getpass --- Portable password input.
                                                             (line   36)
* environment variable; LOGNAME:         Process Parameters. (line  184)
* environment variable; LOGNAME <1>:     getpass --- Portable password input.
                                                             (line   36)
* environment variable; MIXERDEV:        ossaudiodev --- Access to OSS-compatible audio devices.
                                                             (line   72)
* environment variable; no_proxy:        urllib request --- Extensible library for opening URLs.
                                                             (line  267)
* environment variable; PAGER:           pydoc --- Documentation generator and online help system.
                                                             (line   47)
* environment variable; PATH:            Changes in 'python' Command Behavior.
                                                             (line    6)
* environment variable; PATH <1>:        Changes in 'python' Command Behavior.
                                                             (line   11)
* environment variable; PATH <2>:        Changes in 'python' Command Behavior.
                                                             (line   12)
* environment variable; PATH <3>:        The Module Search Path.
                                                             (line   16)
* environment variable; PATH <4>:        Executable Python Scripts.
                                                             (line   11)
* environment variable; PATH <5>:        Environment variables.
                                                             (line   27)
* environment variable; PATH <6>:        Miscellaneous.      (line   16)
* environment variable; PATH <7>:        Installation Steps. (line   32)
* environment variable; PATH <8>:        Installation Steps. (line   56)
* environment variable; PATH <9>:        Installing Without UI.
                                                             (line   55)
* environment variable; PATH <10>:       Excursus Setting environment variables.
                                                             (line   23)
* environment variable; PATH <11>:       Excursus Setting environment variables.
                                                             (line   35)
* environment variable; PATH <12>:       Finding the Python executable.
                                                             (line   14)
* environment variable; PATH <13>:       Finding the Python executable.
                                                             (line   21)
* environment variable; PATH <14>:       Finding the Python executable.
                                                             (line   22)
* environment variable; PATH <15>:       Python Launcher for Windows.
                                                             (line   13)
* environment variable; PATH <16>:       From the command-line.
                                                             (line    7)
* environment variable; PATH <17>:       From the command-line.
                                                             (line   35)
* environment variable; PATH <18>:       Shebang Lines.      (line   42)
* environment variable; PATH <19>:       Shebang Lines.      (line   44)
* environment variable; PATH <20>:       Process Management. (line   57)
* environment variable; PATH <21>:       Process Management. (line   60)
* environment variable; PATH <22>:       Process Management. (line   63)
* environment variable; PATH <23>:       Process Management. (line  340)
* environment variable; PATH <24>:       Process Management. (line  344)
* environment variable; PATH <25>:       Process Management. (line  346)
* environment variable; PATH <26>:       Miscellaneous System Information.
                                                             (line  118)
* environment variable; PATH <27>:       webbrowser --- Convenient Web-browser controller.
                                                             (line  205)
* environment variable; PATH <28>:       Installing your CGI script on a Unix system.
                                                             (line   29)
* environment variable; PATH <29>:       Common problems and solutions.
                                                             (line   23)
* environment variable; PATH <30>:       Embedding Python<2>.
                                                             (line   31)
* environment variable; PATH <31>:       Embedding Python<2>.
                                                             (line   37)
* environment variable; PATH <32>:       How do I make a Python script executable on Unix?.
                                                             (line   24)
* environment variable; PATH <33>:       How do I make a Python script executable on Unix?.
                                                             (line   28)
* environment variable; PATH <34>:       The upload command. (line   26)
* environment variable; PATHEXT:         Other Improvements. (line   30)
* environment variable; PATHEXT <1>:     Installing Without UI.
                                                             (line   56)
* environment variable; PLAT:            distutils util --- Miscellaneous other utility functions.
                                                             (line   84)
* environment variable; POSIXLY_CORRECT: getopt --- C-style parser for command line options.
                                                             (line   71)
* environment variable; prefix:          Python-related paths and files.
                                                             (line    7)
* environment variable; prefix <1>:      Include Files.      (line   32)
* environment variable; prefix <2>:      Include Files.      (line   35)
* environment variable; prefix <3>:      Include Files.      (line   42)
* environment variable; PYTHON*:         Other Improvements. (line    9)
* environment variable; PYTHON* <1>:     Miscellaneous options.
                                                             (line   28)
* environment variable; PYTHON* <2>:     Miscellaneous options.
                                                             (line   46)
* environment variable; PYTHONASYNCIODEBUG: Environment variables.
                                                             (line  185)
* environment variable; PYTHONASYNCIODEBUG <1>: Debug mode.  (line   10)
* environment variable; PYTHONASYNCIODEBUG <2>: Debug mode of asyncio.
                                                             (line   13)
* environment variable; PYTHONCASEOK:    PEP 235 Importing Modules on Case-Insensitive Platforms.
                                                             (line   17)
* environment variable; PYTHONCASEOK <1>: Environment variables.
                                                             (line   88)
* environment variable; PYTHONDEBUG:     Miscellaneous options.
                                                             (line   24)
* environment variable; PYTHONDEBUG <1>: Environment variables.
                                                             (line   63)
* environment variable; PYTHONDOCS:      pydoc --- Documentation generator and online help system.
                                                             (line   79)
* environment variable; PYTHONDONTWRITEBYTECODE: Interpreter Changes<2>.
                                                             (line   16)
* environment variable; PYTHONDONTWRITEBYTECODE <1>: New and Improved Modules<2>.
                                                             (line  626)
* environment variable; PYTHONDONTWRITEBYTECODE <2>: Library<23>.
                                                             (line   76)
* environment variable; PYTHONDONTWRITEBYTECODE <3>: Miscellaneous options.
                                                             (line   19)
* environment variable; PYTHONDONTWRITEBYTECODE <4>: Environment variables.
                                                             (line   93)
* environment variable; PYTHONDONTWRITEBYTECODE <5>: sys --- System-specific parameters and functions.
                                                             (line  170)
* environment variable; PYTHONDONTWRITEBYTECODE <6>: How do I create a pyc file?.
                                                             (line   21)
* environment variable; PYTHONDUMPREFS:  Debug-mode variables.
                                                             (line   14)
* environment variable; PYTHONDUMPREFS <1>: Type Objects<3>. (line  129)
* environment variable; PYTHONEXECUTABLE: Environment variables.
                                                             (line  152)
* environment variable; PYTHONFAULTHANDLER: faulthandler<3>. (line   11)
* environment variable; PYTHONFAULTHANDLER <1>: Library<23>. (line   74)
* environment variable; PYTHONFAULTHANDLER <2>: Environment variables.
                                                             (line  164)
* environment variable; PYTHONFAULTHANDLER <3>: faulthandler --- Dump the Python traceback.
                                                             (line   12)
* environment variable; PYTHONHASHSEED:  Builtin functions and types.
                                                             (line   17)
* environment variable; PYTHONHASHSEED <1>: Porting Python code.
                                                             (line    6)
* environment variable; PYTHONHASHSEED <2>: Miscellaneous options.
                                                             (line   86)
* environment variable; PYTHONHASHSEED <3>: Environment variables.
                                                             (line   99)
* environment variable; PYTHONHASHSEED <4>: Environment variables.
                                                             (line  104)
* environment variable; PYTHONHASHSEED <5>: Basic customization.
                                                             (line  281)
* environment variable; PYTHONHOME:      Miscellaneous options.
                                                             (line   29)
* environment variable; PYTHONHOME <1>:  Environment variables.
                                                             (line   11)
* environment variable; PYTHONHOME <2>:  Environment variables.
                                                             (line   19)
* environment variable; PYTHONHOME <3>:  Environment variables.
                                                             (line   21)
* environment variable; PYTHONHOME <4>:  Environment variables.
                                                             (line   38)
* environment variable; PYTHONHOME <5>:  Finding modules.    (line   31)
* environment variable; PYTHONHOME <6>:  Finding modules.    (line   48)
* environment variable; PYTHONHOME <7>:  Finding modules.    (line   88)
* environment variable; PYTHONHOME <8>:  Embedding Python<2>.
                                                             (line   38)
* environment variable; PYTHONHOME <9>:  Embedding Python<2>.
                                                             (line   44)
* environment variable; PYTHONHOME <10>: Process-wide parameters.
                                                             (line  267)
* environment variable; PYTHONHOME <11>: Process-wide parameters.
                                                             (line  281)
* environment variable; PYTHONHOME <12>: Modifying Python's Search Path.
                                                             (line   60)
* environment variable; PYTHONHOME <13>: Modifying Python's Search Path.
                                                             (line   62)
* environment variable; PYTHONINSPECT:   Other Changes and Fixes<2>.
                                                             (line   13)
* environment variable; PYTHONINSPECT <1>: Miscellaneous options.
                                                             (line   39)
* environment variable; PYTHONINSPECT <2>: Environment variables.
                                                             (line   69)
* environment variable; PYTHONIOENCODING: Other Improvements.
                                                             (line   75)
* environment variable; PYTHONIOENCODING <1>: Interpreter Changes<2>.
                                                             (line   23)
* environment variable; PYTHONIOENCODING <2>: Environment variables.
                                                             (line  117)
* environment variable; PYTHONIOENCODING <3>: sys --- System-specific parameters and functions.
                                                             (line 1192)
* environment variable; PYTHONIOENCODING <4>: Process-wide parameters.
                                                             (line   14)
* environment variable; PYTHONIOENCODING <5>: Process-wide parameters.
                                                             (line   18)
* environment variable; PYTHONMALLOC:    PYTHONMALLOC environment variable.
                                                             (line    6)
* environment variable; PYTHONMALLOC <1>: Changes in the C API.
                                                             (line    9)
* environment variable; PYTHONMALLOC <2>: Core and Builtins. (line   60)
* environment variable; PYTHONMALLOC <3>: Environment variables.
                                                             (line  192)
* environment variable; PYTHONMALLOC <4>: Environment variables.
                                                             (line  236)
* environment variable; PYTHONMALLOC <5>: Overview<2>.       (line   75)
* environment variable; PYTHONMALLOC <6>: Customize Memory Allocators.
                                                             (line  127)
* environment variable; PYTHONMALLOCSTATS: Core and Builtins.
                                                             (line   66)
* environment variable; PYTHONMALLOCSTATS <1>: Environment variables.
                                                             (line  230)
* environment variable; PYTHONMALLOCSTATS <2>: Overview<2>.  (line   78)
* environment variable; PYTHONNOUSERSITE: PEP 370 Per-user site-packages Directory.
                                                             (line   30)
* environment variable; PYTHONNOUSERSITE <1>: Environment variables.
                                                             (line  130)
* environment variable; PYTHONNOUSERSITE <2>: Module contents<3>.
                                                             (line   15)
* environment variable; PYTHONNOUSERSITE <3>: Module contents<3>.
                                                             (line   74)
* environment variable; PYTHONOPTIMIZE:  Miscellaneous options.
                                                             (line   56)
* environment variable; PYTHONOPTIMIZE <1>: Environment variables.
                                                             (line   57)
* environment variable; PYTHONPATH:      Changes in 'python' Command Behavior.
                                                             (line    8)
* environment variable; PYTHONPATH <1>:  Changes in 'python' Command Behavior.
                                                             (line    9)
* environment variable; PYTHONPATH <2>:  The Module Search Path.
                                                             (line   15)
* environment variable; PYTHONPATH <3>:  Standard Modules.   (line   34)
* environment variable; PYTHONPATH <4>:  Standard Modules.   (line   35)
* environment variable; PYTHONPATH <5>:  Miscellaneous options.
                                                             (line   28)
* environment variable; PYTHONPATH <6>:  Environment variables.
                                                             (line   24)
* environment variable; PYTHONPATH <7>:  Environment variables.
                                                             (line   32)
* environment variable; PYTHONPATH <8>:  Environment variables.
                                                             (line   39)
* environment variable; PYTHONPATH <9>:  Environment variables.
                                                             (line   42)
* environment variable; PYTHONPATH <10>: Excursus Setting environment variables.
                                                             (line   38)
* environment variable; PYTHONPATH <11>: Finding modules.    (line   17)
* environment variable; PYTHONPATH <12>: Finding modules.    (line   39)
* environment variable; PYTHONPATH <13>: Finding modules.    (line   88)
* environment variable; PYTHONPATH <14>: Configuration.      (line    6)
* environment variable; PYTHONPATH <15>: Installing your CGI script on a Unix system.
                                                             (line   29)
* environment variable; PYTHONPATH <16>: sys --- System-specific parameters and functions.
                                                             (line  838)
* environment variable; PYTHONPATH <17>: sys --- System-specific parameters and functions.
                                                             (line  848)
* environment variable; PYTHONPATH <18>: Building C and C++ Extensions.
                                                             (line    9)
* environment variable; PYTHONPATH <19>: Embedding Python<2>.
                                                             (line   39)
* environment variable; PYTHONPATH <20>: Embedding Python<2>.
                                                             (line   44)
* environment variable; PYTHONPATH <21>: Modifying Python's Search Path.
                                                             (line   67)
* environment variable; PYTHONPATH <22>: Modifying Python's Search Path.
                                                             (line   68)
* environment variable; PYTHONSTARTUP:   sys<2>.             (line   17)
* environment variable; PYTHONSTARTUP <1>: sys<2>.           (line   21)
* environment variable; PYTHONSTARTUP <2>: The Interactive Startup File.
                                                             (line    8)
* environment variable; PYTHONSTARTUP <3>: Miscellaneous options.
                                                             (line   36)
* environment variable; PYTHONSTARTUP <4>: Environment variables.
                                                             (line   46)
* environment variable; PYTHONSTARTUP <5>: Example.          (line   10)
* environment variable; PYTHONSTARTUP <6>: Startup and code execution.
                                                             (line    7)
* environment variable; PYTHONSTARTUP <7>: sys --- System-specific parameters and functions.
                                                             (line  737)
* environment variable; PYTHONSTARTUP <8>: Readline configuration.
                                                             (line   12)
* environment variable; PYTHONTHREADDEBUG: Debug-mode variables.
                                                             (line   10)
* environment variable; PYTHONTRACEMALLOC: Environment variables.
                                                             (line  174)
* environment variable; PYTHONTRACEMALLOC <1>: tracemalloc --- Trace memory allocations.
                                                             (line   21)
* environment variable; PYTHONTRACEMALLOC <2>: tracemalloc --- Trace memory allocations.
                                                             (line   28)
* environment variable; PYTHONTRACEMALLOC <3>: Functions<7>. (line   68)
* environment variable; PYTHONUNBUFFERED: Miscellaneous options.
                                                             (line  116)
* environment variable; PYTHONUNBUFFERED <1>: Environment variables.
                                                             (line   77)
* environment variable; PYTHONUSERBASE:  PEP 370 Per-user site-packages Directory.
                                                             (line   23)
* environment variable; PYTHONUSERBASE <1>: Environment variables.
                                                             (line  140)
* environment variable; PYTHONUSERBASE <2>: Module contents<3>.
                                                             (line   39)
* environment variable; PYTHONUSERBASE <3>: Module contents<3>.
                                                             (line   66)
* environment variable; PYTHONVERBOSE:   Miscellaneous options.
                                                             (line  124)
* environment variable; PYTHONVERBOSE <1>: Environment variables.
                                                             (line   82)
* environment variable; PYTHONWARNINGS:  Other Language Changes<5>.
                                                             (line  157)
* environment variable; PYTHONWARNINGS <1>: Changes to the Handling of Deprecation Warnings.
                                                             (line   25)
* environment variable; PYTHONWARNINGS <2>: Interpreter Changes.
                                                             (line    6)
* environment variable; PYTHONWARNINGS <3>: Miscellaneous options.
                                                             (line  202)
* environment variable; PYTHONWARNINGS <4>: Environment variables.
                                                             (line  158)
* environment variable; PYTHON_DOM:      Module Contents<4>. (line   23)
* environment variable; SystemRoot:      Popen Constructor.  (line  191)
* environment variable; TCL_LIBRARY:     How do I freeze Tkinter applications?.
                                                             (line   11)
* environment variable; TEMP:            tempfile --- Generate temporary files and directories.
                                                             (line  213)
* environment variable; TERM:            Functions<2>.       (line  436)
* environment variable; TERM <1>:        Functions<2>.       (line  463)
* environment variable; TIX_LIBRARY:     Using Tix.          (line   32)
* environment variable; TK_LIBRARY:      How do I freeze Tkinter applications?.
                                                             (line   11)
* environment variable; TMP:             tempfile --- Generate temporary files and directories.
                                                             (line  215)
* environment variable; TMPDIR:          tempfile --- Generate temporary files and directories.
                                                             (line  211)
* environment variable; TZ:              time --- Time access and conversions.
                                                             (line  596)
* environment variable; TZ <1>:          time --- Time access and conversions.
                                                             (line  600)
* environment variable; TZ <2>:          time --- Time access and conversions.
                                                             (line  605)
* environment variable; TZ <3>:          time --- Time access and conversions.
                                                             (line  607)
* environment variable; TZ <4>:          time --- Time access and conversions.
                                                             (line  667)
* environment variable; USER:            getpass --- Portable password input.
                                                             (line   36)
* environment variable; USERNAME:        Process Parameters. (line  184)
* environment variable; USERNAME <1>:    getpass --- Portable password input.
                                                             (line   37)
* environment variable; USERPROFILE:     os path --- Common pathname manipulations.
                                                             (line  122)
* environment variable; USERPROFILE <1>: Location and names of config files.
                                                             (line   67)
* environment variable; USER_BASE:       New and Improved Modules.
                                                             (line  471)
* environment variables; deleting:       Process Parameters. (line  461)
* environment variables; setting:        Process Parameters. (line  281)
* EnvironmentError:                      Concrete exceptions.
                                                             (line  361)
* Environments; virtual:                 venv --- Creation of virtual environments.
                                                             (line    6)
* EnvironmentVarGuard (class in test.support): test support --- Utilities for the Python test suite.
                                                             (line  429)
* ENXIO (in module errno):               errno --- Standard errno system symbols.
                                                             (line   49)
* eof (bz2.BZ2Decompressor attribute):   Incremental de compression.
                                                             (line   72)
* eof (lzma.LZMADecompressor attribute): Compressing and decompressing data in memory.
                                                             (line  165)
* eof (shlex.shlex attribute):           shlex Objects.      (line  165)
* eof (ssl.MemoryBIO attribute):         Memory BIO Support<2>.
                                                             (line  128)
* eof (zlib.Decompress attribute):       zlib --- Compression compatible with gzip.
                                                             (line  204)
* EOFError:                              Concrete exceptions.
                                                             (line   19)
* EOFError (built-in exception):         File Objects.       (line   42)
* eof_received() (asyncio.Protocol method): Streaming protocols.
                                                             (line   19)
* EOPNOTSUPP (in module errno):          errno --- Standard errno system symbols.
                                                             (line  405)
* EOVERFLOW (in module errno):           errno --- Standard errno system symbols.
                                                             (line  325)
* EPERM (in module errno):               errno --- Standard errno system symbols.
                                                             (line   24)
* EPFNOSUPPORT (in module errno):        errno --- Standard errno system symbols.
                                                             (line  409)
* epilogue (email.message.Message attribute): email message Representing an email message.
                                                             (line  666)
* EPIPE (in module errno):               errno --- Standard errno system symbols.
                                                             (line  153)
* epoch:                                 time --- Time access and conversions.
                                                             (line   18)
* epoll() (in module select):            select --- Waiting for I/O completion.
                                                             (line   48)
* EpollSelector (class in selectors):    Classes<3>.         (line  175)
* EPROTO (in module errno):              errno --- Standard errno system symbols.
                                                             (line  309)
* EPROTONOSUPPORT (in module errno):     errno --- Standard errno system symbols.
                                                             (line  397)
* EPROTOTYPE (in module errno):          errno --- Standard errno system symbols.
                                                             (line  389)
* eq() (in module operator):             operator --- Standard operators as functions.
                                                             (line   22)
* EQEQUAL (in module token):             token --- Constants used with Python parse trees.
                                                             (line   40)
* EQUAL (in module token):               token --- Constants used with Python parse trees.
                                                             (line   40)
* ERA (in module locale):                locale --- Internationalization services.
                                                             (line  252)
* ERANGE (in module errno):              errno --- Standard errno system symbols.
                                                             (line  161)
* erase() (curses.window method):        Window Objects.     (line  204)
* erasechar() (in module curses):        Functions<2>.       (line  113)
* ERA_D_FMT (in module locale):          locale --- Internationalization services.
                                                             (line  274)
* ERA_D_T_FMT (in module locale):        locale --- Internationalization services.
                                                             (line  269)
* ERA_T_FMT (in module locale):          locale --- Internationalization services.
                                                             (line  279)
* EREMCHG (in module errno):             errno --- Standard errno system symbols.
                                                             (line  337)
* EREMOTE (in module errno):             errno --- Standard errno system symbols.
                                                             (line  289)
* EREMOTEIO (in module errno):           errno --- Standard errno system symbols.
                                                             (line  509)
* ERESTART (in module errno):            errno --- Standard errno system symbols.
                                                             (line  365)
* erf() (in module math):                Special functions.  (line    6)
* erfc() (in module math):               Special functions.  (line   20)
* EROFS (in module errno):               errno --- Standard errno system symbols.
                                                             (line  145)
* ERR (in module curses):                Constants<4>.       (line    8)
* errcheck (ctypes._FuncPtr attribute):  Foreign functions.  (line   59)
* errcode (xmlrpc.client.ProtocolError attribute): ProtocolError Objects.
                                                             (line   14)
* errmsg (xmlrpc.client.ProtocolError attribute): ProtocolError Objects.
                                                             (line   18)
* errno (module):                        errno --- Standard errno system symbols.
                                                             (line    6)
* errno (OSError attribute):             Concrete exceptions.
                                                             (line  118)
* error:                                 Module Contents.    (line  306)
* error <1>:                             Functions and Exceptions.
                                                             (line    8)
* error <2>:                             copy --- Shallow and deep copy operations.
                                                             (line   22)
* Error:                                 Directory and files operations.
                                                             (line  326)
* error <3>:                             dbm --- Interfaces to Unix "databases".
                                                             (line   12)
* error <4>:                             dbm gnu --- GNU's reinterpretation of dbm.
                                                             (line   17)
* error <5>:                             dbm ndbm --- Interface based on ndbm.
                                                             (line   17)
* error <6>:                             dbm dumb --- Portable DBM implementation.
                                                             (line   20)
* error <7>:                             zlib --- Compression compatible with gzip.
                                                             (line   22)
* Error <1>:                             Module Contents<3>. (line  257)
* Error <2>:                             Exceptions<4>.      (line    6)
* Error <3>:                             Exceptions<5>.      (line    8)
* error <8>:                             os --- Miscellaneous operating system interfaces.
                                                             (line   43)
* error <9>:                             getopt --- C-style parser for command line options.
                                                             (line   85)
* error <10>:                            Functions<2>.       (line    8)
* error <11>:                            _thread --- Low-level threading API.
                                                             (line   22)
* error <12>:                            Exceptions<7>.      (line    6)
* error <13>:                            select --- Waiting for I/O completion.
                                                             (line   22)
* Error <4>:                             Exceptions<10>.     (line    9)
* Error <5>:                             binhex --- Encode and decode binhex4 files.
                                                             (line   29)
* Error <6>:                             binascii --- Convert between binary and ASCII.
                                                             (line  141)
* Error <7>:                             uu --- Encode and decode uuencode files.
                                                             (line   46)
* error <14>:                            xml parsers expat --- Fast XML parsing using Expat.
                                                             (line   29)
* Error <8>:                             webbrowser --- Convenient Web-browser controller.
                                                             (line   44)
* error <15>:                            audioop --- Manipulate raw audio data.
                                                             (line   24)
* Error <9>:                             sunau --- Read and write Sun AU files.
                                                             (line   73)
* Error <10>:                            wave --- Read and write WAV files.
                                                             (line   53)
* Error <11>:                            locale --- Internationalization services.
                                                             (line   18)
* error <16>:                            resource --- Resource usage information.
                                                             (line   15)
* error <17>:                            nis --- Interface to Sun's NIS Yellow Pages.
                                                             (line   52)
* error handling:                        Exceptions<2>.      (line    6)
* error() (argparse.ArgumentParser method): Exiting methods. (line   11)
* error() (in module logging):           Module-Level Functions.
                                                             (line  132)
* error() (logging.Logger method):       Logger Objects.     (line  202)
* error() (urllib.request.OpenerDirector method): OpenerDirector Objects.
                                                             (line   41)
* error() (xml.sax.handler.ErrorHandler method): ErrorHandler Objects.
                                                             (line   16)
* ErrorByteIndex (xml.parsers.expat.xmlparser attribute): XMLParser Objects<2>.
                                                             (line  132)
* errorcode (in module errno):           errno --- Standard errno system symbols.
                                                             (line   11)
* ErrorCode (xml.parsers.expat.xmlparser attribute): XMLParser Objects<2>.
                                                             (line  136)
* ErrorColumnNumber (xml.parsers.expat.xmlparser attribute): XMLParser Objects<2>.
                                                             (line  142)
* ErrorHandler (class in xml.sax.handler): xml sax handler --- Base classes for SAX handlers.
                                                             (line   34)
* ErrorLineNumber (xml.parsers.expat.xmlparser attribute): XMLParser Objects<2>.
                                                             (line  146)
* errors:                                Exceptions<2>.      (line    6)
* errors (io.TextIOBase attribute):      Text I/O<2>.        (line   21)
* errors (unittest.TestLoader attribute): Loading and running tests.
                                                             (line   17)
* errors (unittest.TestResult attribute): Loading and running tests.
                                                             (line  216)
* Errors; logging:                       logging --- Logging facility for Python.
                                                             (line    6)
* ErrorString() (in module xml.parsers.expat): xml parsers expat --- Fast XML parsing using Expat.
                                                             (line   40)
* ERRORTOKEN (in module token):          token --- Constants used with Python parse trees.
                                                             (line   40)
* error_body (wsgiref.handlers.BaseHandler attribute): wsgiref handlers -- server/gateway base classes.
                                                             (line  257)
* error_content_type (http.server.BaseHTTPRequestHandler attribute): http server --- HTTP servers.
                                                             (line  131)
* error_headers (wsgiref.handlers.BaseHandler attribute): wsgiref handlers -- server/gateway base classes.
                                                             (line  250)
* error_leader() (shlex.shlex method):   shlex Objects.      (line   69)
* error_message_format (http.server.BaseHTTPRequestHandler attribute): http server --- HTTP servers.
                                                             (line  123)
* error_output() (wsgiref.handlers.BaseHandler method): wsgiref handlers -- server/gateway base classes.
                                                             (line  222)
* error_perm:                            ftplib --- FTP protocol client.
                                                             (line  117)
* error_proto:                           ftplib --- FTP protocol client.
                                                             (line  122)
* error_proto <1>:                       poplib --- POP3 protocol client.
                                                             (line   63)
* error_received() (asyncio.DatagramProtocol method): Datagram protocols.
                                                             (line   15)
* error_reply:                           ftplib --- FTP protocol client.
                                                             (line  107)
* error_status (wsgiref.handlers.BaseHandler attribute): wsgiref handlers -- server/gateway base classes.
                                                             (line  244)
* error_temp:                            ftplib --- FTP protocol client.
                                                             (line  112)
* escape (shlex.shlex attribute):        shlex Objects.      (line  103)
* escape sequence:                       String and Bytes literals.
                                                             (line   75)
* escape() (in module cgi):              Functions<6>.       (line   73)
* escape() (in module glob):             glob --- Unix style pathname pattern expansion.
                                                             (line   52)
* escape() (in module html):             html --- HyperText Markup Language support.
                                                             (line   12)
* escape() (in module re):               Module Contents.    (line  293)
* escape() (in module xml.sax.saxutils): xml sax saxutils --- SAX Utilities.
                                                             (line   10)
* escapechar (csv.Dialect attribute):    Dialects and Formatting Parameters.
                                                             (line   35)
* escapedquotes (shlex.shlex attribute): shlex Objects.      (line  115)
* ESHUTDOWN (in module errno):           errno --- Standard errno system symbols.
                                                             (line  457)
* ESOCKTNOSUPPORT (in module errno):     errno --- Standard errno system symbols.
                                                             (line  401)
* ESPIPE (in module errno):              errno --- Standard errno system symbols.
                                                             (line  141)
* ESRCH (in module errno):               errno --- Standard errno system symbols.
                                                             (line   32)
* ESRMNT (in module errno):              errno --- Standard errno system symbols.
                                                             (line  301)
* ESTALE (in module errno):              errno --- Standard errno system symbols.
                                                             (line  489)
* ESTRPIPE (in module errno):            errno --- Standard errno system symbols.
                                                             (line  369)
* ETIME (in module errno):               errno --- Standard errno system symbols.
                                                             (line  273)
* ETIMEDOUT (in module errno):           errno --- Standard errno system symbols.
                                                             (line  465)
* Etiny() (decimal.Context method):      Context objects.    (line  213)
* ETOOMANYREFS (in module errno):        errno --- Standard errno system symbols.
                                                             (line  461)
* Etop() (decimal.Context method):       Context objects.    (line  219)
* ETXTBSY (in module errno):             errno --- Standard errno system symbols.
                                                             (line  129)
* EUCLEAN (in module errno):             errno --- Standard errno system symbols.
                                                             (line  493)
* EUNATCH (in module errno):             errno --- Standard errno system symbols.
                                                             (line  221)
* EUSERS (in module errno):              errno --- Standard errno system symbols.
                                                             (line  373)
* eval() (built-in function):            Built-in Functions. (line  406)
* evaluation; order:                     Evaluation order.   (line    6)
* Event (class in asyncio):              Event.              (line    6)
* Event (class in multiprocessing):      Synchronization primitives.
                                                             (line   42)
* Event (class in threading):            Event Objects.      (line   14)
* event scheduling:                      sched --- Event scheduler.
                                                             (line    6)
* event() (msilib.Control method):       GUI classes.        (line   16)
* Event() (multiprocessing.managers.SyncManager method): Managers.
                                                             (line  164)
* events (selectors.SelectorKey attribute): Classes<3>.      (line   44)
* events (widgets):                      Bindings and Events.
                                                             (line    6)
* EWOULDBLOCK (in module errno):         errno --- Standard errno system symbols.
                                                             (line  189)
* Example (class in doctest):            Example Objects.    (line    6)
* example (doctest.DocTestFailure attribute): Debugging.     (line  200)
* example (doctest.UnexpectedException attribute): Debugging.
                                                             (line  221)
* examples (doctest.DocTest attribute):  DocTest Objects.    (line   17)
* excel (class in csv):                  Module Contents<3>. (line  175)
* excel_tab (class in csv):              Module Contents<3>. (line  181)
* except (2to3 fixer):                   Fixers.             (line   89)
* excepthook() (in module sys):          cgitb --- Traceback manager for CGI scripts.
                                                             (line   29)
* excepthook() (in module sys) <1>:      sys --- System-specific parameters and functions.
                                                             (line  173)
* exception:                             Exceptions<2>.      (line    6)
* exception <1>:                         The raise statement.
                                                             (line    6)
* Exception:                             Base classes.       (line   37)
* EXCEPTION (in module tkinter):         File Handlers.      (line   41)
* exception handler:                     Exceptions<2>.      (line    6)
* exception() (asyncio.Future method):   Future.             (line   55)
* exception() (asyncio.StreamReader method): StreamReader.   (line   10)
* exception() (concurrent.futures.Future method): Future Objects.
                                                             (line   53)
* exception() (in module logging):       Module-Level Functions.
                                                             (line  142)
* exception() (logging.Logger method):   Logger Objects.     (line  217)
* exception; AssertionError:             The assert statement.
                                                             (line   21)
* exception; AttributeError:             Attribute references.
                                                             (line   10)
* exception; chaining:                   The raise statement.
                                                             (line   30)
* exception; GeneratorExit:              Generator-iterator methods.
                                                             (line   47)
* exception; handler:                    The standard type hierarchy.
                                                             (line  692)
* exception; ImportError:                The import statement.
                                                             (line   52)
* exception; NameError:                  Identifiers Names.  (line   10)
* exception; StopIteration:              Generator-iterator methods.
                                                             (line   12)
* exception; StopIteration <1>:          The yield statement.
                                                             (line    6)
* exception; TypeError:                  Unary arithmetic and bitwise operations.
                                                             (line   19)
* exception; ValueError:                 Shifting operations.
                                                             (line   15)
* exception; ZeroDivisionError:          Binary arithmetic operations.
                                                             (line   28)
* exceptions; in CGI scripts:            cgitb --- Traceback manager for CGI scripts.
                                                             (line    6)
* exclusive; or:                         Binary bitwise operations.
                                                             (line   15)
* exc_info (doctest.UnexpectedException attribute): Debugging.
                                                             (line  225)
* exc_info (in module sys):              The standard type hierarchy.
                                                             (line  692)
* exc_info() (in module sys):            sys --- System-specific parameters and functions.
                                                             (line  194)
* exc_info() (in module sys) <1>:        Exceptions<13>.     (line   45)
* exc_msg (doctest.Example attribute):   Example Objects.    (line   31)
* exc_type (traceback.TracebackException attribute): TracebackException Objects.
                                                             (line   38)
* EXDEV (in module errno):               errno --- Standard errno system symbols.
                                                             (line   97)
* exec (2to3 fixer):                     Fixers.             (line   93)
* exec() (built-in function):            Built-in Functions. (line  445)
* execfile (2to3 fixer):                 Fixers.             (line   97)
* execl() (in module os):                Process Management. (line   24)
* execle() (in module os):               Process Management. (line   24)
* execlp() (in module os):               Process Management. (line   24)
* execlpe() (in module os):              Process Management. (line   24)
* executable (in module sys):            sys --- System-specific parameters and functions.
                                                             (line  233)
* executable (in module sys) <1>:        Process-wide parameters.
                                                             (line  111)
* Executable Zip Files:                  zipapp --- Manage executable python zip archives.
                                                             (line    6)
* executable_filename() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  451)
* execute() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  481)
* execute() (in module distutils.util):  distutils util --- Miscellaneous other utility functions.
                                                             (line  114)
* Execute() (msilib.View method):        View Objects.       (line    6)
* execute() (sqlite3.Connection method): Connection Objects. (line   52)
* execute() (sqlite3.Cursor method):     Cursor Objects.     (line   11)
* executemany() (sqlite3.Connection method): Connection Objects.
                                                             (line   59)
* executemany() (sqlite3.Cursor method): Cursor Objects.     (line   43)
* executescript() (sqlite3.Connection method): Connection Objects.
                                                             (line   66)
* executescript() (sqlite3.Cursor method): Cursor Objects.   (line   93)
* execution model:                       Execution model.    (line    6)
* execution; frame:                      Structure of a program.
                                                             (line   16)
* execution; frame <1>:                  Class definitions.  (line    6)
* execution; stack:                      The standard type hierarchy.
                                                             (line  692)
* ExecutionLoader (class in importlib.abc): importlib abc -- Abstract base classes related to import.
                                                             (line  355)
* Executor (class in concurrent.futures): Executor Objects.  (line    6)
* execv() (in module os):                Process Management. (line   24)
* execve() (in module os):               Process Management. (line   24)
* execvp() (in module os):               Process Management. (line   24)
* execvpe() (in module os):              Process Management. (line   24)
* exec_module (C function):              Multi-phase initialization.
                                                             (line  103)
* exec_module() (importlib.abc.InspectLoader method): importlib abc -- Abstract base classes related to import.
                                                             (line  342)
* exec_module() (importlib.abc.Loader method): importlib abc -- Abstract base classes related to import.
                                                             (line  167)
* exec_module() (importlib.abc.SourceLoader method): importlib abc -- Abstract base classes related to import.
                                                             (line  489)
* exec_module() (importlib.machinery.ExtensionFileLoader method): importlib machinery -- Importers and path hooks.
                                                             (line  308)
* exec_prefix:                           Python-related paths and files.
                                                             (line    7)
* exec_prefix <1>:                       Include Files.      (line   32)
* exec_prefix <2>:                       Include Files.      (line   43)
* EXEC_PREFIX (in module distutils.sysconfig): distutils sysconfig --- System configuration information.
                                                             (line   23)
* exec_prefix (in module sys):           sys --- System-specific parameters and functions.
                                                             (line  216)
* ExFileSelectBox (class in tkinter.tix): File Selectors.    (line   34)
* EXFULL (in module errno):              errno --- Standard errno system symbols.
                                                             (line  241)
* exists() (in module os.path):          os path --- Common pathname manipulations.
                                                             (line   94)
* exists() (pathlib.Path method):        Methods<2>.         (line   50)
* exists() (tkinter.ttk.Treeview method): ttk Treeview.      (line   95)
* exit (built-in variable):              Constants added by the site module.
                                                             (line   11)
* exit():                                Process Control.    (line   17)
* exit() (argparse.ArgumentParser method): Exiting methods.  (line    6)
* exit() (in module sys):                sys --- System-specific parameters and functions.
                                                             (line  240)
* exit() (in module _thread):            _thread --- Low-level threading API.
                                                             (line   48)
* exitcode (multiprocessing.Process attribute): Process and exceptions.
                                                             (line  109)
* exitfunc (2to3 fixer):                 Fixers.             (line  103)
* exitonclick() (in module turtle):      Methods specific to Screen not inherited from TurtleScreen.
                                                             (line   10)
* ExitStack (class in contextlib):       Utilities.          (line  265)
* exp() (decimal.Context method):        Context objects.    (line  284)
* exp() (decimal.Decimal method):        Decimal objects.    (line  228)
* exp() (in module cmath):               Power and logarithmic functions<2>.
                                                             (line    6)
* exp() (in module math):                Power and logarithmic functions.
                                                             (line    6)
* expand() (re.match method):            Match Objects.      (line   17)
* ExpandEnvironmentStrings() (in module winreg): Functions<9>.
                                                             (line  203)
* expandNode() (xml.dom.pulldom.DOMEventStream method): DOMEventStream Objects.
                                                             (line   18)
* expandtabs() (bytearray method):       Bytes and Bytearray Operations.
                                                             (line  408)
* expandtabs() (bytes method):           Bytes and Bytearray Operations.
                                                             (line  408)
* expandtabs() (str method):             String Methods<2>.  (line   77)
* expanduser() (in module os.path):      os path --- Common pathname manipulations.
                                                             (line  111)
* expanduser() (pathlib.Path method):    Methods<2>.         (line   67)
* expandvars() (in module os.path):      os path --- Common pathname manipulations.
                                                             (line  130)
* expand_tabs (textwrap.TextWrapper attribute): textwrap --- Text wrapping and filling.
                                                             (line  153)
* Expat:                                 xml parsers expat --- Fast XML parsing using Expat.
                                                             (line   10)
* ExpatError:                            xml parsers expat --- Fast XML parsing using Expat.
                                                             (line   23)
* expect() (telnetlib.Telnet method):    Telnet Objects.     (line  115)
* expected (asyncio.IncompleteReadError attribute): IncompleteReadError.
                                                             (line   10)
* expectedFailure() (in module unittest): Skipping tests and expected failures.
                                                             (line   88)
* expectedFailures (unittest.TestResult attribute): Loading and running tests.
                                                             (line  236)
* expires (http.cookiejar.Cookie attribute): Cookie Objects<2>.
                                                             (line   48)
* exploded (ipaddress.IPv4Address attribute): Address objects.
                                                             (line   53)
* exploded (ipaddress.IPv4Network attribute): Network objects.
                                                             (line  103)
* exploded (ipaddress.IPv6Address attribute): Address objects.
                                                             (line  154)
* exploded (ipaddress.IPv6Network attribute): Network objects.
                                                             (line  282)
* expm1() (in module math):              Power and logarithmic functions.
                                                             (line   10)
* expovariate() (in module random):      random --- Generate pseudo-random numbers.
                                                             (line  192)
* expr() (in module parser):             Creating ST Objects.
                                                             (line   10)
* expression:                            Expressions.        (line    6)
* expression <1>:                        Glossary.           (line  316)
* expression; list:                      Expression lists.   (line    6)
* expression; list <1>:                  Expression statements.
                                                             (line    6)
* expression; list <2>:                  Expression statements.
                                                             (line    6)
* expression; statement:                 Expression statements.
                                                             (line    6)
* expunge() (imaplib.IMAP4 method):      IMAP4 Objects.      (line   93)
* extend() (array.array method):         array --- Efficient arrays of numeric values.
                                                             (line  149)
* extend() (collections.deque method):   deque objects.      (line   59)
* extend() (sequence method):            Mutable Sequence Types.
                                                             (line   16)
* extend() (xml.etree.ElementTree.Element method): Element Objects.
                                                             (line   93)
* ExtendedContext (class in decimal):    Context objects.    (line   58)
* ExtendedInterpolation (class in configparser): Interpolation of values.
                                                             (line   37)
* EXTENDED_ARG (opcode):                 Python Bytecode Instructions.
                                                             (line  648)
* extendleft() (collections.deque method): deque objects.    (line   64)
* extend_path() (in module pkgutil):     pkgutil --- Package extension utility.
                                                             (line   13)
* Extension (class in distutils.core):   distutils core --- Core Distutils functionality.
                                                             (line  176)
* extension module:                      Glossary.           (line  326)
* extension; module:                     The standard type hierarchy.
                                                             (line    6)
* ExtensionFileLoader (class in importlib.machinery): importlib machinery -- Importers and path hooks.
                                                             (line  282)
* extensions_map (http.server.SimpleHTTPRequestHandler attribute): http server --- HTTP servers.
                                                             (line  328)
* EXTENSION_SUFFIXES (in module importlib.machinery): importlib machinery -- Importers and path hooks.
                                                             (line   46)
* External Data Representation:          Data stream format. (line    6)
* External Data Representation <1>:      xdrlib --- Encode and decode XDR data.
                                                             (line    6)
* ExternalClashError:                    Exceptions<10>.     (line   25)
* ExternalEntityParserCreate() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line   44)
* ExternalEntityRefHandler() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line  333)
* external_attr (zipfile.ZipInfo attribute): ZipInfo Objects.
                                                             (line  107)
* extra (zipfile.ZipInfo attribute):     ZipInfo Objects.    (line   73)
* extract() (tarfile.TarFile method):    TarFile Objects.    (line  153)
* extract() (traceback.StackSummary class method): StackSummary Objects.
                                                             (line   13)
* extract() (zipfile.ZipFile method):    ZipFile Objects.    (line  117)
* extractall() (tarfile.TarFile method): TarFile Objects.    (line  130)
* extractall() (zipfile.ZipFile method): ZipFile Objects.    (line  137)
* ExtractError:                          tarfile --- Read and write tar archive files.
                                                             (line  198)
* extractfile() (tarfile.TarFile method): TarFile Objects.   (line  177)
* extract_cookies() (http.cookiejar.CookieJar method): CookieJar and FileCookieJar Objects.
                                                             (line   30)
* extract_stack() (in module traceback): traceback --- Print or retrieve a stack traceback.
                                                             (line   88)
* extract_tb() (in module traceback):    traceback --- Print or retrieve a stack traceback.
                                                             (line   76)
* extract_version (zipfile.ZipInfo attribute): ZipInfo Objects.
                                                             (line   87)
* extsep (in module os):                 Miscellaneous System Information.
                                                             (line  109)
* EX_CANTCREAT (in module os):           Process Management. (line  168)
* EX_CONFIG (in module os):              Process Management. (line  204)
* EX_DATAERR (in module os):             Process Management. (line  117)
* EX_IOERR (in module os):               Process Management. (line  175)
* EX_NOHOST (in module os):              Process Management. (line  136)
* EX_NOINPUT (in module os):             Process Management. (line  123)
* EX_NOPERM (in module os):              Process Management. (line  197)
* EX_NOTFOUND (in module os):            Process Management. (line  211)
* EX_NOUSER (in module os):              Process Management. (line  130)
* EX_OK (in module os):                  Process Management. (line  104)
* EX_OSERR (in module os):               Process Management. (line  154)
* EX_OSFILE (in module os):              Process Management. (line  161)
* EX_PROTOCOL (in module os):            Process Management. (line  190)
* EX_SOFTWARE (in module os):            Process Management. (line  148)
* EX_TEMPFAIL (in module os):            Process Management. (line  182)
* EX_UNAVAILABLE (in module os):         Process Management. (line  142)
* EX_USAGE (in module os):               Process Management. (line  110)
* f-string:                              String literal concatenation.
                                                             (line   23)
* fabs() (in module math):               Number-theoretic and representation functions.
                                                             (line   18)
* factorial() (in module math):          Number-theoretic and representation functions.
                                                             (line   22)
* factory() (importlib.util.LazyLoader class method): importlib util -- Utility code for importers.
                                                             (line  228)
* fail() (unittest.TestCase method):     Test cases.         (line  658)
* failfast (unittest.TestResult attribute): Loading and running tests.
                                                             (line  267)
* failureException (unittest.TestCase attribute): Test cases.
                                                             (line  663)
* failures (unittest.TestResult attribute): Loading and running tests.
                                                             (line  222)
* FAIL_FAST (in module doctest):         Option Flags.       (line  151)
* False:                                 The standard type hierarchy.
                                                             (line   75)
* false:                                 Truth Value Testing.
                                                             (line    6)
* False <1>:                             Truth Value Testing.
                                                             (line   27)
* False <2>:                             Boolean Values.     (line   15)
* False (Built-in object):               Truth Value Testing.
                                                             (line   12)
* False (built-in variable):             Built-in Constants. (line    8)
* family (socket.socket attribute):      Socket Objects.     (line  536)
* FancyGetopt (class in distutils.fancy_getopt): distutils fancy_getopt --- Wrapper around the standard getopt module.
                                                             (line   36)
* FancyURLopener (class in urllib.request): Legacy interface.
                                                             (line  147)
* fancy_getopt() (in module distutils.fancy_getopt): distutils fancy_getopt --- Wrapper around the standard getopt module.
                                                             (line   20)
* fast (pickle.Pickler attribute):       Module Interface.   (line  197)
* fatalError() (xml.sax.handler.ErrorHandler method): ErrorHandler Objects.
                                                             (line   24)
* faultCode (xmlrpc.client.Fault attribute): Fault Objects.  (line    9)
* faulthandler (module):                 faulthandler --- Dump the Python traceback.
                                                             (line    6)
* faultString (xmlrpc.client.Fault attribute): Fault Objects.
                                                             (line   13)
* fchdir() (in module os):               Files and Directories.
                                                             (line  235)
* fchmod() (in module os):               File Descriptor Operations.
                                                             (line   70)
* fchown() (in module os):               File Descriptor Operations.
                                                             (line   78)
* FCICreate() (in module msilib):        msilib --- Read and write Microsoft Installer files.
                                                             (line   22)
* fcntl (module):                        fcntl --- The fcntl and ioctl system calls.
                                                             (line    6)
* fcntl() (in module fcntl):             fcntl --- The fcntl and ioctl system calls.
                                                             (line   20)
* fd (selectors.SelectorKey attribute):  Classes<3>.         (line   40)
* fd() (in module turtle):               Turtle motion.      (line    6)
* fdatasync() (in module os):            File Descriptor Operations.
                                                             (line   87)
* fdopen() (in module os):               File Object Creation.
                                                             (line    9)
* Feature (class in msilib):             Features<3>.        (line    6)
* feature_external_ges (in module xml.sax.handler): xml sax handler --- Base classes for SAX handlers.
                                                             (line   72)
* feature_external_pes (in module xml.sax.handler): xml sax handler --- Base classes for SAX handlers.
                                                             (line   79)
* feature_namespaces (in module xml.sax.handler): xml sax handler --- Base classes for SAX handlers.
                                                             (line   44)
* feature_namespace_prefixes (in module xml.sax.handler): xml sax handler --- Base classes for SAX handlers.
                                                             (line   51)
* feature_string_interning (in module xml.sax.handler): xml sax handler --- Base classes for SAX handlers.
                                                             (line   58)
* feature_validation (in module xml.sax.handler): xml sax handler --- Base classes for SAX handlers.
                                                             (line   65)
* feed() (email.parser.FeedParser method): FeedParser API.   (line   44)
* feed() (html.parser.HTMLParser method): HTMLParser Methods.
                                                             (line    8)
* feed() (xml.etree.ElementTree.XMLParser method): XMLParser Objects.
                                                             (line   36)
* feed() (xml.etree.ElementTree.XMLPullParser method): XMLPullParser Objects.
                                                             (line   18)
* feed() (xml.sax.xmlreader.IncrementalParser method): IncrementalParser Objects.
                                                             (line    9)
* FeedParser (class in email.parser):    FeedParser API.     (line   27)
* feed_data() (asyncio.StreamReader method): StreamReader.   (line   18)
* feed_eof() (asyncio.StreamReader method): StreamReader.    (line   14)
* fetch() (imaplib.IMAP4 method):        IMAP4 Objects.      (line   99)
* Fetch() (msilib.View method):          View Objects.       (line   18)
* fetchall() (sqlite3.Cursor method):    Cursor Objects.     (line  155)
* fetchmany() (sqlite3.Cursor method):   Cursor Objects.     (line  135)
* fetchone() (sqlite3.Cursor method):    Cursor Objects.     (line  130)
* fflags (select.kevent attribute):      Kevent Objects.     (line   90)
* fieldnames (csv.csvreader attribute):  Reader Objects.     (line   30)
* fields (uuid.UUID attribute):          uuid --- UUID objects according to RFC 4122.
                                                             (line   56)
* field_size_limit() (in module csv):    Module Contents<3>. (line   95)
* file (pyclbr.Class attribute):         Class Objects<2>.   (line   31)
* file (pyclbr.Function attribute):      Function Objects.   (line   18)
* file object:                           Glossary.           (line  331)
* file object; io module:                Overview.           (line    6)
* file object; open() built-in function: Built-in Functions. (line  877)
* file-like object:                      Glossary.           (line  347)
* file; byte-code:                       py_compile --- Compile Python source files.
                                                             (line    6)
* file; byte-code <1>:                   imp --- Access the import internals.
                                                             (line   15)
* file; copying:                         shutil --- High-level file operations.
                                                             (line    6)
* file; large files:                     Large File Support. (line    6)
* file; mime.types:                      mimetypes --- Map filenames to MIME types.
                                                             (line  115)
* filecmp (module):                      filecmp --- File and Directory Comparisons.
                                                             (line    6)
* fileConfig() (in module logging.config): Configuration functions.
                                                             (line   63)
* FileCookieJar (class in http.cookiejar): http cookiejar --- Cookie handling for HTTP clients.
                                                             (line   56)
* FileEntry (class in tkinter.tix):      File Selectors.     (line   50)
* FileExistsError:                       OS exceptions.      (line   61)
* FileFinder (class in importlib.machinery): importlib machinery -- Importers and path hooks.
                                                             (line  143)
* FileHandler (class in logging):        FileHandler.        (line   10)
* FileHandler (class in urllib.request): urllib request --- Extensible library for opening URLs.
                                                             (line  376)
* FileInput (class in fileinput):        fileinput --- Iterate over lines from multiple input streams.
                                                             (line  133)
* fileinput (module):                    fileinput --- Iterate over lines from multiple input streams.
                                                             (line    6)
* FileIO (class in io):                  Raw File I/O.       (line    6)
* filelineno() (in module fileinput):    fileinput --- Iterate over lines from multiple input streams.
                                                             (line   98)
* FileLoader (class in importlib.abc):   importlib abc -- Abstract base classes related to import.
                                                             (line  374)
* filemode() (in module stat):           stat --- Interpreting stat results.
                                                             (line  123)
* filename (doctest.DocTest attribute):  DocTest Objects.    (line   36)
* filename (http.cookiejar.FileCookieJar attribute): CookieJar and FileCookieJar Objects.
                                                             (line  153)
* filename (OSError attribute):          Concrete exceptions.
                                                             (line  140)
* filename (traceback.TracebackException attribute): TracebackException Objects.
                                                             (line   42)
* filename (tracemalloc.Frame attribute): Frame.             (line   13)
* filename (zipfile.ZipInfo attribute):  ZipInfo Objects.    (line   31)
* filename() (in module fileinput):      fileinput --- Iterate over lines from multiple input streams.
                                                             (line   80)
* filename2 (OSError attribute):         Concrete exceptions.
                                                             (line  140)
* filenames; pathname expansion:         glob --- Unix style pathname pattern expansion.
                                                             (line    6)
* filenames; wildcard expansion:         fnmatch --- Unix filename pattern matching.
                                                             (line    6)
* filename_only (in module tabnanny):    tabnanny --- Detection of ambiguous indentation.
                                                             (line   31)
* filename_pattern (tracemalloc.Filter attribute): Filter.   (line   49)
* fileno() (http.client.HTTPResponse method): HTTPResponse Objects.
                                                             (line   36)
* fileno() (in module fileinput):        fileinput --- Iterate over lines from multiple input streams.
                                                             (line   85)
* fileno() (io.IOBase method):           I/O Base Classes.   (line   63)
* fileno() (multiprocessing.Connection method): Connection Objects<2>.
                                                             (line   31)
* fileno() (ossaudiodev.oss_audio_device method): Audio Device Objects.
                                                             (line   28)
* fileno() (ossaudiodev.oss_mixer_device method): Mixer Device Objects.
                                                             (line   14)
* fileno() (select.devpoll method):      /dev/poll Polling Objects.
                                                             (line   24)
* fileno() (select.epoll method):        Edge and Level Trigger Polling epoll Objects.
                                                             (line   60)
* fileno() (select.kqueue method):       Kqueue Objects.     (line   14)
* fileno() (selectors.DevpollSelector method): Classes<3>.   (line  188)
* fileno() (selectors.EpollSelector method): Classes<3>.     (line  179)
* fileno() (selectors.KqueueSelector method): Classes<3>.    (line  199)
* fileno() (socket.socket method):       Socket Objects.     (line  101)
* fileno() (socketserver.BaseServer method): Server Objects. (line   14)
* fileno() (telnetlib.Telnet method):    Telnet Objects.     (line   94)
* FileNotFoundError:                     OS exceptions.      (line   66)
* fileobj (selectors.SelectorKey attribute): Classes<3>.     (line   36)
* FileSelectBox (class in tkinter.tix):  File Selectors.     (line   42)
* FileType (class in argparse):          FileType objects.   (line    6)
* FileWrapper (class in wsgiref.util):   wsgiref util -- WSGI environment utilities.
                                                             (line  114)
* FILE_ATTRIBUTE_ARCHIVE (in module stat): stat --- Interpreting stat results.
                                                             (line  396)
* FILE_ATTRIBUTE_COMPRESSED (in module stat): stat --- Interpreting stat results.
                                                             (line  396)
* FILE_ATTRIBUTE_DEVICE (in module stat): stat --- Interpreting stat results.
                                                             (line  396)
* FILE_ATTRIBUTE_DIRECTORY (in module stat): stat --- Interpreting stat results.
                                                             (line  396)
* FILE_ATTRIBUTE_ENCRYPTED (in module stat): stat --- Interpreting stat results.
                                                             (line  396)
* FILE_ATTRIBUTE_HIDDEN (in module stat): stat --- Interpreting stat results.
                                                             (line  396)
* FILE_ATTRIBUTE_INTEGRITY_STREAM (in module stat): stat --- Interpreting stat results.
                                                             (line  396)
* FILE_ATTRIBUTE_NORMAL (in module stat): stat --- Interpreting stat results.
                                                             (line  396)
* FILE_ATTRIBUTE_NOT_CONTENT_INDEXED (in module stat): stat --- Interpreting stat results.
                                                             (line  396)
* FILE_ATTRIBUTE_NO_SCRUB_DATA (in module stat): stat --- Interpreting stat results.
                                                             (line  396)
* FILE_ATTRIBUTE_OFFLINE (in module stat): stat --- Interpreting stat results.
                                                             (line  396)
* FILE_ATTRIBUTE_READONLY (in module stat): stat --- Interpreting stat results.
                                                             (line  396)
* FILE_ATTRIBUTE_REPARSE_POINT (in module stat): stat --- Interpreting stat results.
                                                             (line  396)
* FILE_ATTRIBUTE_SPARSE_FILE (in module stat): stat --- Interpreting stat results.
                                                             (line  396)
* FILE_ATTRIBUTE_SYSTEM (in module stat): stat --- Interpreting stat results.
                                                             (line  396)
* FILE_ATTRIBUTE_TEMPORARY (in module stat): stat --- Interpreting stat results.
                                                             (line  396)
* FILE_ATTRIBUTE_VIRTUAL (in module stat): stat --- Interpreting stat results.
                                                             (line  396)
* file_created() (built-in function):    The Postinstallation script.
                                                             (line   23)
* file_dispatcher (class in asyncore):   asyncore --- Asynchronous socket handler.
                                                             (line  254)
* file_open() (urllib.request.FileHandler method): FileHandler Objects.
                                                             (line    6)
* file_size (zipfile.ZipInfo attribute): ZipInfo Objects.    (line  123)
* file_wrapper (class in asyncore):      asyncore --- Asynchronous socket handler.
                                                             (line  263)
* fill() (in module textwrap):           textwrap --- Text wrapping and filling.
                                                             (line   29)
* fill() (textwrap.TextWrapper method):  textwrap --- Text wrapping and filling.
                                                             (line  282)
* fillcolor() (in module turtle):        Color control.      (line   58)
* filling() (in module turtle):          Filling.            (line    6)
* filter (2to3 fixer):                   Fixers.             (line  108)
* Filter (class in logging):             Filter Objects.     (line   13)
* Filter (class in tracemalloc):         Filter.             (line    6)
* filter (select.kevent attribute):      Kevent Objects.     (line   15)
* filter() (built-in function):          Built-in Functions. (line  487)
* filter() (in module curses):           Functions<2>.       (line  119)
* filter() (in module fnmatch):          fnmatch --- Unix filename pattern matching.
                                                             (line   65)
* filter() (logging.Filter method):      Filter Objects.     (line   20)
* filter() (logging.Handler method):     Handler Objects.    (line   56)
* filter() (logging.Logger method):      Logger Objects.     (line  232)
* filterfalse() (in module itertools):   Itertool functions. (line  271)
* filterwarnings() (in module warnings): Available Functions.
                                                             (line   77)
* FILTER_DIR (in module unittest.mock):  FILTER_DIR.         (line    6)
* filter_traces() (tracemalloc.Snapshot method): Snapshot.   (line   35)
* finalization, of objects:              Finalization and De-allocation.
                                                             (line    6)
* finalize (class in weakref):           weakref --- Weak references.
                                                             (line  237)
* finalize_options() (distutils.cmd.Command method): Creating a new Distutils command.
                                                             (line   30)
* find() (bytearray method):             Bytes and Bytearray Operations.
                                                             (line   77)
* find() (bytes method):                 Bytes and Bytearray Operations.
                                                             (line   77)
* find() (doctest.DocTestFinder method): DocTestFinder objects.
                                                             (line   32)
* find() (in module gettext):            Class-based API.    (line   14)
* find() (mmap.mmap method):             mmap --- Memory-mapped file support.
                                                             (line  165)
* find() (str method):                   String Methods<2>.  (line   98)
* find() (xml.etree.ElementTree.Element method): Element Objects.
                                                             (line  101)
* find() (xml.etree.ElementTree.ElementTree method): ElementTree Objects.
                                                             (line   21)
* findall() (in module re):              Module Contents.    (line  209)
* findall() (re.regex method):           Regular Expression Objects.
                                                             (line   79)
* findall() (xml.etree.ElementTree.Element method): Element Objects.
                                                             (line  108)
* findall() (xml.etree.ElementTree.ElementTree method): ElementTree Objects.
                                                             (line   26)
* findCaller() (logging.Logger method):  Logger Objects.     (line  249)
* finder:                                Finders and loaders.
                                                             (line    6)
* finder <1>:                            Glossary.           (line  351)
* Finder (class in importlib.abc):       importlib abc -- Abstract base classes related to import.
                                                             (line   24)
* finder; find_spec:                     The meta path.      (line    6)
* findfactor() (in module audioop):      audioop --- Manipulate raw audio data.
                                                             (line   77)
* findfile() (in module test.support):   test support --- Utilities for the Python test suite.
                                                             (line   67)
* findfit() (in module audioop):         audioop --- Manipulate raw audio data.
                                                             (line   86)
* finditer() (in module re):             Module Contents.    (line  219)
* finditer() (re.regex method):          Regular Expression Objects.
                                                             (line   85)
* findlabels() (in module dis):          Analysis functions. (line  117)
* findlinestarts() (in module dis):      Analysis functions. (line  110)
* findmatch() (in module mailcap):       mailcap --- Mailcap file handling.
                                                             (line   24)
* findmax() (in module audioop):         audioop --- Manipulate raw audio data.
                                                             (line   97)
* findtext() (xml.etree.ElementTree.Element method): Element Objects.
                                                             (line  115)
* findtext() (xml.etree.ElementTree.ElementTree method): ElementTree Objects.
                                                             (line   31)
* find_class() (pickle protocol):        Restricting Globals.
                                                             (line    6)
* find_class() (pickle.Unpickler method): Module Interface.  (line  252)
* find_library() (in module ctypes.util): Utility functions. (line   80)
* find_library_file() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  204)
* find_loader() (importlib.abc.PathEntryFinder method): importlib abc -- Abstract base classes related to import.
                                                             (line  111)
* find_loader() (importlib.machinery.FileFinder method): importlib machinery -- Importers and path hooks.
                                                             (line  180)
* find_loader() (in module importlib):   Functions<8>.       (line   40)
* find_loader() (in module pkgutil):     pkgutil --- Package extension utility.
                                                             (line   71)
* find_longest_match() (difflib.SequenceMatcher method): SequenceMatcher Objects.
                                                             (line   63)
* find_module() (imp.NullImporter method): imp --- Access the import internals.
                                                             (line  352)
* find_module() (importlib.abc.Finder method): importlib abc -- Abstract base classes related to import.
                                                             (line   31)
* find_module() (importlib.abc.MetaPathFinder method): importlib abc -- Abstract base classes related to import.
                                                             (line   61)
* find_module() (importlib.abc.PathEntryFinder method): importlib abc -- Abstract base classes related to import.
                                                             (line  135)
* find_module() (importlib.machinery.PathFinder class method): importlib machinery -- Importers and path hooks.
                                                             (line  126)
* find_module() (in module imp):         imp --- Access the import internals.
                                                             (line   37)
* find_module() (zipimport.zipimporter method): zipimporter Objects.
                                                             (line   19)
* find_msvcrt() (in module ctypes.util): Utility functions.  (line   89)
* find_spec() (importlib.abc.MetaPathFinder method): importlib abc -- Abstract base classes related to import.
                                                             (line   48)
* find_spec() (importlib.abc.PathEntryFinder method): importlib abc -- Abstract base classes related to import.
                                                             (line  100)
* find_spec() (importlib.machinery.FileFinder method): importlib machinery -- Importers and path hooks.
                                                             (line  173)
* find_spec() (importlib.machinery.PathFinder class method): importlib machinery -- Importers and path hooks.
                                                             (line  104)
* find_spec() (in module importlib.util): importlib util -- Utility code for importers.
                                                             (line   89)
* find_unused_port() (in module test.support): test support --- Utilities for the Python test suite.
                                                             (line  323)
* find_user_password() (urllib.request.HTTPPasswordMgr method): HTTPPasswordMgr Objects.
                                                             (line   16)
* find_user_password() (urllib.request.HTTPPasswordMgr method) <1>: HTTPPasswordMgrWithPriorAuth Objects.
                                                             (line   19)
* finish() (socketserver.BaseRequestHandler method): Request Handler Objects.
                                                             (line   35)
* finish_request() (socketserver.BaseServer method): Server Objects.
                                                             (line  123)
* firstChild (xml.dom.Node attribute):   Node Objects.       (line   54)
* firstkey() (dbm.gnu.gdbm method):      dbm gnu --- GNU's reinterpretation of dbm.
                                                             (line   81)
* firstweekday() (in module calendar):   calendar --- General calendar-related functions.
                                                             (line  198)
* fix_missing_locations() (in module ast): ast Helpers.      (line   35)
* fix_sentence_endings (textwrap.TextWrapper attribute): textwrap --- Text wrapping and filling.
                                                             (line  208)
* flags (in module sys):                 sys --- System-specific parameters and functions.
                                                             (line  271)
* flags (re.regex attribute):            Regular Expression Objects.
                                                             (line  101)
* flags (select.kevent attribute):       Kevent Objects.     (line   52)
* flag_bits (zipfile.ZipInfo attribute): ZipInfo Objects.    (line   95)
* flash() (in module curses):            Functions<2>.       (line  130)
* flatten() (email.generator.BytesGenerator method): email generator Generating MIME documents.
                                                             (line  152)
* flatten() (email.generator.Generator method): email generator Generating MIME documents.
                                                             (line   68)
* flattening; objects:                   pickle --- Python object serialization.
                                                             (line    6)
* float (built-in class):                Built-in Functions. (line  504)
* floating point literal:                Numeric literals.   (line    6)
* floating point; literals:              Numeric Types --- int float complex.
                                                             (line   19)
* floating point; number:                The standard type hierarchy.
                                                             (line   89)
* FloatingPointError:                    Concrete exceptions.
                                                             (line   26)
* FloatingPointError <1>:                fpectl --- Floating point exception control.
                                                             (line   52)
* FloatOperation (class in decimal):     Signals.            (line  100)
* float_info (in module sys):            sys --- System-specific parameters and functions.
                                                             (line  325)
* float_repr_style (in module sys):      sys --- System-specific parameters and functions.
                                                             (line  404)
* flock() (in module fcntl):             fcntl --- The fcntl and ioctl system calls.
                                                             (line   94)
* floor division:                        Glossary.           (line  362)
* floor() (in module math):              Numeric Types --- int float complex.
                                                             (line  103)
* floor() (in module math) <1>:          Number-theoretic and representation functions.
                                                             (line   27)
* floordiv() (in module operator):       operator --- Standard operators as functions.
                                                             (line   86)
* flush() (bz2.BZ2Compressor method):    Incremental de compression.
                                                             (line   25)
* flush() (formatter.writer method):     The Writer Interface.
                                                             (line   13)
* flush() (io.BufferedWriter method):    Buffered Streams.   (line  116)
* flush() (io.IOBase method):            I/O Base Classes.   (line   69)
* flush() (logging.Handler method):      Handler Objects.    (line   64)
* flush() (logging.handlers.BufferingHandler method): MemoryHandler.
                                                             (line   29)
* flush() (logging.handlers.MemoryHandler method): MemoryHandler.
                                                             (line   53)
* flush() (logging.StreamHandler method): StreamHandler.     (line   25)
* flush() (lzma.LZMACompressor method):  Compressing and decompressing data in memory.
                                                             (line   91)
* flush() (mailbox.Mailbox method):      Mailbox objects.    (line  242)
* flush() (mailbox.Maildir method):      Maildir.            (line   98)
* flush() (mailbox.MH method):           MH.                 (line   99)
* flush() (mmap.mmap method):            mmap --- Memory-mapped file support.
                                                             (line  175)
* flush() (zlib.Compress method):        zlib --- Compression compatible with gzip.
                                                             (line  167)
* flush() (zlib.Decompress method):      zlib --- Compression compatible with gzip.
                                                             (line  232)
* flushinp() (in module curses):         Functions<2>.       (line  137)
* FlushKey() (in module winreg):         Functions<9>.       (line  211)
* flush_headers() (http.server.BaseHTTPRequestHandler method): http server --- HTTP servers.
                                                             (line  253)
* flush_softspace() (formatter.formatter method): The Formatter Interface.
                                                             (line   83)
* fma() (decimal.Context method):        Context objects.    (line  288)
* fma() (decimal.Decimal method):        Decimal objects.    (line  266)
* fmod() (in module math):               Number-theoretic and representation functions.
                                                             (line   33)
* FMT_BINARY (in module plistlib):       plistlib --- Generate and parse Mac OS X plist files.
                                                             (line  199)
* FMT_XML (in module plistlib):          plistlib --- Generate and parse Mac OS X plist files.
                                                             (line  193)
* fnmatch (module):                      fnmatch --- Unix filename pattern matching.
                                                             (line    6)
* fnmatch() (in module fnmatch):         fnmatch --- Unix filename pattern matching.
                                                             (line   40)
* fnmatchcase() (in module fnmatch):     fnmatch --- Unix filename pattern matching.
                                                             (line   60)
* focus() (tkinter.ttk.Treeview method): ttk Treeview.       (line   99)
* fold() (email.headerregistry.BaseHeader method): email headerregistry Custom Header Objects.
                                                             (line   73)
* fold() (email.policy.Compat32 method): email policy Policy Objects.
                                                             (line  350)
* fold() (email.policy.EmailPolicy method): email policy Policy Objects.
                                                             (line  479)
* fold() (email.policy.Policy method):   email policy Policy Objects.
                                                             (line  289)
* fold_binary() (email.policy.Compat32 method): email policy Policy Objects.
                                                             (line  358)
* fold_binary() (email.policy.EmailPolicy method): email policy Policy Objects.
                                                             (line  499)
* fold_binary() (email.policy.Policy method): email policy Policy Objects.
                                                             (line  304)
* forget() (in module test.support):     test support --- Utilities for the Python test suite.
                                                             (line   48)
* forget() (tkinter.ttk.Notebook method): ttk Notebook.      (line   18)
* fork() (in module os):                 Process Management. (line  217)
* fork() (in module pty):                pty --- Pseudo-terminal utilities.
                                                             (line   16)
* ForkingMixIn (class in socketserver):  Server Creation Notes.
                                                             (line   28)
* ForkingTCPServer (class in socketserver): Server Creation Notes.
                                                             (line   42)
* ForkingUDPServer (class in socketserver): Server Creation Notes.
                                                             (line   42)
* forkpty() (in module os):              Process Management. (line  231)
* Form (class in tkinter.tix):           Form Geometry Manager.
                                                             (line    9)
* format (memoryview attribute):         Memory Views.       (line  384)
* format (struct.Struct attribute):      Classes<2>.         (line   49)
* format() (built-in function):          Built-in Functions. (line  556)
* format() (built-in function); __str__() (object method): Basic customization.
                                                             (line  122)
* format() (in module locale):           locale --- Internationalization services.
                                                             (line  371)
* format() (logging.Formatter method):   Formatter Objects.  (line   43)
* format() (logging.Handler method):     Handler Objects.    (line   97)
* format() (pprint.PrettyPrinter method): PrettyPrinter Objects.
                                                             (line   40)
* format() (str method):                 String Methods<2>.  (line  112)
* format() (string.Formatter method):    Custom String Formatting.
                                                             (line   17)
* format() (traceback.TracebackException method): TracebackException Objects.
                                                             (line   73)
* format() (tracemalloc.Traceback method): Traceback.        (line   22)
* formataddr() (in module email.utils):  email utils Miscellaneous utilities.
                                                             (line   29)
* formatargspec() (in module inspect):   Classes and functions<2>.
                                                             (line   69)
* formatargvalues() (in module inspect): Classes and functions<2>.
                                                             (line   98)
* formatdate() (in module email.utils):  email utils Miscellaneous utilities.
                                                             (line  100)
* FormatError:                           Exceptions<10>.     (line   32)
* FormatError() (in module ctypes):      Utility functions.  (line   99)
* formatException() (logging.Formatter method): Formatter Objects.
                                                             (line  102)
* formatmonth() (calendar.HTMLCalendar method): calendar --- General calendar-related functions.
                                                             (line  144)
* formatmonth() (calendar.TextCalendar method): calendar --- General calendar-related functions.
                                                             (line  109)
* formatStack() (logging.Formatter method): Formatter Objects.
                                                             (line  110)
* formatted string literal:              String literal concatenation.
                                                             (line   24)
* Formatter (class in logging):          Formatter Objects.  (line   26)
* Formatter (class in string):           Custom String Formatting.
                                                             (line   13)
* formatter (module):                    formatter --- Generic output formatting.
                                                             (line    6)
* formatTime() (logging.Formatter method): Formatter Objects.
                                                             (line   67)
* formatting, bytearray (%):             printf-style Bytes Formatting.
                                                             (line    6)
* formatting, bytes (%):                 printf-style Bytes Formatting.
                                                             (line    6)
* formatting, string (%):                printf-style String Formatting.
                                                             (line    6)
* formatwarning() (in module warnings):  Available Functions.
                                                             (line   68)
* formatyear() (calendar.HTMLCalendar method): calendar --- General calendar-related functions.
                                                             (line  150)
* formatyear() (calendar.TextCalendar method): calendar --- General calendar-related functions.
                                                             (line  123)
* formatyearpage() (calendar.HTMLCalendar method): calendar --- General calendar-related functions.
                                                             (line  155)
* format_datetime() (in module email.utils): email utils Miscellaneous utilities.
                                                             (line  121)
* format_exc() (in module traceback):    traceback --- Print or retrieve a stack traceback.
                                                             (line  125)
* format_exception() (in module traceback): traceback --- Print or retrieve a stack traceback.
                                                             (line  115)
* format_exception_only() (in module traceback): traceback --- Print or retrieve a stack traceback.
                                                             (line  104)
* format_exception_only() (traceback.TracebackException method): TracebackException Objects.
                                                             (line   88)
* format_field() (string.Formatter method): Custom String Formatting.
                                                             (line  102)
* format_help() (argparse.ArgumentParser method): Printing help.
                                                             (line   30)
* format_list() (in module traceback):   traceback --- Print or retrieve a stack traceback.
                                                             (line   95)
* format_map() (str method):             String Methods<2>.  (line  128)
* format_stack() (in module traceback):  traceback --- Print or retrieve a stack traceback.
                                                             (line  134)
* format_stack_entry() (bdb.Bdb method): bdb --- Debugger framework.
                                                             (line  344)
* format_string() (in module locale):    locale --- Internationalization services.
                                                             (line  387)
* format_tb() (in module traceback):     traceback --- Print or retrieve a stack traceback.
                                                             (line  130)
* format_usage() (argparse.ArgumentParser method): Printing help.
                                                             (line   25)
* FORMAT_VALUE (opcode):                 Python Bytecode Instructions.
                                                             (line  674)
* Fortran contiguous:                    shape strides suboffsets.
                                                             (line   25)
* Fortran contiguous <1>:                Glossary.           (line  200)
* forward() (in module turtle):          Turtle motion.      (line    6)
* FOR_ITER (opcode):                     Python Bytecode Instructions.
                                                             (line  525)
* found_terminator() (asynchat.async_chat method): asynchat --- Asynchronous socket command/response handler.
                                                             (line   87)
* fpathconf() (in module os):            File Descriptor Operations.
                                                             (line   96)
* fpectl (module):                       fpectl --- Floating point exception control.
                                                             (line    6)
* fqdn (smtpd.SMTPChannel attribute):    SMTPChannel Objects.
                                                             (line   89)
* Fraction (class in fractions):         fractions --- Rational numbers.
                                                             (line   16)
* fractions (module):                    fractions --- Rational numbers.
                                                             (line    6)
* Frame (class in tracemalloc):          Frame.              (line    6)
* frame (tkinter.scrolledtext.ScrolledText attribute): tkinter scrolledtext --- Scrolled Text Widget.
                                                             (line   20)
* FrameSummary (class in traceback):     FrameSummary Objects.
                                                             (line   11)
* FrameType (in module types):           Standard Interpreter Types.
                                                             (line   89)
* free():                                Overview<2>.        (line   33)
* free; variable:                        Binding of names.   (line   27)
* freeze utility:                        Importing Modules<2>.
                                                             (line  260)
* freeze_support() (in module multiprocessing): Miscellaneous<3>.
                                                             (line   35)
* frexp() (in module math):              Number-theoretic and representation functions.
                                                             (line   49)
* frombuf() (tarfile.TarInfo class method): TarInfo Objects. (line   19)
* frombytes() (array.array method):      array --- Efficient arrays of numeric values.
                                                             (line  157)
* fromfd() (in module socket):           Creating sockets.   (line   78)
* fromfd() (select.epoll method):        Edge and Level Trigger Polling epoll Objects.
                                                             (line   64)
* fromfd() (select.kqueue method):       Kqueue Objects.     (line   18)
* fromfile() (array.array method):       array --- Efficient arrays of numeric values.
                                                             (line  166)
* fromhex() (bytearray class method):    Bytearray Objects.  (line   31)
* fromhex() (bytes class method):        Bytes.              (line   57)
* fromhex() (float class method):        Additional Methods on Float.
                                                             (line   39)
* fromkeys() (collections.Counter method): Counter objects.  (line   99)
* fromkeys() (dict class method):        Mapping Types --- dict.
                                                             (line  134)
* fromlist() (array.array method):       array --- Efficient arrays of numeric values.
                                                             (line  175)
* fromordinal() (datetime.date class method): date Objects.  (line   53)
* fromordinal() (datetime.datetime class method): datetime Objects.
                                                             (line  128)
* fromshare() (in module socket):        Creating sockets.   (line   95)
* fromstring() (array.array method):     array --- Efficient arrays of numeric values.
                                                             (line  181)
* fromstring() (in module xml.etree.ElementTree): Functions<5>.
                                                             (line   30)
* fromstringlist() (in module xml.etree.ElementTree): Functions<5>.
                                                             (line   36)
* fromtarfile() (tarfile.TarInfo class method): TarInfo Objects.
                                                             (line   26)
* fromtimestamp() (datetime.date class method): date Objects.
                                                             (line   36)
* fromtimestamp() (datetime.datetime class method): datetime Objects.
                                                             (line   70)
* fromunicode() (array.array method):    array --- Efficient arrays of numeric values.
                                                             (line  185)
* fromutc() (datetime.timezone method):  timezone Objects.   (line   51)
* fromutc() (datetime.tzinfo method):    tzinfo Objects.     (line  153)
* from_address() (ctypes._CData method): Data types.         (line   36)
* from_buffer() (ctypes._CData method):  Data types.         (line   19)
* from_buffer_copy() (ctypes._CData method): Data types.     (line   28)
* from_bytes() (int class method):       Additional Methods on Integer Types.
                                                             (line   67)
* from_callable() (inspect.Signature class method): Introspecting callables with the Signature object.
                                                             (line  117)
* from_decimal() (fractions.Fraction method): fractions --- Rational numbers.
                                                             (line  109)
* from_exception() (traceback.TracebackException class method): TracebackException Objects.
                                                             (line   63)
* from_file() (zipfile.ZipInfo class method): ZipInfo Objects.
                                                             (line   14)
* from_float() (decimal.Decimal method): Decimal objects.    (line  239)
* from_float() (fractions.Fraction method): fractions --- Rational numbers.
                                                             (line   98)
* from_iterable() (itertools.chain class method): Itertool functions.
                                                             (line   87)
* from_list() (traceback.StackSummary class method): StackSummary Objects.
                                                             (line   29)
* from_param() (ctypes._CData method):   Data types.         (line   41)
* from_traceback() (dis.Bytecode class method): Bytecode analysis.
                                                             (line   33)
* FrozenImporter (class in importlib.machinery): importlib machinery -- Importers and path hooks.
                                                             (line   76)
* frozenset (built-in class):            Set Types --- set frozenset.
                                                             (line   33)
* fsdecode() (in module os):             Process Parameters. (line   85)
* fsencode() (in module os):             Process Parameters. (line   75)
* fstat() (in module os):                File Descriptor Operations.
                                                             (line  118)
* fstatvfs() (in module os):             File Descriptor Operations.
                                                             (line  130)
* fsum() (in module math):               Number-theoretic and representation functions.
                                                             (line   57)
* fsync() (in module os):                File Descriptor Operations.
                                                             (line  138)
* FTP:                                   urllib request Restrictions.
                                                             (line   37)
* FTP (class in ftplib):                 ftplib --- FTP protocol client.
                                                             (line   38)
* FTP; ftplib (standard module):         ftplib --- FTP protocol client.
                                                             (line    6)
* FTP; protocol:                         urllib request Restrictions.
                                                             (line    6)
* FTP; protocol <1>:                     ftplib --- FTP protocol client.
                                                             (line    6)
* FTPHandler (class in urllib.request):  urllib request --- Extensible library for opening URLs.
                                                             (line  386)
* ftplib (module):                       ftplib --- FTP protocol client.
                                                             (line    6)
* ftp_open() (urllib.request.FTPHandler method): FTPHandler Objects.
                                                             (line    6)
* FTP_TLS (class in ftplib):             ftplib --- FTP protocol client.
                                                             (line   71)
* ftruncate() (in module os):            File Descriptor Operations.
                                                             (line  151)
* Full:                                  queue --- A synchronized queue class.
                                                             (line   62)
* full() (asyncio.Queue method):         Queue.              (line   29)
* full() (multiprocessing.Queue method): Pipes and Queues.   (line  114)
* full() (queue.Queue method):           Queue Objects.      (line   22)
* fullmatch() (in module re):            Module Contents.    (line  141)
* fullmatch() (re.regex method):         Regular Expression Objects.
                                                             (line   56)
* full_url (urllib.request.Request attribute): Request Objects.
                                                             (line   11)
* func (functools.partial attribute):    partial Objects.    (line    9)
* funcattrs (2to3 fixer):                Fixers.             (line  112)
* function:                              Glossary.           (line  370)
* Function (class in symtable):          Examining Symbol Tables.
                                                             (line   66)
* function annotation:                   Glossary.           (line  378)
* function; annotations:                 Function Annotations.
                                                             (line    6)
* function; annotations <1>:             Function definitions.
                                                             (line   83)
* function; argument:                    The standard type hierarchy.
                                                             (line  262)
* function; call:                        The standard type hierarchy.
                                                             (line  262)
* function; call <1>:                    Calls.              (line  118)
* function; call <2>:                    Calls.              (line  127)
* function; definition:                  The return statement.
                                                             (line    6)
* function; definition <1>:              Function definitions.
                                                             (line    6)
* function; generator:                   The yield statement.
                                                             (line    6)
* function; name:                        Function definitions.
                                                             (line    6)
* function; name <1>:                    Function definitions.
                                                             (line    6)
* FunctionTestCase (class in unittest):  Test cases.         (line  773)
* FunctionType (in module types):        Standard Interpreter Types.
                                                             (line   16)
* functools (module):                    functools --- Higher-order functions and operations on callable objects.
                                                             (line    6)
* funny_files (filecmp.dircmp attribute): The dircmp class.  (line   95)
* future (2to3 fixer):                   Fixers.             (line  118)
* Future (class in asyncio):             Future.             (line    6)
* Future (class in concurrent.futures):  Future Objects.     (line   10)
* future; statement:                     Future statements.  (line    6)
* FutureWarning:                         Warnings.           (line   34)
* fwalk() (in module os):                Files and Directories.
                                                             (line 1345)
* f_back (frame attribute):              The standard type hierarchy.
                                                             (line  657)
* f_builtins (frame attribute):          The standard type hierarchy.
                                                             (line  657)
* f_code (frame attribute):              The standard type hierarchy.
                                                             (line  657)
* f_contiguous (memoryview attribute):   Memory Views.       (line  443)
* f_globals (frame attribute):           The standard type hierarchy.
                                                             (line  657)
* f_lasti (frame attribute):             The standard type hierarchy.
                                                             (line  657)
* f_lineno (frame attribute):            The standard type hierarchy.
                                                             (line  666)
* f_locals (frame attribute):            The standard type hierarchy.
                                                             (line  657)
* F_LOCK (in module os):                 File Descriptor Operations.
                                                             (line  190)
* F_OK (in module os):                   Files and Directories.
                                                             (line   98)
* F_TEST (in module os):                 File Descriptor Operations.
                                                             (line  190)
* F_TLOCK (in module os):                File Descriptor Operations.
                                                             (line  190)
* f_trace (frame attribute):             The standard type hierarchy.
                                                             (line  666)
* F_ULOCK (in module os):                File Descriptor Operations.
                                                             (line  190)
* G.722:                                 aifc --- Read and write AIFF and AIFC files.
                                                             (line  164)
* gaierror:                              Exceptions<7>.      (line   27)
* gamma() (in module math):              Special functions.  (line   29)
* gammavariate() (in module random):     random --- Generate pseudo-random numbers.
                                                             (line  200)
* garbage (in module gc):                gc --- Garbage Collector interface.
                                                             (line  169)
* garbage collection:                    Objects values and types.
                                                             (line   37)
* garbage collection <1>:                Glossary.           (line  404)
* gather() (curses.textpad.Textbox method): Textbox objects. (line  108)
* gather() (in module asyncio):          Task functions.     (line   50)
* gauss() (in module random):            random --- Generate pseudo-random numbers.
                                                             (line  211)
* gc (module):                           gc --- Garbage Collector interface.
                                                             (line    6)
* gcd() (in module fractions):           fractions --- Rational numbers.
                                                             (line  167)
* gcd() (in module math):                Number-theoretic and representation functions.
                                                             (line   77)
* ge() (in module operator):             operator --- Standard operators as functions.
                                                             (line   22)
* generate_help() (distutils.fancy_getopt.FancyGetopt method): distutils fancy_getopt --- Wrapper around the standard getopt module.
                                                             (line   68)
* generator:                             Glossary.           (line  412)
* generator <1>:                         Glossary.           (line  412)
* Generator (class in collections.abc):  Collections Abstract Base Classes.
                                                             (line  120)
* Generator (class in email.generator):  email generator Generating MIME documents.
                                                             (line   34)
* Generator (class in typing):           Classes functions and decorators.
                                                             (line  276)
* generator expression:                  Glossary.           (line  434)
* generator expression <1>:              Glossary.           (line  434)
* generator iterator:                    Glossary.           (line  422)
* generator; expression:                 Generator expressions.
                                                             (line    6)
* generator; function:                   The standard type hierarchy.
                                                             (line  414)
* generator; function <1>:               Yield expressions.  (line    6)
* generator; function <2>:               The yield statement.
                                                             (line    6)
* generator; iterator:                   The standard type hierarchy.
                                                             (line  414)
* generator; iterator <1>:               The yield statement.
                                                             (line    6)
* GeneratorExit:                         Concrete exceptions.
                                                             (line   33)
* GeneratorType (in module types):       Standard Interpreter Types.
                                                             (line   22)
* Generic (class in typing):             Classes functions and decorators.
                                                             (line  132)
* generic function:                      Glossary.           (line  443)
* generic; special; attribute:           The standard type hierarchy.
                                                             (line   13)
* generic_visit() (ast.NodeVisitor method): ast Helpers.     (line   89)
* genops() (in module pickletools):      Programmatic Interface<2>.
                                                             (line   23)
* gen_lib_options() (in module distutils.ccompiler): distutils ccompiler --- CCompiler base class.
                                                             (line   14)
* gen_preprocess_options() (in module distutils.ccompiler): distutils ccompiler --- CCompiler base class.
                                                             (line   24)
* gen_uuid() (in module msilib):         msilib --- Read and write Microsoft Installer files.
                                                             (line  105)
* get() (asyncio.Queue method):          Queue.              (line   37)
* get() (configparser.ConfigParser method): ConfigParser Objects.
                                                             (line  173)
* get() (dict method):                   Mapping Types --- dict.
                                                             (line  142)
* get() (email.message.Message method):  email message Representing an email message.
                                                             (line  318)
* get() (in module webbrowser):          webbrowser --- Convenient Web-browser controller.
                                                             (line   74)
* get() (mailbox.Mailbox method):        Mailbox objects.    (line  140)
* get() (multiprocessing.pool.AsyncResult method): Process Pools.
                                                             (line  178)
* get() (multiprocessing.Queue method):  Pipes and Queues.   (line  136)
* get() (multiprocessing.SimpleQueue method): Pipes and Queues.
                                                             (line  206)
* get() (ossaudiodev.oss_mixer_device method): Mixer Device Objects.
                                                             (line   60)
* get() (queue.Queue method):            Queue Objects.      (line   44)
* get() (tkinter.ttk.Combobox method):   ttk Combobox.       (line   15)
* get() (types.MappingProxyType method): Standard Interpreter Types.
                                                             (line  145)
* get() (xml.etree.ElementTree.Element method): Element Objects.
                                                             (line   64)
* getacl() (imaplib.IMAP4 method):       IMAP4 Objects.      (line  106)
* getaddresses() (in module email.utils): email utils Miscellaneous utilities.
                                                             (line   43)
* getaddrinfo() (asyncio.BaseEventLoop method): Resolve host name.
                                                             (line    6)
* getaddrinfo() (in module socket):      Other functions<2>. (line    9)
* getallocatedblocks() (in module sys):  sys --- System-specific parameters and functions.
                                                             (line  416)
* getannotation() (imaplib.IMAP4 method): IMAP4 Objects.     (line  111)
* getargspec() (in module inspect):      Classes and functions<2>.
                                                             (line   17)
* getargvalues() (in module inspect):    Classes and functions<2>.
                                                             (line   57)
* getatime() (in module os.path):        os path --- Common pathname manipulations.
                                                             (line  140)
* getattr() (built-in function):         Built-in Functions. (line  589)
* getAttribute() (xml.dom.Element method): Element Objects<2>.
                                                             (line   31)
* getAttributeNode() (xml.dom.Element method): Element Objects<2>.
                                                             (line   37)
* getAttributeNodeNS() (xml.dom.Element method): Element Objects<2>.
                                                             (line   47)
* getAttributeNS() (xml.dom.Element method): Element Objects<2>.
                                                             (line   41)
* getattr_static() (in module inspect):  Fetching attributes statically.
                                                             (line   16)
* GetBase() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line   31)
* getbegyx() (curses.window method):     Window Objects.     (line  208)
* getbkgd() (curses.window method):      Window Objects.     (line  212)
* getboolean() (configparser.ConfigParser method): ConfigParser Objects.
                                                             (line  207)
* getbuffer() (io.BytesIO method):       Buffered Streams.   (line   21)
* getByteStream() (xml.sax.xmlreader.InputSource method): InputSource Objects.
                                                             (line   48)
* getcallargs() (in module inspect):     Classes and functions<2>.
                                                             (line  118)
* getcanvas() (in module turtle):        Settings and special methods.
                                                             (line   55)
* getcapabilities() (nntplib.NNTP method): Methods<3>.       (line   34)
* getcaps() (in module mailcap):         mailcap --- Mailcap file handling.
                                                             (line   62)
* getch() (curses.window method):        Window Objects.     (line  217)
* getch() (in module msvcrt):            Console I/O.        (line   10)
* getCharacterStream() (xml.sax.xmlreader.InputSource method): InputSource Objects.
                                                             (line   64)
* getche() (in module msvcrt):           Console I/O.        (line   25)
* getcheckinterval() (in module sys):    sys --- System-specific parameters and functions.
                                                             (line  431)
* getChild() (logging.Logger method):    Logger Objects.     (line   97)
* getchildren() (xml.etree.ElementTree.Element method): Element Objects.
                                                             (line  124)
* getclasstree() (in module inspect):    Classes and functions<2>.
                                                             (line    6)
* getclosurevars() (in module inspect):  Classes and functions<2>.
                                                             (line  148)
* GetColumnInfo() (msilib.View method):  View Objects.       (line   12)
* getColumnNumber() (xml.sax.xmlreader.Locator method): Locator Objects.
                                                             (line    8)
* getcomments() (in module inspect):     Retrieving source code.
                                                             (line   17)
* getcompname() (aifc.aifc method):      aifc --- Read and write AIFF and AIFC files.
                                                             (line   77)
* getcompname() (sunau.AU_read method):  AU_read Objects.    (line   35)
* getcompname() (wave.Wave_read method): Wave_read Objects.  (line   35)
* getcomptype() (aifc.aifc method):      aifc --- Read and write AIFF and AIFC files.
                                                             (line   71)
* getcomptype() (sunau.AU_read method):  AU_read Objects.    (line   30)
* getcomptype() (wave.Wave_read method): Wave_read Objects.  (line   31)
* getContentHandler() (xml.sax.xmlreader.XMLReader method): XMLReader Objects.
                                                             (line   19)
* getcontext() (in module decimal):      Context objects.    (line   14)
* getcoroutinelocals() (in module inspect): Current State of Generators and Coroutines.
                                                             (line   73)
* getcoroutinestate() (in module inspect): Current State of Generators and Coroutines.
                                                             (line   28)
* getctime() (in module os.path):        os path --- Common pathname manipulations.
                                                             (line  160)
* getcwd() (in module os):               Files and Directories.
                                                             (line  244)
* getcwdb() (in module os):              Files and Directories.
                                                             (line  248)
* getcwdu (2to3 fixer):                  Fixers.             (line  122)
* getdecoder() (in module codecs):       codecs --- Codec registry and base classes.
                                                             (line  105)
* getdefaultencoding() (in module sys):  sys --- System-specific parameters and functions.
                                                             (line  439)
* getdefaultlocale() (in module locale): locale --- Internationalization services.
                                                             (line  289)
* getdefaulttimeout() (in module socket): Other functions<2>.
                                                             (line  278)
* getdlopenflags() (in module sys):      sys --- System-specific parameters and functions.
                                                             (line  444)
* getdoc() (in module inspect):          Retrieving source code.
                                                             (line    6)
* getDOMImplementation() (in module xml.dom): Module Contents<4>.
                                                             (line   17)
* getDTDHandler() (xml.sax.xmlreader.XMLReader method): XMLReader Objects.
                                                             (line   28)
* getEffectiveLevel() (logging.Logger method): Logger Objects.
                                                             (line   88)
* getegid() (in module os):              Process Parameters. (line  127)
* getElementsByTagName() (xml.dom.Document method): Document Objects.
                                                             (line   61)
* getElementsByTagName() (xml.dom.Element method): Element Objects<2>.
                                                             (line   14)
* getElementsByTagNameNS() (xml.dom.Document method): Document Objects.
                                                             (line   66)
* getElementsByTagNameNS() (xml.dom.Element method): Element Objects<2>.
                                                             (line   18)
* getencoder() (in module codecs):       codecs --- Codec registry and base classes.
                                                             (line   97)
* getEncoding() (xml.sax.xmlreader.InputSource method): InputSource Objects.
                                                             (line   32)
* getEntityResolver() (xml.sax.xmlreader.XMLReader method): XMLReader Objects.
                                                             (line   37)
* getenv() (in module os):               Process Parameters. (line   95)
* getenvb() (in module os):              Process Parameters. (line  107)
* getErrorHandler() (xml.sax.xmlreader.XMLReader method): XMLReader Objects.
                                                             (line   48)
* geteuid() (in module os):              Process Parameters. (line  135)
* getEvent() (xml.dom.pulldom.DOMEventStream method): DOMEventStream Objects.
                                                             (line    8)
* getEventCategory() (logging.handlers.NTEventLogHandler method): NTEventLogHandler.
                                                             (line   43)
* getEventType() (logging.handlers.NTEventLogHandler method): NTEventLogHandler.
                                                             (line   49)
* getException() (xml.sax.SAXException method): SAXException Objects.
                                                             (line   13)
* getFeature() (xml.sax.xmlreader.XMLReader method): XMLReader Objects.
                                                             (line   67)
* GetFieldCount() (msilib.Record method): Record Objects.    (line    6)
* getfile() (in module inspect):         Retrieving source code.
                                                             (line   24)
* getfilesystemencoding() (in module sys): sys --- System-specific parameters and functions.
                                                             (line  451)
* getfirst() (cgi.FieldStorage method):  Higher Level Interface.
                                                             (line   56)
* getfloat() (configparser.ConfigParser method): ConfigParser Objects.
                                                             (line  200)
* getfmts() (ossaudiodev.oss_audio_device method): Audio Device Objects.
                                                             (line   80)
* getfqdn() (in module socket):          Other functions<2>. (line   57)
* getframeinfo() (in module inspect):    The interpreter stack.
                                                             (line   46)
* getframerate() (aifc.aifc method):     aifc --- Read and write AIFF and AIFC files.
                                                             (line   63)
* getframerate() (sunau.AU_read method): AU_read Objects.    (line   22)
* getframerate() (wave.Wave_read method): Wave_read Objects. (line   23)
* getfullargspec() (in module inspect):  Classes and functions<2>.
                                                             (line   32)
* getgeneratorlocals() (in module inspect): Current State of Generators and Coroutines.
                                                             (line   53)
* getgeneratorstate() (in module inspect): Current State of Generators and Coroutines.
                                                             (line   12)
* getgid() (in module os):               Process Parameters. (line  141)
* getgrall() (in module grp):            grp --- The group database.
                                                             (line   55)
* getgrgid() (in module grp):            grp --- The group database.
                                                             (line   40)
* getgrnam() (in module grp):            grp --- The group database.
                                                             (line   50)
* getgrouplist() (in module os):         Process Parameters. (line  147)
* getgroups() (in module os):            Process Parameters. (line  157)
* getheader() (http.client.HTTPResponse method): HTTPResponse Objects.
                                                             (line   24)
* getheaders() (http.client.HTTPResponse method): HTTPResponse Objects.
                                                             (line   32)
* gethostbyaddr() (in module socket):    Process Parameters. (line  431)
* gethostbyaddr() (in module socket) <1>: Other functions<2>.
                                                             (line   97)
* gethostbyname() (in module socket):    Other functions<2>. (line   67)
* gethostbyname_ex() (in module socket): Other functions<2>. (line   77)
* gethostname() (in module socket):      Process Parameters. (line  431)
* gethostname() (in module socket) <1>:  Other functions<2>. (line   89)
* getincrementaldecoder() (in module codecs): codecs --- Codec registry and base classes.
                                                             (line  121)
* getincrementalencoder() (in module codecs): codecs --- Codec registry and base classes.
                                                             (line  113)
* getinfo() (zipfile.ZipFile method):    ZipFile Objects.    (line   64)
* getinnerframes() (in module inspect):  The interpreter stack.
                                                             (line   63)
* GetInputContext() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line   37)
* getint() (configparser.ConfigParser method): ConfigParser Objects.
                                                             (line  193)
* GetInteger() (msilib.Record method):   Record Objects.     (line   11)
* getitem() (in module operator):        operator --- Standard operators as functions.
                                                             (line  190)
* getiterator() (xml.etree.ElementTree.Element method): Element Objects.
                                                             (line  128)
* getiterator() (xml.etree.ElementTree.ElementTree method): ElementTree Objects.
                                                             (line   36)
* getitimer() (in module signal):        Module contents<2>. (line  228)
* getkey() (curses.window method):       Window Objects.     (line  232)
* GetLastError() (in module ctypes):     Utility functions.  (line  105)
* getLength() (xml.sax.xmlreader.Attributes method): The Attributes Interface.
                                                             (line   11)
* getLevelName() (in module logging):    Module-Level Functions.
                                                             (line  193)
* getline() (in module linecache):       linecache --- Random access to text lines.
                                                             (line   23)
* getLineNumber() (xml.sax.xmlreader.Locator method): Locator Objects.
                                                             (line   12)
* getlist() (cgi.FieldStorage method):   Higher Level Interface.
                                                             (line   67)
* getloadavg() (in module os):           Miscellaneous System Information.
                                                             (line   48)
* getlocale() (in module locale):        locale --- Internationalization services.
                                                             (line  314)
* getLogger() (in module logging):       Module-Level Functions.
                                                             (line    9)
* getLoggerClass() (in module logging):  Module-Level Functions.
                                                             (line   21)
* getlogin() (in module os):             Process Parameters. (line  180)
* getLogRecordFactory() (in module logging): Module-Level Functions.
                                                             (line   32)
* getmark() (aifc.aifc method):          aifc --- Read and write AIFF and AIFC files.
                                                             (line   96)
* getmark() (sunau.AU_read method):      AU_read Objects.    (line   77)
* getmark() (wave.Wave_read method):     Wave_read Objects.  (line   62)
* getmarkers() (aifc.aifc method):       aifc --- Read and write AIFF and AIFC files.
                                                             (line   89)
* getmarkers() (sunau.AU_read method):   AU_read Objects.    (line   73)
* getmarkers() (wave.Wave_read method):  Wave_read Objects.  (line   58)
* getmaxyx() (curses.window method):     Window Objects.     (line  239)
* getmember() (tarfile.TarFile method):  TarFile Objects.    (line   95)
* getmembers() (in module inspect):      Types and members.  (line  246)
* getmembers() (tarfile.TarFile method): TarFile Objects.    (line  103)
* getMessage() (logging.LogRecord method): LogRecord Objects.
                                                             (line   56)
* getMessage() (xml.sax.SAXException method): SAXException Objects.
                                                             (line    9)
* getMessageID() (logging.handlers.NTEventLogHandler method): NTEventLogHandler.
                                                             (line   60)
* getmodule() (in module inspect):       Retrieving source code.
                                                             (line   30)
* getmodulename() (in module inspect):   Types and members.  (line  258)
* getmouse() (in module curses):         Functions<2>.       (line  143)
* getmro() (in module inspect):          Classes and functions<2>.
                                                             (line  110)
* getmtime() (in module os.path):        os path --- Common pathname manipulations.
                                                             (line  150)
* getname() (chunk.Chunk method):        chunk --- Read IFF chunked data.
                                                             (line   65)
* getName() (threading.Thread method):   Thread Objects.     (line  138)
* getNameByQName() (xml.sax.xmlreader.AttributesNS method): The AttributesNS Interface.
                                                             (line   16)
* getnameinfo() (asyncio.BaseEventLoop method): Resolve host name.
                                                             (line   12)
* getnameinfo() (in module socket):      Other functions<2>. (line  108)
* getnames() (tarfile.TarFile method):   TarFile Objects.    (line  109)
* getNames() (xml.sax.xmlreader.Attributes method): The Attributes Interface.
                                                             (line   15)
* getnchannels() (aifc.aifc method):     aifc --- Read and write AIFF and AIFC files.
                                                             (line   55)
* getnchannels() (sunau.AU_read method): AU_read Objects.    (line   14)
* getnchannels() (wave.Wave_read method): Wave_read Objects. (line   15)
* getnframes() (aifc.aifc method):       aifc --- Read and write AIFF and AIFC files.
                                                             (line   67)
* getnframes() (sunau.AU_read method):   AU_read Objects.    (line   26)
* getnframes() (wave.Wave_read method):  Wave_read Objects.  (line   27)
* getnode:                               uuid --- UUID objects according to RFC 4122.
                                                             (line  125)
* getnode() (in module uuid):            uuid --- UUID objects according to RFC 4122.
                                                             (line  115)
* getopt (module):                       getopt --- C-style parser for command line options.
                                                             (line    6)
* getopt() (distutils.fancy_getopt.FancyGetopt method): distutils fancy_getopt --- Wrapper around the standard getopt module.
                                                             (line   49)
* getopt() (in module getopt):           getopt --- C-style parser for command line options.
                                                             (line   25)
* GetoptError:                           getopt --- C-style parser for command line options.
                                                             (line   74)
* getouterframes() (in module inspect):  The interpreter stack.
                                                             (line   52)
* getoutput() (in module subprocess):    Legacy Shell Invocation Functions.
                                                             (line   35)
* getpagesize() (in module resource):    Resource Usage.     (line   87)
* getparams() (aifc.aifc method):        aifc --- Read and write AIFF and AIFC files.
                                                             (line   83)
* getparams() (sunau.AU_read method):    AU_read Objects.    (line   41)
* getparams() (wave.Wave_read method):   Wave_read Objects.  (line   40)
* getparyx() (curses.window method):     Window Objects.     (line  243)
* getpass (module):                      getpass --- Portable password input.
                                                             (line    6)
* getpass() (in module getpass):         getpass --- Portable password input.
                                                             (line    8)
* GetPassWarning:                        getpass --- Portable password input.
                                                             (line   27)
* getpeercert() (ssl.SSLSocket method):  SSL Sockets.        (line  119)
* getpeername() (socket.socket method):  Socket Objects.     (line  118)
* getpen() (in module turtle):           Special Turtle methods.
                                                             (line   40)
* getpgid() (in module os):              Process Parameters. (line  190)
* getpgrp() (in module os):              Process Parameters. (line  198)
* getpid() (in module os):               Process Parameters. (line  204)
* getpos() (html.parser.HTMLParser method): HTMLParser Methods.
                                                             (line   28)
* getppid() (in module os):              Process Parameters. (line  208)
* getpreferredencoding() (in module locale): locale --- Internationalization services.
                                                             (line  325)
* getpriority() (in module os):          Process Parameters. (line  219)
* getprofile() (in module sys):          sys --- System-specific parameters and functions.
                                                             (line  528)
* GetProperty() (msilib.SummaryInformation method): Summary Information Objects.
                                                             (line    6)
* getProperty() (xml.sax.xmlreader.XMLReader method): XMLReader Objects.
                                                             (line   81)
* GetPropertyCount() (msilib.SummaryInformation method): Summary Information Objects.
                                                             (line   17)
* getprotobyname() (in module socket):   Other functions<2>. (line  116)
* getproxies() (in module urllib.request): urllib request --- Extensible library for opening URLs.
                                                             (line  156)
* getPublicId() (xml.sax.xmlreader.InputSource method): InputSource Objects.
                                                             (line   10)
* getPublicId() (xml.sax.xmlreader.Locator method): Locator Objects.
                                                             (line   16)
* getpwall() (in module pwd):            pwd --- The password database.
                                                             (line   63)
* getpwnam() (in module pwd):            pwd --- The password database.
                                                             (line   59)
* getpwuid() (in module pwd):            pwd --- The password database.
                                                             (line   55)
* getQNameByName() (xml.sax.xmlreader.AttributesNS method): The AttributesNS Interface.
                                                             (line   20)
* getQNames() (xml.sax.xmlreader.AttributesNS method): The AttributesNS Interface.
                                                             (line   24)
* getquota() (imaplib.IMAP4 method):     IMAP4 Objects.      (line  116)
* getquotaroot() (imaplib.IMAP4 method): IMAP4 Objects.      (line  121)
* getrandbits() (in module random):      random --- Generate pseudo-random numbers.
                                                             (line   86)
* getreader() (in module codecs):        codecs --- Codec registry and base classes.
                                                             (line  129)
* getrecursionlimit() (in module sys):   sys --- System-specific parameters and functions.
                                                             (line  480)
* getrefcount() (in module sys):         sys --- System-specific parameters and functions.
                                                             (line  474)
* getresgid() (in module os):            Process Parameters. (line  254)
* getresponse() (http.client.HTTPConnection method): HTTPConnection Objects.
                                                             (line   42)
* getresuid() (in module os):            Process Parameters. (line  245)
* getrlimit() (in module resource):      Resource Limits.    (line   24)
* getroot() (xml.etree.ElementTree.ElementTree method): ElementTree Objects.
                                                             (line   41)
* getrusage() (in module resource):      Resource Usage.     (line    8)
* getsample() (in module audioop):       audioop --- Manipulate raw audio data.
                                                             (line  106)
* getsampwidth() (aifc.aifc method):     aifc --- Read and write AIFF and AIFC files.
                                                             (line   59)
* getsampwidth() (sunau.AU_read method): AU_read Objects.    (line   18)
* getsampwidth() (wave.Wave_read method): Wave_read Objects. (line   19)
* getscreen() (in module turtle):        Special Turtle methods.
                                                             (line   51)
* getservbyname() (in module socket):    Other functions<2>. (line  125)
* getservbyport() (in module socket):    Other functions<2>. (line  131)
* GetSetDescriptorType (in module types): Standard Interpreter Types.
                                                             (line   94)
* getshapes() (in module turtle):        Settings and special methods.
                                                             (line   64)
* getsid() (in module os):               Process Parameters. (line  392)
* getsignal() (in module signal):        Module contents<2>. (line  127)
* getsitepackages() (in module site):    Module contents<3>. (line   56)
* getsize() (chunk.Chunk method):        chunk --- Read IFF chunked data.
                                                             (line   70)
* getsize() (in module os.path):         os path --- Common pathname manipulations.
                                                             (line  169)
* getsizeof() (in module sys):           sys --- System-specific parameters and functions.
                                                             (line  487)
* getsockname() (socket.socket method):  Socket Objects.     (line  126)
* getsockopt() (socket.socket method):   Socket Objects.     (line  132)
* getsource() (in module inspect):       Retrieving source code.
                                                             (line   53)
* getsourcefile() (in module inspect):   Retrieving source code.
                                                             (line   34)
* getsourcelines() (in module inspect):  Retrieving source code.
                                                             (line   40)
* getspall() (in module spwd):           spwd --- The shadow password database.
                                                             (line   65)
* getspnam() (in module spwd):           spwd --- The shadow password database.
                                                             (line   57)
* getstate() (codecs.IncrementalDecoder method): IncrementalDecoder Objects.
                                                             (line   44)
* getstate() (codecs.IncrementalEncoder method): IncrementalEncoder Objects.
                                                             (line   42)
* getstate() (in module random):         random --- Generate pseudo-random numbers.
                                                             (line   73)
* getstatusoutput() (in module subprocess): Legacy Shell Invocation Functions.
                                                             (line   11)
* getstr() (curses.window method):       Window Objects.     (line  249)
* GetString() (msilib.Record method):    Record Objects.     (line   16)
* getSubject() (logging.handlers.SMTPHandler method): SMTPHandler.
                                                             (line   39)
* GetSummaryInformation() (msilib.Database method): Database Objects.
                                                             (line   16)
* getswitchinterval() (in module sys):   sys --- System-specific parameters and functions.
                                                             (line  509)
* getSystemId() (xml.sax.xmlreader.InputSource method): InputSource Objects.
                                                             (line   18)
* getSystemId() (xml.sax.xmlreader.Locator method): Locator Objects.
                                                             (line   20)
* getsyx() (in module curses):           Functions<2>.       (line  157)
* gettarinfo() (tarfile.TarFile method): TarFile Objects.    (line  218)
* gettempdir() (in module tempfile):     tempfile --- Generate temporary files and directories.
                                                             (line  202)
* gettempdirb() (in module tempfile):    tempfile --- Generate temporary files and directories.
                                                             (line  230)
* gettempprefix() (in module tempfile):  tempfile --- Generate temporary files and directories.
                                                             (line  236)
* gettempprefixb() (in module tempfile): tempfile --- Generate temporary files and directories.
                                                             (line  241)
* getTestCaseNames() (unittest.TestLoader method): Loading and running tests.
                                                             (line  110)
* gettext (module):                      gettext --- Multilingual internationalization services.
                                                             (line    6)
* gettext() (gettext.GNUTranslations method): The GNUTranslations class.
                                                             (line   34)
* gettext() (gettext.NullTranslations method): The NullTranslations class.
                                                             (line   35)
* gettext() (in module gettext):         GNU gettext API.    (line   38)
* gettimeout() (socket.socket method):   Socket Objects.     (line  144)
* gettrace() (in module sys):            sys --- System-specific parameters and functions.
                                                             (line  532)
* getturtle() (in module turtle):        Special Turtle methods.
                                                             (line   40)
* getType() (xml.sax.xmlreader.Attributes method): The Attributes Interface.
                                                             (line   19)
* getuid() (in module os):               Process Parameters. (line  263)
* geturl() (urllib.parse.urllib.parse.SplitResult method): Structured Parse Results.
                                                             (line   12)
* getuser() (in module getpass):         getpass --- Portable password input.
                                                             (line   32)
* getuserbase() (in module site):        Module contents<3>. (line   62)
* getusersitepackages() (in module site): Module contents<3>.
                                                             (line   70)
* getvalue() (io.BytesIO method):        Buffered Streams.   (line   38)
* getvalue() (io.StringIO method):       Text I/O<2>.        (line  186)
* getValue() (xml.sax.xmlreader.Attributes method): The Attributes Interface.
                                                             (line   24)
* getValueByQName() (xml.sax.xmlreader.AttributesNS method): The AttributesNS Interface.
                                                             (line   12)
* getwch() (in module msvcrt):           Console I/O.        (line   20)
* getwche() (in module msvcrt):          Console I/O.        (line   30)
* getweakrefcount() (in module weakref): weakref --- Weak references.
                                                             (line  145)
* getweakrefs() (in module weakref):     weakref --- Weak references.
                                                             (line  150)
* getwelcome() (ftplib.FTP method):      FTP Objects.        (line   39)
* getwelcome() (nntplib.NNTP method):    Methods<3>.         (line   28)
* getwelcome() (poplib.POP3 method):     POP3 Objects.       (line   20)
* getwin() (in module curses):           Functions<2>.       (line  162)
* getwindowsversion() (in module sys):   sys --- System-specific parameters and functions.
                                                             (line  543)
* getwriter() (in module codecs):        codecs --- Codec registry and base classes.
                                                             (line  137)
* getxattr() (in module os):             Linux extended attributes.
                                                             (line   10)
* getyx() (curses.window method):        Window Objects.     (line  253)
* GET_AITER (opcode):                    Python Bytecode Instructions.
                                                             (line  255)
* get_all() (email.message.Message method): email message Representing an email message.
                                                             (line  327)
* get_all() (wsgiref.headers.Headers method): wsgiref headers -- WSGI response header tools.
                                                             (line   51)
* get_all_breaks() (bdb.Bdb method):     bdb --- Debugger framework.
                                                             (line  332)
* get_all_start_methods() (in module multiprocessing): Miscellaneous<3>.
                                                             (line   62)
* GET_ANEXT (opcode):                    Python Bytecode Instructions.
                                                             (line  260)
* get_app() (wsgiref.simple_server.WSGIServer method): wsgiref simple_server -- a simple WSGI HTTP server.
                                                             (line   66)
* get_archive_formats() (in module shutil): Archiving operations.
                                                             (line   46)
* GET_AWAITABLE (opcode):                Python Bytecode Instructions.
                                                             (line  249)
* get_begidx() (in module readline):     Completion.         (line   40)
* get_blocking() (in module os):         File Descriptor Operations.
                                                             (line  161)
* get_body() (email.message.EmailMessage method): email contentmanager Managing MIME Content.
                                                             (line   72)
* get_body_encoding() (email.charset.Charset method): email charset Representing character sets.
                                                             (line   86)
* get_boundary() (email.message.Message method): email message Representing an email message.
                                                             (line  531)
* get_bpbynumber() (bdb.Bdb method):     bdb --- Debugger framework.
                                                             (line  309)
* get_break() (bdb.Bdb method):          bdb --- Debugger framework.
                                                             (line  318)
* get_breaks() (bdb.Bdb method):         bdb --- Debugger framework.
                                                             (line  322)
* get_buffer() (xdrlib.Packer method):   Packer Objects.     (line    8)
* get_buffer() (xdrlib.Unpacker method): Unpacker Objects.   (line   22)
* get_bytes() (mailbox.Mailbox method):  Mailbox objects.    (line  159)
* get_cache_token() (in module abc):     abc --- Abstract Base Classes.
                                                             (line  317)
* get_ca_certs() (ssl.SSLContext method): SSL Contexts.      (line  120)
* get_channel_binding() (ssl.SSLSocket method): SSL Sockets. (line  215)
* get_charset() (email.message.Message method): email message Representing an email message.
                                                             (line  233)
* get_charsets() (email.message.Message method): email message Representing an email message.
                                                             (line  565)
* get_children() (symtable.SymbolTable method): Examining Symbol Tables.
                                                             (line   62)
* get_children() (tkinter.ttk.Treeview method): ttk Treeview.
                                                             (line   19)
* get_clock_info() (in module time):     time --- Time access and conversions.
                                                             (line  223)
* get_close_matches() (in module difflib): difflib --- Helpers for computing deltas.
                                                             (line  199)
* get_code() (importlib.abc.InspectLoader method): importlib abc -- Abstract base classes related to import.
                                                             (line  290)
* get_code() (importlib.abc.SourceLoader method): importlib abc -- Abstract base classes related to import.
                                                             (line  484)
* get_code() (importlib.machinery.ExtensionFileLoader method): importlib machinery -- Importers and path hooks.
                                                             (line  320)
* get_code() (importlib.machinery.SourcelessFileLoader method): importlib machinery -- Importers and path hooks.
                                                             (line  263)
* get_code() (zipimport.zipimporter method): zipimporter Objects.
                                                             (line   28)
* get_completer() (in module readline):  Completion.         (line   29)
* get_completer_delims() (in module readline): Completion.   (line   48)
* get_completion_type() (in module readline): Completion.    (line   34)
* get_config_h_filename() (in module distutils.sysconfig): distutils sysconfig --- System configuration information.
                                                             (line   41)
* get_config_h_filename() (in module sysconfig): Other functions<3>.
                                                             (line   73)
* get_config_var() (in module distutils.sysconfig): distutils sysconfig --- System configuration information.
                                                             (line   27)
* get_config_var() (in module sysconfig): Configuration variables.
                                                             (line   26)
* get_config_vars() (in module distutils.sysconfig): distutils sysconfig --- System configuration information.
                                                             (line   32)
* get_config_vars() (in module sysconfig): Configuration variables.
                                                             (line   16)
* get_content() (email.contentmanager.ContentManager method): email contentmanager Managing MIME Content.
                                                             (line  245)
* get_content() (email.message.EmailMessage method): email contentmanager Managing MIME Content.
                                                             (line  136)
* get_content() (in module email.contentmanager): Content Manager Instances.
                                                             (line   24)
* get_content_charset() (email.message.Message method): email message Representing an email message.
                                                             (line  554)
* get_content_disposition() (email.message.Message method): email message Representing an email message.
                                                             (line  579)
* get_content_maintype() (email.message.Message method): email message Representing an email message.
                                                             (line  397)
* get_content_subtype() (email.message.Message method): email message Representing an email message.
                                                             (line  403)
* get_content_type() (email.message.Message method): email message Representing an email message.
                                                             (line  381)
* get_context() (in module multiprocessing): Miscellaneous<3>.
                                                             (line   72)
* get_coroutine_wrapper() (in module sys): sys --- System-specific parameters and functions.
                                                             (line  599)
* get_count() (in module gc):            gc --- Garbage Collector interface.
                                                             (line  101)
* get_current_history_length() (in module readline): History list.
                                                             (line   14)
* get_data() (importlib.abc.FileLoader method): importlib abc -- Abstract base classes related to import.
                                                             (line  406)
* get_data() (importlib.abc.ResourceLoader method): importlib abc -- Abstract base classes related to import.
                                                             (line  271)
* get_data() (in module pkgutil):        pkgutil --- Package extension utility.
                                                             (line  196)
* get_data() (zipimport.zipimporter method): zipimporter Objects.
                                                             (line   33)
* get_date() (mailbox.MaildirMessage method): MaildirMessage.
                                                             (line   92)
* get_debug() (asyncio.BaseEventLoop method): Debug mode.    (line    6)
* get_debug() (in module gc):            gc --- Garbage Collector interface.
                                                             (line   53)
* get_default() (argparse.ArgumentParser method): Parser defaults.
                                                             (line   33)
* get_default_compiler() (in module distutils.ccompiler): distutils ccompiler --- CCompiler base class.
                                                             (line   36)
* get_default_domain() (in module nis):  nis --- Interface to Sun's NIS Yellow Pages.
                                                             (line   46)
* get_default_type() (email.message.Message method): email message Representing an email message.
                                                             (line  408)
* get_default_verify_paths() (in module ssl): Certificate handling.
                                                             (line   91)
* get_dialect() (in module csv):         Module Contents<3>. (line   85)
* get_docstring() (in module ast):       ast Helpers.        (line   28)
* get_doctest() (doctest.DocTestParser method): DocTestParser objects.
                                                             (line   13)
* get_endidx() (in module readline):     Completion.         (line   40)
* get_environ() (wsgiref.simple_server.WSGIRequestHandler method): wsgiref simple_server -- a simple WSGI HTTP server.
                                                             (line   88)
* get_errno() (in module ctypes):        Utility functions.  (line  112)
* get_event_loop() (asyncio.AbstractEventLoopPolicy method): Event loop policy interface.
                                                             (line   12)
* get_event_loop() (in module asyncio):  Event loop functions.
                                                             (line   11)
* get_event_loop_policy() (in module asyncio): Access to the global loop policy.
                                                             (line    6)
* get_examples() (doctest.DocTestParser method): DocTestParser objects.
                                                             (line   22)
* get_exec_path() (in module os):        Process Parameters. (line  117)
* get_extra_info() (asyncio.BaseTransport method): BaseTransport.
                                                             (line   24)
* get_extra_info() (asyncio.StreamWriter method): StreamWriter.
                                                             (line   57)
* get_field() (string.Formatter method): Custom String Formatting.
                                                             (line   55)
* get_file() (mailbox.Babyl method):     Babyl.              (line   49)
* get_file() (mailbox.Mailbox method):   Mailbox objects.    (line  175)
* get_file() (mailbox.Maildir method):   Maildir.            (line  115)
* get_file() (mailbox.mbox method):      mbox.               (line   33)
* get_file() (mailbox.MH method):        MH.                 (line   93)
* get_file() (mailbox.MMDF method):      MMDF.               (line   29)
* get_filename() (email.message.Message method): email message Representing an email message.
                                                             (line  521)
* get_filename() (importlib.abc.ExecutionLoader method): importlib abc -- Abstract base classes related to import.
                                                             (line  361)
* get_filename() (importlib.abc.FileLoader method): importlib abc -- Abstract base classes related to import.
                                                             (line  402)
* get_filename() (importlib.machinery.ExtensionFileLoader method): importlib machinery -- Importers and path hooks.
                                                             (line  328)
* get_filename() (zipimport.zipimporter method): zipimporter Objects.
                                                             (line   41)
* get_file_breaks() (bdb.Bdb method):    bdb --- Debugger framework.
                                                             (line  327)
* get_flags() (mailbox.MaildirMessage method): MaildirMessage.
                                                             (line   63)
* get_flags() (mailbox.mboxMessage method): mboxMessage.     (line   64)
* get_flags() (mailbox.MMDFMessage method): MMDFMessage.     (line   63)
* get_folder() (mailbox.Maildir method): Maildir.            (line   61)
* get_folder() (mailbox.MH method):      MH.                 (line   36)
* get_frees() (symtable.Function method): Examining Symbol Tables.
                                                             (line   84)
* get_from() (mailbox.mboxMessage method): mboxMessage.      (line   47)
* get_from() (mailbox.MMDFMessage method): MMDFMessage.      (line   46)
* get_full_url() (urllib.request.Request method): Request Objects.
                                                             (line  106)
* get_globals() (symtable.Function method): Examining Symbol Tables.
                                                             (line   80)
* get_grouped_opcodes() (difflib.SequenceMatcher method): SequenceMatcher Objects.
                                                             (line  165)
* get_handle_inheritable() (in module os): Inheritance of File Descriptors.
                                                             (line   32)
* get_header() (urllib.request.Request method): Request Objects.
                                                             (line  120)
* get_history_item() (in module readline): History list.     (line   20)
* get_history_length() (in module readline): History file.   (line   28)
* get_id() (symtable.SymbolTable method): Examining Symbol Tables.
                                                             (line   15)
* get_ident() (in module threading):     threading --- Thread-based parallelism.
                                                             (line   37)
* get_ident() (in module _thread):       _thread --- Low-level threading API.
                                                             (line   58)
* get_identifiers() (symtable.SymbolTable method): Examining Symbol Tables.
                                                             (line   48)
* get_importer() (in module pkgutil):    pkgutil --- Package extension utility.
                                                             (line   86)
* get_info() (mailbox.MaildirMessage method): MaildirMessage.
                                                             (line  102)
* get_inheritable() (in module os):      Inheritance of File Descriptors.
                                                             (line   23)
* get_inheritable() (socket.socket method): Socket Objects.  (line  110)
* get_instructions() (in module dis):    Analysis functions. (line   95)
* get_interpreter() (in module zipapp):  Python API.         (line   70)
* GET_ITER (opcode):                     Python Bytecode Instructions.
                                                             (line  102)
* get_key() (selectors.BaseSelector method): Classes<3>.     (line  145)
* get_labels() (mailbox.Babyl method):   Babyl.              (line   35)
* get_labels() (mailbox.BabylMessage method): BabylMessage.  (line   47)
* get_last_error() (in module ctypes):   Utility functions.  (line  117)
* get_lineno() (symtable.SymbolTable method): Examining Symbol Tables.
                                                             (line   26)
* get_line_buffer() (in module readline): Line buffer.       (line    8)
* get_loader() (in module pkgutil):      pkgutil --- Package extension utility.
                                                             (line  100)
* get_locals() (symtable.Function method): Examining Symbol Tables.
                                                             (line   76)
* get_logger() (in module multiprocessing): Logging<2>.      (line   11)
* get_magic() (in module imp):           imp --- Access the import internals.
                                                             (line   13)
* get_makefile_filename() (in module distutils.sysconfig): distutils sysconfig --- System configuration information.
                                                             (line   49)
* get_makefile_filename() (in module sysconfig): Other functions<3>.
                                                             (line   77)
* get_map() (selectors.BaseSelector method): Classes<3>.     (line  153)
* get_matching_blocks() (difflib.SequenceMatcher method): SequenceMatcher Objects.
                                                             (line  104)
* get_message() (mailbox.Mailbox method): Mailbox objects.   (line  152)
* get_method() (urllib.request.Request method): Request Objects.
                                                             (line   69)
* get_methods() (symtable.Class method): Examining Symbol Tables.
                                                             (line   94)
* get_mixed_type_key() (in module ipaddress): Other Module Level Functions.
                                                             (line   56)
* get_name() (symtable.Symbol method):   Examining Symbol Tables.
                                                             (line  104)
* get_name() (symtable.SymbolTable method): Examining Symbol Tables.
                                                             (line   19)
* get_namespace() (symtable.Symbol method): Examining Symbol Tables.
                                                             (line  165)
* get_namespaces() (symtable.Symbol method): Examining Symbol Tables.
                                                             (line  161)
* get_nonstandard_attr() (http.cookiejar.Cookie method): Cookie Objects<2>.
                                                             (line   97)
* get_nowait() (asyncio.Queue method):   Queue.              (line   49)
* get_nowait() (multiprocessing.Queue method): Pipes and Queues.
                                                             (line  148)
* get_nowait() (queue.Queue method):     Queue Objects.      (line   55)
* get_objects() (in module gc):          gc --- Garbage Collector interface.
                                                             (line   57)
* get_object_traceback() (in module tracemalloc): Functions<7>.
                                                             (line   12)
* get_opcodes() (difflib.SequenceMatcher method): SequenceMatcher Objects.
                                                             (line  122)
* get_option() (optparse.OptionParser method): Querying and manipulating your option parser.
                                                             (line   37)
* get_option_group() (optparse.OptionParser method): Grouping Options.
                                                             (line  103)
* get_option_order() (distutils.fancy_getopt.FancyGetopt method): distutils fancy_getopt --- Wrapper around the standard getopt module.
                                                             (line   62)
* get_osfhandle() (in module msvcrt):    File Operations.    (line   49)
* get_output_charset() (email.charset.Charset method): email charset Representing character sets.
                                                             (line  101)
* get_param() (email.message.Message method): email message Representing an email message.
                                                             (line  438)
* get_parameters() (symtable.Function method): Examining Symbol Tables.
                                                             (line   71)
* get_params() (email.message.Message method): email message Representing an email message.
                                                             (line  422)
* get_path() (in module sysconfig):      Installation paths. (line   67)
* get_paths() (in module sysconfig):     Installation paths. (line   97)
* get_path_names() (in module sysconfig): Installation paths.
                                                             (line   62)
* get_payload() (email.message.Message method): email message Representing an email message.
                                                             (line  159)
* get_pid() (asyncio.BaseSubprocessTransport method): BaseSubprocessTransport.
                                                             (line    8)
* get_pipe_transport() (asyncio.BaseSubprocessTransport method): BaseSubprocessTransport.
                                                             (line   12)
* get_platform() (in module distutils.util): distutils util --- Miscellaneous other utility functions.
                                                             (line    9)
* get_platform() (in module sysconfig):  Other functions<3>. (line   11)
* get_poly() (in module turtle):         Special Turtle methods.
                                                             (line   17)
* get_position() (xdrlib.Unpacker method): Unpacker Objects. (line   12)
* get_python_inc() (in module distutils.sysconfig): distutils sysconfig --- System configuration information.
                                                             (line   57)
* get_python_lib() (in module distutils.sysconfig): distutils sysconfig --- System configuration information.
                                                             (line   68)
* get_python_version() (in module sysconfig): Other functions<3>.
                                                             (line    6)
* get_recsrc() (ossaudiodev.oss_mixer_device method): Mixer Device Objects.
                                                             (line   84)
* get_referents() (in module gc):        gc --- Garbage Collector interface.
                                                             (line  129)
* get_referrers() (in module gc):        gc --- Garbage Collector interface.
                                                             (line  111)
* get_request() (socketserver.BaseServer method): Server Objects.
                                                             (line  129)
* get_returncode() (asyncio.BaseSubprocessTransport method): BaseSubprocessTransport.
                                                             (line   31)
* get_scheme() (wsgiref.handlers.BaseHandler method): wsgiref handlers -- server/gateway base classes.
                                                             (line  185)
* get_scheme_names() (in module sysconfig): Installation paths.
                                                             (line   57)
* get_sequences() (mailbox.MH method):   MH.                 (line   53)
* get_sequences() (mailbox.MHMessage method): MHMessage.     (line   32)
* get_server() (multiprocessing.managers.BaseManager method): Managers.
                                                             (line   46)
* get_server_certificate() (in module ssl): Certificate handling.
                                                             (line   62)
* get_shapepoly() (in module turtle):    Appearance.         (line  189)
* get_socket() (telnetlib.Telnet method): Telnet Objects.    (line   90)
* get_source() (importlib.abc.InspectLoader method): importlib abc -- Abstract base classes related to import.
                                                             (line  304)
* get_source() (importlib.abc.SourceLoader method): importlib abc -- Abstract base classes related to import.
                                                             (line  503)
* get_source() (importlib.machinery.ExtensionFileLoader method): importlib machinery -- Importers and path hooks.
                                                             (line  324)
* get_source() (importlib.machinery.SourcelessFileLoader method): importlib machinery -- Importers and path hooks.
                                                             (line  268)
* get_source() (zipimport.zipimporter method): zipimporter Objects.
                                                             (line   49)
* get_special_folder_path() (built-in function): The Postinstallation script.
                                                             (line   32)
* get_stack() (asyncio.Task method):     Task.               (line   78)
* get_stack() (bdb.Bdb method):          bdb --- Debugger framework.
                                                             (line  339)
* get_starttag_text() (html.parser.HTMLParser method): HTMLParser Methods.
                                                             (line   32)
* get_start_method() (in module multiprocessing): Miscellaneous<3>.
                                                             (line   84)
* get_stats() (in module gc):            gc --- Garbage Collector interface.
                                                             (line   62)
* get_stderr() (wsgiref.handlers.BaseHandler method): wsgiref handlers -- server/gateway base classes.
                                                             (line  124)
* get_stderr() (wsgiref.simple_server.WSGIRequestHandler method): wsgiref simple_server -- a simple WSGI HTTP server.
                                                             (line   98)
* get_stdin() (wsgiref.handlers.BaseHandler method): wsgiref handlers -- server/gateway base classes.
                                                             (line  119)
* get_string() (mailbox.Mailbox method): Mailbox objects.    (line  167)
* get_subdir() (mailbox.MaildirMessage method): MaildirMessage.
                                                             (line   47)
* get_suffixes() (in module imp):        imp --- Access the import internals.
                                                             (line   22)
* get_symbols() (symtable.SymbolTable method): Examining Symbol Tables.
                                                             (line   57)
* get_tag() (in module imp):             imp --- Access the import internals.
                                                             (line  241)
* get_task_factory() (asyncio.BaseEventLoop method): Tasks.  (line   34)
* get_terminal_size() (in module os):    Querying the size of a terminal.
                                                             (line    8)
* get_terminal_size() (in module shutil): Querying the size of the output terminal.
                                                             (line    8)
* get_terminator() (asynchat.async_chat method): asynchat --- Asynchronous socket command/response handler.
                                                             (line   95)
* get_threshold() (in module gc):        gc --- Garbage Collector interface.
                                                             (line  106)
* get_token() (shlex.shlex method):      shlex Objects.      (line    8)
* get_traceback_limit() (in module tracemalloc): Functions<7>.
                                                             (line   22)
* get_traced_memory() (in module tracemalloc): Functions<7>. (line   32)
* get_tracemalloc_memory() (in module tracemalloc): Functions<7>.
                                                             (line   38)
* get_type() (symtable.SymbolTable method): Examining Symbol Tables.
                                                             (line   10)
* get_type_hints() (in module typing):   Classes functions and decorators.
                                                             (line  324)
* get_unixfrom() (email.message.Message method): email message Representing an email message.
                                                             (line  145)
* get_unpack_formats() (in module shutil): Archiving operations.
                                                             (line  128)
* get_usage() (optparse.OptionParser method): Other methods. (line   22)
* get_value() (string.Formatter method): Custom String Formatting.
                                                             (line   65)
* get_version() (optparse.OptionParser method): Printing a version string.
                                                             (line   34)
* get_visible() (mailbox.BabylMessage method): BabylMessage. (line   63)
* get_wch() (curses.window method):      Window Objects.     (line  225)
* get_write_buffer_limits() (asyncio.WriteTransport method): WriteTransport.
                                                             (line   28)
* get_write_buffer_size() (asyncio.WriteTransport method): WriteTransport.
                                                             (line   23)
* GET_YIELD_FROM_ITER (opcode):          Python Bytecode Instructions.
                                                             (line  106)
* gid (tarfile.TarInfo attribute):       TarInfo Objects.    (line   76)
* GIL:                                   Glossary.           (line  451)
* glob (module):                         glob --- Unix style pathname pattern expansion.
                                                             (line    6)
* glob() (in module glob):               glob --- Unix style pathname pattern expansion.
                                                             (line   29)
* glob() (msilib.Directory method):      Directory Objects.  (line   39)
* glob() (pathlib.Path method):          Methods<2>.         (line   78)
* global interpreter lock:               Thread State and the Global Interpreter Lock.
                                                             (line    6)
* global interpreter lock <1>:           Glossary.           (line  455)
* global; name; binding:                 The global statement.
                                                             (line    6)
* global; namespace:                     The standard type hierarchy.
                                                             (line  350)
* globals() (built-in function):         Built-in Functions. (line  598)
* globs (doctest.DocTest attribute):     DocTest Objects.    (line   22)
* gmtime() (in module time):             time --- Time access and conversions.
                                                             (line  256)
* gname (tarfile.TarInfo attribute):     TarInfo Objects.    (line   84)
* GNOME:                                 The Catalog constructor.
                                                             (line    6)
* GNU_FORMAT (in module tarfile):        tarfile --- Read and write tar archive files.
                                                             (line  223)
* gnu_getopt() (in module getopt):       getopt --- C-style parser for command line options.
                                                             (line   62)
* got (doctest.DocTestFailure attribute): Debugging.         (line  204)
* goto() (in module turtle):             Turtle motion.      (line   74)
* grammar:                               Notation.           (line    6)
* Graphical User Interface:              Graphical User Interfaces with Tk.
                                                             (line    6)
* GREATER (in module token):             token --- Constants used with Python parse trees.
                                                             (line   40)
* GREATEREQUAL (in module token):        token --- Constants used with Python parse trees.
                                                             (line   40)
* Greenwich Mean Time:                   time --- Time access and conversions.
                                                             (line   37)
* Group (class in email.headerregistry): email headerregistry Custom Header Objects.
                                                             (line  434)
* group() (nntplib.NNTP method):         Methods<3>.         (line  158)
* group() (pathlib.Path method):         Methods<2>.         (line  101)
* group() (re.match method):             Match Objects.      (line   29)
* groupby() (in module itertools):       Itertool functions. (line  285)
* groupdict() (re.match method):         Match Objects.      (line  106)
* groupindex (re.regex attribute):       Regular Expression Objects.
                                                             (line  112)
* grouping:                              Indentation.        (line    6)
* groups (email.headerregistry.AddressHeader attribute): email headerregistry Custom Header Objects.
                                                             (line  186)
* groups (re.regex attribute):           Regular Expression Objects.
                                                             (line  108)
* groups() (re.match method):            Match Objects.      (line   83)
* grp (module):                          grp --- The group database.
                                                             (line    6)
* gt() (in module operator):             operator --- Standard operators as functions.
                                                             (line   22)
* guess_all_extensions() (in module mimetypes): mimetypes --- Map filenames to MIME types.
                                                             (line   46)
* guess_all_extensions() (mimetypes.MimeTypes method): MimeTypes Objects.
                                                             (line   62)
* guess_extension() (in module mimetypes): mimetypes --- Map filenames to MIME types.
                                                             (line   58)
* guess_extension() (mimetypes.MimeTypes method): MimeTypes Objects.
                                                             (line   52)
* guess_scheme() (in module wsgiref.util): wsgiref util -- WSGI environment utilities.
                                                             (line   12)
* guess_type() (in module mimetypes):    mimetypes --- Map filenames to MIME types.
                                                             (line   24)
* guess_type() (mimetypes.MimeTypes method): MimeTypes Objects.
                                                             (line   57)
* GUI:                                   Graphical User Interfaces with Tk.
                                                             (line    6)
* gzip (module):                         gzip --- Support for gzip files.
                                                             (line    6)
* GzipFile (class in gzip):              gzip --- Support for gzip files.
                                                             (line   61)
* halfdelay() (in module curses):        Functions<2>.       (line  192)
* Handle (class in asyncio):             Handle.             (line    6)
* handle an exception:                   Exceptions<2>.      (line    6)
* handle() (http.server.BaseHTTPRequestHandler method): http server --- HTTP servers.
                                                             (line  164)
* handle() (logging.Handler method):     Handler Objects.    (line   77)
* handle() (logging.handlers.QueueListener method): QueueListener.
                                                             (line   59)
* handle() (logging.Logger method):      Logger Objects.     (line  256)
* handle() (logging.NullHandler method): NullHandler.        (line   20)
* handle() (socketserver.BaseRequestHandler method): Request Handler Objects.
                                                             (line   20)
* handle() (wsgiref.simple_server.WSGIRequestHandler method): wsgiref simple_server -- a simple WSGI HTTP server.
                                                             (line  103)
* handleError() (logging.Handler method): Handler Objects.   (line   84)
* handleError() (logging.handlers.SocketHandler method): SocketHandler.
                                                             (line   33)
* handler() (in module cgitb):           cgitb --- Traceback manager for CGI scripts.
                                                             (line   44)
* handle_accept() (asyncore.dispatcher method): asyncore --- Asynchronous socket handler.
                                                             (line  141)
* handle_accepted() (asyncore.dispatcher method): asyncore --- Asynchronous socket handler.
                                                             (line  151)
* handle_charref() (html.parser.HTMLParser method): HTMLParser Methods.
                                                             (line   93)
* handle_close() (asyncore.dispatcher method): asyncore --- Asynchronous socket handler.
                                                             (line  132)
* handle_comment() (html.parser.HTMLParser method): HTMLParser Methods.
                                                             (line  102)
* handle_connect() (asyncore.dispatcher method): asyncore --- Asynchronous socket handler.
                                                             (line  126)
* handle_data() (html.parser.HTMLParser method): HTMLParser Methods.
                                                             (line   80)
* handle_decl() (html.parser.HTMLParser method): HTMLParser Methods.
                                                             (line  115)
* handle_defect() (email.policy.Policy method): email policy Policy Objects.
                                                             (line  189)
* handle_endtag() (html.parser.HTMLParser method): HTMLParser Methods.
                                                             (line   64)
* handle_entityref() (html.parser.HTMLParser method): HTMLParser Methods.
                                                             (line   86)
* handle_error() (asyncore.dispatcher method): asyncore --- Asynchronous socket handler.
                                                             (line  136)
* handle_error() (socketserver.BaseServer method): Server Objects.
                                                             (line  135)
* handle_expect_100() (http.server.BaseHTTPRequestHandler method): http server --- HTTP servers.
                                                             (line  177)
* handle_expt() (asyncore.dispatcher method): asyncore --- Asynchronous socket handler.
                                                             (line  120)
* handle_one_request() (http.server.BaseHTTPRequestHandler method): http server --- HTTP servers.
                                                             (line  171)
* handle_pi() (html.parser.HTMLParser method): HTMLParser Methods.
                                                             (line  123)
* handle_read() (asyncore.dispatcher method): asyncore --- Asynchronous socket handler.
                                                             (line  105)
* handle_request() (socketserver.BaseServer method): Server Objects.
                                                             (line   21)
* handle_request() (xmlrpc.server.CGIXMLRPCRequestHandler method): CGIXMLRPCRequestHandler.
                                                             (line   42)
* handle_startendtag() (html.parser.HTMLParser method): HTMLParser Methods.
                                                             (line   71)
* handle_starttag() (html.parser.HTMLParser method): HTMLParser Methods.
                                                             (line   45)
* handle_timeout() (socketserver.BaseServer method): Server Objects.
                                                             (line  145)
* handle_write() (asyncore.dispatcher method): asyncore --- Asynchronous socket handler.
                                                             (line  110)
* hasattr() (built-in function):         Built-in Functions. (line  605)
* hasAttribute() (xml.dom.Element method): Element Objects<2>.
                                                             (line   22)
* hasAttributeNS() (xml.dom.Element method): Element Objects<2>.
                                                             (line   26)
* hasAttributes() (xml.dom.Node method): Node Objects.       (line   94)
* hasChildNodes() (xml.dom.Node method): Node Objects.       (line   98)
* hascompare (in module dis):            Opcode collections. (line   49)
* hasconst (in module dis):              Opcode collections. (line   21)
* hasFeature() (xml.dom.DOMImplementation method): DOMImplementation Objects.
                                                             (line   11)
* hasfree (in module dis):               Opcode collections. (line   25)
* hash character:                        Comments.           (line    6)
* hash() (built-in function):            Built-in Functions. (line  612)
* hash.block_size (in module hashlib):   Hash algorithms.    (line   87)
* hash.digest_size (in module hashlib):  Hash algorithms.    (line   83)
* hashable:                              Dictionary displays.
                                                             (line   29)
* hashable <1>:                          Glossary.           (line  478)
* Hashable (class in collections.abc):   Collections Abstract Base Classes.
                                                             (line   94)
* hasHandlers() (logging.Logger method): Logger Objects.     (line  270)
* hashlib (module):                      hashlib --- Secure hashes and message digests.
                                                             (line    6)
* hash_info (in module sys):             sys --- System-specific parameters and functions.
                                                             (line  609)
* hasjabs (in module dis):               Opcode collections. (line   41)
* hasjrel (in module dis):               Opcode collections. (line   37)
* haslocal (in module dis):              Opcode collections. (line   45)
* hasname (in module dis):               Opcode collections. (line   33)
* HAS_ALPN (in module ssl):              Constants<7>.       (line  211)
* has_children() (symtable.SymbolTable method): Examining Symbol Tables.
                                                             (line   39)
* has_colors() (in module curses):       Functions<2>.       (line  168)
* HAS_ECDH (in module ssl):              Constants<7>.       (line  219)
* has_exec() (symtable.SymbolTable method): Examining Symbol Tables.
                                                             (line   44)
* has_extn() (smtplib.SMTP method):      SMTP Objects.       (line   82)
* has_function() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  212)
* has_header() (csv.Sniffer method):     Module Contents<3>. (line  210)
* has_header() (urllib.request.Request method): Request Objects.
                                                             (line   94)
* has_ic() (in module curses):           Functions<2>.       (line  173)
* has_il() (in module curses):           Functions<2>.       (line  180)
* has_ipv6 (in module socket):           Constants<6>.       (line  152)
* has_key (2to3 fixer):                  Fixers.             (line  126)
* has_key() (in module curses):          Functions<2>.       (line  187)
* has_location (importlib.machinery.ModuleSpec attribute): importlib machinery -- Importers and path hooks.
                                                             (line  388)
* has_nonstandard_attr() (http.cookiejar.Cookie method): Cookie Objects<2>.
                                                             (line   93)
* HAS_NPN (in module ssl):               Constants<7>.       (line  234)
* has_option() (configparser.ConfigParser method): ConfigParser Objects.
                                                             (line  100)
* has_option() (optparse.OptionParser method): Querying and manipulating your option parser.
                                                             (line   42)
* has_section() (configparser.ConfigParser method): ConfigParser Objects.
                                                             (line   91)
* HAS_SNI (in module ssl):               Constants<7>.       (line  227)
* HAVE_ARGUMENT (opcode):                Python Bytecode Instructions.
                                                             (line  699)
* HAVE_THREADS (in module decimal):      Constants<3>.       (line   25)
* HCI_DATA_DIR (in module socket):       Constants<6>.       (line  165)
* HCI_FILTER (in module socket):         Constants<6>.       (line  165)
* HCI_TIME_STAMP (in module socket):     Constants<6>.       (line  165)
* head() (nntplib.NNTP method):          Methods<3>.         (line  266)
* Header (class in email.header):        email header Internationalized headers.
                                                             (line   46)
* HeaderError:                           tarfile --- Read and write tar archive files.
                                                             (line  203)
* HeaderParseError:                      email errors Exception and Defect classes.
                                                             (line   20)
* HeaderRegistry (class in email.headerregistry): email headerregistry Custom Header Objects.
                                                             (line  297)
* Headers (class in wsgiref.headers):    wsgiref headers -- WSGI response header tools.
                                                             (line    9)
* headers (http.server.BaseHTTPRequestHandler attribute): http server --- HTTP servers.
                                                             (line   87)
* headers (urllib.error.HTTPError attribute): urllib error --- Exception classes raised by urllib request.
                                                             (line   45)
* headers (xmlrpc.client.ProtocolError attribute): ProtocolError Objects.
                                                             (line   22)
* header_encode() (email.charset.Charset method): email charset Representing character sets.
                                                             (line  108)
* header_encode_lines() (email.charset.Charset method): email charset Representing character sets.
                                                             (line  115)
* header_encoding (email.charset.Charset attribute): email charset Representing character sets.
                                                             (line   49)
* header_factory (email.policy.EmailPolicy attribute): email policy Policy Objects.
                                                             (line  423)
* header_fetch_parse() (email.policy.Compat32 method): email policy Policy Objects.
                                                             (line  344)
* header_fetch_parse() (email.policy.EmailPolicy method): email policy Policy Objects.
                                                             (line  470)
* header_fetch_parse() (email.policy.Policy method): email policy Policy Objects.
                                                             (line  272)
* header_items() (urllib.request.Request method): Request Objects.
                                                             (line  125)
* header_max_count() (email.policy.EmailPolicy method): email policy Policy Objects.
                                                             (line  450)
* header_max_count() (email.policy.Policy method): email policy Policy Objects.
                                                             (line  214)
* header_offset (zipfile.ZipInfo attribute): ZipInfo Objects.
                                                             (line  111)
* header_source_parse() (email.policy.Compat32 method): email policy Policy Objects.
                                                             (line  332)
* header_source_parse() (email.policy.EmailPolicy method): email policy Policy Objects.
                                                             (line  456)
* header_source_parse() (email.policy.Policy method): email policy Policy Objects.
                                                             (line  235)
* header_store_parse() (email.policy.Compat32 method): email policy Policy Objects.
                                                             (line  340)
* header_store_parse() (email.policy.EmailPolicy method): email policy Policy Objects.
                                                             (line  461)
* header_store_parse() (email.policy.Policy method): email policy Policy Objects.
                                                             (line  256)
* heading() (in module turtle):          Tell Turtle's state.
                                                             (line   58)
* heading() (tkinter.ttk.Treeview method): ttk Treeview.     (line  105)
* heapify() (in module heapq):           heapq --- Heap queue algorithm.
                                                             (line   56)
* heapmin() (in module msvcrt):          Other Functions.    (line    6)
* heappop() (in module heapq):           heapq --- Heap queue algorithm.
                                                             (line   42)
* heappush() (in module heapq):          heapq --- Heap queue algorithm.
                                                             (line   37)
* heappushpop() (in module heapq):       heapq --- Heap queue algorithm.
                                                             (line   49)
* heapq (module):                        heapq --- Heap queue algorithm.
                                                             (line    6)
* heapreplace() (in module heapq):       heapq --- Heap queue algorithm.
                                                             (line   60)
* helo() (smtplib.SMTP method):          SMTP Objects.       (line   44)
* help (optparse.Option attribute):      Option attributes.  (line   72)
* help (pdb command):                    Debugger Commands.  (line   47)
* help() (built-in function):            Built-in Functions. (line  625)
* help() (nntplib.NNTP method):          Methods<3>.         (line  214)
* help; online:                          pydoc --- Documentation generator and online help system.
                                                             (line    6)
* herror:                                Exceptions<7>.      (line   13)
* hex (uuid.UUID attribute):             uuid --- UUID objects according to RFC 4122.
                                                             (line   89)
* hex() (built-in function):             Built-in Functions. (line  642)
* hex() (bytearray method):              Bytearray Objects.  (line   43)
* hex() (bytes method):                  Bytes.              (line   69)
* hex() (float method):                  Additional Methods on Float.
                                                             (line   33)
* hex() (memoryview method):             Memory Views.       (line  176)
* hexadecimal literal:                   Numeric literals.   (line    6)
* hexadecimal; literals:                 Numeric Types --- int float complex.
                                                             (line   19)
* hexbin() (in module binhex):           binhex --- Encode and decode binhex4 files.
                                                             (line   19)
* hexdigest() (hashlib.hash method):     Hash algorithms.    (line  122)
* hexdigest() (hmac.HMAC method):        hmac --- Keyed-Hashing for Message Authentication.
                                                             (line   53)
* hexdigits (in module string):          String constants.   (line   28)
* hexlify() (in module binascii):        binascii --- Convert between binary and ASCII.
                                                             (line  124)
* hexversion (in module sys):            sys --- System-specific parameters and functions.
                                                             (line  650)
* hidden() (curses.panel.Panel method):  Panel Objects.      (line   25)
* hide() (curses.panel.Panel method):    Panel Objects.      (line   29)
* hide() (tkinter.ttk.Notebook method):  ttk Notebook.       (line   23)
* hideturtle() (in module turtle):       Visibility.         (line    6)
* hide_cookie2 (http.cookiejar.CookiePolicy attribute): CookiePolicy Objects.
                                                             (line   75)
* HierarchyRequestErr:                   Exceptions<12>.     (line   29)
* HIGHEST_PROTOCOL (in module pickle):   Module Interface.   (line   14)
* HKEY_CLASSES_ROOT (in module winreg):  HKEY_* Constants.   (line    6)
* HKEY_CURRENT_CONFIG (in module winreg): HKEY_* Constants.  (line   38)
* HKEY_CURRENT_USER (in module winreg):  HKEY_* Constants.   (line   12)
* HKEY_DYN_DATA (in module winreg):      HKEY_* Constants.   (line   43)
* HKEY_LOCAL_MACHINE (in module winreg): HKEY_* Constants.   (line   19)
* HKEY_PERFORMANCE_DATA (in module winreg): HKEY_* Constants.
                                                             (line   31)
* HKEY_USERS (in module winreg):         HKEY_* Constants.   (line   25)
* hline() (curses.window method):        Window Objects.     (line  258)
* HList (class in tkinter.tix):          Hierarchical ListBox.
                                                             (line    6)
* hls_to_rgb() (in module colorsys):     colorsys --- Conversions between color systems.
                                                             (line   40)
* hmac (module):                         hmac --- Keyed-Hashing for Message Authentication.
                                                             (line    6)
* HOME:                                  os path --- Common pathname manipulations.
                                                             (line  116)
* HOME <1>:                              os path --- Common pathname manipulations.
                                                             (line  122)
* HOME <2>:                              distutils util --- Miscellaneous other utility functions.
                                                             (line   82)
* HOME <3>:                              Location and names of config files.
                                                             (line   50)
* HOME <4>:                              Location and names of config files.
                                                             (line   67)
* home() (in module turtle):             Turtle motion.      (line  161)
* home() (pathlib.Path class method):    Methods<2>.         (line   18)
* HOMEDRIVE:                             os path --- Common pathname manipulations.
                                                             (line  123)
* HOMEDRIVE <1>:                         Location and names of config files.
                                                             (line   68)
* HOMEPATH:                              os path --- Common pathname manipulations.
                                                             (line  123)
* HOMEPATH <1>:                          Location and names of config files.
                                                             (line   68)
* hooks; import:                         Import hooks.       (line    6)
* hooks; meta:                           Import hooks.       (line    6)
* hooks; path:                           Import hooks.       (line    6)
* hook_compressed() (in module fileinput): fileinput --- Iterate over lines from multiple input streams.
                                                             (line  184)
* hook_encoded() (in module fileinput):  fileinput --- Iterate over lines from multiple input streams.
                                                             (line  195)
* host (urllib.request.Request attribute): Request Objects.  (line   25)
* hostmask (ipaddress.IPv4Network attribute): Network objects.
                                                             (line   95)
* hostmask (ipaddress.IPv6Network attribute): Network objects.
                                                             (line  276)
* hosts (netrc.netrc attribute):         netrc Objects.      (line   23)
* hosts() (ipaddress.IPv4Network method): Network objects.   (line  130)
* hosts() (ipaddress.IPv6Network method): Network objects.   (line  292)
* hour (datetime.datetime attribute):    datetime Objects.   (line  189)
* hour (datetime.time attribute):        time Objects.       (line   48)
* HRESULT (class in ctypes):             Fundamental data types<2>.
                                                             (line  208)
* hStdError (subprocess.STARTUPINFO attribute): Windows Popen Helpers.
                                                             (line   37)
* hStdInput (subprocess.STARTUPINFO attribute): Windows Popen Helpers.
                                                             (line   22)
* hStdOutput (subprocess.STARTUPINFO attribute): Windows Popen Helpers.
                                                             (line   30)
* hsv_to_rgb() (in module colorsys):     colorsys --- Conversions between color systems.
                                                             (line   48)
* ht() (in module turtle):               Visibility.         (line    6)
* HTML:                                  html parser --- Simple HTML and XHTML parser.
                                                             (line    6)
* HTML <1>:                              urllib request Restrictions.
                                                             (line   29)
* html (module):                         html --- HyperText Markup Language support.
                                                             (line    6)
* html.entities (module):                html entities --- Definitions of HTML general entities.
                                                             (line    6)
* html.parser (module):                  html parser --- Simple HTML and XHTML parser.
                                                             (line    6)
* html5 (in module html.entities):       html entities --- Definitions of HTML general entities.
                                                             (line   14)
* HTMLCalendar (class in calendar):      calendar --- General calendar-related functions.
                                                             (line  138)
* HtmlDiff (class in difflib):           difflib --- Helpers for computing deltas.
                                                             (line   79)
* HTMLParser (class in html.parser):     html parser --- Simple HTML and XHTML parser.
                                                             (line   14)
* htonl() (in module socket):            Other functions<2>. (line  151)
* htons() (in module socket):            Other functions<2>. (line  158)
* HTTP (in module email.policy):         email policy Policy Objects.
                                                             (line  537)
* http (module):                         http --- HTTP modules.
                                                             (line    6)
* http.client (module):                  http client --- HTTP protocol client.
                                                             (line    6)
* http.cookiejar (module):               http cookiejar --- Cookie handling for HTTP clients.
                                                             (line    6)
* http.cookies (module):                 http cookies --- HTTP state management.
                                                             (line    6)
* http.server (module):                  http server --- HTTP servers.
                                                             (line    6)
* HTTP; http (standard module):          http --- HTTP modules.
                                                             (line    6)
* HTTP; http.client (standard module):   http client --- HTTP protocol client.
                                                             (line    6)
* HTTP; protocol:                        cgi --- Common Gateway Interface support.
                                                             (line    6)
* HTTP; protocol <1>:                    urllib request Restrictions.
                                                             (line    6)
* HTTP; protocol <2>:                    urllib request Restrictions.
                                                             (line   29)
* HTTP; protocol <3>:                    http --- HTTP modules.
                                                             (line    6)
* HTTP; protocol <4>:                    http client --- HTTP protocol client.
                                                             (line    6)
* HTTP; protocol <5>:                    http server --- HTTP servers.
                                                             (line    6)
* HTTPBasicAuthHandler (class in urllib.request): urllib request --- Extensible library for opening URLs.
                                                             (line  315)
* HTTPConnection (class in http.client): http client --- HTTP protocol client.
                                                             (line   26)
* HTTPCookieProcessor (class in urllib.request): urllib request --- Extensible library for opening URLs.
                                                             (line  250)
* httpd:                                 http server --- HTTP servers.
                                                             (line    6)
* HTTPDefaultErrorHandler (class in urllib.request): urllib request --- Extensible library for opening URLs.
                                                             (line  241)
* HTTPDigestAuthHandler (class in urllib.request): urllib request --- Extensible library for opening URLs.
                                                             (line  339)
* HTTPError:                             urllib error --- Exception classes raised by urllib request.
                                                             (line   26)
* HTTPErrorProcessor (class in urllib.request): urllib request --- Extensible library for opening URLs.
                                                             (line  399)
* HTTPException:                         http client --- HTTP protocol client.
                                                             (line   97)
* HTTPHandler (class in logging.handlers): HTTPHandler.      (line   10)
* HTTPHandler (class in urllib.request): urllib request --- Extensible library for opening URLs.
                                                             (line  363)
* HTTPPasswordMgr (class in urllib.request): urllib request --- Extensible library for opening URLs.
                                                             (line  272)
* HTTPPasswordMgrWithDefaultRealm (class in urllib.request): urllib request --- Extensible library for opening URLs.
                                                             (line  276)
* HTTPPasswordMgrWithPriorAuth (class in urllib.request): urllib request --- Extensible library for opening URLs.
                                                             (line  282)
* HTTPRedirectHandler (class in urllib.request): urllib request --- Extensible library for opening URLs.
                                                             (line  246)
* HTTPResponse (class in http.client):   http client --- HTTP protocol client.
                                                             (line   86)
* HTTPSConnection (class in http.client): http client --- HTTP protocol client.
                                                             (line   53)
* HTTPServer (class in http.server):     http server --- HTTP servers.
                                                             (line   22)
* HTTPSHandler (class in urllib.request): urllib request --- Extensible library for opening URLs.
                                                             (line  367)
* HTTPStatus (class in http):            http --- HTTP modules.
                                                             (line   26)
* https_open() (urllib.request.HTTPSHandler method): HTTPSHandler Objects.
                                                             (line    6)
* HTTPS_PORT (in module http.client):    http client --- HTTP protocol client.
                                                             (line  170)
* https_response() (urllib.request.HTTPErrorProcessor method): HTTPErrorProcessor Objects.
                                                             (line   18)
* http_error_301() (urllib.request.HTTPRedirectHandler method): HTTPRedirectHandler Objects.
                                                             (line   35)
* http_error_302() (urllib.request.HTTPRedirectHandler method): HTTPRedirectHandler Objects.
                                                             (line   42)
* http_error_303() (urllib.request.HTTPRedirectHandler method): HTTPRedirectHandler Objects.
                                                             (line   48)
* http_error_307() (urllib.request.HTTPRedirectHandler method): HTTPRedirectHandler Objects.
                                                             (line   54)
* http_error_401() (urllib.request.HTTPBasicAuthHandler method): HTTPBasicAuthHandler Objects.
                                                             (line    6)
* http_error_401() (urllib.request.HTTPDigestAuthHandler method): HTTPDigestAuthHandler Objects.
                                                             (line    6)
* http_error_407() (urllib.request.ProxyBasicAuthHandler method): ProxyBasicAuthHandler Objects.
                                                             (line    6)
* http_error_407() (urllib.request.ProxyDigestAuthHandler method): ProxyDigestAuthHandler Objects.
                                                             (line    6)
* http_error_auth_reqed() (urllib.request.AbstractBasicAuthHandler method): AbstractBasicAuthHandler Objects.
                                                             (line    6)
* http_error_auth_reqed() (urllib.request.AbstractDigestAuthHandler method): AbstractDigestAuthHandler Objects.
                                                             (line    6)
* http_error_default() (urllib.request.BaseHandler method): BaseHandler Objects.
                                                             (line   65)
* http_error_nnn() (urllib.request.BaseHandler method): BaseHandler Objects.
                                                             (line   82)
* http_open() (urllib.request.HTTPHandler method): HTTPHandler Objects.
                                                             (line    6)
* HTTP_PORT (in module http.client):     http client --- HTTP protocol client.
                                                             (line  166)
* http_proxy:                            urllib request --- Extensible library for opening URLs.
                                                             (line   91)
* http_proxy <1>:                        Examples<15>.       (line   93)
* http_proxy <2>:                        Basic Authentication.
                                                             (line   62)
* http_response() (urllib.request.HTTPErrorProcessor method): HTTPErrorProcessor Objects.
                                                             (line    6)
* http_version (wsgiref.handlers.BaseHandler attribute): wsgiref handlers -- server/gateway base classes.
                                                             (line  297)
* hypot() (in module math):              Trigonometric functions.
                                                             (line   32)
* I (in module re):                      Module Contents.    (line   57)
* I/O control; buffering:                Built-in Functions. (line 1067)
* I/O control; buffering <1>:            Socket Objects.     (line  176)
* iadd() (in module operator):           Inplace Operators.  (line   36)
* iand() (in module operator):           Inplace Operators.  (line   41)
* iconcat() (in module operator):        Inplace Operators.  (line   46)
* id() (built-in function):              Built-in Functions. (line  661)
* id() (unittest.TestCase method):       Test cases.         (line  724)
* idcok() (curses.window method):        Window Objects.     (line  265)
* ident (select.kevent attribute):       Kevent Objects.     (line    8)
* ident (threading.Thread attribute):    Thread Objects.     (line  144)
* identchars (cmd.Cmd attribute):        Cmd Objects.        (line  127)
* identifier:                            Identifiers and keywords.
                                                             (line    6)
* identifier <1>:                        Identifiers Names.  (line    6)
* identify() (tkinter.ttk.Notebook method): ttk Notebook.    (line   32)
* identify() (tkinter.ttk.Treeview method): ttk Treeview.    (line  143)
* identify() (tkinter.ttk.Widget method): ttk Widget.        (line   11)
* identify_column() (tkinter.ttk.Treeview method): ttk Treeview.
                                                             (line  153)
* identify_element() (tkinter.ttk.Treeview method): ttk Treeview.
                                                             (line  182)
* identify_region() (tkinter.ttk.Treeview method): ttk Treeview.
                                                             (line  160)
* identify_row() (tkinter.ttk.Treeview method): ttk Treeview.
                                                             (line  149)
* identity of an object:                 Objects values and types.
                                                             (line   11)
* identity; test:                        Membership test operations.
                                                             (line   39)
* idioms (2to3 fixer):                   Fixers.             (line  130)
* IDLE:                                  IDLE<14>.           (line    6)
* IDLE <1>:                              Glossary.           (line  496)
* IDLESTARTUP:                           Startup and code execution.
                                                             (line    7)
* idlok() (curses.window method):        Window Objects.     (line  273)
* IEEE-754:                              fpectl --- Floating point exception control.
                                                             (line   11)
* ifloordiv() (in module operator):      Inplace Operators.  (line   52)
* if_indextoname() (in module socket):   Other functions<2>. (line  320)
* if_nameindex() (in module socket):     Other functions<2>. (line  301)
* if_nametoindex() (in module socket):   Other functions<2>. (line  310)
* iglob() (in module glob):              glob --- Unix style pathname pattern expansion.
                                                             (line   47)
* ignorableWhitespace() (xml.sax.handler.ContentHandler method): ContentHandler Objects.
                                                             (line  150)
* ignore (pdb command):                  Debugger Commands.  (line  111)
* IGNORECASE (in module re):             Module Contents.    (line   57)
* ignore_errors() (in module codecs):    Error Handlers.     (line  140)
* IGNORE_EXCEPTION_DETAIL (in module doctest): Option Flags. (line   58)
* ignore_patterns() (in module shutil):  Directory and files operations.
                                                             (line  146)
* ihave() (nntplib.NNTP method):         Methods<3>.         (line  291)
* IISCGIHandler (class in wsgiref.handlers): wsgiref handlers -- server/gateway base classes.
                                                             (line   24)
* ilshift() (in module operator):        Inplace Operators.  (line   57)
* imag (numbers.Complex attribute):      The numeric tower.  (line   19)
* imaginary literal:                     Numeric literals.   (line    6)
* imap() (multiprocessing.pool.Pool method): Process Pools.  (line  108)
* IMAP4 (class in imaplib):              imaplib --- IMAP4 protocol client.
                                                             (line   20)
* IMAP4.abort:                           imaplib --- IMAP4 protocol client.
                                                             (line   50)
* IMAP4.error:                           imaplib --- IMAP4 protocol client.
                                                             (line   45)
* IMAP4.readonly:                        imaplib --- IMAP4 protocol client.
                                                             (line   57)
* IMAP4; protocol:                       imaplib --- IMAP4 protocol client.
                                                             (line    6)
* IMAP4_SSL (class in imaplib):          imaplib --- IMAP4 protocol client.
                                                             (line   66)
* IMAP4_SSL; protocol:                   imaplib --- IMAP4 protocol client.
                                                             (line    6)
* IMAP4_stream (class in imaplib):       imaplib --- IMAP4 protocol client.
                                                             (line   94)
* IMAP4_stream; protocol:                imaplib --- IMAP4 protocol client.
                                                             (line    6)
* imaplib (module):                      imaplib --- IMAP4 protocol client.
                                                             (line    6)
* imap_unordered() (multiprocessing.pool.Pool method): Process Pools.
                                                             (line  123)
* imatmul() (in module operator):        Inplace Operators.  (line   72)
* imghdr (module):                       imghdr --- Determine the type of an image.
                                                             (line    6)
* immedok() (curses.window method):      Window Objects.     (line  279)
* immutable:                             Glossary.           (line  502)
* immutable object:                      Objects values and types.
                                                             (line   11)
* immutable; data; type:                 Literals<2>.        (line   17)
* immutable; object:                     Literals<2>.        (line   17)
* immutable; object <1>:                 Dictionary displays.
                                                             (line   29)
* immutable; sequence; types:            Immutable Sequence Types.
                                                             (line    6)
* imod() (in module operator):           Inplace Operators.  (line   62)
* imp (module):                          imp --- Access the import internals.
                                                             (line    6)
* ImpImporter (class in pkgutil):        pkgutil --- Package extension utility.
                                                             (line   47)
* implementation (in module sys):        sys --- System-specific parameters and functions.
                                                             (line  673)
* ImpLoader (class in pkgutil):          pkgutil --- Package extension utility.
                                                             (line   63)
* import (2to3 fixer):                   Fixers.             (line  146)
* import hooks:                          Import hooks.       (line    6)
* import machinery:                      The import system.  (line    6)
* import path:                           Glossary.           (line  510)
* importer:                              Glossary.           (line  523)
* ImportError:                           Concrete exceptions.
                                                             (line   41)
* importing:                             Glossary.           (line  518)
* importlib (module):                    importlib -- The implementation of import.
                                                             (line    6)
* importlib.abc (module):                importlib abc -- Abstract base classes related to import.
                                                             (line    6)
* importlib.machinery (module):          importlib machinery -- Importers and path hooks.
                                                             (line    6)
* importlib.util (module):               importlib util -- Utility code for importers.
                                                             (line    6)
* imports (2to3 fixer):                  Fixers.             (line  150)
* imports2 (2to3 fixer):                 Fixers.             (line  154)
* ImportWarning:                         Warnings.           (line   39)
* import_fresh_module() (in module test.support): test support --- Utilities for the Python test suite.
                                                             (line  270)
* IMPORT_FROM (opcode):                  Python Bytecode Instructions.
                                                             (line  491)
* import_module() (in module importlib): Functions<8>.       (line   15)
* import_module() (in module test.support): test support --- Utilities for the Python test suite.
                                                             (line  259)
* IMPORT_NAME (opcode):                  Python Bytecode Instructions.
                                                             (line  482)
* IMPORT_STAR (opcode):                  Python Bytecode Instructions.
                                                             (line  328)
* ImproperConnectionState:               http client --- HTTP protocol client.
                                                             (line  127)
* imul() (in module operator):           Inplace Operators.  (line   67)
* inch() (curses.window method):         Window Objects.     (line  287)
* inclusive (tracemalloc.DomainFilter attribute): DomainFilter.
                                                             (line   12)
* inclusive (tracemalloc.Filter attribute): Filter.          (line   34)
* inclusive; or:                         Binary bitwise operations.
                                                             (line   18)
* Incomplete:                            binascii --- Convert between binary and ASCII.
                                                             (line  145)
* IncompleteRead:                        http client --- HTTP protocol client.
                                                             (line  123)
* IncompleteReadError:                   IncompleteReadError.
                                                             (line    6)
* IncrementalDecoder (class in codecs):  IncrementalDecoder Objects.
                                                             (line   11)
* incrementaldecoder (codecs.CodecInfo attribute): codecs --- Codec registry and base classes.
                                                             (line   76)
* IncrementalEncoder (class in codecs):  IncrementalEncoder Objects.
                                                             (line   11)
* incrementalencoder (codecs.CodecInfo attribute): codecs --- Codec registry and base classes.
                                                             (line   76)
* IncrementalNewlineDecoder (class in io): Text I/O<2>.      (line  208)
* IncrementalParser (class in xml.sax.xmlreader): xml sax xmlreader --- Interface for XML parsers.
                                                             (line   16)
* increment_lineno() (in module ast):    ast Helpers.        (line   44)
* incr_item():                           Exceptions<13>.     (line   78)
* incr_item() <1>:                       Exceptions<13>.     (line  123)
* indent (doctest.Example attribute):    Example Objects.    (line   47)
* INDENT (in module token):              token --- Constants used with Python parse trees.
                                                             (line   40)
* INDENT token:                          Indentation.        (line   33)
* indent() (in module textwrap):         textwrap --- Text wrapping and filling.
                                                             (line   88)
* indentation:                           Indentation.        (line    6)
* IndentationError:                      Concrete exceptions.
                                                             (line  237)
* index operation:                       The standard type hierarchy.
                                                             (line  109)
* index() (array.array method):          array --- Efficient arrays of numeric values.
                                                             (line  192)
* index() (bytearray method):            Bytes and Bytearray Operations.
                                                             (line   98)
* index() (bytes method):                Bytes and Bytearray Operations.
                                                             (line   98)
* index() (collections.deque method):    deque objects.      (line   70)
* index() (in module operator):          operator --- Standard operators as functions.
                                                             (line   91)
* index() (sequence method):             Common Sequence Operations.
                                                             (line   21)
* index() (str method):                  String Methods<2>.  (line  143)
* index() (tkinter.ttk.Notebook method): ttk Notebook.       (line   37)
* index() (tkinter.ttk.Treeview method): ttk Treeview.       (line  188)
* IndexError:                            Concrete exceptions.
                                                             (line   54)
* indexOf() (in module operator):        operator --- Standard operators as functions.
                                                             (line  195)
* IndexSizeErr:                          Exceptions<12>.     (line   34)
* indices() (slice method):              The standard type hierarchy.
                                                             (line  728)
* inet_aton() (in module socket):        Other functions<2>. (line  165)
* inet_ntoa() (in module socket):        Other functions<2>. (line  185)
* inet_ntop() (in module socket):        Other functions<2>. (line  221)
* inet_pton() (in module socket):        Other functions<2>. (line  202)
* Inexact (class in decimal):            Signals.            (line   42)
* inf (in module math):                  Constants.          (line   14)
* infile (shlex.shlex attribute):        shlex Objects.      (line  127)
* Infinity:                              Built-in Functions. (line  506)
* info() (dis.Bytecode method):          Bytecode analysis.  (line   53)
* info() (gettext.NullTranslations method): The NullTranslations class.
                                                             (line   59)
* info() (in module logging):            Module-Level Functions.
                                                             (line  118)
* info() (logging.Logger method):        Logger Objects.     (line  188)
* infolist() (zipfile.ZipFile method):   ZipFile Objects.    (line   71)
* inheritance:                           Class definitions.  (line    6)
* ini file:                              configparser --- Configuration file parser.
                                                             (line    8)
* init() (in module mimetypes):          mimetypes --- Map filenames to MIME types.
                                                             (line   73)
* inited (in module mimetypes):          mimetypes --- Map filenames to MIME types.
                                                             (line  108)
* initgroups() (in module os):           Process Parameters. (line  269)
* initialize_options() (distutils.cmd.Command method): Creating a new Distutils command.
                                                             (line   21)
* initial_indent (textwrap.TextWrapper attribute): textwrap --- Text wrapping and filling.
                                                             (line  196)
* initscr() (in module curses):          Functions<2>.       (line  224)
* init_color() (in module curses):       Functions<2>.       (line  201)
* init_database() (in module msilib):    msilib --- Read and write Microsoft Installer files.
                                                             (line   56)
* init_pair() (in module curses):        Functions<2>.       (line  212)
* inode() (os.DirEntry method):          Files and Directories.
                                                             (line  690)
* INPLACE_ADD (opcode):                  Python Bytecode Instructions.
                                                             (line  211)
* INPLACE_AND (opcode):                  Python Bytecode Instructions.
                                                             (line  227)
* INPLACE_FLOOR_DIVIDE (opcode):         Python Bytecode Instructions.
                                                             (line  199)
* INPLACE_LSHIFT (opcode):               Python Bytecode Instructions.
                                                             (line  219)
* INPLACE_MATRIX_MULTIPLY (opcode):      Python Bytecode Instructions.
                                                             (line  193)
* INPLACE_MODULO (opcode):               Python Bytecode Instructions.
                                                             (line  207)
* INPLACE_MULTIPLY (opcode):             Python Bytecode Instructions.
                                                             (line  189)
* INPLACE_OR (opcode):                   Python Bytecode Instructions.
                                                             (line  235)
* INPLACE_POWER (opcode):                Python Bytecode Instructions.
                                                             (line  185)
* INPLACE_RSHIFT (opcode):               Python Bytecode Instructions.
                                                             (line  223)
* INPLACE_SUBTRACT (opcode):             Python Bytecode Instructions.
                                                             (line  215)
* INPLACE_TRUE_DIVIDE (opcode):          Python Bytecode Instructions.
                                                             (line  203)
* INPLACE_XOR (opcode):                  Python Bytecode Instructions.
                                                             (line  231)
* input:                                 Expression input.   (line    6)
* input (2to3 fixer):                    Fixers.             (line  160)
* input() (built-in function):           Built-in Functions. (line  671)
* input() (in module fileinput):         fileinput --- Iterate over lines from multiple input streams.
                                                             (line   53)
* InputOnly (class in tkinter.tix):      Miscellaneous Widgets.
                                                             (line    6)
* InputSource (class in xml.sax.xmlreader): xml sax xmlreader --- Interface for XML parsers.
                                                             (line   47)
* input_charset (email.charset.Charset attribute): email charset Representing character sets.
                                                             (line   43)
* input_codec (email.charset.Charset attribute): email charset Representing character sets.
                                                             (line   72)
* inquiry (C type):                      Supporting Cyclic Garbage Collection.
                                                             (line  140)
* insch() (curses.window method):        Window Objects.     (line  293)
* insdelln() (curses.window method):     Window Objects.     (line  300)
* insert() (array.array method):         array --- Efficient arrays of numeric values.
                                                             (line  197)
* insert() (collections.deque method):   deque objects.      (line   78)
* insert() (sequence method):            Mutable Sequence Types.
                                                             (line   16)
* insert() (tkinter.ttk.Notebook method): ttk Notebook.      (line   42)
* insert() (tkinter.ttk.Treeview method): ttk Treeview.      (line  193)
* insert() (xml.etree.ElementTree.Element method): Element Objects.
                                                             (line  133)
* insertBefore() (xml.dom.Node method):  Node Objects.       (line  121)
* insertln() (curses.window method):     Window Objects.     (line  308)
* insert_text() (in module readline):    Line buffer.        (line   13)
* insnstr() (curses.window method):      Window Objects.     (line  313)
* insort() (in module bisect):           bisect --- Array bisection algorithm.
                                                             (line   52)
* insort_left() (in module bisect):      bisect --- Array bisection algorithm.
                                                             (line   45)
* insort_right() (in module bisect):     bisect --- Array bisection algorithm.
                                                             (line   52)
* inspect (module):                      inspect --- Inspect live objects.
                                                             (line    6)
* inspect command line option; –details: Command Line Interface<3>.
                                                             (line   13)
* InspectLoader (class in importlib.abc): importlib abc -- Abstract base classes related to import.
                                                             (line  285)
* insstr() (curses.window method):       Window Objects.     (line  324)
* install() (gettext.NullTranslations method): The NullTranslations class.
                                                             (line   79)
* install() (in module gettext):         Class-based API.    (line   69)
* installHandler() (in module unittest): Signal Handling.    (line   28)
* install_opener() (in module urllib.request): urllib request --- Extensible library for opening URLs.
                                                             (line  112)
* install_scripts() (venv.EnvBuilder method): API<2>.        (line  111)
* instance; call:                        Calls.              (line  142)
* instate() (tkinter.ttk.Widget method): ttk Widget.         (line   18)
* instr() (curses.window method):        Window Objects.     (line  334)
* instream (shlex.shlex attribute):      shlex Objects.      (line  133)
* Instruction (class in dis):            Python Bytecode Instructions.
                                                             (line   10)
* Instruction.arg (in module dis):       Python Bytecode Instructions.
                                                             (line   24)
* Instruction.argrepr (in module dis):   Python Bytecode Instructions.
                                                             (line   32)
* Instruction.argval (in module dis):    Python Bytecode Instructions.
                                                             (line   28)
* Instruction.is_jump_target (in module dis): Python Bytecode Instructions.
                                                             (line   44)
* Instruction.offset (in module dis):    Python Bytecode Instructions.
                                                             (line   36)
* Instruction.opcode (in module dis):    Python Bytecode Instructions.
                                                             (line   14)
* Instruction.opname (in module dis):    Python Bytecode Instructions.
                                                             (line   20)
* Instruction.starts_line (in module dis): Python Bytecode Instructions.
                                                             (line   40)
* int (built-in class):                  Built-in Functions. (line  688)
* int (uuid.UUID attribute):             uuid --- UUID objects according to RFC 4122.
                                                             (line   93)
* Int2AP() (in module imaplib):          imaplib --- IMAP4 protocol client.
                                                             (line  108)
* integer:                               The standard type hierarchy.
                                                             (line  138)
* integer literal:                       Numeric literals.   (line    6)
* integer; literals:                     Numeric Types --- int float complex.
                                                             (line   19)
* integer; representation:               The standard type hierarchy.
                                                             (line   83)
* Integral (class in numbers):           The numeric tower.  (line   55)
* Integrated Development Environment:    IDLE<14>.           (line    6)
* Intel/DVI ADPCM:                       audioop --- Manipulate raw audio data.
                                                             (line   15)
* IntEnum (class in enum):               Module Contents<2>. (line   15)
* interact (pdb command):                Debugger Commands.  (line  274)
* interact() (code.InteractiveConsole method): Interactive Console Objects.
                                                             (line   10)
* interact() (in module code):           code --- Interpreter base classes.
                                                             (line   30)
* interact() (telnetlib.Telnet method):  Telnet Objects.     (line  107)
* interactive:                           Glossary.           (line  528)
* interactive mode:                      Complete Python programs.
                                                             (line   19)
* InteractiveConsole (class in code):    code --- Interpreter base classes.
                                                             (line   23)
* InteractiveInterpreter (class in code): code --- Interpreter base classes.
                                                             (line   13)
* intern (2to3 fixer):                   Fixers.             (line  164)
* intern() (in module sys):              sys --- System-specific parameters and functions.
                                                             (line  743)
* internal type:                         The standard type hierarchy.
                                                             (line  594)
* Internaldate2tuple() (in module imaplib): imaplib --- IMAP4 protocol client.
                                                             (line  102)
* internalSubset (xml.dom.DocumentType attribute): DocumentType Objects.
                                                             (line   27)
* internal_attr (zipfile.ZipInfo attribute): ZipInfo Objects.
                                                             (line  103)
* Internet:                              Internet Protocols and Support.
                                                             (line    6)
* interpolated string literal:           String literal concatenation.
                                                             (line   24)
* interpolation, bytearray (%):          printf-style Bytes Formatting.
                                                             (line    6)
* interpolation, bytes (%):              printf-style Bytes Formatting.
                                                             (line    6)
* interpolation, string (%):             printf-style String Formatting.
                                                             (line    6)
* InterpolationDepthError:               Exceptions<4>.      (line   42)
* InterpolationError:                    Exceptions<4>.      (line   37)
* InterpolationMissingOptionError:       Exceptions<4>.      (line   49)
* InterpolationSyntaxError:              Exceptions<4>.      (line   54)
* interpreted:                           Glossary.           (line  537)
* interpreter:                           Top-level components.
                                                             (line    6)
* interpreter lock:                      Thread State and the Global Interpreter Lock.
                                                             (line    6)
* interpreter prompts:                   sys --- System-specific parameters and functions.
                                                             (line  952)
* interpreter shutdown:                  Glossary.           (line  547)
* interrupt() (sqlite3.Connection method): Connection Objects.
                                                             (line  176)
* InterruptedError:                      OS exceptions.      (line   71)
* interrupt_main() (in module _thread):  _thread --- Low-level threading API.
                                                             (line   43)
* intersection() (set method):           Set Types --- set frozenset.
                                                             (line   91)
* intersection_update() (set method):    Set Types --- set frozenset.
                                                             (line  164)
* intro (cmd.Cmd attribute):             Cmd Objects.        (line  142)
* int_info (in module sys):              sys --- System-specific parameters and functions.
                                                             (line  713)
* InuseAttributeErr:                     Exceptions<12>.     (line   39)
* inv() (in module operator):            operator --- Standard operators as functions.
                                                             (line   96)
* InvalidAccessErr:                      Exceptions<12>.     (line   44)
* invalidate_caches() (importlib.abc.MetaPathFinder method): importlib abc -- Abstract base classes related to import.
                                                             (line   80)
* invalidate_caches() (importlib.abc.PathEntryFinder method): importlib abc -- Abstract base classes related to import.
                                                             (line  143)
* invalidate_caches() (importlib.machinery.FileFinder method): importlib machinery -- Importers and path hooks.
                                                             (line  185)
* invalidate_caches() (importlib.machinery.PathFinder class method): importlib machinery -- Importers and path hooks.
                                                             (line  133)
* invalidate_caches() (in module importlib): Functions<8>.   (line   62)
* InvalidCharacterErr:                   Exceptions<12>.     (line   49)
* InvalidModificationErr:                Exceptions<12>.     (line   57)
* InvalidOperation (class in decimal):   Signals.            (line   50)
* InvalidStateErr:                       Exceptions<12>.     (line   61)
* InvalidStateError:                     InvalidStateError.  (line    6)
* InvalidURL:                            http client --- HTTP protocol client.
                                                             (line  106)
* inversion:                             Unary arithmetic and bitwise operations.
                                                             (line   15)
* invert() (in module operator):         operator --- Standard operators as functions.
                                                             (line   96)
* invocation:                            The standard type hierarchy.
                                                             (line  262)
* in_dll() (ctypes._CData method):       Data types.         (line   53)
* in_table_a1() (in module stringprep):  stringprep --- Internet String Preparation.
                                                             (line   36)
* in_table_b1() (in module stringprep):  stringprep --- Internet String Preparation.
                                                             (line   41)
* in_table_c11() (in module stringprep): stringprep --- Internet String Preparation.
                                                             (line   56)
* in_table_c11_c12() (in module stringprep): stringprep --- Internet String Preparation.
                                                             (line   65)
* in_table_c12() (in module stringprep): stringprep --- Internet String Preparation.
                                                             (line   60)
* in_table_c21() (in module stringprep): stringprep --- Internet String Preparation.
                                                             (line   70)
* in_table_c21_c22() (in module stringprep): stringprep --- Internet String Preparation.
                                                             (line   80)
* in_table_c22() (in module stringprep): stringprep --- Internet String Preparation.
                                                             (line   75)
* in_table_c3() (in module stringprep):  stringprep --- Internet String Preparation.
                                                             (line   85)
* in_table_c4() (in module stringprep):  stringprep --- Internet String Preparation.
                                                             (line   89)
* in_table_c5() (in module stringprep):  stringprep --- Internet String Preparation.
                                                             (line   94)
* in_table_c6() (in module stringprep):  stringprep --- Internet String Preparation.
                                                             (line   98)
* in_table_c7() (in module stringprep):  stringprep --- Internet String Preparation.
                                                             (line  103)
* in_table_c8() (in module stringprep):  stringprep --- Internet String Preparation.
                                                             (line  108)
* in_table_c9() (in module stringprep):  stringprep --- Internet String Preparation.
                                                             (line  113)
* in_table_d1() (in module stringprep):  stringprep --- Internet String Preparation.
                                                             (line  117)
* in_table_d2() (in module stringprep):  stringprep --- Internet String Preparation.
                                                             (line  122)
* in_transaction (sqlite3.Connection attribute): Connection Objects.
                                                             (line   18)
* io (class in typing):                  Classes functions and decorators.
                                                             (line  279)
* io (module):                           io --- Core tools for working with streams.
                                                             (line    6)
* IOBase (class in io):                  I/O Base Classes.   (line    6)
* ioctl() (in module fcntl):             fcntl --- The fcntl and ioctl system calls.
                                                             (line   43)
* ioctl() (socket.socket method):        Socket Objects.     (line  150)
* IOError:                               Concrete exceptions.
                                                             (line  363)
* ior() (in module operator):            Inplace Operators.  (line   79)
* ip (ipaddress.IPv4Interface attribute): Interface objects. (line   16)
* ip (ipaddress.IPv6Interface attribute): Interface objects. (line   71)
* ipaddress (module):                    ipaddress --- IPv4/IPv6 manipulation library.
                                                             (line    6)
* ipow() (in module operator):           Inplace Operators.  (line   84)
* IPv4Address (class in ipaddress):      Address objects.    (line   12)
* IPv4Interface (class in ipaddress):    Interface objects.  (line    6)
* IPv4Network (class in ipaddress):      Network objects.    (line   12)
* ipv4_mapped (ipaddress.IPv6Address attribute): Address objects.
                                                             (line  194)
* IPv6Address (class in ipaddress):      Address objects.    (line  123)
* IPv6Interface (class in ipaddress):    Interface objects.  (line   61)
* IPv6Network (class in ipaddress):      Network objects.    (line  215)
* ip_address() (in module ipaddress):    Convenience factory functions.
                                                             (line    9)
* ip_interface() (in module ipaddress):  Convenience factory functions.
                                                             (line   37)
* ip_network() (in module ipaddress):    Convenience factory functions.
                                                             (line   23)
* irshift() (in module operator):        Inplace Operators.  (line   89)
* isabs() (in module os.path):           os path --- Common pathname manipulations.
                                                             (line  174)
* isabstract() (in module inspect):      Types and members.  (line  355)
* IsADirectoryError:                     OS exceptions.      (line   81)
* isalnum() (bytearray method):          Bytes and Bytearray Operations.
                                                             (line  435)
* isalnum() (bytes method):              Bytes and Bytearray Operations.
                                                             (line  435)
* isalnum() (in module curses.ascii):    curses ascii --- Utilities for ASCII characters.
                                                             (line  129)
* isalnum() (str method):                String Methods<2>.  (line  148)
* isalpha() (bytearray method):          Bytes and Bytearray Operations.
                                                             (line  453)
* isalpha() (bytes method):              Bytes and Bytearray Operations.
                                                             (line  453)
* isalpha() (in module curses.ascii):    curses ascii --- Utilities for ASCII characters.
                                                             (line  134)
* isalpha() (str method):                String Methods<2>.  (line  155)
* isascii() (in module curses.ascii):    curses ascii --- Utilities for ASCII characters.
                                                             (line  139)
* isatty() (chunk.Chunk method):         chunk --- Read IFF chunked data.
                                                             (line   84)
* isatty() (in module os):               File Descriptor Operations.
                                                             (line  173)
* isatty() (io.IOBase method):           I/O Base Classes.   (line   74)
* isawaitable() (in module inspect):     Types and members.  (line  314)
* isblank() (in module curses.ascii):    curses ascii --- Utilities for ASCII characters.
                                                             (line  143)
* isblk() (tarfile.TarInfo method):      TarInfo Objects.    (line  120)
* isbuiltin() (in module inspect):       Types and members.  (line  345)
* ischr() (tarfile.TarInfo method):      TarInfo Objects.    (line  116)
* isclass() (in module inspect):         Types and members.  (line  278)
* isclose() (in module cmath):           Classification functions.
                                                             (line   23)
* isclose() (in module math):            Number-theoretic and representation functions.
                                                             (line   86)
* iscntrl() (in module curses.ascii):    curses ascii --- Utilities for ASCII characters.
                                                             (line  147)
* iscode() (in module inspect):          Types and members.  (line  341)
* iscoroutine() (in module asyncio):     Task functions.     (line   71)
* iscoroutine() (in module inspect):     Types and members.  (line  307)
* iscoroutinefunction() (in module asyncio): Task functions. (line   76)
* iscoroutinefunction() (in module inspect): Types and members.
                                                             (line  300)
* isctrl() (in module curses.ascii):     curses ascii --- Utilities for ASCII characters.
                                                             (line  187)
* isDaemon() (threading.Thread method):  Thread Objects.     (line  175)
* isdatadescriptor() (in module inspect): Types and members. (line  376)
* isdecimal() (str method):              String Methods<2>.  (line  165)
* isdev() (tarfile.TarInfo method):      TarInfo Objects.    (line  128)
* isdigit() (bytearray method):          Bytes and Bytearray Operations.
                                                             (line  468)
* isdigit() (bytes method):              Bytes and Bytearray Operations.
                                                             (line  468)
* isdigit() (in module curses.ascii):    curses ascii --- Utilities for ASCII characters.
                                                             (line  151)
* isdigit() (str method):                String Methods<2>.  (line  173)
* isdir() (in module os.path):           os path --- Common pathname manipulations.
                                                             (line  186)
* isdir() (tarfile.TarInfo method):      TarInfo Objects.    (line  104)
* isdisjoint() (set method):             Set Types --- set frozenset.
                                                             (line   57)
* isdown() (in module turtle):           Drawing state.      (line   86)
* iselement() (in module xml.etree.ElementTree): Functions<5>.
                                                             (line   47)
* isenabled() (in module gc):            gc --- Garbage Collector interface.
                                                             (line   28)
* isEnabledFor() (logging.Logger method): Logger Objects.    (line   81)
* isendwin() (in module curses):         Functions<2>.       (line  237)
* ISEOF() (in module token):             token --- Constants used with Python parse trees.
                                                             (line   34)
* isexpr() (in module parser):           Queries on ST Objects.
                                                             (line   12)
* isexpr() (parser.ST method):           ST Objects.         (line   21)
* isfifo() (tarfile.TarInfo method):     TarInfo Objects.    (line  124)
* isfile() (in module os.path):          os path --- Common pathname manipulations.
                                                             (line  180)
* isfile() (tarfile.TarInfo method):     TarInfo Objects.    (line   96)
* isfinite() (in module cmath):          Classification functions.
                                                             (line    6)
* isfinite() (in module math):           Number-theoretic and representation functions.
                                                             (line  119)
* isfirstline() (in module fileinput):   fileinput --- Iterate over lines from multiple input streams.
                                                             (line  105)
* isframe() (in module inspect):         Types and members.  (line  337)
* isfunction() (in module inspect):      Types and members.  (line  287)
* isgenerator() (in module inspect):     Types and members.  (line  296)
* isgeneratorfunction() (in module inspect): Types and members.
                                                             (line  292)
* isgetsetdescriptor() (in module inspect): Types and members.
                                                             (line  388)
* isgraph() (in module curses.ascii):    curses ascii --- Utilities for ASCII characters.
                                                             (line  156)
* isidentifier() (str method):           String Methods<2>.  (line  182)
* isinf() (in module cmath):             Classification functions.
                                                             (line   13)
* isinf() (in module math):              Number-theoretic and representation functions.
                                                             (line  126)
* isinstance (2to3 fixer):               Fixers.             (line  168)
* isinstance() (built-in function):      Built-in Functions. (line  720)
* iskeyword() (in module keyword):       keyword --- Testing for Python keywords.
                                                             (line   13)
* isleap() (in module calendar):         calendar --- General calendar-related functions.
                                                             (line  202)
* islice() (in module itertools):        Itertool functions. (line  341)
* islink() (in module os.path):          os path --- Common pathname manipulations.
                                                             (line  192)
* islnk() (tarfile.TarInfo method):      TarInfo Objects.    (line  112)
* islower() (bytearray method):          Bytes and Bytearray Operations.
                                                             (line  482)
* islower() (bytes method):              Bytes and Bytearray Operations.
                                                             (line  482)
* islower() (in module curses.ascii):    curses ascii --- Utilities for ASCII characters.
                                                             (line  160)
* islower() (str method):                String Methods<2>.  (line  190)
* ismemberdescriptor() (in module inspect): Types and members.
                                                             (line  397)
* ismeta() (in module curses.ascii):     curses ascii --- Utilities for ASCII characters.
                                                             (line  191)
* ismethod() (in module inspect):        Types and members.  (line  283)
* ismethoddescriptor() (in module inspect): Types and members.
                                                             (line  359)
* ismodule() (in module inspect):        Types and members.  (line  274)
* ismount() (in module os.path):         os path --- Common pathname manipulations.
                                                             (line  198)
* isnan() (in module cmath):             Classification functions.
                                                             (line   18)
* isnan() (in module math):              Number-theoretic and representation functions.
                                                             (line  131)
* ISNONTERMINAL() (in module token):     token --- Constants used with Python parse trees.
                                                             (line   30)
* isnumeric() (str method):              String Methods<2>.  (line  195)
* isocalendar() (datetime.date method):  date Objects.       (line  182)
* isocalendar() (datetime.datetime method): datetime Objects.
                                                             (line  468)
* isoformat() (datetime.date method):    date Objects.       (line  202)
* isoformat() (datetime.datetime method): datetime Objects.  (line  473)
* isoformat() (datetime.time method):    time Objects.       (line  115)
* isolation_level (sqlite3.Connection attribute): Connection Objects.
                                                             (line   11)
* isoweekday() (datetime.date method):   date Objects.       (line  175)
* isoweekday() (datetime.datetime method): datetime Objects. (line  462)
* isprint() (in module curses.ascii):    curses ascii --- Utilities for ASCII characters.
                                                             (line  164)
* isprintable() (str method):            String Methods<2>.  (line  205)
* ispunct() (in module curses.ascii):    curses ascii --- Utilities for ASCII characters.
                                                             (line  168)
* isreadable() (in module pprint):       pprint --- Data pretty printer.
                                                             (line  109)
* isreadable() (pprint.PrettyPrinter method): PrettyPrinter Objects.
                                                             (line   24)
* isrecursive() (in module pprint):      pprint --- Data pretty printer.
                                                             (line  118)
* isrecursive() (pprint.PrettyPrinter method): PrettyPrinter Objects.
                                                             (line   32)
* isreg() (tarfile.TarInfo method):      TarInfo Objects.    (line  100)
* isReservedKey() (http.cookies.Morsel method): Morsel Objects.
                                                             (line   67)
* isroutine() (in module inspect):       Types and members.  (line  350)
* isSameNode() (xml.dom.Node method):    Node Objects.       (line  102)
* isspace() (bytearray method):          Bytes and Bytearray Operations.
                                                             (line  499)
* isspace() (bytes method):              Bytes and Bytearray Operations.
                                                             (line  499)
* isspace() (in module curses.ascii):    curses ascii --- Utilities for ASCII characters.
                                                             (line  173)
* isspace() (str method):                String Methods<2>.  (line  217)
* isstdin() (in module fileinput):       fileinput --- Iterate over lines from multiple input streams.
                                                             (line  110)
* issubclass() (built-in function):      Built-in Functions. (line  731)
* issubset() (set method):               Set Types --- set frozenset.
                                                             (line   63)
* issuite() (in module parser):          Queries on ST Objects.
                                                             (line   22)
* issuite() (parser.ST method):          ST Objects.         (line   25)
* issuperset() (set method):             Set Types --- set frozenset.
                                                             (line   74)
* issym() (tarfile.TarInfo method):      TarInfo Objects.    (line  108)
* ISTERMINAL() (in module token):        token --- Constants used with Python parse trees.
                                                             (line   26)
* istitle() (bytearray method):          Bytes and Bytearray Operations.
                                                             (line  507)
* istitle() (bytes method):              Bytes and Bytearray Operations.
                                                             (line  507)
* istitle() (str method):                String Methods<2>.  (line  225)
* istraceback() (in module inspect):     Types and members.  (line  333)
* isub() (in module operator):           Inplace Operators.  (line   94)
* isupper() (bytearray method):          Bytes and Bytearray Operations.
                                                             (line  521)
* isupper() (bytes method):              Bytes and Bytearray Operations.
                                                             (line  521)
* isupper() (in module curses.ascii):    curses ascii --- Utilities for ASCII characters.
                                                             (line  178)
* isupper() (str method):                String Methods<2>.  (line  232)
* isvisible() (in module turtle):        Visibility.         (line   22)
* isxdigit() (in module curses.ascii):   curses ascii --- Utilities for ASCII characters.
                                                             (line  182)
* is_() (in module operator):            operator --- Standard operators as functions.
                                                             (line   61)
* is_absolute() (pathlib.PurePath method): Methods and properties.
                                                             (line  188)
* is_alive() (multiprocessing.Process method): Process and exceptions.
                                                             (line   76)
* is_alive() (threading.Thread method):  Thread Objects.     (line  153)
* is_assigned() (symtable.Symbol method): Examining Symbol Tables.
                                                             (line  139)
* is_attachment() (email.message.EmailMessage method): email contentmanager Managing MIME Content.
                                                             (line   62)
* is_authenticated() (urllib.request.HTTPPasswordMgrWithPriorAuth method): HTTPPasswordMgrWithPriorAuth Objects.
                                                             (line   29)
* is_blocked() (http.cookiejar.DefaultCookiePolicy method): DefaultCookiePolicy Objects.
                                                             (line   60)
* is_block_device() (pathlib.Path method): Methods<2>.       (line  149)
* is_canonical() (decimal.Context method): Context objects.  (line  292)
* is_canonical() (decimal.Decimal method): Decimal objects.  (line  274)
* IS_CHARACTER_JUNK() (in module difflib): difflib --- Helpers for computing deltas.
                                                             (line  360)
* is_char_device() (pathlib.Path method): Methods<2>.        (line  158)
* is_check_supported() (in module lzma): Miscellaneous<2>.   (line    6)
* is_closed() (asyncio.BaseEventLoop method): Run an event loop.
                                                             (line   42)
* is_closing() (asyncio.BaseTransport method): BaseTransport.
                                                             (line   18)
* is_declared_global() (symtable.Symbol method): Examining Symbol Tables.
                                                             (line  125)
* is_dir() (os.DirEntry method):         Files and Directories.
                                                             (line  701)
* is_dir() (pathlib.Path method):        Methods<2>.         (line  106)
* is_enabled() (in module faulthandler): Fault handler state.
                                                             (line   27)
* is_expired() (http.cookiejar.Cookie method): Cookie Objects<2>.
                                                             (line  108)
* is_fifo() (pathlib.Path method):       Methods<2>.         (line  141)
* is_file() (os.DirEntry method):        Files and Directories.
                                                             (line  730)
* is_file() (pathlib.Path method):       Methods<2>.         (line  115)
* is_finalizing() (in module sys):       sys --- System-specific parameters and functions.
                                                             (line  758)
* is_finite() (decimal.Context method):  Context objects.    (line  296)
* is_finite() (decimal.Decimal method):  Decimal objects.    (line  281)
* is_free() (symtable.Symbol method):    Examining Symbol Tables.
                                                             (line  134)
* is_global (ipaddress.IPv4Address attribute): Address objects.
                                                             (line   96)
* is_global (ipaddress.IPv6Address attribute): Address objects.
                                                             (line  174)
* is_global() (symtable.Symbol method):  Examining Symbol Tables.
                                                             (line  121)
* is_hop_by_hop() (in module wsgiref.util): wsgiref util -- WSGI environment utilities.
                                                             (line  109)
* is_imported() (symtable.Symbol method): Examining Symbol Tables.
                                                             (line  112)
* is_infinite() (decimal.Context method): Context objects.   (line  300)
* is_infinite() (decimal.Decimal method): Decimal objects.   (line  286)
* is_integer() (float method):           Additional Methods on Float.
                                                             (line   16)
* is_jython (in module test.support):    test support --- Utilities for the Python test suite.
                                                             (line   36)
* is_linetouched() (curses.window method): Window Objects.   (line  344)
* IS_LINE_JUNK() (in module difflib):    difflib --- Helpers for computing deltas.
                                                             (line  353)
* is_link_local (ipaddress.IPv4Address attribute): Address objects.
                                                             (line  118)
* is_link_local (ipaddress.IPv4Network attribute): Network objects.
                                                             (line   78)
* is_link_local (ipaddress.IPv6Address attribute): Address objects.
                                                             (line  182)
* is_link_local (ipaddress.IPv6Network attribute): Network objects.
                                                             (line  270)
* is_local() (symtable.Symbol method):   Examining Symbol Tables.
                                                             (line  130)
* is_loopback (ipaddress.IPv4Address attribute): Address objects.
                                                             (line  113)
* is_loopback (ipaddress.IPv4Network attribute): Network objects.
                                                             (line   76)
* is_loopback (ipaddress.IPv6Address attribute): Address objects.
                                                             (line  180)
* is_loopback (ipaddress.IPv6Network attribute): Network objects.
                                                             (line  268)
* is_multicast (ipaddress.IPv4Address attribute): Address objects.
                                                             (line   85)
* is_multicast (ipaddress.IPv4Network attribute): Network objects.
                                                             (line   68)
* is_multicast (ipaddress.IPv6Address attribute): Address objects.
                                                             (line  170)
* is_multicast (ipaddress.IPv6Network attribute): Network objects.
                                                             (line  260)
* is_multipart() (email.message.Message method): email message Representing an email message.
                                                             (line  129)
* is_namespace() (symtable.Symbol method): Examining Symbol Tables.
                                                             (line  143)
* is_nan() (decimal.Context method):     Context objects.    (line  304)
* is_nan() (decimal.Decimal method):     Decimal objects.    (line  291)
* is_nested() (symtable.SymbolTable method): Examining Symbol Tables.
                                                             (line   35)
* is_normal() (decimal.Context method):  Context objects.    (line  309)
* is_normal() (decimal.Decimal method):  Decimal objects.    (line  296)
* is_not() (in module operator):         operator --- Standard operators as functions.
                                                             (line   65)
* is_not_allowed() (http.cookiejar.DefaultCookiePolicy method): DefaultCookiePolicy Objects.
                                                             (line   74)
* is_optimized() (symtable.SymbolTable method): Examining Symbol Tables.
                                                             (line   31)
* is_package() (importlib.abc.InspectLoader method): importlib abc -- Abstract base classes related to import.
                                                             (line  316)
* is_package() (importlib.abc.SourceLoader method): importlib abc -- Abstract base classes related to import.
                                                             (line  508)
* is_package() (importlib.machinery.ExtensionFileLoader method): importlib machinery -- Importers and path hooks.
                                                             (line  315)
* is_package() (importlib.machinery.SourceFileLoader method): importlib machinery -- Importers and path hooks.
                                                             (line  215)
* is_package() (importlib.machinery.SourcelessFileLoader method): importlib machinery -- Importers and path hooks.
                                                             (line  258)
* is_package() (zipimport.zipimporter method): zipimporter Objects.
                                                             (line   56)
* is_parameter() (symtable.Symbol method): Examining Symbol Tables.
                                                             (line  117)
* is_private (ipaddress.IPv4Address attribute): Address objects.
                                                             (line   90)
* is_private (ipaddress.IPv4Network attribute): Network objects.
                                                             (line   70)
* is_private (ipaddress.IPv6Address attribute): Address objects.
                                                             (line  172)
* is_private (ipaddress.IPv6Network attribute): Network objects.
                                                             (line  262)
* is_python_build() (in module sysconfig): Other functions<3>.
                                                             (line   57)
* is_qnan() (decimal.Context method):    Context objects.    (line  314)
* is_qnan() (decimal.Decimal method):    Decimal objects.    (line  302)
* is_referenced() (symtable.Symbol method): Examining Symbol Tables.
                                                             (line  108)
* is_reserved (ipaddress.IPv4Address attribute): Address objects.
                                                             (line  109)
* is_reserved (ipaddress.IPv4Network attribute): Network objects.
                                                             (line   74)
* is_reserved (ipaddress.IPv6Address attribute): Address objects.
                                                             (line  178)
* is_reserved (ipaddress.IPv6Network attribute): Network objects.
                                                             (line  266)
* is_reserved() (pathlib.PurePath method): Methods and properties.
                                                             (line  207)
* is_resource_enabled() (in module test.support): test support --- Utilities for the Python test suite.
                                                             (line   53)
* is_running() (asyncio.BaseEventLoop method): Run an event loop.
                                                             (line   29)
* is_set() (asyncio.Event method):       Event.              (line   24)
* is_set() (threading.Event method):     Event Objects.      (line   23)
* is_signed() (decimal.Context method):  Context objects.    (line  319)
* is_signed() (decimal.Decimal method):  Decimal objects.    (line  307)
* is_site_local (ipaddress.IPv6Address attribute): Address objects.
                                                             (line  186)
* is_site_local (ipaddress.IPv6Network attribute): Network objects.
                                                             (line  307)
* is_snan() (decimal.Context method):    Context objects.    (line  323)
* is_snan() (decimal.Decimal method):    Decimal objects.    (line  313)
* is_socket() (pathlib.Path method):     Methods<2>.         (line  132)
* is_subnormal() (decimal.Context method): Context objects.  (line  328)
* is_subnormal() (decimal.Decimal method): Decimal objects.  (line  318)
* is_symlink() (os.DirEntry method):     Files and Directories.
                                                             (line  746)
* is_symlink() (pathlib.Path method):    Methods<2>.         (line  124)
* is_tarfile() (in module tarfile):      tarfile --- Read and write tar archive files.
                                                             (line  172)
* is_term_resized() (in module curses):  Functions<2>.       (line  232)
* is_tracing() (in module tracemalloc):  Functions<7>.       (line   43)
* is_tracked() (in module gc):           gc --- Garbage Collector interface.
                                                             (line  141)
* is_unspecified (ipaddress.IPv4Address attribute): Address objects.
                                                             (line  104)
* is_unspecified (ipaddress.IPv4Network attribute): Network objects.
                                                             (line   72)
* is_unspecified (ipaddress.IPv6Address attribute): Address objects.
                                                             (line  176)
* is_unspecified (ipaddress.IPv6Network attribute): Network objects.
                                                             (line  264)
* is_wintouched() (curses.window method): Window Objects.    (line  351)
* is_zero() (decimal.Context method):    Context objects.    (line  332)
* is_zero() (decimal.Decimal method):    Decimal objects.    (line  323)
* is_zipfile() (in module zipfile):      zipfile --- Work with ZIP archives.
                                                             (line   64)
* item selection:                        The standard type hierarchy.
                                                             (line  109)
* item() (tkinter.ttk.Treeview method):  ttk Treeview.       (line  212)
* item() (xml.dom.NamedNodeMap method):  NamedNodeMap Objects.
                                                             (line   12)
* item() (xml.dom.NodeList method):      NodeList Objects.   (line   15)
* itemgetter() (in module operator):     operator --- Standard operators as functions.
                                                             (line  256)
* items() (configparser.ConfigParser method): ConfigParser Objects.
                                                             (line  220)
* items() (dict method):                 Mapping Types --- dict.
                                                             (line  148)
* items() (email.message.Message method): email message Representing an email message.
                                                             (line  313)
* items() (mailbox.Mailbox method):      Mailbox objects.    (line  129)
* items() (types.MappingProxyType method): Standard Interpreter Types.
                                                             (line  152)
* items() (xml.etree.ElementTree.Element method): Element Objects.
                                                             (line   71)
* itemsize (array.array attribute):      array --- Efficient arrays of numeric values.
                                                             (line  109)
* itemsize (memoryview attribute):       Memory Views.       (line  396)
* ItemsView (class in collections.abc):  Collections Abstract Base Classes.
                                                             (line  156)
* ItemsView (class in typing):           Classes functions and decorators.
                                                             (line  254)
* iter() (built-in function):            Built-in Functions. (line  739)
* iter() (xml.etree.ElementTree.Element method): Element Objects.
                                                             (line  139)
* iter() (xml.etree.ElementTree.ElementTree method): ElementTree Objects.
                                                             (line   45)
* iterable:                              Glossary.           (line  562)
* Iterable (class in collections.abc):   Collections Abstract Base Classes.
                                                             (line  103)
* Iterable (class in typing):            Classes functions and decorators.
                                                             (line  156)
* iterator:                              Glossary.           (line  581)
* Iterator (class in collections.abc):   Collections Abstract Base Classes.
                                                             (line  108)
* Iterator (class in typing):            Classes functions and decorators.
                                                             (line  160)
* iterator protocol:                     Iterator Types.     (line    6)
* iterdecode() (in module codecs):       codecs --- Codec registry and base classes.
                                                             (line  218)
* iterdir() (pathlib.Path method):       Methods<2>.         (line  167)
* iterdump() (sqlite3.Connection method): Connection Objects.
                                                             (line  368)
* iterencode() (in module codecs):       codecs --- Codec registry and base classes.
                                                             (line  210)
* iterencode() (json.JSONEncoder method): Encoders and Decoders.
                                                             (line  219)
* iterfind() (xml.etree.ElementTree.Element method): Element Objects.
                                                             (line  150)
* iterfind() (xml.etree.ElementTree.ElementTree method): ElementTree Objects.
                                                             (line   52)
* iteritems() (mailbox.Mailbox method):  Mailbox objects.    (line  129)
* iterkeys() (mailbox.Mailbox method):   Mailbox objects.    (line  107)
* itermonthdates() (calendar.Calendar method): calendar --- General calendar-related functions.
                                                             (line   44)
* itermonthdays() (calendar.Calendar method): calendar --- General calendar-related functions.
                                                             (line   58)
* itermonthdays2() (calendar.Calendar method): calendar --- General calendar-related functions.
                                                             (line   52)
* iterparse() (in module xml.etree.ElementTree): Functions<5>.
                                                             (line   53)
* itertext() (xml.etree.ElementTree.Element method): Element Objects.
                                                             (line  159)
* itertools (2to3 fixer):                Fixers.             (line  180)
* itertools (module):                    itertools --- Functions creating iterators for efficient looping.
                                                             (line    6)
* itertools_imports (2to3 fixer):        Fixers.             (line  174)
* itervalues() (mailbox.Mailbox method): Mailbox objects.    (line  114)
* iterweekdays() (calendar.Calendar method): calendar --- General calendar-related functions.
                                                             (line   38)
* iter_attachments() (email.message.EmailMessage method): email contentmanager Managing MIME Content.
                                                             (line  114)
* iter_child_nodes() (in module ast):    ast Helpers.        (line   60)
* iter_fields() (in module ast):         ast Helpers.        (line   55)
* iter_importers() (in module pkgutil):  pkgutil --- Package extension utility.
                                                             (line  117)
* iter_modules() (in module pkgutil):    pkgutil --- Package extension utility.
                                                             (line  136)
* iter_parts() (email.message.EmailMessage method): email contentmanager Managing MIME Content.
                                                             (line  130)
* iter_unpack() (in module struct):      Functions and Exceptions.
                                                             (line   42)
* iter_unpack() (struct.Struct method):  Classes<2>.         (line   41)
* ItimerError:                           Module contents<2>. (line  103)
* ITIMER_PROF (in module signal):        Module contents<2>. (line   70)
* ITIMER_REAL (in module signal):        Module contents<2>. (line   60)
* ITIMER_VIRTUAL (in module signal):     Module contents<2>. (line   65)
* itruediv() (in module operator):       Inplace Operators.  (line   99)
* ixor() (in module operator):           Inplace Operators.  (line  104)
* Jansen, Jack:                          uu --- Encode and decode uuencode files.
                                                             (line   20)
* Java; language:                        The standard type hierarchy.
                                                             (line   89)
* java_ver() (in module platform):       Java Platform.      (line    6)
* join() (asyncio.Queue method):         Queue.              (line   56)
* join() (bytearray method):             Bytes and Bytearray Operations.
                                                             (line  110)
* join() (bytes method):                 Bytes and Bytearray Operations.
                                                             (line  110)
* join() (in module os.path):            os path --- Common pathname manipulations.
                                                             (line  213)
* join() (multiprocessing.JoinableQueue method): Pipes and Queues.
                                                             (line  235)
* join() (multiprocessing.pool.Pool method): Process Pools.  (line  162)
* join() (multiprocessing.Process method): Process and exceptions.
                                                             (line   51)
* join() (queue.Queue method):           Queue Objects.      (line   77)
* join() (str method):                   String Methods<2>.  (line  237)
* join() (threading.Thread method):      Thread Objects.     (line  106)
* JoinableQueue (class in multiprocessing): Pipes and Queues.
                                                             (line  214)
* joinpath() (pathlib.PurePath method):  Methods and properties.
                                                             (line  221)
* join_thread() (multiprocessing.Queue method): Pipes and Queues.
                                                             (line  163)
* json (module):                         json --- JSON encoder and decoder.
                                                             (line    6)
* json.tool (module):                    Implementation Limitations.
                                                             (line   25)
* JSONDecodeError:                       Exceptions<9>.      (line    6)
* JSONDecoder (class in json):           Encoders and Decoders.
                                                             (line    6)
* JSONEncoder (class in json):           Encoders and Decoders.
                                                             (line  101)
* js_output() (http.cookies.BaseCookie method): Cookie Objects.
                                                             (line   30)
* js_output() (http.cookies.Morsel method): Morsel Objects.  (line   78)
* jump (pdb command):                    Debugger Commands.  (line  195)
* JUMP_ABSOLUTE (opcode):                Python Bytecode Instructions.
                                                             (line  521)
* JUMP_FORWARD (opcode):                 Python Bytecode Instructions.
                                                             (line  497)
* JUMP_IF_FALSE_OR_POP (opcode):         Python Bytecode Instructions.
                                                             (line  516)
* JUMP_IF_TRUE_OR_POP (opcode):          Python Bytecode Instructions.
                                                             (line  511)
* kbhit() (in module msvcrt):            Console I/O.        (line    6)
* KDEDIR:                                webbrowser --- Convenient Web-browser controller.
                                                             (line  175)
* kevent() (in module select):           select --- Waiting for I/O completion.
                                                             (line   90)
* key:                                   Dictionary displays.
                                                             (line    6)
* key (http.cookies.Morsel attribute):   Morsel Objects.     (line   53)
* key function:                          Glossary.           (line  603)
* key/datum pair:                        Dictionary displays.
                                                             (line    6)
* KeyboardInterrupt:                     Concrete exceptions.
                                                             (line   65)
* KeyboardInterrupt (built-in exception): Signal Handling<2>.
                                                             (line    8)
* KeyboardInterrupt (built-in exception) <1>: Signal Handling<2>.
                                                             (line   20)
* KeyError:                              Concrete exceptions.
                                                             (line   60)
* keyname() (in module curses):          Functions<2>.       (line  242)
* keypad() (curses.window method):       Window Objects.     (line  356)
* keyrefs() (weakref.WeakKeyDictionary method): weakref --- Weak references.
                                                             (line  178)
* keys() (dict method):                  Mapping Types --- dict.
                                                             (line  153)
* keys() (email.message.Message method): email message Representing an email message.
                                                             (line  305)
* keys() (mailbox.Mailbox method):       Mailbox objects.    (line  107)
* keys() (sqlite3.Row method):           Row Objects.        (line   18)
* keys() (types.MappingProxyType method): Standard Interpreter Types.
                                                             (line  157)
* keys() (xml.etree.ElementTree.Element method): Element Objects.
                                                             (line   76)
* KeysView (class in collections.abc):   Collections Abstract Base Classes.
                                                             (line  156)
* KeysView (class in typing):            Classes functions and decorators.
                                                             (line  250)
* keyword:                               Keywords.           (line    6)
* keyword (module):                      keyword --- Testing for Python keywords.
                                                             (line    6)
* keyword argument:                      Glossary.           (line  625)
* keyword; async:                        Coroutine function definition.
                                                             (line    8)
* keyword; await:                        Coroutine function definition.
                                                             (line    8)
* keyword; elif:                         The if statement.   (line    6)
* keyword; elif <1>:                     The if statement.   (line    6)
* keyword; else:                         The break statement.
                                                             (line   12)
* keyword; else <1>:                     The if statement.   (line    6)
* keyword; else <2>:                     The if statement.   (line    6)
* keyword; else <3>:                     The while statement.
                                                             (line    6)
* keyword; else <4>:                     The while statement.
                                                             (line    6)
* keyword; else <5>:                     The for statement.  (line    6)
* keyword; else <6>:                     The for statement.  (line    6)
* keyword; else <7>:                     The try statement.  (line   79)
* keyword; except:                       The try statement.  (line    6)
* keyword; except <1>:                   The try statement.  (line    6)
* keyword; finally:                      The return statement.
                                                             (line   17)
* keyword; finally <1>:                  The break statement.
                                                             (line   18)
* keyword; finally <2>:                  The continue statement.
                                                             (line    6)
* keyword; finally <3>:                  The try statement.  (line    6)
* keyword; finally <4>:                  The try statement.  (line   84)
* keyword; from:                         The import statement.
                                                             (line    6)
* keyword; from <1>:                     The import statement.
                                                             (line   52)
* keyword; in:                           The for statement.  (line    6)
* keyword; in <1>:                       The for statement.  (line    6)
* keyword; yield:                        Yield expressions.  (line    6)
* keywords (functools.partial attribute): partial Objects.   (line   20)
* KEY_ALL_ACCESS (in module winreg):     Access Rights.      (line    8)
* KEY_CREATE_LINK (in module winreg):    Access Rights.      (line   51)
* KEY_CREATE_SUB_KEY (in module winreg): Access Rights.      (line   38)
* KEY_ENUMERATE_SUB_KEYS (in module winreg): Access Rights.  (line   42)
* KEY_EXECUTE (in module winreg):        Access Rights.      (line   26)
* KEY_NOTIFY (in module winreg):         Access Rights.      (line   46)
* KEY_QUERY_VALUE (in module winreg):    Access Rights.      (line   30)
* KEY_READ (in module winreg):           Access Rights.      (line   20)
* KEY_SET_VALUE (in module winreg):      Access Rights.      (line   34)
* KEY_WOW64_32KEY (in module winreg):    64-bit Specific.    (line   13)
* KEY_WOW64_64KEY (in module winreg):    64-bit Specific.    (line    8)
* KEY_WRITE (in module winreg):          Access Rights.      (line   15)
* kill() (asyncio.asyncio.subprocess.Process method): Process.
                                                             (line   91)
* kill() (asyncio.BaseSubprocessTransport method): BaseSubprocessTransport.
                                                             (line   37)
* kill() (in module os):                 Process Management. (line  242)
* kill() (subprocess.Popen method):      Popen Objects.      (line   93)
* killchar() (in module curses):         Functions<2>.       (line  252)
* killpg() (in module os):               Process Management. (line  261)
* kind (inspect.Parameter attribute):    Introspecting callables with the Signature object.
                                                             (line  164)
* knownfiles (in module mimetypes):      mimetypes --- Map filenames to MIME types.
                                                             (line  113)
* kqueue() (in module select):           select --- Waiting for I/O completion.
                                                             (line   79)
* KqueueSelector (class in selectors):   Classes<3>.         (line  195)
* kwargs (inspect.BoundArguments attribute): Introspecting callables with the Signature object.
                                                             (line  270)
* kwlist (in module keyword):            keyword --- Testing for Python keywords.
                                                             (line   17)
* L (in module re):                      Module Contents.    (line   64)
* LabelEntry (class in tkinter.tix):     Basic Widgets.      (line   31)
* LabelFrame (class in tkinter.tix):     Basic Widgets.      (line   37)
* lambda:                                Glossary.           (line  629)
* lambda; expression:                    Lambdas.            (line    6)
* lambda; expression <1>:                Function definitions.
                                                             (line   95)
* lambda; form:                          Lambdas.            (line    6)
* LambdaType (in module types):          Standard Interpreter Types.
                                                             (line   16)
* LANG:                                  GNU gettext API.    (line   21)
* LANG <1>:                              Class-based API.    (line   26)
* LANG <2>:                              locale --- Internationalization services.
                                                             (line   45)
* LANG <3>:                              locale --- Internationalization services.
                                                             (line  298)
* LANG <4>:                              locale --- Internationalization services.
                                                             (line  302)
* LANGUAGE:                              GNU gettext API.    (line   20)
* LANGUAGE <1>:                          Class-based API.    (line   25)
* large files:                           Large File Support. (line    6)
* LargeZipFile:                          zipfile --- Work with ZIP archives.
                                                             (line   37)
* last() (nntplib.NNTP method):          Methods<3>.         (line  237)
* lastChild (xml.dom.Node attribute):    Node Objects.       (line   59)
* lastcmd (cmd.Cmd attribute):           Cmd Objects.        (line  131)
* lastgroup (re.match attribute):        Match Objects.      (line  171)
* lastindex (re.match attribute):        Match Objects.      (line  163)
* lastResort (in module logging):        Module-Level Attributes.
                                                             (line    6)
* lastrowid (sqlite3.Cursor attribute):  Cursor Objects.     (line  192)
* last_accepted (multiprocessing.connection.Listener attribute): Listeners and Clients.
                                                             (line  111)
* last_traceback (in module sys):        The standard type hierarchy.
                                                             (line  692)
* last_traceback (in module sys) <1>:    sys --- System-specific parameters and functions.
                                                             (line  765)
* last_type (in module sys):             sys --- System-specific parameters and functions.
                                                             (line  765)
* last_value (in module sys):            sys --- System-specific parameters and functions.
                                                             (line  765)
* layout() (tkinter.ttk.Style method):   Ttk Styling.        (line   96)
* lazycache() (in module linecache):     linecache --- Random access to text lines.
                                                             (line   47)
* LazyLoader (class in importlib.util):  importlib util -- Utility code for importers.
                                                             (line  203)
* LBRACE (in module token):              token --- Constants used with Python parse trees.
                                                             (line   40)
* LBYL:                                  Glossary.           (line  636)
* lchflags() (in module os):             Files and Directories.
                                                             (line  252)
* lchmod() (in module os):               Files and Directories.
                                                             (line  261)
* lchmod() (pathlib.Path method):        Methods<2>.         (line  183)
* lchown() (in module os):               Files and Directories.
                                                             (line  271)
* LC_ALL:                                GNU gettext API.    (line   20)
* LC_ALL <1>:                            Class-based API.    (line   25)
* LC_ALL (in module locale):             locale --- Internationalization services.
                                                             (line  467)
* LC_COLLATE (in module locale):         locale --- Internationalization services.
                                                             (line  436)
* LC_CTYPE (in module locale):           locale --- Internationalization services.
                                                             (line  430)
* LC_MESSAGES:                           GNU gettext API.    (line   20)
* LC_MESSAGES <1>:                       Class-based API.    (line   26)
* LC_MESSAGES (in module locale):        locale --- Internationalization services.
                                                             (line  452)
* LC_MONETARY (in module locale):        locale --- Internationalization services.
                                                             (line  447)
* LC_NUMERIC (in module locale):         locale --- Internationalization services.
                                                             (line  459)
* LC_TIME (in module locale):            locale --- Internationalization services.
                                                             (line  442)
* LDCXXSHARED:                           Build and C API Changes<7>.
                                                             (line  154)
* ldexp() (in module math):              Number-theoretic and representation functions.
                                                             (line  136)
* LDFLAGS:                               New Improved and Deprecated Modules<4>.
                                                             (line   59)
* ldgettext() (in module gettext):       GNU gettext API.    (line   56)
* ldngettext() (in module gettext):      GNU gettext API.    (line   87)
* le() (in module operator):             operator --- Standard operators as functions.
                                                             (line   22)
* leading whitespace:                    Indentation.        (line    6)
* leapdays() (in module calendar):       calendar --- General calendar-related functions.
                                                             (line  207)
* leaveok() (curses.window method):      Window Objects.     (line  362)
* left (filecmp.dircmp attribute):       The dircmp class.   (line   41)
* left() (in module turtle):             Turtle motion.      (line   57)
* LEFTSHIFT (in module token):           token --- Constants used with Python parse trees.
                                                             (line   40)
* LEFTSHIFTEQUAL (in module token):      token --- Constants used with Python parse trees.
                                                             (line   40)
* left_list (filecmp.dircmp attribute):  The dircmp class.   (line   49)
* left_only (filecmp.dircmp attribute):  The dircmp class.   (line   63)
* len() (built-in function):             Built-in Functions. (line  766)
* length (xml.dom.NamedNodeMap attribute): NamedNodeMap Objects.
                                                             (line    8)
* length (xml.dom.NodeList attribute):   NodeList Objects.   (line   21)
* length_hint() (in module operator):    operator --- Standard operators as functions.
                                                             (line  204)
* LESS (in module token):                token --- Constants used with Python parse trees.
                                                             (line   40)
* LESSEQUAL (in module token):           token --- Constants used with Python parse trees.
                                                             (line   40)
* lexical analysis:                      Lexical analysis.   (line    6)
* lexical definitions:                   Notation.           (line   31)
* lexists() (in module os.path):         os path --- Common pathname manipulations.
                                                             (line  105)
* lgamma() (in module math):             Special functions.  (line   35)
* lgettext() (gettext.GNUTranslations method): The GNUTranslations class.
                                                             (line   42)
* lgettext() (gettext.NullTranslations method): The NullTranslations class.
                                                             (line   41)
* lgettext() (in module gettext):        GNU gettext API.    (line   45)
* lib2to3 (module):                      lib2to3 - 2to3's library.
                                                             (line    6)
* libc_ver() (in module platform):       Unix Platforms.     (line   35)
* library (in module dbm.ndbm):          dbm ndbm --- Interface based on ndbm.
                                                             (line   23)
* library (ssl.SSLError attribute):      Functions Constants and Exceptions.
                                                             (line   19)
* LibraryLoader (class in ctypes):       Loading shared libraries.
                                                             (line  129)
* library_dir_option() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  220)
* library_filename() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  459)
* library_option() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  225)
* license (built-in variable):           Constants added by the site module.
                                                             (line   18)
* LifoQueue (class in asyncio):          LifoQueue.          (line    6)
* LifoQueue (class in queue):            queue --- A synchronized queue class.
                                                             (line   35)
* light-weight processes:                _thread --- Low-level threading API.
                                                             (line    6)
* limit_denominator() (fractions.Fraction method): fractions --- Rational numbers.
                                                             (line  119)
* lin2adpcm() (in module audioop):       audioop --- Manipulate raw audio data.
                                                             (line  110)
* lin2alaw() (in module audioop):        audioop --- Manipulate raw audio data.
                                                             (line  124)
* lin2lin() (in module audioop):         audioop --- Manipulate raw audio data.
                                                             (line  131)
* lin2ulaw() (in module audioop):        audioop --- Manipulate raw audio data.
                                                             (line  146)
* line continuation:                     Explicit line joining.
                                                             (line    6)
* line joining:                          Logical lines.      (line    6)
* line joining <1>:                      Explicit line joining.
                                                             (line    6)
* line structure:                        Line structure.     (line    6)
* line() (msilib.Dialog method):         GUI classes.        (line   64)
* line-buffered I/O:                     Built-in Functions. (line 1067)
* linecache (module):                    linecache --- Random access to text lines.
                                                             (line    6)
* lineno (ast.AST attribute):            Node classes.       (line   39)
* lineno (doctest.DocTest attribute):    DocTest Objects.    (line   42)
* lineno (doctest.Example attribute):    Example Objects.    (line   41)
* lineno (json.JSONDecodeError attribute): Exceptions<9>.    (line   23)
* lineno (pyclbr.Class attribute):       Class Objects<2>.   (line   36)
* lineno (pyclbr.Function attribute):    Function Objects.   (line   23)
* lineno (re.error attribute):           Module Contents.    (line  327)
* lineno (shlex.shlex attribute):        shlex Objects.      (line  156)
* lineno (traceback.TracebackException attribute): TracebackException Objects.
                                                             (line   46)
* lineno (tracemalloc.Filter attribute): Filter.             (line   44)
* lineno (tracemalloc.Frame attribute):  Frame.              (line   17)
* lineno (xml.parsers.expat.ExpatError attribute): ExpatError Exceptions.
                                                             (line   27)
* lineno() (in module fileinput):        fileinput --- Iterate over lines from multiple input streams.
                                                             (line   91)
* LINES:                                 curses.             (line    6)
* LINES <1>:                             Functions<2>.       (line  123)
* LINES <2>:                             Functions<2>.       (line  521)
* LINES <3>:                             Functions<2>.       (line  545)
* LINES <4>:                             Functions<2>.       (line  547)
* lines (os.terminal_size attribute):    Querying the size of a terminal.
                                                             (line   34)
* linesep (email.policy.Policy attribute): email policy Policy Objects.
                                                             (line  131)
* linesep (in module os):                Miscellaneous System Information.
                                                             (line  127)
* lineterminator (csv.Dialect attribute): Dialects and Formatting Parameters.
                                                             (line   43)
* LineTooLong:                           http client --- HTTP protocol client.
                                                             (line  148)
* line_buffering (io.TextIOWrapper attribute): Text I/O<2>.  (line  163)
* line_num (csv.csvreader attribute):    Reader Objects.     (line   22)
* link() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  349)
* link() (in module os):                 Files and Directories.
                                                             (line  280)
* linkname (tarfile.TarInfo attribute):  TarInfo Objects.    (line   67)
* link_executable() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  401)
* link_shared_lib() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  411)
* link_shared_object() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  422)
* linux_distribution() (in module platform): Unix Platforms. (line   13)
* list:                                  Glossary.           (line  650)
* list (built-in class):                 Lists<2>.           (line   10)
* List (class in typing):                Classes functions and decorators.
                                                             (line  225)
* list (pdb command):                    Debugger Commands.  (line  205)
* list comprehension:                    Glossary.           (line  656)
* list() (imaplib.IMAP4 method):         IMAP4 Objects.      (line  126)
* list() (multiprocessing.managers.SyncManager method): Managers.
                                                             (line  211)
* list() (nntplib.NNTP method):          Methods<3>.         (line  104)
* list() (poplib.POP3 method):           POP3 Objects.       (line   56)
* list() (tarfile.TarFile method):       TarFile Objects.    (line  114)
* list; comprehensions:                  List displays.      (line    6)
* list; display:                         List displays.      (line    6)
* listdir() (in module os):              Files and Directories.
                                                             (line  296)
* listen() (asyncore.dispatcher method): asyncore --- Asynchronous socket handler.
                                                             (line  213)
* listen() (in module logging.config):   Configuration functions.
                                                             (line  109)
* listen() (in module turtle):           Using screen events.
                                                             (line    6)
* listen() (socket.socket method):       Socket Objects.     (line  163)
* Listener (class in multiprocessing.connection): Listeners and Clients.
                                                             (line   51)
* listMethods() (xmlrpc.client.ServerProxy.system method): ServerProxy Objects.
                                                             (line   17)
* ListNoteBook (class in tkinter.tix):   Manager Widgets.    (line   13)
* listxattr() (in module os):            Linux extended attributes.
                                                             (line   19)
* LIST_APPEND (opcode):                  Python Bytecode Instructions.
                                                             (line  298)
* list_dialects() (in module csv):       Module Contents<3>. (line   91)
* list_folders() (mailbox.Maildir method): Maildir.          (line   57)
* list_folders() (mailbox.MH method):    MH.                 (line   32)
* literal:                               Literals.           (line    6)
* literal <1>:                           Literals<2>.        (line    6)
* literal_eval() (in module ast):        ast Helpers.        (line   14)
* LittleEndianStructure (class in ctypes): Structured data types.
                                                             (line   14)
* ljust() (bytearray method):            Bytes and Bytearray Operations.
                                                             (line  242)
* ljust() (bytes method):                Bytes and Bytearray Operations.
                                                             (line  242)
* ljust() (str method):                  String Methods<2>.  (line  245)
* LK_LOCK (in module msvcrt):            File Operations.    (line   16)
* LK_NBLCK (in module msvcrt):           File Operations.    (line   24)
* LK_NBRLCK (in module msvcrt):          File Operations.    (line   24)
* LK_RLCK (in module msvcrt):            File Operations.    (line   16)
* LK_UNLCK (in module msvcrt):           File Operations.    (line   30)
* ll (pdb command):                      Debugger Commands.  (line  221)
* LMTP (class in smtplib):               smtplib --- SMTP protocol client.
                                                             (line   90)
* ln() (decimal.Context method):         Context objects.    (line  336)
* ln() (decimal.Decimal method):         Decimal objects.    (line  328)
* LNAME:                                 getpass --- Portable password input.
                                                             (line   36)
* lngettext() (gettext.GNUTranslations method): The GNUTranslations class.
                                                             (line   70)
* lngettext() (gettext.NullTranslations method): The NullTranslations class.
                                                             (line   53)
* lngettext() (in module gettext):       GNU gettext API.    (line   76)
* load() (http.cookiejar.FileCookieJar method): CookieJar and FileCookieJar Objects.
                                                             (line  125)
* load() (http.cookies.BaseCookie method): Cookie Objects.   (line   38)
* load() (in module json):               Basic Usage.        (line   90)
* load() (in module marshal):            marshal --- Internal Python object serialization.
                                                             (line   60)
* load() (in module pickle):             Module Interface.   (line   60)
* load() (in module plistlib):           plistlib --- Generate and parse Mac OS X plist files.
                                                             (line   40)
* load() (pickle.Unpickler method):      Module Interface.   (line  233)
* load() (tracemalloc.Snapshot class method): Snapshot.      (line   50)
* loader:                                Finders and loaders.
                                                             (line    6)
* loader <1>:                            Glossary.           (line  665)
* Loader (class in importlib.abc):       importlib abc -- Abstract base classes related to import.
                                                             (line  150)
* loader (importlib.machinery.ModuleSpec attribute): importlib machinery -- Importers and path hooks.
                                                             (line  347)
* LoadError:                             http cookiejar --- Cookie handling for HTTP clients.
                                                             (line   34)
* loader_state (importlib.machinery.ModuleSpec attribute): importlib machinery -- Importers and path hooks.
                                                             (line  370)
* LoadKey() (in module winreg):          Functions<9>.       (line  230)
* LoadLibrary() (ctypes.LibraryLoader method): Loading shared libraries.
                                                             (line  140)
* loads() (in module json):              Basic Usage.        (line  142)
* loads() (in module marshal):           marshal --- Internal Python object serialization.
                                                             (line   82)
* loads() (in module pickle):            Module Interface.   (line   86)
* loads() (in module plistlib):          plistlib --- Generate and parse Mac OS X plist files.
                                                             (line   75)
* loads() (in module xmlrpc.client):     Convenience Functions.
                                                             (line   19)
* loadTestsFromModule() (unittest.TestLoader method): Loading and running tests.
                                                             (line   41)
* loadTestsFromName() (unittest.TestLoader method): Loading and running tests.
                                                             (line   70)
* loadTestsFromNames() (unittest.TestLoader method): Loading and running tests.
                                                             (line  103)
* loadTestsFromTestCase() (unittest.TestLoader method): Loading and running tests.
                                                             (line   29)
* LOAD_ATTR (opcode):                    Python Bytecode Instructions.
                                                             (line  473)
* LOAD_BUILD_CLASS (opcode):             Python Bytecode Instructions.
                                                             (line  353)
* load_cert_chain() (ssl.SSLContext method): SSL Contexts.   (line   43)
* LOAD_CLASSDEREF (opcode):              Python Bytecode Instructions.
                                                             (line  577)
* LOAD_CLOSURE (opcode):                 Python Bytecode Instructions.
                                                             (line  564)
* LOAD_CONST (opcode):                   Python Bytecode Instructions.
                                                             (line  447)
* load_default_certs() (ssl.SSLContext method): SSL Contexts.
                                                             (line   74)
* LOAD_DEREF (opcode):                   Python Bytecode Instructions.
                                                             (line  571)
* load_dh_params() (ssl.SSLContext method): SSL Contexts.    (line  239)
* load_extension() (sqlite3.Connection method): Connection Objects.
                                                             (line  273)
* LOAD_FAST (opcode):                    Python Bytecode Instructions.
                                                             (line  551)
* LOAD_GLOBAL (opcode):                  Python Bytecode Instructions.
                                                             (line  532)
* load_module() (importlib.abc.FileLoader method): importlib abc -- Abstract base classes related to import.
                                                             (line  395)
* load_module() (importlib.abc.InspectLoader method): importlib abc -- Abstract base classes related to import.
                                                             (line  348)
* load_module() (importlib.abc.Loader method): importlib abc -- Abstract base classes related to import.
                                                             (line  175)
* load_module() (importlib.abc.SourceLoader method): importlib abc -- Abstract base classes related to import.
                                                             (line  496)
* load_module() (importlib.machinery.SourceFileLoader method): importlib machinery -- Importers and path hooks.
                                                             (line  229)
* load_module() (importlib.machinery.SourcelessFileLoader method): importlib machinery -- Importers and path hooks.
                                                             (line  273)
* load_module() (in module imp):         imp --- Access the import internals.
                                                             (line   86)
* load_module() (zipimport.zipimporter method): zipimporter Objects.
                                                             (line   62)
* LOAD_NAME (opcode):                    Python Bytecode Instructions.
                                                             (line  451)
* load_package_tests() (in module test.support): test support --- Utilities for the Python test suite.
                                                             (line  345)
* load_verify_locations() (ssl.SSLContext method): SSL Contexts.
                                                             (line   91)
* local (class in threading):            Thread-Local Data.  (line   15)
* localcontext() (in module decimal):    Context objects.    (line   25)
* LOCALE (in module re):                 Module Contents.    (line   64)
* locale (module):                       locale --- Internationalization services.
                                                             (line    6)
* localeconv() (in module locale):       locale --- Internationalization services.
                                                             (line   49)
* LocaleHTMLCalendar (class in calendar): calendar --- General calendar-related functions.
                                                             (line  173)
* LocaleTextCalendar (class in calendar): calendar --- General calendar-related functions.
                                                             (line  165)
* localName (xml.dom.Attr attribute):    Attr Objects.       (line   13)
* localName (xml.dom.Node attribute):    Node Objects.       (line   64)
* locals() (built-in function):          Built-in Functions. (line  778)
* localtime() (in module email.utils):   email utils Miscellaneous utilities.
                                                             (line  135)
* localtime() (in module time):          time --- Time access and conversions.
                                                             (line  266)
* Locator (class in xml.sax.xmlreader):  xml sax xmlreader --- Interface for XML parsers.
                                                             (line   39)
* Lock (class in asyncio):               Lock.               (line    6)
* Lock (class in multiprocessing):       Synchronization primitives.
                                                             (line   46)
* Lock (class in threading):             Lock Objects.       (line   33)
* lock() (mailbox.Babyl method):         Babyl.              (line   59)
* lock() (mailbox.Mailbox method):       Mailbox objects.    (line  249)
* lock() (mailbox.Maildir method):       Maildir.            (line  103)
* lock() (mailbox.mbox method):          mbox.               (line   39)
* lock() (mailbox.MH method):            MH.                 (line   84)
* lock() (mailbox.MMDF method):          MMDF.               (line   35)
* Lock() (multiprocessing.managers.SyncManager method): Managers.
                                                             (line  169)
* lock, interpreter:                     Thread State and the Global Interpreter Lock.
                                                             (line    6)
* locked() (asyncio.Condition method):   Condition.          (line   47)
* locked() (asyncio.Lock method):        Lock.               (line   63)
* locked() (asyncio.Semaphore method):   Semaphore.          (line   36)
* locked() (_thread.lock method):        _thread --- Low-level threading API.
                                                             (line  126)
* lockf() (in module fcntl):             fcntl --- The fcntl and ioctl system calls.
                                                             (line  103)
* lockf() (in module os):                File Descriptor Operations.
                                                             (line  178)
* locking() (in module msvcrt):          File Operations.    (line    6)
* LockType (in module _thread):          _thread --- Low-level threading API.
                                                             (line   29)
* lock_held() (in module imp):           imp --- Access the import internals.
                                                             (line  254)
* log() (in module cmath):               Power and logarithmic functions<2>.
                                                             (line   10)
* log() (in module logging):             Module-Level Functions.
                                                             (line  149)
* log() (in module math):                Power and logarithmic functions.
                                                             (line   25)
* log() (logging.Logger method):         Logger Objects.     (line  212)
* log10() (decimal.Context method):      Context objects.    (line  340)
* log10() (decimal.Decimal method):      Decimal objects.    (line  334)
* log10() (in module cmath):             Power and logarithmic functions<2>.
                                                             (line   17)
* log10() (in module math):              Power and logarithmic functions.
                                                             (line   52)
* log1p() (in module math):              Power and logarithmic functions.
                                                             (line   33)
* log2() (in module math):               Power and logarithmic functions.
                                                             (line   38)
* logb() (decimal.Context method):       Context objects.    (line  344)
* logb() (decimal.Decimal method):       Decimal objects.    (line  340)
* Logger (class in logging):             Logger Objects.     (line   23)
* LoggerAdapter (class in logging):      LoggerAdapter Objects.
                                                             (line   11)
* logging (module):                      logging --- Logging facility for Python.
                                                             (line    6)
* logging.config (module):               logging config --- Logging configuration.
                                                             (line    6)
* logging.handlers (module):             logging handlers --- Logging handlers.
                                                             (line    6)
* logical line:                          Logical lines.      (line    6)
* logical_and() (decimal.Context method): Context objects.   (line  348)
* logical_and() (decimal.Decimal method): Decimal objects.   (line  348)
* logical_invert() (decimal.Context method): Context objects.
                                                             (line  353)
* logical_invert() (decimal.Decimal method): Decimal objects.
                                                             (line  354)
* logical_or() (decimal.Context method): Context objects.    (line  357)
* logical_or() (decimal.Decimal method): Decimal objects.    (line  359)
* logical_xor() (decimal.Context method): Context objects.   (line  362)
* logical_xor() (decimal.Decimal method): Decimal objects.   (line  365)
* login() (ftplib.FTP method):           FTP Objects.        (line   45)
* login() (imaplib.IMAP4 method):        IMAP4 Objects.      (line  132)
* login() (nntplib.NNTP method):         Methods<3>.         (line   48)
* login() (smtplib.SMTP method):         SMTP Objects.       (line   99)
* login_cram_md5() (imaplib.IMAP4 method): IMAP4 Objects.    (line  137)
* LOGNAME:                               Process Parameters. (line  184)
* LOGNAME <1>:                           getpass --- Portable password input.
                                                             (line   36)
* lognormvariate() (in module random):   random --- Generate pseudo-random numbers.
                                                             (line  217)
* logout() (imaplib.IMAP4 method):       IMAP4 Objects.      (line  143)
* LogRecord (class in logging):          LogRecord Objects.  (line   11)
* log_date_time_string() (http.server.BaseHTTPRequestHandler method): http server --- HTTP servers.
                                                             (line  298)
* log_error() (http.server.BaseHTTPRequestHandler method): http server --- HTTP servers.
                                                             (line  267)
* log_exception() (wsgiref.handlers.BaseHandler method): wsgiref handlers -- server/gateway base classes.
                                                             (line  206)
* log_message() (http.server.BaseHTTPRequestHandler method): http server --- HTTP servers.
                                                             (line  273)
* log_request() (http.server.BaseHTTPRequestHandler method): http server --- HTTP servers.
                                                             (line  260)
* log_to_stderr() (in module multiprocessing): Logging<2>.   (line   24)
* long (2to3 fixer):                     Fixers.             (line  187)
* longMessage (unittest.TestCase attribute): Test cases.     (line  672)
* longname() (in module curses):         Functions<2>.       (line  258)
* LONG_MAX:                              Integer Objects.    (line  111)
* lookup() (in module codecs):           codecs --- Codec registry and base classes.
                                                             (line   45)
* lookup() (in module unicodedata):      unicodedata --- Unicode Database.
                                                             (line   14)
* lookup() (symtable.SymbolTable method): Examining Symbol Tables.
                                                             (line   52)
* lookup() (tkinter.ttk.Style method):   Ttk Styling.        (line   81)
* LookupError:                           Base classes.       (line   54)
* lookup_error() (in module codecs):     Error Handlers.     (line  117)
* loop control; target:                  The break statement.
                                                             (line   12)
* loop() (in module asyncore):           asyncore --- Asynchronous socket handler.
                                                             (line   47)
* loop; over mutable sequence:           The for statement.  (line   45)
* loop; statement:                       The break statement.
                                                             (line    6)
* loop; statement <1>:                   The continue statement.
                                                             (line    6)
* loop; statement <2>:                   The while statement.
                                                             (line    6)
* loop; statement <3>:                   The for statement.  (line    6)
* lower() (bytearray method):            Bytes and Bytearray Operations.
                                                             (line  539)
* lower() (bytes method):                Bytes and Bytearray Operations.
                                                             (line  539)
* lower() (str method):                  String Methods<2>.  (line  252)
* LPAR (in module token):                token --- Constants used with Python parse trees.
                                                             (line   40)
* lru_cache() (in module functools):     functools --- Higher-order functions and operations on callable objects.
                                                             (line   41)
* lseek() (in module os):                File Descriptor Operations.
                                                             (line  201)
* lshift() (in module operator):         operator --- Standard operators as functions.
                                                             (line  104)
* LSQB (in module token):                token --- Constants used with Python parse trees.
                                                             (line   40)
* lstat() (in module os):                Files and Directories.
                                                             (line  325)
* lstat() (pathlib.Path method):         Methods<2>.         (line  189)
* lstrip() (bytearray method):           Bytes and Bytearray Operations.
                                                             (line  254)
* lstrip() (bytes method):               Bytes and Bytearray Operations.
                                                             (line  254)
* lstrip() (str method):                 String Methods<2>.  (line  260)
* lsub() (imaplib.IMAP4 method):         IMAP4 Objects.      (line  147)
* lt() (in module operator):             operator --- Standard operators as functions.
                                                             (line   22)
* lt() (in module turtle):               Turtle motion.      (line   57)
* LWPCookieJar (class in http.cookiejar): FileCookieJar subclasses and co-operation with web browsers.
                                                             (line   27)
* lzma (module):                         lzma --- Compression using the LZMA algorithm.
                                                             (line    6)
* LZMACompressor (class in lzma):        Compressing and decompressing data in memory.
                                                             (line    6)
* LZMADecompressor (class in lzma):      Compressing and decompressing data in memory.
                                                             (line  100)
* LZMAError:                             lzma --- Compression using the LZMA algorithm.
                                                             (line   20)
* LZMAFile (class in lzma):              Reading and writing compressed files.
                                                             (line   43)
* M (in module re):                      Module Contents.    (line   78)
* machine() (in module platform):        Cross Platform.     (line   36)
* macpath (module):                      macpath --- Mac OS 9 path manipulation functions.
                                                             (line    6)
* macros (netrc.netrc attribute):        netrc Objects.      (line   29)
* mac_ver() (in module platform):        Mac OS Platform.    (line    6)
* MagicMock (class in unittest.mock):    Magic Mock.         (line    9)
* MAGIC_NUMBER (in module importlib.util): importlib util -- Utility code for importers.
                                                             (line    9)
* Mailbox (class in mailbox):            Mailbox objects.    (line    6)
* mailbox (module):                      mailbox --- Manipulate mailboxes in various formats.
                                                             (line    6)
* mailcap (module):                      mailcap --- Mailcap file handling.
                                                             (line    6)
* Maildir (class in mailbox):            Maildir.            (line    6)
* MaildirMessage (class in mailbox):     MaildirMessage.     (line    6)
* mailfrom (smtpd.SMTPChannel attribute): SMTPChannel Objects.
                                                             (line   73)
* MailmanProxy (class in smtpd):         MailmanProxy Objects.
                                                             (line    6)
* main():                                Process-wide parameters.
                                                             (line    9)
* main() <1>:                            Process-wide parameters.
                                                             (line   36)
* main() <2>:                            Process-wide parameters.
                                                             (line  214)
* main() (in module py_compile):         py_compile --- Compile Python source files.
                                                             (line   64)
* main() (in module site):               Module contents<3>. (line   41)
* main() (in module unittest):           Loading and running tests.
                                                             (line  468)
* mainloop() (in module turtle):         Using screen events.
                                                             (line  106)
* maintype (email.headerregistry.ContentTypeHeader attribute): email headerregistry Custom Header Objects.
                                                             (line  274)
* main_thread() (in module threading):   threading --- Thread-based parallelism.
                                                             (line   54)
* major (email.headerregistry.MIMEVersionHeader attribute): email headerregistry Custom Header Objects.
                                                             (line  245)
* major() (in module os):                Files and Directories.
                                                             (line  429)
* makedev() (in module os):              Files and Directories.
                                                             (line  439)
* makedirs() (in module os):             Files and Directories.
                                                             (line  366)
* makeelement() (xml.etree.ElementTree.Element method): Element Objects.
                                                             (line  167)
* makefile() (socket method):            The standard type hierarchy.
                                                             (line  579)
* makefile() (socket.socket method):     Socket Objects.     (line  173)
* makeLogRecord() (in module logging):   Module-Level Functions.
                                                             (line  217)
* makePickle() (logging.handlers.SocketHandler method): SocketHandler.
                                                             (line   45)
* makeRecord() (logging.Logger method):  Logger Objects.     (line  264)
* makeSocket() (logging.handlers.DatagramHandler method): DatagramHandler.
                                                             (line   28)
* makeSocket() (logging.handlers.SocketHandler method): SocketHandler.
                                                             (line   39)
* maketrans() (bytearray static method): Bytes and Bytearray Operations.
                                                             (line  120)
* maketrans() (bytes static method):     Bytes and Bytearray Operations.
                                                             (line  120)
* maketrans() (str static method):       String Methods<2>.  (line  273)
* make_alternative() (email.message.EmailMessage method): email contentmanager Managing MIME Content.
                                                             (line  161)
* make_archive() (in module distutils.archive_util): distutils archive_util --- Archiving utilities.
                                                             (line    9)
* make_archive() (in module shutil):     Archiving operations.
                                                             (line   12)
* make_bad_fd() (in module test.support): test support --- Utilities for the Python test suite.
                                                             (line  254)
* MAKE_CLOSURE (opcode):                 Python Bytecode Instructions.
                                                             (line  632)
* make_cookies() (http.cookiejar.CookieJar method): CookieJar and FileCookieJar Objects.
                                                             (line   60)
* make_file() (difflib.HtmlDiff method): difflib --- Helpers for computing deltas.
                                                             (line  109)
* MAKE_FUNCTION (opcode):                Python Bytecode Instructions.
                                                             (line  612)
* make_header() (in module email.header): email header Internationalized headers.
                                                             (line  186)
* make_mixed() (email.message.EmailMessage method): email contentmanager Managing MIME Content.
                                                             (line  171)
* make_msgid() (in module email.utils):  email utils Miscellaneous utilities.
                                                             (line  151)
* make_parser() (in module xml.sax):     xml sax --- Support for SAX2 parsers.
                                                             (line   17)
* make_related() (email.message.EmailMessage method): email contentmanager Managing MIME Content.
                                                             (line  152)
* make_server() (in module wsgiref.simple_server): wsgiref simple_server -- a simple WSGI HTTP server.
                                                             (line   14)
* make_table() (difflib.HtmlDiff method): difflib --- Helpers for computing deltas.
                                                             (line  137)
* make_tarball() (in module distutils.archive_util): distutils archive_util --- Archiving utilities.
                                                             (line   25)
* make_zipfile() (in module distutils.archive_util): distutils archive_util --- Archiving utilities.
                                                             (line   39)
* malloc():                              Overview<2>.        (line   33)
* mangle_from_ (email.policy.Compat32 attribute): email policy Policy Objects.
                                                             (line  325)
* mangle_from_ (email.policy.Policy attribute): email policy Policy Objects.
                                                             (line  165)
* map (2to3 fixer):                      Fixers.             (line  191)
* map() (built-in function):             Built-in Functions. (line  788)
* map() (concurrent.futures.Executor method): Executor Objects.
                                                             (line   22)
* map() (multiprocessing.pool.Pool method): Process Pools.   (line   78)
* map() (tkinter.ttk.Style method):      Ttk Styling.        (line   48)
* mapLogRecord() (logging.handlers.HTTPHandler method): HTTPHandler.
                                                             (line   27)
* mapping:                               Glossary.           (line  672)
* Mapping (class in collections.abc):    Collections Abstract Base Classes.
                                                             (line  151)
* Mapping (class in typing):             Classes functions and decorators.
                                                             (line  198)
* mapping() (msilib.Control method):     GUI classes.        (line   20)
* MappingProxyType (class in types):     Standard Interpreter Types.
                                                             (line  113)
* MappingView (class in collections.abc): Collections Abstract Base Classes.
                                                             (line  156)
* MappingView (class in typing):         Classes functions and decorators.
                                                             (line  246)
* mapPriority() (logging.handlers.SysLogHandler method): SysLogHandler.
                                                             (line  183)
* maps (collections.ChainMap attribute): ChainMap objects.   (line   39)
* maps() (in module nis):                nis --- Interface to Sun's NIS Yellow Pages.
                                                             (line   39)
* MAP_ADD (opcode):                      Python Bytecode Instructions.
                                                             (line  303)
* map_async() (multiprocessing.pool.Pool method): Process Pools.
                                                             (line   89)
* map_table_b2() (in module stringprep): stringprep --- Internet String Preparation.
                                                             (line   46)
* map_table_b3() (in module stringprep): stringprep --- Internet String Preparation.
                                                             (line   51)
* map_to_type() (email.headerregistry.HeaderRegistry method): email headerregistry Custom Header Objects.
                                                             (line  353)
* marshal (module):                      marshal --- Internal Python object serialization.
                                                             (line    6)
* marshalling; objects:                  pickle --- Python object serialization.
                                                             (line    6)
* masking; operations:                   Bitwise Operations on Integer Types.
                                                             (line    6)
* match() (in module nis):               nis --- Interface to Sun's NIS Yellow Pages.
                                                             (line   14)
* match() (in module re):                Module Contents.    (line  126)
* match() (pathlib.PurePath method):     Methods and properties.
                                                             (line  235)
* match() (re.regex method):             Regular Expression Objects.
                                                             (line   37)
* match_hostname() (in module ssl):      Certificate handling.
                                                             (line    6)
* math (module):                         math --- Mathematical functions.
                                                             (line    6)
* matmul() (in module operator):         operator --- Standard operators as functions.
                                                             (line  119)
* matrix multiplication:                 Binary arithmetic operations.
                                                             (line   23)
* max (datetime.date attribute):         date Objects.       (line   66)
* max (datetime.datetime attribute):     datetime Objects.   (line  164)
* max (datetime.time attribute):         time Objects.       (line   35)
* max (datetime.timedelta attribute):    timedelta Objects.  (line   60)
* max() (built-in function):             Built-in Functions. (line  798)
* max() (decimal.Context method):        Context objects.    (line  367)
* max() (decimal.Decimal method):        Decimal objects.    (line  371)
* max() (in module audioop):             audioop --- Manipulate raw audio data.
                                                             (line  153)
* maxarray (reprlib.Repr attribute):     Repr Objects.       (line   15)
* maxdeque (reprlib.Repr attribute):     Repr Objects.       (line   15)
* maxdict (reprlib.Repr attribute):      Repr Objects.       (line   15)
* maxDiff (unittest.TestCase attribute): Test cases.         (line  692)
* maxfrozenset (reprlib.Repr attribute): Repr Objects.       (line   15)
* maxlen (collections.deque attribute):  deque objects.      (line  117)
* maxlevel (reprlib.Repr attribute):     Repr Objects.       (line   10)
* maxlist (reprlib.Repr attribute):      Repr Objects.       (line   15)
* maxlong (reprlib.Repr attribute):      Repr Objects.       (line   27)
* maxother (reprlib.Repr attribute):     Repr Objects.       (line   40)
* maxpp() (in module audioop):           audioop --- Manipulate raw audio data.
                                                             (line  158)
* maxset (reprlib.Repr attribute):       Repr Objects.       (line   15)
* maxsize (asyncio.Queue attribute):     Queue.              (line  113)
* maxsize (in module sys):               sys --- System-specific parameters and functions.
                                                             (line  781)
* maxstring (reprlib.Repr attribute):    Repr Objects.       (line   32)
* maxtuple (reprlib.Repr attribute):     Repr Objects.       (line   15)
* maxunicode (in module sys):            sys --- System-specific parameters and functions.
                                                             (line  787)
* MAXYEAR (in module datetime):          datetime --- Basic date and time types.
                                                             (line   53)
* max_count (email.headerregistry.BaseHeader attribute): email headerregistry Custom Header Objects.
                                                             (line   61)
* MAX_EMAX (in module decimal):          Constants<3>.       (line   16)
* MAX_INTERPOLATION_DEPTH (in module configparser): ConfigParser Objects.
                                                             (line  306)
* max_lines (textwrap.TextWrapper attribute): textwrap --- Text wrapping and filling.
                                                             (line  255)
* max_line_length (email.policy.Policy attribute): email policy Policy Objects.
                                                             (line  124)
* max_mag() (decimal.Context method):    Context objects.    (line  371)
* max_mag() (decimal.Decimal method):    Decimal objects.    (line  378)
* MAX_PREC (in module decimal):          Constants<3>.       (line   13)
* max_prefixlen (ipaddress.IPv4Address attribute): Address objects.
                                                             (line   42)
* max_prefixlen (ipaddress.IPv4Network attribute): Network objects.
                                                             (line   63)
* max_prefixlen (ipaddress.IPv6Address attribute): Address objects.
                                                             (line  168)
* max_prefixlen (ipaddress.IPv6Network attribute): Network objects.
                                                             (line  258)
* mbox (class in mailbox):               mbox.               (line    6)
* mboxMessage (class in mailbox):        mboxMessage.        (line    6)
* MB_ICONASTERISK (in module winsound):  winsound --- Sound-playing interface for Windows.
                                                             (line  124)
* MB_ICONEXCLAMATION (in module winsound): winsound --- Sound-playing interface for Windows.
                                                             (line  128)
* MB_ICONHAND (in module winsound):      winsound --- Sound-playing interface for Windows.
                                                             (line  132)
* MB_ICONQUESTION (in module winsound):  winsound --- Sound-playing interface for Windows.
                                                             (line  136)
* MB_OK (in module winsound):            winsound --- Sound-playing interface for Windows.
                                                             (line  140)
* mean() (in module statistics):         Function details.   (line   10)
* median() (in module statistics):       Function details.   (line   52)
* median_grouped() (in module statistics): Function details. (line  114)
* median_high() (in module statistics):  Function details.   (line   97)
* median_low() (in module statistics):   Function details.   (line   80)
* MemberDescriptorType (in module types): Standard Interpreter Types.
                                                             (line  102)
* membership; test:                      Membership test operations.
                                                             (line   36)
* memmove() (in module ctypes):          Utility functions.  (line  122)
* MemoryBIO (class in ssl):              Memory BIO Support<2>.
                                                             (line  119)
* MemoryError:                           Concrete exceptions.
                                                             (line   73)
* MemoryHandler (class in logging.handlers): MemoryHandler.  (line   39)
* memoryview (built-in class):           Memory Views.       (line   10)
* memset() (in module ctypes):           Utility functions.  (line  128)
* merge() (in module heapq):             heapq --- Heap queue algorithm.
                                                             (line   79)
* Message (class in email.message):      email message Representing an email message.
                                                             (line   33)
* Message (class in mailbox):            Message objects.    (line    6)
* message digest, MD5:                   hashlib --- Secure hashes and message digests.
                                                             (line    6)
* MessageBeep() (in module winsound):    winsound --- Sound-playing interface for Windows.
                                                             (line   28)
* MessageClass (http.server.BaseHTTPRequestHandler attribute): http server --- HTTP servers.
                                                             (line  145)
* MessageError:                          email errors Exception and Defect classes.
                                                             (line    9)
* MessageParseError:                     email errors Exception and Defect classes.
                                                             (line   15)
* messages (in module xml.parsers.expat.errors): Expat error constants.
                                                             (line   23)
* message_from_binary_file() (in module email): Parser class API.
                                                             (line  156)
* message_from_bytes() (in module email): Parser class API.  (line  132)
* message_from_file() (in module email): Parser class API.   (line  145)
* message_from_string() (in module email): Parser class API. (line  122)
* meta hooks:                            Import hooks.       (line    6)
* meta path finder:                      Glossary.           (line  681)
* meta() (in module curses):             Functions<2>.       (line  265)
* metaclass:                             Glossary.           (line  690)
* metaclass (2to3 fixer):                Fixers.             (line  197)
* MetaPathFinder (class in importlib.abc): importlib abc -- Abstract base classes related to import.
                                                             (line   41)
* metavar (optparse.Option attribute):   Option attributes.  (line   80)
* MetavarTypeHelpFormatter (class in argparse): formatter_class.
                                                             (line   10)
* meta_path (in module sys):             sys --- System-specific parameters and functions.
                                                             (line  797)
* Meter (class in tkinter.tix):          Basic Widgets.      (line   44)
* method:                                Glossary.           (line  706)
* method (urllib.request.Request attribute): Request Objects.
                                                             (line   52)
* method resolution order:               Glossary.           (line  714)
* method; call:                          Calls.              (line  127)
* methodattrs (2to3 fixer):              Fixers.             (line  202)
* methodcaller() (in module operator):   operator --- Standard operators as functions.
                                                             (line  302)
* methodHelp() (xmlrpc.client.ServerProxy.system method): ServerProxy Objects.
                                                             (line   43)
* methods (in module crypt):             Module Attributes.  (line    8)
* methods (pyclbr.Class attribute):      Class Objects<2>.   (line   27)
* methodSignature() (xmlrpc.client.ServerProxy.system method): ServerProxy Objects.
                                                             (line   22)
* MethodType (in module types):          Standard Interpreter Types.
                                                             (line   38)
* MethodType (in module types) <1>:      Function Objects<3>.
                                                             (line   14)
* MethodType (in module types) <2>:      Method Objects<2>.  (line   12)
* method_calls (unittest.mock.Mock attribute): The Mock Class.
                                                             (line  461)
* METHOD_CRYPT (in module crypt):        Hashing Methods.    (line   26)
* METHOD_MD5 (in module crypt):          Hashing Methods.    (line   21)
* METHOD_SHA256 (in module crypt):       Hashing Methods.    (line   16)
* METHOD_SHA512 (in module crypt):       Hashing Methods.    (line   11)
* METH_CLASS (built-in variable):        Common Object Structures.
                                                             (line  190)
* METH_COEXIST (built-in variable):      Common Object Structures.
                                                             (line  207)
* METH_KEYWORDS (built-in variable):     Common Object Structures.
                                                             (line  159)
* METH_NOARGS (built-in variable):       Common Object Structures.
                                                             (line  168)
* METH_O (built-in variable):            Common Object Structures.
                                                             (line  177)
* METH_STATIC (built-in variable):       Common Object Structures.
                                                             (line  197)
* METH_VARARGS (built-in variable):      Common Object Structures.
                                                             (line  149)
* MH (class in mailbox):                 MH.                 (line    6)
* MHMessage (class in mailbox):          MHMessage.          (line    6)
* microsecond (datetime.datetime attribute): datetime Objects.
                                                             (line  201)
* microsecond (datetime.time attribute): time Objects.       (line   60)
* MIME; base64 encoding:                 base64 --- Base16 Base32 Base64 Base85 Data Encodings.
                                                             (line    6)
* MIME; content type:                    mimetypes --- Map filenames to MIME types.
                                                             (line    6)
* MIME; headers:                         mimetypes --- Map filenames to MIME types.
                                                             (line   26)
* MIME; headers <1>:                     cgi --- Common Gateway Interface support.
                                                             (line    6)
* MIME; quoted-printable encoding:       quopri --- Encode and decode MIME quoted-printable data.
                                                             (line    6)
* MIMEApplication (class in email.mime.application): email mime Creating email and MIME objects from scratch.
                                                             (line   76)
* MIMEAudio (class in email.mime.audio): email mime Creating email and MIME objects from scratch.
                                                             (line  101)
* MIMEBase (class in email.mime.base):   email mime Creating email and MIME objects from scratch.
                                                             (line   21)
* MIMEImage (class in email.mime.image): email mime Creating email and MIME objects from scratch.
                                                             (line  129)
* MIMEMessage (class in email.mime.message): email mime Creating email and MIME objects from scratch.
                                                             (line  157)
* MIMEMultipart (class in email.mime.multipart): email mime Creating email and MIME objects from scratch.
                                                             (line   51)
* MIMENonMultipart (class in email.mime.nonmultipart): email mime Creating email and MIME objects from scratch.
                                                             (line   40)
* MIMEPart (class in email.message):     email contentmanager Managing MIME Content.
                                                             (line  231)
* MIMEText (class in email.mime.text):   email mime Creating email and MIME objects from scratch.
                                                             (line  170)
* MimeTypes (class in mimetypes):        MimeTypes Objects.  (line   10)
* mimetypes (module):                    mimetypes --- Map filenames to MIME types.
                                                             (line    6)
* MIMEVersionHeader (class in email.headerregistry): email headerregistry Custom Header Objects.
                                                             (line  232)
* min (datetime.date attribute):         date Objects.       (line   62)
* min (datetime.datetime attribute):     datetime Objects.   (line  159)
* min (datetime.time attribute):         time Objects.       (line   31)
* min (datetime.timedelta attribute):    timedelta Objects.  (line   55)
* min() (built-in function):             Built-in Functions. (line  828)
* min() (decimal.Context method):        Context objects.    (line  375)
* min() (decimal.Decimal method):        Decimal objects.    (line  383)
* MINEQUAL (in module token):            token --- Constants used with Python parse trees.
                                                             (line   40)
* minmax() (in module audioop):          audioop --- Manipulate raw audio data.
                                                             (line  162)
* minor (email.headerregistry.MIMEVersionHeader attribute): email headerregistry Custom Header Objects.
                                                             (line  249)
* minor() (in module os):                Files and Directories.
                                                             (line  434)
* minus:                                 Unary arithmetic and bitwise operations.
                                                             (line   10)
* MINUS (in module token):               token --- Constants used with Python parse trees.
                                                             (line   40)
* minus() (decimal.Context method):      Context objects.    (line  383)
* minute (datetime.datetime attribute):  datetime Objects.   (line  193)
* minute (datetime.time attribute):      time Objects.       (line   52)
* MINYEAR (in module datetime):          datetime --- Basic date and time types.
                                                             (line   48)
* MIN_EMIN (in module decimal):          Constants<3>.       (line   19)
* MIN_ETINY (in module decimal):         Constants<3>.       (line   22)
* min_mag() (decimal.Context method):    Context objects.    (line  379)
* min_mag() (decimal.Decimal method):    Decimal objects.    (line  390)
* mirrored() (in module unicodedata):    unicodedata --- Unicode Database.
                                                             (line   67)
* misc_header (cmd.Cmd attribute):       Cmd Objects.        (line  152)
* MissingSectionHeaderError:             Exceptions<4>.      (line   60)
* MIXERDEV:                              ossaudiodev --- Access to OSS-compatible audio devices.
                                                             (line   72)
* mkd() (ftplib.FTP method):             FTP Objects.        (line  208)
* mkdir() (in module os):                Files and Directories.
                                                             (line  350)
* mkdir() (pathlib.Path method):         Methods<2>.         (line  195)
* mkdtemp() (in module tempfile):        tempfile --- Generate temporary files and directories.
                                                             (line  180)
* mkfifo() (in module os):               Files and Directories.
                                                             (line  394)
* mknod() (in module os):                Files and Directories.
                                                             (line  413)
* mkpath() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  493)
* mkpath() (in module distutils.dir_util): distutils dir_util --- Directory tree operations.
                                                             (line    9)
* mksalt() (in module crypt):            Module Functions<2>.
                                                             (line   39)
* mkstemp() (in module tempfile):        tempfile --- Generate temporary files and directories.
                                                             (line  127)
* mktemp() (in module tempfile):         Deprecated functions and variables.
                                                             (line   15)
* mktime() (in module time):             time --- Time access and conversions.
                                                             (line  273)
* mktime_tz() (in module email.utils):   email utils Miscellaneous utilities.
                                                             (line   94)
* mlsd() (ftplib.FTP method):            FTP Objects.        (line  156)
* mmap (class in mmap):                  mmap --- Memory-mapped file support.
                                                             (line   43)
* mmap (module):                         mmap --- Memory-mapped file support.
                                                             (line    6)
* MMDF (class in mailbox):               MMDF.               (line    6)
* MMDFMessage (class in mailbox):        MMDFMessage.        (line    6)
* Mock (class in unittest.mock):         The Mock Class.     (line   24)
* mock_add_spec() (unittest.mock.Mock method): The Mock Class.
                                                             (line  217)
* mock_calls (unittest.mock.Mock attribute): The Mock Class. (line  479)
* mock_open() (in module unittest.mock): mock_open.          (line    6)
* mod() (in module operator):            operator --- Standard operators as functions.
                                                             (line  109)
* mode (io.FileIO attribute):            Raw File I/O.       (line   57)
* mode (ossaudiodev.oss_audio_device attribute): Audio Device Objects.
                                                             (line  238)
* mode (tarfile.TarInfo attribute):      TarInfo Objects.    (line   55)
* mode() (in module statistics):         Function details.   (line  160)
* mode() (in module turtle):             Settings and special methods.
                                                             (line    6)
* modf() (in module math):               Number-theoretic and representation functions.
                                                             (line  141)
* modified() (urllib.robotparser.RobotFileParser method): urllib robotparser --- Parser for robots txt.
                                                             (line   41)
* Modify() (msilib.View method):         View Objects.       (line   23)
* modify() (select.devpoll method):      /dev/poll Polling Objects.
                                                             (line   49)
* modify() (select.epoll method):        Edge and Level Trigger Polling epoll Objects.
                                                             (line   72)
* modify() (select.poll method):         Polling Objects.    (line   56)
* modify() (selectors.BaseSelector method): Classes<3>.      (line   94)
* module:                                Glossary.           (line  721)
* module (pyclbr.Class attribute):       Class Objects<2>.   (line   10)
* module (pyclbr.Function attribute):    Function Objects.   (line    9)
* module spec:                           Finders and loaders.
                                                             (line    6)
* module spec <1>:                       Glossary.           (line  730)
* module; array:                         The standard type hierarchy.
                                                             (line  195)
* module; array <1>:                     Binary Sequence Types --- bytes bytearray memoryview.
                                                             (line    6)
* module; base64:                        binascii --- Convert between binary and ASCII.
                                                             (line    6)
* module; bdb:                           pdb --- The Python Debugger.
                                                             (line   17)
* module; binhex:                        binascii --- Convert between binary and ASCII.
                                                             (line    6)
* module; builtins:                      The dir Function.   (line   43)
* module; builtins <1>:                  Complete Python programs.
                                                             (line    6)
* module; builtins <2>:                  Embedding Python<2>.
                                                             (line   12)
* module; builtins <3>:                  Initializing and finalizing the interpreter.
                                                             (line    8)
* module; builtins <4>:                  Sub-interpreter support.
                                                             (line   15)
* module; cmd:                           pdb --- The Python Debugger.
                                                             (line   17)
* module; copy:                          copyreg --- Register pickle support functions.
                                                             (line    6)
* module; crypt:                         pwd --- The password database.
                                                             (line   41)
* module; dbm.gnu:                       The standard type hierarchy.
                                                             (line  256)
* module; dbm.gnu <1>:                   Restrictions.       (line    6)
* module; dbm.ndbm:                      The standard type hierarchy.
                                                             (line  256)
* module; dbm.ndbm <1>:                  Restrictions.       (line    6)
* module; errno:                         Concrete exceptions.
                                                             (line  101)
* module; glob:                          fnmatch --- Unix filename pattern matching.
                                                             (line   34)
* module; imp:                           Built-in Functions. (line 1543)
* module; importing:                     The import statement.
                                                             (line    6)
* module; io:                            The standard type hierarchy.
                                                             (line  579)
* module; json:                          Saving structured data with json.
                                                             (line    6)
* module; math:                          Numeric Types --- int float complex.
                                                             (line  103)
* module; math <1>:                      Constants<2>.       (line   14)
* module; namespace:                     The standard type hierarchy.
                                                             (line  497)
* module; os:                            posix --- The most common POSIX system calls.
                                                             (line   10)
* module; pickle:                        copy --- Shallow and deep copy operations.
                                                             (line   66)
* module; pickle <1>:                    copyreg --- Register pickle support functions.
                                                             (line    6)
* module; pickle <2>:                    shelve --- Python object persistence.
                                                             (line    6)
* module; pickle <3>:                    marshal --- Internal Python object serialization.
                                                             (line   13)
* module; pty:                           File Descriptor Operations.
                                                             (line  311)
* module; pwd:                           os path --- Common pathname manipulations.
                                                             (line  116)
* module; pyexpat:                       xml parsers expat --- Fast XML parsing using Expat.
                                                             (line   18)
* module; re:                            String Methods<2>.  (line    6)
* module; re <1>:                        fnmatch --- Unix filename pattern matching.
                                                             (line    6)
* module; search; path:                  The Module Search Path.
                                                             (line    6)
* module; search; path <1>:              linecache --- Random access to text lines.
                                                             (line   30)
* module; search; path <2>:              sys --- System-specific parameters and functions.
                                                             (line  837)
* module; search; path <3>:              site --- Site-specific configuration hook.
                                                             (line   14)
* module; search; path <4>:              Embedding Python<2>.
                                                             (line   12)
* module; search; path <5>:              Initializing and finalizing the interpreter.
                                                             (line    8)
* module; search; path <6>:              Process-wide parameters.
                                                             (line  120)
* module; search; path <7>:              Process-wide parameters.
                                                             (line  133)
* module; shelve:                        marshal --- Internal Python object serialization.
                                                             (line   13)
* module; signal:                        _thread --- Low-level threading API.
                                                             (line  143)
* module; signal <1>:                    Signal Handling<2>. (line    8)
* module; sitecustomize:                 site --- Site-specific configuration hook.
                                                             (line   84)
* module; socket:                        Internet Protocols and Support.
                                                             (line    6)
* module; stat:                          Files and Directories.
                                                             (line  804)
* module; string:                        locale --- Internationalization services.
                                                             (line  432)
* module; struct:                        Socket Objects.     (line  497)
* module; sys:                           Standard Modules.   (line    6)
* module; sys <1>:                       The try statement.  (line   69)
* module; sys <2>:                       Complete Python programs.
                                                             (line    6)
* module; sys <3>:                       Built-in Functions. (line 1067)
* module; sys <4>:                       Embedding Python<2>.
                                                             (line   12)
* module; sys <5>:                       Initializing and finalizing the interpreter.
                                                             (line    8)
* module; sys <6>:                       Sub-interpreter support.
                                                             (line   15)
* module; types:                         Type Objects.       (line    6)
* module; urllib.request:                http client --- HTTP protocol client.
                                                             (line    6)
* module; usercustomize:                 site --- Site-specific configuration hook.
                                                             (line   94)
* module; uu:                            binascii --- Convert between binary and ASCII.
                                                             (line    6)
* module; _locale:                       locale --- Internationalization services.
                                                             (line   12)
* module; _thread:                       High-level API.     (line   41)
* module; __main__:                      Resolution of names.
                                                             (line   50)
* module; __main__ <1>:                  Complete Python programs.
                                                             (line    6)
* module; __main__ <2>:                  Complete Python programs.
                                                             (line   19)
* module; __main__ <3>:                  runpy --- Locating and executing Python modules.
                                                             (line   30)
* module; __main__ <4>:                  runpy --- Locating and executing Python modules.
                                                             (line   98)
* module; __main__ <5>:                  Embedding Python<2>.
                                                             (line   12)
* module; __main__ <6>:                  Initializing and finalizing the interpreter.
                                                             (line    8)
* module; __main__ <7>:                  Sub-interpreter support.
                                                             (line   15)
* ModuleFinder (class in modulefinder):  modulefinder --- Find modules used by a script.
                                                             (line   26)
* modulefinder (module):                 modulefinder --- Find modules used by a script.
                                                             (line    6)
* modules (in module sys):               sys --- System-specific parameters and functions.
                                                             (line  827)
* modules (in module sys) <1>:           Importing Modules<2>.
                                                             (line    7)
* modules (in module sys) <2>:           Initializing and finalizing the interpreter.
                                                             (line    8)
* modules (modulefinder.ModuleFinder attribute): modulefinder --- Find modules used by a script.
                                                             (line   49)
* ModuleSpec (class in importlib.machinery): importlib machinery -- Importers and path hooks.
                                                             (line  334)
* ModuleType (class in types):           Standard Interpreter Types.
                                                             (line   49)
* ModuleType (in module types):          Module Objects.     (line    8)
* module_for_loader() (in module importlib.util): importlib util -- Utility code for importers.
                                                             (line  121)
* module_from_spec() (in module importlib.util): importlib util -- Utility code for importers.
                                                             (line  105)
* module_repr() (importlib.abc.Loader method): importlib abc -- Abstract base classes related to import.
                                                             (line  250)
* modulo:                                Binary arithmetic operations.
                                                             (line   35)
* monotonic() (in module time):          time --- Time access and conversions.
                                                             (line  286)
* month (datetime.date attribute):       date Objects.       (line   81)
* month (datetime.datetime attribute):   datetime Objects.   (line  180)
* month() (in module calendar):          calendar --- General calendar-related functions.
                                                             (line  240)
* monthcalendar() (in module calendar):  calendar --- General calendar-related functions.
                                                             (line  229)
* monthdatescalendar() (calendar.Calendar method): calendar --- General calendar-related functions.
                                                             (line   64)
* monthdays2calendar() (calendar.Calendar method): calendar --- General calendar-related functions.
                                                             (line   70)
* monthdayscalendar() (calendar.Calendar method): calendar --- General calendar-related functions.
                                                             (line   76)
* monthrange() (in module calendar):     calendar --- General calendar-related functions.
                                                             (line  224)
* month_abbr (in module calendar):       calendar --- General calendar-related functions.
                                                             (line  284)
* month_name (in module calendar):       calendar --- General calendar-related functions.
                                                             (line  277)
* Morsel (class in http.cookies):        Morsel Objects.     (line    6)
* most_common() (collections.Counter method): Counter objects.
                                                             (line   70)
* mouseinterval() (in module curses):    Functions<2>.       (line  270)
* mousemask() (in module curses):        Functions<2>.       (line  277)
* move() (curses.panel.Panel method):    Panel Objects.      (line   34)
* move() (curses.window method):         Window Objects.     (line  371)
* move() (in module shutil):             Directory and files operations.
                                                             (line  246)
* move() (mmap.mmap method):             mmap --- Memory-mapped file support.
                                                             (line  190)
* move() (tkinter.ttk.Treeview method):  ttk Treeview.       (line  221)
* move_file() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  498)
* move_file() (in module distutils.file_util): distutils file_util --- Single file operations.
                                                             (line   34)
* move_to_end() (collections.OrderedDict method): OrderedDict objects.
                                                             (line   28)
* MozillaCookieJar (class in http.cookiejar): FileCookieJar subclasses and co-operation with web browsers.
                                                             (line    9)
* MRO:                                   Glossary.           (line  736)
* mro() (class method):                  Special Attributes. (line   38)
* msg (http.client.HTTPResponse attribute): HTTPResponse Objects.
                                                             (line   40)
* msg (json.JSONDecodeError attribute):  Exceptions<9>.      (line   11)
* msg (re.error attribute):              Module Contents.    (line  315)
* msg (traceback.TracebackException attribute): TracebackException Objects.
                                                             (line   59)
* msg() (telnetlib.Telnet method):       Telnet Objects.     (line   75)
* msi:                                   msilib --- Read and write Microsoft Installer files.
                                                             (line    6)
* msilib (module):                       msilib --- Read and write Microsoft Installer files.
                                                             (line    6)
* msvcrt (module):                       msvcrt -- Useful routines from the MS VC++ runtime.
                                                             (line    6)
* mtime (gzip.GzipFile attribute):       gzip --- Support for gzip files.
                                                             (line  130)
* mtime (tarfile.TarInfo attribute):     TarInfo Objects.    (line   51)
* mtime() (urllib.robotparser.RobotFileParser method): urllib robotparser --- Parser for robots txt.
                                                             (line   35)
* mt_interact() (telnetlib.Telnet method): Telnet Objects.   (line  111)
* mul() (in module audioop):             audioop --- Manipulate raw audio data.
                                                             (line  167)
* mul() (in module operator):            operator --- Standard operators as functions.
                                                             (line  114)
* MultiCall (class in xmlrpc.client):    MultiCall Objects.  (line    9)
* MULTILINE (in module re):              Module Contents.    (line   78)
* MultipartConversionError:              email errors Exception and Defect classes.
                                                             (line   44)
* multiplication:                        Binary arithmetic operations.
                                                             (line   16)
* multiply() (decimal.Context method):   Context objects.    (line  388)
* multiprocessing (module):              multiprocessing --- Process-based parallelism.
                                                             (line    6)
* multiprocessing.connection (module):   Listeners and Clients.
                                                             (line    6)
* multiprocessing.dummy (module):        The multiprocessing dummy module.
                                                             (line    6)
* multiprocessing.Manager() (in module multiprocessing.sharedctypes): Managers.
                                                             (line   12)
* multiprocessing.managers (module):     Managers.           (line   18)
* multiprocessing.pool (module):         Process Pools.      (line    6)
* multiprocessing.sharedctypes (module): The multiprocessing sharedctypes module.
                                                             (line    6)
* mutable:                               Glossary.           (line  740)
* mutable object:                        Objects values and types.
                                                             (line   11)
* mutable sequence; loop over:           The for statement.  (line   45)
* mutable; sequence; types:              Mutable Sequence Types.
                                                             (line    6)
* MutableMapping (class in collections.abc): Collections Abstract Base Classes.
                                                             (line  151)
* MutableMapping (class in typing):      Classes functions and decorators.
                                                             (line  203)
* MutableSequence (class in collections.abc): Collections Abstract Base Classes.
                                                             (line  129)
* MutableSequence (class in typing):     Classes functions and decorators.
                                                             (line  211)
* MutableSet (class in collections.abc): Collections Abstract Base Classes.
                                                             (line  146)
* MutableSet (class in typing):          Classes functions and decorators.
                                                             (line  194)
* mvderwin() (curses.window method):     Window Objects.     (line  375)
* mvwin() (curses.window method):        Window Objects.     (line  382)
* myrights() (imaplib.IMAP4 method):     IMAP4 Objects.      (line  154)
* name:                                  Identifiers and keywords.
                                                             (line    6)
* name <1>:                              Binding of names.   (line    6)
* name <2>:                              Identifiers Names.  (line    6)
* name (codecs.CodecInfo attribute):     codecs --- Codec registry and base classes.
                                                             (line   63)
* name (doctest.DocTest attribute):      DocTest Objects.    (line   30)
* name (email.headerregistry.BaseHeader attribute): email headerregistry Custom Header Objects.
                                                             (line   46)
* name (hashlib.hash attribute):         Hash algorithms.    (line   93)
* name (hmac.HMAC attribute):            hmac --- Keyed-Hashing for Message Authentication.
                                                             (line   84)
* name (http.cookiejar.Cookie attribute): Cookie Objects<2>. (line   27)
* name (importlib.abc.FileLoader attribute): importlib abc -- Abstract base classes related to import.
                                                             (line  387)
* name (importlib.machinery.ExtensionFileLoader attribute): importlib machinery -- Importers and path hooks.
                                                             (line  293)
* name (importlib.machinery.ModuleSpec attribute): importlib machinery -- Importers and path hooks.
                                                             (line  341)
* name (importlib.machinery.SourceFileLoader attribute): importlib machinery -- Importers and path hooks.
                                                             (line  207)
* name (importlib.machinery.SourcelessFileLoader attribute): importlib machinery -- Importers and path hooks.
                                                             (line  250)
* name (in module os):                   os --- Miscellaneous operating system interfaces.
                                                             (line   47)
* NAME (in module token):                token --- Constants used with Python parse trees.
                                                             (line   40)
* name (inspect.Parameter attribute):    Introspecting callables with the Signature object.
                                                             (line  147)
* name (io.FileIO attribute):            Raw File I/O.       (line   61)
* name (multiprocessing.Process attribute): Process and exceptions.
                                                             (line   64)
* name (os.DirEntry attribute):          Files and Directories.
                                                             (line  668)
* name (ossaudiodev.oss_audio_device attribute): Audio Device Objects.
                                                             (line  234)
* name (pyclbr.Class attribute):         Class Objects<2>.   (line   15)
* name (pyclbr.Function attribute):      Function Objects.   (line   14)
* name (tarfile.TarInfo attribute):      TarInfo Objects.    (line   43)
* name (threading.Thread attribute):     Thread Objects.     (line  132)
* name (xml.dom.Attr attribute):         Attr Objects.       (line    8)
* name (xml.dom.DocumentType attribute): DocumentType Objects.
                                                             (line   33)
* name() (in module unicodedata):        unicodedata --- Unicode Database.
                                                             (line   23)
* name2codepoint (in module html.entities): html entities --- Definitions of HTML general entities.
                                                             (line   30)
* name; binding:                         The import statement.
                                                             (line    6)
* name; binding <1>:                     The import statement.
                                                             (line   52)
* name; binding <2>:                     Function definitions.
                                                             (line    6)
* name; binding <3>:                     Function definitions.
                                                             (line    6)
* name; binding <4>:                     Class definitions.  (line    6)
* name; mangling:                        Identifiers Names.  (line   14)
* named tuple:                           Glossary.           (line  745)
* NamedTemporaryFile() (in module tempfile): tempfile --- Generate temporary files and directories.
                                                             (line   66)
* namedtuple() (in module collections):  namedtuple Factory Function for Tuples with Named Fields.
                                                             (line   11)
* NamedTuple() (in module typing):       Classes functions and decorators.
                                                             (line  299)
* NameError:                             Concrete exceptions.
                                                             (line   84)
* NameError (built-in exception):        Resolution of names.
                                                             (line   16)
* namelist() (zipfile.ZipFile method):   ZipFile Objects.    (line   78)
* nameprep() (in module encodings.idna): encodings idna --- Internationalized Domain Names in Applications.
                                                             (line   47)
* namer (logging.handlers.BaseRotatingHandler attribute): BaseRotatingHandler.
                                                             (line   17)
* namereplace_errors() (in module codecs): Error Handlers.   (line  157)
* namespace:                             Naming and binding. (line    6)
* namespace <1>:                         Glossary.           (line  761)
* Namespace (class in argparse):         The Namespace object.
                                                             (line    6)
* Namespace (class in multiprocessing.managers): Managers.   (line  234)
* namespace package:                     Glossary.           (line  775)
* namespace() (imaplib.IMAP4 method):    IMAP4 Objects.      (line  159)
* Namespace() (multiprocessing.managers.SyncManager method): Managers.
                                                             (line  174)
* NamespaceErr:                          Exceptions<12>.     (line   66)
* namespaceURI (xml.dom.Node attribute): Node Objects.       (line   74)
* NAMESPACE_DNS (in module uuid):        uuid --- UUID objects according to RFC 4122.
                                                             (line  150)
* NAMESPACE_OID (in module uuid):        uuid --- UUID objects according to RFC 4122.
                                                             (line  159)
* NAMESPACE_URL (in module uuid):        uuid --- UUID objects according to RFC 4122.
                                                             (line  155)
* NAMESPACE_X500 (in module uuid):       uuid --- UUID objects according to RFC 4122.
                                                             (line  163)
* NaN:                                   Built-in Functions. (line  506)
* nan (in module math):                  Constants.          (line   21)
* NannyNag:                              tabnanny --- Detection of ambiguous indentation.
                                                             (line   37)
* napms() (in module curses):            Functions<2>.       (line  286)
* nargs (optparse.Option attribute):     Option attributes.  (line   42)
* nbytes (memoryview attribute):         Memory Views.       (line  343)
* ndiff() (in module difflib):           difflib --- Helpers for computing deltas.
                                                             (line  227)
* ndim (memoryview attribute):           Memory Views.       (line  409)
* ne (2to3 fixer):                       Fixers.             (line  207)
* ne() (in module operator):             operator --- Standard operators as functions.
                                                             (line   22)
* needs_input (bz2.BZ2Decompressor attribute): Incremental de compression.
                                                             (line   85)
* needs_input (lzma.LZMADecompressor attribute): Compressing and decompressing data in memory.
                                                             (line  175)
* neg() (in module operator):            operator --- Standard operators as functions.
                                                             (line  126)
* negation:                              Unary arithmetic and bitwise operations.
                                                             (line   10)
* nested scope:                          Glossary.           (line  784)
* NetmaskValueError:                     Custom Exceptions.  (line   13)
* netrc (class in netrc):                netrc --- netrc file processing.
                                                             (line   13)
* netrc (module):                        netrc --- netrc file processing.
                                                             (line    6)
* NetrcParseError:                       netrc --- netrc file processing.
                                                             (line   30)
* netscape (http.cookiejar.CookiePolicy attribute): CookiePolicy Objects.
                                                             (line   67)
* network (ipaddress.IPv4Interface attribute): Interface objects.
                                                             (line   25)
* network (ipaddress.IPv6Interface attribute): Interface objects.
                                                             (line   73)
* Network News Transfer Protocol:        nntplib --- NNTP protocol client.
                                                             (line    6)
* network_address (ipaddress.IPv4Network attribute): Network objects.
                                                             (line   84)
* network_address (ipaddress.IPv6Network attribute): Network objects.
                                                             (line  272)
* new() (in module hashlib):             Hash algorithms.    (line   45)
* new() (in module hmac):                hmac --- Keyed-Hashing for Message Authentication.
                                                             (line   12)
* new-style class:                       Glossary.           (line  794)
* newer() (in module distutils.dep_util): distutils dep_util --- Dependency checking.
                                                             (line   10)
* newer_group() (in module distutils.dep_util): distutils dep_util --- Dependency checking.
                                                             (line   24)
* newer_pairwise() (in module distutils.dep_util): distutils dep_util --- Dependency checking.
                                                             (line   17)
* newgroups() (nntplib.NNTP method):     Methods<3>.         (line   80)
* NEWLINE (in module token):             token --- Constants used with Python parse trees.
                                                             (line   40)
* NEWLINE token:                         Logical lines.      (line    6)
* NEWLINE token <1>:                     Compound statements.
                                                             (line   54)
* newlines (io.TextIOBase attribute):    Text I/O<2>.        (line   25)
* newnews() (nntplib.NNTP method):       Methods<3>.         (line   95)
* newpad() (in module curses):           Functions<2>.       (line  290)
* newwin() (in module curses):           Functions<2>.       (line  310)
* new_alignment() (formatter.writer method): The Writer Interface.
                                                             (line   17)
* new_child() (collections.ChainMap method): ChainMap objects.
                                                             (line   46)
* new_class() (in module types):         Dynamic Type Creation.
                                                             (line    6)
* new_compiler() (in module distutils.ccompiler): distutils ccompiler --- CCompiler base class.
                                                             (line   48)
* new_event_loop() (asyncio.AbstractEventLoopPolicy method): Event loop policy interface.
                                                             (line   27)
* new_event_loop() (in module asyncio):  Event loop functions.
                                                             (line   20)
* new_font() (formatter.writer method):  The Writer Interface.
                                                             (line   25)
* new_margin() (formatter.writer method): The Writer Interface.
                                                             (line   35)
* new_module() (in module imp):          imp --- Access the import internals.
                                                             (line  120)
* new_panel() (in module curses.panel):  Functions<3>.       (line   12)
* new_spacing() (formatter.writer method): The Writer Interface.
                                                             (line   42)
* new_styles() (formatter.writer method): The Writer Interface.
                                                             (line   46)
* next (2to3 fixer):                     Fixers.             (line  211)
* next (pdb command):                    Debugger Commands.  (line  167)
* next() (built-in function):            Built-in Functions. (line  853)
* next() (nntplib.NNTP method):          Methods<3>.         (line  233)
* next() (tarfile.TarFile method):       TarFile Objects.    (line  124)
* next() (tkinter.ttk.Treeview method):  ttk Treeview.       (line  232)
* nextfile() (in module fileinput):      fileinput --- Iterate over lines from multiple input streams.
                                                             (line  115)
* nextkey() (dbm.gnu.gdbm method):       dbm gnu --- GNU's reinterpretation of dbm.
                                                             (line   89)
* nextSibling (xml.dom.Node attribute):  Node Objects.       (line   42)
* next_minus() (decimal.Context method): Context objects.    (line  392)
* next_minus() (decimal.Decimal method): Decimal objects.    (line  395)
* next_plus() (decimal.Context method):  Context objects.    (line  396)
* next_plus() (decimal.Decimal method):  Decimal objects.    (line  401)
* next_toward() (decimal.Context method): Context objects.   (line  400)
* next_toward() (decimal.Decimal method): Decimal objects.   (line  407)
* ngettext() (gettext.GNUTranslations method): The GNUTranslations class.
                                                             (line   49)
* ngettext() (gettext.NullTranslations method): The NullTranslations class.
                                                             (line   47)
* ngettext() (in module gettext):        GNU gettext API.    (line   62)
* nice() (in module os):                 Process Management. (line  267)
* nis (module):                          nis --- Interface to Sun's NIS Yellow Pages.
                                                             (line    6)
* NL (in module tokenize):               Tokenizing Input.   (line   46)
* nl() (in module curses):               Functions<2>.       (line  320)
* nlargest() (in module heapq):          heapq --- Heap queue algorithm.
                                                             (line  103)
* nlst() (ftplib.FTP method):            FTP Objects.        (line  170)
* nl_langinfo() (in module locale):      locale --- Internationalization services.
                                                             (line  160)
* NNTP (class in nntplib):               nntplib --- NNTP protocol client.
                                                             (line   54)
* NNTP; protocol:                        nntplib --- NNTP protocol client.
                                                             (line    6)
* NNTPDataError:                         nntplib --- NNTP protocol client.
                                                             (line  139)
* NNTPError:                             nntplib --- NNTP protocol client.
                                                             (line  108)
* nntplib (module):                      nntplib --- NNTP protocol client.
                                                             (line    6)
* NNTPPermanentError:                    nntplib --- NNTP protocol client.
                                                             (line  129)
* NNTPProtocolError:                     nntplib --- NNTP protocol client.
                                                             (line  134)
* NNTPReplyError:                        nntplib --- NNTP protocol client.
                                                             (line  119)
* NNTPTemporaryError:                    nntplib --- NNTP protocol client.
                                                             (line  124)
* nntp_implementation (nntplib.NNTP attribute): Attributes.  (line   14)
* NNTP_SSL (class in nntplib):           nntplib --- NNTP protocol client.
                                                             (line   86)
* nntp_version (nntplib.NNTP attribute): Attributes.         (line    6)
* nocbreak() (in module curses):         Functions<2>.       (line  326)
* NoDataAllowedErr:                      Exceptions<12>.     (line   83)
* node() (in module platform):           Cross Platform.     (line   41)
* nodelay() (curses.window method):      Window Objects.     (line  386)
* nodeName (xml.dom.Node attribute):     Node Objects.       (line   79)
* NodeTransformer (class in ast):        ast Helpers.        (line  102)
* nodeType (xml.dom.Node attribute):     Node Objects.       (line    8)
* nodeValue (xml.dom.Node attribute):    Node Objects.       (line   88)
* NodeVisitor (class in ast):            ast Helpers.        (line   72)
* noecho() (in module curses):           Functions<2>.       (line  331)
* NOEXPR (in module locale):             locale --- Internationalization services.
                                                             (line  239)
* NoModificationAllowedErr:              Exceptions<12>.     (line   88)
* nonblock() (ossaudiodev.oss_audio_device method): Audio Device Objects.
                                                             (line   75)
* NonCallableMagicMock (class in unittest.mock): Magic Mock. (line   21)
* NonCallableMock (class in unittest.mock): The Mock Class.  (line  524)
* None (Built-in object):                Truth Value Testing.
                                                             (line   10)
* None (built-in variable):              Built-in Constants. (line   18)
* nonl() (in module curses):             Functions<2>.       (line  335)
* nonzero (2to3 fixer):                  Fixers.             (line  217)
* noop() (imaplib.IMAP4 method):         IMAP4 Objects.      (line  163)
* noop() (poplib.POP3 method):           POP3 Objects.       (line   78)
* NoOptionError:                         Exceptions<4>.      (line   32)
* NOP (opcode):                          Python Bytecode Instructions.
                                                             (line   55)
* noqiflush() (in module curses):        Functions<2>.       (line  345)
* noraw() (in module curses):            Functions<2>.       (line  354)
* normalize() (decimal.Context method):  Context objects.    (line  404)
* normalize() (decimal.Decimal method):  Decimal objects.    (line  415)
* normalize() (in module locale):        locale --- Internationalization services.
                                                             (line  337)
* normalize() (in module unicodedata):   unicodedata --- Unicode Database.
                                                             (line   79)
* normalize() (xml.dom.Node method):     Node Objects.       (line  141)
* NORMALIZE_WHITESPACE (in module doctest): Option Flags.    (line   39)
* normalvariate() (in module random):    random --- Generate pseudo-random numbers.
                                                             (line  224)
* normcase() (in module os.path):        os path --- Common pathname manipulations.
                                                             (line  231)
* normpath() (in module os.path):        os path --- Common pathname manipulations.
                                                             (line  239)
* NoSectionError:                        Exceptions<4>.      (line   10)
* NoSuchMailboxError:                    Exceptions<10>.     (line   13)
* NotADirectoryError:                    OS exceptions.      (line   86)
* notation:                              Notation.           (line    6)
* notationDecl() (xml.sax.handler.DTDHandler method): DTDHandler Objects.
                                                             (line    8)
* NotationDeclHandler() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line  272)
* notations (xml.dom.DocumentType attribute): DocumentType Objects.
                                                             (line   46)
* NotConnected:                          http client --- HTTP protocol client.
                                                             (line  102)
* NoteBook (class in tkinter.tix):       Manager Widgets.    (line   22)
* Notebook (class in tkinter.ttk):       ttk Notebook.       (line    6)
* NotEmptyError:                         Exceptions<10>.     (line   20)
* NOTEQUAL (in module token):            token --- Constants used with Python parse trees.
                                                             (line   40)
* NotFoundErr:                           Exceptions<12>.     (line   72)
* notify() (asyncio.Condition method):   Condition.          (line   31)
* notify() (threading.Condition method): Condition Objects.  (line  152)
* notify_all() (asyncio.Condition method): Condition.        (line   51)
* notify_all() (threading.Condition method): Condition Objects.
                                                             (line  172)
* notimeout() (curses.window method):    Window Objects.     (line  390)
* NotImplemented (built-in variable):    Built-in Constants. (line   25)
* NotImplementedError:                   Concrete exceptions.
                                                             (line   90)
* NotStandaloneHandler() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line  323)
* NotSupportedErr:                       Exceptions<12>.     (line   78)
* not_() (in module operator):           operator --- Standard operators as functions.
                                                             (line   47)
* noutrefresh() (curses.window method):  Window Objects.     (line  397)
* now() (datetime.datetime class method): datetime Objects.  (line   47)
* no_proxy:                              urllib request --- Extensible library for opening URLs.
                                                             (line  267)
* no_type_check() (in module typing):    Classes functions and decorators.
                                                             (line  332)
* no_type_check_decorator() (in module typing): Classes functions and decorators.
                                                             (line  342)
* NSIG (in module signal):               Module contents<2>. (line   56)
* nsmallest() (in module heapq):         heapq --- Heap queue algorithm.
                                                             (line  111)
* NTEventLogHandler (class in logging.handlers): NTEventLogHandler.
                                                             (line   11)
* ntohl() (in module socket):            Other functions<2>. (line  137)
* ntohs() (in module socket):            Other functions<2>. (line  144)
* ntransfercmd() (ftplib.FTP method):    FTP Objects.        (line  148)
* NT_OFFSET (in module token):           token --- Constants used with Python parse trees.
                                                             (line   40)
* null; operation:                       The pass statement. (line    6)
* null; operation <1>:                   The pass statement. (line    6)
* NullFormatter (class in formatter):    Formatter Implementations.
                                                             (line   10)
* NullHandler (class in logging):        NullHandler.        (line   12)
* NullImporter (class in imp):           imp --- Access the import internals.
                                                             (line  342)
* NullTranslations (class in gettext):   The NullTranslations class.
                                                             (line   13)
* NullWriter (class in formatter):       Writer Implementations.
                                                             (line   10)
* number:                                Numeric literals.   (line    6)
* Number (class in numbers):             numbers --- Numeric abstract base classes.
                                                             (line   11)
* NUMBER (in module token):              token --- Constants used with Python parse trees.
                                                             (line   40)
* numbers (module):                      numbers --- Numeric abstract base classes.
                                                             (line    6)
* number_class() (decimal.Context method): Context objects.  (line  408)
* number_class() (decimal.Decimal method): Decimal objects.  (line  424)
* numerator (fractions.Fraction attribute): fractions --- Rational numbers.
                                                             (line   90)
* numerator (numbers.Rational attribute): The numeric tower. (line   47)
* numeric literal:                       Numeric literals.   (line    6)
* numeric() (in module unicodedata):     unicodedata --- Unicode Database.
                                                             (line   41)
* numeric; conversions:                  Numeric Types --- int float complex.
                                                             (line  103)
* numeric; literals:                     Numeric Types --- int float complex.
                                                             (line   19)
* Numerical Python:                      Built-in Functions. (line 1292)
* numinput() (in module turtle):         Input methods.      (line   22)
* numliterals (2to3 fixer):              Fixers.             (line  221)
* num_addresses (ipaddress.IPv4Network attribute): Network objects.
                                                             (line  122)
* num_addresses (ipaddress.IPv6Network attribute): Network objects.
                                                             (line  288)
* N_TOKENS (in module token):            token --- Constants used with Python parse trees.
                                                             (line   40)
* n_waiting (threading.Barrier attribute): Barrier Objects.  (line   96)
* obj (memoryview attribute):            Memory Views.       (line  332)
* object:                                Objects values and types.
                                                             (line    6)
* object <1>:                            Glossary.           (line  802)
* object (built-in class):               Built-in Functions. (line  860)
* object (UnicodeError attribute):       Concrete exceptions.
                                                             (line  317)
* object.__slots__ (built-in variable):  __slots__.          (line   17)
* object; Boolean:                       The standard type hierarchy.
                                                             (line   75)
* object; Boolean <1>:                   Numeric Types --- int float complex.
                                                             (line    6)
* object; built-in function:             The standard type hierarchy.
                                                             (line  437)
* object; built-in function <1>:         Calls.              (line  127)
* object; built-in method:               The standard type hierarchy.
                                                             (line  450)
* object; built-in method <1>:           Calls.              (line  127)
* object; bytearray:                     Mutable Sequence Types.
                                                             (line    6)
* object; bytearray <1>:                 Binary Sequence Types --- bytes bytearray memoryview.
                                                             (line    6)
* object; bytearray <2>:                 Bytearray Objects.  (line    6)
* object; bytearray <3>:                 Byte Array Objects. (line    6)
* object; bytes:                         Binary Sequence Types --- bytes bytearray memoryview.
                                                             (line    6)
* object; bytes <1>:                     Bytes.              (line    6)
* object; bytes <2>:                     Bytes Objects.      (line    9)
* object; callable:                      The standard type hierarchy.
                                                             (line  262)
* object; callable <1>:                  Slicings.           (line   38)
* object; Capsule:                       Capsules<2>.        (line    6)
* object; class:                         The standard type hierarchy.
                                                             (line  524)
* object; class <1>:                     Calls.              (line  132)
* object; class <2>:                     Class definitions.  (line    6)
* object; class instance:                The standard type hierarchy.
                                                             (line  524)
* object; class instance <1>:            The standard type hierarchy.
                                                             (line  549)
* object; class instance <2>:            Calls.              (line  136)
* object; code:                          The standard type hierarchy.
                                                             (line  600)
* object; code <1>:                      Code Objects.       (line    6)
* object; code <2>:                      marshal --- Internal Python object serialization.
                                                             (line   13)
* object; code <3>:                      Code Objects<2>.    (line    6)
* object; complex:                       The standard type hierarchy.
                                                             (line  101)
* object; complex number:                Numeric Types --- int float complex.
                                                             (line    6)
* object; complex number <1>:            Complex Number Objects.
                                                             (line    6)
* object; deallocation:                  Finalization and De-allocation.
                                                             (line    6)
* object; dictionary:                    The standard type hierarchy.
                                                             (line  242)
* object; dictionary <1>:                The standard type hierarchy.
                                                             (line  524)
* object; dictionary <2>:                Basic customization.
                                                             (line  209)
* object; dictionary <3>:                Dictionary displays.
                                                             (line    6)
* object; dictionary <4>:                Subscriptions.      (line    6)
* object; dictionary <5>:                Assignment statements.
                                                             (line  121)
* object; dictionary <6>:                Mapping Types --- dict.
                                                             (line    6)
* object; dictionary <7>:                Dictionary Objects. (line    6)
* object; Ellipsis:                      The standard type hierarchy.
                                                             (line   41)
* object; file:                          Reading and Writing Files.
                                                             (line    6)
* object; file <1>:                      File Objects.       (line    6)
* object; finalization:                  Finalization and De-allocation.
                                                             (line    6)
* object; floating point:                The standard type hierarchy.
                                                             (line   89)
* object; floating point <1>:            Numeric Types --- int float complex.
                                                             (line    6)
* object; floating point <2>:            Floating Point Objects.
                                                             (line    6)
* object; frame:                         The standard type hierarchy.
                                                             (line  654)
* object; frozenset:                     The standard type hierarchy.
                                                             (line  224)
* object; frozenset <1>:                 Set Objects.        (line    6)
* object; function:                      The standard type hierarchy.
                                                             (line  267)
* object; function <1>:                  The standard type hierarchy.
                                                             (line  437)
* object; function <2>:                  Calls.              (line  118)
* object; function <3>:                  Calls.              (line  127)
* object; function <4>:                  Function definitions.
                                                             (line    6)
* object; function <5>:                  Function Objects<3>.
                                                             (line    6)
* object; generator:                     The standard type hierarchy.
                                                             (line  632)
* object; generator <1>:                 Generator expressions.
                                                             (line    6)
* object; generator <2>:                 Yield expressions.  (line   82)
* object; immutable:                     The standard type hierarchy.
                                                             (line  128)
* object; immutable sequence:            The standard type hierarchy.
                                                             (line  128)
* object; instance:                      The standard type hierarchy.
                                                             (line  524)
* object; instance <1>:                  The standard type hierarchy.
                                                             (line  549)
* object; instance <2>:                  Calls.              (line  136)
* object; instancemethod:                Instance Method Objects.
                                                             (line    6)
* object; integer:                       The standard type hierarchy.
                                                             (line   59)
* object; integer <1>:                   Numeric Types --- int float complex.
                                                             (line    6)
* object; integer <2>:                   Integer Objects.    (line    6)
* object; io.StringIO:                   Text Sequence Type --- str.
                                                             (line   35)
* object; list:                          The standard type hierarchy.
                                                             (line  182)
* object; list <1>:                      List displays.      (line    6)
* object; list <2>:                      Attribute references.
                                                             (line   10)
* object; list <3>:                      Subscriptions.      (line    6)
* object; list <4>:                      Slicings.           (line    6)
* object; list <5>:                      Assignment statements.
                                                             (line  113)
* object; list <6>:                      Mutable Sequence Types.
                                                             (line    6)
* object; list <7>:                      Lists<2>.           (line    6)
* object; list <8>:                      List Objects.       (line    6)
* object; long integer:                  Integer Objects.    (line    6)
* object; mapping:                       The standard type hierarchy.
                                                             (line  231)
* object; mapping <1>:                   The standard type hierarchy.
                                                             (line  570)
* object; mapping <2>:                   Subscriptions.      (line    6)
* object; mapping <3>:                   Assignment statements.
                                                             (line  121)
* object; mapping <4>:                   Mapping Types --- dict.
                                                             (line    6)
* object; mapping <5>:                   Container Objects.  (line    6)
* object; memoryview:                    Binary Sequence Types --- bytes bytearray memoryview.
                                                             (line    6)
* object; memoryview <1>:                Slice Objects.      (line   59)
* object; method:                        Instance Objects.   (line   31)
* object; method <1>:                    The standard type hierarchy.
                                                             (line  352)
* object; method <2>:                    The standard type hierarchy.
                                                             (line  450)
* object; method <3>:                    Calls.              (line  127)
* object; method <4>:                    Methods.            (line    6)
* object; method <5>:                    Method Objects<2>.  (line    6)
* object; module:                        The standard type hierarchy.
                                                             (line  473)
* object; module <1>:                    Attribute references.
                                                             (line   10)
* object; module <2>:                    Module Objects.     (line    6)
* object; mutable:                       The standard type hierarchy.
                                                             (line  174)
* object; mutable <1>:                   Assignment statements.
                                                             (line    6)
* object; mutable <2>:                   Assignment statements.
                                                             (line  108)
* object; mutable sequence:              The standard type hierarchy.
                                                             (line  174)
* object; None:                          The standard type hierarchy.
                                                             (line   20)
* object; None <1>:                      Expression statements.
                                                             (line   17)
* object; None <2>:                      The None Object.    (line    6)
* object; NotImplemented:                The standard type hierarchy.
                                                             (line   28)
* object; numeric:                       The standard type hierarchy.
                                                             (line   47)
* object; numeric <1>:                   The standard type hierarchy.
                                                             (line  570)
* object; numeric <2>:                   Comparisons<2>.     (line   43)
* object; numeric <3>:                   Numeric Types --- int float complex.
                                                             (line    6)
* object; numeric <4>:                   Numeric Objects.    (line    6)
* object; range:                         Ranges.             (line    6)
* object; sequence:                      The standard type hierarchy.
                                                             (line  109)
* object; sequence <1>:                  The standard type hierarchy.
                                                             (line  570)
* object; sequence <2>:                  Subscriptions.      (line    6)
* object; sequence <3>:                  Slicings.           (line    6)
* object; sequence <4>:                  Membership test operations.
                                                             (line   36)
* object; sequence <5>:                  Assignment statements.
                                                             (line  113)
* object; sequence <6>:                  The for statement.  (line    6)
* object; sequence <7>:                  Common Sequence Operations.
                                                             (line    6)
* object; sequence <8>:                  Sequence Objects.   (line    6)
* object; set:                           The standard type hierarchy.
                                                             (line  218)
* object; set <1>:                       Set displays.       (line    6)
* object; set <2>:                       Set Types --- set frozenset.
                                                             (line    6)
* object; set <3>:                       Set Objects.        (line    6)
* object; set type:                      The standard type hierarchy.
                                                             (line  201)
* object; slice:                         Emulating container types.
                                                             (line   69)
* object; socket:                        socket --- Low-level networking interface.
                                                             (line   13)
* object; string:                        Subscriptions.      (line    6)
* object; string <1>:                    Slicings.           (line    6)
* object; string <2>:                    Ranges.             (line  118)
* object; traceback:                     The standard type hierarchy.
                                                             (line  692)
* object; traceback <1>:                 The raise statement.
                                                             (line   21)
* object; traceback <2>:                 The try statement.  (line   69)
* object; traceback <3>:                 sys --- System-specific parameters and functions.
                                                             (line  207)
* object; traceback <4>:                 traceback --- Print or retrieve a stack traceback.
                                                             (line   12)
* object; tuple:                         The standard type hierarchy.
                                                             (line  154)
* object; tuple <1>:                     Subscriptions.      (line    6)
* object; tuple <2>:                     Slicings.           (line    6)
* object; tuple <3>:                     Expression lists.   (line    8)
* object; tuple <4>:                     Immutable Sequence Types.
                                                             (line    6)
* object; tuple <5>:                     Tuples.             (line    6)
* object; tuple <6>:                     Tuple Objects.      (line    6)
* object; type:                          Built-in Functions. (line 1453)
* object; type <1>:                      Objects Types and Reference Counts.
                                                             (line    6)
* object; type <2>:                      Type Objects<2>.    (line    6)
* object; user-defined function:         The standard type hierarchy.
                                                             (line  267)
* object; user-defined function <1>:     Calls.              (line  118)
* object; user-defined function <2>:     Function definitions.
                                                             (line    6)
* object; user-defined method:           The standard type hierarchy.
                                                             (line  352)
* objects; comparing:                    Comparisons<2>.     (line   43)
* object_filenames() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  467)
* obufcount() (ossaudiodev.oss_audio_device method): Audio Device Objects.
                                                             (line  218)
* obuffree() (ossaudiodev.oss_audio_device method): Audio Device Objects.
                                                             (line  223)
* oct() (built-in function):             Built-in Functions. (line  870)
* octal literal:                         Numeric literals.   (line    6)
* octal; literals:                       Numeric Types --- int float complex.
                                                             (line   19)
* octdigits (in module string):          String constants.   (line   32)
* offset (traceback.TracebackException attribute): TracebackException Objects.
                                                             (line   54)
* offset (xml.parsers.expat.ExpatError attribute): ExpatError Exceptions.
                                                             (line   32)
* OK (in module curses):                 Constants<4>.       (line   13)
* OleDLL (class in ctypes):              Loading shared libraries.
                                                             (line   16)
* onclick() (in module turtle):          Using events.       (line    6)
* onclick() (in module turtle) <1>:      Using screen events.
                                                             (line   56)
* ondrag() (in module turtle):           Using events.       (line   57)
* onecmd() (cmd.Cmd method):             Cmd Objects.        (line   57)
* onkey() (in module turtle):            Using screen events.
                                                             (line   12)
* onkeypress() (in module turtle):       Using screen events.
                                                             (line   35)
* onkeyrelease() (in module turtle):     Using screen events.
                                                             (line   12)
* onrelease() (in module turtle):        Using events.       (line   30)
* onscreenclick() (in module turtle):    Using screen events.
                                                             (line   56)
* ontimer() (in module turtle):          Using screen events.
                                                             (line   86)
* OP (in module token):                  token --- Constants used with Python parse trees.
                                                             (line   40)
* open() (built-in function):            Built-in Functions. (line  877)
* open() (distutils.text_file.TextFile method): distutils text_file --- The TextFile class.
                                                             (line   91)
* open() (imaplib.IMAP4 method):         IMAP4 Objects.      (line  167)
* open() (in module aifc):               aifc --- Read and write AIFF and AIFC files.
                                                             (line   34)
* open() (in module bz2):                De compression of files.
                                                             (line    6)
* open() (in module codecs):             codecs --- Codec registry and base classes.
                                                             (line  165)
* open() (in module dbm):                dbm --- Interfaces to Unix "databases".
                                                             (line   31)
* open() (in module dbm.dumb):           dbm dumb --- Portable DBM implementation.
                                                             (line   26)
* open() (in module dbm.gnu):            dbm gnu --- GNU's reinterpretation of dbm.
                                                             (line   23)
* open() (in module dbm.ndbm):           dbm ndbm --- Interface based on ndbm.
                                                             (line   27)
* open() (in module gzip):               gzip --- Support for gzip files.
                                                             (line   28)
* open() (in module io):                 High-level Module Interface.
                                                             (line   12)
* open() (in module lzma):               Reading and writing compressed files.
                                                             (line    6)
* open() (in module os):                 File Descriptor Operations.
                                                             (line  220)
* open() (in module ossaudiodev):        ossaudiodev --- Access to OSS-compatible audio devices.
                                                             (line   40)
* open() (in module shelve):             shelve --- Python object persistence.
                                                             (line   17)
* open() (in module sunau):              sunau --- Read and write Sun AU files.
                                                             (line   48)
* open() (in module tarfile):            tarfile --- Read and write tar archive files.
                                                             (line   35)
* open() (in module tokenize):           Tokenizing Input.   (line  104)
* open() (in module wave):               wave --- Read and write WAV files.
                                                             (line   17)
* open() (in module webbrowser):         webbrowser --- Convenient Web-browser controller.
                                                             (line   50)
* open() (pathlib.Path method):          Methods<2>.         (line  220)
* open() (pipes.Template method):        Template Objects.   (line   42)
* open() (tarfile.TarFile class method): TarFile Objects.    (line   90)
* open() (telnetlib.Telnet method):      Telnet Objects.     (line   65)
* open() (urllib.request.OpenerDirector method): OpenerDirector Objects.
                                                             (line   29)
* open() (urllib.request.URLopener method): Legacy interface.
                                                             (line   98)
* open() (webbrowser.controller method): Browser Controller Objects.
                                                             (line    9)
* open() (zipfile.ZipFile method):       ZipFile Objects.    (line   82)
* OpenDatabase() (in module msilib):     msilib --- Read and write Microsoft Installer files.
                                                             (line   41)
* OpenerDirector (class in urllib.request): urllib request --- Extensible library for opening URLs.
                                                             (line  230)
* openfp() (in module sunau):            sunau --- Read and write Sun AU files.
                                                             (line   66)
* openfp() (in module wave):             wave --- Read and write WAV files.
                                                             (line   48)
* OpenKey() (in module winreg):          Functions<9>.       (line  255)
* OpenKeyEx() (in module winreg):        Functions<9>.       (line  255)
* openlog() (in module syslog):          syslog --- Unix syslog library routines.
                                                             (line   31)
* openmixer() (in module ossaudiodev):   ossaudiodev --- Access to OSS-compatible audio devices.
                                                             (line   68)
* openpty() (in module os):              File Descriptor Operations.
                                                             (line  309)
* openpty() (in module pty):             pty --- Pseudo-terminal utilities.
                                                             (line   25)
* OpenSSL; (use in module hashlib):      Hash algorithms.    (line   21)
* OpenSSL; (use in module ssl):          ssl --- TLS/SSL wrapper for socket objects.
                                                             (line    6)
* OPENSSL_VERSION (in module ssl):       Constants<7>.       (line  251)
* OPENSSL_VERSION_INFO (in module ssl):  Constants<7>.       (line  261)
* OPENSSL_VERSION_NUMBER (in module ssl): Constants<7>.      (line  271)
* OpenView() (msilib.Database method):   Database Objects.   (line    6)
* open_connection() (in module asyncio): Stream functions.   (line   11)
* open_new() (in module webbrowser):     webbrowser --- Convenient Web-browser controller.
                                                             (line   64)
* open_new() (webbrowser.controller method): Browser Controller Objects.
                                                             (line   15)
* open_new_tab() (in module webbrowser): webbrowser --- Convenient Web-browser controller.
                                                             (line   69)
* open_new_tab() (webbrowser.controller method): Browser Controller Objects.
                                                             (line   21)
* open_osfhandle() (in module msvcrt):   File Operations.    (line   41)
* open_unix_connection() (in module asyncio): Stream functions.
                                                             (line   56)
* open_unknown() (urllib.request.URLopener method): Legacy interface.
                                                             (line  107)
* operations on; dictionary; type:       Mapping Types --- dict.
                                                             (line    6)
* operations on; integer; types:         Bitwise Operations on Integer Types.
                                                             (line    6)
* operations on; list; type:             Mutable Sequence Types.
                                                             (line   16)
* operations on; mapping; types:         Mapping Types --- dict.
                                                             (line    6)
* operations on; numeric; types:         Numeric Types --- int float complex.
                                                             (line   93)
* operations on; sequence; types:        Common Sequence Operations.
                                                             (line   21)
* operations on; sequence; types <1>:    Mutable Sequence Types.
                                                             (line   16)
* operator (2to3 fixer):                 Fixers.             (line  225)
* operator (module):                     operator --- Standard operators as functions.
                                                             (line    6)
* operator; !=:                          Comparisons<2>.     (line    6)
* operator; %:                           Numeric Types --- int float complex.
                                                             (line   27)
* operator; &:                           Bitwise Operations on Integer Types.
                                                             (line    6)
* operator; *:                           Numeric Types --- int float complex.
                                                             (line   27)
* operator; **:                          Numeric Types --- int float complex.
                                                             (line   27)
* operator; +:                           Numeric Types --- int float complex.
                                                             (line   27)
* operator; -:                           Numeric Types --- int float complex.
                                                             (line   27)
* operator; /:                           Numeric Types --- int float complex.
                                                             (line   27)
* operator; //:                          Numeric Types --- int float complex.
                                                             (line   27)
* operator; <:                           Comparisons<2>.     (line    6)
* operator; <<:                          Bitwise Operations on Integer Types.
                                                             (line    6)
* operator; <=:                          Comparisons<2>.     (line    6)
* operator; ==:                          Comparisons<2>.     (line    6)
* operator; >:                           Comparisons<2>.     (line    6)
* operator; >=:                          Comparisons<2>.     (line    6)
* operator; >>:                          Bitwise Operations on Integer Types.
                                                             (line    6)
* operator; and:                         Boolean operations. (line   21)
* operator; and <1>:                     Truth Value Testing.
                                                             (line   27)
* operator; and <2>:                     Boolean Operations --- and or not.
                                                             (line   22)
* operator; comparison:                  Comparisons<2>.     (line    6)
* operator; in:                          Membership test operations.
                                                             (line   36)
* operator; in <1>:                      Comparisons<2>.     (line   66)
* operator; in <2>:                      Common Sequence Operations.
                                                             (line   21)
* operator; is:                          Membership test operations.
                                                             (line   39)
* operator; is <1>:                      Comparisons<2>.     (line    6)
* operator; is not:                      Membership test operations.
                                                             (line   39)
* operator; is not <1>:                  Comparisons<2>.     (line    6)
* operator; not:                         Boolean operations. (line   18)
* operator; not <1>:                     Boolean Operations --- and or not.
                                                             (line   22)
* operator; not in:                      Membership test operations.
                                                             (line   36)
* operator; not in <1>:                  Comparisons<2>.     (line   66)
* operator; not in <2>:                  Common Sequence Operations.
                                                             (line   21)
* operator; or:                          Boolean operations. (line   25)
* operator; or <1>:                      Truth Value Testing.
                                                             (line   27)
* operator; or <2>:                      Boolean Operations --- and or not.
                                                             (line   22)
* operator; overloading:                 Special method names.
                                                             (line    6)
* operator; precedence:                  Operator precedence.
                                                             (line    6)
* operator; ^:                           Bitwise Operations on Integer Types.
                                                             (line    6)
* operators:                             Operators.          (line    6)
* opmap (in module dis):                 Opcode collections. (line   13)
* opname (in module dis):                Opcode collections. (line    9)
* optimize() (in module pickletools):    Programmatic Interface<2>.
                                                             (line   32)
* OPTIMIZED_BYTECODE_SUFFIXES (in module importlib.machinery): importlib machinery -- Importers and path hooks.
                                                             (line   26)
* Optional (class in typing):            Classes functions and decorators.
                                                             (line   92)
* OptionGroup (class in optparse):       Grouping Options.   (line   12)
* OptionMenu (class in tkinter.tix):     Basic Widgets.      (line   49)
* OptionParser (class in optparse):      Creating the parser.
                                                             (line    9)
* options (doctest.Example attribute):   Example Objects.    (line   53)
* options (ssl.SSLContext attribute):    SSL Contexts.       (line  346)
* options() (configparser.ConfigParser method): ConfigParser Objects.
                                                             (line   96)
* optionxform() (configparser.ConfigParser method): ConfigParser Objects.
                                                             (line  264)
* optionxform() (in module configparser): Customizing Parser Behaviour.
                                                             (line  297)
* optparse (module):                     optparse --- Parser for command line options.
                                                             (line    6)
* OP_ALL (in module ssl):                Constants<7>.       (line  128)
* OP_CIPHER_SERVER_PREFERENCE (in module ssl): Constants<7>. (line  178)
* OP_NO_COMPRESSION (in module ssl):     Constants<7>.       (line  202)
* OP_NO_SSLv2 (in module ssl):           Constants<7>.       (line  136)
* OP_NO_SSLv3 (in module ssl):           Constants<7>.       (line  144)
* OP_NO_TLSv1 (in module ssl):           Constants<7>.       (line  152)
* OP_NO_TLSv1_1 (in module ssl):         Constants<7>.       (line  160)
* OP_NO_TLSv1_2 (in module ssl):         Constants<7>.       (line  169)
* OP_SINGLE_DH_USE (in module ssl):      Constants<7>.       (line  186)
* OP_SINGLE_ECDH_USE (in module ssl):    Constants<7>.       (line  194)
* ord() (built-in function):             Built-in Functions. (line 1091)
* OrderedDict (class in collections):    OrderedDict objects.
                                                             (line   11)
* ordered_attributes (xml.parsers.expat.xmlparser attribute): XMLParser Objects<2>.
                                                             (line  107)
* origin (importlib.machinery.ModuleSpec attribute): importlib machinery -- Importers and path hooks.
                                                             (line  354)
* origin_req_host (urllib.request.Request attribute): Request Objects.
                                                             (line   30)
* origin_server (wsgiref.handlers.BaseHandler attribute): wsgiref handlers -- server/gateway base classes.
                                                             (line  285)
* or_() (in module operator):            operator --- Standard operators as functions.
                                                             (line  131)
* os (module):                           os --- Miscellaneous operating system interfaces.
                                                             (line    6)
* os.path (module):                      os path --- Common pathname manipulations.
                                                             (line    6)
* OSError:                               Concrete exceptions.
                                                             (line   96)
* ossaudiodev (module):                  ossaudiodev --- Access to OSS-compatible audio devices.
                                                             (line    6)
* OSSAudioError:                         ossaudiodev --- Access to OSS-compatible audio devices.
                                                             (line   27)
* os_environ (wsgiref.handlers.BaseHandler attribute): wsgiref handlers -- server/gateway base classes.
                                                             (line  163)
* output:                                Expression statements.
                                                             (line   17)
* output (subprocess.CalledProcessError attribute): Using the subprocess Module.
                                                             (line  178)
* output (subprocess.TimeoutExpired attribute): Using the subprocess Module.
                                                             (line  146)
* output (unittest.TestCase attribute):  Test cases.         (line  432)
* output() (http.cookies.BaseCookie method): Cookie Objects. (line   22)
* output() (http.cookies.Morsel method): Morsel Objects.     (line   71)
* OutputChecker (class in doctest):      OutputChecker objects.
                                                             (line    6)
* OutputString() (http.cookies.Morsel method): Morsel Objects.
                                                             (line   86)
* output_charset (email.charset.Charset attribute): email charset Representing character sets.
                                                             (line   64)
* output_charset() (gettext.NullTranslations method): The NullTranslations class.
                                                             (line   68)
* output_codec (email.charset.Charset attribute): email charset Representing character sets.
                                                             (line   78)
* output_difference() (doctest.OutputChecker method): OutputChecker objects.
                                                             (line   27)
* over() (nntplib.NNTP method):          Methods<3>.         (line  167)
* Overflow (class in decimal):           Signals.            (line   67)
* OverflowError:                         Concrete exceptions.
                                                             (line  160)
* OverflowError (built-in exception):    Integer Objects.    (line  111)
* OverflowError (built-in exception) <1>: Integer Objects.   (line  134)
* OverflowError (built-in exception) <2>: Integer Objects.   (line  159)
* OverflowError (built-in exception) <3>: Integer Objects.   (line  167)
* OverflowError (built-in exception) <4>: Integer Objects.   (line  185)
* overlaps() (ipaddress.IPv4Network method): Network objects.
                                                             (line  142)
* overlaps() (ipaddress.IPv6Network method): Network objects.
                                                             (line  294)
* overlay() (curses.window method):      Window Objects.     (line  404)
* overwrite() (curses.window method):    Window Objects.     (line  417)
* owner() (pathlib.Path method):         Methods<2>.         (line  232)
* O_APPEND (in module os):               File Descriptor Operations.
                                                             (line  260)
* O_ASYNC (in module os):                File Descriptor Operations.
                                                             (line  294)
* O_BINARY (in module os):               File Descriptor Operations.
                                                             (line  284)
* O_CLOEXEC (in module os):              File Descriptor Operations.
                                                             (line  270)
* O_CREAT (in module os):                File Descriptor Operations.
                                                             (line  260)
* O_DIRECT (in module os):               File Descriptor Operations.
                                                             (line  294)
* O_DIRECTORY (in module os):            File Descriptor Operations.
                                                             (line  294)
* O_DSYNC (in module os):                File Descriptor Operations.
                                                             (line  270)
* O_EXCL (in module os):                 File Descriptor Operations.
                                                             (line  260)
* O_EXLOCK (in module os):               File Descriptor Operations.
                                                             (line  270)
* O_NDELAY (in module os):               File Descriptor Operations.
                                                             (line  270)
* O_NOATIME (in module os):              File Descriptor Operations.
                                                             (line  294)
* O_NOCTTY (in module os):               File Descriptor Operations.
                                                             (line  270)
* O_NOFOLLOW (in module os):             File Descriptor Operations.
                                                             (line  294)
* O_NOINHERIT (in module os):            File Descriptor Operations.
                                                             (line  284)
* O_NONBLOCK (in module os):             File Descriptor Operations.
                                                             (line  270)
* O_PATH (in module os):                 File Descriptor Operations.
                                                             (line  294)
* O_RANDOM (in module os):               File Descriptor Operations.
                                                             (line  284)
* O_RDONLY (in module os):               File Descriptor Operations.
                                                             (line  260)
* O_RDWR (in module os):                 File Descriptor Operations.
                                                             (line  260)
* O_RSYNC (in module os):                File Descriptor Operations.
                                                             (line  270)
* O_SEQUENTIAL (in module os):           File Descriptor Operations.
                                                             (line  284)
* O_SHLOCK (in module os):               File Descriptor Operations.
                                                             (line  270)
* O_SHORT_LIVED (in module os):          File Descriptor Operations.
                                                             (line  284)
* O_SYNC (in module os):                 File Descriptor Operations.
                                                             (line  270)
* O_TEMPORARY (in module os):            File Descriptor Operations.
                                                             (line  284)
* O_TEXT (in module os):                 File Descriptor Operations.
                                                             (line  284)
* O_TMPFILE (in module os):              File Descriptor Operations.
                                                             (line  294)
* O_TRUNC (in module os):                File Descriptor Operations.
                                                             (line  260)
* O_WRONLY (in module os):               File Descriptor Operations.
                                                             (line  260)
* p (pdb command):                       Debugger Commands.  (line  232)
* pack() (in module struct):             Functions and Exceptions.
                                                             (line   13)
* pack() (mailbox.MH method):            MH.                 (line   64)
* pack() (struct.Struct method):         Classes<2>.         (line   19)
* package:                               Packages<2>.        (line    6)
* package <1>:                           site --- Site-specific configuration hook.
                                                             (line   54)
* package <2>:                           Glossary.           (line  808)
* package variable; __all__:             Importing Modules<2>.
                                                             (line    7)
* package; regular:                      Regular packages.   (line    6)
* packed (ipaddress.IPv4Address attribute): Address objects. (line   64)
* packed (ipaddress.IPv6Address attribute): Address objects. (line  162)
* Packer (class in xdrlib):              xdrlib --- Encode and decode XDR data.
                                                             (line   18)
* packing (widgets):                     The Packer.         (line    6)
* packing; binary; data:                 struct --- Interpret bytes as packed binary data.
                                                             (line    6)
* pack_array() (xdrlib.Packer method):   Packer Objects.     (line   86)
* pack_bytes() (xdrlib.Packer method):   Packer Objects.     (line   54)
* pack_double() (xdrlib.Packer method):  Packer Objects.     (line   26)
* pack_farray() (xdrlib.Packer method):  Packer Objects.     (line   78)
* pack_float() (xdrlib.Packer method):   Packer Objects.     (line   22)
* pack_fopaque() (xdrlib.Packer method): Packer Objects.     (line   38)
* pack_fstring() (xdrlib.Packer method): Packer Objects.     (line   32)
* pack_into() (in module struct):        Functions and Exceptions.
                                                             (line   19)
* pack_into() (struct.Struct method):    Classes<2>.         (line   24)
* pack_list() (xdrlib.Packer method):    Packer Objects.     (line   61)
* pack_opaque() (xdrlib.Packer method):  Packer Objects.     (line   49)
* pack_string() (xdrlib.Packer method):  Packer Objects.     (line   43)
* PAGER:                                 pydoc --- Documentation generator and online help system.
                                                             (line   47)
* pair_content() (in module curses):     Functions<2>.       (line  359)
* pair_number() (in module curses):      Functions<2>.       (line  365)
* PanedWindow (class in tkinter.tix):    Manager Widgets.    (line    6)
* parameter:                             Glossary.           (line  817)
* Parameter (class in inspect):          Introspecting callables with the Signature object.
                                                             (line  132)
* parameter; call semantics:             Calls.              (line   24)
* parameter; difference from argument:   How can I pass optional or keyword parameters from one function to another?.
                                                             (line   16)
* parameter; function definition:        The with statement. (line   76)
* ParameterizedMIMEHeader (class in email.headerregistry): email headerregistry Custom Header Objects.
                                                             (line  253)
* parameters (inspect.Signature attribute): Introspecting callables with the Signature object.
                                                             (line   75)
* params (email.headerregistry.ParameterizedMIMEHeader attribute): email headerregistry Custom Header Objects.
                                                             (line  261)
* pardir (in module os):                 Miscellaneous System Information.
                                                             (line   87)
* paren (2to3 fixer):                    Fixers.             (line  257)
* parent (importlib.machinery.ModuleSpec attribute): importlib machinery -- Importers and path hooks.
                                                             (line  381)
* parent (urllib.request.BaseHandler attribute): BaseHandler Objects.
                                                             (line   25)
* parent() (tkinter.ttk.Treeview method): ttk Treeview.      (line  237)
* parenthesized form:                    Parenthesized forms.
                                                             (line    6)
* parentNode (xml.dom.Node attribute):   Node Objects.       (line   17)
* parents (collections.ChainMap attribute): ChainMap objects.
                                                             (line   59)
* paretovariate() (in module random):    random --- Generate pseudo-random numbers.
                                                             (line  237)
* parse() (doctest.DocTestParser method): DocTestParser objects.
                                                             (line   29)
* parse() (email.parser.BytesParser method): Parser class API.
                                                             (line   86)
* parse() (email.parser.Parser method):  Parser class API.   (line   40)
* parse() (in module ast):               ast Helpers.        (line    9)
* parse() (in module cgi):               Functions<6>.       (line    9)
* parse() (in module xml.dom.minidom):   xml dom minidom --- Minimal DOM implementation.
                                                             (line   37)
* parse() (in module xml.dom.pulldom):   xml dom pulldom --- Support for building partial DOM trees.
                                                             (line   74)
* parse() (in module xml.etree.ElementTree): Functions<5>.   (line   87)
* parse() (in module xml.sax):           xml sax --- Support for SAX2 parsers.
                                                             (line   25)
* parse() (string.Formatter method):     Custom String Formatting.
                                                             (line   40)
* parse() (urllib.robotparser.RobotFileParser method): urllib robotparser --- Parser for robots txt.
                                                             (line   25)
* parse() (xml.etree.ElementTree.ElementTree method): ElementTree Objects.
                                                             (line   59)
* Parse() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line    8)
* parse() (xml.sax.xmlreader.XMLReader method): XMLReader Objects.
                                                             (line    8)
* parseaddr() (in module email.utils):   email utils Miscellaneous utilities.
                                                             (line   21)
* parsebytes() (email.parser.BytesParser method): Parser class API.
                                                             (line  105)
* parsedate() (in module email.utils):   email utils Miscellaneous utilities.
                                                             (line   58)
* parsedate_to_datetime() (in module email.utils): email utils Miscellaneous utilities.
                                                             (line   80)
* parsedate_tz() (in module email.utils): email utils Miscellaneous utilities.
                                                             (line   70)
* ParseError (class in xml.etree.ElementTree): Exceptions<11>.
                                                             (line    6)
* ParseFile() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line   16)
* ParseFlags() (in module imaplib):      imaplib --- IMAP4 protocol client.
                                                             (line  113)
* parser:                                Lexical analysis.   (line    6)
* Parser (class in email.parser):        Parser class API.   (line   19)
* parser (module):                       parser --- Access Python parse trees.
                                                             (line    6)
* ParserCreate() (in module xml.parsers.expat): xml parsers expat --- Fast XML parsing using Expat.
                                                             (line   44)
* ParserError:                           Exceptions and Error Handling.
                                                             (line   11)
* ParseResult (class in urllib.parse):   Structured Parse Results.
                                                             (line   48)
* ParseResultBytes (class in urllib.parse): Structured Parse Results.
                                                             (line   73)
* parsestr() (email.parser.Parser method): Parser class API. (line   58)
* parseString() (in module xml.dom.minidom): xml dom minidom --- Minimal DOM implementation.
                                                             (line   50)
* parseString() (in module xml.dom.pulldom): xml dom pulldom --- Support for building partial DOM trees.
                                                             (line   87)
* parseString() (in module xml.sax):     xml sax --- Support for SAX2 parsers.
                                                             (line   36)
* parse_and_bind() (in module readline): Init file.          (line    8)
* parse_args() (argparse.ArgumentParser method): The parse_args method.
                                                             (line    6)
* PARSE_COLNAMES (in module sqlite3):    Module functions and constants.
                                                             (line   38)
* parse_config_h() (in module sysconfig): Other functions<3>.
                                                             (line   62)
* PARSE_DECLTYPES (in module sqlite3):   Module functions and constants.
                                                             (line   25)
* parse_header() (in module cgi):        Functions<6>.       (line   46)
* parse_known_args() (argparse.ArgumentParser method): Partial parsing.
                                                             (line    6)
* parse_multipart() (in module cgi):     Functions<6>.       (line   31)
* parse_qs() (in module cgi):            Functions<6>.       (line   17)
* parse_qs() (in module urllib.parse):   URL Parsing.        (line  115)
* parse_qsl() (in module cgi):           Functions<6>.       (line   24)
* parse_qsl() (in module urllib.parse):  URL Parsing.        (line  145)
* parsing; Python source code:           parser --- Access Python parse trees.
                                                             (line    6)
* ParsingError:                          Exceptions<4>.      (line   65)
* partial (asyncio.IncompleteReadError attribute): IncompleteReadError.
                                                             (line   14)
* partial() (imaplib.IMAP4 method):      IMAP4 Objects.      (line  176)
* partial() (in module functools):       functools --- Higher-order functions and operations on callable objects.
                                                             (line  160)
* partialmethod (class in functools):    functools --- Higher-order functions and operations on callable objects.
                                                             (line  192)
* parties (threading.Barrier attribute): Barrier Objects.    (line   92)
* partition() (bytearray method):        Bytes and Bytearray Operations.
                                                             (line  131)
* partition() (bytes method):            Bytes and Bytearray Operations.
                                                             (line  131)
* partition() (str method):              String Methods<2>.  (line  289)
* pass_() (poplib.POP3 method):          POP3 Objects.       (line   36)
* Paste:                                 Help menu Shell and Editor.
                                                             (line   29)
* patch() (in module unittest.mock):     patch.              (line   10)
* patch.dict() (in module unittest.mock): patch dict.        (line    6)
* patch.multiple() (in module unittest.mock): patch multiple.
                                                             (line    6)
* patch.object() (in module unittest.mock): patch object.    (line    6)
* patch.stopall() (in module unittest.mock): patch methods start and stop.
                                                             (line   70)
* PATH:                                  Changes in 'python' Command Behavior.
                                                             (line    6)
* PATH <1>:                              Changes in 'python' Command Behavior.
                                                             (line   11)
* PATH <2>:                              Changes in 'python' Command Behavior.
                                                             (line   12)
* PATH <3>:                              The Module Search Path.
                                                             (line   16)
* PATH <4>:                              Executable Python Scripts.
                                                             (line   11)
* PATH <5>:                              Environment variables.
                                                             (line   27)
* PATH <6>:                              Miscellaneous.      (line   16)
* PATH <7>:                              Installation Steps. (line   32)
* PATH <8>:                              Installation Steps. (line   56)
* PATH <9>:                              Installing Without UI.
                                                             (line   55)
* PATH <10>:                             Excursus Setting environment variables.
                                                             (line   23)
* PATH <11>:                             Excursus Setting environment variables.
                                                             (line   35)
* PATH <12>:                             Finding the Python executable.
                                                             (line   14)
* PATH <13>:                             Finding the Python executable.
                                                             (line   21)
* PATH <14>:                             Finding the Python executable.
                                                             (line   22)
* PATH <15>:                             Python Launcher for Windows.
                                                             (line   13)
* PATH <16>:                             From the command-line.
                                                             (line    7)
* PATH <17>:                             From the command-line.
                                                             (line   35)
* PATH <18>:                             Shebang Lines.      (line   42)
* PATH <19>:                             Shebang Lines.      (line   44)
* PATH <20>:                             Process Management. (line   57)
* PATH <21>:                             Process Management. (line   60)
* PATH <22>:                             Process Management. (line   63)
* PATH <23>:                             Process Management. (line  340)
* PATH <24>:                             Process Management. (line  344)
* PATH <25>:                             Process Management. (line  346)
* PATH <26>:                             Miscellaneous System Information.
                                                             (line  118)
* PATH <27>:                             webbrowser --- Convenient Web-browser controller.
                                                             (line  205)
* PATH <28>:                             Installing your CGI script on a Unix system.
                                                             (line   29)
* PATH <29>:                             Common problems and solutions.
                                                             (line   23)
* PATH <30>:                             Embedding Python<2>.
                                                             (line   31)
* PATH <31>:                             Embedding Python<2>.
                                                             (line   37)
* PATH <32>:                             How do I make a Python script executable on Unix?.
                                                             (line   24)
* PATH <33>:                             How do I make a Python script executable on Unix?.
                                                             (line   28)
* PATH <34>:                             The upload command. (line   26)
* Path (class in pathlib):               Concrete paths.     (line   11)
* path (http.cookiejar.Cookie attribute): Cookie Objects<2>. (line   40)
* path (http.server.BaseHTTPRequestHandler attribute): http server --- HTTP servers.
                                                             (line   78)
* path (importlib.abc.FileLoader attribute): importlib abc -- Abstract base classes related to import.
                                                             (line  391)
* path (importlib.machinery.ExtensionFileLoader attribute): importlib machinery -- Importers and path hooks.
                                                             (line  297)
* path (importlib.machinery.FileFinder attribute): importlib machinery -- Importers and path hooks.
                                                             (line  169)
* path (importlib.machinery.SourceFileLoader attribute): importlib machinery -- Importers and path hooks.
                                                             (line  211)
* path (importlib.machinery.SourcelessFileLoader attribute): importlib machinery -- Importers and path hooks.
                                                             (line  254)
* path (in module sys):                  sys --- System-specific parameters and functions.
                                                             (line  835)
* path (in module sys) <1>:              Embedding Python<2>.
                                                             (line   12)
* path (in module sys) <2>:              Initializing and finalizing the interpreter.
                                                             (line    8)
* path (in module sys) <3>:              Process-wide parameters.
                                                             (line  120)
* path (in module sys) <4>:              Process-wide parameters.
                                                             (line  133)
* path (os.DirEntry attribute):          Files and Directories.
                                                             (line  678)
* path based finder:                     The Path Based Finder.
                                                             (line    6)
* path based finder <1>:                 Glossary.           (line  886)
* Path browser:                          File menu Shell and Editor.
                                                             (line   22)
* path entry:                            Glossary.           (line  866)
* path entry finder:                     Glossary.           (line  871)
* path entry hook:                       Glossary.           (line  880)
* path hooks:                            Import hooks.       (line    6)
* path; configuration; file:             site --- Site-specific configuration hook.
                                                             (line   54)
* path; operations:                      pathlib --- Object-oriented filesystem paths.
                                                             (line    6)
* path; operations <1>:                  os path --- Common pathname manipulations.
                                                             (line    6)
* pathconf() (in module os):             Files and Directories.
                                                             (line  444)
* pathconf_names (in module os):         Files and Directories.
                                                             (line  466)
* PathEntryFinder (class in importlib.abc): importlib abc -- Abstract base classes related to import.
                                                             (line   90)
* PATHEXT:                               Other Improvements. (line   30)
* PATHEXT <1>:                           Installing Without UI.
                                                             (line   56)
* PathFinder (class in importlib.machinery): importlib machinery -- Importers and path hooks.
                                                             (line   95)
* pathlib (module):                      pathlib --- Object-oriented filesystem paths.
                                                             (line    6)
* pathname2url() (in module urllib.request): urllib request --- Extensible library for opening URLs.
                                                             (line  143)
* pathsep (in module os):                Miscellaneous System Information.
                                                             (line  115)
* path_hook() (importlib.machinery.FileFinder class method): importlib machinery -- Importers and path hooks.
                                                             (line  189)
* path_hooks (in module sys):            sys --- System-specific parameters and functions.
                                                             (line  860)
* path_importer_cache (in module sys):   sys --- System-specific parameters and functions.
                                                             (line  868)
* path_mtime() (importlib.abc.SourceLoader method): importlib abc -- Abstract base classes related to import.
                                                             (line  457)
* path_return_ok() (http.cookiejar.CookiePolicy method): CookiePolicy Objects.
                                                             (line   56)
* path_stats() (importlib.abc.SourceLoader method): importlib abc -- Abstract base classes related to import.
                                                             (line  435)
* path_stats() (importlib.machinery.SourceFileLoader method): importlib machinery -- Importers and path hooks.
                                                             (line  219)
* pattern (re.error attribute):          Module Contents.    (line  319)
* pattern (re.regex attribute):          Regular Expression Objects.
                                                             (line  118)
* pause() (in module signal):            Module contents<2>. (line  138)
* pause_reading() (asyncio.ReadTransport method): ReadTransport.
                                                             (line   10)
* pause_writing() (asyncio.BaseProtocol method): Flow control callbacks.
                                                             (line    9)
* PAX_FORMAT (in module tarfile):        tarfile --- Read and write tar archive files.
                                                             (line  227)
* pax_headers (tarfile.TarFile attribute): TarFile Objects.  (line  241)
* pax_headers (tarfile.TarInfo attribute): TarInfo Objects.  (line   88)
* pbkdf2_hmac() (in module hashlib):     Key derivation.     (line   11)
* pd() (in module turtle):               Drawing state.      (line    6)
* Pdb (class in pdb):                    pdb --- The Python Debugger.
                                                             (line   17)
* Pdb (class in pdb) <1>:                pdb --- The Python Debugger.
                                                             (line  136)
* pdb (module):                          pdb --- The Python Debugger.
                                                             (line    6)
* peek() (bz2.BZ2File method):           De compression of files.
                                                             (line   74)
* peek() (gzip.GzipFile method):         gzip --- Support for gzip files.
                                                             (line  115)
* peek() (io.BufferedReader method):     Buffered Streams.   (line   70)
* peek() (lzma.LZMAFile method):         Reading and writing compressed files.
                                                             (line   83)
* peek() (weakref.finalize method):      weakref --- Weak references.
                                                             (line  276)
* peer (smtpd.SMTPChannel attribute):    SMTPChannel Objects.
                                                             (line   94)
* PEM_cert_to_DER_cert() (in module ssl): Certificate handling.
                                                             (line   86)
* pen() (in module turtle):              Drawing state.      (line   33)
* pencolor() (in module turtle):         Color control.      (line    6)
* pending (ssl.MemoryBIO attribute):     Memory BIO Support<2>.
                                                             (line  124)
* pending() (ssl.SSLSocket method):      SSL Sockets.        (line  268)
* PendingDeprecationWarning:             Warnings.           (line   21)
* pendown() (in module turtle):          Drawing state.      (line    6)
* pensize() (in module turtle):          Drawing state.      (line   18)
* penup() (in module turtle):            Drawing state.      (line   12)
* PERCENT (in module token):             token --- Constants used with Python parse trees.
                                                             (line   40)
* PERCENTEQUAL (in module token):        token --- Constants used with Python parse trees.
                                                             (line   40)
* Performance:                           timeit --- Measure execution time of small code snippets.
                                                             (line    6)
* perf_counter() (in module time):       time --- Time access and conversions.
                                                             (line  308)
* PermissionError:                       OS exceptions.      (line   92)
* permutations() (in module itertools):  Itertool functions. (line  376)
* Persist() (msilib.SummaryInformation method): Summary Information Objects.
                                                             (line   29)
* persistence:                           pickle --- Python object serialization.
                                                             (line    6)
* persistent; objects:                   pickle --- Python object serialization.
                                                             (line    6)
* persistent_id (pickle protocol):       Persistence of External Objects.
                                                             (line    6)
* persistent_id() (pickle.Pickler method): Module Interface. (line  157)
* persistent_load (pickle protocol):     Persistence of External Objects.
                                                             (line    6)
* persistent_load() (pickle.Unpickler method): Module Interface.
                                                             (line  240)
* pformat() (in module pprint):          pprint --- Data pretty printer.
                                                             (line   76)
* pformat() (pprint.PrettyPrinter method): PrettyPrinter Objects.
                                                             (line    8)
* PF_CAN (in module socket):             Constants<6>.       (line   82)
* PF_RDS (in module socket):             Constants<6>.       (line  121)
* phase() (in module cmath):             Conversions to and from polar coordinates.
                                                             (line   22)
* Philbrick, Geoff:                      Keyword Parameters for Extension Functions.
                                                             (line   25)
* physical line:                         Logical lines.      (line    6)
* physical line <1>:                     Explicit line joining.
                                                             (line    6)
* physical line <2>:                     String and Bytes literals.
                                                             (line   75)
* pi (in module cmath):                  Constants<2>.       (line    6)
* pi (in module math):                   Constants.          (line    6)
* pickle (module):                       pickle --- Python object serialization.
                                                             (line    6)
* pickle() (in module copyreg):          copyreg --- Register pickle support functions.
                                                             (line   19)
* PickleError:                           Module Interface.   (line  107)
* Pickler (class in pickle):             Module Interface.   (line  133)
* pickletools (module):                  pickletools --- Tools for pickle developers.
                                                             (line    6)
* pickletools command line option; -a, –annotate: Command line options<3>.
                                                             (line    6)
* pickletools command line option; -l, –indentlevel=<num>: Command line options<3>.
                                                             (line   14)
* pickletools command line option; -m, –memo: Command line options<3>.
                                                             (line   18)
* pickletools command line option; -o, –output=<file>: Command line options<3>.
                                                             (line   10)
* pickletools command line option; -p, –preamble=<preamble>: Command line options<3>.
                                                             (line   23)
* pickling; objects:                     pickle --- Python object serialization.
                                                             (line    6)
* PicklingError:                         Module Interface.   (line  112)
* pid (asyncio.asyncio.subprocess.Process attribute): Process.
                                                             (line  117)
* pid (multiprocessing.Process attribute): Process and exceptions.
                                                             (line  104)
* pid (subprocess.Popen attribute):      Popen Objects.      (line  139)
* PIPE (in module subprocess):           Using the subprocess Module.
                                                             (line  114)
* Pipe() (in module multiprocessing):    Pipes and Queues.   (line   74)
* pipe() (in module os):                 File Descriptor Operations.
                                                             (line  321)
* pipe2() (in module os):                File Descriptor Operations.
                                                             (line  332)
* pipes (module):                        pipes --- Interface to shell pipelines.
                                                             (line    6)
* PIPE_BUF (in module select):           select --- Waiting for I/O completion.
                                                             (line  144)
* pipe_connection_lost() (asyncio.SubprocessProtocol method): Connection callbacks.
                                                             (line   39)
* pipe_data_received() (asyncio.SubprocessProtocol method): Connection callbacks.
                                                             (line   33)
* pkgutil (module):                      pkgutil --- Package extension utility.
                                                             (line    6)
* PKG_DIRECTORY (in module imp):         imp --- Access the import internals.
                                                             (line  324)
* placeholder (textwrap.TextWrapper attribute): textwrap --- Text wrapping and filling.
                                                             (line  263)
* PLAT:                                  distutils util --- Miscellaneous other utility functions.
                                                             (line   84)
* platform (in module sys):              sys --- System-specific parameters and functions.
                                                             (line  881)
* platform (in module sys) <1>:          Process-wide parameters.
                                                             (line  169)
* platform (module):                     platform --- Access to underlying platform's identifying data.
                                                             (line    6)
* platform() (in module platform):       Cross Platform.     (line   46)
* PlaySound() (in module winsound):      winsound --- Sound-playing interface for Windows.
                                                             (line   18)
* plist; file:                           plistlib --- Generate and parse Mac OS X plist files.
                                                             (line    6)
* plistlib (module):                     plistlib --- Generate and parse Mac OS X plist files.
                                                             (line    6)
* plock() (in module os):                Process Management. (line  274)
* plus:                                  Unary arithmetic and bitwise operations.
                                                             (line   13)
* PLUS (in module token):                token --- Constants used with Python parse trees.
                                                             (line   40)
* plus() (decimal.Context method):       Context objects.    (line  412)
* PLUSEQUAL (in module token):           token --- Constants used with Python parse trees.
                                                             (line   40)
* pm() (in module pdb):                  pdb --- The Python Debugger.
                                                             (line  126)
* POINTER() (in module ctypes):          Utility functions.  (line  134)
* pointer() (in module ctypes):          Utility functions.  (line  140)
* polar() (in module cmath):             Conversions to and from polar coordinates.
                                                             (line   41)
* Policy (class in email.policy):        email policy Policy Objects.
                                                             (line  107)
* poll() (in module select):             select --- Waiting for I/O completion.
                                                             (line   71)
* poll() (multiprocessing.Connection method): Connection Objects<2>.
                                                             (line   42)
* poll() (select.devpoll method):        /dev/poll Polling Objects.
                                                             (line   65)
* poll() (select.epoll method):          Edge and Level Trigger Polling epoll Objects.
                                                             (line   80)
* poll() (select.poll method):           Polling Objects.    (line   73)
* poll() (subprocess.Popen method):      Popen Objects.      (line    8)
* PollSelector (class in selectors):     Classes<3>.         (line  171)
* Pool (class in multiprocessing.pool):  Process Pools.      (line    9)
* pop() (array.array method):            array --- Efficient arrays of numeric values.
                                                             (line  203)
* pop() (collections.deque method):      deque objects.      (line   87)
* pop() (dict method):                   Mapping Types --- dict.
                                                             (line  158)
* pop() (mailbox.Mailbox method):        Mailbox objects.    (line  208)
* pop() (sequence method):               Mutable Sequence Types.
                                                             (line   16)
* pop() (set method):                    Set Types --- set frozenset.
                                                             (line  197)
* POP3 (class in poplib):                poplib --- POP3 protocol client.
                                                             (line   29)
* POP3; protocol:                        poplib --- POP3 protocol client.
                                                             (line    6)
* POP3_SSL (class in poplib):            poplib --- POP3 protocol client.
                                                             (line   38)
* Popen (class in subprocess):           Popen Constructor.  (line   11)
* popen() (in module os):                The standard type hierarchy.
                                                             (line  579)
* popen() (in module os) <1>:            Process Management. (line  281)
* popen() (in module os) <2>:            select --- Waiting for I/O completion.
                                                             (line  125)
* popen() (in module platform):          Win95/98 specific.  (line    6)
* popitem() (collections.OrderedDict method): OrderedDict objects.
                                                             (line   21)
* popitem() (dict method):               Mapping Types --- dict.
                                                             (line  164)
* popitem() (mailbox.Mailbox method):    Mailbox objects.    (line  217)
* popleft() (collections.deque method):  deque objects.      (line   92)
* poplib (module):                       poplib --- POP3 protocol client.
                                                             (line    6)
* PopupMenu (class in tkinter.tix):      Basic Widgets.      (line   53)
* pop_alignment() (formatter.formatter method): The Formatter Interface.
                                                             (line   97)
* pop_all() (contextlib.ExitStack method): Utilities.        (line  349)
* POP_BLOCK (opcode):                    Python Bytecode Instructions.
                                                             (line  334)
* POP_EXCEPT (opcode):                   Python Bytecode Instructions.
                                                             (line  339)
* pop_font() (formatter.formatter method): The Formatter Interface.
                                                             (line  109)
* POP_JUMP_IF_FALSE (opcode):            Python Bytecode Instructions.
                                                             (line  506)
* POP_JUMP_IF_TRUE (opcode):             Python Bytecode Instructions.
                                                             (line  501)
* pop_margin() (formatter.formatter method): The Formatter Interface.
                                                             (line  121)
* pop_source() (shlex.shlex method):     shlex Objects.      (line   63)
* pop_style() (formatter.formatter method): The Formatter Interface.
                                                             (line  132)
* POP_TOP (opcode):                      Python Bytecode Instructions.
                                                             (line   59)
* port (http.cookiejar.Cookie attribute): Cookie Objects<2>. (line   35)
* portion:                               Glossary.           (line  891)
* port_specified (http.cookiejar.Cookie attribute): Cookie Objects<2>.
                                                             (line   76)
* pos (json.JSONDecodeError attribute):  Exceptions<9>.      (line   19)
* pos (re.error attribute):              Module Contents.    (line  323)
* pos (re.match attribute):              Match Objects.      (line  149)
* pos() (in module operator):            operator --- Standard operators as functions.
                                                             (line  136)
* pos() (in module turtle):              Tell Turtle's state.
                                                             (line    6)
* position (xml.etree.ElementTree.ParseError attribute): Exceptions<11>.
                                                             (line   20)
* position() (in module turtle):         Tell Turtle's state.
                                                             (line    6)
* positional argument:                   Glossary.           (line  897)
* posix (module):                        posix --- The most common POSIX system calls.
                                                             (line    6)
* POSIX; I/O control:                    termios --- POSIX style tty control.
                                                             (line    6)
* POSIXLY_CORRECT:                       getopt --- C-style parser for command line options.
                                                             (line   71)
* PosixPath (class in pathlib):          Concrete paths.     (line   22)
* posix_fadvise() (in module os):        File Descriptor Operations.
                                                             (line  352)
* POSIX_FADV_DONTNEED (in module os):    File Descriptor Operations.
                                                             (line  366)
* POSIX_FADV_NOREUSE (in module os):     File Descriptor Operations.
                                                             (line  366)
* POSIX_FADV_NORMAL (in module os):      File Descriptor Operations.
                                                             (line  366)
* POSIX_FADV_RANDOM (in module os):      File Descriptor Operations.
                                                             (line  366)
* POSIX_FADV_SEQUENTIAL (in module os):  File Descriptor Operations.
                                                             (line  366)
* POSIX_FADV_WILLNEED (in module os):    File Descriptor Operations.
                                                             (line  366)
* posix_fallocate() (in module os):      File Descriptor Operations.
                                                             (line  343)
* post() (nntplib.NNTP method):          Methods<3>.         (line  278)
* post() (ossaudiodev.oss_audio_device method): Audio Device Objects.
                                                             (line  179)
* postcmd() (cmd.Cmd method):            Cmd Objects.        (line   96)
* postloop() (cmd.Cmd method):           Cmd Objects.        (line  114)
* post_mortem() (in module pdb):         pdb --- The Python Debugger.
                                                             (line  119)
* post_setup() (venv.EnvBuilder method): API<2>.             (line  100)
* pow() (built-in function):             Built-in Functions. (line 1098)
* pow() (in module math):                Power and logarithmic functions.
                                                             (line   57)
* pow() (in module operator):            operator --- Standard operators as functions.
                                                             (line  141)
* power() (decimal.Context method):      Context objects.    (line  418)
* pp (pdb command):                      Debugger Commands.  (line  241)
* pprint (module):                       pprint --- Data pretty printer.
                                                             (line    6)
* pprint() (in module pprint):           pprint --- Data pretty printer.
                                                             (line   85)
* pprint() (pprint.PrettyPrinter method): PrettyPrinter Objects.
                                                             (line   14)
* prcal() (in module calendar):          calendar --- General calendar-related functions.
                                                             (line  245)
* pread() (in module os):                File Descriptor Operations.
                                                             (line  380)
* preamble (email.message.Message attribute): email message Representing an email message.
                                                             (line  642)
* precmd() (cmd.Cmd method):             Cmd Objects.        (line   86)
* prefix:                                Python-related paths and files.
                                                             (line    7)
* prefix <1>:                            Include Files.      (line   32)
* prefix <2>:                            Include Files.      (line   35)
* prefix <3>:                            Include Files.      (line   42)
* PREFIX (in module distutils.sysconfig): distutils sysconfig --- System configuration information.
                                                             (line   19)
* prefix (in module sys):                sys --- System-specific parameters and functions.
                                                             (line  932)
* prefix (xml.dom.Attr attribute):       Attr Objects.       (line   18)
* prefix (xml.dom.Node attribute):       Node Objects.       (line   69)
* prefix (zipimport.zipimporter attribute): zipimporter Objects.
                                                             (line   74)
* PREFIXES (in module site):             Module contents<3>. (line    6)
* prefixlen (ipaddress.IPv4Network attribute): Network objects.
                                                             (line  126)
* prefixlen (ipaddress.IPv6Network attribute): Network objects.
                                                             (line  290)
* preloop() (cmd.Cmd method):            Cmd Objects.        (line  108)
* prepare() (logging.handlers.QueueHandler method): QueueHandler.
                                                             (line   33)
* prepare() (logging.handlers.QueueListener method): QueueListener.
                                                             (line   50)
* prepare_class() (in module types):     Dynamic Type Creation.
                                                             (line   23)
* prepare_input_source() (in module xml.sax.saxutils): xml sax saxutils --- SAX Utilities.
                                                             (line   73)
* prepend() (pipes.Template method):     Template Objects.   (line   37)
* preprocess() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  433)
* PrettyPrinter (class in pprint):       pprint --- Data pretty printer.
                                                             (line   27)
* prev() (tkinter.ttk.Treeview method):  ttk Treeview.       (line  242)
* previousSibling (xml.dom.Node attribute): Node Objects.    (line   32)
* primary:                               Primaries.          (line    6)
* print (2to3 fixer):                    Fixers.             (line  263)
* print() (built-in function):           Built-in Functions. (line 1115)
* print() (built-in function); __str__() (object method): Basic customization.
                                                             (line  122)
* printable (in module string):          String constants.   (line   41)
* printdir() (zipfile.ZipFile method):   ZipFile Objects.    (line  152)
* printf-style formatting:               printf-style String Formatting.
                                                             (line    6)
* printf-style formatting <1>:           printf-style Bytes Formatting.
                                                             (line    6)
* print_callees() (pstats.Stats method): The Stats Class.    (line  209)
* print_callers() (pstats.Stats method): The Stats Class.    (line  188)
* print_directory() (in module cgi):     Functions<6>.       (line   65)
* print_environ() (in module cgi):       Functions<6>.       (line   57)
* print_environ_usage() (in module cgi): Functions<6>.       (line   69)
* print_exc() (in module traceback):     traceback --- Print or retrieve a stack traceback.
                                                             (line   53)
* print_exc() (timeit.Timer method):     Python Interface.   (line  109)
* print_exception() (in module traceback): traceback --- Print or retrieve a stack traceback.
                                                             (line   29)
* PRINT_EXPR (opcode):                   Python Bytecode Instructions.
                                                             (line  277)
* print_form() (in module cgi):          Functions<6>.       (line   61)
* print_help() (argparse.ArgumentParser method): Printing help.
                                                             (line   16)
* print_last() (in module traceback):    traceback --- Print or retrieve a stack traceback.
                                                             (line   58)
* print_stack() (asyncio.Task method):   Task.               (line  100)
* print_stack() (in module traceback):   traceback --- Print or retrieve a stack traceback.
                                                             (line   65)
* print_stats() (profile.Profile method): profile and cProfile Module Reference.
                                                             (line   76)
* print_stats() (pstats.Stats method):   The Stats Class.    (line  156)
* print_tb() (in module traceback):      traceback --- Print or retrieve a stack traceback.
                                                             (line   18)
* print_usage() (argparse.ArgumentParser method): Printing help.
                                                             (line   10)
* print_usage() (optparse.OptionParser method): Other methods.
                                                             (line   15)
* print_version() (optparse.OptionParser method): Printing a version string.
                                                             (line   26)
* PriorityQueue (class in asyncio):      PriorityQueue.      (line    6)
* PriorityQueue (class in queue):        queue --- A synchronized queue class.
                                                             (line   43)
* PRIO_PGRP (in module os):              Process Parameters. (line  234)
* PRIO_PROCESS (in module os):           Process Parameters. (line  234)
* PRIO_USER (in module os):              Process Parameters. (line  234)
* private; names:                        Identifiers Names.  (line   14)
* prlimit() (in module resource):        Resource Limits.    (line   51)
* prmonth() (calendar.TextCalendar method): calendar --- General calendar-related functions.
                                                             (line  118)
* prmonth() (in module calendar):        calendar --- General calendar-related functions.
                                                             (line  236)
* ProactorEventLoop (class in asyncio):  Available event loops.
                                                             (line   19)
* procedure; call:                       Expression statements.
                                                             (line   17)
* Process (class in multiprocessing):    Process and exceptions.
                                                             (line    6)
* process() (logging.LoggerAdapter method): LoggerAdapter Objects.
                                                             (line   16)
* process; group:                        Process Parameters. (line  143)
* process; group <1>:                    Process Parameters. (line  200)
* process; id:                           Process Parameters. (line  206)
* process; id of parent:                 Process Parameters. (line  210)
* process; killing:                      Process Management. (line  244)
* process; killing <1>:                  Process Management. (line  263)
* process; scheduling priority:          Process Parameters. (line  221)
* process; scheduling priority <1>:      Process Parameters. (line  349)
* process; signalling:                   Process Management. (line  244)
* process; signalling <1>:               Process Management. (line  263)
* ProcessError:                          Process and exceptions.
                                                             (line  184)
* processes, light-weight:               _thread --- Low-level threading API.
                                                             (line    6)
* ProcessingInstruction() (in module xml.etree.ElementTree): Functions<5>.
                                                             (line   94)
* processingInstruction() (xml.sax.handler.ContentHandler method): ContentHandler Objects.
                                                             (line  164)
* ProcessingInstructionHandler() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line  236)
* ProcessLookupError:                    OS exceptions.      (line   98)
* processor time:                        time --- Time access and conversions.
                                                             (line  118)
* processor() (in module platform):      Cross Platform.     (line   63)
* ProcessPoolExecutor (class in concurrent.futures): ProcessPoolExecutor.
                                                             (line   21)
* process_exited() (asyncio.SubprocessProtocol method): Connection callbacks.
                                                             (line   44)
* process_message() (smtpd.SMTPServer method): SMTPServer Objects.
                                                             (line   41)
* process_request() (socketserver.BaseServer method): Server Objects.
                                                             (line  154)
* process_time() (in module time):       time --- Time access and conversions.
                                                             (line  319)
* product() (in module itertools):       Itertool functions. (line  436)
* Profile (class in profile):            profile and cProfile Module Reference.
                                                             (line   34)
* profile (module):                      profile and cProfile Module Reference.
                                                             (line    6)
* profile function:                      threading --- Thread-based parallelism.
                                                             (line   71)
* profile function <1>:                  sys --- System-specific parameters and functions.
                                                             (line  530)
* profile function <2>:                  sys --- System-specific parameters and functions.
                                                             (line  991)
* profiler:                              sys --- System-specific parameters and functions.
                                                             (line  530)
* profiler <1>:                          sys --- System-specific parameters and functions.
                                                             (line  991)
* profiling, deterministic:              Introduction to the profilers.
                                                             (line    6)
* program:                               Complete Python programs.
                                                             (line    6)
* Progressbar (class in tkinter.ttk):    ttk Progressbar.    (line    6)
* prompt (cmd.Cmd attribute):            Cmd Objects.        (line  123)
* prompts, interpreter:                  sys --- System-specific parameters and functions.
                                                             (line  952)
* prompt_user_passwd() (urllib.request.FancyURLopener method): Legacy interface.
                                                             (line  184)
* propagate (logging.Logger attribute):  Logger Objects.     (line   25)
* property (built-in class):             Built-in Functions. (line 1140)
* property list:                         plistlib --- Generate and parse Mac OS X plist files.
                                                             (line    6)
* PropertyMock (class in unittest.mock): The Mock Class.     (line  593)
* property_declaration_handler (in module xml.sax.handler): xml sax handler --- Base classes for SAX handlers.
                                                             (line   97)
* property_dom_node (in module xml.sax.handler): xml sax handler --- Base classes for SAX handlers.
                                                             (line  104)
* property_lexical_handler (in module xml.sax.handler): xml sax handler --- Base classes for SAX handlers.
                                                             (line   90)
* property_xml_string (in module xml.sax.handler): xml sax handler --- Base classes for SAX handlers.
                                                             (line  111)
* proto (socket.socket attribute):       Socket Objects.     (line  544)
* Protocol (class in asyncio):           Protocol classes.   (line    6)
* protocol (ssl.SSLContext attribute):   SSL Contexts.       (line  358)
* protocol; context management:          Context Manager Types.
                                                             (line    6)
* protocol; iterator:                    Iterator Types.     (line    6)
* protocol; Telnet:                      telnetlib --- Telnet client.
                                                             (line    6)
* PROTOCOL_SSLv2 (in module ssl):        Constants<7>.       (line   88)
* PROTOCOL_SSLv23 (in module ssl):       Constants<7>.       (line   82)
* PROTOCOL_SSLv3 (in module ssl):        Constants<7>.       (line   98)
* PROTOCOL_TLSv1 (in module ssl):        Constants<7>.       (line  108)
* PROTOCOL_TLSv1_1 (in module ssl):      Constants<7>.       (line  112)
* PROTOCOL_TLSv1_2 (in module ssl):      Constants<7>.       (line  119)
* protocol_version (http.server.BaseHTTPRequestHandler attribute): http server --- HTTP servers.
                                                             (line  136)
* PROTOCOL_VERSION (imaplib.IMAP4 attribute): IMAP4 Objects. (line  367)
* prot_c() (ftplib.FTP_TLS method):      FTP_TLS Objects.    (line   35)
* prot_p() (ftplib.FTP_TLS method):      FTP_TLS Objects.    (line   31)
* provisional API:                       Glossary.           (line  901)
* provisional package:                   Glossary.           (line  921)
* proxy() (in module weakref):           weakref --- Weak references.
                                                             (line  132)
* proxyauth() (imaplib.IMAP4 method):    IMAP4 Objects.      (line  181)
* ProxyBasicAuthHandler (class in urllib.request): urllib request --- Extensible library for opening URLs.
                                                             (line  324)
* ProxyDigestAuthHandler (class in urllib.request): urllib request --- Extensible library for opening URLs.
                                                             (line  356)
* ProxyHandler (class in urllib.request): urllib request --- Extensible library for opening URLs.
                                                             (line  254)
* ProxyType (in module weakref):         weakref --- Weak references.
                                                             (line  305)
* ProxyTypes (in module weakref):        weakref --- Weak references.
                                                             (line  313)
* pryear() (calendar.TextCalendar method): calendar --- General calendar-related functions.
                                                             (line  133)
* ps1 (in module sys):                   sys --- System-specific parameters and functions.
                                                             (line  949)
* ps2 (in module sys):                   sys --- System-specific parameters and functions.
                                                             (line  949)
* pstats (module):                       The Stats Class.    (line    7)
* pstdev() (in module statistics):       Function details.   (line  181)
* pthreads:                              _thread --- Low-level threading API.
                                                             (line   14)
* pthread_kill() (in module signal):     Module contents<2>. (line  147)
* pthread_sigmask() (in module signal):  Module contents<2>. (line  173)
* pty (module):                          pty --- Pseudo-terminal utilities.
                                                             (line    6)
* pu() (in module turtle):               Drawing state.      (line   12)
* publicId (xml.dom.DocumentType attribute): DocumentType Objects.
                                                             (line   17)
* PullDom (class in xml.dom.pulldom):    xml dom pulldom --- Support for building partial DOM trees.
                                                             (line   66)
* punctuation (in module string):        String constants.   (line   36)
* PurePath (class in pathlib):           Pure paths.         (line   10)
* PurePath.anchor (in module pathlib):   Methods and properties.
                                                             (line   40)
* PurePath.drive (in module pathlib):    Methods and properties.
                                                             (line    8)
* PurePath.name (in module pathlib):     Methods and properties.
                                                             (line   94)
* PurePath.parent (in module pathlib):   Methods and properties.
                                                             (line   66)
* PurePath.parents (in module pathlib):  Methods and properties.
                                                             (line   53)
* PurePath.parts (in module pathlib):    Accessing individual parts.
                                                             (line    9)
* PurePath.path (in module pathlib):     Methods and properties.
                                                             (line  109)
* PurePath.root (in module pathlib):     Methods and properties.
                                                             (line   24)
* PurePath.stem (in module pathlib):     Methods and properties.
                                                             (line  154)
* PurePath.suffix (in module pathlib):   Methods and properties.
                                                             (line  132)
* PurePath.suffixes (in module pathlib): Methods and properties.
                                                             (line  143)
* PurePosixPath (class in pathlib):      Pure paths.         (line   61)
* PureProxy (class in smtpd):            PureProxy Objects.  (line    6)
* PureWindowsPath (class in pathlib):    Pure paths.         (line   71)
* purge() (in module re):                Module Contents.    (line  302)
* Purpose.CLIENT_AUTH (in module ssl):   Constants<7>.       (line  305)
* Purpose.SERVER_AUTH (in module ssl):   Constants<7>.       (line  296)
* push() (asynchat.async_chat method):   asynchat --- Asynchronous socket command/response handler.
                                                             (line   99)
* push() (code.InteractiveConsole method): Interactive Console Objects.
                                                             (line   22)
* push() (contextlib.ExitStack method):  Utilities.          (line  316)
* pushbutton() (msilib.Dialog method):   GUI classes.        (line   68)
* push_alignment() (formatter.formatter method): The Formatter Interface.
                                                             (line   90)
* push_font() (formatter.formatter method): The Formatter Interface.
                                                             (line  101)
* push_margin() (formatter.formatter method): The Formatter Interface.
                                                             (line  113)
* push_source() (shlex.shlex method):    shlex Objects.      (line   56)
* push_style() (formatter.formatter method): The Formatter Interface.
                                                             (line  125)
* push_token() (shlex.shlex method):     shlex Objects.      (line   16)
* push_with_producer() (asynchat.async_chat method): asynchat --- Asynchronous socket command/response handler.
                                                             (line  107)
* put() (asyncio.Queue method):          Queue.              (line   72)
* put() (multiprocessing.Queue method):  Pipes and Queues.   (line  120)
* put() (multiprocessing.SimpleQueue method): Pipes and Queues.
                                                             (line  210)
* put() (queue.Queue method):            Queue Objects.      (line   29)
* putch() (in module msvcrt):            Console I/O.        (line   35)
* putenv() (in module os):               Process Parameters. (line  279)
* putheader() (http.client.HTTPConnection method): HTTPConnection Objects.
                                                             (line  113)
* putp() (in module curses):             Functions<2>.       (line  371)
* putrequest() (http.client.HTTPConnection method): HTTPConnection Objects.
                                                             (line  102)
* putwch() (in module msvcrt):           Console I/O.        (line   39)
* putwin() (curses.window method):       Window Objects.     (line  430)
* put_nowait() (asyncio.Queue method):   Queue.              (line   84)
* put_nowait() (multiprocessing.Queue method): Pipes and Queues.
                                                             (line  132)
* put_nowait() (queue.Queue method):     Queue Objects.      (line   40)
* pvariance() (in module statistics):    Function details.   (line  190)
* pwd (module):                          pwd --- The password database.
                                                             (line    6)
* pwd() (ftplib.FTP method):             FTP Objects.        (line  212)
* pwrite() (in module os):               File Descriptor Operations.
                                                             (line  390)
* PyAnySet_Check (C function):           Set Objects.        (line   55)
* PyAnySet_CheckExact (C function):      Set Objects.        (line   60)
* PyArg_Parse (C function):              API Functions.      (line   45)
* PyArg_ParseTuple (C function):         API Functions.      (line    6)
* PyArg_ParseTuple():                    Extracting Parameters in Extension Functions.
                                                             (line    6)
* PyArg_ParseTupleAndKeywords (C function): API Functions.   (line   20)
* PyArg_ParseTupleAndKeywords():         Keyword Parameters for Extension Functions.
                                                             (line    6)
* PyArg_UnpackTuple (C function):        API Functions.      (line   57)
* PyArg_ValidateKeywordArguments (C function): API Functions.
                                                             (line   36)
* PyArg_VaParse (C function):            API Functions.      (line   13)
* PyArg_VaParseTupleAndKeywords (C function): API Functions. (line   28)
* PyASCIIObject (C type):                Unicode Type.       (line   29)
* PyAsyncMethods (C type):               Async Object Structures.
                                                             (line    8)
* PyAsyncMethods.am_aiter (C member):    Async Object Structures.
                                                             (line   34)
* PyAsyncMethods.am_anext (C member):    Async Object Structures.
                                                             (line   46)
* PyAsyncMethods.am_await (C member):    Async Object Structures.
                                                             (line   22)
* PyBool_Check (C function):             Boolean Objects.    (line   11)
* PyBool_FromLong (C function):          Boolean Objects.    (line   37)
* PyBufferProcs:                         Buffer Protocol.    (line   20)
* PyBufferProcs (C type):                Buffer Object Structures.
                                                             (line    6)
* PyBufferProcs.bf_getbuffer (C member): Buffer Object Structures.
                                                             (line   12)
* PyBufferProcs.bf_releasebuffer (C member): Buffer Object Structures.
                                                             (line   59)
* PyBuffer_FillContiguousStrides (C function): Buffer-related functions.
                                                             (line   51)
* PyBuffer_FillInfo (C function):        Buffer-related functions.
                                                             (line   62)
* PyBuffer_IsContiguous (C function):    Buffer-related functions.
                                                             (line   45)
* PyBuffer_Release (C function):         Buffer-related functions.
                                                             (line   31)
* PyBuffer_SizeFromFormat (C function):  Buffer-related functions.
                                                             (line   40)
* PyBUF_ANY_CONTIGUOUS (C macro):        contiguity requests.
                                                             (line   20)
* PyBUF_CONTIG (C macro):                compound requests.  (line   36)
* PyBUF_CONTIG_RO (C macro):             compound requests.  (line   39)
* PyBUF_C_CONTIGUOUS (C macro):          contiguity requests.
                                                             (line   14)
* PyBUF_FORMAT (C macro):                readonly format.    (line   14)
* PyBUF_FULL (C macro):                  compound requests.  (line   18)
* PyBUF_FULL_RO (C macro):               compound requests.  (line   21)
* PyBUF_F_CONTIGUOUS (C macro):          contiguity requests.
                                                             (line   17)
* PyBUF_INDIRECT (C macro):              shape strides suboffsets.
                                                             (line   14)
* PyBUF_ND (C macro):                    shape strides suboffsets.
                                                             (line   20)
* PyBUF_ND (C macro) <1>:                contiguity requests.
                                                             (line   23)
* PyBUF_RECORDS (C macro):               compound requests.  (line   24)
* PyBUF_RECORDS_RO (C macro):            compound requests.  (line   27)
* PyBUF_SIMPLE (C macro):                shape strides suboffsets.
                                                             (line   23)
* PyBUF_STRIDED (C macro):               compound requests.  (line   30)
* PyBUF_STRIDED_RO (C macro):            compound requests.  (line   33)
* PyBUF_STRIDES (C macro):               shape strides suboffsets.
                                                             (line   17)
* PyBUF_WRITABLE (C macro):              readonly format.    (line    6)
* PyByteArrayObject (C type):            Byte Array Objects. (line    6)
* PyByteArray_AsString (C function):     Direct API functions.
                                                             (line   26)
* PyByteArray_AS_STRING (C function):    Macros.             (line    8)
* PyByteArray_Check (C function):        Type check macros.  (line    6)
* PyByteArray_CheckExact (C function):   Type check macros.  (line   11)
* PyByteArray_Concat (C function):       Direct API functions.
                                                             (line   17)
* PyByteArray_FromObject (C function):   Direct API functions.
                                                             (line    6)
* PyByteArray_FromStringAndSize (C function): Direct API functions.
                                                             (line   11)
* PyByteArray_GET_SIZE (C function):     Macros.             (line   12)
* PyByteArray_Resize (C function):       Direct API functions.
                                                             (line   32)
* PyByteArray_Size (C function):         Direct API functions.
                                                             (line   22)
* PyByteArray_Type (C variable):         Byte Array Objects. (line   11)
* PyBytesObject (C type):                Bytes Objects.      (line    9)
* PyBytes_AsString (C function):         Bytes Objects.      (line  133)
* PyBytes_AsStringAndSize (C function):  Bytes Objects.      (line  150)
* PyBytes_AS_STRING (C function):        Bytes Objects.      (line  145)
* PyBytes_Check (C function):            Bytes Objects.      (line   20)
* PyBytes_CheckExact (C function):       Bytes Objects.      (line   25)
* PyBytes_Concat (C function):           Bytes Objects.      (line  168)
* PyBytes_ConcatAndDel (C function):     Bytes Objects.      (line  178)
* PyBytes_FromFormat (C function):       Bytes Objects.      (line   44)
* PyBytes_FromFormatV (C function):      Bytes Objects.      (line  112)
* PyBytes_FromObject (C function):       Bytes Objects.      (line  119)
* PyBytes_FromString (C function):       Bytes Objects.      (line   30)
* PyBytes_FromStringAndSize (C function): Bytes Objects.     (line   36)
* PyBytes_GET_SIZE (C function):         Bytes Objects.      (line  128)
* PyBytes_Size (C function):             Bytes Objects.      (line  124)
* PyBytes_Type (C variable):             Bytes Objects.      (line   14)
* PyCallable_Check (C function):         Object Protocol.    (line  236)
* PyCallIter_Check (C function):         Iterator Objects.   (line   34)
* PyCallIter_New (C function):           Iterator Objects.   (line   38)
* PyCallIter_Type (C variable):          Iterator Objects.   (line   28)
* PyCapsule (C type):                    Capsules<2>.        (line    9)
* PyCapsule_CheckExact (C function):     Capsules<2>.        (line   27)
* PyCapsule_Destructor (C type):         Capsules<2>.        (line   18)
* PyCapsule_GetContext (C function):     Capsules<2>.        (line   74)
* PyCapsule_GetDestructor (C function):  Capsules<2>.        (line   63)
* PyCapsule_GetName (C function):        Capsules<2>.        (line   84)
* PyCapsule_GetPointer (C function):     Capsules<2>.        (line   51)
* PyCapsule_Import (C function):         Capsules<2>.        (line   94)
* PyCapsule_IsValid (C function):        Capsules<2>.        (line  110)
* PyCapsule_New (C function):            Capsules<2>.        (line   31)
* PyCapsule_SetContext (C function):     Capsules<2>.        (line  126)
* PyCapsule_SetDestructor (C function):  Capsules<2>.        (line  134)
* PyCapsule_SetName (C function):        Capsules<2>.        (line  143)
* PyCapsule_SetPointer (C function):     Capsules<2>.        (line  153)
* PyCellObject (C type):                 Cell Objects.       (line   16)
* PyCell_Check (C function):             Cell Objects.       (line   24)
* PyCell_Get (C function):               Cell Objects.       (line   32)
* PyCell_GET (C function):               Cell Objects.       (line   36)
* PyCell_New (C function):               Cell Objects.       (line   28)
* PyCell_Set (C function):               Cell Objects.       (line   41)
* PyCell_SET (C function):               Cell Objects.       (line   48)
* PyCell_Type (C variable):              Cell Objects.       (line   20)
* PyCFunction (C type):                  Common Object Structures.
                                                             (line   95)
* PyCFunctionWithKeywords (C type):      Common Object Structures.
                                                             (line  104)
* pyclbr (module):                       pyclbr --- Python class browser support.
                                                             (line    6)
* PyCodec_BackslashReplaceErrors (C function): Registry API for Unicode encoding error handlers.
                                                             (line   51)
* PyCodec_Decode (C function):           Codec registry and support functions.
                                                             (line   30)
* PyCodec_Decoder (C function):          Codec lookup API.   (line   15)
* PyCodec_Encode (C function):           Codec registry and support functions.
                                                             (line   19)
* PyCodec_Encoder (C function):          Codec lookup API.   (line   11)
* PyCodec_IgnoreErrors (C function):     Registry API for Unicode encoding error handlers.
                                                             (line   38)
* PyCodec_IncrementalDecoder (C function): Codec lookup API. (line   25)
* PyCodec_IncrementalEncoder (C function): Codec lookup API. (line   19)
* PyCodec_KnownEncoding (C function):    Codec registry and support functions.
                                                             (line   14)
* PyCodec_LookupError (C function):      Registry API for Unicode encoding error handlers.
                                                             (line   28)
* PyCodec_NameReplaceErrors (C function): Registry API for Unicode encoding error handlers.
                                                             (line   56)
* PyCodec_Register (C function):         Codec registry and support functions.
                                                             (line    6)
* PyCodec_RegisterError (C function):    Registry API for Unicode encoding error handlers.
                                                             (line    6)
* PyCodec_ReplaceErrors (C function):    Registry API for Unicode encoding error handlers.
                                                             (line   42)
* PyCodec_StreamReader (C function):     Codec lookup API.   (line   31)
* PyCodec_StreamWriter (C function):     Codec lookup API.   (line   38)
* PyCodec_StrictErrors (C function):     Registry API for Unicode encoding error handlers.
                                                             (line   34)
* PyCodec_XMLCharRefReplaceErrors (C function): Registry API for Unicode encoding error handlers.
                                                             (line   46)
* PyCodeObject (C type):                 Code Objects<2>.    (line   10)
* PyCode_Check (C function):             Code Objects<2>.    (line   20)
* PyCode_GetNumFree (C function):        Code Objects<2>.    (line   24)
* PyCode_New (C function):               Code Objects<2>.    (line   28)
* PyCode_NewEmpty (C function):          Code Objects<2>.    (line   42)
* PyCode_Type (C variable):              Code Objects<2>.    (line   15)
* PyCompactUnicodeObject (C type):       Unicode Type.       (line   29)
* PyCompileError:                        py_compile --- Compile Python source files.
                                                             (line   19)
* PyCompilerFlags (C type):              The Very High Level Layer.
                                                             (line  384)
* PyComplexObject (C type):              Complex Numbers as Python Objects.
                                                             (line    6)
* PyComplex_AsCComplex (C function):     Complex Numbers as Python Objects.
                                                             (line   44)
* PyComplex_Check (C function):          Complex Numbers as Python Objects.
                                                             (line   17)
* PyComplex_CheckExact (C function):     Complex Numbers as Python Objects.
                                                             (line   22)
* PyComplex_FromCComplex (C function):   Complex Numbers as Python Objects.
                                                             (line   27)
* PyComplex_FromDoubles (C function):    Complex Numbers as Python Objects.
                                                             (line   31)
* PyComplex_ImagAsDouble (C function):   Complex Numbers as Python Objects.
                                                             (line   40)
* PyComplex_RealAsDouble (C function):   Complex Numbers as Python Objects.
                                                             (line   36)
* PyComplex_Type (C variable):           Complex Numbers as Python Objects.
                                                             (line   11)
* PyCoroObject (C type):                 Coroutine Objects<2>.
                                                             (line   11)
* PyCoro_CheckExact (C function):        Coroutine Objects<2>.
                                                             (line   19)
* PyCoro_New (C function):               Coroutine Objects<2>.
                                                             (line   24)
* PyCoro_Type (C variable):              Coroutine Objects<2>.
                                                             (line   15)
* PyDateTime_Check (C function):         DateTime Objects<2>.
                                                             (line   26)
* PyDateTime_CheckExact (C function):    DateTime Objects<2>.
                                                             (line   31)
* PyDateTime_DATE_GET_HOUR (C function): DateTime Objects<2>.
                                                             (line  113)
* PyDateTime_DATE_GET_MICROSECOND (C function): DateTime Objects<2>.
                                                             (line  125)
* PyDateTime_DATE_GET_MINUTE (C function): DateTime Objects<2>.
                                                             (line  117)
* PyDateTime_DATE_GET_SECOND (C function): DateTime Objects<2>.
                                                             (line  121)
* PyDateTime_DELTA_GET_DAYS (C function): DateTime Objects<2>.
                                                             (line  155)
* PyDateTime_DELTA_GET_MICROSECOND (C function): DateTime Objects<2>.
                                                             (line  167)
* PyDateTime_DELTA_GET_SECONDS (C function): DateTime Objects<2>.
                                                             (line  161)
* PyDateTime_FromDateAndTime (C function): DateTime Objects<2>.
                                                             (line   72)
* PyDateTime_FromTimestamp (C function): DateTime Objects<2>.
                                                             (line  176)
* PyDateTime_GET_DAY (C function):       DateTime Objects<2>.
                                                             (line  105)
* PyDateTime_GET_MONTH (C function):     DateTime Objects<2>.
                                                             (line  101)
* PyDateTime_GET_YEAR (C function):      DateTime Objects<2>.
                                                             (line   97)
* PyDateTime_TIME_GET_HOUR (C function): DateTime Objects<2>.
                                                             (line  135)
* PyDateTime_TIME_GET_MICROSECOND (C function): DateTime Objects<2>.
                                                             (line  147)
* PyDateTime_TIME_GET_MINUTE (C function): DateTime Objects<2>.
                                                             (line  139)
* PyDateTime_TIME_GET_SECOND (C function): DateTime Objects<2>.
                                                             (line  143)
* PyDate_Check (C function):             DateTime Objects<2>.
                                                             (line   16)
* PyDate_CheckExact (C function):        DateTime Objects<2>.
                                                             (line   21)
* PyDate_FromDate (C function):          DateTime Objects<2>.
                                                             (line   68)
* PyDate_FromTimestamp (C function):     DateTime Objects<2>.
                                                             (line  181)
* PyDelta_Check (C function):            DateTime Objects<2>.
                                                             (line   46)
* PyDelta_CheckExact (C function):       DateTime Objects<2>.
                                                             (line   51)
* PyDelta_FromDSU (C function):          DateTime Objects<2>.
                                                             (line   84)
* PyDescr_IsData (C function):           Descriptor Objects. (line   37)
* PyDescr_NewClassMethod (C function):   Descriptor Objects. (line   32)
* PyDescr_NewGetSet (C function):        Descriptor Objects. (line   13)
* PyDescr_NewMember (C function):        Descriptor Objects. (line   18)
* PyDescr_NewMethod (C function):        Descriptor Objects. (line   23)
* PyDescr_NewWrapper (C function):       Descriptor Objects. (line   28)
* PyDictObject (C type):                 Dictionary Objects. (line    6)
* PyDictProxy_New (C function):          Dictionary Objects. (line   31)
* PyDict_Check (C function):             Dictionary Objects. (line   17)
* PyDict_CheckExact (C function):        Dictionary Objects. (line   22)
* PyDict_Clear (C function):             Dictionary Objects. (line   37)
* PyDict_ClearFreeList (C function):     Dictionary Objects. (line  210)
* PyDict_Contains (C function):          Dictionary Objects. (line   41)
* PyDict_Copy (C function):              Dictionary Objects. (line   47)
* PyDict_DelItem (C function):           Dictionary Objects. (line   68)
* PyDict_DelItemString (C function):     Dictionary Objects. (line   74)
* PyDict_GetItem (C function):           Dictionary Objects. (line   79)
* PyDict_GetItemString (C function):     Dictionary Objects. (line   93)
* PyDict_GetItemWithError (C function):  Dictionary Objects. (line   84)
* PyDict_Items (C function):             Dictionary Objects. (line  109)
* PyDict_Keys (C function):              Dictionary Objects. (line  113)
* PyDict_Merge (C function):             Dictionary Objects. (line  175)
* PyDict_MergeFromSeq2 (C function):     Dictionary Objects. (line  194)
* PyDict_New (C function):               Dictionary Objects. (line   27)
* PyDict_Next (C function):              Dictionary Objects. (line  126)
* PyDict_SetDefault (C function):        Dictionary Objects. (line   99)
* PyDict_SetItem (C function):           Dictionary Objects. (line   51)
* PyDict_SetItemString (C function):     Dictionary Objects. (line   59)
* PyDict_Size (C function):              Dictionary Objects. (line  121)
* PyDict_Type (C variable):              Dictionary Objects. (line   11)
* PyDict_Update (C function):            Dictionary Objects. (line  186)
* PyDict_Values (C function):            Dictionary Objects. (line  117)
* PyDLL (class in ctypes):               Loading shared libraries.
                                                             (line   45)
* pydoc (module):                        pydoc --- Documentation generator and online help system.
                                                             (line    6)
* PyErr_BadArgument (C function):        Raising exceptions. (line   46)
* PyErr_BadInternalCall (C function):    Raising exceptions. (line  188)
* PyErr_CheckSignals (C function):       Signal Handling<2>. (line    6)
* PyErr_Clear (C function):              Printing and clearing.
                                                             (line    6)
* PyErr_Clear():                         Exceptions<13>.     (line   25)
* PyErr_Clear() <1>:                     Exceptions<13>.     (line  123)
* PyErr_ExceptionMatches (C function):   Querying the error indicator.
                                                             (line   20)
* PyErr_ExceptionMatches():              Exceptions<13>.     (line  123)
* PyErr_Fetch (C function):              Querying the error indicator.
                                                             (line   36)
* PyErr_Fetch():                         Finalization and De-allocation.
                                                             (line   21)
* PyErr_Format (C function):             Raising exceptions. (line   25)
* PyErr_FormatV (C function):            Raising exceptions. (line   33)
* PyErr_GetExcInfo (C function):         Querying the error indicator.
                                                             (line   97)
* PyErr_GivenExceptionMatches (C function): Querying the error indicator.
                                                             (line   26)
* PyErr_NewException (C function):       Exception Classes.  (line    6)
* PyErr_NewExceptionWithDoc (C function): Exception Classes. (line   24)
* PyErr_NoMemory (C function):           Raising exceptions. (line   52)
* PyErr_NormalizeException (C function): Querying the error indicator.
                                                             (line   78)
* PyErr_Occurred (C function):           Querying the error indicator.
                                                             (line    6)
* PyErr_Occurred():                      Exceptions<13>.     (line   12)
* PyErr_Print (C function):              Printing and clearing.
                                                             (line   22)
* PyErr_PrintEx (C function):            Printing and clearing.
                                                             (line   11)
* PyErr_ResourceWarning (C function):    Issuing warnings.   (line   77)
* PyErr_Restore (C function):            Querying the error indicator.
                                                             (line   59)
* PyErr_Restore():                       Finalization and De-allocation.
                                                             (line   21)
* PyErr_SetExcFromWindowsErr (C function): Raising exceptions.
                                                             (line  113)
* PyErr_SetExcFromWindowsErrWithFilename (C function): Raising exceptions.
                                                             (line  144)
* PyErr_SetExcFromWindowsErrWithFilenameObject (C function): Raising exceptions.
                                                             (line  127)
* PyErr_SetExcFromWindowsErrWithFilenameObjects (C function): Raising exceptions.
                                                             (line  135)
* PyErr_SetExcInfo (C function):         Querying the error indicator.
                                                             (line  114)
* PyErr_SetFromErrno (C function):       Raising exceptions. (line   58)
* PyErr_SetFromErrnoWithFilename (C function): Raising exceptions.
                                                             (line   94)
* PyErr_SetFromErrnoWithFilenameObject (C function): Raising exceptions.
                                                             (line   73)
* PyErr_SetFromErrnoWithFilenameObjects (C function): Raising exceptions.
                                                             (line   83)
* PyErr_SetFromWindowsErr (C function):  Raising exceptions. (line  101)
* PyErr_SetFromWindowsErrWithFilename (C function): Raising exceptions.
                                                             (line  120)
* PyErr_SetImportError (C function):     Raising exceptions. (line  152)
* PyErr_SetInterrupt (C function):       Signal Handling<2>. (line   18)
* PyErr_SetNone (C function):            Raising exceptions. (line   42)
* PyErr_SetObject (C function):          Raising exceptions. (line   19)
* PyErr_SetString (C function):          Raising exceptions. (line   10)
* PyErr_SetString():                     Exceptions<13>.     (line   25)
* PyErr_SyntaxLocation (C function):     Raising exceptions. (line  182)
* PyErr_SyntaxLocationEx (C function):   Raising exceptions. (line  173)
* PyErr_SyntaxLocationObject (C function): Raising exceptions.
                                                             (line  162)
* PyErr_WarnEx (C function):             Issuing warnings.   (line   19)
* PyErr_WarnExplicit (C function):       Issuing warnings.   (line   60)
* PyErr_WarnExplicitObject (C function): Issuing warnings.   (line   47)
* PyErr_WarnFormat (C function):         Issuing warnings.   (line   68)
* PyErr_WriteUnraisable (C function):    Printing and clearing.
                                                             (line   26)
* PyEval_AcquireLock (C function):       Low-level API.      (line   91)
* PyEval_AcquireThread (C function):     Low-level API.      (line   68)
* PyEval_AcquireThread():                High-level API.     (line   29)
* PyEval_EvalCode (C function):          The Very High Level Layer.
                                                             (line  318)
* PyEval_EvalCodeEx (C function):        The Very High Level Layer.
                                                             (line  325)
* PyEval_EvalFrame (C function):         The Very High Level Layer.
                                                             (line  341)
* PyEval_EvalFrameEx (C function):       The Very High Level Layer.
                                                             (line  346)
* PyEval_GetBuiltins (C function):       Reflection.         (line    6)
* PyEval_GetCallStats (C function):      Profiling and Tracing.
                                                             (line  121)
* PyEval_GetFrame (C function):          Reflection.         (line   21)
* PyEval_GetFuncDesc (C function):       Reflection.         (line   34)
* PyEval_GetFuncName (C function):       Reflection.         (line   29)
* PyEval_GetGlobals (C function):        Reflection.         (line   16)
* PyEval_GetLocals (C function):         Reflection.         (line   11)
* PyEval_InitThreads (C function):       High-level API.     (line   27)
* PyEval_InitThreads():                  Initializing and finalizing the interpreter.
                                                             (line    8)
* PyEval_MergeCompilerFlags (C function): The Very High Level Layer.
                                                             (line  361)
* PyEval_ReInitThreads (C function):     High-level API.     (line  101)
* PyEval_ReleaseLock (C function):       Low-level API.      (line  101)
* PyEval_ReleaseThread (C function):     Low-level API.      (line   79)
* PyEval_ReleaseThread():                High-level API.     (line   29)
* PyEval_RestoreThread (C function):     High-level API.     (line   79)
* PyEval_RestoreThread():                Releasing the GIL from extension code.
                                                             (line   36)
* PyEval_RestoreThread() <1>:            High-level API.     (line   29)
* PyEval_SaveThread (C function):        High-level API.     (line   70)
* PyEval_SaveThread():                   Releasing the GIL from extension code.
                                                             (line   36)
* PyEval_SaveThread() <1>:               High-level API.     (line   29)
* PyEval_SetProfile (C function):        Profiling and Tracing.
                                                             (line  105)
* PyEval_SetTrace (C function):          Profiling and Tracing.
                                                             (line  115)
* PyEval_ThreadsInitialized (C function): High-level API.    (line   62)
* PyException_GetCause (C function):     Exception Objects.  (line   32)
* PyException_GetContext (C function):   Exception Objects.  (line   18)
* PyException_GetTraceback (C function): Exception Objects.  (line    6)
* PyException_SetCause (C function):     Exception Objects.  (line   38)
* PyException_SetContext (C function):   Exception Objects.  (line   25)
* PyException_SetTraceback (C function): Exception Objects.  (line   12)
* PyExc_ArithmeticError:                 Standard Exceptions.
                                                             (line  165)
* PyExc_AssertionError:                  Standard Exceptions.
                                                             (line  165)
* PyExc_AttributeError:                  Standard Exceptions.
                                                             (line  165)
* PyExc_BaseException:                   Standard Exceptions.
                                                             (line  165)
* PyExc_BlockingIOError:                 Standard Exceptions.
                                                             (line  165)
* PyExc_BrokenPipeError:                 Standard Exceptions.
                                                             (line  165)
* PyExc_ConnectionAbortedError:          Standard Exceptions.
                                                             (line  165)
* PyExc_ConnectionError:                 Standard Exceptions.
                                                             (line  165)
* PyExc_ConnectionRefusedError:          Standard Exceptions.
                                                             (line  165)
* PyExc_ConnectionResetError:            Standard Exceptions.
                                                             (line  165)
* PyExc_EnvironmentError:                Standard Exceptions.
                                                             (line  165)
* PyExc_EOFError:                        Standard Exceptions.
                                                             (line  165)
* PyExc_Exception:                       Standard Exceptions.
                                                             (line  165)
* PyExc_FileExistsError:                 Standard Exceptions.
                                                             (line  165)
* PyExc_FileNotFoundError:               Standard Exceptions.
                                                             (line  165)
* PyExc_FloatingPointError:              Standard Exceptions.
                                                             (line  165)
* PyExc_ImportError:                     Standard Exceptions.
                                                             (line  165)
* PyExc_IndexError:                      Standard Exceptions.
                                                             (line  165)
* PyExc_InterruptedError:                Standard Exceptions.
                                                             (line  165)
* PyExc_IOError:                         Standard Exceptions.
                                                             (line  165)
* PyExc_IsADirectoryError:               Standard Exceptions.
                                                             (line  165)
* PyExc_KeyboardInterrupt:               Standard Exceptions.
                                                             (line  165)
* PyExc_KeyError:                        Standard Exceptions.
                                                             (line  165)
* PyExc_LookupError:                     Standard Exceptions.
                                                             (line  165)
* PyExc_MemoryError:                     Standard Exceptions.
                                                             (line  165)
* PyExc_NameError:                       Standard Exceptions.
                                                             (line  165)
* PyExc_NotADirectoryError:              Standard Exceptions.
                                                             (line  165)
* PyExc_NotImplementedError:             Standard Exceptions.
                                                             (line  165)
* PyExc_OSError:                         Standard Exceptions.
                                                             (line  165)
* PyExc_OverflowError:                   Standard Exceptions.
                                                             (line  165)
* PyExc_PermissionError:                 Standard Exceptions.
                                                             (line  165)
* PyExc_ProcessLookupError:              Standard Exceptions.
                                                             (line  165)
* PyExc_RecursionError:                  Standard Exceptions.
                                                             (line  165)
* PyExc_ReferenceError:                  Standard Exceptions.
                                                             (line  165)
* PyExc_RuntimeError:                    Standard Exceptions.
                                                             (line  165)
* PyExc_SyntaxError:                     Standard Exceptions.
                                                             (line  165)
* PyExc_SystemError:                     Standard Exceptions.
                                                             (line  165)
* PyExc_SystemExit:                      Standard Exceptions.
                                                             (line  165)
* PyExc_TimeoutError:                    Standard Exceptions.
                                                             (line  165)
* PyExc_TypeError:                       Standard Exceptions.
                                                             (line  165)
* PyExc_ValueError:                      Standard Exceptions.
                                                             (line  165)
* PyExc_WindowsError:                    Standard Exceptions.
                                                             (line  165)
* PyExc_ZeroDivisionError:               Standard Exceptions.
                                                             (line  165)
* PyFile_FromFd (C function):            File Objects.       (line   15)
* PyFile_GetLine (C function):           File Objects.       (line   41)
* PyFile_WriteObject (C function):       File Objects.       (line   55)
* PyFile_WriteString (C function):       File Objects.       (line   63)
* PyFloatObject (C type):                Floating Point Objects.
                                                             (line    6)
* PyFloat_AsDouble (C function):         Floating Point Objects.
                                                             (line   35)
* PyFloat_AS_DOUBLE (C function):        Floating Point Objects.
                                                             (line   44)
* PyFloat_Check (C function):            Floating Point Objects.
                                                             (line   17)
* PyFloat_CheckExact (C function):       Floating Point Objects.
                                                             (line   22)
* PyFloat_ClearFreeList (C function):    Floating Point Objects.
                                                             (line   65)
* PyFloat_FromDouble (C function):       Floating Point Objects.
                                                             (line   31)
* PyFloat_FromString (C function):       Floating Point Objects.
                                                             (line   27)
* PyFloat_GetInfo (C function):          Floating Point Objects.
                                                             (line   49)
* PyFloat_GetMax (C function):           Floating Point Objects.
                                                             (line   55)
* PyFloat_GetMin (C function):           Floating Point Objects.
                                                             (line   60)
* PyFloat_Type (C variable):             Floating Point Objects.
                                                             (line   11)
* PyFrameObject (C type):                The Very High Level Layer.
                                                             (line  336)
* PyFrame_GetLineNumber (C function):    Reflection.         (line   25)
* PyFrozenSet_Check (C function):        Set Objects.        (line   50)
* PyFrozenSet_CheckExact (C function):   Set Objects.        (line   65)
* PyFrozenSet_New (C function):          Set Objects.        (line   78)
* PyFrozenSet_Type (C variable):         Set Objects.        (line   36)
* PyFunctionObject (C type):             Function Objects<3>.
                                                             (line    8)
* PyFunction_Check (C function):         Function Objects<3>.
                                                             (line   18)
* PyFunction_GetAnnotations (C function): Function Objects<3>.
                                                             (line   84)
* PyFunction_GetClosure (C function):    Function Objects<3>.
                                                             (line   71)
* PyFunction_GetCode (C function):       Function Objects<3>.
                                                             (line   44)
* PyFunction_GetDefaults (C function):   Function Objects<3>.
                                                             (line   58)
* PyFunction_GetGlobals (C function):    Function Objects<3>.
                                                             (line   48)
* PyFunction_GetModule (C function):     Function Objects<3>.
                                                             (line   52)
* PyFunction_New (C function):           Function Objects<3>.
                                                             (line   23)
* PyFunction_NewWithQualName (C function): Function Objects<3>.
                                                             (line   33)
* PyFunction_SetAnnotations (C function): Function Objects<3>.
                                                             (line   89)
* PyFunction_SetClosure (C function):    Function Objects<3>.
                                                             (line   76)
* PyFunction_SetDefaults (C function):   Function Objects<3>.
                                                             (line   63)
* PyFunction_Type (C variable):          Function Objects<3>.
                                                             (line   12)
* PYFUNCTYPE() (in module ctypes):       Function prototypes.
                                                             (line   32)
* PyGenObject (C type):                  Generator Objects.  (line   11)
* PyGen_Check (C function):              Generator Objects.  (line   19)
* PyGen_CheckExact (C function):         Generator Objects.  (line   23)
* PyGen_New (C function):                Generator Objects.  (line   28)
* PyGen_NewWithQualName (C function):    Generator Objects.  (line   33)
* PyGen_Type (C variable):               Generator Objects.  (line   15)
* PyGILState_Check (C function):         High-level API.     (line  153)
* PyGILState_Ensure (C function):        High-level API.     (line  110)
* PyGILState_GetThisThreadState (C function): High-level API.
                                                             (line  145)
* PyGILState_Release (C function):       High-level API.     (line  134)
* PyImport_AddModule (C function):       Importing Modules<2>.
                                                             (line  112)
* PyImport_AddModuleObject (C function): Importing Modules<2>.
                                                             (line   96)
* PyImport_AppendInittab (C function):   Importing Modules<2>.
                                                             (line  279)
* PyImport_Cleanup (C function):         Importing Modules<2>.
                                                             (line  227)
* PyImport_ExecCodeModule (C function):  Importing Modules<2>.
                                                             (line  117)
* PyImport_ExecCodeModuleEx (C function): Importing Modules<2>.
                                                             (line  153)
* PyImport_ExecCodeModuleObject (C function): Importing Modules<2>.
                                                             (line  163)
* PyImport_ExecCodeModuleWithPathnames (C function): Importing Modules<2>.
                                                             (line  173)
* PyImport_ExtendInittab (C function):   Importing Modules<2>.
                                                             (line  305)
* PyImport_FrozenModules (C variable):   Importing Modules<2>.
                                                             (line  271)
* PyImport_GetImporter (C function):     Importing Modules<2>.
                                                             (line  212)
* PyImport_GetMagicNumber (C function):  Importing Modules<2>.
                                                             (line  189)
* PyImport_GetMagicTag (C function):     Importing Modules<2>.
                                                             (line  198)
* PyImport_GetModuleDict (C function):   Importing Modules<2>.
                                                             (line  207)
* PyImport_Import (C function):          Importing Modules<2>.
                                                             (line   81)
* PyImport_ImportFrozenModule (C function): Importing Modules<2>.
                                                             (line  253)
* PyImport_ImportFrozenModuleObject (C function): Importing Modules<2>.
                                                             (line  239)
* PyImport_ImportModule (C function):    Importing Modules<2>.
                                                             (line    6)
* PyImport_ImportModuleEx (C function):  Importing Modules<2>.
                                                             (line   36)
* PyImport_ImportModuleLevel (C function): Importing Modules<2>.
                                                             (line   70)
* PyImport_ImportModuleLevelObject (C function): Importing Modules<2>.
                                                             (line   53)
* PyImport_ImportModuleNoBlock (C function): Importing Modules<2>.
                                                             (line   25)
* PyImport_ReloadModule (C function):    Importing Modules<2>.
                                                             (line   91)
* PyIndex_Check (C function):            Number Protocol.    (line  272)
* PyInit_modulename (C function):        Building C and C++ Extensions.
                                                             (line   16)
* PyInstanceMethod_Check (C function):   Instance Method Objects.
                                                             (line   15)
* PyInstanceMethod_Function (C function): Instance Method Objects.
                                                             (line   26)
* PyInstanceMethod_GET_FUNCTION (C function): Instance Method Objects.
                                                             (line   31)
* PyInstanceMethod_New (C function):     Instance Method Objects.
                                                             (line   20)
* PyInstanceMethod_Type (C variable):    Instance Method Objects.
                                                             (line   10)
* PyInterpreterState (C type):           High-level API.     (line    9)
* PyInterpreterState_Clear (C function): Low-level API.      (line   16)
* PyInterpreterState_Delete (C function): Low-level API.     (line   22)
* PyInterpreterState_Head (C function):  Advanced Debugger Support.
                                                             (line    9)
* PyInterpreterState_New (C function):   Low-level API.      (line   10)
* PyInterpreterState_Next (C function):  Advanced Debugger Support.
                                                             (line   14)
* PyInterpreterState_ThreadHead (C function): Advanced Debugger Support.
                                                             (line   21)
* PyIter_Check (C function):             Iterator Protocol.  (line    8)
* PyIter_Next (C function):              Iterator Protocol.  (line   12)
* PyListObject (C type):                 List Objects.       (line    6)
* PyList_Append (C function):            List Objects.       (line   90)
* PyList_AsTuple (C function):           List Objects.       (line  124)
* PyList_Check (C function):             List Objects.       (line   17)
* PyList_CheckExact (C function):        List Objects.       (line   22)
* PyList_ClearFreeList (C function):     List Objects.       (line  130)
* PyList_GetItem (C function):           List Objects.       (line   46)
* PyList_GetItem():                      Reference Count Details.
                                                             (line  117)
* PyList_GetSlice (C function):          List Objects.       (line   96)
* PyList_GET_ITEM (C function):          List Objects.       (line   54)
* PyList_GET_SIZE (C function):          List Objects.       (line   42)
* PyList_Insert (C function):            List Objects.       (line   82)
* PyList_New (C function):               List Objects.       (line   27)
* PyList_Reverse (C function):           List Objects.       (line  119)
* PyList_SetItem (C function):           List Objects.       (line   58)
* PyList_SetItem():                      Reference Count Details.
                                                             (line   26)
* PyList_SetSlice (C function):          List Objects.       (line  104)
* PyList_SET_ITEM (C function):          List Objects.       (line   69)
* PyList_Size (C function):              List Objects.       (line   37)
* PyList_Sort (C function):              List Objects.       (line  114)
* PyList_Type (C variable):              List Objects.       (line   11)
* PyLongObject (C type):                 Integer Objects.    (line    9)
* PyLong_AsDouble (C function):          Integer Objects.    (line  216)
* PyLong_AsLong (C function):            Integer Objects.    (line  109)
* PyLong_AsLongAndOverflow (C function): Integer Objects.    (line  119)
* PyLong_AsLongLong (C function):        Integer Objects.    (line  132)
* PyLong_AsLongLongAndOverflow (C function): Integer Objects.
                                                             (line  142)
* PyLong_AsSize_t (C function):          Integer Objects.    (line  173)
* PyLong_AsSsize_t (C function):         Integer Objects.    (line  157)
* PyLong_AsUnsignedLong (C function):    Integer Objects.    (line  165)
* PyLong_AsUnsignedLongLong (C function): Integer Objects.   (line  181)
* PyLong_AsUnsignedLongLongMask (C function): Integer Objects.
                                                             (line  204)
* PyLong_AsUnsignedLongMask (C function): Integer Objects.   (line  194)
* PyLong_AsVoidPtr (C function):         Integer Objects.    (line  224)
* PyLong_Check (C function):             Integer Objects.    (line   20)
* PyLong_CheckExact (C function):        Integer Objects.    (line   25)
* PyLong_FromDouble (C function):        Integer Objects.    (line   64)
* PyLong_FromLong (C function):          Integer Objects.    (line   30)
* PyLong_FromLongLong (C function):      Integer Objects.    (line   54)
* PyLong_FromSize_t (C function):        Integer Objects.    (line   49)
* PyLong_FromSsize_t (C function):       Integer Objects.    (line   44)
* PyLong_FromString (C function):        Integer Objects.    (line   68)
* PyLong_FromUnicode (C function):       Integer Objects.    (line   83)
* PyLong_FromUnicodeObject (C function): Integer Objects.    (line   94)
* PyLong_FromUnsignedLong (C function):  Integer Objects.    (line   40)
* PyLong_FromUnsignedLongLong (C function): Integer Objects. (line   58)
* PyLong_FromVoidPtr (C function):       Integer Objects.    (line  104)
* PyLong_Type (C variable):              Integer Objects.    (line   14)
* PyMappingMethods (C type):             Mapping Object Structures.
                                                             (line    6)
* PyMappingMethods.mp_ass_subscript (C member): Mapping Object Structures.
                                                             (line   24)
* PyMappingMethods.mp_length (C member): Mapping Object Structures.
                                                             (line   11)
* PyMappingMethods.mp_subscript (C member): Mapping Object Structures.
                                                             (line   17)
* PyMapping_Check (C function):          Mapping Protocol.   (line    6)
* PyMapping_DelItem (C function):        Mapping Protocol.   (line   25)
* PyMapping_DelItemString (C function):  Mapping Protocol.   (line   18)
* PyMapping_GetItemString (C function):  Mapping Protocol.   (line   60)
* PyMapping_HasKey (C function):         Mapping Protocol.   (line   38)
* PyMapping_HasKeyString (C function):   Mapping Protocol.   (line   31)
* PyMapping_Items (C function):          Mapping Protocol.   (line   54)
* PyMapping_Keys (C function):           Mapping Protocol.   (line   44)
* PyMapping_Length (C function):         Mapping Protocol.   (line   11)
* PyMapping_SetItemString (C function):  Mapping Protocol.   (line   67)
* PyMapping_Size (C function):           Mapping Protocol.   (line   11)
* PyMapping_Values (C function):         Mapping Protocol.   (line   49)
* PyMarshal_ReadLastObjectFromFile (C function): Data marshalling support.
                                                             (line   71)
* PyMarshal_ReadLongFromFile (C function): Data marshalling support.
                                                             (line   48)
* PyMarshal_ReadObjectFromFile (C function): Data marshalling support.
                                                             (line   64)
* PyMarshal_ReadObjectFromString (C function): Data marshalling support.
                                                             (line   85)
* PyMarshal_ReadShortFromFile (C function): Data marshalling support.
                                                             (line   56)
* PyMarshal_WriteLongToFile (C function): Data marshalling support.
                                                             (line   20)
* PyMarshal_WriteObjectToFile (C function): Data marshalling support.
                                                             (line   28)
* PyMarshal_WriteObjectToString (C function): Data marshalling support.
                                                             (line   34)
* PyMemAllocatorDomain (C type):         Customize Memory Allocators.
                                                             (line   36)
* PyMemAllocatorEx (C type):             Customize Memory Allocators.
                                                             (line    8)
* PyMemberDef (C type):                  Common Object Structures.
                                                             (line  220)
* PyMemoryView_Check (C function):       MemoryView objects. (line   42)
* PyMemoryView_FromBuffer (C function):  MemoryView objects. (line   26)
* PyMemoryView_FromMemory (C function):  MemoryView objects. (line   17)
* PyMemoryView_FromObject (C function):  MemoryView objects. (line   10)
* PyMemoryView_GetContiguous (C function): MemoryView objects.
                                                             (line   32)
* PyMemoryView_GET_BASE (C function):    MemoryView objects. (line   54)
* PyMemoryView_GET_BUFFER (C function):  MemoryView objects. (line   47)
* PyMem_Calloc (C function):             Memory Interface.   (line   27)
* PyMem_Del (C function):                Memory Interface.   (line   85)
* PYMEM_DOMAIN_MEM (C variable):         Customize Memory Allocators.
                                                             (line   52)
* PYMEM_DOMAIN_OBJ (C variable):         Customize Memory Allocators.
                                                             (line   64)
* PYMEM_DOMAIN_RAW (C variable):         Customize Memory Allocators.
                                                             (line   40)
* PyMem_Free (C function):               Memory Interface.   (line   56)
* PyMem_GetAllocator (C function):       Customize Memory Allocators.
                                                             (line   76)
* PyMem_Malloc (C function):             Memory Interface.   (line   18)
* PyMem_New (C function):                Memory Interface.   (line   69)
* PyMem_RawCalloc (C function):          Raw Memory Interface.
                                                             (line   24)
* PyMem_RawFree (C function):            Raw Memory Interface.
                                                             (line   53)
* PyMem_RawMalloc (C function):          Raw Memory Interface.
                                                             (line   15)
* PyMem_RawRealloc (C function):         Raw Memory Interface.
                                                             (line   36)
* PyMem_Realloc (C function):            Memory Interface.   (line   39)
* PyMem_Resize (C function):             Memory Interface.   (line   75)
* PyMem_SetAllocator (C function):       Customize Memory Allocators.
                                                             (line   82)
* PyMem_SetupDebugHooks (C function):    Customize Memory Allocators.
                                                             (line   99)
* PyMethodDef (C type):                  Common Object Structures.
                                                             (line  111)
* PyMethod_Check (C function):           Method Objects<2>.  (line   16)
* PyMethod_ClearFreeList (C function):   Method Objects<2>.  (line   43)
* PyMethod_Function (C function):        Method Objects<2>.  (line   27)
* PyMethod_GET_FUNCTION (C function):    Method Objects<2>.  (line   31)
* PyMethod_GET_SELF (C function):        Method Objects<2>.  (line   39)
* PyMethod_New (C function):             Method Objects<2>.  (line   21)
* PyMethod_Self (C function):            Method Objects<2>.  (line   35)
* PyMethod_Type (C variable):            Method Objects<2>.  (line   10)
* PyModuleDef (C type):                  Initializing C modules.
                                                             (line   17)
* PyModuleDef.m_base (C member):         Initializing C modules.
                                                             (line   23)
* PyModuleDef.m_clear (C member):        Initializing C modules.
                                                             (line   79)
* PyModuleDef.m_doc (C member):          Initializing C modules.
                                                             (line   31)
* PyModuleDef.m_free (C member):         Initializing C modules.
                                                             (line   84)
* PyModuleDef.m_methods (C member):      Initializing C modules.
                                                             (line   57)
* PyModuleDef.m_name (C member):         Initializing C modules.
                                                             (line   27)
* PyModuleDef.m_reload (C member):       Initializing C modules.
                                                             (line   72)
* PyModuleDef.m_size (C member):         Initializing C modules.
                                                             (line   36)
* PyModuleDef.m_slots (C member):        Initializing C modules.
                                                             (line   63)
* PyModuleDef.m_traverse (C member):     Initializing C modules.
                                                             (line   74)
* PyModuleDef_Init (C function):         Multi-phase initialization.
                                                             (line   33)
* PyModuleDef_Slot (C type):             Multi-phase initialization.
                                                             (line   45)
* PyModuleDef_Slot.slot (C member):      Multi-phase initialization.
                                                             (line   47)
* PyModuleDef_Slot.value (C member):     Multi-phase initialization.
                                                             (line   51)
* PyModule_AddFunctions (C function):    Low-level module creation functions.
                                                             (line   55)
* PyModule_AddIntConstant (C function):  Support functions.  (line   19)
* PyModule_AddIntMacro (C function):     Support functions.  (line   36)
* PyModule_AddObject (C function):       Support functions.  (line   11)
* PyModule_AddStringConstant (C function): Support functions.
                                                             (line   27)
* PyModule_AddStringMacro (C function):  Support functions.  (line   43)
* PyModule_Check (C function):           Module Objects.     (line   12)
* PyModule_CheckExact (C function):      Module Objects.     (line   17)
* PyModule_Create (C function):          Single-phase initialization.
                                                             (line   10)
* PyModule_Create2 (C function):         Single-phase initialization.
                                                             (line   16)
* PyModule_ExecDef (C function):         Low-level module creation functions.
                                                             (line   38)
* PyModule_FromDefAndSpec (C function):  Low-level module creation functions.
                                                             (line   11)
* PyModule_FromDefAndSpec2 (C function): Low-level module creation functions.
                                                             (line   22)
* PyModule_GetDef (C function):          Module Objects.     (line   67)
* PyModule_GetDict (C function):         Module Objects.     (line   39)
* PyModule_GetFilename (C function):     Module Objects.     (line   82)
* PyModule_GetFilenameObject (C function): Module Objects.   (line   73)
* PyModule_GetName (C function):         Module Objects.     (line   56)
* PyModule_GetNameObject (C function):   Module Objects.     (line   48)
* PyModule_GetState (C function):        Module Objects.     (line   61)
* PyModule_New (C function):             Module Objects.     (line   35)
* PyModule_NewObject (C function):       Module Objects.     (line   22)
* PyModule_SetDocString (C function):    Low-level module creation functions.
                                                             (line   46)
* PyModule_Type (C variable):            Module Objects.     (line    6)
* PyNumberMethods (C type):              Number Object Structures.
                                                             (line    6)
* PyNumber_Absolute (C function):        Number Protocol.    (line   84)
* PyNumber_Add (C function):             Number Protocol.    (line   11)
* PyNumber_And (C function):             Number Protocol.    (line  105)
* PyNumber_AsSsize_t (C function):       Number Protocol.    (line  257)
* PyNumber_Check (C function):           Number Protocol.    (line    6)
* PyNumber_Divmod (C function):          Number Protocol.    (line   57)
* PyNumber_Float (C function):           Number Protocol.    (line  237)
* PyNumber_FloorDivide (C function):     Number Protocol.    (line   36)
* PyNumber_Index (C function):           Number Protocol.    (line  244)
* PyNumber_InPlaceAdd (C function):      Number Protocol.    (line  120)
* PyNumber_InPlaceAnd (C function):      Number Protocol.    (line  209)
* PyNumber_InPlaceFloorDivide (C function): Number Protocol. (line  154)
* PyNumber_InPlaceLshift (C function):   Number Protocol.    (line  193)
* PyNumber_InPlaceMatrixMultiply (C function): Number Protocol.
                                                             (line  143)
* PyNumber_InPlaceMultiply (C function): Number Protocol.    (line  135)
* PyNumber_InPlaceOr (C function):       Number Protocol.    (line  223)
* PyNumber_InPlacePower (C function):    Number Protocol.    (line  181)
* PyNumber_InPlaceRemainder (C function): Number Protocol.   (line  173)
* PyNumber_InPlaceRshift (C function):   Number Protocol.    (line  201)
* PyNumber_InPlaceSubtract (C function): Number Protocol.    (line  127)
* PyNumber_InPlaceTrueDivide (C function): Number Protocol.  (line  162)
* PyNumber_InPlaceXor (C function):      Number Protocol.    (line  216)
* PyNumber_Invert (C function):          Number Protocol.    (line   90)
* PyNumber_Long (C function):            Number Protocol.    (line  230)
* PyNumber_Lshift (C function):          Number Protocol.    (line   95)
* PyNumber_MatrixMultiply (C function):  Number Protocol.    (line   26)
* PyNumber_Multiply (C function):        Number Protocol.    (line   21)
* PyNumber_Negative (C function):        Number Protocol.    (line   75)
* PyNumber_Or (C function):              Number Protocol.    (line  115)
* PyNumber_Positive (C function):        Number Protocol.    (line   80)
* PyNumber_Power (C function):           Number Protocol.    (line   64)
* PyNumber_Remainder (C function):       Number Protocol.    (line   51)
* PyNumber_Rshift (C function):          Number Protocol.    (line  100)
* PyNumber_Subtract (C function):        Number Protocol.    (line   16)
* PyNumber_ToBase (C function):          Number Protocol.    (line  249)
* PyNumber_TrueDivide (C function):      Number Protocol.    (line   42)
* PyNumber_Xor (C function):             Number Protocol.    (line  110)
* PyObject (C type):                     Common Object Structures.
                                                             (line   17)
* PyObject.ob_refcnt (C member):         Type Objects<3>.    (line  133)
* PyObject.ob_type (C member):           Type Objects<3>.    (line  144)
* PyObject._ob_next (C member):          Type Objects<3>.    (line  118)
* PyObject._ob_prev (C member):          Type Objects<3>.    (line  118)
* PyObjectArenaAllocator (C type):       Customize pymalloc Arena Allocator.
                                                             (line    8)
* PyObject_AsCharBuffer (C function):    Old Buffer Protocol.
                                                             (line   21)
* PyObject_ASCII (C function):           Object Protocol.    (line  165)
* PyObject_AsFileDescriptor (C function): File Objects.      (line   33)
* PyObject_AsReadBuffer (C function):    Old Buffer Protocol.
                                                             (line   31)
* PyObject_AsWriteBuffer (C function):   Old Buffer Protocol.
                                                             (line   45)
* PyObject_Bytes (C function):           Object Protocol.    (line  185)
* PyObject_Call (C function):            Object Protocol.    (line  241)
* PyObject_CallFunction (C function):    Object Protocol.    (line  260)
* PyObject_CallFunctionObjArgs (C function): Object Protocol.
                                                             (line  290)
* PyObject_CallMethod (C function):      Object Protocol.    (line  275)
* PyObject_CallMethodObjArgs (C function): Object Protocol.  (line  298)
* PyObject_CallObject (C function):      Object Protocol.    (line  252)
* PyObject_CallObject():                 Calling Python Functions from C.
                                                             (line   64)
* PyObject_CheckBuffer (C function):     Buffer-related functions.
                                                             (line    6)
* PyObject_CheckReadBuffer (C function): Old Buffer Protocol.
                                                             (line   40)
* PyObject_Del (C function):             Allocating Objects on the Heap.
                                                             (line   51)
* PyObject_DelAttr (C function):         Object Protocol.    (line  100)
* PyObject_DelAttrString (C function):   Object Protocol.    (line  106)
* PyObject_DelItem (C function):         Object Protocol.    (line  385)
* PyObject_Dir (C function):             Object Protocol.    (line  390)
* PyObject_GC_Del (C function):          Supporting Cyclic Garbage Collection.
                                                             (line   75)
* PyObject_GC_New (C function):          Supporting Cyclic Garbage Collection.
                                                             (line   34)
* PyObject_GC_NewVar (C function):       Supporting Cyclic Garbage Collection.
                                                             (line   39)
* PyObject_GC_Resize (C function):       Supporting Cyclic Garbage Collection.
                                                             (line   46)
* PyObject_GC_Track (C function):        Supporting Cyclic Garbage Collection.
                                                             (line   53)
* PyObject_GC_UnTrack (C function):      Supporting Cyclic Garbage Collection.
                                                             (line   80)
* PyObject_GenericGetAttr (C function):  Object Protocol.    (line   53)
* PyObject_GenericGetDict (C function):  Object Protocol.    (line  113)
* PyObject_GenericSetAttr (C function):  Object Protocol.    (line   88)
* PyObject_GenericSetDict (C function):  Object Protocol.    (line  121)
* PyObject_GetArenaAllocator (C function): Customize pymalloc Arena Allocator.
                                                             (line   26)
* PyObject_GetAttr (C function):         Object Protocol.    (line   38)
* PyObject_GetAttrString (C function):   Object Protocol.    (line   45)
* PyObject_GetBuffer (C function):       Buffer-related functions.
                                                             (line   12)
* PyObject_GetItem (C function):         Object Protocol.    (line  372)
* PyObject_GetIter (C function):         Object Protocol.    (line  399)
* PyObject_HasAttr (C function):         Object Protocol.    (line   25)
* PyObject_HasAttrString (C function):   Object Protocol.    (line   31)
* PyObject_Hash (C function):            Object Protocol.    (line  308)
* PyObject_HashNotImplemented (C function): Object Protocol. (line  317)
* PyObject_HEAD (C macro):               Common Object Structures.
                                                             (line   37)
* PyObject_HEAD_INIT (C macro):          Common Object Structures.
                                                             (line   78)
* PyObject_Init (C function):            Allocating Objects on the Heap.
                                                             (line   14)
* PyObject_InitVar (C function):         Allocating Objects on the Heap.
                                                             (line   23)
* PyObject_IsInstance (C function):      Object Protocol.    (line  214)
* PyObject_IsSubclass (C function):      Object Protocol.    (line  193)
* PyObject_IsTrue (C function):          Object Protocol.    (line  324)
* PyObject_Length (C function):          Object Protocol.    (line  353)
* PyObject_LengthHint (C function):      Object Protocol.    (line  361)
* PyObject_New (C function):             Allocating Objects on the Heap.
                                                             (line   30)
* PyObject_NewVar (C function):          Allocating Objects on the Heap.
                                                             (line   38)
* PyObject_Not (C function):             Object Protocol.    (line  330)
* PyObject_Print (C function):           Object Protocol.    (line   17)
* PyObject_Repr (C function):            Object Protocol.    (line  153)
* PyObject_RichCompare (C function):     Object Protocol.    (line  128)
* PyObject_RichCompareBool (C function): Object Protocol.    (line  138)
* PyObject_SetArenaAllocator (C function): Customize pymalloc Arena Allocator.
                                                             (line   31)
* PyObject_SetAttr (C function):         Object Protocol.    (line   65)
* PyObject_SetAttrString (C function):   Object Protocol.    (line   77)
* PyObject_SetItem (C function):         Object Protocol.    (line  377)
* PyObject_Size (C function):            Object Protocol.    (line  353)
* PyObject_Str (C function):             Object Protocol.    (line  174)
* PyObject_Type (C function):            Object Protocol.    (line  336)
* PyObject_TypeCheck (C function):       Object Protocol.    (line  348)
* PyObject_VAR_HEAD (C macro):           Common Object Structures.
                                                             (line   47)
* PyOS_AfterFork (C function):           Operating System Utilities.
                                                             (line   15)
* PyOS_CheckStack (C function):          Operating System Utilities.
                                                             (line   22)
* PyOS_double_to_string (C function):    String conversion and formatting.
                                                             (line   87)
* PyOS_getsig (C function):              Operating System Utilities.
                                                             (line   30)
* PyOS_InputHook (C variable):           The Very High Level Layer.
                                                             (line  153)
* PyOS_ReadlineFunctionPointer (C variable): The Very High Level Layer.
                                                             (line  163)
* PyOS_setsig (C function):              Operating System Utilities.
                                                             (line   37)
* PyOS_snprintf (C function):            String conversion and formatting.
                                                             (line    8)
* PyOS_stricmp (C function):             String conversion and formatting.
                                                             (line  122)
* PyOS_string_to_double (C function):    String conversion and formatting.
                                                             (line   54)
* PyOS_strnicmp (C function):            String conversion and formatting.
                                                             (line  127)
* PyOS_vsnprintf (C function):           String conversion and formatting.
                                                             (line   15)
* PyParser_SimpleParseFile (C function): The Very High Level Layer.
                                                             (line  209)
* PyParser_SimpleParseFileFlags (C function): The Very High Level Layer.
                                                             (line  217)
* PyParser_SimpleParseString (C function): The Very High Level Layer.
                                                             (line  184)
* PyParser_SimpleParseStringFlags (C function): The Very High Level Layer.
                                                             (line  191)
* PyParser_SimpleParseStringFlagsFilename (C function): The Very High Level Layer.
                                                             (line  199)
* PyPI; (see Python Package Index (PyPI)): Vista User Access Control UAC.
                                                             (line   11)
* PyProperty_Type (C variable):          Descriptor Objects. (line    9)
* PyRun_AnyFile (C function):            The Very High Level Layer.
                                                             (line   41)
* PyRun_AnyFileEx (C function):          The Very High Level Layer.
                                                             (line   54)
* PyRun_AnyFileExFlags (C function):     The Very High Level Layer.
                                                             (line   61)
* PyRun_AnyFileFlags (C function):       The Very High Level Layer.
                                                             (line   47)
* PyRun_File (C function):               The Very High Level Layer.
                                                             (line  242)
* PyRun_FileEx (C function):             The Very High Level Layer.
                                                             (line  249)
* PyRun_FileExFlags (C function):        The Very High Level Layer.
                                                             (line  263)
* PyRun_FileFlags (C function):          The Very High Level Layer.
                                                             (line  256)
* PyRun_InteractiveLoop (C function):    The Very High Level Layer.
                                                             (line  137)
* PyRun_InteractiveLoopFlags (C function): The Very High Level Layer.
                                                             (line  144)
* PyRun_InteractiveOne (C function):     The Very High Level Layer.
                                                             (line  115)
* PyRun_InteractiveOneFlags (C function): The Very High Level Layer.
                                                             (line  122)
* PyRun_SimpleFile (C function):         The Very High Level Layer.
                                                             (line   92)
* PyRun_SimpleFileEx (C function):       The Very High Level Layer.
                                                             (line   98)
* PyRun_SimpleFileExFlags (C function):  The Very High Level Layer.
                                                             (line  105)
* PyRun_SimpleString (C function):       The Very High Level Layer.
                                                             (line   72)
* PyRun_SimpleStringFlags (C function):  The Very High Level Layer.
                                                             (line   77)
* PyRun_String (C function):             The Very High Level Layer.
                                                             (line  224)
* PyRun_StringFlags (C function):        The Very High Level Layer.
                                                             (line  231)
* PySeqIter_Check (C function):          Iterator Objects.   (line   18)
* PySeqIter_New (C function):            Iterator Objects.   (line   22)
* PySeqIter_Type (C variable):           Iterator Objects.   (line   12)
* PySequenceMethods (C type):            Sequence Object Structures.
                                                             (line    6)
* PySequenceMethods.sq_ass_item (C member): Sequence Object Structures.
                                                             (line   40)
* PySequenceMethods.sq_concat (C member): Sequence Object Structures.
                                                             (line   16)
* PySequenceMethods.sq_contains (C member): Sequence Object Structures.
                                                             (line   46)
* PySequenceMethods.sq_inplace_concat (C member): Sequence Object Structures.
                                                             (line   53)
* PySequenceMethods.sq_inplace_repeat (C member): Sequence Object Structures.
                                                             (line   59)
* PySequenceMethods.sq_item (C member):  Sequence Object Structures.
                                                             (line   28)
* PySequenceMethods.sq_length (C member): Sequence Object Structures.
                                                             (line   11)
* PySequenceMethods.sq_repeat (C member): Sequence Object Structures.
                                                             (line   22)
* PySequence_Check (C function):         Sequence Protocol.  (line    6)
* PySequence_Concat (C function):        Sequence Protocol.  (line   18)
* PySequence_Contains (C function):      Sequence Protocol.  (line   97)
* PySequence_Count (C function):         Sequence Protocol.  (line   89)
* PySequence_DelItem (C function):       Sequence Protocol.  (line   68)
* PySequence_DelSlice (C function):      Sequence Protocol.  (line   81)
* PySequence_Fast (C function):          Sequence Protocol.  (line  125)
* PySequence_Fast_GET_ITEM (C function): Sequence Protocol.  (line  133)
* PySequence_Fast_GET_SIZE (C function): Sequence Protocol.  (line  156)
* PySequence_Fast_ITEMS (C function):    Sequence Protocol.  (line  140)
* PySequence_GetItem (C function):       Sequence Protocol.  (line   45)
* PySequence_GetItem():                  Reference Count Details.
                                                             (line  117)
* PySequence_GetSlice (C function):      Sequence Protocol.  (line   50)
* PySequence_Index (C function):         Sequence Protocol.  (line  103)
* PySequence_InPlaceConcat (C function): Sequence Protocol.  (line   29)
* PySequence_InPlaceRepeat (C function): Sequence Protocol.  (line   37)
* PySequence_ITEM (C function):          Sequence Protocol.  (line  150)
* PySequence_Length (C function):        Sequence Protocol.  (line   11)
* PySequence_List (C function):          Sequence Protocol.  (line  110)
* PySequence_Repeat (C function):        Sequence Protocol.  (line   23)
* PySequence_SetItem (C function):       Sequence Protocol.  (line   56)
* PySequence_SetSlice (C function):      Sequence Protocol.  (line   73)
* PySequence_Size (C function):          Sequence Protocol.  (line   11)
* PySequence_Tuple (C function):         Sequence Protocol.  (line  116)
* PySetObject (C type):                  Set Objects.        (line   19)
* PySet_Add (C function):                Set Objects.        (line  108)
* PySet_Check (C function):              Set Objects.        (line   45)
* PySet_Clear (C function):              Set Objects.        (line  140)
* PySet_ClearFreeList (C function):      Set Objects.        (line  144)
* PySet_Contains (C function):           Set Objects.        (line   99)
* PySet_Discard (C function):            Set Objects.        (line  123)
* PySet_GET_SIZE (C function):           Set Objects.        (line   95)
* PySet_New (C function):                Set Objects.        (line   70)
* PySet_Pop (C function):                Set Objects.        (line  133)
* PySet_Size (C function):               Set Objects.        (line   88)
* PySet_Type (C variable):               Set Objects.        (line   31)
* PySignal_SetWakeupFd (C function):     Signal Handling<2>. (line   25)
* PySlice_Check (C function):            Slice Objects.      (line   11)
* PySlice_GetIndices (C function):       Slice Objects.      (line   25)
* PySlice_GetIndicesEx (C function):     Slice Objects.      (line   44)
* PySlice_New (C function):              Slice Objects.      (line   15)
* PySlice_Type (C variable):             Slice Objects.      (line    6)
* PyState_AddModule (C function):        Module lookup.      (line   24)
* PyState_FindModule (C function):       Module lookup.      (line   15)
* PyState_RemoveModule (C function):     Module lookup.      (line   36)
* PyStructSequence_Desc (C type):        Struct Sequence Objects.
                                                             (line   34)
* PyStructSequence_Field (C type):       Struct Sequence Objects.
                                                             (line   57)
* PyStructSequence_GetItem (C function): Struct Sequence Objects.
                                                             (line   86)
* PyStructSequence_GET_ITEM (C function): Struct Sequence Objects.
                                                             (line   93)
* PyStructSequence_InitType (C function): Struct Sequence Objects.
                                                             (line   19)
* PyStructSequence_InitType2 (C function): Struct Sequence Objects.
                                                             (line   25)
* PyStructSequence_New (C function):     Struct Sequence Objects.
                                                             (line   81)
* PyStructSequence_NewType (C function): Struct Sequence Objects.
                                                             (line   11)
* PyStructSequence_SetItem (C function): Struct Sequence Objects.
                                                             (line   99)
* PyStructSequence_SET_ITEM (C function): Struct Sequence Objects.
                                                             (line  108)
* PyStructSequence_UnnamedField (C variable): Struct Sequence Objects.
                                                             (line   77)
* PySys_AddWarnOption (C function):      System Functions.   (line   26)
* PySys_AddWarnOptionUnicode (C function): System Functions. (line   30)
* PySys_AddXOption (C function):         System Functions.   (line   78)
* PySys_FormatStderr (C function):       System Functions.   (line   71)
* PySys_FormatStdout (C function):       System Functions.   (line   63)
* PySys_GetObject (C function):          System Functions.   (line   11)
* PySys_GetXOptions (C function):        System Functions.   (line   86)
* PySys_ResetWarnOptions (C function):   System Functions.   (line   22)
* PySys_SetArgv (C function):            Process-wide parameters.
                                                             (line  252)
* PySys_SetArgv():                       Initializing and finalizing the interpreter.
                                                             (line    8)
* PySys_SetArgvEx (C function):          Process-wide parameters.
                                                             (line  211)
* PySys_SetArgvEx():                     Embedding Python<2>.
                                                             (line   17)
* PySys_SetArgvEx() <1>:                 Initializing and finalizing the interpreter.
                                                             (line    8)
* PySys_SetObject (C function):          System Functions.   (line   16)
* PySys_SetPath (C function):            System Functions.   (line   34)
* PySys_WriteStderr (C function):        System Functions.   (line   58)
* PySys_WriteStdout (C function):        System Functions.   (line   40)
* Python 3000:                           Glossary.           (line  925)
* Python Editor:                         IDLE<14>.           (line    6)
* Python Enhancement Proposals; PEP 100: Unicode<2>.         (line   15)
* Python Enhancement Proposals; PEP 11:  Unsupported Operating Systems.
                                                             (line    6)
* Python Enhancement Proposals; PEP 11 <1>: Library Changes. (line   15)
* Python Enhancement Proposals; PEP 11 <2>: Supported Versions.
                                                             (line    6)
* Python Enhancement Proposals; PEP 11 <3>: Other Platforms. (line    8)
* Python Enhancement Proposals; PEP 205: PEP 205 Weak References.
                                                             (line   82)
* Python Enhancement Proposals; PEP 205 <1>: weakref --- Weak references.
                                                             (line  328)
* Python Enhancement Proposals; PEP 207: PEP 207 Rich Comparisons.
                                                             (line   77)
* Python Enhancement Proposals; PEP 208: PEP 208 New Coercion Model.
                                                             (line   30)
* Python Enhancement Proposals; PEP 217: PEP 217 Interactive Display Hook.
                                                             (line   27)
* Python Enhancement Proposals; PEP 218: PEP 218 Built-In Set Objects.
                                                             (line   50)
* Python Enhancement Proposals; PEP 218 <1>: Other Language Changes<10>.
                                                             (line   12)
* Python Enhancement Proposals; PEP 218 <2>: PEP 218 A Standard Set Datatype.
                                                             (line   80)
* Python Enhancement Proposals; PEP 227: PEP 227 Nested Scopes.
                                                             (line   96)
* Python Enhancement Proposals; PEP 227 <1>: PEP 227 Nested Scopes<2>.
                                                             (line   96)
* Python Enhancement Proposals; PEP 227 <2>: __future__ --- Future statement definitions.
                                                             (line   71)
* Python Enhancement Proposals; PEP 229: PEP 229 New Build System.
                                                             (line   39)
* Python Enhancement Proposals; PEP 230: PEP 230 Warning Framework.
                                                             (line   73)
* Python Enhancement Proposals; PEP 230 <1>: Miscellaneous options.
                                                             (line  200)
* Python Enhancement Proposals; PEP 232: PEP 232 Function Attributes.
                                                             (line   36)
* Python Enhancement Proposals; PEP 234: PEP 234 Iterators.  (line  124)
* Python Enhancement Proposals; PEP 235: Introduction<12>.   (line   37)
* Python Enhancement Proposals; PEP 236: PEP 236 __future__ Directives.
                                                             (line   29)
* Python Enhancement Proposals; PEP 236 <1>: Future statements.
                                                             (line   81)
* Python Enhancement Proposals; PEP 236 <2>: Built-in Functions.
                                                             (line  228)
* Python Enhancement Proposals; PEP 237: Integers.           (line    6)
* Python Enhancement Proposals; PEP 237 <1>: PEP 237 Unifying Long Integers and Integers.
                                                             (line   22)
* Python Enhancement Proposals; PEP 237 <2>: Other Language Changes<10>.
                                                             (line   18)
* Python Enhancement Proposals; PEP 237 <3>: PEP 237 Unifying Long Integers and Integers<2>.
                                                             (line   37)
* Python Enhancement Proposals; PEP 237 <4>: printf-style String Formatting.
                                                             (line  184)
* Python Enhancement Proposals; PEP 237 <5>: printf-style Bytes Formatting.
                                                             (line  191)
* Python Enhancement Proposals; PEP 238: Integers.           (line   10)
* Python Enhancement Proposals; PEP 238 <1>: PEP 238 Changing the Division Operator.
                                                             (line   21)
* Python Enhancement Proposals; PEP 238 <2>: PEP 238 Changing the Division Operator.
                                                             (line   27)
* Python Enhancement Proposals; PEP 238 <3>: PEP 238 Changing the Division Operator.
                                                             (line   68)
* Python Enhancement Proposals; PEP 238 <4>: __future__ --- Future statement definitions.
                                                             (line   77)
* Python Enhancement Proposals; PEP 238 <5>: The Very High Level Layer.
                                                             (line  403)
* Python Enhancement Proposals; PEP 238 <6>: Glossary.       (line  370)
* Python Enhancement Proposals; PEP 241: PEP 241 Metadata in Python Packages.
                                                             (line   35)
* Python Enhancement Proposals; PEP 243: PEP 241 Metadata in Python Packages.
                                                             (line   39)
* Python Enhancement Proposals; PEP 247: hmac.               (line   20)
* Python Enhancement Proposals; PEP 249: The sqlite3 package.
                                                             (line   18)
* Python Enhancement Proposals; PEP 249 <1>: The sqlite3 package.
                                                             (line  110)
* Python Enhancement Proposals; PEP 249 <2>: sqlite3 --- DB-API 2 0 interface for SQLite databases.
                                                             (line   14)
* Python Enhancement Proposals; PEP 249 <3>: sqlite3 --- DB-API 2 0 interface for SQLite databases.
                                                             (line  114)
* Python Enhancement Proposals; PEP 252: Related Links.      (line   17)
* Python Enhancement Proposals; PEP 252 <1>: Related Links.  (line   17)
* Python Enhancement Proposals; PEP 253: Old and New Classes.
                                                             (line   28)
* Python Enhancement Proposals; PEP 253 <1>: Multiple Inheritance The Diamond Rule.
                                                             (line    8)
* Python Enhancement Proposals; PEP 253 <2>: Related Links.  (line   17)
* Python Enhancement Proposals; PEP 253 <3>: Related Links.  (line   19)
* Python Enhancement Proposals; PEP 253 <4>: Related Links.  (line   21)
* Python Enhancement Proposals; PEP 255: PEP 255 Simple Generators.
                                                             (line   46)
* Python Enhancement Proposals; PEP 255 <1>: PEP 255 Simple Generators.
                                                             (line  132)
* Python Enhancement Proposals; PEP 255 <2>: PEP 255 Simple Generators<2>.
                                                             (line   45)
* Python Enhancement Proposals; PEP 255 <3>: PEP 255 Simple Generators<2>.
                                                             (line  131)
* Python Enhancement Proposals; PEP 255 <4>: Yield expressions.
                                                             (line   67)
* Python Enhancement Proposals; PEP 255 <5>: __future__ --- Future statement definitions.
                                                             (line   74)
* Python Enhancement Proposals; PEP 261: Unicode Changes.    (line   18)
* Python Enhancement Proposals; PEP 261 <1>: Unicode Changes.
                                                             (line   61)
* Python Enhancement Proposals; PEP 263: Other Language Changes<9>.
                                                             (line   98)
* Python Enhancement Proposals; PEP 263 <1>: PEP 263 Source Code Encodings.
                                                             (line   29)
* Python Enhancement Proposals; PEP 263 <2>: Introduction<12>.
                                                             (line   41)
* Python Enhancement Proposals; PEP 263 <3>: Tokenizing Input.
                                                             (line   36)
* Python Enhancement Proposals; PEP 263 <4>: Tokenizing Input.
                                                             (line   93)
* Python Enhancement Proposals; PEP 263 <5>: Unicode Literals in Python Source Code.
                                                             (line   48)
* Python Enhancement Proposals; PEP 264: Other Changes and Fixes<3>.
                                                             (line   55)
* Python Enhancement Proposals; PEP 273: PEP 273 Importing Modules from ZIP Archives.
                                                             (line   41)
* Python Enhancement Proposals; PEP 273 <1>: PEP 273 Importing Modules from ZIP Archives.
                                                             (line   44)
* Python Enhancement Proposals; PEP 273 <2>: zipimport --- Import modules from Zip archives.
                                                             (line   37)
* Python Enhancement Proposals; PEP 274: New Syntax.         (line   38)
* Python Enhancement Proposals; PEP 275: Why isn't there a switch or case statement in Python?.
                                                             (line    8)
* Python Enhancement Proposals; PEP 277: PEP 277 Unicode file name support for Windows NT.
                                                             (line   32)
* Python Enhancement Proposals; PEP 278: PEP 278 Universal Newline Support.
                                                             (line   33)
* Python Enhancement Proposals; PEP 278 <1>: Glossary.       (line 1095)
* Python Enhancement Proposals; PEP 279: PEP 279 enumerate.  (line   27)
* Python Enhancement Proposals; PEP 282: PEP 282 The logging Package.
                                                             (line  101)
* Python Enhancement Proposals; PEP 282 <1>: PEP 282 The logging Package.
                                                             (line  107)
* Python Enhancement Proposals; PEP 282 <2>: Archiving operations.
                                                             (line   39)
* Python Enhancement Proposals; PEP 282 <3>: Integration with the warnings module.
                                                             (line   36)
* Python Enhancement Proposals; PEP 285: PEP 285 A Boolean Type.
                                                             (line   47)
* Python Enhancement Proposals; PEP 285 <1>: PEP 285 A Boolean Type.
                                                             (line   70)
* Python Enhancement Proposals; PEP 288: PEP 342 New Generator Features.
                                                             (line  146)
* Python Enhancement Proposals; PEP 289: PEP 289 Generator Expressions.
                                                             (line   56)
* Python Enhancement Proposals; PEP 289 <1>: Other Language Changes<10>.
                                                             (line   15)
* Python Enhancement Proposals; PEP 289 <2>: Python documentation.
                                                             (line   10)
* Python Enhancement Proposals; PEP 292: PEP 292 Simpler String Substitutions.
                                                             (line   45)
* Python Enhancement Proposals; PEP 292 <1>: Template strings.
                                                             (line    6)
* Python Enhancement Proposals; PEP 293: PEP 293 Codec Error Handling Callbacks.
                                                             (line   33)
* Python Enhancement Proposals; PEP 3000: Python 3 0.        (line   43)
* Python Enhancement Proposals; PEP 301: PEP 301 Package Index and Metadata for Distutils.
                                                             (line   45)
* Python Enhancement Proposals; PEP 301 <1>: distutils command register --- Register a module with the Python Package Index.
                                                             (line    7)
* Python Enhancement Proposals; PEP 302: Using importlib as the Implementation of Import.
                                                             (line   13)
* Python Enhancement Proposals; PEP 302 <1>: Visible Changes.
                                                             (line   18)
* Python Enhancement Proposals; PEP 302 <2>: New Improved and Deprecated Modules<2>.
                                                             (line  106)
* Python Enhancement Proposals; PEP 302 <3>: PEP 273 Importing Modules from ZIP Archives.
                                                             (line   46)
* Python Enhancement Proposals; PEP 302 <4>: PEP 302 New Import Hooks.
                                                             (line   13)
* Python Enhancement Proposals; PEP 302 <5>: PEP 302 New Import Hooks.
                                                             (line   38)
* Python Enhancement Proposals; PEP 302 <6>: PEP 302 New Import Hooks.
                                                             (line   62)
* Python Enhancement Proposals; PEP 302 <7>: The import system.
                                                             (line   43)
* Python Enhancement Proposals; PEP 302 <8>: References.     (line   10)
* Python Enhancement Proposals; PEP 302 <9>: Built-in Functions.
                                                             (line 1551)
* Python Enhancement Proposals; PEP 302 <10>: linecache --- Random access to text lines.
                                                             (line   32)
* Python Enhancement Proposals; PEP 302 <11>: sys --- System-specific parameters and functions.
                                                             (line  866)
* Python Enhancement Proposals; PEP 302 <12>: sys --- System-specific parameters and functions.
                                                             (line  876)
* Python Enhancement Proposals; PEP 302 <13>: zipimport --- Import modules from Zip archives.
                                                             (line   44)
* Python Enhancement Proposals; PEP 302 <14>: pkgutil --- Package extension utility.
                                                             (line   49)
* Python Enhancement Proposals; PEP 302 <15>: pkgutil --- Package extension utility.
                                                             (line   51)
* Python Enhancement Proposals; PEP 302 <16>: pkgutil --- Package extension utility.
                                                             (line   52)
* Python Enhancement Proposals; PEP 302 <17>: pkgutil --- Package extension utility.
                                                             (line   65)
* Python Enhancement Proposals; PEP 302 <18>: pkgutil --- Package extension utility.
                                                             (line   73)
* Python Enhancement Proposals; PEP 302 <19>: pkgutil --- Package extension utility.
                                                             (line   88)
* Python Enhancement Proposals; PEP 302 <20>: pkgutil --- Package extension utility.
                                                             (line  102)
* Python Enhancement Proposals; PEP 302 <21>: pkgutil --- Package extension utility.
                                                             (line  119)
* Python Enhancement Proposals; PEP 302 <22>: pkgutil --- Package extension utility.
                                                             (line  200)
* Python Enhancement Proposals; PEP 302 <23>: pkgutil --- Package extension utility.
                                                             (line  216)
* Python Enhancement Proposals; PEP 302 <24>: runpy --- Locating and executing Python modules.
                                                             (line   32)
* Python Enhancement Proposals; PEP 302 <25>: Introduction<12>.
                                                             (line   45)
* Python Enhancement Proposals; PEP 302 <26>: importlib abc -- Abstract base classes related to import.
                                                             (line   34)
* Python Enhancement Proposals; PEP 302 <27>: importlib abc -- Abstract base classes related to import.
                                                             (line  152)
* Python Enhancement Proposals; PEP 302 <28>: importlib abc -- Abstract base classes related to import.
                                                             (line  268)
* Python Enhancement Proposals; PEP 302 <29>: importlib abc -- Abstract base classes related to import.
                                                             (line  288)
* Python Enhancement Proposals; PEP 302 <30>: importlib abc -- Abstract base classes related to import.
                                                             (line  359)
* Python Enhancement Proposals; PEP 302 <31>: imp --- Access the import internals.
                                                             (line  344)
* Python Enhancement Proposals; PEP 302 <32>: Glossary.      (line  362)
* Python Enhancement Proposals; PEP 302 <33>: Glossary.      (line  671)
* Python Enhancement Proposals; PEP 305: PEP 305 Comma-separated Files.
                                                             (line   42)
* Python Enhancement Proposals; PEP 305 <1>: csv --- CSV File Reading and Writing.
                                                             (line   36)
* Python Enhancement Proposals; PEP 307: PEP 307 Pickle Enhancements.
                                                             (line    8)
* Python Enhancement Proposals; PEP 307 <1>: PEP 307 Pickle Enhancements.
                                                             (line   30)
* Python Enhancement Proposals; PEP 307 <2>: PEP 307 Pickle Enhancements.
                                                             (line   42)
* Python Enhancement Proposals; PEP 307 <3>: Data stream format.
                                                             (line   32)
* Python Enhancement Proposals; PEP 308: PEP 308 Conditional Expressions.
                                                             (line   72)
* Python Enhancement Proposals; PEP 308 <1>: PEP 308 Conditional Expressions.
                                                             (line   78)
* Python Enhancement Proposals; PEP 308 <2>: Conditional expressions.
                                                             (line   17)
* Python Enhancement Proposals; PEP 309: PEP 309 Partial Function Application.
                                                             (line   73)
* Python Enhancement Proposals; PEP 3100: Python 3 0.        (line   44)
* Python Enhancement Proposals; PEP 3101: PEP 3101 A New Approach To String Formatting.
                                                             (line    3)
* Python Enhancement Proposals; PEP 3101 <1>: PEP 3101 A New Approach To String Formatting.
                                                             (line    8)
* Python Enhancement Proposals; PEP 3101 <2>: PEP 3101 Advanced String Formatting.
                                                             (line  162)
* Python Enhancement Proposals; PEP 3101 <3>: Custom String Formatting.
                                                             (line    8)
* Python Enhancement Proposals; PEP 3101 <4>: Custom String Formatting.
                                                             (line   60)
* Python Enhancement Proposals; PEP 3102: New Syntax.        (line   13)
* Python Enhancement Proposals; PEP 3104: New Syntax.        (line   24)
* Python Enhancement Proposals; PEP 3104 <1>: The nonlocal statement.
                                                             (line   26)
* Python Enhancement Proposals; PEP 3105: Print Is A Function.
                                                             (line    8)
* Python Enhancement Proposals; PEP 3105 <1>: PEP 3105 print As a Function.
                                                             (line   35)
* Python Enhancement Proposals; PEP 3105 <2>: __future__ --- Future statement definitions.
                                                             (line   87)
* Python Enhancement Proposals; PEP 3106: PEP 3106 Dictionary Views.
                                                             (line   58)
* Python Enhancement Proposals; PEP 3107: PEP 484 - Type Hints.
                                                             (line    7)
* Python Enhancement Proposals; PEP 3107 <1>: New Syntax.    (line    6)
* Python Enhancement Proposals; PEP 3107 <2>: Function definitions.
                                                             (line  115)
* Python Enhancement Proposals; PEP 3107 <3>: Glossary.      (line  389)
* Python Enhancement Proposals; PEP 3108: Library Changes.   (line    7)
* Python Enhancement Proposals; PEP 3108 <1>: Library Changes.
                                                             (line   17)
* Python Enhancement Proposals; PEP 3108 <2>: Library Changes.
                                                             (line   95)
* Python Enhancement Proposals; PEP 3109: Changed Syntax.    (line    6)
* Python Enhancement Proposals; PEP 3109 <1>: Changes To Exceptions.
                                                             (line   29)
* Python Enhancement Proposals; PEP 3110: Changed Syntax.    (line   16)
* Python Enhancement Proposals; PEP 3110 <1>: Changes To Exceptions.
                                                             (line   35)
* Python Enhancement Proposals; PEP 3110 <2>: PEP 3110 Exception-Handling Changes.
                                                             (line   48)
* Python Enhancement Proposals; PEP 3111: Builtins.          (line   12)
* Python Enhancement Proposals; PEP 3112: PEP 3112 Byte Literals.
                                                             (line   75)
* Python Enhancement Proposals; PEP 3112 <1>: __future__ --- Future statement definitions.
                                                             (line   90)
* Python Enhancement Proposals; PEP 3113: Removed Syntax.    (line    6)
* Python Enhancement Proposals; PEP 3114: Operators And Special Methods.
                                                             (line   19)
* Python Enhancement Proposals; PEP 3115: Changed Syntax.    (line   18)
* Python Enhancement Proposals; PEP 3115 <1>: Preparing the class namespace.
                                                             (line   18)
* Python Enhancement Proposals; PEP 3115 <2>: Class definitions.
                                                             (line   67)
* Python Enhancement Proposals; PEP 3115 <3>: Dynamic Type Creation.
                                                             (line   49)
* Python Enhancement Proposals; PEP 3116: Optimizations<5>.  (line    8)
* Python Enhancement Proposals; PEP 3116 <1>: PEP 3116 New I/O Library.
                                                             (line   69)
* Python Enhancement Proposals; PEP 3116 <2>: Glossary.      (line 1095)
* Python Enhancement Proposals; PEP 3118: PEP 3118 New memoryview implementation and buffer protocol documentation.
                                                             (line    6)
* Python Enhancement Proposals; PEP 3118 <1>: API changes.   (line   29)
* Python Enhancement Proposals; PEP 3118 <2>: Build and C API Changes<3>.
                                                             (line    8)
* Python Enhancement Proposals; PEP 3118 <3>: Build and C API Changes<6>.
                                                             (line   12)
* Python Enhancement Proposals; PEP 3118 <4>: PEP 3118 Revised Buffer Protocol.
                                                             (line   46)
* Python Enhancement Proposals; PEP 3118 <5>: Memory Views.  (line  110)
* Python Enhancement Proposals; PEP 3119: PEP 3119 Abstract Base Classes.
                                                             (line  139)
* Python Enhancement Proposals; PEP 3119 <1>: Customizing instance and subclass checks.
                                                             (line   35)
* Python Enhancement Proposals; PEP 3119 <2>: Collections Abstract Base Classes.
                                                             (line  275)
* Python Enhancement Proposals; PEP 3119 <3>: abc --- Abstract Base Classes.
                                                             (line   11)
* Python Enhancement Proposals; PEP 3119 <4>: Object Protocol.
                                                             (line  205)
* Python Enhancement Proposals; PEP 3119 <5>: Object Protocol.
                                                             (line  225)
* Python Enhancement Proposals; PEP 3120: Text Vs Data Instead Of Unicode Vs 8-bit.
                                                             (line  107)
* Python Enhancement Proposals; PEP 3120 <1>: Lexical analysis.
                                                             (line   12)
* Python Enhancement Proposals; PEP 3120 <2>: Introduction<12>.
                                                             (line   69)
* Python Enhancement Proposals; PEP 3121: Build and C API Changes<6>.
                                                             (line   14)
* Python Enhancement Proposals; PEP 3121 <1>: Initializing C modules.
                                                             (line   55)
* Python Enhancement Proposals; PEP 3121 <2>: Module initialization and state.
                                                             (line    6)
* Python Enhancement Proposals; PEP 3123: Build and C API Changes<6>.
                                                             (line   16)
* Python Enhancement Proposals; PEP 3127: PEP 3127 Integer Literal Support and Syntax.
                                                             (line   47)
* Python Enhancement Proposals; PEP 3129: PEP 3129 Class Decorators.
                                                             (line   24)
* Python Enhancement Proposals; PEP 3129 <1>: Class definitions.
                                                             (line   67)
* Python Enhancement Proposals; PEP 3131: Text Vs Data Instead Of Unicode Vs 8-bit.
                                                             (line  109)
* Python Enhancement Proposals; PEP 3131 <1>: Identifiers and keywords.
                                                             (line   10)
* Python Enhancement Proposals; PEP 3131 <2>: Identifiers and keywords.
                                                             (line   19)
* Python Enhancement Proposals; PEP 3132: New Syntax.        (line   28)
* Python Enhancement Proposals; PEP 3132 <1>: Assignment statements.
                                                             (line  164)
* Python Enhancement Proposals; PEP 3134: Changed Syntax.    (line    6)
* Python Enhancement Proposals; PEP 3134 <1>: Changes To Exceptions.
                                                             (line   40)
* Python Enhancement Proposals; PEP 3134 <2>: Changes To Exceptions.
                                                             (line   60)
* Python Enhancement Proposals; PEP 3135: Builtins.          (line    6)
* Python Enhancement Proposals; PEP 3135 <1>: Creating the class object.
                                                             (line   27)
* Python Enhancement Proposals; PEP 3137: PEP 3137 The memoryview Object.
                                                             (line   49)
* Python Enhancement Proposals; PEP 3138: Text Vs Data Instead Of Unicode Vs 8-bit.
                                                             (line  103)
* Python Enhancement Proposals; PEP 314: PEP 314 Metadata for Python Software Packages v1 1.
                                                             (line   42)
* Python Enhancement Proposals; PEP 314 <1>: distutils core --- Core Distutils functionality.
                                                             (line  103)
* Python Enhancement Proposals; PEP 3141: PEP 3141 A Type Hierarchy for Numbers.
                                                             (line   43)
* Python Enhancement Proposals; PEP 3141 <1>: numbers --- Numeric abstract base classes.
                                                             (line    6)
* Python Enhancement Proposals; PEP 3141 <2>: abc --- Abstract Base Classes.
                                                             (line   12)
* Python Enhancement Proposals; PEP 3144: ipaddress<3>.      (line   10)
* Python Enhancement Proposals; PEP 3147: PEP 421 Adding sys implementation.
                                                             (line   21)
* Python Enhancement Proposals; PEP 3147 <1>: PEP 3147 PYC Repository Directories.
                                                             (line   69)
* Python Enhancement Proposals; PEP 3147 <2>: Import-related module attributes.
                                                             (line   79)
* Python Enhancement Proposals; PEP 3147 <3>: runpy --- Locating and executing Python modules.
                                                             (line   87)
* Python Enhancement Proposals; PEP 3147 <4>: Introduction<12>.
                                                             (line   73)
* Python Enhancement Proposals; PEP 3147 <5>: importlib util -- Utility code for importers.
                                                             (line   20)
* Python Enhancement Proposals; PEP 3147 <6>: importlib util -- Utility code for importers.
                                                             (line   54)
* Python Enhancement Proposals; PEP 3147 <7>: importlib util -- Utility code for importers.
                                                             (line   58)
* Python Enhancement Proposals; PEP 3147 <8>: py_compile --- Compile Python source files.
                                                             (line   29)
* Python Enhancement Proposals; PEP 3147 <9>: py_compile --- Compile Python source files.
                                                             (line   53)
* Python Enhancement Proposals; PEP 3147 <10>: Command-line use.
                                                             (line   56)
* Python Enhancement Proposals; PEP 3147 <11>: Public functions.
                                                             (line   36)
* Python Enhancement Proposals; PEP 3147 <12>: Public functions.
                                                             (line   84)
* Python Enhancement Proposals; PEP 3147 <13>: imp --- Access the import internals.
                                                             (line  197)
* Python Enhancement Proposals; PEP 3147 <14>: imp --- Access the import internals.
                                                             (line  204)
* Python Enhancement Proposals; PEP 3147 <15>: imp --- Access the import internals.
                                                             (line  227)
* Python Enhancement Proposals; PEP 3147 <16>: imp --- Access the import internals.
                                                             (line  231)
* Python Enhancement Proposals; PEP 3147 <17>: imp --- Access the import internals.
                                                             (line  243)
* Python Enhancement Proposals; PEP 3147 <18>: Importing Modules<2>.
                                                             (line  200)
* Python Enhancement Proposals; PEP 3147 <19>: How do I create a pyc file?.
                                                             (line   12)
* Python Enhancement Proposals; PEP 3147 <20>: distutils util --- Miscellaneous other utility functions.
                                                             (line  137)
* Python Enhancement Proposals; PEP 3148: PEP 3148 The concurrent futures module.
                                                             (line   51)
* Python Enhancement Proposals; PEP 3148 <1>: Module Functions.
                                                             (line   59)
* Python Enhancement Proposals; PEP 3149: PEP 3149 ABI Version Tagged so Files.
                                                             (line   33)
* Python Enhancement Proposals; PEP 3149 <1>: sys --- System-specific parameters and functions.
                                                             (line   13)
* Python Enhancement Proposals; PEP 3151: PEP 3151 Reworking the OS and IO exception hierarchy.
                                                             (line   84)
* Python Enhancement Proposals; PEP 3151 <1>: OS exceptions. (line  114)
* Python Enhancement Proposals; PEP 3151 <2>: Exceptions<7>. (line   10)
* Python Enhancement Proposals; PEP 3151 <3>: select --- Waiting for I/O completion.
                                                             (line   26)
* Python Enhancement Proposals; PEP 3151 <4>: resource --- Resource usage information.
                                                             (line   19)
* Python Enhancement Proposals; PEP 3151 <5>: Standard Exceptions.
                                                             (line  145)
* Python Enhancement Proposals; PEP 3153: Close transports and event loops.
                                                             (line   18)
* Python Enhancement Proposals; PEP 3154: Summary -- Release Highlights.
                                                             (line   57)
* Python Enhancement Proposals; PEP 3154 <1>: pickle<3>.     (line   16)
* Python Enhancement Proposals; PEP 3154 <2>: Data stream format.
                                                             (line   43)
* Python Enhancement Proposals; PEP 3155: PEP 3155 Qualified name for classes and functions.
                                                             (line   62)
* Python Enhancement Proposals; PEP 3155 <1>: Glossary.      (line  954)
* Python Enhancement Proposals; PEP 3156: Summary -- Release Highlights.
                                                             (line   31)
* Python Enhancement Proposals; PEP 3156 <1>: Summary -- Release Highlights.
                                                             (line   44)
* Python Enhancement Proposals; PEP 3156 <2>: asyncio<2>.    (line    6)
* Python Enhancement Proposals; PEP 3156 <3>: asyncio<2>.    (line   17)
* Python Enhancement Proposals; PEP 3156 <4>: selectors<2>.  (line    6)
* Python Enhancement Proposals; PEP 3156 <5>: Close transports and event loops.
                                                             (line   17)
* Python Enhancement Proposals; PEP 318: PEP 318 Decorators for Functions and Methods.
                                                             (line  101)
* Python Enhancement Proposals; PEP 318 <1>: PEP 318 Decorators for Functions and Methods.
                                                             (line  125)
* Python Enhancement Proposals; PEP 318 <2>: Other Language Changes<10>.
                                                             (line    9)
* Python Enhancement Proposals; PEP 322: PEP 322 Reverse Iteration.
                                                             (line   35)
* Python Enhancement Proposals; PEP 322 <1>: Other Language Changes<10>.
                                                             (line   13)
* Python Enhancement Proposals; PEP 324: PEP 324 New subprocess Module.
                                                             (line   86)
* Python Enhancement Proposals; PEP 324 <1>: subprocess --- Subprocess management.
                                                             (line   21)
* Python Enhancement Proposals; PEP 325: PEP 342 New Generator Features.
                                                             (line  147)
* Python Enhancement Proposals; PEP 327: The Context type.   (line   56)
* Python Enhancement Proposals; PEP 328: Porting Python code.
                                                             (line   36)
* Python Enhancement Proposals; PEP 328 <1>: Removed Syntax. (line   29)
* Python Enhancement Proposals; PEP 328 <2>: PEP 328 Absolute and Relative Imports.
                                                             (line   82)
* Python Enhancement Proposals; PEP 328 <3>: PEP 328 Multi-line Imports.
                                                             (line   35)
* Python Enhancement Proposals; PEP 328 <4>: Other Language Changes<10>.
                                                             (line   21)
* Python Enhancement Proposals; PEP 328 <5>: References.     (line   20)
* Python Enhancement Proposals; PEP 328 <6>: The import statement.
                                                             (line  111)
* Python Enhancement Proposals; PEP 328 <7>: Built-in Functions.
                                                             (line 1569)
* Python Enhancement Proposals; PEP 328 <8>: __future__ --- Future statement definitions.
                                                             (line   80)
* Python Enhancement Proposals; PEP 328 <9>: Introduction<12>.
                                                             (line   49)
* Python Enhancement Proposals; PEP 331: PEP 331 Locale-Independent Float/String Conversions.
                                                             (line   38)
* Python Enhancement Proposals; PEP 333: The wsgiref package.
                                                             (line    8)
* Python Enhancement Proposals; PEP 333 <1>: The wsgiref package.
                                                             (line   31)
* Python Enhancement Proposals; PEP 3333: PEP 3333 Python Web Server Gateway Interface v1 0 1.
                                                             (line   50)
* Python Enhancement Proposals; PEP 3333 <1>: wsgiref --- WSGI Utilities and Reference Implementation.
                                                             (line   22)
* Python Enhancement Proposals; PEP 3333 <2>: wsgiref util -- WSGI environment utilities.
                                                             (line    8)
* Python Enhancement Proposals; PEP 3333 <3>: wsgiref util -- WSGI environment utilities.
                                                             (line   10)
* Python Enhancement Proposals; PEP 3333 <4>: wsgiref util -- WSGI environment utilities.
                                                             (line   28)
* Python Enhancement Proposals; PEP 3333 <5>: wsgiref util -- WSGI environment utilities.
                                                             (line   74)
* Python Enhancement Proposals; PEP 3333 <6>: wsgiref headers -- WSGI response header tools.
                                                             (line   12)
* Python Enhancement Proposals; PEP 3333 <7>: wsgiref simple_server -- a simple WSGI HTTP server.
                                                             (line   21)
* Python Enhancement Proposals; PEP 3333 <8>: wsgiref simple_server -- a simple WSGI HTTP server.
                                                             (line   96)
* Python Enhancement Proposals; PEP 3333 <9>: wsgiref validate --- WSGI conformance checker.
                                                             (line   13)
* Python Enhancement Proposals; PEP 3333 <10>: wsgiref validate --- WSGI conformance checker.
                                                             (line   40)
* Python Enhancement Proposals; PEP 3333 <11>: wsgiref handlers -- server/gateway base classes.
                                                             (line  231)
* Python Enhancement Proposals; PEP 3333 <12>: wsgiref handlers -- server/gateway base classes.
                                                             (line  247)
* Python Enhancement Proposals; PEP 3333 <13>: wsgiref handlers -- server/gateway base classes.
                                                             (line  254)
* Python Enhancement Proposals; PEP 3333 <14>: wsgiref handlers -- server/gateway base classes.
                                                             (line  263)
* Python Enhancement Proposals; PEP 338: PEP 338 Executing Modules as Scripts.
                                                             (line   21)
* Python Enhancement Proposals; PEP 338 <1>: Interface options.
                                                             (line   89)
* Python Enhancement Proposals; PEP 338 <2>: References.     (line   24)
* Python Enhancement Proposals; PEP 338 <3>: runpy --- Locating and executing Python modules.
                                                             (line  171)
* Python Enhancement Proposals; PEP 339: Build and C API Changes<9>.
                                                             (line   45)
* Python Enhancement Proposals; PEP 341: PEP 341 Unified try/except/finally.
                                                             (line   44)
* Python Enhancement Proposals; PEP 342: PEP 342 New Generator Features.
                                                             (line   42)
* Python Enhancement Proposals; PEP 342 <1>: PEP 342 New Generator Features.
                                                             (line  140)
* Python Enhancement Proposals; PEP 342 <2>: Porting to Python 2 5.
                                                             (line   15)
* Python Enhancement Proposals; PEP 342 <3>: Yield expressions.
                                                             (line   72)
* Python Enhancement Proposals; PEP 342 <4>: Collections Abstract Base Classes.
                                                             (line  122)
* Python Enhancement Proposals; PEP 342 <5>: Passing values into a generator.
                                                             (line   25)
* Python Enhancement Proposals; PEP 342 <6>: Python documentation.
                                                             (line   12)
* Python Enhancement Proposals; PEP 343: The contextlib module.
                                                             (line   64)
* Python Enhancement Proposals; PEP 343 <1>: The contextlib module<2>.
                                                             (line   64)
* Python Enhancement Proposals; PEP 343 <2>: With Statement Context Managers.
                                                             (line   46)
* Python Enhancement Proposals; PEP 343 <3>: The with statement.
                                                             (line   71)
* Python Enhancement Proposals; PEP 343 <4>: Using a context manager as a function decorator.
                                                             (line   51)
* Python Enhancement Proposals; PEP 343 <5>: __future__ --- Future statement definitions.
                                                             (line   84)
* Python Enhancement Proposals; PEP 343 <6>: Glossary.       (line  196)
* Python Enhancement Proposals; PEP 347: Build and C API Changes<9>.
                                                             (line   10)
* Python Enhancement Proposals; PEP 352: Changes To Exceptions.
                                                             (line    9)
* Python Enhancement Proposals; PEP 352 <1>: Deprecations and Removals.
                                                             (line    9)
* Python Enhancement Proposals; PEP 352 <2>: PEP 352 Exceptions as New-Style Classes.
                                                             (line   57)
* Python Enhancement Proposals; PEP 353: PEP 353 Using ssize_t as the index type.
                                                             (line   48)
* Python Enhancement Proposals; PEP 353 <1>: PEP 353 Using ssize_t as the index type.
                                                             (line   54)
* Python Enhancement Proposals; PEP 353 <2>: Build and C API Changes<9>.
                                                             (line   20)
* Python Enhancement Proposals; PEP 356: What's New in Python 2 5.
                                                             (line   10)
* Python Enhancement Proposals; PEP 357: PEP 357 The '__index__' method.
                                                             (line   39)
* Python Enhancement Proposals; PEP 361: What's New in Python 2 6.
                                                             (line   10)
* Python Enhancement Proposals; PEP 362: PEP 362 Function Signature Object.
                                                             (line   19)
* Python Enhancement Proposals; PEP 362 <1>: Introspecting callables with the Signature object.
                                                             (line  310)
* Python Enhancement Proposals; PEP 362 <2>: Glossary.       (line   75)
* Python Enhancement Proposals; PEP 362 <3>: Glossary.       (line  866)
* Python Enhancement Proposals; PEP 366: Visible Changes.    (line   24)
* Python Enhancement Proposals; PEP 366 <1>: Import-related module attributes.
                                                             (line   30)
* Python Enhancement Proposals; PEP 366 <2>: Import-related module attributes.
                                                             (line   34)
* Python Enhancement Proposals; PEP 366 <3>: References.     (line   17)
* Python Enhancement Proposals; PEP 366 <4>: References.     (line   21)
* Python Enhancement Proposals; PEP 366 <5>: runpy --- Locating and executing Python modules.
                                                             (line  175)
* Python Enhancement Proposals; PEP 366 <6>: Introduction<12>.
                                                             (line   53)
* Python Enhancement Proposals; PEP 370: PEP 370 Per-user site-packages Directory.
                                                             (line   36)
* Python Enhancement Proposals; PEP 370 <1>: Miscellaneous options.
                                                             (line   99)
* Python Enhancement Proposals; PEP 370 <2>: Environment variables.
                                                             (line  138)
* Python Enhancement Proposals; PEP 370 <3>: Environment variables.
                                                             (line  150)
* Python Enhancement Proposals; PEP 370 <4>: Module contents<3>.
                                                             (line  110)
* Python Enhancement Proposals; PEP 371: PEP 371 The multiprocessing Package.
                                                             (line  145)
* Python Enhancement Proposals; PEP 372: PEP 372 Ordered Dictionaries.
                                                             (line   31)
* Python Enhancement Proposals; PEP 372 <1>: PEP 372 Adding an Ordered Dictionary to collections.
                                                             (line   97)
* Python Enhancement Proposals; PEP 373: The Future for Python 2 x.
                                                             (line   23)
* Python Enhancement Proposals; PEP 378: PEP 378 Format Specifier for Thousands Separator.
                                                             (line   32)
* Python Enhancement Proposals; PEP 378 <1>: PEP 378 Format Specifier for Thousands Separator<2>.
                                                             (line   37)
* Python Enhancement Proposals; PEP 378 <2>: Format Specification Mini-Language.
                                                             (line  102)
* Python Enhancement Proposals; PEP 380: PEP 380 Syntax for Delegating to a Subgenerator.
                                                             (line   66)
* Python Enhancement Proposals; PEP 380 <1>: Yield expressions.
                                                             (line   77)
* Python Enhancement Proposals; PEP 380 <2>: asyncio -- Asynchronous I/O event loop coroutines and tasks.
                                                             (line   36)
* Python Enhancement Proposals; PEP 380 <3>: Coroutines<3>.  (line   15)
* Python Enhancement Proposals; PEP 383: Error Handlers.     (line   58)
* Python Enhancement Proposals; PEP 383 <1>: Socket families.
                                                             (line   15)
* Python Enhancement Proposals; PEP 383 <2>: Locale Encoding.
                                                             (line   13)
* Python Enhancement Proposals; PEP 383 <3>: Locale Encoding.
                                                             (line   41)
* Python Enhancement Proposals; PEP 383 <4>: File System Encoding.
                                                             (line    8)
* Python Enhancement Proposals; PEP 384: PEP 384 Defining a Stable ABI.
                                                             (line   24)
* Python Enhancement Proposals; PEP 384 <1>: Stable Application Binary Interface.
                                                             (line   36)
* Python Enhancement Proposals; PEP 385: Code Repository.    (line   13)
* Python Enhancement Proposals; PEP 389: PEP 389 Argparse Command Line Parsing Module.
                                                             (line   92)
* Python Enhancement Proposals; PEP 389 <1>: PEP 389 The argparse Module for Parsing Command Lines.
                                                             (line  100)
* Python Enhancement Proposals; PEP 391: PEP 391 Dictionary Based Configuration for Logging.
                                                             (line   51)
* Python Enhancement Proposals; PEP 391 <1>: PEP 391 Dictionary-Based Configuration For Logging.
                                                             (line   94)
* Python Enhancement Proposals; PEP 392: What's New In Python 3 2.
                                                             (line   16)
* Python Enhancement Proposals; PEP 393: Functionality.      (line    6)
* Python Enhancement Proposals; PEP 393 <1>: Performance and resource usage.
                                                             (line   29)
* Python Enhancement Proposals; PEP 393 <2>: Optimizations<3>.
                                                             (line    8)
* Python Enhancement Proposals; PEP 393 <3>: Build and C API Changes<3>.
                                                             (line   12)
* Python Enhancement Proposals; PEP 393 <4>: Deprecated Python modules functions and methods<3>.
                                                             (line   10)
* Python Enhancement Proposals; PEP 393 <5>: Deprecated functions and types of the C API<2>.
                                                             (line    6)
* Python Enhancement Proposals; PEP 393 <6>: Encodings and Unicode.
                                                             (line    7)
* Python Enhancement Proposals; PEP 393 <7>: Text Encodings. (line   66)
* Python Enhancement Proposals; PEP 393 <8>: sys --- System-specific parameters and functions.
                                                             (line  792)
* Python Enhancement Proposals; PEP 393 <9>: Unicode Objects.
                                                             (line    6)
* Python Enhancement Proposals; PEP 393 <10>: Deprecated Py_UNICODE APIs.
                                                             (line    8)
* Python Enhancement Proposals; PEP 395: Open issues.        (line   18)
* Python Enhancement Proposals; PEP 397: PEP 486 Make the Python Launcher aware of virtual environments.
                                                             (line    6)
* Python Enhancement Proposals; PEP 397 <1>: PEP 397 Python Launcher for Windows.
                                                             (line   31)
* Python Enhancement Proposals; PEP 397 <2>: Other resources.
                                                             (line   18)
* Python Enhancement Proposals; PEP 397 <3>: Creating virtual environments.
                                                             (line  163)
* Python Enhancement Proposals; PEP 398: What's New In Python 3 3.
                                                             (line   13)
* Python Enhancement Proposals; PEP 4:   Library Changes.    (line   13)
* Python Enhancement Proposals; PEP 405: PEP 405 Virtual Environments.
                                                             (line   23)
* Python Enhancement Proposals; PEP 405 <1>: venv --- Creation of virtual environments.
                                                             (line   19)
* Python Enhancement Proposals; PEP 409: PEP 409 Suppressing exception context.
                                                             (line   63)
* Python Enhancement Proposals; PEP 411: sys --- System-specific parameters and functions.
                                                             (line  607)
* Python Enhancement Proposals; PEP 411 <1>: sys --- System-specific parameters and functions.
                                                             (line 1161)
* Python Enhancement Proposals; PEP 411 <2>: Glossary.       (line  921)
* Python Enhancement Proposals; PEP 412: PEP 412 Key-Sharing Dictionary.
                                                             (line   15)
* Python Enhancement Proposals; PEP 414: PEP 414 Explicit Unicode literals.
                                                             (line   17)
* Python Enhancement Proposals; PEP 414 <1>: String and Bytes literals.
                                                             (line   63)
* Python Enhancement Proposals; PEP 418: time<2>.            (line    6)
* Python Enhancement Proposals; PEP 420: PEP 420 Implicit Namespace Packages.
                                                             (line    9)
* Python Enhancement Proposals; PEP 420 <1>: PEP 420 Implicit Namespace Packages.
                                                             (line   14)
* Python Enhancement Proposals; PEP 420 <2>: The import system.
                                                             (line   46)
* Python Enhancement Proposals; PEP 420 <3>: Namespace packages.
                                                             (line   27)
* Python Enhancement Proposals; PEP 420 <4>: module __path__.
                                                             (line   22)
* Python Enhancement Proposals; PEP 420 <5>: module __path__.
                                                             (line   22)
* Python Enhancement Proposals; PEP 420 <6>: References.     (line   11)
* Python Enhancement Proposals; PEP 420 <7>: References.     (line   13)
* Python Enhancement Proposals; PEP 420 <8>: References.     (line   13)
* Python Enhancement Proposals; PEP 420 <9>: Glossary.       (line  362)
* Python Enhancement Proposals; PEP 420 <10>: Glossary.      (line  779)
* Python Enhancement Proposals; PEP 420 <11>: Glossary.      (line  896)
* Python Enhancement Proposals; PEP 421: SimpleNamespace.    (line   16)
* Python Enhancement Proposals; PEP 421 <1>: sys --- System-specific parameters and functions.
                                                             (line  709)
* Python Enhancement Proposals; PEP 424: Other Language Changes<3>.
                                                             (line   59)
* Python Enhancement Proposals; PEP 424 <1>: operator<2>.    (line    8)
* Python Enhancement Proposals; PEP 427: Key terms.          (line   36)
* Python Enhancement Proposals; PEP 428: Summary -- Release Highlights.
                                                             (line   39)
* Python Enhancement Proposals; PEP 428 <1>: pathlib<2>.     (line   17)
* Python Enhancement Proposals; PEP 428 <2>: pathlib --- Object-oriented filesystem paths.
                                                             (line   40)
* Python Enhancement Proposals; PEP 429: What's New In Python 3 4.
                                                             (line   16)
* Python Enhancement Proposals; PEP 434: PEP 434 IDLE Enhancement Exception for All Branches.
                                                             (line    6)
* Python Enhancement Proposals; PEP 435: Summary -- Release Highlights.
                                                             (line   36)
* Python Enhancement Proposals; PEP 435 <1>: enum<2>.        (line    6)
* Python Enhancement Proposals; PEP 435 <2>: enum<2>.        (line   15)
* Python Enhancement Proposals; PEP 436: Summary -- Release Highlights.
                                                             (line  120)
* Python Enhancement Proposals; PEP 436 <1>: PEP 436 Argument Clinic.
                                                             (line    6)
* Python Enhancement Proposals; PEP 436 <2>: PEP 436 Argument Clinic.
                                                             (line   28)
* Python Enhancement Proposals; PEP 441: zipapp.             (line    6)
* Python Enhancement Proposals; PEP 441 <1>: zipapp.         (line   24)
* Python Enhancement Proposals; PEP 442: Summary -- Release Highlights.
                                                             (line  113)
* Python Enhancement Proposals; PEP 442 <1>: Summary -- Release Highlights.
                                                             (line  115)
* Python Enhancement Proposals; PEP 442 <2>: PEP 442 Safe Object Finalization.
                                                             (line    6)
* Python Enhancement Proposals; PEP 442 <3>: PEP 442 Safe Object Finalization.
                                                             (line   21)
* Python Enhancement Proposals; PEP 442 <4>: gc --- Garbage Collector interface.
                                                             (line  184)
* Python Enhancement Proposals; PEP 442 <5>: Finalization and De-allocation.
                                                             (line   77)
* Python Enhancement Proposals; PEP 442 <6>: Type Objects<3>.
                                                             (line 1143)
* Python Enhancement Proposals; PEP 443: Summary -- Release Highlights.
                                                             (line   55)
* Python Enhancement Proposals; PEP 443 <1>: functools<2>.   (line   22)
* Python Enhancement Proposals; PEP 443 <2>: Glossary.       (line  451)
* Python Enhancement Proposals; PEP 445: Summary -- Release Highlights.
                                                             (line  118)
* Python Enhancement Proposals; PEP 445 <1>: PEP 445 Customization of CPython Memory Allocators.
                                                             (line    6)
* Python Enhancement Proposals; PEP 445 <2>: PEP 445 Customization of CPython Memory Allocators.
                                                             (line   12)
* Python Enhancement Proposals; PEP 445 <3>: Other Improvements.
                                                             (line   63)
* Python Enhancement Proposals; PEP 446: Summary -- Release Highlights.
                                                             (line   14)
* Python Enhancement Proposals; PEP 446 <1>: Summary -- Release Highlights.
                                                             (line   78)
* Python Enhancement Proposals; PEP 446 <2>: PEP 446 Newly Created File Descriptors Are Non-Inheritable.
                                                             (line    6)
* Python Enhancement Proposals; PEP 446 <3>: PEP 446 Newly Created File Descriptors Are Non-Inheritable.
                                                             (line   26)
* Python Enhancement Proposals; PEP 448: PEP 448 - Additional Unpacking Generalizations.
                                                             (line    6)
* Python Enhancement Proposals; PEP 448 <1>: PEP 448 - Additional Unpacking Generalizations.
                                                             (line   38)
* Python Enhancement Proposals; PEP 450: Summary -- Release Highlights.
                                                             (line   47)
* Python Enhancement Proposals; PEP 450 <1>: statistics.     (line    6)
* Python Enhancement Proposals; PEP 450 <2>: statistics.     (line   14)
* Python Enhancement Proposals; PEP 451: PEP 489 Multi-phase extension module initialization.
                                                             (line    7)
* Python Enhancement Proposals; PEP 451 <1>: Summary -- Release Highlights.
                                                             (line   22)
* Python Enhancement Proposals; PEP 451 <2>: PEP 451 A ModuleSpec Type for the Import System.
                                                             (line    6)
* Python Enhancement Proposals; PEP 451 <3>: References.     (line   26)
* Python Enhancement Proposals; PEP 451 <4>: sys --- System-specific parameters and functions.
                                                             (line  822)
* Python Enhancement Proposals; PEP 451 <5>: pkgutil --- Package extension utility.
                                                             (line   84)
* Python Enhancement Proposals; PEP 451 <6>: pkgutil --- Package extension utility.
                                                             (line  115)
* Python Enhancement Proposals; PEP 451 <7>: runpy --- Locating and executing Python modules.
                                                             (line   91)
* Python Enhancement Proposals; PEP 451 <8>: runpy --- Locating and executing Python modules.
                                                             (line  164)
* Python Enhancement Proposals; PEP 451 <9>: runpy --- Locating and executing Python modules.
                                                             (line  179)
* Python Enhancement Proposals; PEP 451 <10>: Introduction<12>.
                                                             (line   57)
* Python Enhancement Proposals; PEP 451 <11>: Multi-phase initialization.
                                                             (line   72)
* Python Enhancement Proposals; PEP 451 <12>: Glossary.      (line  362)
* Python Enhancement Proposals; PEP 453: Summary -- Release Highlights.
                                                             (line   12)
* Python Enhancement Proposals; PEP 453 <1>: Summary -- Release Highlights.
                                                             (line   34)
* Python Enhancement Proposals; PEP 453 <2>: Bootstrapping pip By Default.
                                                             (line    6)
* Python Enhancement Proposals; PEP 453 <3>: Documentation Changes.
                                                             (line   21)
* Python Enhancement Proposals; PEP 453 <4>: ensurepip.      (line    7)
* Python Enhancement Proposals; PEP 453 <5>: venv.           (line   13)
* Python Enhancement Proposals; PEP 453 <6>: Other Improvements.
                                                             (line   73)
* Python Enhancement Proposals; PEP 453 <7>: ensurepip --- Bootstrapping the pip installer.
                                                             (line   31)
* Python Enhancement Proposals; PEP 454: Summary -- Release Highlights.
                                                             (line   50)
* Python Enhancement Proposals; PEP 454 <1>: tracemalloc.    (line    6)
* Python Enhancement Proposals; PEP 454 <2>: tracemalloc.    (line   22)
* Python Enhancement Proposals; PEP 456: Summary -- Release Highlights.
                                                             (line   75)
* Python Enhancement Proposals; PEP 456 <1>: PEP 456 Secure and Interchangeable Hash Algorithm.
                                                             (line    6)
* Python Enhancement Proposals; PEP 461: PEP 461 - % formatting support for bytes and bytearray.
                                                             (line    6)
* Python Enhancement Proposals; PEP 461 <1>: PEP 461 - % formatting support for bytes and bytearray.
                                                             (line   41)
* Python Enhancement Proposals; PEP 461 <2>: printf-style Bytes Formatting.
                                                             (line  200)
* Python Enhancement Proposals; PEP 465: PEP 465 - A dedicated infix operator for matrix multiplication.
                                                             (line    6)
* Python Enhancement Proposals; PEP 465 <1>: PEP 465 - A dedicated infix operator for matrix multiplication.
                                                             (line   45)
* Python Enhancement Proposals; PEP 465 <2>: Build and C API Changes<2>.
                                                             (line   45)
* Python Enhancement Proposals; PEP 466: PEP 466 Network Security Enhancements for Python 2 7.
                                                             (line    6)
* Python Enhancement Proposals; PEP 466 <1>: PEP 466 Network Security Enhancements for Python 2 7.
                                                             (line   11)
* Python Enhancement Proposals; PEP 466 <2>: PEP 466 Network Security Enhancements for Python 2 7.
                                                             (line   22)
* Python Enhancement Proposals; PEP 466 <3>: PEP 466 Network Security Enhancements for Python 2 7.
                                                             (line   33)
* Python Enhancement Proposals; PEP 471: PEP 471 - os scandir function -- a better and faster directory iterator.
                                                             (line    6)
* Python Enhancement Proposals; PEP 471 <1>: PEP 471 - os scandir function -- a better and faster directory iterator.
                                                             (line   29)
* Python Enhancement Proposals; PEP 475: PEP 475 Retry system calls failing with EINTR.
                                                             (line   32)
* Python Enhancement Proposals; PEP 475 <1>: PEP 475 Retry system calls failing with EINTR.
                                                             (line   77)
* Python Enhancement Proposals; PEP 475 <2>: Changes in the Python API<2>.
                                                             (line    6)
* Python Enhancement Proposals; PEP 475 <3>: Built-in Functions.
                                                             (line 1085)
* Python Enhancement Proposals; PEP 475 <4>: OS exceptions.  (line   78)
* Python Enhancement Proposals; PEP 475 <5>: File Descriptor Operations.
                                                             (line  251)
* Python Enhancement Proposals; PEP 475 <6>: File Descriptor Operations.
                                                             (line  416)
* Python Enhancement Proposals; PEP 475 <7>: File Descriptor Operations.
                                                             (line  530)
* Python Enhancement Proposals; PEP 475 <8>: Process Management.
                                                             (line  593)
* Python Enhancement Proposals; PEP 475 <9>: time --- Time access and conversions.
                                                             (line  342)
* Python Enhancement Proposals; PEP 475 <10>: Socket Objects.
                                                             (line   28)
* Python Enhancement Proposals; PEP 475 <11>: Socket Objects.
                                                             (line   74)
* Python Enhancement Proposals; PEP 475 <12>: Socket Objects.
                                                             (line  211)
* Python Enhancement Proposals; PEP 475 <13>: Socket Objects.
                                                             (line  225)
* Python Enhancement Proposals; PEP 475 <14>: Socket Objects.
                                                             (line  296)
* Python Enhancement Proposals; PEP 475 <15>: Socket Objects.
                                                             (line  368)
* Python Enhancement Proposals; PEP 475 <16>: Socket Objects.
                                                             (line  387)
* Python Enhancement Proposals; PEP 475 <17>: Socket Objects.
                                                             (line  403)
* Python Enhancement Proposals; PEP 475 <18>: Socket Objects.
                                                             (line  442)
* Python Enhancement Proposals; PEP 475 <19>: select --- Waiting for I/O completion.
                                                             (line  141)
* Python Enhancement Proposals; PEP 475 <20>: /dev/poll Polling Objects.
                                                             (line   82)
* Python Enhancement Proposals; PEP 475 <21>: Edge and Level Trigger Polling epoll Objects.
                                                             (line   86)
* Python Enhancement Proposals; PEP 475 <22>: Polling Objects.
                                                             (line   90)
* Python Enhancement Proposals; PEP 475 <23>: Kqueue Objects.
                                                             (line   35)
* Python Enhancement Proposals; PEP 475 <24>: Classes<3>.    (line  133)
* Python Enhancement Proposals; PEP 475 <25>: Module contents<2>.
                                                             (line  348)
* Python Enhancement Proposals; PEP 475 <26>: Module contents<2>.
                                                             (line  366)
* Python Enhancement Proposals; PEP 478: What's New In Python 3 5.
                                                             (line   17)
* Python Enhancement Proposals; PEP 479: PEP 479 Change StopIteration handling inside generators.
                                                             (line   12)
* Python Enhancement Proposals; PEP 479 <1>: PEP 479 Change StopIteration handling inside generators.
                                                             (line   47)
* Python Enhancement Proposals; PEP 479 <2>: __future__ --- Future statement definitions.
                                                             (line   93)
* Python Enhancement Proposals; PEP 483: PEP 484 - Type Hints.
                                                             (line   47)
* Python Enhancement Proposals; PEP 483 <1>: typing --- Support for type hints.
                                                             (line   16)
* Python Enhancement Proposals; PEP 484: PEP 484 - Type Hints.
                                                             (line   16)
* Python Enhancement Proposals; PEP 484 <1>: PEP 484 - Type Hints.
                                                             (line   41)
* Python Enhancement Proposals; PEP 484 <2>: Function Annotations.
                                                             (line    7)
* Python Enhancement Proposals; PEP 484 <3>: typing --- Support for type hints.
                                                             (line   12)
* Python Enhancement Proposals; PEP 484 <4>: typing --- Support for type hints.
                                                             (line   15)
* Python Enhancement Proposals; PEP 484 <5>: Classes functions and decorators.
                                                             (line   51)
* Python Enhancement Proposals; PEP 484 <6>: Classes functions and decorators.
                                                             (line   56)
* Python Enhancement Proposals; PEP 485: PEP 485 A function for testing approximate equality.
                                                             (line    6)
* Python Enhancement Proposals; PEP 485 <1>: PEP 485 A function for testing approximate equality.
                                                             (line   36)
* Python Enhancement Proposals; PEP 485 <2>: Number-theoretic and representation functions.
                                                             (line  117)
* Python Enhancement Proposals; PEP 485 <3>: Classification functions.
                                                             (line   54)
* Python Enhancement Proposals; PEP 486: PEP 486 Make the Python Launcher aware of virtual environments.
                                                             (line    6)
* Python Enhancement Proposals; PEP 486 <1>: PEP 486 Make the Python Launcher aware of virtual environments.
                                                             (line   14)
* Python Enhancement Proposals; PEP 488: PEP 488 Elimination of PYO files.
                                                             (line    6)
* Python Enhancement Proposals; PEP 488 <1>: PEP 488 Elimination of PYO files.
                                                             (line   20)
* Python Enhancement Proposals; PEP 488 <2>: Changes in the Python API<2>.
                                                             (line   80)
* Python Enhancement Proposals; PEP 488 <3>: Introduction<12>.
                                                             (line   61)
* Python Enhancement Proposals; PEP 488 <4>: importlib util -- Utility code for importers.
                                                             (line   20)
* Python Enhancement Proposals; PEP 488 <5>: importlib util -- Utility code for importers.
                                                             (line   58)
* Python Enhancement Proposals; PEP 488 <6>: py_compile --- Compile Python source files.
                                                             (line   30)
* Python Enhancement Proposals; PEP 488 <7>: distutils util --- Miscellaneous other utility functions.
                                                             (line  137)
* Python Enhancement Proposals; PEP 488 <8>: distutils util --- Miscellaneous other utility functions.
                                                             (line  174)
* Python Enhancement Proposals; PEP 489: PEP 489 Multi-phase extension module initialization.
                                                             (line    6)
* Python Enhancement Proposals; PEP 489 <1>: PEP 489 Multi-phase extension module initialization.
                                                             (line   18)
* Python Enhancement Proposals; PEP 489 <2>: Build and C API Changes<2>.
                                                             (line   39)
* Python Enhancement Proposals; PEP 489 <3>: Introduction<12>.
                                                             (line   65)
* Python Enhancement Proposals; PEP 489 <4>: importlib machinery -- Importers and path hooks.
                                                             (line   73)
* Python Enhancement Proposals; PEP 489 <5>: importlib machinery -- Importers and path hooks.
                                                             (line  304)
* Python Enhancement Proposals; PEP 489 <6>: importlib machinery -- Importers and path hooks.
                                                             (line  310)
* Python Enhancement Proposals; PEP 489 <7>: The Module's Method Table and Initialization Function.
                                                             (line  121)
* Python Enhancement Proposals; PEP 489 <8>: Building C and C++ Extensions.
                                                             (line   40)
* Python Enhancement Proposals; PEP 489 <9>: Multi-phase initialization.
                                                             (line  108)
* Python Enhancement Proposals; PEP 492: New Keywords.       (line    7)
* Python Enhancement Proposals; PEP 492 <1>: PEP 492 - Coroutines with async and await syntax.
                                                             (line    6)
* Python Enhancement Proposals; PEP 492 <2>: PEP 492 - Coroutines with async and await syntax.
                                                             (line   88)
* Python Enhancement Proposals; PEP 492 <3>: New Keywords<2>.
                                                             (line    7)
* Python Enhancement Proposals; PEP 492 <4>: Changes in the C API<2>.
                                                             (line   25)
* Python Enhancement Proposals; PEP 492 <5>: Awaitable Objects.
                                                             (line   27)
* Python Enhancement Proposals; PEP 492 <6>: The async with statement.
                                                             (line   42)
* Python Enhancement Proposals; PEP 492 <7>: sys --- System-specific parameters and functions.
                                                             (line  604)
* Python Enhancement Proposals; PEP 492 <8>: sys --- System-specific parameters and functions.
                                                             (line 1158)
* Python Enhancement Proposals; PEP 492 <9>: Glossary.       (line   81)
* Python Enhancement Proposals; PEP 492 <10>: Glossary.      (line   88)
* Python Enhancement Proposals; PEP 492 <11>: Glossary.      (line   96)
* Python Enhancement Proposals; PEP 492 <12>: Glossary.      (line  109)
* Python Enhancement Proposals; PEP 492 <13>: Glossary.      (line  215)
* Python Enhancement Proposals; PEP 492 <14>: Glossary.      (line  222)
* Python Enhancement Proposals; PEP 498: PEP 498 Formatted string literals.
                                                             (line   16)
* Python Enhancement Proposals; PEP 498 <1>: Formatted string literals.
                                                             (line   88)
* Python Enhancement Proposals; PEP 5:   PEP 230 Warning Framework.
                                                             (line   66)
* Python Enhancement Proposals; PEP 5 <1>: Is it reasonable to propose incompatible changes to Python?.
                                                             (line   14)
* Python Enhancement Proposals; PEP 506: secrets --- Generate secure random numbers for managing secrets.
                                                             (line   24)
* Python Enhancement Proposals; PEP 511: Changes in the Python API.
                                                             (line   14)
* Python Enhancement Proposals; PEP 6:   How does the Python version numbering scheme work?.
                                                             (line    9)
* Python Enhancement Proposals; PEP 8:   Library Changes.    (line   26)
* Python Enhancement Proposals; PEP 8 <1>: Intermezzo Coding Style.
                                                             (line   13)
* Python Enhancement Proposals; PEP 8 <2>: Package History.  (line   79)
* Python Enhancement Proposals; PEP 8 <3>: Are there coding standards or a style guide for Python programs?.
                                                             (line    7)
* Python Enhancement Proposals; PEP 8 <4>: How do I keep editors from inserting tabs into my Python source?.
                                                             (line    6)
* Python Package Index (PyPI):           Vista User Access Control UAC.
                                                             (line   12)
* Python Package Index (PyPI); .pypirc file: Additional command options.
                                                             (line   25)
* PYTHON*:                               Other Improvements. (line    9)
* PYTHON* <1>:                           Miscellaneous options.
                                                             (line   28)
* PYTHON* <2>:                           Miscellaneous options.
                                                             (line   46)
* PYTHONASYNCIODEBUG:                    Debug mode.         (line   10)
* PYTHONASYNCIODEBUG <1>:                Debug mode of asyncio.
                                                             (line   13)
* PYTHONCASEOK:                          PEP 235 Importing Modules on Case-Insensitive Platforms.
                                                             (line   17)
* PYTHONDEBUG:                           Miscellaneous options.
                                                             (line   24)
* PYTHONDOCS:                            pydoc --- Documentation generator and online help system.
                                                             (line   79)
* PYTHONDONTWRITEBYTECODE:               Interpreter Changes<2>.
                                                             (line   16)
* PYTHONDONTWRITEBYTECODE <1>:           New and Improved Modules<2>.
                                                             (line  626)
* PYTHONDONTWRITEBYTECODE <2>:           Library<23>.        (line   76)
* PYTHONDONTWRITEBYTECODE <3>:           Miscellaneous options.
                                                             (line   19)
* PYTHONDONTWRITEBYTECODE <4>:           sys --- System-specific parameters and functions.
                                                             (line  170)
* PYTHONDONTWRITEBYTECODE <5>:           How do I create a pyc file?.
                                                             (line   21)
* PYTHONDUMPREFS:                        Type Objects<3>.    (line  129)
* PYTHONFAULTHANDLER:                    faulthandler<3>.    (line   11)
* PYTHONFAULTHANDLER <1>:                Library<23>.        (line   74)
* PYTHONFAULTHANDLER <2>:                faulthandler --- Dump the Python traceback.
                                                             (line   12)
* PYTHONHASHSEED:                        Builtin functions and types.
                                                             (line   17)
* PYTHONHASHSEED <1>:                    Porting Python code.
                                                             (line    6)
* PYTHONHASHSEED <2>:                    Miscellaneous options.
                                                             (line   86)
* PYTHONHASHSEED <3>:                    Environment variables.
                                                             (line  104)
* PYTHONHASHSEED <4>:                    Basic customization.
                                                             (line  281)
* PYTHONHOME:                            Miscellaneous options.
                                                             (line   29)
* PYTHONHOME <1>:                        Environment variables.
                                                             (line   19)
* PYTHONHOME <2>:                        Environment variables.
                                                             (line   21)
* PYTHONHOME <3>:                        Environment variables.
                                                             (line   38)
* PYTHONHOME <4>:                        Finding modules.    (line   31)
* PYTHONHOME <5>:                        Finding modules.    (line   48)
* PYTHONHOME <6>:                        Finding modules.    (line   88)
* PYTHONHOME <7>:                        Embedding Python<2>.
                                                             (line   38)
* PYTHONHOME <8>:                        Embedding Python<2>.
                                                             (line   44)
* PYTHONHOME <9>:                        Process-wide parameters.
                                                             (line  267)
* PYTHONHOME <10>:                       Process-wide parameters.
                                                             (line  281)
* PYTHONHOME <11>:                       Modifying Python's Search Path.
                                                             (line   60)
* PYTHONHOME <12>:                       Modifying Python's Search Path.
                                                             (line   62)
* Pythonic:                              Glossary.           (line  931)
* PYTHONINSPECT:                         Other Changes and Fixes<2>.
                                                             (line   13)
* PYTHONINSPECT <1>:                     Miscellaneous options.
                                                             (line   39)
* PYTHONIOENCODING:                      Other Improvements. (line   75)
* PYTHONIOENCODING <1>:                  Interpreter Changes<2>.
                                                             (line   23)
* PYTHONIOENCODING <2>:                  sys --- System-specific parameters and functions.
                                                             (line 1192)
* PYTHONIOENCODING <3>:                  Process-wide parameters.
                                                             (line   14)
* PYTHONIOENCODING <4>:                  Process-wide parameters.
                                                             (line   18)
* PYTHONMALLOC:                          PYTHONMALLOC environment variable.
                                                             (line    6)
* PYTHONMALLOC <1>:                      Changes in the C API.
                                                             (line    9)
* PYTHONMALLOC <2>:                      Core and Builtins.  (line   60)
* PYTHONMALLOC <3>:                      Environment variables.
                                                             (line  236)
* PYTHONMALLOC <4>:                      Overview<2>.        (line   75)
* PYTHONMALLOC <5>:                      Customize Memory Allocators.
                                                             (line  127)
* PYTHONMALLOCSTATS:                     Core and Builtins.  (line   66)
* PYTHONMALLOCSTATS <1>:                 Overview<2>.        (line   78)
* PYTHONNOUSERSITE:                      PEP 370 Per-user site-packages Directory.
                                                             (line   30)
* PYTHONNOUSERSITE <1>:                  Module contents<3>. (line   15)
* PYTHONNOUSERSITE <2>:                  Module contents<3>. (line   74)
* PYTHONOPTIMIZE:                        Miscellaneous options.
                                                             (line   56)
* PYTHONPATH:                            Changes in 'python' Command Behavior.
                                                             (line    8)
* PYTHONPATH <1>:                        Changes in 'python' Command Behavior.
                                                             (line    9)
* PYTHONPATH <2>:                        The Module Search Path.
                                                             (line   15)
* PYTHONPATH <3>:                        Standard Modules.   (line   34)
* PYTHONPATH <4>:                        Standard Modules.   (line   35)
* PYTHONPATH <5>:                        Miscellaneous options.
                                                             (line   28)
* PYTHONPATH <6>:                        Environment variables.
                                                             (line   32)
* PYTHONPATH <7>:                        Environment variables.
                                                             (line   39)
* PYTHONPATH <8>:                        Environment variables.
                                                             (line   42)
* PYTHONPATH <9>:                        Excursus Setting environment variables.
                                                             (line   38)
* PYTHONPATH <10>:                       Finding modules.    (line   17)
* PYTHONPATH <11>:                       Finding modules.    (line   39)
* PYTHONPATH <12>:                       Finding modules.    (line   88)
* PYTHONPATH <13>:                       Configuration.      (line    6)
* PYTHONPATH <14>:                       Path entry finders. (line    6)
* PYTHONPATH <15>:                       Installing your CGI script on a Unix system.
                                                             (line   29)
* PYTHONPATH <16>:                       sys --- System-specific parameters and functions.
                                                             (line  838)
* PYTHONPATH <17>:                       sys --- System-specific parameters and functions.
                                                             (line  848)
* PYTHONPATH <18>:                       Building C and C++ Extensions.
                                                             (line    9)
* PYTHONPATH <19>:                       Embedding Python<2>.
                                                             (line   39)
* PYTHONPATH <20>:                       Embedding Python<2>.
                                                             (line   44)
* PYTHONPATH <21>:                       Modifying Python's Search Path.
                                                             (line   67)
* PYTHONPATH <22>:                       Modifying Python's Search Path.
                                                             (line   68)
* PYTHONSTARTUP:                         sys<2>.             (line   17)
* PYTHONSTARTUP <1>:                     sys<2>.             (line   21)
* PYTHONSTARTUP <2>:                     The Interactive Startup File.
                                                             (line    8)
* PYTHONSTARTUP <3>:                     Miscellaneous options.
                                                             (line   36)
* PYTHONSTARTUP <4>:                     Example.            (line   10)
* PYTHONSTARTUP <5>:                     Startup and code execution.
                                                             (line    7)
* PYTHONSTARTUP <6>:                     sys --- System-specific parameters and functions.
                                                             (line  737)
* PYTHONSTARTUP <7>:                     Readline configuration.
                                                             (line   12)
* PYTHONTRACEMALLOC:                     tracemalloc --- Trace memory allocations.
                                                             (line   21)
* PYTHONTRACEMALLOC <1>:                 tracemalloc --- Trace memory allocations.
                                                             (line   28)
* PYTHONTRACEMALLOC <2>:                 Functions<7>.       (line   68)
* PYTHONUNBUFFERED:                      Miscellaneous options.
                                                             (line  116)
* PYTHONUSERBASE:                        PEP 370 Per-user site-packages Directory.
                                                             (line   23)
* PYTHONUSERBASE <1>:                    Module contents<3>. (line   39)
* PYTHONUSERBASE <2>:                    Module contents<3>. (line   66)
* PYTHONVERBOSE:                         Miscellaneous options.
                                                             (line  124)
* PYTHONWARNINGS:                        Other Language Changes<5>.
                                                             (line  157)
* PYTHONWARNINGS <1>:                    Changes to the Handling of Deprecation Warnings.
                                                             (line   25)
* PYTHONWARNINGS <2>:                    Interpreter Changes.
                                                             (line    6)
* PYTHONWARNINGS <3>:                    Miscellaneous options.
                                                             (line  202)
* python_branch() (in module platform):  Cross Platform.     (line   82)
* python_build() (in module platform):   Cross Platform.     (line   72)
* python_compiler() (in module platform): Cross Platform.    (line   77)
* PYTHON_DOM:                            Module Contents<4>. (line   23)
* python_implementation() (in module platform): Cross Platform.
                                                             (line   86)
* python_revision() (in module platform): Cross Platform.    (line   91)
* python_version() (in module platform): Cross Platform.     (line   96)
* python_version_tuple() (in module platform): Cross Platform.
                                                             (line  103)
* PyThreadState:                         Thread State and the Global Interpreter Lock.
                                                             (line   23)
* PyThreadState <1>:                     Thread State and the Global Interpreter Lock.
                                                             (line   23)
* PyThreadState (C type):                High-level API.     (line   21)
* PyThreadState_Clear (C function):      Low-level API.      (line   36)
* PyThreadState_Delete (C function):     Low-level API.      (line   41)
* PyThreadState_Get (C function):        High-level API.     (line   88)
* PyThreadState_GetDict (C function):    Low-level API.      (line   47)
* PyThreadState_New (C function):        Low-level API.      (line   29)
* PyThreadState_Next (C function):       Advanced Debugger Support.
                                                             (line   28)
* PyThreadState_SetAsyncExc (C function): Low-level API.     (line   56)
* PyThreadState_Swap (C function):       High-level API.     (line   94)
* PyTime_Check (C function):             DateTime Objects<2>.
                                                             (line   36)
* PyTime_CheckExact (C function):        DateTime Objects<2>.
                                                             (line   41)
* PyTime_FromTime (C function):          DateTime Objects<2>.
                                                             (line   79)
* PyTrace_CALL (C variable):             Profiling and Tracing.
                                                             (line   58)
* PyTrace_C_CALL (C variable):           Profiling and Tracing.
                                                             (line   90)
* PyTrace_C_EXCEPTION (C variable):      Profiling and Tracing.
                                                             (line   95)
* PyTrace_C_RETURN (C variable):         Profiling and Tracing.
                                                             (line  100)
* PyTrace_EXCEPTION (C variable):        Profiling and Tracing.
                                                             (line   66)
* PyTrace_LINE (C variable):             Profiling and Tracing.
                                                             (line   78)
* PyTrace_RETURN (C variable):           Profiling and Tracing.
                                                             (line   84)
* PyTupleObject (C type):                Tuple Objects.      (line    6)
* PyTuple_Check (C function):            Tuple Objects.      (line   17)
* PyTuple_CheckExact (C function):       Tuple Objects.      (line   22)
* PyTuple_ClearFreeList (C function):    Tuple Objects.      (line   95)
* PyTuple_GetItem (C function):          Tuple Objects.      (line   48)
* PyTuple_GetSlice (C function):         Tuple Objects.      (line   57)
* PyTuple_GET_ITEM (C function):         Tuple Objects.      (line   53)
* PyTuple_GET_SIZE (C function):         Tuple Objects.      (line   43)
* PyTuple_New (C function):              Tuple Objects.      (line   27)
* PyTuple_Pack (C function):             Tuple Objects.      (line   31)
* PyTuple_SetItem (C function):          Tuple Objects.      (line   62)
* PyTuple_SetItem():                     Reference Count Details.
                                                             (line   26)
* PyTuple_SET_ITEM (C function):         Tuple Objects.      (line   71)
* PyTuple_Size (C function):             Tuple Objects.      (line   38)
* PyTuple_Type (C variable):             Tuple Objects.      (line   11)
* PyTypeObject (C type):                 Type Objects<2>.    (line    6)
* PyTypeObject.tp_alloc (C member):      Type Objects<3>.    (line  985)
* PyTypeObject.tp_allocs (C member):     Type Objects<3>.    (line 1164)
* PyTypeObject.tp_as_buffer (C member):  Type Objects<3>.    (line  455)
* PyTypeObject.tp_base (C member):       Type Objects<3>.    (line  846)
* PyTypeObject.tp_bases (C member):      Type Objects<3>.    (line 1082)
* PyTypeObject.tp_basicsize (C member):  Type Objects<3>.    (line  201)
* PyTypeObject.tp_cache (C member):      Type Objects<3>.    (line 1145)
* PyTypeObject.tp_call (C member):       Type Objects<3>.    (line  398)
* PyTypeObject.tp_clear (C member):      Type Objects<3>.    (line  621)
* PyTypeObject.tp_dealloc (C member):    Type Objects<3>.    (line  248)
* PyTypeObject.tp_descr_get (C member):  Type Objects<3>.    (line  875)
* PyTypeObject.tp_descr_set (C member):  Type Objects<3>.    (line  885)
* PyTypeObject.tp_dict (C member):       Type Objects<3>.    (line  857)
* PyTypeObject.tp_dictoffset (C member): Type Objects<3>.    (line  897)
* PyTypeObject.tp_doc (C member):        Type Objects<3>.    (line  570)
* PyTypeObject.tp_finalize (C member):   Type Objects<3>.    (line 1100)
* PyTypeObject.tp_flags (C member):      Type Objects<3>.    (line  464)
* PyTypeObject.tp_free (C member):       Type Objects<3>.    (line 1045)
* PyTypeObject.tp_frees (C member):      Type Objects<3>.    (line 1168)
* PyTypeObject.tp_getattr (C member):    Type Objects<3>.    (line  279)
* PyTypeObject.tp_getattro (C member):   Type Objects<3>.    (line  425)
* PyTypeObject.tp_getset (C member):     Type Objects<3>.    (line  820)
* PyTypeObject.tp_hash (C member):       Type Objects<3>.    (line  369)
* PyTypeObject.tp_init (C member):       Type Objects<3>.    (line  956)
* PyTypeObject.tp_is_gc (C member):      Type Objects<3>.    (line 1061)
* PyTypeObject.tp_itemsize (C member):   Type Objects<3>.    (line  201)
* PyTypeObject.tp_iter (C member):       Type Objects<3>.    (line  766)
* PyTypeObject.tp_iternext (C member):   Type Objects<3>.    (line  778)
* PyTypeObject.tp_maxalloc (C member):   Type Objects<3>.    (line 1172)
* PyTypeObject.tp_members (C member):    Type Objects<3>.    (line  807)
* PyTypeObject.tp_methods (C member):    Type Objects<3>.    (line  794)
* PyTypeObject.tp_mro (C member):        Type Objects<3>.    (line 1091)
* PyTypeObject.tp_name (C member):       Type Objects<3>.    (line  173)
* PyTypeObject.tp_new (C member):        Type Objects<3>.    (line 1014)
* PyTypeObject.tp_next (C member):       Type Objects<3>.    (line 1176)
* PyTypeObject.tp_print (C member):      Type Objects<3>.    (line  275)
* PyTypeObject.tp_repr (C member):       Type Objects<3>.    (line  323)
* PyTypeObject.tp_richcompare (C member): Type Objects<3>.   (line  684)
* PyTypeObject.tp_setattr (C member):    Type Objects<3>.    (line  295)
* PyTypeObject.tp_setattro (C member):   Type Objects<3>.    (line  439)
* PyTypeObject.tp_str (C member):        Type Objects<3>.    (line  406)
* PyTypeObject.tp_subclasses (C member): Type Objects<3>.    (line 1149)
* PyTypeObject.tp_traverse (C member):   Type Objects<3>.    (line  578)
* PyTypeObject.tp_weaklist (C member):   Type Objects<3>.    (line 1154)
* PyTypeObject.tp_weaklistoffset (C member): Type Objects<3>.
                                                             (line  732)
* PyType_Check (C function):             Type Objects<2>.    (line   15)
* PyType_CheckExact (C function):        Type Objects<2>.    (line   21)
* PyType_ClearCache (C function):        Type Objects<2>.    (line   26)
* PyType_FromSpec (C function):          Type Objects<2>.    (line   87)
* PyType_FromSpecWithBases (C function): Type Objects<2>.    (line   92)
* PyType_GenericAlloc (C function):      Type Objects<2>.    (line   65)
* PyType_GenericNew (C function):        Type Objects<2>.    (line   73)
* PyType_GetFlags (C function):          Type Objects<2>.    (line   30)
* PyType_GetSlot (C function):           Type Objects<2>.    (line  103)
* PyType_HasFeature (C function):        Type Objects<2>.    (line   46)
* PyType_IsSubtype (C function):         Type Objects<2>.    (line   56)
* PyType_IS_GC (C function):             Type Objects<2>.    (line   51)
* PyType_Modified (C function):          Type Objects<2>.    (line   40)
* PyType_Ready (C function):             Type Objects<2>.    (line   80)
* PyType_Type (C variable):              Type Objects<2>.    (line   10)
* PyTZInfo_Check (C function):           DateTime Objects<2>.
                                                             (line   56)
* PyTZInfo_CheckExact (C function):      DateTime Objects<2>.
                                                             (line   61)
* PyUnicodeDecodeError_Create (C function): Unicode Exception Objects.
                                                             (line    9)
* PyUnicodeDecodeError_GetEncoding (C function): Unicode Exception Objects.
                                                             (line   37)
* PyUnicodeDecodeError_GetEnd (C function): Unicode Exception Objects.
                                                             (line   78)
* PyUnicodeDecodeError_GetObject (C function): Unicode Exception Objects.
                                                             (line   44)
* PyUnicodeDecodeError_GetReason (C function): Unicode Exception Objects.
                                                             (line  105)
* PyUnicodeDecodeError_GetStart (C function): Unicode Exception Objects.
                                                             (line   51)
* PyUnicodeDecodeError_SetEnd (C function): Unicode Exception Objects.
                                                             (line   92)
* PyUnicodeDecodeError_SetReason (C function): Unicode Exception Objects.
                                                             (line  112)
* PyUnicodeDecodeError_SetStart (C function): Unicode Exception Objects.
                                                             (line   65)
* PyUnicodeEncodeError_Create (C function): Unicode Exception Objects.
                                                             (line   18)
* PyUnicodeEncodeError_GetEncoding (C function): Unicode Exception Objects.
                                                             (line   37)
* PyUnicodeEncodeError_GetEnd (C function): Unicode Exception Objects.
                                                             (line   78)
* PyUnicodeEncodeError_GetObject (C function): Unicode Exception Objects.
                                                             (line   44)
* PyUnicodeEncodeError_GetReason (C function): Unicode Exception Objects.
                                                             (line  105)
* PyUnicodeEncodeError_GetStart (C function): Unicode Exception Objects.
                                                             (line   51)
* PyUnicodeEncodeError_SetEnd (C function): Unicode Exception Objects.
                                                             (line   92)
* PyUnicodeEncodeError_SetReason (C function): Unicode Exception Objects.
                                                             (line  112)
* PyUnicodeEncodeError_SetStart (C function): Unicode Exception Objects.
                                                             (line   65)
* PyUnicodeObject (C type):              Unicode Type.       (line   29)
* PyUnicodeTranslateError_Create (C function): Unicode Exception Objects.
                                                             (line   27)
* PyUnicodeTranslateError_GetEnd (C function): Unicode Exception Objects.
                                                             (line   78)
* PyUnicodeTranslateError_GetObject (C function): Unicode Exception Objects.
                                                             (line   44)
* PyUnicodeTranslateError_GetReason (C function): Unicode Exception Objects.
                                                             (line  105)
* PyUnicodeTranslateError_GetStart (C function): Unicode Exception Objects.
                                                             (line   51)
* PyUnicodeTranslateError_SetEnd (C function): Unicode Exception Objects.
                                                             (line   92)
* PyUnicodeTranslateError_SetReason (C function): Unicode Exception Objects.
                                                             (line  112)
* PyUnicodeTranslateError_SetStart (C function): Unicode Exception Objects.
                                                             (line   65)
* PyUnicode_1BYTE_DATA (C function):     Unicode Type.       (line   77)
* PyUnicode_1BYTE_KIND (C macro):        Unicode Type.       (line   90)
* PyUnicode_2BYTE_DATA (C function):     Unicode Type.       (line   77)
* PyUnicode_2BYTE_KIND (C macro):        Unicode Type.       (line   90)
* PyUnicode_4BYTE_DATA (C function):     Unicode Type.       (line   77)
* PyUnicode_4BYTE_KIND (C macro):        Unicode Type.       (line   90)
* PyUnicode_AsASCIIString (C function):  ASCII Codecs.       (line   16)
* PyUnicode_AsCharmapString (C function): Character Map Codecs.
                                                             (line   40)
* PyUnicode_AsEncodedString (C function): Generic Codecs.    (line   17)
* PyUnicode_AsLatin1String (C function): Latin-1 Codecs.     (line   17)
* PyUnicode_AsMBCSString (C function):   MBCS codecs for Windows.
                                                             (line   29)
* PyUnicode_AsRawUnicodeEscapeString (C function): Raw-Unicode-Escape Codecs.
                                                             (line   14)
* PyUnicode_AsUCS4 (C function):         Creating and accessing Unicode strings.
                                                             (line  271)
* PyUnicode_AsUCS4Copy (C function):     Creating and accessing Unicode strings.
                                                             (line  281)
* PyUnicode_AsUnicode (C function):      Deprecated Py_UNICODE APIs.
                                                             (line   33)
* PyUnicode_AsUnicodeAndSize (C function): Deprecated Py_UNICODE APIs.
                                                             (line   55)
* PyUnicode_AsUnicodeCopy (C function):  Deprecated Py_UNICODE APIs.
                                                             (line   66)
* PyUnicode_AsUnicodeEscapeString (C function): Unicode-Escape Codecs.
                                                             (line   15)
* PyUnicode_AsUTF16String (C function):  UTF-16 Codecs.      (line   50)
* PyUnicode_AsUTF32String (C function):  UTF-32 Codecs.      (line   50)
* PyUnicode_AsUTF8 (C function):         UTF-8 Codecs.       (line   50)
* PyUnicode_AsUTF8AndSize (C function):  UTF-8 Codecs.       (line   30)
* PyUnicode_AsUTF8String (C function):   UTF-8 Codecs.       (line   25)
* PyUnicode_AsWideChar (C function):     wchar_t Support.    (line   16)
* PyUnicode_AsWideCharString (C function): wchar_t Support.  (line   30)
* PyUnicode_AS_DATA (C function):        Unicode Type.       (line  180)
* PyUnicode_AS_UNICODE (C function):     Unicode Type.       (line  180)
* PyUnicode_Check (C function):          Unicode Type.       (line   48)
* PyUnicode_CheckExact (C function):     Unicode Type.       (line   53)
* PyUnicode_ClearFreeList (C function):  Unicode Type.       (line  156)
* PyUnicode_Compare (C function):        Methods and Slot Functions.
                                                             (line  100)
* PyUnicode_CompareWithASCIIString (C function): Methods and Slot Functions.
                                                             (line  105)
* PyUnicode_Concat (C function):         Methods and Slot Functions.
                                                             (line   12)
* PyUnicode_Contains (C function):       Methods and Slot Functions.
                                                             (line  137)
* PyUnicode_CopyCharacters (C function): Creating and accessing Unicode strings.
                                                             (line  210)
* PyUnicode_Count (C function):          Methods and Slot Functions.
                                                             (line   87)
* PyUnicode_DATA (C function):           Unicode Type.       (line  108)
* PyUnicode_Decode (C function):         Generic Codecs.     (line    8)
* PyUnicode_DecodeASCII (C function):    ASCII Codecs.       (line    9)
* PyUnicode_DecodeCharmap (C function):  Character Map Codecs.
                                                             (line   29)
* PyUnicode_DecodeFSDefault (C function): File System Encoding.
                                                             (line   58)
* PyUnicode_DecodeFSDefaultAndSize (C function): File System Encoding.
                                                             (line   37)
* PyUnicode_DecodeLatin1 (C function):   Latin-1 Codecs.     (line   10)
* PyUnicode_DecodeLocale (C function):   Locale Encoding.    (line   29)
* PyUnicode_DecodeLocaleAndSize (C function): Locale Encoding.
                                                             (line    9)
* PyUnicode_DecodeMBCS (C function):     MBCS codecs for Windows.
                                                             (line   12)
* PyUnicode_DecodeMBCSStateful (C function): MBCS codecs for Windows.
                                                             (line   19)
* PyUnicode_DecodeRawUnicodeEscape (C function): Raw-Unicode-Escape Codecs.
                                                             (line    8)
* PyUnicode_DecodeUnicodeEscape (C function): Unicode-Escape Codecs.
                                                             (line    8)
* PyUnicode_DecodeUTF16 (C function):    UTF-16 Codecs.      (line    8)
* PyUnicode_DecodeUTF16Stateful (C function): UTF-16 Codecs. (line   37)
* PyUnicode_DecodeUTF32 (C function):    UTF-32 Codecs.      (line    8)
* PyUnicode_DecodeUTF32Stateful (C function): UTF-32 Codecs. (line   36)
* PyUnicode_DecodeUTF7 (C function):     UTF-7 Codecs.       (line    8)
* PyUnicode_DecodeUTF7Stateful (C function): UTF-7 Codecs.   (line   16)
* PyUnicode_DecodeUTF8 (C function):     UTF-8 Codecs.       (line    8)
* PyUnicode_DecodeUTF8Stateful (C function): UTF-8 Codecs.   (line   15)
* PyUnicode_Encode (C function):         Generic Codecs.     (line   26)
* PyUnicode_EncodeASCII (C function):    ASCII Codecs.       (line   21)
* PyUnicode_EncodeCharmap (C function):  Character Map Codecs.
                                                             (line   69)
* PyUnicode_EncodeCodePage (C function): MBCS codecs for Windows.
                                                             (line   34)
* PyUnicode_EncodeFSDefault (C function): File System Encoding.
                                                             (line   72)
* PyUnicode_EncodeLatin1 (C function):   Latin-1 Codecs.     (line   23)
* PyUnicode_EncodeLocale (C function):   Locale Encoding.    (line   37)
* PyUnicode_EncodeMBCS (C function):     MBCS codecs for Windows.
                                                             (line   44)
* PyUnicode_EncodeRawUnicodeEscape (C function): Raw-Unicode-Escape Codecs.
                                                             (line   21)
* PyUnicode_EncodeUnicodeEscape (C function): Unicode-Escape Codecs.
                                                             (line   22)
* PyUnicode_EncodeUTF16 (C function):    UTF-16 Codecs.      (line   56)
* PyUnicode_EncodeUTF32 (C function):    UTF-32 Codecs.      (line   57)
* PyUnicode_EncodeUTF7 (C function):     UTF-7 Codecs.       (line   26)
* PyUnicode_EncodeUTF8 (C function):     UTF-8 Codecs.       (line   57)
* PyUnicode_Fill (C function):           Creating and accessing Unicode strings.
                                                             (line  222)
* PyUnicode_Find (C function):           Methods and Slot Functions.
                                                             (line   64)
* PyUnicode_FindChar (C function):       Methods and Slot Functions.
                                                             (line   75)
* PyUnicode_Format (C function):         Methods and Slot Functions.
                                                             (line  132)
* PyUnicode_FromEncodedObject (C function): Creating and accessing Unicode strings.
                                                             (line  187)
* PyUnicode_FromFormat (C function):     Creating and accessing Unicode strings.
                                                             (line   53)
* PyUnicode_FromFormatV (C function):    Creating and accessing Unicode strings.
                                                             (line  180)
* PyUnicode_FromKindAndData (C function): Creating and accessing Unicode strings.
                                                             (line   22)
* PyUnicode_FromObject (C function):     Deprecated Py_UNICODE APIs.
                                                             (line   89)
* PyUnicode_FromString (C function):     Creating and accessing Unicode strings.
                                                             (line   48)
* PyUnicode_FromString():                Dictionary Objects. (line   63)
* PyUnicode_FromStringAndSize (C function): Creating and accessing Unicode strings.
                                                             (line   34)
* PyUnicode_FromUnicode (C function):    Deprecated Py_UNICODE APIs.
                                                             (line   13)
* PyUnicode_FromWideChar (C function):   wchar_t Support.    (line    8)
* PyUnicode_FSConverter (C function):    File System Encoding.
                                                             (line   13)
* PyUnicode_FSDecoder (C function):      File System Encoding.
                                                             (line   27)
* PyUnicode_GetLength (C function):      Creating and accessing Unicode strings.
                                                             (line  204)
* PyUnicode_GetSize (C function):        Deprecated Py_UNICODE APIs.
                                                             (line   81)
* PyUnicode_GET_DATA_SIZE (C function):  Unicode Type.       (line  170)
* PyUnicode_GET_LENGTH (C function):     Unicode Type.       (line   69)
* PyUnicode_GET_SIZE (C function):       Unicode Type.       (line  160)
* PyUnicode_InternFromString (C function): Methods and Slot Functions.
                                                             (line  159)
* PyUnicode_InternInPlace (C function):  Methods and Slot Functions.
                                                             (line  146)
* PyUnicode_Join (C function):           Methods and Slot Functions.
                                                             (line   51)
* PyUnicode_KIND (C function):           Unicode Type.       (line   99)
* PyUnicode_MAX_CHAR_VALUE (C function): Unicode Type.       (line  147)
* PyUnicode_New (C function):            Creating and accessing Unicode strings.
                                                             (line    9)
* PyUnicode_READ (C function):           Unicode Type.       (line  128)
* PyUnicode_ReadChar (C function):       Creating and accessing Unicode strings.
                                                             (line  251)
* PyUnicode_READY (C function):          Unicode Type.       (line   58)
* PyUnicode_READ_CHAR (C function):      Unicode Type.       (line  138)
* PyUnicode_Replace (C function):        Methods and Slot Functions.
                                                             (line   93)
* PyUnicode_RichCompare (C function):    Methods and Slot Functions.
                                                             (line  113)
* PyUnicode_Split (C function):          Methods and Slot Functions.
                                                             (line   17)
* PyUnicode_Splitlines (C function):     Methods and Slot Functions.
                                                             (line   27)
* PyUnicode_Substring (C function):      Creating and accessing Unicode strings.
                                                             (line  261)
* PyUnicode_Tailmatch (C function):      Methods and Slot Functions.
                                                             (line   56)
* PyUnicode_TransformDecimalToASCII (C function): Deprecated Py_UNICODE APIs.
                                                             (line   47)
* PyUnicode_Translate (C function):      Methods and Slot Functions.
                                                             (line   34)
* PyUnicode_TranslateCharmap (C function): Character Map Codecs.
                                                             (line   50)
* PyUnicode_Type (C variable):           Unicode Type.       (line   40)
* PyUnicode_WCHAR_KIND (C macro):        Unicode Type.       (line   90)
* PyUnicode_WRITE (C function):          Unicode Type.       (line  115)
* PyUnicode_WriteChar (C function):      Creating and accessing Unicode strings.
                                                             (line  237)
* PyVarObject (C type):                  Common Object Structures.
                                                             (line   28)
* PyVarObject.ob_size (C member):        Type Objects<3>.    (line  165)
* PyVarObject_HEAD_INIT (C macro):       Common Object Structures.
                                                             (line   86)
* PyWeakref_Check (C function):          Weak Reference Objects<2>.
                                                             (line   11)
* PyWeakref_CheckProxy (C function):     Weak Reference Objects<2>.
                                                             (line   19)
* PyWeakref_CheckRef (C function):       Weak Reference Objects<2>.
                                                             (line   15)
* PyWeakref_GetObject (C function):      Weak Reference Objects<2>.
                                                             (line   50)
* PyWeakref_GET_OBJECT (C function):     Weak Reference Objects<2>.
                                                             (line   60)
* PyWeakref_NewProxy (C function):       Weak Reference Objects<2>.
                                                             (line   36)
* PyWeakref_NewRef (C function):         Weak Reference Objects<2>.
                                                             (line   23)
* PyWrapper_New (C function):            Descriptor Objects. (line   43)
* PyZipFile (class in zipfile):          PyZipFile Objects.  (line   10)
* Py_AddPendingCall (C function):        Asynchronous Notifications.
                                                             (line   10)
* Py_AddPendingCall():                   Asynchronous Notifications.
                                                             (line   12)
* Py_AtExit (C function):                Process Control.    (line   24)
* Py_BEGIN_ALLOW_THREADS:                Releasing the GIL from extension code.
                                                             (line   21)
* Py_BEGIN_ALLOW_THREADS (C macro):      High-level API.     (line  169)
* Py_BLOCK_THREADS (C macro):            High-level API.     (line  185)
* Py_buffer (C type):                    Buffer structure.   (line   25)
* Py_buffer.buf (C member):              Buffer structure.   (line   27)
* Py_buffer.format (C member):           Buffer structure.   (line   87)
* Py_buffer.internal (C member):         Buffer structure.   (line  154)
* Py_buffer.itemsize (C member):         Buffer structure.   (line   67)
* Py_buffer.len (C member):              Buffer structure.   (line   50)
* Py_buffer.ndim (C member):             Buffer structure.   (line   96)
* Py_buffer.obj (C member):              Buffer structure.   (line   38)
* Py_buffer.readonly (C member):         Buffer structure.   (line   62)
* Py_buffer.shape (C member):            Buffer structure.   (line  109)
* Py_buffer.strides (C member):          Buffer structure.   (line  122)
* Py_buffer.suboffsets (C member):       Buffer structure.   (line  135)
* Py_BuildValue (C function):            Building values.    (line    6)
* Py_CLEAR (C function):                 Reference Counting. (line   47)
* py_compile (module):                   py_compile --- Compile Python source files.
                                                             (line    6)
* PY_COMPILED (in module imp):           imp --- Access the import internals.
                                                             (line  312)
* Py_CompileString (C function):         The Very High Level Layer.
                                                             (line  273)
* Py_CompileString():                    The Very High Level Layer.
                                                             (line  368)
* Py_CompileString() <1>:                The Very High Level Layer.
                                                             (line  373)
* Py_CompileString() <2>:                The Very High Level Layer.
                                                             (line  380)
* Py_CompileStringExFlags (C function):  The Very High Level Layer.
                                                             (line  308)
* Py_CompileStringFlags (C function):    The Very High Level Layer.
                                                             (line  279)
* Py_CompileStringObject (C function):   The Very High Level Layer.
                                                             (line  286)
* Py_complex (C type):                   Complex Numbers as C Structures.
                                                             (line   10)
* Py_DecodeLocale (C function):          Operating System Utilities.
                                                             (line   45)
* Py_DECREF (C function):                Reference Counting. (line   20)
* Py_DECREF():                           Reference Counts<2>.
                                                             (line   17)
* Py_EncodeLocale (C function):          Operating System Utilities.
                                                             (line   76)
* Py_EndInterpreter (C function):        Sub-interpreter support.
                                                             (line   50)
* Py_END_ALLOW_THREADS:                  Releasing the GIL from extension code.
                                                             (line   21)
* Py_END_ALLOW_THREADS (C macro):        High-level API.     (line  177)
* Py_EnterRecursiveCall (C function):    Recursion Control.  (line   11)
* Py_eval_input (C variable):            The Very High Level Layer.
                                                             (line  366)
* Py_Exit (C function):                  Process Control.    (line   15)
* Py_False (C variable):                 Boolean Objects.    (line   15)
* Py_FatalError (C function):            Process Control.    (line    6)
* Py_FatalError():                       Process-wide parameters.
                                                             (line  214)
* Py_FdIsInteractive (C function):       Operating System Utilities.
                                                             (line    6)
* Py_file_input (C variable):            The Very High Level Layer.
                                                             (line  371)
* Py_Finalize (C function):              Initializing and finalizing the interpreter.
                                                             (line   70)
* Py_FinalizeEx (C function):            Initializing and finalizing the interpreter.
                                                             (line   34)
* Py_FinalizeEx():                       Process Control.    (line   17)
* Py_FinalizeEx() <1>:                   Process Control.    (line   26)
* Py_FinalizeEx() <2>:                   Initializing and finalizing the interpreter.
                                                             (line    8)
* Py_FinalizeEx() <3>:                   Sub-interpreter support.
                                                             (line   38)
* Py_FinalizeEx() <4>:                   Sub-interpreter support.
                                                             (line   52)
* PY_FROZEN (in module imp):             imp --- Access the import internals.
                                                             (line  336)
* Py_GetBuildInfo (C function):          Process-wide parameters.
                                                             (line  200)
* Py_GetCompiler (C function):           Process-wide parameters.
                                                             (line  189)
* Py_GetCopyright (C function):          Process-wide parameters.
                                                             (line  178)
* Py_GetExecPrefix (C function):         Process-wide parameters.
                                                             (line   71)
* Py_GetExecPrefix():                    Embedding Python<2>.
                                                             (line   42)
* Py_GetPath (C function):               Process-wide parameters.
                                                             (line  118)
* Py_GetPath():                          Embedding Python<2>.
                                                             (line   42)
* Py_GetPath() <1>:                      Process-wide parameters.
                                                             (line   36)
* Py_GetPath() <2>:                      Process-wide parameters.
                                                             (line  133)
* Py_GetPlatform (C function):           Process-wide parameters.
                                                             (line  167)
* Py_GetPrefix (C function):             Process-wide parameters.
                                                             (line   57)
* Py_GetPrefix():                        Embedding Python<2>.
                                                             (line   42)
* Py_GetProgramFullPath (C function):    Process-wide parameters.
                                                             (line  109)
* Py_GetProgramFullPath():               Embedding Python<2>.
                                                             (line   42)
* Py_GetProgramName (C function):        Process-wide parameters.
                                                             (line   51)
* Py_GetPythonHome (C function):         Process-wide parameters.
                                                             (line  278)
* Py_GetVersion (C function):            Process-wide parameters.
                                                             (line  154)
* Py_INCREF (C function):                Reference Counting. (line    9)
* Py_INCREF():                           Reference Counts<2>.
                                                             (line   17)
* Py_Initialize (C function):            Initializing and finalizing the interpreter.
                                                             (line    6)
* Py_Initialize():                       Embedding Python<2>.
                                                             (line   12)
* Py_Initialize() <1>:                   Process-wide parameters.
                                                             (line    9)
* Py_Initialize() <2>:                   Process-wide parameters.
                                                             (line   36)
* Py_Initialize() <3>:                   Sub-interpreter support.
                                                             (line   38)
* Py_InitializeEx (C function):          Initializing and finalizing the interpreter.
                                                             (line   21)
* Py_IsInitialized (C function):         Initializing and finalizing the interpreter.
                                                             (line   27)
* Py_IsInitialized():                    Embedding Python<2>.
                                                             (line   51)
* Py_LeaveRecursiveCall (C function):    Recursion Control.  (line   29)
* Py_Main (C function):                  The Very High Level Layer.
                                                             (line   24)
* Py_mod_create (C variable):            Multi-phase initialization.
                                                             (line   61)
* Py_mod_exec (C variable):              Multi-phase initialization.
                                                             (line   96)
* Py_NewInterpreter (C function):        Sub-interpreter support.
                                                             (line   13)
* Py_None (C variable):                  The None Object.    (line   11)
* Py_NotImplemented (C variable):        Object Protocol.    (line    6)
* py_object (class in ctypes):           Fundamental data types<2>.
                                                             (line  213)
* Py_PRINT_RAW:                          File Objects.       (line   58)
* Py_REFCNT (C macro):                   Common Object Structures.
                                                             (line   64)
* Py_ReprEnter (C function):             Recursion Control.  (line   41)
* Py_ReprLeave (C function):             Recursion Control.  (line   59)
* Py_RETURN_FALSE (C macro):             Boolean Objects.    (line   27)
* Py_RETURN_NONE (C macro):              The None Object.    (line   17)
* Py_RETURN_NOTIMPLEMENTED (C macro):    Object Protocol.    (line   11)
* Py_RETURN_TRUE (C macro):              Boolean Objects.    (line   32)
* Py_SetPath (C function):               Process-wide parameters.
                                                             (line  131)
* Py_SetPath():                          Process-wide parameters.
                                                             (line  120)
* Py_SetProgramName (C function):        Process-wide parameters.
                                                             (line   34)
* Py_SetProgramName():                   Embedding Python<2>.
                                                             (line   42)
* Py_SetProgramName() <1>:               Initializing and finalizing the interpreter.
                                                             (line    8)
* Py_SetProgramName() <2>:               Process-wide parameters.
                                                             (line   53)
* Py_SetProgramName() <3>:               Process-wide parameters.
                                                             (line  111)
* Py_SetPythonHome (C function):         Process-wide parameters.
                                                             (line  264)
* Py_SetStandardStreamEncoding (C function): Process-wide parameters.
                                                             (line    6)
* Py_single_input (C variable):          The Very High Level Layer.
                                                             (line  378)
* Py_SIZE (C macro):                     Common Object Structures.
                                                             (line   71)
* PY_SOURCE (in module imp):             imp --- Access the import internals.
                                                             (line  306)
* PY_SSIZE_T_MAX:                        Integer Objects.    (line  159)
* Py_TPFLAGS_BASETYPE (built-in variable): Type Objects<3>.  (line  504)
* Py_TPFLAGS_BASE_EXC_SUBCLASS (built-in variable): Type Objects<3>.
                                                             (line  550)
* Py_TPFLAGS_BYTES_SUBCLASS (built-in variable): Type Objects<3>.
                                                             (line  544)
* Py_TPFLAGS_DEFAULT (built-in variable): Type Objects<3>.   (line  530)
* Py_TPFLAGS_DICT_SUBCLASS (built-in variable): Type Objects<3>.
                                                             (line  548)
* Py_TPFLAGS_HAVE_FINALIZE (built-in variable): Type Objects<3>.
                                                             (line  563)
* Py_TPFLAGS_HAVE_GC (built-in variable): Type Objects<3>.   (line  520)
* Py_TPFLAGS_HEAPTYPE (built-in variable): Type Objects<3>.  (line  494)
* Py_TPFLAGS_LIST_SUBCLASS (built-in variable): Type Objects<3>.
                                                             (line  540)
* Py_TPFLAGS_LONG_SUBCLASS (built-in variable): Type Objects<3>.
                                                             (line  538)
* Py_TPFLAGS_READY (built-in variable):  Type Objects<3>.    (line  510)
* Py_TPFLAGS_READYING (built-in variable): Type Objects<3>.  (line  515)
* Py_TPFLAGS_TUPLE_SUBCLASS (built-in variable): Type Objects<3>.
                                                             (line  542)
* Py_TPFLAGS_TYPE_SUBCLASS (built-in variable): Type Objects<3>.
                                                             (line  552)
* Py_TPFLAGS_UNICODE_SUBCLASS (built-in variable): Type Objects<3>.
                                                             (line  546)
* Py_tracefunc (C type):                 Profiling and Tracing.
                                                             (line   18)
* Py_True (C variable):                  Boolean Objects.    (line   21)
* Py_TYPE (C macro):                     Common Object Structures.
                                                             (line   57)
* Py_UCS1 (C type):                      Unicode Type.       (line    9)
* Py_UCS2 (C type):                      Unicode Type.       (line    9)
* Py_UCS4 (C type):                      Unicode Type.       (line    9)
* Py_UCS4_strcat (C function):           UCS4 Support.       (line    8)
* Py_UCS4_strchr (C function):           UCS4 Support.       (line    8)
* Py_UCS4_strcmp (C function):           UCS4 Support.       (line    8)
* Py_UCS4_strcpy (C function):           UCS4 Support.       (line    8)
* Py_UCS4_strlen (C function):           UCS4 Support.       (line    8)
* Py_UCS4_strncmp (C function):          UCS4 Support.       (line    8)
* Py_UCS4_strncpy (C function):          UCS4 Support.       (line    8)
* Py_UCS4_strrchr (C function):          UCS4 Support.       (line    8)
* Py_UNBLOCK_THREADS (C macro):          High-level API.     (line  192)
* Py_UNICODE (C type):                   Unicode Type.       (line   20)
* Py_UNICODE_ISALNUM (C function):       Unicode Character Properties.
                                                             (line   46)
* Py_UNICODE_ISALPHA (C function):       Unicode Character Properties.
                                                             (line   42)
* Py_UNICODE_ISDECIMAL (C function):     Unicode Character Properties.
                                                             (line   30)
* Py_UNICODE_ISDIGIT (C function):       Unicode Character Properties.
                                                             (line   34)
* Py_UNICODE_ISLINEBREAK (C function):   Unicode Character Properties.
                                                             (line   26)
* Py_UNICODE_ISLOWER (C function):       Unicode Character Properties.
                                                             (line   14)
* Py_UNICODE_ISNUMERIC (C function):     Unicode Character Properties.
                                                             (line   38)
* Py_UNICODE_ISPRINTABLE (C function):   Unicode Character Properties.
                                                             (line   51)
* Py_UNICODE_ISSPACE (C function):       Unicode Character Properties.
                                                             (line   10)
* Py_UNICODE_ISTITLE (C function):       Unicode Character Properties.
                                                             (line   22)
* Py_UNICODE_ISUPPER (C function):       Unicode Character Properties.
                                                             (line   18)
* Py_UNICODE_IS_HIGH_SURROGATE (C macro): Unicode Character Properties.
                                                             (line  108)
* Py_UNICODE_IS_LOW_SURROGATE (C macro): Unicode Character Properties.
                                                             (line  112)
* Py_UNICODE_IS_SURROGATE (C macro):     Unicode Character Properties.
                                                             (line  104)
* Py_UNICODE_JOIN_SURROGATES (C macro):  Unicode Character Properties.
                                                             (line  116)
* Py_UNICODE_TODECIMAL (C function):     Unicode Character Properties.
                                                             (line   85)
* Py_UNICODE_TODIGIT (C function):       Unicode Character Properties.
                                                             (line   91)
* Py_UNICODE_TOLOWER (C function):       Unicode Character Properties.
                                                             (line   64)
* Py_UNICODE_TONUMERIC (C function):     Unicode Character Properties.
                                                             (line   97)
* Py_UNICODE_TOTITLE (C function):       Unicode Character Properties.
                                                             (line   78)
* Py_UNICODE_TOUPPER (C function):       Unicode Character Properties.
                                                             (line   71)
* Py_VaBuildValue (C function):          Building values.    (line  204)
* Py_VISIT (C function):                 Supporting Cyclic Garbage Collection.
                                                             (line  123)
* Py_XDECREF (C function):               Reference Counting. (line   40)
* Py_XDECREF():                          Exceptions<13>.     (line  123)
* Py_XINCREF (C function):               Reference Counting. (line   15)
* P_ALL (in module os):                  Process Management. (line  525)
* P_DETACH (in module os):               Process Management. (line  395)
* P_NOWAIT (in module os):               Process Management. (line  375)
* P_NOWAITO (in module os):              Process Management. (line  375)
* P_OVERLAY (in module os):              Process Management. (line  395)
* P_PGID (in module os):                 Process Management. (line  525)
* P_PID (in module os):                  Process Management. (line  525)
* P_WAIT (in module os):                 Process Management. (line  385)
* qiflush() (in module curses):          Functions<2>.       (line  377)
* QName (class in xml.etree.ElementTree): QName Objects.     (line    6)
* qsize() (asyncio.Queue method):        Queue.              (line   91)
* qsize() (multiprocessing.Queue method): Pipes and Queues.  (line   98)
* qsize() (queue.Queue method):          Queue Objects.      (line    9)
* qualified name:                        Glossary.           (line  950)
* quantize() (decimal.Context method):   Context objects.    (line  455)
* quantize() (decimal.Decimal method):   Decimal objects.    (line  458)
* QueryInfoKey() (in module winreg):     Functions<9>.       (line  282)
* QueryReflectionKey() (in module winreg): Functions<9>.     (line  455)
* QueryValue() (in module winreg):       Functions<9>.       (line  308)
* QueryValueEx() (in module winreg):     Functions<9>.       (line  325)
* Queue (class in asyncio):              Queue.              (line    6)
* Queue (class in multiprocessing):      Pipes and Queues.   (line   84)
* Queue (class in queue):                queue --- A synchronized queue class.
                                                             (line   27)
* queue (module):                        queue --- A synchronized queue class.
                                                             (line    6)
* queue (sched.scheduler attribute):     Scheduler Objects.  (line   73)
* Queue() (multiprocessing.managers.SyncManager method): Managers.
                                                             (line  179)
* QueueEmpty:                            Exceptions<8>.      (line    6)
* QueueFull:                             Exceptions<8>.      (line   11)
* QueueHandler (class in logging.handlers): QueueHandler.    (line   21)
* QueueListener (class in logging.handlers): QueueListener.  (line   25)
* quick_ratio() (difflib.SequenceMatcher method): SequenceMatcher Objects.
                                                             (line  193)
* quit (built-in variable):              Constants added by the site module.
                                                             (line   11)
* quit (pdb command):                    Debugger Commands.  (line  330)
* quit() (ftplib.FTP method):            FTP Objects.        (line  228)
* quit() (nntplib.NNTP method):          Methods<3>.         (line   22)
* quit() (poplib.POP3 method):           POP3 Objects.       (line   82)
* quit() (smtplib.SMTP method):          SMTP Objects.       (line  335)
* quopri (module):                       quopri --- Encode and decode MIME quoted-printable data.
                                                             (line    6)
* quote() (in module email.utils):       email utils Miscellaneous utilities.
                                                             (line    9)
* quote() (in module shlex):             shlex --- Simple lexical analysis.
                                                             (line   30)
* quote() (in module urllib.parse):      URL Quoting.        (line   13)
* quoteattr() (in module xml.sax.saxutils): xml sax saxutils --- SAX Utilities.
                                                             (line   30)
* quotechar (csv.Dialect attribute):     Dialects and Formatting Parameters.
                                                             (line   52)
* quoted-printable; encoding:            quopri --- Encode and decode MIME quoted-printable data.
                                                             (line    6)
* quotes (shlex.shlex attribute):        shlex Objects.      (line  108)
* QUOTE_ALL (in module csv):             Module Contents<3>. (line  226)
* quote_from_bytes() (in module urllib.parse): URL Quoting.  (line   48)
* QUOTE_MINIMAL (in module csv):         Module Contents<3>. (line  230)
* QUOTE_NONE (in module csv):            Module Contents<3>. (line  244)
* QUOTE_NONNUMERIC (in module csv):      Module Contents<3>. (line  236)
* quote_plus() (in module urllib.parse): URL Quoting.        (line   37)
* quoting (csv.Dialect attribute):       Dialects and Formatting Parameters.
                                                             (line   58)
* radians() (in module math):            Angular conversion. (line   10)
* radians() (in module turtle):          Settings for measurement.
                                                             (line   28)
* RadioButtonGroup (class in msilib):    GUI classes.        (line   29)
* radiogroup() (msilib.Dialog method):   GUI classes.        (line   73)
* radix() (decimal.Context method):      Context objects.    (line  460)
* radix() (decimal.Decimal method):      Decimal objects.    (line  486)
* RADIXCHAR (in module locale):          locale --- Internationalization services.
                                                             (line  220)
* raise (2to3 fixer):                    Fixers.             (line  267)
* raise an exception:                    Exceptions<2>.      (line    6)
* raise_on_defect (email.policy.Policy attribute): email policy Policy Objects.
                                                             (line  159)
* RAISE_VARARGS (opcode):                Python Bytecode Instructions.
                                                             (line  593)
* raising; exception:                    The raise statement.
                                                             (line    6)
* randbelow() (in module secrets):       Random numbers.     (line   19)
* randbits() (in module secrets):        Random numbers.     (line   23)
* randint() (in module random):          random --- Generate pseudo-random numbers.
                                                             (line  113)
* random (module):                       random --- Generate pseudo-random numbers.
                                                             (line    6)
* random() (in module random):           random --- Generate pseudo-random numbers.
                                                             (line  165)
* randrange() (in module random):        random --- Generate pseudo-random numbers.
                                                             (line   96)
* RAND_add() (in module ssl):            Random generation.  (line   61)
* RAND_bytes() (in module ssl):          Random generation.  (line    6)
* RAND_egd() (in module ssl):            Random generation.  (line   46)
* RAND_pseudo_bytes() (in module ssl):   Random generation.  (line   23)
* RAND_status() (in module ssl):         Random generation.  (line   39)
* range (built-in class):                Ranges.             (line   10)
* RARROW (in module token):              token --- Constants used with Python parse trees.
                                                             (line   40)
* ratecv() (in module audioop):          audioop --- Manipulate raw audio data.
                                                             (line  173)
* ratio() (difflib.SequenceMatcher method): SequenceMatcher Objects.
                                                             (line  177)
* Rational (class in numbers):           The numeric tower.  (line   41)
* raw (io.BufferedIOBase attribute):     I/O Base Classes.   (line  243)
* raw string:                            String and Bytes literals.
                                                             (line   36)
* raw() (in module curses):              Functions<2>.       (line  384)
* RawArray() (in module multiprocessing.sharedctypes): The multiprocessing sharedctypes module.
                                                             (line   16)
* RawConfigParser (class in configparser): RawConfigParser Objects.
                                                             (line    6)
* RawDescriptionHelpFormatter (class in argparse): formatter_class.
                                                             (line   10)
* RawIOBase (class in io):               I/O Base Classes.   (line  170)
* RawPen (class in turtle):              Public classes.     (line    6)
* RawTextHelpFormatter (class in argparse): formatter_class. (line   10)
* RawTurtle (class in turtle):           Public classes.     (line    6)
* RawValue() (in module multiprocessing.sharedctypes): The multiprocessing sharedctypes module.
                                                             (line   33)
* raw_data_manager (in module email.contentmanager): Content Manager Instances.
                                                             (line   11)
* raw_decode() (json.JSONDecoder method): Encoders and Decoders.
                                                             (line   92)
* raw_input (2to3 fixer):                Fixers.             (line  274)
* raw_input() (code.InteractiveConsole method): Interactive Console Objects.
                                                             (line   38)
* RBRACE (in module token):              token --- Constants used with Python parse trees.
                                                             (line   40)
* rcpttos (smtpd.SMTPChannel attribute): SMTPChannel Objects.
                                                             (line   78)
* re (class in typing):                  Classes functions and decorators.
                                                             (line  288)
* re (module):                           re --- Regular expression operations.
                                                             (line    6)
* re (re.match attribute):               Match Objects.      (line  176)
* read() (asyncio.StreamReader method):  StreamReader.       (line   31)
* read() (chunk.Chunk method):           chunk --- Read IFF chunked data.
                                                             (line  101)
* read() (codecs.StreamReader method):   StreamReader Objects.
                                                             (line   34)
* read() (configparser.ConfigParser method): ConfigParser Objects.
                                                             (line  107)
* read() (http.client.HTTPResponse method): HTTPResponse Objects.
                                                             (line   13)
* read() (imaplib.IMAP4 method):         IMAP4 Objects.      (line  186)
* read() (in module os):                 File Descriptor Operations.
                                                             (line  399)
* read() (io.BufferedIOBase method):     I/O Base Classes.   (line  264)
* read() (io.BufferedReader method):     Buffered Streams.   (line   77)
* read() (io.RawIOBase method):          I/O Base Classes.   (line  183)
* read() (io.TextIOBase method):         Text I/O<2>.        (line   53)
* read() (mimetypes.MimeTypes method):   MimeTypes Objects.  (line   67)
* read() (mmap.mmap method):             mmap --- Memory-mapped file support.
                                                             (line  197)
* read() (ossaudiodev.oss_audio_device method): Audio Device Objects.
                                                             (line   32)
* read() (ssl.MemoryBIO method):         Memory BIO Support<2>.
                                                             (line  133)
* read() (ssl.SSLSocket method):         SSL Sockets.        (line   63)
* read() (urllib.robotparser.RobotFileParser method): urllib robotparser --- Parser for robots txt.
                                                             (line   21)
* read() (zipfile.ZipFile method):       ZipFile Objects.    (line  160)
* read1() (io.BufferedIOBase method):    I/O Base Classes.   (line  281)
* read1() (io.BufferedReader method):    Buffered Streams.   (line   83)
* read1() (io.BytesIO method):           Buffered Streams.   (line   43)
* READABLE (in module tkinter):          File Handlers.      (line   41)
* readable() (asyncore.dispatcher method): asyncore --- Asynchronous socket handler.
                                                             (line  162)
* readable() (io.IOBase method):         I/O Base Classes.   (line   79)
* readall() (io.RawIOBase method):       I/O Base Classes.   (line  195)
* reader() (in module csv):              Module Contents<3>. (line    8)
* ReadError:                             tarfile --- Read and write tar archive files.
                                                             (line  183)
* readexactly() (asyncio.StreamReader method): StreamReader. (line   54)
* readfp() (configparser.ConfigParser method): ConfigParser Objects.
                                                             (line  285)
* readfp() (mimetypes.MimeTypes method): MimeTypes Objects.  (line   75)
* readframes() (aifc.aifc method):       aifc --- Read and write AIFF and AIFC files.
                                                             (line  101)
* readframes() (sunau.AU_read method):   AU_read Objects.    (line   47)
* readframes() (wave.Wave_read method):  Wave_read Objects.  (line   46)
* readinto() (http.client.HTTPResponse method): HTTPResponse Objects.
                                                             (line   17)
* readinto() (io.BufferedIOBase method): I/O Base Classes.   (line  289)
* readinto() (io.RawIOBase method):      I/O Base Classes.   (line  200)
* readinto1() (io.BufferedIOBase method): I/O Base Classes.  (line  301)
* readinto1() (io.BytesIO method):       Buffered Streams.   (line   47)
* readline (module):                     readline --- GNU readline interface.
                                                             (line    6)
* readline() (asyncio.StreamReader method): StreamReader.    (line   41)
* readline() (codecs.StreamReader method): StreamReader Objects.
                                                             (line   60)
* readline() (distutils.text_file.TextFile method): distutils text_file --- The TextFile class.
                                                             (line  111)
* readline() (imaplib.IMAP4 method):     IMAP4 Objects.      (line  191)
* readline() (io.IOBase method):         I/O Base Classes.   (line   84)
* readline() (io.TextIOBase method):     Text I/O<2>.        (line   59)
* readline() (mmap.mmap method):         mmap --- Memory-mapped file support.
                                                             (line  212)
* readlines() (codecs.StreamReader method): StreamReader Objects.
                                                             (line   71)
* readlines() (distutils.text_file.TextFile method): distutils text_file --- The TextFile class.
                                                             (line  124)
* readlines() (io.IOBase method):        I/O Base Classes.   (line   93)
* readlink() (in module os):             Files and Directories.
                                                             (line  475)
* readmodule() (in module pyclbr):       pyclbr --- Python class browser support.
                                                             (line   19)
* readmodule_ex() (in module pyclbr):    pyclbr --- Python class browser support.
                                                             (line   28)
* READONLY:                              Generic Attribute Management.
                                                             (line   92)
* readonly (memoryview attribute):       Memory Views.       (line  380)
* readPlist() (in module plistlib):      plistlib --- Generate and parse Mac OS X plist files.
                                                             (line  124)
* readPlistFromBytes() (in module plistlib): plistlib --- Generate and parse Mac OS X plist files.
                                                             (line  147)
* ReadTransport (class in asyncio):      ReadTransport.      (line    6)
* readv() (in module os):                File Descriptor Operations.
                                                             (line  479)
* ready() (multiprocessing.pool.AsyncResult method): Process Pools.
                                                             (line  191)
* read_all() (telnetlib.Telnet method):  Telnet Objects.     (line   17)
* read_byte() (mmap.mmap method):        mmap --- Memory-mapped file support.
                                                             (line  207)
* read_bytes() (pathlib.Path method):    Methods<2>.         (line  237)
* read_dict() (configparser.ConfigParser method): ConfigParser Objects.
                                                             (line  157)
* read_eager() (telnetlib.Telnet method): Telnet Objects.    (line   35)
* read_environ() (in module wsgiref.handlers): wsgiref handlers -- server/gateway base classes.
                                                             (line  303)
* read_events() (xml.etree.ElementTree.XMLPullParser method): XMLPullParser Objects.
                                                             (line   29)
* read_file() (configparser.ConfigParser method): ConfigParser Objects.
                                                             (line  135)
* read_history_file() (in module readline): History file.    (line    8)
* read_init_file() (in module readline): Init file.          (line   13)
* read_lazy() (telnetlib.Telnet method): Telnet Objects.     (line   43)
* read_mime_types() (in module mimetypes): mimetypes --- Map filenames to MIME types.
                                                             (line   90)
* READ_RESTRICTED:                       Generic Attribute Management.
                                                             (line   92)
* read_sb_data() (telnetlib.Telnet method): Telnet Objects.  (line   59)
* read_some() (telnetlib.Telnet method): Telnet Objects.     (line   21)
* read_string() (configparser.ConfigParser method): ConfigParser Objects.
                                                             (line  147)
* read_text() (pathlib.Path method):     Methods<2>.         (line  250)
* read_token() (shlex.shlex method):     shlex Objects.      (line   20)
* read_until() (telnetlib.Telnet method): Telnet Objects.    (line    8)
* read_very_eager() (telnetlib.Telnet method): Telnet Objects.
                                                             (line   27)
* read_very_lazy() (telnetlib.Telnet method): Telnet Objects.
                                                             (line   51)
* read_windows_registry() (mimetypes.MimeTypes method): MimeTypes Objects.
                                                             (line   83)
* Real (class in numbers):               The numeric tower.  (line   28)
* real (numbers.Complex attribute):      The numeric tower.  (line   15)
* Real Media File Format:                chunk --- Read IFF chunked data.
                                                             (line    6)
* realloc():                             Overview<2>.        (line   33)
* realpath() (in module os.path):        os path --- Common pathname manipulations.
                                                             (line  248)
* real_quick_ratio() (difflib.SequenceMatcher method): SequenceMatcher Objects.
                                                             (line  198)
* reason (http.client.HTTPResponse attribute): HTTPResponse Objects.
                                                             (line   55)
* reason (ssl.SSLError attribute):       Functions Constants and Exceptions.
                                                             (line   27)
* reason (UnicodeError attribute):       Concrete exceptions.
                                                             (line  313)
* reason (urllib.error.HTTPError attribute): urllib error --- Exception classes raised by urllib request.
                                                             (line   41)
* reason (urllib.error.URLError attribute): urllib error --- Exception classes raised by urllib request.
                                                             (line   18)
* reattach() (tkinter.ttk.Treeview method): ttk Treeview.    (line  247)
* rebinding; name:                       Assignment statements.
                                                             (line    6)
* reccontrols() (ossaudiodev.oss_mixer_device method): Mixer Device Objects.
                                                             (line   54)
* received_data (smtpd.SMTPChannel attribute): SMTPChannel Objects.
                                                             (line   83)
* received_lines (smtpd.SMTPChannel attribute): SMTPChannel Objects.
                                                             (line   56)
* recent() (imaplib.IMAP4 method):       IMAP4 Objects.      (line  196)
* records (unittest.TestCase attribute): Test cases.         (line  427)
* rect() (in module cmath):              Conversions to and from polar coordinates.
                                                             (line   47)
* rectangle() (in module curses.textpad): curses textpad --- Text input widget for curses programs.
                                                             (line   15)
* RecursionError:                        Concrete exceptions.
                                                             (line  170)
* recursive_repr() (in module reprlib):  reprlib --- Alternate repr implementation.
                                                             (line   41)
* recv() (asyncore.dispatcher method):   asyncore --- Asynchronous socket handler.
                                                             (line  202)
* recv() (multiprocessing.Connection method): Connection Objects<2>.
                                                             (line   24)
* recv() (socket.socket method):         Socket Objects.     (line  196)
* recvfrom() (socket.socket method):     Socket Objects.     (line  213)
* recvfrom_into() (socket.socket method): Socket Objects.    (line  335)
* recvmsg() (socket.socket method):      Socket Objects.     (line  227)
* recvmsg_into() (socket.socket method): Socket Objects.     (line  298)
* recv_bytes() (multiprocessing.Connection method): Connection Objects<2>.
                                                             (line   65)
* recv_bytes_into() (multiprocessing.Connection method): Connection Objects<2>.
                                                             (line   79)
* recv_into() (socket.socket method):    Socket Objects.     (line  345)
* redirect_request() (urllib.request.HTTPRedirectHandler method): HTTPRedirectHandler Objects.
                                                             (line   15)
* redirect_stderr() (in module contextlib): Utilities.       (line  178)
* redirect_stdout() (in module contextlib): Utilities.       (line  139)
* redisplay() (in module readline):      Line buffer.        (line   19)
* redrawln() (curses.window method):     Window Objects.     (line  436)
* redrawwin() (curses.window method):    Window Objects.     (line  442)
* reduce (2to3 fixer):                   Fixers.             (line  278)
* reduce() (in module functools):        functools --- Higher-order functions and operations on callable objects.
                                                             (line  237)
* ref (class in weakref):                weakref --- Weak references.
                                                             (line   86)
* reference count:                       Glossary.           (line  977)
* reference counting:                    Objects values and types.
                                                             (line   37)
* ReferenceError:                        Concrete exceptions.
                                                             (line  179)
* ReferenceError <1>:                    weakref --- Weak references.
                                                             (line  319)
* ReferenceType (in module weakref):     weakref --- Weak references.
                                                             (line  301)
* refold_source (email.policy.EmailPolicy attribute): email policy Policy Objects.
                                                             (line  403)
* refresh() (curses.window method):      Window Objects.     (line  447)
* register() (abc.ABCMeta method):       abc --- Abstract Base Classes.
                                                             (line   41)
* register() (in module atexit):         atexit --- Exit handlers.
                                                             (line   17)
* register() (in module codecs):         codecs --- Codec registry and base classes.
                                                             (line  148)
* register() (in module faulthandler):   Dumping the traceback on a user signal.
                                                             (line    6)
* register() (in module webbrowser):     webbrowser --- Convenient Web-browser controller.
                                                             (line   80)
* register() (multiprocessing.managers.BaseManager method): Managers.
                                                             (line   75)
* register() (select.devpoll method):    /dev/poll Polling Objects.
                                                             (line   30)
* register() (select.epoll method):      Edge and Level Trigger Polling epoll Objects.
                                                             (line   68)
* register() (select.poll method):       Polling Objects.    (line   15)
* register() (selectors.BaseSelector method): Classes<3>.    (line   65)
* registerDOMImplementation() (in module xml.dom): Module Contents<4>.
                                                             (line    8)
* registerResult() (in module unittest): Signal Handling.    (line   34)
* register_adapter() (in module sqlite3): Module functions and constants.
                                                             (line  118)
* register_archive_format() (in module shutil): Archiving operations.
                                                             (line   68)
* register_converter() (in module sqlite3): Module functions and constants.
                                                             (line  109)
* register_defect() (email.policy.Policy method): email policy Policy Objects.
                                                             (line  200)
* register_dialect() (in module csv):    Module Contents<3>. (line   70)
* register_error() (in module codecs):   Error Handlers.     (line   88)
* register_function() (xmlrpc.server.CGIXMLRPCRequestHandler method): CGIXMLRPCRequestHandler.
                                                             (line    9)
* register_function() (xmlrpc.server.SimpleXMLRPCServer method): SimpleXMLRPCServer Objects.
                                                             (line   10)
* register_instance() (xmlrpc.server.CGIXMLRPCRequestHandler method): CGIXMLRPCRequestHandler.
                                                             (line   18)
* register_instance() (xmlrpc.server.SimpleXMLRPCServer method): SimpleXMLRPCServer Objects.
                                                             (line   18)
* register_introspection_functions() (xmlrpc.server.CGIXMLRPCRequestHandler method): CGIXMLRPCRequestHandler.
                                                             (line   33)
* register_introspection_functions() (xmlrpc.server.SimpleXMLRPCServer method): SimpleXMLRPCServer Objects.
                                                             (line   46)
* register_multicall_functions() (xmlrpc.server.CGIXMLRPCRequestHandler method): CGIXMLRPCRequestHandler.
                                                             (line   38)
* register_multicall_functions() (xmlrpc.server.SimpleXMLRPCServer method): SimpleXMLRPCServer Objects.
                                                             (line   51)
* register_namespace() (in module xml.etree.ElementTree): Functions<5>.
                                                             (line  109)
* register_optionflag() (in module doctest): Option Flags.   (line  172)
* register_shape() (in module turtle):   Settings and special methods.
                                                             (line   71)
* register_unpack_format() (in module shutil): Archiving operations.
                                                             (line  107)
* regular package:                       Glossary.           (line  985)
* REG_BINARY (in module winreg):         Value Types.        (line    8)
* REG_DWORD (in module winreg):          Value Types.        (line   12)
* REG_DWORD_BIG_ENDIAN (in module winreg): Value Types.      (line   20)
* REG_DWORD_LITTLE_ENDIAN (in module winreg): Value Types.   (line   16)
* REG_EXPAND_SZ (in module winreg):      Value Types.        (line   24)
* REG_FULL_RESOURCE_DESCRIPTOR (in module winreg): Value Types.
                                                             (line   46)
* REG_LINK (in module winreg):           Value Types.        (line   29)
* REG_MULTI_SZ (in module winreg):       Value Types.        (line   33)
* REG_NONE (in module winreg):           Value Types.        (line   38)
* REG_RESOURCE_LIST (in module winreg):  Value Types.        (line   42)
* REG_RESOURCE_REQUIREMENTS_LIST (in module winreg): Value Types.
                                                             (line   50)
* REG_SZ (in module winreg):             Value Types.        (line   54)
* relative; import:                      The import statement.
                                                             (line   99)
* relative; URL:                         urllib parse --- Parse URLs into components.
                                                             (line    6)
* relative_to() (pathlib.PurePath method): Methods and properties.
                                                             (line  263)
* release() (asyncio.Condition method):  Condition.          (line   59)
* release() (asyncio.Lock method):       Lock.               (line   76)
* release() (asyncio.Semaphore method):  Semaphore.          (line   40)
* release() (in module platform):        Cross Platform.     (line  111)
* release() (logging.Handler method):    Handler Objects.    (line   27)
* release() (memoryview method):         Memory Views.       (line  203)
* release() (multiprocessing.Lock method): Synchronization primitives.
                                                             (line   92)
* release() (multiprocessing.RLock method): Synchronization primitives.
                                                             (line  148)
* release() (threading.Condition method): Condition Objects. (line   91)
* release() (threading.Lock method):     Lock Objects.       (line   70)
* release() (threading.RLock method):    RLock Objects.      (line   65)
* release() (threading.Semaphore method): Semaphore Objects. (line   61)
* release() (_thread.lock method):       _thread --- Low-level threading API.
                                                             (line  121)
* release_lock() (in module imp):        imp --- Access the import internals.
                                                             (line  292)
* reload (2to3 fixer):                   Fixers.             (line  282)
* reload() (in module imp):              imp --- Access the import internals.
                                                             (line  128)
* reload() (in module importlib):        Functions<8>.       (line   73)
* relpath() (in module os.path):         os path --- Common pathname manipulations.
                                                             (line  254)
* remainder() (decimal.Context method):  Context objects.    (line  464)
* remainder_near() (decimal.Context method): Context objects.
                                                             (line  471)
* remainder_near() (decimal.Decimal method): Decimal objects.
                                                             (line  492)
* RemoteDisconnected:                    http client --- HTTP protocol client.
                                                             (line  153)
* remove() (array.array method):         array --- Efficient arrays of numeric values.
                                                             (line  209)
* remove() (collections.deque method):   deque objects.      (line   97)
* remove() (in module os):               Files and Directories.
                                                             (line  496)
* remove() (mailbox.Mailbox method):     Mailbox objects.    (line   76)
* remove() (mailbox.MH method):          MH.                 (line   76)
* remove() (sequence method):            Mutable Sequence Types.
                                                             (line   16)
* remove() (set method):                 Set Types --- set frozenset.
                                                             (line  188)
* remove() (xml.etree.ElementTree.Element method): Element Objects.
                                                             (line  173)
* removeAttribute() (xml.dom.Element method): Element Objects<2>.
                                                             (line   52)
* removeAttributeNode() (xml.dom.Element method): Element Objects<2>.
                                                             (line   57)
* removeAttributeNS() (xml.dom.Element method): Element Objects<2>.
                                                             (line   62)
* removeChild() (xml.dom.Node method):   Node Objects.       (line  128)
* removedirs() (in module os):           Files and Directories.
                                                             (line  514)
* removeFilter() (logging.Handler method): Handler Objects.  (line   52)
* removeFilter() (logging.Logger method): Logger Objects.    (line  228)
* removeHandler() (in module unittest):  Signal Handling.    (line   51)
* removeHandler() (logging.Logger method): Logger Objects.   (line  245)
* removeResult() (in module unittest):   Signal Handling.    (line   45)
* removexattr() (in module os):          Linux extended attributes.
                                                             (line   29)
* remove_done_callback() (asyncio.Future method): Future.    (line   77)
* remove_flag() (mailbox.MaildirMessage method): MaildirMessage.
                                                             (line   84)
* remove_flag() (mailbox.mboxMessage method): mboxMessage.   (line   85)
* remove_flag() (mailbox.MMDFMessage method): MMDFMessage.   (line   84)
* remove_folder() (mailbox.Maildir method): Maildir.         (line   72)
* remove_folder() (mailbox.MH method):   MH.                 (line   47)
* remove_header() (urllib.request.Request method): Request Objects.
                                                             (line   99)
* remove_history_item() (in module readline): History list.  (line   26)
* remove_label() (mailbox.BabylMessage method): BabylMessage.
                                                             (line   59)
* remove_option() (configparser.ConfigParser method): ConfigParser Objects.
                                                             (line  251)
* remove_option() (optparse.OptionParser method): Querying and manipulating your option parser.
                                                             (line   47)
* remove_pyc() (msilib.Directory method): Directory Objects. (line   45)
* remove_reader() (asyncio.BaseEventLoop method): Watch file descriptors.
                                                             (line   19)
* remove_section() (configparser.ConfigParser method): ConfigParser Objects.
                                                             (line  258)
* remove_sequence() (mailbox.MHMessage method): MHMessage.   (line   46)
* remove_signal_handler() (asyncio.BaseEventLoop method): UNIX signals.
                                                             (line   18)
* remove_tree() (in module distutils.dir_util): distutils dir_util --- Directory tree operations.
                                                             (line   60)
* remove_writer() (asyncio.BaseEventLoop method): Watch file descriptors.
                                                             (line   30)
* rename() (ftplib.FTP method):          FTP Objects.        (line  193)
* rename() (imaplib.IMAP4 method):       IMAP4 Objects.      (line  201)
* rename() (in module os):               Files and Directories.
                                                             (line  526)
* rename() (pathlib.Path method):        Methods<2>.         (line  265)
* renames (2to3 fixer):                  Fixers.             (line  286)
* renames() (in module os):              Files and Directories.
                                                             (line  546)
* reopenIfNeeded() (logging.handlers.WatchedFileHandler method): WatchedFileHandler.
                                                             (line   34)
* reorganize() (dbm.gnu.gdbm method):    dbm gnu --- GNU's reinterpretation of dbm.
                                                             (line  100)
* repeat() (in module itertools):        Itertool functions. (line  468)
* repeat() (in module timeit):           Python Interface.   (line   18)
* repeat() (timeit.Timer method):        Python Interface.   (line   87)
* repetition; operation:                 Common Sequence Operations.
                                                             (line   21)
* replace() (bytearray method):          Bytes and Bytearray Operations.
                                                             (line  143)
* replace() (bytes method):              Bytes and Bytearray Operations.
                                                             (line  143)
* replace() (curses.panel.Panel method): Panel Objects.      (line   38)
* replace() (datetime.date method):      date Objects.       (line  146)
* replace() (datetime.datetime method):  datetime Objects.   (line  313)
* replace() (datetime.time method):      time Objects.       (line  106)
* replace() (in module os):              Files and Directories.
                                                             (line  558)
* replace() (inspect.Parameter method):  Introspecting callables with the Signature object.
                                                             (line  220)
* replace() (inspect.Signature method):  Introspecting callables with the Signature object.
                                                             (line  101)
* replace() (pathlib.Path method):       Methods<2>.         (line  278)
* replace() (str method):                String Methods<2>.  (line  297)
* replaceChild() (xml.dom.Node method):  Node Objects.       (line  135)
* ReplacePackage() (in module modulefinder): modulefinder --- Find modules used by a script.
                                                             (line   21)
* replace_errors() (in module codecs):   Error Handlers.     (line  133)
* replace_header() (email.message.Message method): email message Representing an email message.
                                                             (line  374)
* replace_history_item() (in module readline): History list. (line   32)
* replace_whitespace (textwrap.TextWrapper attribute): textwrap --- Text wrapping and filling.
                                                             (line  168)
* report() (filecmp.dircmp method):      The dircmp class.   (line   18)
* report() (modulefinder.ModuleFinder method): modulefinder --- Find modules used by a script.
                                                             (line   38)
* REPORTING_FLAGS (in module doctest):   Option Flags.       (line  164)
* REPORT_CDIFF (in module doctest):      Option Flags.       (line  126)
* report_failure() (doctest.DocTestRunner method): DocTestRunner objects.
                                                             (line   70)
* report_full_closure() (filecmp.dircmp method): The dircmp class.
                                                             (line   28)
* REPORT_NDIFF (in module doctest):      Option Flags.       (line  131)
* REPORT_ONLY_FIRST_FAILURE (in module doctest): Option Flags.
                                                             (line  140)
* report_partial_closure() (filecmp.dircmp method): The dircmp class.
                                                             (line   23)
* report_start() (doctest.DocTestRunner method): DocTestRunner objects.
                                                             (line   48)
* report_success() (doctest.DocTestRunner method): DocTestRunner objects.
                                                             (line   59)
* REPORT_UDIFF (in module doctest):      Option Flags.       (line  121)
* report_unexpected_exception() (doctest.DocTestRunner method): DocTestRunner objects.
                                                             (line   81)
* repr (2to3 fixer):                     Fixers.             (line  290)
* Repr (class in reprlib):               reprlib --- Alternate repr implementation.
                                                             (line   17)
* repr() (built-in function):            Built-in Functions. (line 1227)
* repr() (built-in function); __repr__() (object method): Basic customization.
                                                             (line  106)
* repr() (in module reprlib):            reprlib --- Alternate repr implementation.
                                                             (line   31)
* repr() (reprlib.Repr method):          Repr Objects.       (line   47)
* repr1() (reprlib.Repr method):         Repr Objects.       (line   52)
* reprlib (module):                      reprlib --- Alternate repr implementation.
                                                             (line    6)
* Request (class in urllib.request):     urllib request --- Extensible library for opening URLs.
                                                             (line  169)
* request() (http.client.HTTPConnection method): HTTPConnection Objects.
                                                             (line    8)
* RequestHandlerClass (socketserver.BaseServer attribute): Server Objects.
                                                             (line   69)
* requestline (http.server.BaseHTTPRequestHandler attribute): http server --- HTTP servers.
                                                             (line   67)
* request_queue_size (socketserver.BaseServer attribute): Server Objects.
                                                             (line   96)
* request_rate() (urllib.robotparser.RobotFileParser method): urllib robotparser --- Parser for robots txt.
                                                             (line   56)
* request_uri() (in module wsgiref.util): wsgiref util -- WSGI environment utilities.
                                                             (line   25)
* request_version (http.server.BaseHTTPRequestHandler attribute): http server --- HTTP servers.
                                                             (line   82)
* requires() (in module test.support):   test support --- Utilities for the Python test suite.
                                                             (line   59)
* reserved (zipfile.ZipInfo attribute):  ZipInfo Objects.    (line   91)
* reserved word:                         Keywords.           (line    6)
* RESERVED_FUTURE (in module uuid):      uuid --- UUID objects according to RFC 4122.
                                                             (line  183)
* RESERVED_MICROSOFT (in module uuid):   uuid --- UUID objects according to RFC 4122.
                                                             (line  179)
* RESERVED_NCS (in module uuid):         uuid --- UUID objects according to RFC 4122.
                                                             (line  171)
* reset() (bdb.Bdb method):              bdb --- Debugger framework.
                                                             (line  106)
* reset() (codecs.IncrementalDecoder method): IncrementalDecoder Objects.
                                                             (line   40)
* reset() (codecs.IncrementalEncoder method): IncrementalEncoder Objects.
                                                             (line   35)
* reset() (codecs.StreamReader method):  StreamReader Objects.
                                                             (line   82)
* reset() (codecs.StreamWriter method):  StreamWriter Objects.
                                                             (line   41)
* reset() (html.parser.HTMLParser method): HTMLParser Methods.
                                                             (line   23)
* reset() (in module turtle):            More drawing control.
                                                             (line    6)
* reset() (in module turtle) <1>:        Window control.     (line   51)
* reset() (ossaudiodev.oss_audio_device method): Audio Device Objects.
                                                             (line  172)
* reset() (pipes.Template method):       Template Objects.   (line    8)
* reset() (threading.Barrier method):    Barrier Objects.    (line   70)
* reset() (xdrlib.Packer method):        Packer Objects.     (line   12)
* reset() (xdrlib.Unpacker method):      Unpacker Objects.   (line    8)
* reset() (xml.dom.pulldom.DOMEventStream method): DOMEventStream Objects.
                                                             (line   34)
* reset() (xml.sax.xmlreader.IncrementalParser method): IncrementalParser Objects.
                                                             (line   19)
* resetbuffer() (code.InteractiveConsole method): Interactive Console Objects.
                                                             (line   34)
* resetlocale() (in module locale):      locale --- Internationalization services.
                                                             (line  348)
* resetscreen() (in module turtle):      Window control.     (line   51)
* resetty() (in module curses):          Functions<2>.       (line  400)
* resetwarnings() (in module warnings):  Available Functions.
                                                             (line   99)
* reset_mock() (unittest.mock.Mock method): The Mock Class.  (line  197)
* reset_prog_mode() (in module curses):  Functions<2>.       (line  390)
* reset_shell_mode() (in module curses): Functions<2>.       (line  395)
* resize() (curses.window method):       Window Objects.     (line  466)
* resize() (in module ctypes):           Utility functions.  (line  148)
* resize() (mmap.mmap method):           mmap --- Memory-mapped file support.
                                                             (line  217)
* resizemode() (in module turtle):       Appearance.         (line   24)
* resizeterm() (in module curses):       Functions<2>.       (line  416)
* resize_term() (in module curses):      Functions<2>.       (line  405)
* resolution (datetime.date attribute):  date Objects.       (line   70)
* resolution (datetime.datetime attribute): datetime Objects.
                                                             (line  169)
* resolution (datetime.time attribute):  time Objects.       (line   40)
* resolution (datetime.timedelta attribute): timedelta Objects.
                                                             (line   66)
* resolve() (pathlib.Path method):       Methods<2>.         (line  284)
* resolveEntity() (xml.sax.handler.EntityResolver method): EntityResolver Objects.
                                                             (line    6)
* resolve_name() (in module importlib.util): importlib util -- Utility code for importers.
                                                             (line   72)
* resource (module):                     resource --- Resource usage information.
                                                             (line    6)
* ResourceDenied:                        test support --- Utilities for the Python test suite.
                                                             (line   22)
* ResourceLoader (class in importlib.abc): importlib abc -- Abstract base classes related to import.
                                                             (line  265)
* ResourceWarning:                       Warnings.           (line   52)
* response (nntplib.NNTPError attribute): nntplib --- NNTP protocol client.
                                                             (line  114)
* response() (imaplib.IMAP4 method):     IMAP4 Objects.      (line  205)
* ResponseNotReady:                      http client --- HTTP protocol client.
                                                             (line  139)
* responses (http.server.BaseHTTPRequestHandler attribute): http server --- HTTP servers.
                                                             (line  151)
* responses (in module http.client):     http client --- HTTP protocol client.
                                                             (line  174)
* restart (pdb command):                 Debugger Commands.  (line  321)
* restore() (in module difflib):         difflib --- Helpers for computing deltas.
                                                             (line  268)
* RESTRICTED:                            Generic Attribute Management.
                                                             (line   92)
* restricted; execution:                 Builtins and restricted execution.
                                                             (line    6)
* restype (ctypes._FuncPtr attribute):   Foreign functions.  (line   22)
* result() (asyncio.Future method):      Future.             (line   46)
* result() (concurrent.futures.Future method): Future Objects.
                                                             (line   37)
* results() (trace.Trace method):        Programmatic Interface.
                                                             (line   42)
* resume_reading() (asyncio.ReadTransport method): ReadTransport.
                                                             (line   16)
* resume_writing() (asyncio.BaseProtocol method): Flow control callbacks.
                                                             (line   13)
* retr() (poplib.POP3 method):           POP3 Objects.       (line   62)
* retrbinary() (ftplib.FTP method):      FTP Objects.        (line   75)
* retrieve() (urllib.request.URLopener method): Legacy interface.
                                                             (line  111)
* retrlines() (ftplib.FTP method):       FTP Objects.        (line   87)
* return (pdb command):                  Debugger Commands.  (line  187)
* returncode (asyncio.asyncio.subprocess.Process attribute): Process.
                                                             (line  125)
* returncode (subprocess.CalledProcessError attribute): Using the subprocess Module.
                                                             (line  170)
* returncode (subprocess.CompletedProcess attribute): Using the subprocess Module.
                                                             (line   75)
* returncode (subprocess.Popen attribute): Popen Objects.    (line  146)
* return_annotation (inspect.Signature attribute): Introspecting callables with the Signature object.
                                                             (line   80)
* return_ok() (http.cookiejar.CookiePolicy method): CookiePolicy Objects.
                                                             (line   18)
* RETURN_VALUE (opcode):                 Python Bytecode Instructions.
                                                             (line  313)
* return_value (unittest.mock.Mock attribute): The Mock Class.
                                                             (line  312)
* reverse() (array.array method):        array --- Efficient arrays of numeric values.
                                                             (line  213)
* reverse() (collections.deque method):  deque objects.      (line  102)
* reverse() (in module audioop):         audioop --- Manipulate raw audio data.
                                                             (line  186)
* reverse() (sequence method):           Mutable Sequence Types.
                                                             (line   16)
* reversed() (built-in function):        Built-in Functions. (line 1239)
* reverse_order() (pstats.Stats method): The Stats Class.    (line  149)
* reverse_pointer (ipaddress.IPv4Address attribute): Address objects.
                                                             (line   70)
* reverse_pointer (ipaddress.IPv6Address attribute): Address objects.
                                                             (line  164)
* Reversible (class in collections.abc): Collections Abstract Base Classes.
                                                             (line  114)
* Reversible (class in typing):          Classes functions and decorators.
                                                             (line  164)
* revert() (http.cookiejar.FileCookieJar method): CookieJar and FileCookieJar Objects.
                                                             (line  141)
* rewind() (aifc.aifc method):           aifc --- Read and write AIFF and AIFC files.
                                                             (line  107)
* rewind() (sunau.AU_read method):       AU_read Objects.    (line   53)
* rewind() (wave.Wave_read method):      Wave_read Objects.  (line   51)
* rfc2109 (http.cookiejar.Cookie attribute): Cookie Objects<2>.
                                                             (line   67)
* rfc2109_as_netscape (http.cookiejar.DefaultCookiePolicy attribute): DefaultCookiePolicy Objects.
                                                             (line   83)
* rfc2965 (http.cookiejar.CookiePolicy attribute): CookiePolicy Objects.
                                                             (line   71)
* rfc822_escape() (in module distutils.util): distutils util --- Miscellaneous other utility functions.
                                                             (line  177)
* RFC; RFC 1014:                         xdrlib --- Encode and decode XDR data.
                                                             (line   11)
* RFC; RFC 1014 <1>:                     xdrlib --- Encode and decode XDR data.
                                                             (line   32)
* RFC; RFC 1123:                         time --- Time access and conversions.
                                                             (line  714)
* RFC; RFC 1321:                         hashlib --- Secure hashes and message digests.
                                                             (line   13)
* RFC; RFC 1422:                         Certificates.       (line   38)
* RFC; RFC 1521:                         base64 --- Base16 Base32 Base64 Base85 Data Encodings.
                                                             (line  262)
* RFC; RFC 1521 <1>:                     quopri --- Encode and decode MIME quoted-printable data.
                                                             (line   11)
* RFC; RFC 1521 <2>:                     quopri --- Encode and decode MIME quoted-printable data.
                                                             (line   37)
* RFC; RFC 1522:                         quopri --- Encode and decode MIME quoted-printable data.
                                                             (line   25)
* RFC; RFC 1522 <1>:                     quopri --- Encode and decode MIME quoted-printable data.
                                                             (line   39)
* RFC; RFC 1524:                         mailcap --- Mailcap file handling.
                                                             (line   19)
* RFC; RFC 1524 <1>:                     mailcap --- Mailcap file handling.
                                                             (line   38)
* RFC; RFC 1730:                         imaplib --- IMAP4 protocol client.
                                                             (line   14)
* RFC; RFC 1738:                         URL Quoting.        (line  172)
* RFC; RFC 1750:                         Random generation.  (line   65)
* RFC; RFC 1766:                         locale --- Internationalization services.
                                                             (line  310)
* RFC; RFC 1766 <1>:                     locale --- Internationalization services.
                                                             (line  321)
* RFC; RFC 1808:                         urllib.             (line   24)
* RFC; RFC 1808 <1>:                     URL Parsing.        (line   33)
* RFC; RFC 1808 <2>:                     URL Quoting.        (line  166)
* RFC; RFC 1832:                         xdrlib --- Encode and decode XDR data.
                                                             (line   36)
* RFC; RFC 1832 <1>:                     xdrlib --- Encode and decode XDR data.
                                                             (line   38)
* RFC; RFC 1869:                         smtplib --- SMTP protocol client.
                                                             (line   13)
* RFC; RFC 1869 <1>:                     smtplib --- SMTP protocol client.
                                                             (line  174)
* RFC; RFC 1870:                         smtpd<3>.           (line    7)
* RFC; RFC 1870 <1>:                     smtpd --- SMTP Server.
                                                             (line   19)
* RFC; RFC 1870 <2>:                     SMTPChannel Objects.
                                                             (line  124)
* RFC; RFC 1894:                         Differences from mimelib.
                                                             (line  126)
* RFC; RFC 1939:                         poplib --- POP3 protocol client.
                                                             (line   11)
* RFC; RFC 1939 <1>:                     poplib --- POP3 protocol client.
                                                             (line   13)
* RFC; RFC 2033:                         New and Improved Modules<2>.
                                                             (line  570)
* RFC; RFC 2045:                         email --- An email and MIME handling package.
                                                             (line   12)
* RFC; RFC 2045 <1>:                     email message Representing an email message.
                                                             (line  387)
* RFC; RFC 2045 <2>:                     email message Representing an email message.
                                                             (line  391)
* RFC; RFC 2045 <3>:                     email message Representing an email message.
                                                             (line  394)
* RFC; RFC 2045 <4>:                     email message Representing an email message.
                                                             (line  481)
* RFC; RFC 2045 <5>:                     email headerregistry Custom Header Objects.
                                                             (line  237)
* RFC; RFC 2045 <6>:                     email headerregistry Custom Header Objects.
                                                             (line  295)
* RFC; RFC 2045 <7>:                     email header Internationalized headers.
                                                             (line   17)
* RFC; RFC 2045 <8>:                     base64 --- Base16 Base32 Base64 Base85 Data Encodings.
                                                             (line   26)
* RFC; RFC 2045 <9>:                     base64 --- Base16 Base32 Base64 Base85 Data Encodings.
                                                             (line   27)
* RFC; RFC 2045 <10>:                    base64 --- Base16 Base32 Base64 Base85 Data Encodings.
                                                             (line  231)
* RFC; RFC 2045 <11>:                    base64 --- Base16 Base32 Base64 Base85 Data Encodings.
                                                             (line  240)
* RFC; RFC 2046:                         email --- An email and MIME handling package.
                                                             (line   12)
* RFC; RFC 2046 <1>:                     Content Manager Instances.
                                                             (line   91)
* RFC; RFC 2046 <2>:                     email header Internationalized headers.
                                                             (line   18)
* RFC; RFC 2047:                         PEP 3333 Python Web Server Gateway Interface v1 0 1.
                                                             (line   21)
* RFC; RFC 2047 <1>:                     email<4>.           (line   27)
* RFC; RFC 2047 <2>:                     email --- An email and MIME handling package.
                                                             (line   13)
* RFC; RFC 2047 <3>:                     email generator Generating MIME documents.
                                                             (line   95)
* RFC; RFC 2047 <4>:                     email policy Policy Objects.
                                                             (line  384)
* RFC; RFC 2047 <5>:                     email policy Policy Objects.
                                                             (line  390)
* RFC; RFC 2047 <6>:                     email headerregistry Custom Header Objects.
                                                             (line  121)
* RFC; RFC 2047 <7>:                     email headerregistry Custom Header Objects.
                                                             (line  126)
* RFC; RFC 2047 <8>:                     email header Internationalized headers.
                                                             (line   18)
* RFC; RFC 2047 <9>:                     email header Internationalized headers.
                                                             (line   41)
* RFC; RFC 2047 <10>:                    email header Internationalized headers.
                                                             (line  103)
* RFC; RFC 2047 <11>:                    email header Internationalized headers.
                                                             (line  127)
* RFC; RFC 2047 <12>:                    email utils Miscellaneous utilities.
                                                             (line   36)
* RFC; RFC 2060:                         imaplib --- IMAP4 protocol client.
                                                             (line   13)
* RFC; RFC 2060 <1>:                     IMAP4 Objects.      (line  301)
* RFC; RFC 2068:                         http cookies --- HTTP state management.
                                                             (line   16)
* RFC; RFC 2104:                         New and Improved Modules<3>.
                                                             (line   35)
* RFC; RFC 2104 <1>:                     hmac --- Keyed-Hashing for Message Authentication.
                                                             (line   10)
* RFC; RFC 2109:                         http cookies --- HTTP state management.
                                                             (line   15)
* RFC; RFC 2109 <1>:                     http cookies --- HTTP state management.
                                                             (line   35)
* RFC; RFC 2109 <2>:                     http cookies --- HTTP state management.
                                                             (line   63)
* RFC; RFC 2109 <3>:                     Morsel Objects.     (line    8)
* RFC; RFC 2109 <4>:                     Morsel Objects.     (line   11)
* RFC; RFC 2109 <5>:                     Morsel Objects.     (line   97)
* RFC; RFC 2109 <6>:                     Morsel Objects.     (line  109)
* RFC; RFC 2109 <7>:                     http cookiejar --- Cookie handling for HTTP clients.
                                                             (line   17)
* RFC; RFC 2109 <8>:                     http cookiejar --- Cookie handling for HTTP clients.
                                                             (line  130)
* RFC; RFC 2183:                         email message Representing an email message.
                                                             (line  584)
* RFC; RFC 2231:                         email --- An email and MIME handling package.
                                                             (line   13)
* RFC; RFC 2231 <1>:                     email message Representing an email message.
                                                             (line  350)
* RFC; RFC 2231 <2>:                     email message Representing an email message.
                                                             (line  354)
* RFC; RFC 2231 <3>:                     email message Representing an email message.
                                                             (line  451)
* RFC; RFC 2231 <4>:                     email message Representing an email message.
                                                             (line  459)
* RFC; RFC 2231 <5>:                     email message Representing an email message.
                                                             (line  488)
* RFC; RFC 2231 <6>:                     email header Internationalized headers.
                                                             (line   18)
* RFC; RFC 2231 <7>:                     email utils Miscellaneous utilities.
                                                             (line  166)
* RFC; RFC 2231 <8>:                     email utils Miscellaneous utilities.
                                                             (line  171)
* RFC; RFC 2231 <9>:                     email utils Miscellaneous utilities.
                                                             (line  180)
* RFC; RFC 2231 <10>:                    email utils Miscellaneous utilities.
                                                             (line  187)
* RFC; RFC 2231 <11>:                    email utils Miscellaneous utilities.
                                                             (line  196)
* RFC; RFC 2231 <12>:                    Package History.    (line   98)
* RFC; RFC 2295:                         HTTP status codes.  (line  169)
* RFC; RFC 2342:                         New and Improved Modules<3>.
                                                             (line   93)
* RFC; RFC 2368:                         URL Quoting.        (line  162)
* RFC; RFC 2373:                         Address objects.    (line   88)
* RFC; RFC 2373 <1>:                     Address objects.    (line  107)
* RFC; RFC 2373 <2>:                     Address objects.    (line  116)
* RFC; RFC 2396:                         urllib.             (line   25)
* RFC; RFC 2396 <1>:                     URL Parsing.        (line  188)
* RFC; RFC 2396 <2>:                     URL Quoting.        (line  157)
* RFC; RFC 2397:                         DataHandler Objects.
                                                             (line    9)
* RFC; RFC 2449:                         POP3 Objects.       (line   26)
* RFC; RFC 2487:                         New and Improved Modules<3>.
                                                             (line   85)
* RFC; RFC 2518:                         HTTP status codes.  (line   19)
* RFC; RFC 2595:                         poplib --- POP3 protocol client.
                                                             (line   14)
* RFC; RFC 2595 <1>:                     POP3 Objects.       (line  115)
* RFC; RFC 2616:                         PEP 3333 Python Web Server Gateway Interface v1 0 1.
                                                             (line   20)
* RFC; RFC 2616 <1>:                     wsgiref util -- WSGI environment utilities.
                                                             (line  112)
* RFC; RFC 2616 <2>:                     HTTPRedirectHandler Objects.
                                                             (line    8)
* RFC; RFC 2616 <3>:                     HTTPRedirectHandler Objects.
                                                             (line   28)
* RFC; RFC 2616 <4>:                     Legacy interface.   (line  164)
* RFC; RFC 2616 <5>:                     Introduction<16>.   (line   34)
* RFC; RFC 2732:                         urllib parse.       (line   10)
* RFC; RFC 2732 <1>:                     New and Improved Modules.
                                                             (line  640)
* RFC; RFC 2732 <2>:                     URL Quoting.        (line  153)
* RFC; RFC 2774:                         HTTP status codes.  (line  178)
* RFC; RFC 2818:                         ssl<4>.             (line   16)
* RFC; RFC 2818 <1>:                     Certificate handling.
                                                             (line   11)
* RFC; RFC 2821:                         email --- An email and MIME handling package.
                                                             (line    9)
* RFC; RFC 2822:                         New and Improved Modules<3>.
                                                             (line   97)
* RFC; RFC 2822 <1>:                     time --- Time access and conversions.
                                                             (line  460)
* RFC; RFC 2822 <2>:                     time --- Time access and conversions.
                                                             (line  715)
* RFC; RFC 2822 <3>:                     email --- An email and MIME handling package.
                                                             (line    7)
* RFC; RFC 2822 <4>:                     email --- An email and MIME handling package.
                                                             (line   12)
* RFC; RFC 2822 <5>:                     email message Representing an email message.
                                                             (line   13)
* RFC; RFC 2822 <6>:                     email message Representing an email message.
                                                             (line  239)
* RFC; RFC 2822 <7>:                     Parser class API.   (line   47)
* RFC; RFC 2822 <8>:                     Parser class API.   (line   93)
* RFC; RFC 2822 <9>:                     email generator Generating MIME documents.
                                                             (line   57)
* RFC; RFC 2822 <10>:                    email generator Generating MIME documents.
                                                             (line   77)
* RFC; RFC 2822 <11>:                    email generator Generating MIME documents.
                                                             (line  141)
* RFC; RFC 2822 <12>:                    email generator Generating MIME documents.
                                                             (line  173)
* RFC; RFC 2822 <13>:                    email header Internationalized headers.
                                                             (line    6)
* RFC; RFC 2822 <14>:                    email header Internationalized headers.
                                                             (line    9)
* RFC; RFC 2822 <15>:                    email header Internationalized headers.
                                                             (line   17)
* RFC; RFC 2822 <16>:                    email header Internationalized headers.
                                                             (line   74)
* RFC; RFC 2822 <17>:                    email header Internationalized headers.
                                                             (line  102)
* RFC; RFC 2822 <18>:                    email header Internationalized headers.
                                                             (line  120)
* RFC; RFC 2822 <19>:                    email errors Exception and Defect classes.
                                                             (line   22)
* RFC; RFC 2822 <20>:                    email errors Exception and Defect classes.
                                                             (line   28)
* RFC; RFC 2822 <21>:                    email errors Exception and Defect classes.
                                                             (line   29)
* RFC; RFC 2822 <22>:                    email errors Exception and Defect classes.
                                                             (line   35)
* RFC; RFC 2822 <23>:                    email utils Miscellaneous utilities.
                                                             (line   60)
* RFC; RFC 2822 <24>:                    email utils Miscellaneous utilities.
                                                             (line   63)
* RFC; RFC 2822 <25>:                    email utils Miscellaneous utilities.
                                                             (line  210)
* RFC; RFC 2822 <26>:                    email utils Miscellaneous utilities.
                                                             (line  103)
* RFC; RFC 2822 <27>:                    email utils Miscellaneous utilities.
                                                             (line  153)
* RFC; RFC 2822 <28>:                    Message objects.    (line   17)
* RFC; RFC 2822 <29>:                    http server --- HTTP servers.
                                                             (line   94)
* RFC; RFC 2964:                         http cookiejar --- Cookie handling for HTTP clients.
                                                             (line  143)
* RFC; RFC 2965:                         urllib request --- Extensible library for opening URLs.
                                                             (line  204)
* RFC; RFC 2965 <1>:                     http cookiejar --- Cookie handling for HTTP clients.
                                                             (line   16)
* RFC; RFC 2965 <2>:                     http cookiejar --- Cookie handling for HTTP clients.
                                                             (line  134)
* RFC; RFC 2980:                         nntplib --- NNTP protocol client.
                                                             (line   13)
* RFC; RFC 2980 <1>:                     Methods<3>.         (line  317)
* RFC; RFC 3056:                         Address objects.    (line  204)
* RFC; RFC 3171:                         Address objects.    (line   87)
* RFC; RFC 3207:                         New and Improved Modules<2>.
                                                             (line  575)
* RFC; RFC 3229:                         HTTP status codes.  (line   49)
* RFC; RFC 3280:                         SSL Sockets.        (line  132)
* RFC; RFC 3330:                         Address objects.    (line  115)
* RFC; RFC 3454:                         stringprep --- Internet String Preparation.
                                                             (line   13)
* RFC; RFC 3490:                         Text Encodings.     (line   14)
* RFC; RFC 3490 <1>:                     encodings idna --- Internationalized Domain Names in Applications.
                                                             (line    6)
* RFC; RFC 3490 <2>:                     encodings idna --- Internationalized Domain Names in Applications.
                                                             (line   25)
* RFC; RFC 3490 <3>:                     encodings idna --- Internationalized Domain Names in Applications.
                                                             (line   54)
* RFC; RFC 3490 <4>:                     encodings idna --- Internationalized Domain Names in Applications.
                                                             (line   59)
* RFC; RFC 3492:                         Text Encodings.     (line   29)
* RFC; RFC 3492 <1>:                     encodings idna --- Internationalized Domain Names in Applications.
                                                             (line    7)
* RFC; RFC 3493:                         Example<7>.         (line  227)
* RFC; RFC 3501:                         IMAP4 Objects.      (line  312)
* RFC; RFC 3542:                         Other functions<2>. (line  248)
* RFC; RFC 3548:                         base64 --- Base16 Base32 Base64 Base85 Data Encodings.
                                                             (line    8)
* RFC; RFC 3548 <1>:                     base64 --- Base16 Base32 Base64 Base85 Data Encodings.
                                                             (line   12)
* RFC; RFC 3548 <2>:                     base64 --- Base16 Base32 Base64 Base85 Data Encodings.
                                                             (line   20)
* RFC; RFC 3548 <3>:                     base64 --- Base16 Base32 Base64 Base85 Data Encodings.
                                                             (line  108)
* RFC; RFC 3548 <4>:                     binascii --- Convert between binary and ASCII.
                                                             (line   45)
* RFC; RFC 3659:                         FTP Objects.        (line  159)
* RFC; RFC 3879:                         Address objects.    (line  189)
* RFC; RFC 3927:                         Address objects.    (line  120)
* RFC; RFC 3977:                         nntplib --- NNTP protocol client.
                                                             (line   13)
* RFC; RFC 3977 <1>:                     Attributes.         (line   10)
* RFC; RFC 3977 <2>:                     Methods<3>.         (line   36)
* RFC; RFC 3977 <3>:                     Methods<3>.         (line  138)
* RFC; RFC 3977 <4>:                     Methods<3>.         (line  318)
* RFC; RFC 3986:                         urllib.             (line   23)
* RFC; RFC 3986 <1>:                     New and Improved Modules.
                                                             (line  619)
* RFC; RFC 3986 <2>:                     Porting to Python 2 7.
                                                             (line   80)
* RFC; RFC 3986 <3>:                     URL Parsing.        (line  108)
* RFC; RFC 3986 <4>:                     URL Parsing.        (line  274)
* RFC; RFC 3986 <5>:                     URL Quoting.        (line  145)
* RFC; RFC 4122:                         New Improved and Removed Modules.
                                                             (line  416)
* RFC; RFC 4122 <1>:                     New Improved and Removed Modules.
                                                             (line  421)
* RFC; RFC 4122 <2>:                     uuid --- UUID objects according to RFC 4122.
                                                             (line    9)
* RFC; RFC 4122 <3>:                     uuid --- UUID objects according to RFC 4122.
                                                             (line  177)
* RFC; RFC 4122 <4>:                     uuid --- UUID objects according to RFC 4122.
                                                             (line  190)
* RFC; RFC 4180:                         csv --- CSV File Reading and Writing.
                                                             (line   11)
* RFC; RFC 4193:                         Address objects.    (line  191)
* RFC; RFC 4217:                         ftplib --- FTP protocol client.
                                                             (line   76)
* RFC; RFC 4291:                         Address objects.    (line  134)
* RFC; RFC 4366:                         Constants<7>.       (line  230)
* RFC; RFC 4380:                         Address objects.    (line  211)
* RFC; RFC 4627:                         json --- JSON encoder and decoder.
                                                             (line    7)
* RFC; RFC 4627 <1>:                     Top-level Non-Object Non-Array Values.
                                                             (line    6)
* RFC; RFC 4642:                         nntplib --- NNTP protocol client.
                                                             (line   98)
* RFC; RFC 4918:                         HTTP status codes.  (line   43)
* RFC; RFC 4918 <1>:                     HTTP status codes.  (line  130)
* RFC; RFC 4918 <2>:                     HTTP status codes.  (line  133)
* RFC; RFC 4918 <3>:                     HTTP status codes.  (line  136)
* RFC; RFC 4918 <4>:                     HTTP status codes.  (line  172)
* RFC; RFC 4954:                         SMTP Objects.       (line  132)
* RFC; RFC 4954 <1>:                     SMTP Objects.       (line  155)
* RFC; RFC 5161:                         imaplib.            (line   11)
* RFC; RFC 5161 <1>:                     IMAP4 Objects.      (line   86)
* RFC; RFC 5246:                         Constants<7>.       (line  287)
* RFC; RFC 5280:                         Other Changes.      (line   20)
* RFC; RFC 5280 <1>:                     Changes in the Python API<2>.
                                                             (line   96)
* RFC; RFC 5280 <2>:                     Certificate handling.
                                                             (line   55)
* RFC; RFC 5321:                         smtpd<3>.           (line    6)
* RFC; RFC 5321 <1>:                     email headerregistry Custom Header Objects.
                                                             (line  430)
* RFC; RFC 5321 <2>:                     smtpd --- SMTP Server.
                                                             (line   19)
* RFC; RFC 5321 <3>:                     SMTPServer Objects. (line   50)
* RFC; RFC 5321 <4>:                     SMTPServer Objects. (line   79)
* RFC; RFC 5322:                         email policy Policy Objects.
                                                             (line  127)
* RFC; RFC 5322 <1>:                     email policy Policy Objects.
                                                             (line  296)
* RFC; RFC 5322 <2>:                     email policy Policy Objects.
                                                             (line  384)
* RFC; RFC 5322 <3>:                     email policy Policy Objects.
                                                             (line  390)
* RFC; RFC 5322 <4>:                     email policy Policy Objects.
                                                             (line  397)
* RFC; RFC 5322 <5>:                     email policy Policy Objects.
                                                             (line  429)
* RFC; RFC 5322 <6>:                     email headerregistry Custom Header Objects.
                                                             (line   17)
* RFC; RFC 5322 <7>:                     email headerregistry Custom Header Objects.
                                                             (line  115)
* RFC; RFC 5322 <8>:                     email headerregistry Custom Header Objects.
                                                             (line  120)
* RFC; RFC 5322 <9>:                     email headerregistry Custom Header Objects.
                                                             (line  121)
* RFC; RFC 5322 <10>:                    email headerregistry Custom Header Objects.
                                                             (line  136)
* RFC; RFC 5322 <11>:                    email headerregistry Custom Header Objects.
                                                             (line  157)
* RFC; RFC 5322 <12>:                    email headerregistry Custom Header Objects.
                                                             (line  393)
* RFC; RFC 5322 <13>:                    email headerregistry Custom Header Objects.
                                                             (line  427)
* RFC; RFC 5322 <14>:                    email headerregistry Custom Header Objects.
                                                             (line  461)
* RFC; RFC 5322 <15>:                    SMTP Objects.       (line  308)
* RFC; RFC 5735:                         Address objects.    (line  106)
* RFC; RFC 5842:                         HTTP status codes.  (line   46)
* RFC; RFC 5842 <1>:                     HTTP status codes.  (line  175)
* RFC; RFC 5929:                         SSL Sockets.        (line  224)
* RFC; RFC 6066:                         SSL Contexts.       (line  189)
* RFC; RFC 6125:                         Certificate handling.
                                                             (line   11)
* RFC; RFC 6125 <1>:                     Certificate handling.
                                                             (line   29)
* RFC; RFC 6152:                         smtpd.              (line   17)
* RFC; RFC 6152 <1>:                     SMTPServer Objects. (line   36)
* RFC; RFC 6531:                         email.              (line   19)
* RFC; RFC 6531 <1>:                     smtpd.              (line   23)
* RFC; RFC 6531 <2>:                     smtplib.            (line   15)
* RFC; RFC 6531 <3>:                     email policy Policy Objects.
                                                             (line  401)
* RFC; RFC 6531 <4>:                     smtplib --- SMTP protocol client.
                                                             (line   59)
* RFC; RFC 6531 <5>:                     smtpd --- SMTP Server.
                                                             (line   19)
* RFC; RFC 6531 <6>:                     SMTPServer Objects. (line   25)
* RFC; RFC 6531 <7>:                     SMTPChannel Objects.
                                                             (line   21)
* RFC; RFC 6532:                         email.              (line   18)
* RFC; RFC 6532 <1>:                     email policy Policy Objects.
                                                             (line  399)
* RFC; RFC 6585:                         HTTP status codes.  (line  142)
* RFC; RFC 6585 <1>:                     HTTP status codes.  (line  145)
* RFC; RFC 6585 <2>:                     HTTP status codes.  (line  148)
* RFC; RFC 6585 <3>:                     HTTP status codes.  (line  181)
* RFC; RFC 6855:                         imaplib.            (line   12)
* RFC; RFC 6855 <1>:                     imaplib.            (line   14)
* RFC; RFC 6855 <2>:                     IMAP4 Objects.      (line   88)
* RFC; RFC 6855 <3>:                     IMAP4 Objects.      (line   90)
* RFC; RFC 6856:                         poplib.             (line    6)
* RFC; RFC 6856 <1>:                     POP3 Objects.       (line  108)
* RFC; RFC 7159:                         json --- JSON encoder and decoder.
                                                             (line    6)
* RFC; RFC 7159 <1>:                     Standard Compliance and Interoperability.
                                                             (line    6)
* RFC; RFC 7159 <2>:                     Top-level Non-Object Non-Array Values.
                                                             (line    9)
* RFC; RFC 7231:                         HTTP status codes.  (line   13)
* RFC; RFC 7231 <1>:                     HTTP status codes.  (line   16)
* RFC; RFC 7231 <2>:                     HTTP status codes.  (line   22)
* RFC; RFC 7231 <3>:                     HTTP status codes.  (line   25)
* RFC; RFC 7231 <4>:                     HTTP status codes.  (line   28)
* RFC; RFC 7231 <5>:                     HTTP status codes.  (line   31)
* RFC; RFC 7231 <6>:                     HTTP status codes.  (line   34)
* RFC; RFC 7231 <7>:                     HTTP status codes.  (line   37)
* RFC; RFC 7231 <8>:                     HTTP status codes.  (line   52)
* RFC; RFC 7231 <9>:                     HTTP status codes.  (line   55)
* RFC; RFC 7231 <10>:                    HTTP status codes.  (line   58)
* RFC; RFC 7231 <11>:                    HTTP status codes.  (line   61)
* RFC; RFC 7231 <12>:                    HTTP status codes.  (line   67)
* RFC; RFC 7231 <13>:                    HTTP status codes.  (line   70)
* RFC; RFC 7231 <14>:                    HTTP status codes.  (line   76)
* RFC; RFC 7231 <15>:                    HTTP status codes.  (line   82)
* RFC; RFC 7231 <16>:                    HTTP status codes.  (line   85)
* RFC; RFC 7231 <17>:                    HTTP status codes.  (line   88)
* RFC; RFC 7231 <18>:                    HTTP status codes.  (line   91)
* RFC; RFC 7231 <19>:                    HTTP status codes.  (line   94)
* RFC; RFC 7231 <20>:                    HTTP status codes.  (line  100)
* RFC; RFC 7231 <21>:                    HTTP status codes.  (line  103)
* RFC; RFC 7231 <22>:                    HTTP status codes.  (line  106)
* RFC; RFC 7231 <23>:                    HTTP status codes.  (line  109)
* RFC; RFC 7231 <24>:                    HTTP status codes.  (line  115)
* RFC; RFC 7231 <25>:                    HTTP status codes.  (line  118)
* RFC; RFC 7231 <26>:                    HTTP status codes.  (line  121)
* RFC; RFC 7231 <27>:                    HTTP status codes.  (line  127)
* RFC; RFC 7231 <28>:                    HTTP status codes.  (line  139)
* RFC; RFC 7231 <29>:                    HTTP status codes.  (line  151)
* RFC; RFC 7231 <30>:                    HTTP status codes.  (line  154)
* RFC; RFC 7231 <31>:                    HTTP status codes.  (line  157)
* RFC; RFC 7231 <32>:                    HTTP status codes.  (line  160)
* RFC; RFC 7231 <33>:                    HTTP status codes.  (line  163)
* RFC; RFC 7231 <34>:                    HTTP status codes.  (line  166)
* RFC; RFC 7232:                         HTTP status codes.  (line   64)
* RFC; RFC 7232 <1>:                     HTTP status codes.  (line  112)
* RFC; RFC 7233:                         HTTP status codes.  (line   40)
* RFC; RFC 7233 <1>:                     HTTP status codes.  (line  124)
* RFC; RFC 7235:                         HTTP status codes.  (line   79)
* RFC; RFC 7235 <1>:                     HTTP status codes.  (line   97)
* RFC; RFC 7238:                         HTTP status codes.  (line   73)
* RFC; RFC 7301:                         Application-Layer Protocol Negotiation Support.
                                                             (line   10)
* RFC; RFC 7301 <1>:                     Constants<7>.       (line  215)
* RFC; RFC 7301 <2>:                     SSL Contexts.       (line  160)
* RFC; RFC 821:                          smtplib --- SMTP protocol client.
                                                             (line   12)
* RFC; RFC 821 <1>:                      smtplib --- SMTP protocol client.
                                                             (line  169)
* RFC; RFC 822:                          New and Improved Modules<3>.
                                                             (line   97)
* RFC; RFC 822 <1>:                      time --- Time access and conversions.
                                                             (line  709)
* RFC; RFC 822 <2>:                      time --- Time access and conversions.
                                                             (line  712)
* RFC; RFC 822 <3>:                      email header Internationalized headers.
                                                             (line    7)
* RFC; RFC 822 <4>:                      HTTPConnection Objects.
                                                             (line  115)
* RFC; RFC 822 <5>:                      SMTP Objects.       (line   91)
* RFC; RFC 822 <6>:                      SMTP Objects.       (line  223)
* RFC; RFC 822 <7>:                      SMTP Objects.       (line  224)
* RFC; RFC 822 <8>:                      SMTP Example.       (line   10)
* RFC; RFC 822 <9>:                      The GNUTranslations class.
                                                             (line   13)
* RFC; RFC 822 <10>:                     distutils util --- Miscellaneous other utility functions.
                                                             (line  179)
* RFC; RFC 854:                          telnetlib --- Telnet client.
                                                             (line   11)
* RFC; RFC 854 <1>:                      telnetlib --- Telnet client.
                                                             (line   58)
* RFC; RFC 959:                          ftplib --- FTP protocol client.
                                                             (line   16)
* RFC; RFC 977:                          nntplib --- NNTP protocol client.
                                                             (line   13)
* RFC_4122 (in module uuid):             uuid --- UUID objects according to RFC 4122.
                                                             (line  175)
* rfile (http.server.BaseHTTPRequestHandler attribute): http server --- HTTP servers.
                                                             (line   96)
* rfind() (bytearray method):            Bytes and Bytearray Operations.
                                                             (line  157)
* rfind() (bytes method):                Bytes and Bytearray Operations.
                                                             (line  157)
* rfind() (mmap.mmap method):            mmap --- Memory-mapped file support.
                                                             (line  223)
* rfind() (str method):                  String Methods<2>.  (line  303)
* rgb_to_hls() (in module colorsys):     colorsys --- Conversions between color systems.
                                                             (line   36)
* rgb_to_hsv() (in module colorsys):     colorsys --- Conversions between color systems.
                                                             (line   44)
* rgb_to_yiq() (in module colorsys):     colorsys --- Conversions between color systems.
                                                             (line   28)
* rglob() (pathlib.Path method):         Methods<2>.         (line  306)
* right (filecmp.dircmp attribute):      The dircmp class.   (line   45)
* right() (in module turtle):            Turtle motion.      (line   40)
* RIGHTSHIFT (in module token):          token --- Constants used with Python parse trees.
                                                             (line   40)
* RIGHTSHIFTEQUAL (in module token):     token --- Constants used with Python parse trees.
                                                             (line   40)
* right_list (filecmp.dircmp attribute): The dircmp class.   (line   54)
* right_only (filecmp.dircmp attribute): The dircmp class.   (line   67)
* rindex() (bytearray method):           Bytes and Bytearray Operations.
                                                             (line  171)
* rindex() (bytes method):               Bytes and Bytearray Operations.
                                                             (line  171)
* rindex() (str method):                 String Methods<2>.  (line  310)
* rjust() (bytearray method):            Bytes and Bytearray Operations.
                                                             (line  277)
* rjust() (bytes method):                Bytes and Bytearray Operations.
                                                             (line  277)
* rjust() (str method):                  String Methods<2>.  (line  315)
* rlcompleter (module):                  rlcompleter --- Completion function for GNU readline.
                                                             (line    6)
* rlecode_hqx() (in module binascii):    binascii --- Convert between binary and ASCII.
                                                             (line   90)
* rledecode_hqx() (in module binascii):  binascii --- Convert between binary and ASCII.
                                                             (line   78)
* RLIMIT_AS (in module resource):        Resource Limits.    (line  138)
* RLIMIT_CORE (in module resource):      Resource Limits.    (line   83)
* RLIMIT_CPU (in module resource):       Resource Limits.    (line   90)
* RLIMIT_DATA (in module resource):      Resource Limits.    (line  103)
* RLIMIT_FSIZE (in module resource):     Resource Limits.    (line   98)
* RLIMIT_MEMLOCK (in module resource):   Resource Limits.    (line  130)
* RLIMIT_MSGQUEUE (in module resource):  Resource Limits.    (line  143)
* RLIMIT_NICE (in module resource):      Resource Limits.    (line  151)
* RLIMIT_NOFILE (in module resource):    Resource Limits.    (line  121)
* RLIMIT_NPROC (in module resource):     Resource Limits.    (line  117)
* RLIMIT_NPTS (in module resource):      Resource Limits.    (line  206)
* RLIMIT_OFILE (in module resource):     Resource Limits.    (line  126)
* RLIMIT_RSS (in module resource):       Resource Limits.    (line  112)
* RLIMIT_RTPRIO (in module resource):    Resource Limits.    (line  160)
* RLIMIT_RTTIME (in module resource):    Resource Limits.    (line  168)
* RLIMIT_SBSIZE (in module resource):    Resource Limits.    (line  185)
* RLIMIT_SIGPENDING (in module resource): Resource Limits.   (line  177)
* RLIMIT_STACK (in module resource):     Resource Limits.    (line  107)
* RLIMIT_SWAP (in module resource):      Resource Limits.    (line  195)
* RLIMIT_VMEM (in module resource):      Resource Limits.    (line  134)
* RLIM_INFINITY (in module resource):    Resource Limits.    (line   20)
* RLock (class in multiprocessing):      Synchronization primitives.
                                                             (line  102)
* RLock (class in threading):            RLock Objects.      (line   23)
* RLock() (multiprocessing.managers.SyncManager method): Managers.
                                                             (line  184)
* rmd() (ftplib.FTP method):             FTP Objects.        (line  216)
* rmdir() (in module os):                Files and Directories.
                                                             (line  573)
* rmdir() (pathlib.Path method):         Methods<2>.         (line  318)
* RMFF:                                  chunk --- Read IFF chunked data.
                                                             (line    6)
* rms() (in module audioop):             audioop --- Manipulate raw audio data.
                                                             (line  191)
* rmtree() (in module shutil):           Directory and files operations.
                                                             (line  205)
* RobotFileParser (class in urllib.robotparser): urllib robotparser --- Parser for robots txt.
                                                             (line   12)
* robots.txt:                            urllib robotparser --- Parser for robots txt.
                                                             (line    6)
* rollback() (sqlite3.Connection method): Connection Objects.
                                                             (line   40)
* rotate() (collections.deque method):   deque objects.      (line  109)
* rotate() (decimal.Context method):     Context objects.    (line  477)
* rotate() (decimal.Decimal method):     Decimal objects.    (line  511)
* rotate() (logging.handlers.BaseRotatingHandler method): BaseRotatingHandler.
                                                             (line   58)
* RotatingFileHandler (class in logging.handlers): RotatingFileHandler.
                                                             (line    9)
* rotation_filename() (logging.handlers.BaseRotatingHandler method): BaseRotatingHandler.
                                                             (line   41)
* rotator (logging.handlers.BaseRotatingHandler attribute): BaseRotatingHandler.
                                                             (line   32)
* ROT_THREE (opcode):                    Python Bytecode Instructions.
                                                             (line   67)
* ROT_TWO (opcode):                      Python Bytecode Instructions.
                                                             (line   63)
* round() (built-in function):           Built-in Functions. (line 1246)
* Rounded (class in decimal):            Signals.            (line   77)
* ROUND_05UP (in module decimal):        Rounding modes.     (line   34)
* ROUND_CEILING (in module decimal):     Rounding modes.     (line    6)
* ROUND_DOWN (in module decimal):        Rounding modes.     (line   10)
* ROUND_FLOOR (in module decimal):       Rounding modes.     (line   14)
* ROUND_HALF_DOWN (in module decimal):   Rounding modes.     (line   18)
* ROUND_HALF_EVEN (in module decimal):   Rounding modes.     (line   22)
* ROUND_HALF_UP (in module decimal):     Rounding modes.     (line   26)
* ROUND_UP (in module decimal):          Rounding modes.     (line   30)
* Row (class in sqlite3):                Row Objects.        (line    6)
* rowcount (sqlite3.Cursor attribute):   Cursor Objects.     (line  171)
* row_factory (sqlite3.Connection attribute): Connection Objects.
                                                             (line  283)
* RPAR (in module token):                token --- Constants used with Python parse trees.
                                                             (line   40)
* rpartition() (bytearray method):       Bytes and Bytearray Operations.
                                                             (line  183)
* rpartition() (bytes method):           Bytes and Bytearray Operations.
                                                             (line  183)
* rpartition() (str method):             String Methods<2>.  (line  322)
* rpc_paths (xmlrpc.server.SimpleXMLRPCRequestHandler attribute): SimpleXMLRPCServer Objects.
                                                             (line   55)
* rpop() (poplib.POP3 method):           POP3 Objects.       (line   46)
* rset() (poplib.POP3 method):           POP3 Objects.       (line   74)
* rshift() (in module operator):         operator --- Standard operators as functions.
                                                             (line  146)
* rsplit() (bytearray method):           Bytes and Bytearray Operations.
                                                             (line  289)
* rsplit() (bytes method):               Bytes and Bytearray Operations.
                                                             (line  289)
* rsplit() (str method):                 String Methods<2>.  (line  330)
* RSQB (in module token):                token --- Constants used with Python parse trees.
                                                             (line   40)
* rstrip() (bytearray method):           Bytes and Bytearray Operations.
                                                             (line  300)
* rstrip() (bytes method):               Bytes and Bytearray Operations.
                                                             (line  300)
* rstrip() (str method):                 String Methods<2>.  (line  339)
* rt() (in module turtle):               Turtle motion.      (line   40)
* RTLD_DEEPBIND (in module os):          Miscellaneous System Information.
                                                             (line  141)
* RTLD_GLOBAL (in module os):            Miscellaneous System Information.
                                                             (line  141)
* RTLD_LAZY (in module os):              Miscellaneous System Information.
                                                             (line  141)
* RTLD_LOCAL (in module os):             Miscellaneous System Information.
                                                             (line  141)
* RTLD_NODELETE (in module os):          Miscellaneous System Information.
                                                             (line  141)
* RTLD_NOLOAD (in module os):            Miscellaneous System Information.
                                                             (line  141)
* RTLD_NOW (in module os):               Miscellaneous System Information.
                                                             (line  141)
* ruler (cmd.Cmd attribute):             Cmd Objects.        (line  164)
* run (pdb command):                     Debugger Commands.  (line  321)
* Run script:                            Format menu Editor window only.
                                                             (line   51)
* run() (bdb.Bdb method):                bdb --- Debugger framework.
                                                             (line  363)
* run() (distutils.cmd.Command method):  Creating a new Distutils command.
                                                             (line   40)
* run() (doctest.DocTestRunner method):  DocTestRunner objects.
                                                             (line   95)
* run() (in module pdb):                 pdb --- The Python Debugger.
                                                             (line   86)
* run() (in module profile):             profile and cProfile Module Reference.
                                                             (line    9)
* run() (in module subprocess):          Using the subprocess Module.
                                                             (line   15)
* run() (multiprocessing.Process method): Process and exceptions.
                                                             (line   33)
* run() (pdb.Pdb method):                pdb --- The Python Debugger.
                                                             (line  163)
* run() (profile.Profile method):        profile and cProfile Module Reference.
                                                             (line   85)
* run() (sched.scheduler method):        Scheduler Objects.  (line   50)
* run() (threading.Thread method):       Thread Objects.     (line   96)
* run() (trace.Trace method):            Programmatic Interface.
                                                             (line   22)
* run() (unittest.TestCase method):      Test cases.         (line   83)
* run() (unittest.TestSuite method):     Grouping tests.     (line   41)
* run() (unittest.TextTestRunner method): Loading and running tests.
                                                             (line  460)
* run() (wsgiref.handlers.BaseHandler method): wsgiref handlers -- server/gateway base classes.
                                                             (line   95)
* runcall() (bdb.Bdb method):            bdb --- Debugger framework.
                                                             (line  380)
* runcall() (in module pdb):             pdb --- The Python Debugger.
                                                             (line  105)
* runcall() (pdb.Pdb method):            pdb --- The Python Debugger.
                                                             (line  163)
* runcall() (profile.Profile method):    profile and cProfile Module Reference.
                                                             (line   94)
* runcode() (code.InteractiveInterpreter method): Interactive Interpreter Objects.
                                                             (line   33)
* runctx() (bdb.Bdb method):             bdb --- Debugger framework.
                                                             (line  375)
* runctx() (in module profile):          profile and cProfile Module Reference.
                                                             (line   23)
* runctx() (profile.Profile method):     profile and cProfile Module Reference.
                                                             (line   89)
* runctx() (trace.Trace method):         Programmatic Interface.
                                                             (line   29)
* runeval() (bdb.Bdb method):            bdb --- Debugger framework.
                                                             (line  369)
* runeval() (in module pdb):             pdb --- The Python Debugger.
                                                             (line   98)
* runeval() (pdb.Pdb method):            pdb --- The Python Debugger.
                                                             (line  163)
* runfunc() (trace.Trace method):        Programmatic Interface.
                                                             (line   36)
* running() (concurrent.futures.Future method): Future Objects.
                                                             (line   27)
* runpy (module):                        runpy --- Locating and executing Python modules.
                                                             (line    6)
* runsource() (code.InteractiveInterpreter method): Interactive Interpreter Objects.
                                                             (line    6)
* RuntimeError:                          Concrete exceptions.
                                                             (line  187)
* RuntimeWarning:                        Warnings.           (line   30)
* runtime_library_dir_option() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  230)
* run_coroutine_threadsafe() (in module asyncio): Task functions.
                                                             (line   82)
* run_docstring_examples() (in module doctest): Basic API.   (line  127)
* run_doctest() (in module test.support): test support --- Utilities for the Python test suite.
                                                             (line   92)
* run_forever() (asyncio.BaseEventLoop method): Run an event loop.
                                                             (line    6)
* run_in_executor() (asyncio.BaseEventLoop method): Executor.
                                                             (line   10)
* run_module() (in module runpy):        runpy --- Locating and executing Python modules.
                                                             (line   27)
* run_path() (in module runpy):          runpy --- Locating and executing Python modules.
                                                             (line   95)
* run_script() (modulefinder.ModuleFinder method): modulefinder --- Find modules used by a script.
                                                             (line   44)
* run_setup() (in module distutils.core): distutils core --- Core Distutils functionality.
                                                             (line  121)
* run_unittest() (in module test.support): test support --- Utilities for the Python test suite.
                                                             (line   76)
* run_until_complete() (asyncio.BaseEventLoop method): Run an event loop.
                                                             (line   20)
* run_with_locale() (in module test.support): test support --- Utilities for the Python test suite.
                                                             (line  246)
* RUSAGE_BOTH (in module resource):      Resource Usage.     (line  108)
* RUSAGE_CHILDREN (in module resource):  Resource Usage.     (line  102)
* RUSAGE_SELF (in module resource):      Resource Usage.     (line   96)
* RUSAGE_THREAD (in module resource):    Resource Usage.     (line  114)
* R_OK (in module os):                   Files and Directories.
                                                             (line   98)
* S (in module re):                      Module Contents.    (line   90)
* saferepr() (in module pprint):         pprint --- Data pretty printer.
                                                             (line  124)
* safe_substitute() (string.Template method): Template strings.
                                                             (line   44)
* samefile() (in module os.path):        os path --- Common pathname manipulations.
                                                             (line  265)
* samefile() (pathlib.Path method):      Methods<2>.         (line  322)
* SameFileError:                         Directory and files operations.
                                                             (line   43)
* sameopenfile() (in module os.path):    os path --- Common pathname manipulations.
                                                             (line  279)
* samestat() (in module os.path):        os path --- Common pathname manipulations.
                                                             (line  288)
* same_files (filecmp.dircmp attribute): The dircmp class.   (line   85)
* same_quantum() (decimal.Context method): Context objects.  (line  481)
* same_quantum() (decimal.Decimal method): Decimal objects.  (line  523)
* sample() (in module random):           random --- Generate pseudo-random numbers.
                                                             (line  136)
* save() (http.cookiejar.FileCookieJar method): CookieJar and FileCookieJar Objects.
                                                             (line  105)
* SaveKey() (in module winreg):          Functions<9>.       (line  349)
* savetty() (in module curses):          Functions<2>.       (line  423)
* SAX2DOM (class in xml.dom.pulldom):    xml dom pulldom --- Support for building partial DOM trees.
                                                             (line   70)
* SAXException:                          xml sax --- Support for SAX2 parsers.
                                                             (line   72)
* SAXNotRecognizedException:             xml sax --- Support for SAX2 parsers.
                                                             (line   97)
* SAXNotSupportedException:              xml sax --- Support for SAX2 parsers.
                                                             (line  104)
* SAXParseException:                     xml sax --- Support for SAX2 parsers.
                                                             (line   89)
* scaleb() (decimal.Context method):     Context objects.    (line  485)
* scaleb() (decimal.Decimal method):     Decimal objects.    (line  533)
* scandir() (in module os):              Files and Directories.
                                                             (line  585)
* scanf():                               Simulating scanf.   (line    6)
* sched (module):                        sched --- Event scheduler.
                                                             (line    6)
* scheduler (class in sched):            sched --- Event scheduler.
                                                             (line   13)
* SCHED_BATCH (in module os):            Interface to the scheduler.
                                                             (line   19)
* SCHED_FIFO (in module os):             Interface to the scheduler.
                                                             (line   32)
* sched_getaffinity() (in module os):    Interface to the scheduler.
                                                             (line  109)
* sched_getparam() (in module os):       Interface to the scheduler.
                                                             (line   87)
* sched_getscheduler() (in module os):   Interface to the scheduler.
                                                             (line   75)
* sched_get_priority_max() (in module os): Interface to the scheduler.
                                                             (line   63)
* sched_get_priority_min() (in module os): Interface to the scheduler.
                                                             (line   58)
* SCHED_IDLE (in module os):             Interface to the scheduler.
                                                             (line   24)
* SCHED_OTHER (in module os):            Interface to the scheduler.
                                                             (line   15)
* sched_param (class in os):             Interface to the scheduler.
                                                             (line   46)
* sched_priority (os.sched_param attribute): Interface to the scheduler.
                                                             (line   54)
* SCHED_RESET_ON_FORK (in module os):    Interface to the scheduler.
                                                             (line   40)
* SCHED_RR (in module os):               Interface to the scheduler.
                                                             (line   36)
* sched_rr_get_interval() (in module os): Interface to the scheduler.
                                                             (line   93)
* sched_setaffinity() (in module os):    Interface to the scheduler.
                                                             (line  102)
* sched_setparam() (in module os):       Interface to the scheduler.
                                                             (line   81)
* sched_setscheduler() (in module os):   Interface to the scheduler.
                                                             (line   68)
* SCHED_SPORADIC (in module os):         Interface to the scheduler.
                                                             (line   28)
* sched_yield() (in module os):          Interface to the scheduler.
                                                             (line   98)
* schema (in module msilib):             Precomputed tables. (line   10)
* scope:                                 Naming and binding. (line    6)
* scope <1>:                             Resolution of names.
                                                             (line    6)
* Screen (class in turtle):              Public classes.     (line   30)
* screensize() (in module turtle):       Window control.     (line   61)
* script_from_examples() (in module doctest): Debugging.     (line   72)
* scroll() (curses.window method):       Window Objects.     (line  474)
* ScrolledCanvas (class in turtle):      Public classes.     (line   34)
* scrollok() (curses.window method):     Window Objects.     (line  478)
* search() (imaplib.IMAP4 method):       IMAP4 Objects.      (line  210)
* search() (in module re):               Module Contents.    (line  117)
* search() (re.regex method):            Regular Expression Objects.
                                                             (line    9)
* second (datetime.datetime attribute):  datetime Objects.   (line  197)
* second (datetime.time attribute):      time Objects.       (line   56)
* secrets (module):                      secrets --- Generate secure random numbers for managing secrets.
                                                             (line    6)
* SECTCRE (in module configparser):      Customizing Parser Behaviour.
                                                             (line  326)
* sections() (configparser.ConfigParser method): ConfigParser Objects.
                                                             (line   75)
* secure (http.cookiejar.Cookie attribute): Cookie Objects<2>.
                                                             (line   44)
* secure hash algorithm, SHA1, SHA224, SHA256, SHA384, SHA512: hashlib --- Secure hashes and message digests.
                                                             (line    6)
* Secure Sockets Layer:                  ssl --- TLS/SSL wrapper for socket objects.
                                                             (line    6)
* see() (tkinter.ttk.Treeview method):   ttk Treeview.       (line  251)
* seed() (in module random):             random --- Generate pseudo-random numbers.
                                                             (line   54)
* seek() (chunk.Chunk method):           chunk --- Read IFF chunked data.
                                                             (line   88)
* seek() (io.IOBase method):             I/O Base Classes.   (line  104)
* seek() (io.TextIOBase method):         Text I/O<2>.        (line   67)
* seek() (mmap.mmap method):             mmap --- Memory-mapped file support.
                                                             (line  233)
* seekable() (io.IOBase method):         I/O Base Classes.   (line  129)
* SEEK_CUR (in module os):               File Descriptor Operations.
                                                             (line  210)
* SEEK_END (in module os):               File Descriptor Operations.
                                                             (line  210)
* SEEK_SET (in module os):               File Descriptor Operations.
                                                             (line  210)
* seen_greeting (smtpd.SMTPChannel attribute): SMTPChannel Objects.
                                                             (line   68)
* Select (class in tkinter.tix):         Basic Widgets.      (line   59)
* select (module):                       select --- Waiting for I/O completion.
                                                             (line    6)
* select() (imaplib.IMAP4 method):       IMAP4 Objects.      (line  227)
* select() (in module select):           select --- Waiting for I/O completion.
                                                             (line   97)
* select() (selectors.BaseSelector method): Classes<3>.      (line  108)
* select() (tkinter.ttk.Notebook method): ttk Notebook.      (line   53)
* selected_alpn_protocol() (ssl.SSLSocket method): SSL Sockets.
                                                             (line  230)
* selected_npn_protocol() (ssl.SSLSocket method): SSL Sockets.
                                                             (line  240)
* selection() (tkinter.ttk.Treeview method): ttk Treeview.   (line  259)
* selection_add() (tkinter.ttk.Treeview method): ttk Treeview.
                                                             (line  269)
* selection_remove() (tkinter.ttk.Treeview method): ttk Treeview.
                                                             (line  273)
* selection_set() (tkinter.ttk.Treeview method): ttk Treeview.
                                                             (line  265)
* selection_toggle() (tkinter.ttk.Treeview method): ttk Treeview.
                                                             (line  277)
* selector (urllib.request.Request attribute): Request Objects.
                                                             (line   34)
* SelectorEventLoop (class in asyncio):  Available event loops.
                                                             (line    9)
* SelectorKey (class in selectors):      Classes<3>.         (line   29)
* selectors (module):                    selectors -- High-level I/O multiplexing.
                                                             (line    6)
* SelectSelector (class in selectors):   Classes<3>.         (line  167)
* Semaphore (class in asyncio):          Semaphore.          (line    6)
* Semaphore (class in multiprocessing):  Synchronization primitives.
                                                             (line  167)
* Semaphore (class in threading):        Semaphore Objects.  (line   19)
* Semaphore() (multiprocessing.managers.SyncManager method): Managers.
                                                             (line  189)
* semaphores, binary:                    _thread --- Low-level threading API.
                                                             (line    6)
* SEMI (in module token):                token --- Constants used with Python parse trees.
                                                             (line   40)
* send() (asyncore.dispatcher method):   asyncore --- Asynchronous socket handler.
                                                             (line  198)
* send() (coroutine method):             Coroutine Objects.  (line   23)
* send() (generator method):             Generator-iterator methods.
                                                             (line   27)
* send() (http.client.HTTPConnection method): HTTPConnection Objects.
                                                             (line  128)
* send() (imaplib.IMAP4 method):         IMAP4 Objects.      (line  234)
* send() (logging.handlers.DatagramHandler method): DatagramHandler.
                                                             (line   34)
* send() (logging.handlers.SocketHandler method): SocketHandler.
                                                             (line   58)
* send() (multiprocessing.Connection method): Connection Objects<2>.
                                                             (line   15)
* send() (socket.socket method):         Socket Objects.     (line  354)
* sendall() (socket.socket method):      Socket Objects.     (line  370)
* sendcmd() (ftplib.FTP method):         FTP Objects.        (line   63)
* sendfile() (in module os):             File Descriptor Operations.
                                                             (line  419)
* sendfile() (socket.socket method):     Socket Objects.     (line  444)
* sendfile() (wsgiref.handlers.BaseHandler method): wsgiref handlers -- server/gateway base classes.
                                                             (line  272)
* sendmail() (smtplib.SMTP method):      SMTP Objects.       (line  220)
* sendmsg() (socket.socket method):      Socket Objects.     (line  405)
* sendto() (asyncio.DatagramTransport method): DatagramTransport.
                                                             (line    6)
* sendto() (socket.socket method):       Socket Objects.     (line  389)
* send_bytes() (multiprocessing.Connection method): Connection Objects<2>.
                                                             (line   54)
* send_error() (http.server.BaseHTTPRequestHandler method): http server --- HTTP servers.
                                                             (line  188)
* send_flowing_data() (formatter.writer method): The Writer Interface.
                                                             (line   76)
* send_header() (http.server.BaseHTTPRequestHandler method): http server --- HTTP servers.
                                                             (line  221)
* send_hor_rule() (formatter.writer method): The Writer Interface.
                                                             (line   68)
* send_label_data() (formatter.writer method): The Writer Interface.
                                                             (line   92)
* send_line_break() (formatter.writer method): The Writer Interface.
                                                             (line   54)
* send_literal_data() (formatter.writer method): The Writer Interface.
                                                             (line   83)
* send_message() (smtplib.SMTP method):  SMTP Objects.       (line  298)
* send_paragraph() (formatter.writer method): The Writer Interface.
                                                             (line   58)
* send_response() (http.server.BaseHTTPRequestHandler method): http server --- HTTP servers.
                                                             (line  205)
* send_response_only() (http.server.BaseHTTPRequestHandler method): http server --- HTTP servers.
                                                             (line  234)
* send_signal() (asyncio.asyncio.subprocess.Process method): Process.
                                                             (line   76)
* send_signal() (asyncio.BaseSubprocessTransport method): BaseSubprocessTransport.
                                                             (line   46)
* send_signal() (subprocess.Popen method): Popen Objects.    (line   78)
* sentinel (in module unittest.mock):    sentinel.           (line    6)
* sentinel (multiprocessing.Process attribute): Process and exceptions.
                                                             (line  130)
* sep (in module os):                    Miscellaneous System Information.
                                                             (line   93)
* sequence:                              Glossary.           (line 1000)
* Sequence (class in collections.abc):   Collections Abstract Base Classes.
                                                             (line  129)
* Sequence (class in typing):            Classes functions and decorators.
                                                             (line  207)
* sequence (in module msilib):           Precomputed tables. (line   16)
* sequence2st() (in module parser):      Creating ST Objects.
                                                             (line   26)
* sequence; item:                        Subscriptions.      (line    6)
* sequence; iteration:                   Iterator Types.     (line    6)
* SequenceMatcher (class in difflib):    difflib --- Helpers for computing deltas.
                                                             (line   14)
* SequenceMatcher (class in difflib) <1>: SequenceMatcher Objects.
                                                             (line    8)
* serializing; objects:                  pickle --- Python object serialization.
                                                             (line    6)
* Server (class in asyncio):             Server.             (line    6)
* server (http.server.BaseHTTPRequestHandler attribute): http server --- HTTP servers.
                                                             (line   57)
* ServerProxy (class in xmlrpc.client):  xmlrpc client --- XML-RPC client access.
                                                             (line   24)
* server_activate() (socketserver.BaseServer method): Server Objects.
                                                             (line  162)
* server_address (socketserver.BaseServer attribute): Server Objects.
                                                             (line   74)
* server_bind() (socketserver.BaseServer method): Server Objects.
                                                             (line  168)
* server_close() (socketserver.BaseServer method): Server Objects.
                                                             (line   59)
* server_hostname (ssl.SSLSocket attribute): SSL Sockets.    (line  289)
* server_side (ssl.SSLSocket attribute): SSL Sockets.        (line  282)
* server_software (wsgiref.handlers.BaseHandler attribute): wsgiref handlers -- server/gateway base classes.
                                                             (line  173)
* server_version (http.server.BaseHTTPRequestHandler attribute): http server --- HTTP servers.
                                                             (line  109)
* server_version (http.server.SimpleHTTPRequestHandler attribute): http server --- HTTP servers.
                                                             (line  323)
* serve_forever() (socketserver.BaseServer method): Server Objects.
                                                             (line   32)
* service_actions() (socketserver.BaseServer method): Server Objects.
                                                             (line   45)
* session_stats() (ssl.SSLContext method): SSL Contexts.     (line  308)
* set (built-in class):                  Set Types --- set frozenset.
                                                             (line   33)
* Set (class in collections.abc):        Collections Abstract Base Classes.
                                                             (line  146)
* Set (class in typing):                 Classes functions and decorators.
                                                             (line  242)
* Set Breakpoint:                        Help menu Shell and Editor.
                                                             (line   29)
* set() (asyncio.Event method):          Event.              (line   28)
* set() (configparser.ConfigParser method): ConfigParser Objects.
                                                             (line  235)
* set() (configparser.RawConfigParser method): RawConfigParser Objects.
                                                             (line   32)
* set() (http.cookies.Morsel method):    Morsel Objects.     (line   60)
* set() (ossaudiodev.oss_mixer_device method): Mixer Device Objects.
                                                             (line   72)
* set() (test.support.EnvironmentVarGuard method): test support --- Utilities for the Python test suite.
                                                             (line  440)
* set() (threading.Event method):        Event Objects.      (line   27)
* set() (tkinter.ttk.Combobox method):   ttk Combobox.       (line   19)
* set() (tkinter.ttk.Treeview method):   ttk Treeview.       (line  281)
* set() (xml.etree.ElementTree.Element method): Element Objects.
                                                             (line   81)
* set; display:                          Set displays.       (line    6)
* setacl() (imaplib.IMAP4 method):       IMAP4 Objects.      (line  238)
* setannotation() (imaplib.IMAP4 method): IMAP4 Objects.     (line  243)
* setattr() (built-in function):         Built-in Functions. (line 1279)
* setAttribute() (xml.dom.Element method): Element Objects<2>.
                                                             (line   67)
* setAttributeNode() (xml.dom.Element method): Element Objects<2>.
                                                             (line   71)
* setAttributeNodeNS() (xml.dom.Element method): Element Objects<2>.
                                                             (line   79)
* setAttributeNS() (xml.dom.Element method): Element Objects<2>.
                                                             (line   87)
* SetBase() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line   22)
* setblocking() (socket.socket method):  Socket Objects.     (line  468)
* setByteStream() (xml.sax.xmlreader.InputSource method): InputSource Objects.
                                                             (line   36)
* setcbreak() (in module tty):           tty --- Terminal control functions.
                                                             (line   20)
* setCharacterStream() (xml.sax.xmlreader.InputSource method): InputSource Objects.
                                                             (line   55)
* setcheckinterval() (in module sys):    sys --- System-specific parameters and functions.
                                                             (line  960)
* setcomptype() (aifc.aifc method):      aifc --- Read and write AIFF and AIFC files.
                                                             (line  162)
* setcomptype() (sunau.AU_write method): AU_write Objects.   (line   28)
* setcomptype() (wave.Wave_write method): Wave_write Objects.
                                                             (line   51)
* setContentHandler() (xml.sax.xmlreader.XMLReader method): XMLReader Objects.
                                                             (line   23)
* setcontext() (in module decimal):      Context objects.    (line   18)
* setDaemon() (threading.Thread method): Thread Objects.     (line  175)
* setdefault() (dict method):            Mapping Types --- dict.
                                                             (line  174)
* setdefault() (http.cookies.Morsel method): Morsel Objects. (line  107)
* setdefaulttimeout() (in module socket): Other functions<2>.
                                                             (line  285)
* setdlopenflags() (in module sys):      sys --- System-specific parameters and functions.
                                                             (line  976)
* setDocumentLocator() (xml.sax.handler.ContentHandler method): ContentHandler Objects.
                                                             (line   10)
* setDTDHandler() (xml.sax.xmlreader.XMLReader method): XMLReader Objects.
                                                             (line   32)
* setegid() (in module os):              Process Parameters. (line  298)
* setEncoding() (xml.sax.xmlreader.InputSource method): InputSource Objects.
                                                             (line   22)
* setEntityResolver() (xml.sax.xmlreader.XMLReader method): XMLReader Objects.
                                                             (line   41)
* setErrorHandler() (xml.sax.xmlreader.XMLReader method): XMLReader Objects.
                                                             (line   52)
* seteuid() (in module os):              Process Parameters. (line  304)
* setFeature() (xml.sax.xmlreader.XMLReader method): XMLReader Objects.
                                                             (line   74)
* setfirstweekday() (in module calendar): calendar --- General calendar-related functions.
                                                             (line  188)
* setfmt() (ossaudiodev.oss_audio_device method): Audio Device Objects.
                                                             (line  125)
* setFormatter() (logging.Handler method): Handler Objects.  (line   44)
* setframerate() (aifc.aifc method):     aifc --- Read and write AIFF and AIFC files.
                                                             (line  152)
* setframerate() (sunau.AU_write method): AU_write Objects.  (line   19)
* setframerate() (wave.Wave_write method): Wave_write Objects.
                                                             (line   38)
* setgid() (in module os):               Process Parameters. (line  310)
* setgroups() (in module os):            Process Parameters. (line  316)
* seth() (in module turtle):             Turtle motion.      (line  132)
* setheading() (in module turtle):       Turtle motion.      (line  132)
* sethostname() (in module socket):      Other functions<2>. (line  292)
* SetInteger() (msilib.Record method):   Record Objects.     (line   32)
* setitem() (in module operator):        operator --- Standard operators as functions.
                                                             (line  199)
* setitimer() (in module signal):        Module contents<2>. (line  208)
* setLevel() (logging.Handler method):   Handler Objects.    (line   31)
* setLevel() (logging.Logger method):    Logger Objects.     (line   49)
* setlocale() (in module locale):        locale --- Internationalization services.
                                                             (line   23)
* setLocale() (xml.sax.xmlreader.XMLReader method): XMLReader Objects.
                                                             (line   58)
* setLoggerClass() (in module logging):  Module-Level Functions.
                                                             (line  309)
* setlogmask() (in module syslog):       syslog --- Unix syslog library routines.
                                                             (line   62)
* setLogRecordFactory() (in module logging): Module-Level Functions.
                                                             (line  318)
* setmark() (aifc.aifc method):          aifc --- Read and write AIFF and AIFC files.
                                                             (line  180)
* setMaxConns() (urllib.request.CacheFTPHandler method): CacheFTPHandler Objects.
                                                             (line   13)
* setmode() (in module msvcrt):          File Operations.    (line   35)
* setName() (threading.Thread method):   Thread Objects.     (line  138)
* setnchannels() (aifc.aifc method):     aifc --- Read and write AIFF and AIFC files.
                                                             (line  144)
* setnchannels() (sunau.AU_write method): AU_write Objects.  (line    9)
* setnchannels() (wave.Wave_write method): Wave_write Objects.
                                                             (line   30)
* setnframes() (aifc.aifc method):       aifc --- Read and write AIFF and AIFC files.
                                                             (line  156)
* setnframes() (sunau.AU_write method):  AU_write Objects.   (line   23)
* setnframes() (wave.Wave_write method): Wave_write Objects. (line   45)
* SetParamEntityParsing() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line   54)
* setparameters() (ossaudiodev.oss_audio_device method): Audio Device Objects.
                                                             (line  189)
* setparams() (aifc.aifc method):        aifc --- Read and write AIFF and AIFC files.
                                                             (line  172)
* setparams() (sunau.AU_write method):   AU_write Objects.   (line   33)
* setparams() (wave.Wave_write method):  Wave_write Objects. (line   56)
* setpassword() (zipfile.ZipFile method): ZipFile Objects.   (line  156)
* setpgid() (in module os):              Process Parameters. (line  339)
* setpgrp() (in module os):              Process Parameters. (line  331)
* setpos() (aifc.aifc method):           aifc --- Read and write AIFF and AIFC files.
                                                             (line  112)
* setpos() (in module turtle):           Turtle motion.      (line   74)
* setpos() (sunau.AU_read method):       AU_read Objects.    (line   60)
* setpos() (wave.Wave_read method):      Wave_read Objects.  (line   69)
* setposition() (in module turtle):      Turtle motion.      (line   74)
* setpriority() (in module os):          Process Parameters. (line  347)
* setprofile() (in module sys):          sys --- System-specific parameters and functions.
                                                             (line  989)
* setprofile() (in module threading):    threading --- Thread-based parallelism.
                                                             (line   69)
* SetProperty() (msilib.SummaryInformation method): Summary Information Objects.
                                                             (line   22)
* setProperty() (xml.sax.xmlreader.XMLReader method): XMLReader Objects.
                                                             (line   88)
* setPublicId() (xml.sax.xmlreader.InputSource method): InputSource Objects.
                                                             (line    6)
* setquota() (imaplib.IMAP4 method):     IMAP4 Objects.      (line  248)
* setraw() (in module tty):              tty --- Terminal control functions.
                                                             (line   14)
* setrecursionlimit() (in module sys):   sys --- System-specific parameters and functions.
                                                             (line 1003)
* setregid() (in module os):             Process Parameters. (line  364)
* setresgid() (in module os):            Process Parameters. (line  370)
* setresuid() (in module os):            Process Parameters. (line  378)
* setreuid() (in module os):             Process Parameters. (line  386)
* setrlimit() (in module resource):      Resource Limits.    (line   31)
* setsampwidth() (aifc.aifc method):     aifc --- Read and write AIFF and AIFC files.
                                                             (line  148)
* setsampwidth() (sunau.AU_write method): AU_write Objects.  (line   13)
* setsampwidth() (wave.Wave_write method): Wave_write Objects.
                                                             (line   34)
* setscrreg() (curses.window method):    Window Objects.     (line  488)
* setsid() (in module os):               Process Parameters. (line  399)
* setsockopt() (socket.socket method):   Socket Objects.     (line  495)
* setstate() (codecs.IncrementalDecoder method): IncrementalDecoder Objects.
                                                             (line   60)
* setstate() (codecs.IncrementalEncoder method): IncrementalEncoder Objects.
                                                             (line   50)
* setstate() (in module random):         random --- Generate pseudo-random numbers.
                                                             (line   79)
* SetStream() (msilib.Record method):    Record Objects.     (line   26)
* SetString() (msilib.Record method):    Record Objects.     (line   21)
* setswitchinterval() (in module sys):   sys --- System-specific parameters and functions.
                                                             (line 1021)
* setswitchinterval() (in module sys) <1>: Thread State and the Global Interpreter Lock.
                                                             (line   15)
* setSystemId() (xml.sax.xmlreader.InputSource method): InputSource Objects.
                                                             (line   14)
* setsyx() (in module curses):           Functions<2>.       (line  428)
* setTarget() (logging.handlers.MemoryHandler method): MemoryHandler.
                                                             (line   60)
* settiltangle() (in module turtle):     Appearance.         (line  118)
* settimeout() (socket.socket method):   Socket Objects.     (line  482)
* setTimeout() (urllib.request.CacheFTPHandler method): CacheFTPHandler Objects.
                                                             (line    9)
* settrace() (in module sys):            sys --- System-specific parameters and functions.
                                                             (line 1034)
* settrace() (in module threading):      threading --- Thread-based parallelism.
                                                             (line   62)
* settscdump() (in module sys):          sys --- System-specific parameters and functions.
                                                             (line 1112)
* setuid() (in module os):               Process Parameters. (line  406)
* setundobuffer() (in module turtle):    Special Turtle methods.
                                                             (line   61)
* setup() (in module distutils.core):    distutils core --- Core Distutils functionality.
                                                             (line   12)
* setup() (in module turtle):            Methods specific to Screen not inherited from TurtleScreen.
                                                             (line   20)
* setup() (socketserver.BaseRequestHandler method): Request Handler Objects.
                                                             (line   14)
* setUp() (unittest.TestCase method):    Test cases.         (line   33)
* setUpClass() (unittest.TestCase method): Test cases.       (line   55)
* setupterm() (in module curses):        Functions<2>.       (line  433)
* SETUP_ASYNC_WITH (opcode):             Python Bytecode Instructions.
                                                             (line  271)
* setup_environ() (wsgiref.handlers.BaseHandler method): wsgiref handlers -- server/gateway base classes.
                                                             (line  193)
* SETUP_EXCEPT (opcode):                 Python Bytecode Instructions.
                                                             (line  541)
* SETUP_FINALLY (opcode):                Python Bytecode Instructions.
                                                             (line  546)
* SETUP_LOOP (opcode):                   Python Bytecode Instructions.
                                                             (line  536)
* setup_python() (venv.EnvBuilder method): API<2>.           (line   87)
* setup_scripts() (venv.EnvBuilder method): API<2>.          (line   95)
* setup_testing_defaults() (in module wsgiref.util): wsgiref util -- WSGI environment utilities.
                                                             (line   68)
* SETUP_WITH (opcode):                   Python Bytecode Instructions.
                                                             (line  358)
* SetValue() (in module winreg):         Functions<9>.       (line  370)
* SetValueEx() (in module winreg):       Functions<9>.       (line  398)
* setworldcoordinates() (in module turtle): Window control.  (line   88)
* setx() (in module turtle):             Turtle motion.      (line  104)
* setxattr() (in module os):             Linux extended attributes.
                                                             (line   38)
* sety() (in module turtle):             Turtle motion.      (line  118)
* SET_ADD (opcode):                      Python Bytecode Instructions.
                                                             (line  293)
* set_all():                             Reference Count Details.
                                                             (line   98)
* set_allowed_domains() (http.cookiejar.DefaultCookiePolicy method): DefaultCookiePolicy Objects.
                                                             (line   70)
* set_alpn_protocols() (ssl.SSLContext method): SSL Contexts.
                                                             (line  154)
* set_app() (wsgiref.simple_server.WSGIServer method): wsgiref simple_server -- a simple WSGI HTTP server.
                                                             (line   61)
* set_authorizer() (sqlite3.Connection method): Connection Objects.
                                                             (line  182)
* set_blocked_domains() (http.cookiejar.DefaultCookiePolicy method): DefaultCookiePolicy Objects.
                                                             (line   56)
* set_blocking() (in module os):         File Descriptor Operations.
                                                             (line  455)
* set_boundary() (email.message.Message method): email message Representing an email message.
                                                             (line  539)
* set_break() (bdb.Bdb method):          bdb --- Debugger framework.
                                                             (line  281)
* set_charset() (email.message.Message method): email message Representing an email message.
                                                             (line  207)
* set_children() (tkinter.ttk.Treeview method): ttk Treeview.
                                                             (line   25)
* set_ciphers() (ssl.SSLContext method): SSL Contexts.       (line  143)
* set_completer() (in module readline):  Completion.         (line   14)
* set_completer_delims() (in module readline): Completion.   (line   48)
* set_completion_display_matches_hook() (in module readline): Completion.
                                                             (line   57)
* set_content() (email.contentmanager.ContentManager method): email contentmanager Managing MIME Content.
                                                             (line  266)
* set_content() (email.message.EmailMessage method): email contentmanager Managing MIME Content.
                                                             (line  144)
* set_content() (in module email.contentmanager): Content Manager Instances.
                                                             (line   35)
* set_continue() (bdb.Bdb method):       bdb --- Debugger framework.
                                                             (line  266)
* set_cookie() (http.cookiejar.CookieJar method): CookieJar and FileCookieJar Objects.
                                                             (line   72)
* set_cookie_if_ok() (http.cookiejar.CookieJar method): CookieJar and FileCookieJar Objects.
                                                             (line   68)
* set_coroutine_wrapper() (in module sys): sys --- System-specific parameters and functions.
                                                             (line 1124)
* set_current() (msilib.Feature method): Features<3>.        (line   14)
* set_data() (importlib.abc.SourceLoader method): importlib abc -- Abstract base classes related to import.
                                                             (line  471)
* set_data() (importlib.machinery.SourceFileLoader method): importlib machinery -- Importers and path hooks.
                                                             (line  224)
* set_date() (mailbox.MaildirMessage method): MaildirMessage.
                                                             (line   97)
* set_debug() (asyncio.BaseEventLoop method): Debug mode.    (line   16)
* set_debug() (in module gc):            gc --- Garbage Collector interface.
                                                             (line   46)
* set_debuglevel() (ftplib.FTP method):  FTP Objects.        (line   13)
* set_debuglevel() (http.client.HTTPConnection method): HTTPConnection Objects.
                                                             (line   54)
* set_debuglevel() (nntplib.NNTP method): Methods<3>.        (line  307)
* set_debuglevel() (poplib.POP3 method): POP3 Objects.       (line   11)
* set_debuglevel() (smtplib.SMTP method): SMTP Objects.      (line    8)
* set_debuglevel() (telnetlib.Telnet method): Telnet Objects.
                                                             (line   81)
* set_defaults() (argparse.ArgumentParser method): Parser defaults.
                                                             (line    6)
* set_defaults() (optparse.OptionParser method): Other methods.
                                                             (line   27)
* set_default_executor() (asyncio.BaseEventLoop method): Executor.
                                                             (line   22)
* set_default_type() (email.message.Message method): email message Representing an email message.
                                                             (line  415)
* set_default_verify_paths() (ssl.SSLContext method): SSL Contexts.
                                                             (line  134)
* set_ecdh_curve() (ssl.SSLContext method): SSL Contexts.    (line  252)
* set_errno() (in module ctypes):        Utility functions.  (line  156)
* set_event_loop() (asyncio.AbstractEventLoopPolicy method): Event loop policy interface.
                                                             (line   23)
* set_event_loop() (in module asyncio):  Event loop functions.
                                                             (line   15)
* set_event_loop_policy() (in module asyncio): Access to the global loop policy.
                                                             (line   10)
* set_exception() (asyncio.Future method): Future.           (line   91)
* set_exception() (asyncio.StreamReader method): StreamReader.
                                                             (line   23)
* set_exception() (concurrent.futures.Future method): Future Objects.
                                                             (line  118)
* set_exception_handler() (asyncio.BaseEventLoop method): Error Handling API.
                                                             (line    8)
* set_executable() (in module multiprocessing): Miscellaneous<3>.
                                                             (line   99)
* set_executables() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  235)
* set_flags() (mailbox.MaildirMessage method): MaildirMessage.
                                                             (line   72)
* set_flags() (mailbox.mboxMessage method): mboxMessage.     (line   72)
* set_flags() (mailbox.MMDFMessage method): MMDFMessage.     (line   71)
* set_from() (mailbox.mboxMessage method): mboxMessage.      (line   53)
* set_from() (mailbox.MMDFMessage method): MMDFMessage.      (line   52)
* set_handle_inheritable() (in module os): Inheritance of File Descriptors.
                                                             (line   38)
* set_history_length() (in module readline): History file.   (line   28)
* set_include_dirs() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  103)
* set_info() (mailbox.MaildirMessage method): MaildirMessage.
                                                             (line  108)
* set_inheritable() (in module os):      Inheritance of File Descriptors.
                                                             (line   28)
* set_inheritable() (socket.socket method): Socket Objects.  (line  461)
* set_labels() (mailbox.BabylMessage method): BabylMessage.  (line   51)
* set_last_error() (in module ctypes):   Utility functions.  (line  162)
* set_libraries() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  128)
* set_library_dirs() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  144)
* set_link_objects() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  187)
* set_literal (2to3 fixer):              Fixers.             (line  294)
* set_loader() (in module importlib.util): importlib util -- Utility code for importers.
                                                             (line  156)
* set_next() (bdb.Bdb method):           bdb --- Debugger framework.
                                                             (line  248)
* set_nonstandard_attr() (http.cookiejar.Cookie method): Cookie Objects<2>.
                                                             (line  102)
* set_npn_protocols() (ssl.SSLContext method): SSL Contexts. (line  169)
* set_ok() (http.cookiejar.CookiePolicy method): CookiePolicy Objects.
                                                             (line    9)
* set_option_negotiation_callback() (telnetlib.Telnet method): Telnet Objects.
                                                             (line  137)
* set_output_charset() (gettext.NullTranslations method): The NullTranslations class.
                                                             (line   74)
* set_package() (in module importlib.util): importlib util -- Utility code for importers.
                                                             (line  171)
* set_param() (email.message.Message method): email message Representing an email message.
                                                             (line  473)
* set_pasv() (ftplib.FTP method):        FTP Objects.        (line   98)
* set_payload() (email.message.Message method): email message Representing an email message.
                                                             (line  200)
* set_policy() (http.cookiejar.CookieJar method): CookieJar and FileCookieJar Objects.
                                                             (line   56)
* set_position() (xdrlib.Unpacker method): Unpacker Objects. (line   16)
* set_pre_input_hook() (in module readline): Startup hooks.  (line   14)
* set_progress_handler() (sqlite3.Connection method): Connection Objects.
                                                             (line  206)
* set_proxy() (urllib.request.Request method): Request Objects.
                                                             (line  114)
* set_python_build() (in module distutils.sysconfig): distutils sysconfig --- System configuration information.
                                                             (line   99)
* set_quit() (bdb.Bdb method):           bdb --- Debugger framework.
                                                             (line  271)
* set_recsrc() (ossaudiodev.oss_mixer_device method): Mixer Device Objects.
                                                             (line   89)
* set_result() (asyncio.Future method):  Future.             (line   84)
* set_result() (concurrent.futures.Future method): Future Objects.
                                                             (line  110)
* set_return() (bdb.Bdb method):         bdb --- Debugger framework.
                                                             (line  252)
* set_running_or_notify_cancel() (concurrent.futures.Future method): Future Objects.
                                                             (line   88)
* set_runtime_library_dirs() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  155)
* set_seq1() (difflib.SequenceMatcher method): SequenceMatcher Objects.
                                                             (line   53)
* set_seq2() (difflib.SequenceMatcher method): SequenceMatcher Objects.
                                                             (line   58)
* set_seqs() (difflib.SequenceMatcher method): SequenceMatcher Objects.
                                                             (line   43)
* set_sequences() (mailbox.MH method):   MH.                 (line   58)
* set_sequences() (mailbox.MHMessage method): MHMessage.     (line   37)
* set_servername_callback() (ssl.SSLContext method): SSL Contexts.
                                                             (line  184)
* set_server_documentation() (xmlrpc.server.DocCGIXMLRPCRequestHandler method): DocCGIXMLRPCRequestHandler.
                                                             (line   24)
* set_server_documentation() (xmlrpc.server.DocXMLRPCServer method): DocXMLRPCServer Objects.
                                                             (line   24)
* set_server_name() (xmlrpc.server.DocCGIXMLRPCRequestHandler method): DocCGIXMLRPCRequestHandler.
                                                             (line   18)
* set_server_name() (xmlrpc.server.DocXMLRPCServer method): DocXMLRPCServer Objects.
                                                             (line   18)
* set_server_title() (xmlrpc.server.DocCGIXMLRPCRequestHandler method): DocCGIXMLRPCRequestHandler.
                                                             (line   13)
* set_server_title() (xmlrpc.server.DocXMLRPCServer method): DocXMLRPCServer Objects.
                                                             (line   13)
* set_spacing() (formatter.formatter method): The Formatter Interface.
                                                             (line  139)
* set_startup_hook() (in module readline): Startup hooks.    (line    6)
* set_start_method() (in module multiprocessing): Miscellaneous<3>.
                                                             (line  112)
* set_step() (bdb.Bdb method):           bdb --- Debugger framework.
                                                             (line  244)
* set_subdir() (mailbox.MaildirMessage method): MaildirMessage.
                                                             (line   58)
* set_task_factory() (asyncio.BaseEventLoop method): Tasks.  (line   20)
* set_terminator() (asynchat.async_chat method): asynchat --- Asynchronous socket command/response handler.
                                                             (line  114)
* set_threshold() (in module gc):        gc --- Garbage Collector interface.
                                                             (line   81)
* set_trace() (bdb.Bdb method):          bdb --- Debugger framework.
                                                             (line  261)
* set_trace() (in module bdb):           bdb --- Debugger framework.
                                                             (line  404)
* set_trace() (in module pdb):           pdb --- The Python Debugger.
                                                             (line  112)
* set_trace() (pdb.Pdb method):          pdb --- The Python Debugger.
                                                             (line  163)
* set_trace_callback() (sqlite3.Connection method): Connection Objects.
                                                             (line  216)
* set_transport() (asyncio.StreamReader method): StreamReader.
                                                             (line   27)
* set_tunnel() (http.client.HTTPConnection method): HTTPConnection Objects.
                                                             (line   64)
* set_type() (email.message.Message method): email message Representing an email message.
                                                             (line  506)
* set_unittest_reportflags() (in module doctest): Unittest API.
                                                             (line  165)
* set_unixfrom() (email.message.Message method): email message Representing an email message.
                                                             (line  140)
* set_until() (bdb.Bdb method):          bdb --- Debugger framework.
                                                             (line  256)
* set_url() (urllib.robotparser.RobotFileParser method): urllib robotparser --- Parser for robots txt.
                                                             (line   17)
* set_usage() (optparse.OptionParser method): Other methods. (line    8)
* set_userptr() (curses.panel.Panel method): Panel Objects.  (line   42)
* set_visible() (mailbox.BabylMessage method): BabylMessage. (line   68)
* set_wakeup_fd() (in module signal):    Module contents<2>. (line  233)
* set_write_buffer_limits() (asyncio.WriteTransport method): WriteTransport.
                                                             (line   38)
* SF_APPEND (in module stat):            stat --- Interpreting stat results.
                                                             (line  376)
* SF_ARCHIVED (in module stat):          stat --- Interpreting stat results.
                                                             (line  368)
* SF_IMMUTABLE (in module stat):         stat --- Interpreting stat results.
                                                             (line  372)
* SF_MNOWAIT (in module os):             File Descriptor Operations.
                                                             (line  468)
* SF_NODISKIO (in module os):            File Descriptor Operations.
                                                             (line  468)
* SF_NOUNLINK (in module stat):          stat --- Interpreting stat results.
                                                             (line  380)
* SF_SNAPSHOT (in module stat):          stat --- Interpreting stat results.
                                                             (line  384)
* SF_SYNC (in module os):                File Descriptor Operations.
                                                             (line  468)
* Shape (class in turtle):               Public classes.     (line   43)
* shape (memoryview attribute):          Memory Views.       (line  414)
* shape() (in module turtle):            Appearance.         (line    6)
* shapesize() (in module turtle):        Appearance.         (line   52)
* shapetransform() (in module turtle):   Appearance.         (line  157)
* share() (socket.socket method):        Socket Objects.     (line  516)
* shared_ciphers() (ssl.SSLSocket method): SSL Sockets.      (line  193)
* shared_object_filename() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  474)
* shearfactor() (in module turtle):      Appearance.         (line   84)
* Shelf (class in shelve):               Restrictions.       (line   23)
* shelve (module):                       shelve --- Python object persistence.
                                                             (line    6)
* shield() (in module asyncio):          Task functions.     (line  133)
* shift() (decimal.Context method):      Context objects.    (line  490)
* shift() (decimal.Decimal method):      Decimal objects.    (line  539)
* shifting; operation:                   Shifting operations.
                                                             (line    6)
* shifting; operations:                  Bitwise Operations on Integer Types.
                                                             (line    6)
* shift_path_info() (in module wsgiref.util): wsgiref util -- WSGI environment utilities.
                                                             (line   38)
* shlex (class in shlex):                shlex --- Simple lexical analysis.
                                                             (line   66)
* shlex (module):                        shlex --- Simple lexical analysis.
                                                             (line    6)
* shortDescription() (unittest.TestCase method): Test cases. (line  730)
* shorten() (in module textwrap):        textwrap --- Text wrapping and filling.
                                                             (line   40)
* shouldFlush() (logging.handlers.BufferingHandler method): MemoryHandler.
                                                             (line   34)
* shouldFlush() (logging.handlers.MemoryHandler method): MemoryHandler.
                                                             (line   64)
* shouldStop (unittest.TestResult attribute): Loading and running tests.
                                                             (line  247)
* show() (curses.panel.Panel method):    Panel Objects.      (line   48)
* showsyntaxerror() (code.InteractiveInterpreter method): Interactive Interpreter Objects.
                                                             (line   44)
* showtraceback() (code.InteractiveInterpreter method): Interactive Interpreter Objects.
                                                             (line   53)
* showturtle() (in module turtle):       Visibility.         (line   15)
* showwarning() (in module warnings):    Available Functions.
                                                             (line   56)
* show_code() (in module dis):           Analysis functions. (line   23)
* show_compilers() (in module distutils.ccompiler): distutils ccompiler --- CCompiler base class.
                                                             (line   62)
* shuffle() (in module random):          random --- Generate pseudo-random numbers.
                                                             (line  125)
* shutdown() (concurrent.futures.Executor method): Executor Objects.
                                                             (line   46)
* shutdown() (imaplib.IMAP4 method):     IMAP4 Objects.      (line  253)
* shutdown() (in module logging):        Module-Level Functions.
                                                             (line  302)
* shutdown() (multiprocessing.managers.BaseManager method): Managers.
                                                             (line   67)
* shutdown() (socket.socket method):     Socket Objects.     (line  509)
* shutdown() (socketserver.BaseServer method): Server Objects.
                                                             (line   54)
* shutil (module):                       shutil --- High-level file operations.
                                                             (line    6)
* side_effect (unittest.mock.Mock attribute): The Mock Class.
                                                             (line  338)
* SIGINT:                                Signal Handling<2>. (line    8)
* SIGINT <1>:                            Signal Handling<2>. (line   20)
* siginterrupt() (in module signal):     Module contents<2>. (line  254)
* signal (module):                       signal --- Set handlers for asynchronous events.
                                                             (line    6)
* signal() (in module signal):           Module contents<2>. (line  266)
* Signature (class in inspect):          Introspecting callables with the Signature object.
                                                             (line   46)
* signature (inspect.BoundArguments attribute): Introspecting callables with the Signature object.
                                                             (line  275)
* signature() (in module inspect):       Introspecting callables with the Signature object.
                                                             (line   12)
* sigpending() (in module signal):       Module contents<2>. (line  292)
* sigtimedwait() (in module signal):     Module contents<2>. (line  350)
* sigwait() (in module signal):          Module contents<2>. (line  306)
* sigwaitinfo() (in module signal):      Module contents<2>. (line  322)
* SIG_BLOCK (in module signal):          Module contents<2>. (line   78)
* SIG_DFL (in module signal):            Module contents<2>. (line   15)
* SIG_IGN (in module signal):            Module contents<2>. (line   22)
* SIG_SETMASK (in module signal):        Module contents<2>. (line   93)
* SIG_UNBLOCK (in module signal):        Module contents<2>. (line   85)
* Simple Mail Transfer Protocol:         smtplib --- SMTP protocol client.
                                                             (line    6)
* simple; statement:                     Simple statements.  (line    6)
* SimpleCookie (class in http.cookies):  http cookies --- HTTP state management.
                                                             (line   48)
* simplefilter() (in module warnings):   Available Functions.
                                                             (line   90)
* SimpleHandler (class in wsgiref.handlers): wsgiref handlers -- server/gateway base classes.
                                                             (line   70)
* SimpleHTTPRequestHandler (class in http.server): http server --- HTTP servers.
                                                             (line  310)
* SimpleNamespace (class in types):      Additional Utility Classes and Functions.
                                                             (line    6)
* SimpleQueue (class in multiprocessing): Pipes and Queues.  (line  197)
* SimpleXMLRPCRequestHandler (class in xmlrpc.server): xmlrpc server --- Basic XML-RPC servers.
                                                             (line   58)
* SimpleXMLRPCServer (class in xmlrpc.server): xmlrpc server --- Basic XML-RPC servers.
                                                             (line   19)
* sin() (in module cmath):               Trigonometric functions<2>.
                                                             (line   29)
* sin() (in module math):                Trigonometric functions.
                                                             (line   37)
* single dispatch:                       Glossary.           (line 1019)
* SingleAddressHeader (class in email.headerregistry): email headerregistry Custom Header Objects.
                                                             (line  215)
* singledispatch() (in module functools): functools --- Higher-order functions and operations on callable objects.
                                                             (line  262)
* singleton; tuple:                      The standard type hierarchy.
                                                             (line  154)
* sinh() (in module cmath):              Hyperbolic functions<2>.
                                                             (line   30)
* sinh() (in module math):               Hyperbolic functions.
                                                             (line   25)
* site (module):                         site --- Site-specific configuration hook.
                                                             (line    6)
* site command line option; –user-base:  Module contents<3>. (line   91)
* site command line option; –user-site:  Module contents<3>. (line   95)
* site-packages; directory:              site --- Site-specific configuration hook.
                                                             (line   24)
* sixtofour (ipaddress.IPv6Address attribute): Address objects.
                                                             (line  201)
* size (struct.Struct attribute):        Classes<2>.         (line   53)
* size (tarfile.TarInfo attribute):      TarInfo Objects.    (line   47)
* size (tracemalloc.Statistic attribute): Statistic.         (line   19)
* size (tracemalloc.StatisticDiff attribute): StatisticDiff. (line   26)
* size (tracemalloc.Trace attribute):    Trace.              (line   13)
* size() (ftplib.FTP method):            FTP Objects.        (line  220)
* size() (mmap.mmap method):             mmap --- Memory-mapped file support.
                                                             (line  241)
* Sized (class in collections.abc):      Collections Abstract Base Classes.
                                                             (line   94)
* sizeof() (in module ctypes):           Utility functions.  (line  168)
* size_diff (tracemalloc.StatisticDiff attribute): StatisticDiff.
                                                             (line   32)
* SKIP (in module doctest):              Option Flags.       (line  103)
* skip() (chunk.Chunk method):           chunk --- Read IFF chunked data.
                                                             (line  109)
* skip() (in module unittest):           Skipping tests and expected failures.
                                                             (line   75)
* skipIf() (in module unittest):         Skipping tests and expected failures.
                                                             (line   80)
* skipinitialspace (csv.Dialect attribute): Dialects and Formatting Parameters.
                                                             (line   65)
* skipped (unittest.TestResult attribute): Loading and running tests.
                                                             (line  229)
* skippedEntity() (xml.sax.handler.ContentHandler method): ContentHandler Objects.
                                                             (line  176)
* SkipTest:                              Skipping tests and expected failures.
                                                             (line   93)
* skipTest() (unittest.TestCase method): Test cases.         (line   97)
* skipUnless() (in module unittest):     Skipping tests and expected failures.
                                                             (line   84)
* skip_unless_symlink() (in module test.support): test support --- Utilities for the Python test suite.
                                                             (line  235)
* SLASH (in module token):               token --- Constants used with Python parse trees.
                                                             (line   40)
* SLASHEQUAL (in module token):          token --- Constants used with Python parse trees.
                                                             (line   40)
* slave() (nntplib.NNTP method):         Methods<3>.         (line  303)
* sleep() (in module asyncio):           Task functions.     (line  122)
* sleep() (in module time):              time --- Time access and conversions.
                                                             (line  329)
* slice:                                 Slicings.           (line    6)
* slice <1>:                             Glossary.           (line 1024)
* slice (built-in class):                Built-in Functions. (line 1288)
* slice; assignment:                     Mutable Sequence Types.
                                                             (line   16)
* slice; operation:                      Common Sequence Operations.
                                                             (line   21)
* slicing:                               The standard type hierarchy.
                                                             (line  115)
* slicing <1>:                           The standard type hierarchy.
                                                             (line  174)
* slicing <2>:                           Slicings.           (line    6)
* slicing; assignment:                   Assignment statements.
                                                             (line  131)
* SMTP (class in smtplib):               smtplib --- SMTP protocol client.
                                                             (line   16)
* SMTP (in module email.policy):         email policy Policy Objects.
                                                             (line  522)
* SMTP; protocol:                        smtplib --- SMTP protocol client.
                                                             (line    6)
* SMTPAuthenticationError:               smtplib --- SMTP protocol client.
                                                             (line  161)
* SMTPChannel (class in smtpd):          SMTPChannel Objects.
                                                             (line    6)
* SMTPConnectError:                      smtplib --- SMTP protocol client.
                                                             (line  146)
* smtpd (module):                        smtpd --- SMTP Server.
                                                             (line    6)
* SMTPDataError:                         smtplib --- SMTP protocol client.
                                                             (line  142)
* SMTPException:                         smtplib --- SMTP protocol client.
                                                             (line  107)
* SMTPHandler (class in logging.handlers): SMTPHandler.      (line   10)
* SMTPHeloError:                         smtplib --- SMTP protocol client.
                                                             (line  151)
* smtplib (module):                      smtplib --- SMTP protocol client.
                                                             (line    6)
* SMTPNotSupportedError:                 smtplib --- SMTP protocol client.
                                                             (line  155)
* SMTPRecipientsRefused:                 smtplib --- SMTP protocol client.
                                                             (line  135)
* SMTPResponseException:                 smtplib --- SMTP protocol client.
                                                             (line  121)
* SMTPSenderRefused:                     smtplib --- SMTP protocol client.
                                                             (line  129)
* SMTPServer (class in smtpd):           SMTPServer Objects. (line    6)
* SMTPServerDisconnected:                smtplib --- SMTP protocol client.
                                                             (line  115)
* SMTPUTF8 (in module email.policy):     email policy Policy Objects.
                                                             (line  528)
* smtp_server (smtpd.SMTPChannel attribute): SMTPChannel Objects.
                                                             (line   43)
* SMTP_SSL (class in smtplib):           smtplib --- SMTP protocol client.
                                                             (line   62)
* smtp_state (smtpd.SMTPChannel attribute): SMTPChannel Objects.
                                                             (line   62)
* Snapshot (class in tracemalloc):       Snapshot.           (line    6)
* sndhdr (module):                       sndhdr --- Determine type of sound file.
                                                             (line    6)
* SND_ALIAS (in module winsound):        winsound --- Sound-playing interface for Windows.
                                                             (line   43)
* SND_ASYNC (in module winsound):        winsound --- Sound-playing interface for Windows.
                                                             (line  105)
* SND_FILENAME (in module winsound):     winsound --- Sound-playing interface for Windows.
                                                             (line   38)
* SND_LOOP (in module winsound):         winsound --- Sound-playing interface for Windows.
                                                             (line   84)
* SND_MEMORY (in module winsound):       winsound --- Sound-playing interface for Windows.
                                                             (line   90)
* SND_NODEFAULT (in module winsound):    winsound --- Sound-playing interface for Windows.
                                                             (line  109)
* SND_NOSTOP (in module winsound):       winsound --- Sound-playing interface for Windows.
                                                             (line  114)
* SND_NOWAIT (in module winsound):       winsound --- Sound-playing interface for Windows.
                                                             (line  118)
* SND_PURGE (in module winsound):        winsound --- Sound-playing interface for Windows.
                                                             (line   99)
* sniff() (csv.Sniffer method):          Module Contents<3>. (line  203)
* Sniffer (class in csv):                Module Contents<3>. (line  196)
* socket (module):                       socket --- Low-level networking interface.
                                                             (line    6)
* socket (socketserver.BaseServer attribute): Server Objects.
                                                             (line   83)
* socket() (imaplib.IMAP4 method):       IMAP4 Objects.      (line  259)
* socket() (in module socket):           Creating sockets.   (line    8)
* socket() (in module socket) <1>:       select --- Waiting for I/O completion.
                                                             (line  125)
* SocketHandler (class in logging.handlers): SocketHandler.  (line   10)
* socketpair() (in module socket):       Creating sockets.   (line   35)
* sockets (asyncio.Server attribute):    Server.             (line   32)
* socketserver (module):                 socketserver --- A framework for network servers.
                                                             (line    6)
* SocketType (in module socket):         Creating sockets.   (line  105)
* socket_type (socketserver.BaseServer attribute): Server Objects.
                                                             (line  106)
* sock_accept() (asyncio.BaseEventLoop method): Low-level socket operations.
                                                             (line   63)
* SOCK_CLOEXEC (in module socket):       Constants<6>.       (line   32)
* sock_connect() (asyncio.BaseEventLoop method): Low-level socket operations.
                                                             (line   41)
* SOCK_DGRAM (in module socket):         Constants<6>.       (line   21)
* SOCK_NONBLOCK (in module socket):      Constants<6>.       (line   32)
* SOCK_RAW (in module socket):           Constants<6>.       (line   21)
* SOCK_RDM (in module socket):           Constants<6>.       (line   21)
* sock_recv() (asyncio.BaseEventLoop method): Low-level socket operations.
                                                             (line    6)
* sock_sendall() (asyncio.BaseEventLoop method): Low-level socket operations.
                                                             (line   22)
* SOCK_SEQPACKET (in module socket):     Constants<6>.       (line   21)
* SOCK_STREAM (in module socket):        Constants<6>.       (line   21)
* SOL_RDS (in module socket):            Constants<6>.       (line  121)
* SOMAXCONN (in module socket):          Constants<6>.       (line   48)
* sort() (imaplib.IMAP4 method):         IMAP4 Objects.      (line  263)
* sort() (list method):                  Lists<2>.           (line   39)
* sorted() (built-in function):          Built-in Functions. (line 1304)
* sortTestMethodsUsing (unittest.TestLoader attribute): Loading and running tests.
                                                             (line  182)
* sort_stats() (pstats.Stats method):    The Stats Class.    (line   66)
* source (doctest.Example attribute):    Example Objects.    (line   17)
* source (pdb command):                  Debugger Commands.  (line  250)
* source (shlex.shlex attribute):        shlex Objects.      (line  138)
* source character set:                  Encoding declarations.
                                                             (line    6)
* SourceFileLoader (class in importlib.machinery): importlib machinery -- Importers and path hooks.
                                                             (line  199)
* sourcehook() (shlex.shlex method):     shlex Objects.      (line   26)
* SourcelessFileLoader (class in importlib.machinery): importlib machinery -- Importers and path hooks.
                                                             (line  238)
* SourceLoader (class in importlib.abc): importlib abc -- Abstract base classes related to import.
                                                             (line  410)
* source_from_cache() (in module imp):   imp --- Access the import internals.
                                                             (line  225)
* source_from_cache() (in module importlib.util): importlib util -- Utility code for importers.
                                                             (line   52)
* SOURCE_SUFFIXES (in module importlib.machinery): importlib machinery -- Importers and path hooks.
                                                             (line    9)
* source_to_code() (importlib.abc.InspectLoader static method): importlib abc -- Abstract base classes related to import.
                                                             (line  325)
* space:                                 Indentation.        (line    6)
* span() (re.match method):              Match Objects.      (line  142)
* spawn() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  488)
* spawn() (in module pty):               pty --- Pseudo-terminal utilities.
                                                             (line   32)
* spawnl() (in module os):               Process Management. (line  304)
* spawnle() (in module os):              Process Management. (line  304)
* spawnlp() (in module os):              Process Management. (line  304)
* spawnlpe() (in module os):             Process Management. (line  304)
* spawnv() (in module os):               Process Management. (line  304)
* spawnve() (in module os):              Process Management. (line  304)
* spawnvp() (in module os):              Process Management. (line  304)
* spawnvpe() (in module os):             Process Management. (line  304)
* special method:                        Glossary.           (line 1032)
* special; attribute:                    The standard type hierarchy.
                                                             (line   13)
* specified_attributes (xml.parsers.expat.xmlparser attribute): XMLParser Objects<2>.
                                                             (line  117)
* spec_from_file_location() (in module importlib.util): importlib util -- Utility code for importers.
                                                             (line  193)
* spec_from_loader() (in module importlib.util): importlib util -- Utility code for importers.
                                                             (line  182)
* speed() (in module turtle):            Turtle motion.      (line  302)
* speed() (ossaudiodev.oss_audio_device method): Audio Device Objects.
                                                             (line  140)
* split() (bytearray method):            Bytes and Bytearray Operations.
                                                             (line  323)
* split() (bytes method):                Bytes and Bytearray Operations.
                                                             (line  323)
* split() (in module os.path):           os path --- Common pathname manipulations.
                                                             (line  300)
* split() (in module re):                Module Contents.    (line  150)
* split() (in module shlex):             shlex --- Simple lexical analysis.
                                                             (line   17)
* split() (re.regex method):             Regular Expression Objects.
                                                             (line   74)
* split() (str method):                  String Methods<2>.  (line  352)
* splitdrive() (in module os.path):      os path --- Common pathname manipulations.
                                                             (line  313)
* splitext() (in module os.path):        os path --- Common pathname manipulations.
                                                             (line  332)
* splitlines() (bytearray method):       Bytes and Bytearray Operations.
                                                             (line  558)
* splitlines() (bytes method):           Bytes and Bytearray Operations.
                                                             (line  558)
* splitlines() (str method):             String Methods<2>.  (line  392)
* SplitResult (class in urllib.parse):   Structured Parse Results.
                                                             (line   55)
* SplitResultBytes (class in urllib.parse): Structured Parse Results.
                                                             (line   82)
* splitunc() (in module os.path):        os path --- Common pathname manipulations.
                                                             (line  339)
* split_quoted() (in module distutils.util): distutils util --- Miscellaneous other utility functions.
                                                             (line  103)
* SpooledTemporaryFile() (in module tempfile): tempfile --- Generate temporary files and directories.
                                                             (line   83)
* sprintf-style formatting:              printf-style String Formatting.
                                                             (line    6)
* sprintf-style formatting <1>:          printf-style Bytes Formatting.
                                                             (line    6)
* spwd (module):                         spwd --- The shadow password database.
                                                             (line    6)
* sqlite3 (module):                      sqlite3 --- DB-API 2 0 interface for SQLite databases.
                                                             (line    6)
* sqlite_version (in module sqlite3):    Module functions and constants.
                                                             (line   16)
* sqlite_version_info (in module sqlite3): Module functions and constants.
                                                             (line   20)
* sqrt() (decimal.Context method):       Context objects.    (line  494)
* sqrt() (decimal.Decimal method):       Decimal objects.    (line  550)
* sqrt() (in module cmath):              Power and logarithmic functions<2>.
                                                             (line   22)
* sqrt() (in module math):               Power and logarithmic functions.
                                                             (line   71)
* SSL:                                   ssl --- TLS/SSL wrapper for socket objects.
                                                             (line    6)
* ssl (module):                          ssl --- TLS/SSL wrapper for socket objects.
                                                             (line    6)
* SSLContext (class in ssl):             SSL Contexts.       (line   14)
* SSLEOFError:                           Functions Constants and Exceptions.
                                                             (line   71)
* SSLError:                              Functions Constants and Exceptions.
                                                             (line    6)
* SSLObject (class in ssl):              Memory BIO Support<2>.
                                                             (line   30)
* SSLSocket (class in ssl):              SSL Sockets.        (line    6)
* SSLSyscallError:                       Functions Constants and Exceptions.
                                                             (line   62)
* SSLWantReadError:                      Functions Constants and Exceptions.
                                                             (line   44)
* SSLWantWriteError:                     Functions Constants and Exceptions.
                                                             (line   53)
* SSLZeroReturnError:                    Functions Constants and Exceptions.
                                                             (line   35)
* ssl_version (ftplib.FTP_TLS attribute): FTP_TLS Objects.   (line    9)
* st() (in module turtle):               Visibility.         (line   15)
* st2list() (in module parser):          Converting ST Objects.
                                                             (line   11)
* st2tuple() (in module parser):         Converting ST Objects.
                                                             (line   31)
* stack (traceback.TracebackException attribute): TracebackException Objects.
                                                             (line   34)
* stack viewer:                          Debug menu Shell window only.
                                                             (line   15)
* stack() (in module inspect):           The interpreter stack.
                                                             (line   84)
* stack; trace:                          The standard type hierarchy.
                                                             (line  692)
* stackable; streams:                    codecs --- Codec registry and base classes.
                                                             (line    8)
* StackSummary (class in traceback):     StackSummary Objects.
                                                             (line   11)
* stack_effect() (in module dis):        Analysis functions. (line  122)
* stack_size() (in module threading):    threading --- Thread-based parallelism.
                                                             (line   76)
* stack_size() (in module _thread):      _thread --- Low-level threading API.
                                                             (line   66)
* stamp() (in module turtle):            Turtle motion.      (line  238)
* Standard C:                            String and Bytes literals.
                                                             (line   75)
* standard input:                        Complete Python programs.
                                                             (line   25)
* standard; output:                      Expression statements.
                                                             (line   17)
* standarderror (2to3 fixer):            Fixers.             (line  299)
* standard_b64decode() (in module base64): base64 --- Base16 Base32 Base64 Base85 Data Encodings.
                                                             (line   75)
* standard_b64encode() (in module base64): base64 --- Base16 Base32 Base64 Base85 Data Encodings.
                                                             (line   70)
* standend() (curses.window method):     Window Objects.     (line  493)
* standout() (curses.window method):     Window Objects.     (line  498)
* STAR (in module token):                token --- Constants used with Python parse trees.
                                                             (line   40)
* STAREQUAL (in module token):           token --- Constants used with Python parse trees.
                                                             (line   40)
* starmap() (in module itertools):       Itertool functions. (line  491)
* starmap() (multiprocessing.pool.Pool method): Process Pools.
                                                             (line  130)
* starmap_async() (multiprocessing.pool.Pool method): Process Pools.
                                                             (line  141)
* start (range attribute):               Ranges.             (line   60)
* start (slice object attribute):        The standard type hierarchy.
                                                             (line  722)
* start (slice object attribute) <1>:    Slicings.           (line   26)
* start (UnicodeError attribute):        Concrete exceptions.
                                                             (line  321)
* start() (in module tracemalloc):       Functions<7>.       (line   50)
* start() (logging.handlers.QueueListener method): QueueListener.
                                                             (line   67)
* start() (multiprocessing.managers.BaseManager method): Managers.
                                                             (line   40)
* start() (multiprocessing.Process method): Process and exceptions.
                                                             (line   43)
* start() (re.match method):             Match Objects.      (line  117)
* start() (threading.Thread method):     Thread Objects.     (line   85)
* start() (tkinter.ttk.Progressbar method): ttk Progressbar. (line    8)
* start() (xml.etree.ElementTree.TreeBuilder method): TreeBuilder Objects.
                                                             (line   31)
* StartCdataSectionHandler() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line  300)
* StartDoctypeDeclHandler() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line  186)
* startDocument() (xml.sax.handler.ContentHandler method): ContentHandler Objects.
                                                             (line   32)
* startElement() (xml.sax.handler.ContentHandler method): ContentHandler Objects.
                                                             (line   82)
* StartElementHandler() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line  224)
* startElementNS() (xml.sax.handler.ContentHandler method): ContentHandler Objects.
                                                             (line  102)
* startfile() (in module os):            Process Management. (line  407)
* STARTF_USESHOWWINDOW (in module subprocess): Constants<5>. (line   33)
* STARTF_USESTDHANDLES (in module subprocess): Constants<5>. (line   27)
* StartNamespaceDeclHandler() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line  279)
* startPrefixMapping() (xml.sax.handler.ContentHandler method): ContentHandler Objects.
                                                             (line   49)
* startswith() (bytearray method):       Bytes and Bytearray Operations.
                                                             (line  195)
* startswith() (bytes method):           Bytes and Bytearray Operations.
                                                             (line  195)
* startswith() (str method):             String Methods<2>.  (line  465)
* startTest() (unittest.TestResult method): Loading and running tests.
                                                             (line  310)
* startTestRun() (unittest.TestResult method): Loading and running tests.
                                                             (line  319)
* starttls() (imaplib.IMAP4 method):     IMAP4 Objects.      (line  281)
* starttls() (nntplib.NNTP method):      Methods<3>.         (line   62)
* starttls() (smtplib.SMTP method):      SMTP Objects.       (line  182)
* STARTUPINFO (class in subprocess):     Windows Popen Helpers.
                                                             (line    9)
* start_color() (in module curses):      Functions<2>.       (line  441)
* start_component() (msilib.Directory method): Directory Objects.
                                                             (line   20)
* start_new_thread() (in module _thread): _thread --- Low-level threading API.
                                                             (line   33)
* start_server() (in module asyncio):    Stream functions.   (line   31)
* start_unix_server() (in module asyncio): Stream functions. (line   69)
* stat (module):                         stat --- Interpreting stat results.
                                                             (line    6)
* stat() (in module os):                 Files and Directories.
                                                             (line  791)
* stat() (nntplib.NNTP method):          Methods<3>.         (line  219)
* stat() (os.DirEntry method):           Files and Directories.
                                                             (line  765)
* stat() (pathlib.Path method):          Methods<2>.         (line   28)
* stat() (poplib.POP3 method):           POP3 Objects.       (line   51)
* state() (tkinter.ttk.Widget method):   ttk Widget.         (line   25)
* statement:                             Glossary.           (line 1039)
* statement grouping:                    Indentation.        (line    6)
* statement; *:                          Arbitrary Argument Lists.
                                                             (line    6)
* statement; * <1>:                      Function definitions.
                                                             (line   72)
* statement; **:                         Unpacking Argument Lists.
                                                             (line   19)
* statement; ** <1>:                     Function definitions.
                                                             (line   72)
* statement; @:                          Function definitions.
                                                             (line   30)
* statement; assert:                     The assert statement.
                                                             (line    6)
* statement; assert <1>:                 Concrete exceptions.
                                                             (line   10)
* statement; assignment, augmented:      Augmented assignment statements.
                                                             (line    6)
* statement; async def:                  Coroutines<2>.      (line    8)
* statement; async for:                  Coroutine function definition.
                                                             (line   25)
* statement; async with:                 The async for statement.
                                                             (line   42)
* statement; break:                      The break statement.
                                                             (line    6)
* statement; break <1>:                  The while statement.
                                                             (line   17)
* statement; break <2>:                  The for statement.  (line   23)
* statement; break <3>:                  The try statement.  (line   79)
* statement; break <4>:                  The try statement.  (line  107)
* statement; class:                      Class definitions.  (line    6)
* statement; continue:                   The continue statement.
                                                             (line    6)
* statement; continue <1>:               The while statement.
                                                             (line   17)
* statement; continue <2>:               The for statement.  (line   23)
* statement; continue <3>:               The try statement.  (line   79)
* statement; continue <4>:               The try statement.  (line  107)
* statement; def:                        Function definitions.
                                                             (line    6)
* statement; del:                        Basic customization.
                                                             (line   55)
* statement; del <1>:                    The del statement<2>.
                                                             (line    6)
* statement; del <2>:                    Mutable Sequence Types.
                                                             (line   16)
* statement; del <3>:                    Mapping Types --- dict.
                                                             (line    6)
* statement; except:                     Built-in Exceptions.
                                                             (line    6)
* statement; for:                        for Statements.     (line    6)
* statement; for <1>:                    The break statement.
                                                             (line    6)
* statement; for <2>:                    The continue statement.
                                                             (line    6)
* statement; for <3>:                    The for statement.  (line    6)
* statement; from:                       Binding of names.   (line    9)
* statement; global:                     The del statement<2>.
                                                             (line   15)
* statement; global <1>:                 The global statement.
                                                             (line    6)
* statement; if:                         The if statement.   (line    6)
* statement; if <1>:                     Truth Value Testing.
                                                             (line    6)
* statement; import:                     The standard type hierarchy.
                                                             (line  473)
* statement; import <1>:                 The import statement.
                                                             (line    6)
* statement; import <2>:                 Built-in Functions. (line 1543)
* statement; import <3>:                 imp --- Access the import internals.
                                                             (line    9)
* statement; nonlocal:                   The nonlocal statement.
                                                             (line    6)
* statement; pass:                       The pass statement. (line    6)
* statement; raise:                      The raise statement.
                                                             (line    6)
* statement; raise <1>:                  Built-in Exceptions.
                                                             (line   14)
* statement; return:                     The return statement.
                                                             (line    6)
* statement; return <1>:                 The try statement.  (line   79)
* statement; return <2>:                 The try statement.  (line  107)
* statement; try:                        The standard type hierarchy.
                                                             (line  705)
* statement; try <1>:                    The try statement.  (line    6)
* statement; try <2>:                    Built-in Exceptions.
                                                             (line    6)
* statement; while:                      The break statement.
                                                             (line    6)
* statement; while <1>:                  The continue statement.
                                                             (line    6)
* statement; while <2>:                  The while statement.
                                                             (line    6)
* statement; while <3>:                  Truth Value Testing.
                                                             (line    6)
* statement; with:                       With Statement Context Managers.
                                                             (line   14)
* statement; with <1>:                   The with statement. (line    6)
* statement; yield:                      The yield statement.
                                                             (line    6)
* staticmethod() (built-in function):    Built-in Functions. (line 1330)
* Statistic (class in tracemalloc):      Statistic.          (line    6)
* StatisticDiff (class in tracemalloc):  StatisticDiff.      (line    6)
* statistics (module):                   statistics --- Mathematical statistics functions.
                                                             (line    6)
* statistics() (tracemalloc.Snapshot method): Snapshot.      (line   56)
* StatisticsError:                       Exceptions<3>.      (line    8)
* Stats (class in pstats):               The Stats Class.    (line    9)
* status (http.client.HTTPResponse attribute): HTTPResponse Objects.
                                                             (line   51)
* status() (imaplib.IMAP4 method):       IMAP4 Objects.      (line  294)
* statvfs() (in module os):              Files and Directories.
                                                             (line 1024)
* stat_float_times() (in module os):     Files and Directories.
                                                             (line  997)
* stat_result (class in os):             Files and Directories.
                                                             (line  823)
* StdButtonBox (class in tkinter.tix):   Basic Widgets.      (line   65)
* stderr (asyncio.asyncio.subprocess.Process attribute): Process.
                                                             (line  107)
* stderr (in module sys):                The standard type hierarchy.
                                                             (line  579)
* stderr (in module sys) <1>:            sys --- System-specific parameters and functions.
                                                             (line 1163)
* stderr (in module sys) <2>:            Sub-interpreter support.
                                                             (line   15)
* stderr (subprocess.CalledProcessError attribute): Using the subprocess Module.
                                                             (line  187)
* stderr (subprocess.CompletedProcess attribute): Using the subprocess Module.
                                                             (line   93)
* stderr (subprocess.Popen attribute):   Popen Objects.      (line  125)
* stderr (subprocess.TimeoutExpired attribute): Using the subprocess Module.
                                                             (line  155)
* stdev() (in module statistics):        Function details.   (line  247)
* stdin (asyncio.asyncio.subprocess.Process attribute): Process.
                                                             (line   97)
* stdin (in module sys):                 The standard type hierarchy.
                                                             (line  579)
* stdin (in module sys) <1>:             sys --- System-specific parameters and functions.
                                                             (line 1163)
* stdin (in module sys) <2>:             Sub-interpreter support.
                                                             (line   15)
* stdin (subprocess.Popen attribute):    Popen Objects.      (line  108)
* stdin; stdout; sdterr:                 Process-wide parameters.
                                                             (line    9)
* stdio:                                 The standard type hierarchy.
                                                             (line  579)
* stdout (asyncio.asyncio.subprocess.Process attribute): Process.
                                                             (line  102)
* STDOUT (in module subprocess):         Using the subprocess Module.
                                                             (line  121)
* stdout (in module sys):                The standard type hierarchy.
                                                             (line  579)
* stdout (in module sys) <1>:            sys --- System-specific parameters and functions.
                                                             (line 1163)
* stdout (in module sys) <2>:            Sub-interpreter support.
                                                             (line   15)
* stdout (subprocess.CalledProcessError attribute): Using the subprocess Module.
                                                             (line  183)
* stdout (subprocess.CompletedProcess attribute): Using the subprocess Module.
                                                             (line   83)
* stdout (subprocess.Popen attribute):   Popen Objects.      (line  116)
* stdout (subprocess.TimeoutExpired attribute): Using the subprocess Module.
                                                             (line  151)
* STD_ERROR_HANDLE (in module subprocess): Constants<5>.     (line   18)
* STD_INPUT_HANDLE (in module subprocess): Constants<5>.     (line    8)
* STD_OUTPUT_HANDLE (in module subprocess): Constants<5>.    (line   13)
* step (pdb command):                    Debugger Commands.  (line  161)
* step (range attribute):                Ranges.             (line   69)
* step (slice object attribute):         The standard type hierarchy.
                                                             (line  722)
* step (slice object attribute) <1>:     Slicings.           (line   26)
* step() (tkinter.ttk.Progressbar method): ttk Progressbar.  (line   15)
* stereocontrols() (ossaudiodev.oss_mixer_device method): Mixer Device Objects.
                                                             (line   44)
* stls() (poplib.POP3 method):           POP3 Objects.       (line  113)
* stop (range attribute):                Ranges.             (line   65)
* stop (slice object attribute):         The standard type hierarchy.
                                                             (line  722)
* stop (slice object attribute) <1>:     Slicings.           (line   26)
* stop() (asyncio.BaseEventLoop method): Run an event loop.  (line   33)
* stop() (in module tracemalloc):        Functions<7>.       (line   76)
* stop() (logging.handlers.QueueListener method): QueueListener.
                                                             (line   74)
* stop() (tkinter.ttk.Progressbar method): ttk Progressbar.  (line   21)
* stop() (unittest.TestResult method):   Loading and running tests.
                                                             (line  290)
* StopAsyncIteration:                    Concrete exceptions.
                                                             (line  219)
* StopIteration:                         Concrete exceptions.
                                                             (line  193)
* stopListening() (in module logging.config): Configuration functions.
                                                             (line  159)
* stopTest() (unittest.TestResult method): Loading and running tests.
                                                             (line  314)
* stopTestRun() (unittest.TestResult method): Loading and running tests.
                                                             (line  325)
* stop_here() (bdb.Bdb method):          bdb --- Debugger framework.
                                                             (line  191)
* storbinary() (ftplib.FTP method):      FTP Objects.        (line  103)
* store() (imaplib.IMAP4 method):        IMAP4 Objects.      (line  298)
* STORE_ACTIONS (optparse.Option attribute): Adding new actions.
                                                             (line   35)
* STORE_ATTR (opcode):                   Python Bytecode Instructions.
                                                             (line  430)
* STORE_DEREF (opcode):                  Python Bytecode Instructions.
                                                             (line  583)
* STORE_FAST (opcode):                   Python Bytecode Instructions.
                                                             (line  556)
* STORE_GLOBAL (opcode):                 Python Bytecode Instructions.
                                                             (line  439)
* STORE_NAME (opcode):                   Python Bytecode Instructions.
                                                             (line  403)
* STORE_SUBSCR (opcode):                 Python Bytecode Instructions.
                                                             (line  239)
* storlines() (ftplib.FTP method):       FTP Objects.        (line  117)
* str (built-in class):                  Text Sequence Type --- str.
                                                             (line   44)
* str (built-in class); (see also string): Ranges.           (line  119)
* str() (in module locale):              locale --- Internationalization services.
                                                             (line  407)
* strcoll() (in module locale):          locale --- Internationalization services.
                                                             (line  356)
* StreamError:                           tarfile --- Read and write tar archive files.
                                                             (line  193)
* StreamHandler (class in logging):      StreamHandler.      (line   11)
* StreamReader (class in asyncio):       StreamReader.       (line    6)
* StreamReader (class in codecs):        StreamReader Objects.
                                                             (line   10)
* streamreader (codecs.CodecInfo attribute): codecs --- Codec registry and base classes.
                                                             (line   85)
* StreamReaderProtocol (class in asyncio): StreamReaderProtocol.
                                                             (line    6)
* StreamReaderWriter (class in codecs):  StreamReaderWriter Objects.
                                                             (line   12)
* StreamRecoder (class in codecs):       StreamRecoder Objects.
                                                             (line   13)
* StreamRequestHandler (class in socketserver): Request Handler Objects.
                                                             (line   42)
* streams:                               codecs --- Codec registry and base classes.
                                                             (line    8)
* StreamWriter (class in asyncio):       StreamWriter.       (line    6)
* StreamWriter (class in codecs):        StreamWriter Objects.
                                                             (line   10)
* streamwriter (codecs.CodecInfo attribute): codecs --- Codec registry and base classes.
                                                             (line   85)
* strerror (OSError attribute):          Concrete exceptions.
                                                             (line  134)
* strerror():                            Raising exceptions. (line   59)
* strerror() (in module os):             Process Parameters. (line  412)
* strftime() (datetime.date method):     date Objects.       (line  221)
* strftime() (datetime.datetime method): datetime Objects.   (line  545)
* strftime() (datetime.time method):     time Objects.       (line  165)
* strftime() (in module time):           time --- Time access and conversions.
                                                             (line  344)
* strict (csv.Dialect attribute):        Dialects and Formatting Parameters.
                                                             (line   70)
* strict (in module email.policy):       email policy Policy Objects.
                                                             (line  543)
* strict_domain (http.cookiejar.DefaultCookiePolicy attribute): DefaultCookiePolicy Objects.
                                                             (line   95)
* strict_errors() (in module codecs):    Error Handlers.     (line  128)
* strict_ns_domain (http.cookiejar.DefaultCookiePolicy attribute): DefaultCookiePolicy Objects.
                                                             (line  117)
* strict_ns_set_initial_dollar (http.cookiejar.DefaultCookiePolicy attribute): DefaultCookiePolicy Objects.
                                                             (line  122)
* strict_ns_set_path (http.cookiejar.DefaultCookiePolicy attribute): DefaultCookiePolicy Objects.
                                                             (line  127)
* strict_ns_unverifiable (http.cookiejar.DefaultCookiePolicy attribute): DefaultCookiePolicy Objects.
                                                             (line  112)
* strict_rfc2965_unverifiable (http.cookiejar.DefaultCookiePolicy attribute): DefaultCookiePolicy Objects.
                                                             (line  103)
* strides (memoryview attribute):        Memory Views.       (line  422)
* STRING (in module token):              token --- Constants used with Python parse trees.
                                                             (line   40)
* string (module):                       string --- Common string operations.
                                                             (line    6)
* string (re.match attribute):           Match Objects.      (line  181)
* string literal:                        String and Bytes literals.
                                                             (line    6)
* string; conversion:                    Basic customization.
                                                             (line  142)
* string; conversion <1>:                Expression statements.
                                                             (line   17)
* string; format() (built-in function):  Built-in Functions. (line  556)
* string; formatted literal:             String literal concatenation.
                                                             (line   24)
* string; formatting, printf:            printf-style String Formatting.
                                                             (line    6)
* string; immutable sequences:           The standard type hierarchy.
                                                             (line  136)
* string; interpolated literal:          String literal concatenation.
                                                             (line   24)
* string; interpolation, printf:         printf-style String Formatting.
                                                             (line    6)
* string; item:                          Subscriptions.      (line   38)
* string; methods:                       Text Sequence Type --- str.
                                                             (line   85)
* string; object representation:         Finalization and De-allocation.
                                                             (line   79)
* string; PyObject_Str (C function):     Object Protocol.    (line  174)
* string; str (built-in class):          Text Sequence Type --- str.
                                                             (line   44)
* string; str() (built-in function):     Built-in Functions. (line 1357)
* string; text sequence type:            Ranges.             (line  119)
* string; __format__() (object method):  Basic customization.
                                                             (line  142)
* string; __str__() (object method):     Basic customization.
                                                             (line  122)
* StringIO (class in io):                Text I/O<2>.        (line  167)
* stringprep (module):                   stringprep --- Internet String Preparation.
                                                             (line    6)
* strings, documentation:                Defining Functions. (line   21)
* strings, documentation <1>:            Documentation Strings.
                                                             (line    6)
* string_at() (in module ctypes):        Utility functions.  (line  173)
* strip() (bytearray method):            Bytes and Bytearray Operations.
                                                             (line  369)
* strip() (bytes method):                Bytes and Bytearray Operations.
                                                             (line  369)
* strip() (str method):                  String Methods<2>.  (line  472)
* stripspaces (curses.textpad.Textbox attribute): Textbox objects.
                                                             (line  114)
* strip_dirs() (pstats.Stats method):    The Stats Class.    (line   33)
* strptime() (datetime.datetime class method): datetime Objects.
                                                             (line  147)
* strptime() (in module time):           time --- Time access and conversions.
                                                             (line  476)
* strtobool() (in module distutils.util): distutils util --- Miscellaneous other utility functions.
                                                             (line  124)
* Struct (class in struct):              Classes<2>.         (line    8)
* struct (module):                       struct --- Interpret bytes as packed binary data.
                                                             (line    6)
* struct sequence:                       Glossary.           (line 1046)
* Structure (class in ctypes):           Structured data types.
                                                             (line   21)
* struct_time (class in time):           time --- Time access and conversions.
                                                             (line  510)
* strxfrm() (in module locale):          locale --- Internationalization services.
                                                             (line  363)
* STType (in module parser):             ST Objects.         (line   10)
* Style (class in tkinter.ttk):          Ttk Styling.        (line   20)
* ST_ATIME (in module stat):             stat --- Interpreting stat results.
                                                             (line  165)
* st_atime (os.stat_result attribute):   Files and Directories.
                                                             (line  863)
* st_atime_ns (os.stat_result attribute): Files and Directories.
                                                             (line  879)
* st_birthtime (os.stat_result attribute): Files and Directories.
                                                             (line  949)
* st_blksize (os.stat_result attribute): Files and Directories.
                                                             (line  927)
* st_blocks (os.stat_result attribute):  Files and Directories.
                                                             (line  922)
* st_creator (os.stat_result attribute): Files and Directories.
                                                             (line  959)
* ST_CTIME (in module stat):             stat --- Interpreting stat results.
                                                             (line  173)
* st_ctime (os.stat_result attribute):   Files and Directories.
                                                             (line  871)
* st_ctime_ns (os.stat_result attribute): Files and Directories.
                                                             (line  889)
* ST_DEV (in module stat):               stat --- Interpreting stat results.
                                                             (line  144)
* st_dev (os.stat_result attribute):     Files and Directories.
                                                             (line  839)
* st_file_attributes (os.stat_result attribute): Files and Directories.
                                                             (line  969)
* st_flags (os.stat_result attribute):   Files and Directories.
                                                             (line  937)
* st_gen (os.stat_result attribute):     Files and Directories.
                                                             (line  945)
* ST_GID (in module stat):               stat --- Interpreting stat results.
                                                             (line  156)
* st_gid (os.stat_result attribute):     Files and Directories.
                                                             (line  851)
* ST_INO (in module stat):               stat --- Interpreting stat results.
                                                             (line  140)
* st_ino (os.stat_result attribute):     Files and Directories.
                                                             (line  835)
* ST_MODE (in module stat):              stat --- Interpreting stat results.
                                                             (line  136)
* st_mode (os.stat_result attribute):    Files and Directories.
                                                             (line  831)
* ST_MTIME (in module stat):             stat --- Interpreting stat results.
                                                             (line  169)
* st_mtime (os.stat_result attribute):   Files and Directories.
                                                             (line  867)
* st_mtime_ns (os.stat_result attribute): Files and Directories.
                                                             (line  884)
* ST_NLINK (in module stat):             stat --- Interpreting stat results.
                                                             (line  148)
* st_nlink (os.stat_result attribute):   Files and Directories.
                                                             (line  843)
* st_rdev (os.stat_result attribute):    Files and Directories.
                                                             (line  933)
* st_rsize (os.stat_result attribute):   Files and Directories.
                                                             (line  955)
* ST_SIZE (in module stat):              stat --- Interpreting stat results.
                                                             (line  160)
* st_size (os.stat_result attribute):    Files and Directories.
                                                             (line  855)
* st_type (os.stat_result attribute):    Files and Directories.
                                                             (line  963)
* ST_UID (in module stat):               stat --- Interpreting stat results.
                                                             (line  152)
* st_uid (os.stat_result attribute):     Files and Directories.
                                                             (line  847)
* sub() (in module operator):            operator --- Standard operators as functions.
                                                             (line  151)
* sub() (in module re):                  Module Contents.    (line  227)
* sub() (re.regex method):               Regular Expression Objects.
                                                             (line   91)
* subclassing; immutable types:          Basic customization.
                                                             (line    8)
* subdirs (filecmp.dircmp attribute):    The dircmp class.   (line  100)
* SubElement() (in module xml.etree.ElementTree): Functions<5>.
                                                             (line  119)
* submit() (concurrent.futures.Executor method): Executor Objects.
                                                             (line   12)
* submodule_search_locations (importlib.machinery.ModuleSpec attribute): importlib machinery -- Importers and path hooks.
                                                             (line  363)
* subn() (in module re):                 Module Contents.    (line  283)
* subn() (re.regex method):              Regular Expression Objects.
                                                             (line   96)
* subnets() (ipaddress.IPv4Network method): Network objects. (line  160)
* subnets() (ipaddress.IPv6Network method): Network objects. (line  298)
* Subnormal (class in decimal):          Signals.            (line   86)
* suboffsets (memoryview attribute):     Memory Views.       (line  431)
* subpad() (curses.window method):       Window Objects.     (line  502)
* subprocess (module):                   subprocess --- Subprocess management.
                                                             (line    6)
* SubprocessError:                       Using the subprocess Module.
                                                             (line  127)
* SubprocessProtocol (class in asyncio): Protocol classes.   (line   16)
* subprocess_exec() (asyncio.BaseEventLoop method): Create a subprocess low-level API using subprocess Popen.
                                                             (line    8)
* subprocess_shell() (asyncio.BaseEventLoop method): Create a subprocess low-level API using subprocess Popen.
                                                             (line   63)
* subscribe() (imaplib.IMAP4 method):    IMAP4 Objects.      (line  322)
* subscript; assignment:                 Mutable Sequence Types.
                                                             (line   16)
* subscript; operation:                  Common Sequence Operations.
                                                             (line   21)
* subscription:                          The standard type hierarchy.
                                                             (line  109)
* subscription <1>:                      The standard type hierarchy.
                                                             (line  174)
* subscription <2>:                      The standard type hierarchy.
                                                             (line  231)
* subscription <3>:                      Subscriptions.      (line    6)
* subscription; assignment:              Assignment statements.
                                                             (line  108)
* subsequent_indent (textwrap.TextWrapper attribute): textwrap --- Text wrapping and filling.
                                                             (line  202)
* substitute() (string.Template method): Template strings.   (line   34)
* subst_vars() (in module distutils.util): distutils util --- Miscellaneous other utility functions.
                                                             (line   87)
* subTest() (unittest.TestCase method):  Test cases.         (line  105)
* subtract() (collections.Counter method): Counter objects.  (line   81)
* subtract() (decimal.Context method):   Context objects.    (line  498)
* subtraction:                           Binary arithmetic operations.
                                                             (line   66)
* subtype (email.headerregistry.ContentTypeHeader attribute): email headerregistry Custom Header Objects.
                                                             (line  276)
* subwin() (curses.window method):       Window Objects.     (line  509)
* sub_commands (distutils.cmd.Command attribute): Creating a new Distutils command.
                                                             (line   49)
* successful() (multiprocessing.pool.AsyncResult method): Process Pools.
                                                             (line  195)
* suffix_map (in module mimetypes):      mimetypes --- Map filenames to MIME types.
                                                             (line  119)
* suffix_map (mimetypes.MimeTypes attribute): MimeTypes Objects.
                                                             (line   23)
* suite:                                 Compound statements.
                                                             (line   18)
* suite() (in module parser):            Creating ST Objects.
                                                             (line   18)
* suiteClass (unittest.TestLoader attribute): Loading and running tests.
                                                             (line  188)
* sum() (built-in function):             Built-in Functions. (line 1367)
* summarize() (doctest.DocTestRunner method): DocTestRunner objects.
                                                             (line  116)
* summarize_address_range() (in module ipaddress): Other Module Level Functions.
                                                             (line   27)
* sum_list():                            Reference Count Details.
                                                             (line  143)
* sum_sequence():                        Reference Count Details.
                                                             (line  170)
* sum_sequence() <1>:                    Exceptions<13>.     (line   65)
* sunau (module):                        sunau --- Read and write Sun AU files.
                                                             (line    6)
* super (pyclbr.Class attribute):        Class Objects<2>.   (line   19)
* super() (built-in function):           Built-in Functions. (line 1381)
* supernet() (ipaddress.IPv4Network method): Network objects.
                                                             (line  186)
* supernet() (ipaddress.IPv6Network method): Network objects.
                                                             (line  300)
* SupportsAbs (class in typing):         Classes functions and decorators.
                                                             (line  176)
* SupportsFloat (class in typing):       Classes functions and decorators.
                                                             (line  172)
* SupportsInt (class in typing):         Classes functions and decorators.
                                                             (line  168)
* SupportsRound (class in typing):       Classes functions and decorators.
                                                             (line  181)
* supports_bytes_environ (in module os): Process Parameters. (line  418)
* supports_dir_fd (in module os):        Files and Directories.
                                                             (line 1063)
* supports_effective_ids (in module os): Files and Directories.
                                                             (line 1085)
* supports_fd (in module os):            Files and Directories.
                                                             (line 1104)
* supports_follow_symlinks (in module os): Files and Directories.
                                                             (line 1124)
* supports_unicode_filenames (in module os.path): os path --- Common pathname manipulations.
                                                             (line  351)
* suppress() (in module contextlib):     Utilities.          (line  101)
* SuppressCrashReport (class in test.support): test support --- Utilities for the Python test suite.
                                                             (line  449)
* swapcase() (bytearray method):         Bytes and Bytearray Operations.
                                                             (line  582)
* swapcase() (bytes method):             Bytes and Bytearray Operations.
                                                             (line  582)
* swapcase() (str method):               String Methods<2>.  (line  496)
* SW_HIDE (in module subprocess):        Constants<5>.       (line   23)
* Symbol (class in symtable):            Examining Symbol Tables.
                                                             (line   99)
* symbol (module):                       symbol --- Constants used with Python parse trees.
                                                             (line    6)
* SymbolTable (class in symtable):       Examining Symbol Tables.
                                                             (line    6)
* symlink() (in module os):              Files and Directories.
                                                             (line 1144)
* symlink_to() (pathlib.Path method):    Methods<2>.         (line  341)
* symmetric_difference() (set method):   Set Types --- set frozenset.
                                                             (line  105)
* symmetric_difference_update() (set method): Set Types --- set frozenset.
                                                             (line  177)
* symtable (module):                     symtable --- Access to the compiler's symbol tables.
                                                             (line    6)
* symtable() (in module symtable):       Generating Symbol Tables.
                                                             (line    6)
* sym_name (in module symbol):           symbol --- Constants used with Python parse trees.
                                                             (line   19)
* sync() (dbm.dumb.dumbdbm method):      dbm dumb --- Portable DBM implementation.
                                                             (line   48)
* sync() (dbm.gnu.gdbm method):          dbm gnu --- GNU's reinterpretation of dbm.
                                                             (line  109)
* sync() (in module os):                 Files and Directories.
                                                             (line 1183)
* sync() (ossaudiodev.oss_audio_device method): Audio Device Objects.
                                                             (line  165)
* sync() (shelve.Shelf method):          shelve --- Python object persistence.
                                                             (line   63)
* syncdown() (curses.window method):     Window Objects.     (line  519)
* synchronized() (in module multiprocessing.sharedctypes): The multiprocessing sharedctypes module.
                                                             (line   88)
* SyncManager (class in multiprocessing.managers): Managers. (line  133)
* syncok() (curses.window method):       Window Objects.     (line  525)
* syncup() (curses.window method):       Window Objects.     (line  530)
* syntax:                                Notation.           (line    6)
* SyntaxErr:                             Exceptions<12>.     (line   93)
* SyntaxError:                           Concrete exceptions.
                                                             (line  226)
* SyntaxWarning:                         Warnings.           (line   26)
* sys (module):                          sys --- System-specific parameters and functions.
                                                             (line    6)
* sys.exc_info:                          The standard type hierarchy.
                                                             (line  692)
* sys.last_traceback:                    The standard type hierarchy.
                                                             (line  692)
* sys.meta_path:                         The meta path.      (line    6)
* sys.modules:                           The module cache.   (line    6)
* sys.path:                              Path entry finders. (line    6)
* sys.path_hooks:                        Path entry finders. (line    6)
* sys.path_importer_cache:               Path entry finders. (line    6)
* sys.stderr:                            The standard type hierarchy.
                                                             (line  579)
* sys.stdin:                             The standard type hierarchy.
                                                             (line  579)
* sys.stdout:                            The standard type hierarchy.
                                                             (line  579)
* sysconf() (in module os):              Miscellaneous System Information.
                                                             (line   56)
* sysconfig (module):                    sysconfig --- Provide access to Python's configuration information.
                                                             (line    6)
* sysconf_names (in module os):          Miscellaneous System Information.
                                                             (line   66)
* syslog (module):                       syslog --- Unix syslog library routines.
                                                             (line    6)
* syslog() (in module syslog):           syslog --- Unix syslog library routines.
                                                             (line   16)
* SysLogHandler (class in logging.handlers): SysLogHandler.  (line   10)
* system() (in module os):               Process Management. (line  440)
* system() (in module platform):         Cross Platform.     (line  116)
* SystemError:                           Concrete exceptions.
                                                             (line  247)
* SystemError (built-in exception):      Module Objects.     (line   50)
* SystemError (built-in exception) <1>:  Module Objects.     (line   75)
* SystemExit:                            Concrete exceptions.
                                                             (line  261)
* SystemExit (built-in exception):       Exceptions<2>.      (line   26)
* systemId (xml.dom.DocumentType attribute): DocumentType Objects.
                                                             (line   22)
* SystemRandom (class in random):        random --- Generate pseudo-random numbers.
                                                             (line  248)
* SystemRandom (class in secrets):       Random numbers.     (line    9)
* SystemRoot:                            Popen Constructor.  (line  191)
* system_alias() (in module platform):   Cross Platform.     (line  122)
* sys_exc (2to3 fixer):                  Fixers.             (line  303)
* sys_version (http.server.BaseHTTPRequestHandler attribute): http server --- HTTP servers.
                                                             (line  116)
* S_ENFMT (in module stat):              stat --- Interpreting stat results.
                                                             (line  319)
* S_IEXEC (in module stat):              stat --- Interpreting stat results.
                                                             (line  333)
* S_IFBLK (in module stat):              stat --- Interpreting stat results.
                                                             (line  208)
* S_IFCHR (in module stat):              stat --- Interpreting stat results.
                                                             (line  216)
* S_IFDIR (in module stat):              stat --- Interpreting stat results.
                                                             (line  212)
* S_IFDOOR (in module stat):             stat --- Interpreting stat results.
                                                             (line  224)
* S_IFIFO (in module stat):              stat --- Interpreting stat results.
                                                             (line  220)
* S_IFLNK (in module stat):              stat --- Interpreting stat results.
                                                             (line  200)
* S_IFMT() (in module stat):             stat --- Interpreting stat results.
                                                             (line   80)
* S_IFPORT (in module stat):             stat --- Interpreting stat results.
                                                             (line  230)
* S_IFREG (in module stat):              stat --- Interpreting stat results.
                                                             (line  204)
* S_IFSOCK (in module stat):             stat --- Interpreting stat results.
                                                             (line  196)
* S_IFWHT (in module stat):              stat --- Interpreting stat results.
                                                             (line  236)
* S_IMODE() (in module stat):            stat --- Interpreting stat results.
                                                             (line   73)
* S_IREAD (in module stat):              stat --- Interpreting stat results.
                                                             (line  325)
* S_IRGRP (in module stat):              stat --- Interpreting stat results.
                                                             (line  291)
* S_IROTH (in module stat):              stat --- Interpreting stat results.
                                                             (line  307)
* S_IRUSR (in module stat):              stat --- Interpreting stat results.
                                                             (line  275)
* S_IRWXG (in module stat):              stat --- Interpreting stat results.
                                                             (line  287)
* S_IRWXO (in module stat):              stat --- Interpreting stat results.
                                                             (line  303)
* S_IRWXU (in module stat):              stat --- Interpreting stat results.
                                                             (line  271)
* S_ISBLK() (in module stat):            stat --- Interpreting stat results.
                                                             (line   32)
* S_ISCHR() (in module stat):            stat --- Interpreting stat results.
                                                             (line   27)
* S_ISDIR() (in module stat):            stat --- Interpreting stat results.
                                                             (line   23)
* S_ISDOOR() (in module stat):           stat --- Interpreting stat results.
                                                             (line   52)
* S_ISFIFO() (in module stat):           stat --- Interpreting stat results.
                                                             (line   40)
* S_ISGID (in module stat):              stat --- Interpreting stat results.
                                                             (line  253)
* S_ISLNK() (in module stat):            stat --- Interpreting stat results.
                                                             (line   44)
* S_ISPORT() (in module stat):           stat --- Interpreting stat results.
                                                             (line   58)
* S_ISREG() (in module stat):            stat --- Interpreting stat results.
                                                             (line   36)
* S_ISSOCK() (in module stat):           stat --- Interpreting stat results.
                                                             (line   48)
* S_ISUID (in module stat):              stat --- Interpreting stat results.
                                                             (line  249)
* S_ISVTX (in module stat):              stat --- Interpreting stat results.
                                                             (line  264)
* S_ISWHT() (in module stat):            stat --- Interpreting stat results.
                                                             (line   64)
* S_IWGRP (in module stat):              stat --- Interpreting stat results.
                                                             (line  295)
* S_IWOTH (in module stat):              stat --- Interpreting stat results.
                                                             (line  311)
* S_IWRITE (in module stat):             stat --- Interpreting stat results.
                                                             (line  329)
* S_IWUSR (in module stat):              stat --- Interpreting stat results.
                                                             (line  279)
* S_IXGRP (in module stat):              stat --- Interpreting stat results.
                                                             (line  299)
* S_IXOTH (in module stat):              stat --- Interpreting stat results.
                                                             (line  315)
* S_IXUSR (in module stat):              stat --- Interpreting stat results.
                                                             (line  283)
* tab:                                   Indentation.        (line    6)
* tab() (tkinter.ttk.Notebook method):   ttk Notebook.       (line   62)
* TabError:                              Concrete exceptions.
                                                             (line  242)
* tabnanny (module):                     tabnanny --- Detection of ambiguous indentation.
                                                             (line    6)
* tabs() (tkinter.ttk.Notebook method):  ttk Notebook.       (line   71)
* tabsize (textwrap.TextWrapper attribute): textwrap --- Text wrapping and filling.
                                                             (line  159)
* tag (xml.etree.ElementTree.Element attribute): Element Objects.
                                                             (line   16)
* tagName (xml.dom.Element attribute):   Element Objects<2>. (line    9)
* tag_bind() (tkinter.ttk.Treeview method): ttk Treeview.    (line  289)
* tag_configure() (tkinter.ttk.Treeview method): ttk Treeview.
                                                             (line  295)
* tag_has() (tkinter.ttk.Treeview method): ttk Treeview.     (line  305)
* tail (xml.etree.ElementTree.Element attribute): Element Objects.
                                                             (line   21)
* takewhile() (in module itertools):     Itertool functions. (line  506)
* take_snapshot() (in module tracemalloc): Functions<7>.     (line   88)
* tan() (in module cmath):               Trigonometric functions<2>.
                                                             (line   33)
* tan() (in module math):                Trigonometric functions.
                                                             (line   41)
* tanh() (in module cmath):              Hyperbolic functions<2>.
                                                             (line   34)
* tanh() (in module math):               Hyperbolic functions.
                                                             (line   29)
* TarError:                              tarfile --- Read and write tar archive files.
                                                             (line  179)
* TarFile (class in tarfile):            tarfile --- Read and write tar archive files.
                                                             (line  166)
* TarFile (class in tarfile) <1>:        TarFile Objects.    (line   22)
* tarfile (module):                      tarfile --- Read and write tar archive files.
                                                             (line    6)
* target:                                Assignment statements.
                                                             (line   27)
* target (xml.dom.ProcessingInstruction attribute): ProcessingInstruction Objects.
                                                             (line    9)
* target; list:                          Assignment statements.
                                                             (line   27)
* target; list <1>:                      The for statement.  (line    6)
* target; list <2>:                      The for statement.  (line    6)
* target; list; assignment:              Assignment statements.
                                                             (line   35)
* TarInfo (class in tarfile):            TarInfo Objects.    (line   15)
* Task (class in asyncio):               Task.               (line    6)
* task_done() (asyncio.Queue method):    Queue.              (line   95)
* task_done() (multiprocessing.JoinableQueue method): Pipes and Queues.
                                                             (line  220)
* task_done() (queue.Queue method):      Queue Objects.      (line   62)
* tbreak (pdb command):                  Debugger Commands.  (line   88)
* tb_frame (traceback attribute):        The standard type hierarchy.
                                                             (line  705)
* tb_lasti (traceback attribute):        The standard type hierarchy.
                                                             (line  705)
* tb_lineno (traceback attribute):       The standard type hierarchy.
                                                             (line  705)
* tb_locals (unittest.TestResult attribute): Loading and running tests.
                                                             (line  274)
* tb_next (traceback attribute):         The standard type hierarchy.
                                                             (line  705)
* tcdrain() (in module termios):         termios --- POSIX style tty control.
                                                             (line   51)
* tcflow() (in module termios):          termios --- POSIX style tty control.
                                                             (line   62)
* tcflush() (in module termios):         termios --- POSIX style tty control.
                                                             (line   56)
* tcgetattr() (in module termios):       termios --- POSIX style tty control.
                                                             (line   24)
* tcgetpgrp() (in module os):            File Descriptor Operations.
                                                             (line  492)
* Tcl() (in module tkinter):             Tkinter Modules.    (line   33)
* TCL_LIBRARY:                           How do I freeze Tkinter applications?.
                                                             (line   11)
* TCPServer (class in socketserver):     socketserver --- A framework for network servers.
                                                             (line   15)
* tcsendbreak() (in module termios):     termios --- POSIX style tty control.
                                                             (line   45)
* tcsetattr() (in module termios):       termios --- POSIX style tty control.
                                                             (line   35)
* tcsetpgrp() (in module os):            File Descriptor Operations.
                                                             (line  499)
* tearDown() (unittest.TestCase method): Test cases.         (line   41)
* tearDownClass() (unittest.TestCase method): Test cases.    (line   69)
* tee() (in module itertools):           Itertool functions. (line  519)
* tell() (aifc.aifc method):             aifc --- Read and write AIFF and AIFC files.
                                                             (line  116)
* tell() (aifc.aifc method) <1>:         aifc --- Read and write AIFF and AIFC files.
                                                             (line  186)
* tell() (chunk.Chunk method):           chunk --- Read IFF chunked data.
                                                             (line   97)
* tell() (io.IOBase method):             I/O Base Classes.   (line  135)
* tell() (io.TextIOBase method):         Text I/O<2>.        (line   89)
* tell() (mmap.mmap method):             mmap --- Memory-mapped file support.
                                                             (line  246)
* tell() (sunau.AU_read method):         AU_read Objects.    (line   65)
* tell() (sunau.AU_write method):        AU_write Objects.   (line   39)
* tell() (wave.Wave_read method):        Wave_read Objects.  (line   73)
* tell() (wave.Wave_write method):       Wave_write Objects. (line   62)
* Telnet (class in telnetlib):           telnetlib --- Telnet client.
                                                             (line   25)
* telnetlib (module):                    telnetlib --- Telnet client.
                                                             (line    6)
* TEMP:                                  tempfile --- Generate temporary files and directories.
                                                             (line  213)
* tempdir (in module tempfile):          tempfile --- Generate temporary files and directories.
                                                             (line  254)
* tempfile (module):                     tempfile --- Generate temporary files and directories.
                                                             (line    6)
* Template (class in pipes):             pipes --- Interface to shell pipelines.
                                                             (line   19)
* Template (class in string):            Template strings.   (line   29)
* template (string.Template attribute):  Template strings.   (line   64)
* temporary; file:                       tempfile --- Generate temporary files and directories.
                                                             (line    6)
* temporary; file name:                  tempfile --- Generate temporary files and directories.
                                                             (line    6)
* TemporaryDirectory() (in module tempfile): tempfile --- Generate temporary files and directories.
                                                             (line  107)
* TemporaryFile() (in module tempfile):  tempfile --- Generate temporary files and directories.
                                                             (line   28)
* temp_cwd() (in module test.support):   test support --- Utilities for the Python test suite.
                                                             (line  213)
* temp_dir() (in module test.support):   test support --- Utilities for the Python test suite.
                                                             (line  194)
* temp_umask() (in module test.support): test support --- Utilities for the Python test suite.
                                                             (line  227)
* teredo (ipaddress.IPv6Address attribute): Address objects. (line  208)
* TERM:                                  Functions<2>.       (line  436)
* TERM <1>:                              Functions<2>.       (line  463)
* termattrs() (in module curses):        Functions<2>.       (line  455)
* terminal_size (class in os):           Querying the size of a terminal.
                                                             (line   25)
* terminate() (asyncio.asyncio.subprocess.Process method): Process.
                                                             (line   85)
* terminate() (asyncio.BaseSubprocessTransport method): BaseSubprocessTransport.
                                                             (line   51)
* terminate() (multiprocessing.pool.Pool method): Process Pools.
                                                             (line  156)
* terminate() (multiprocessing.Process method): Process and exceptions.
                                                             (line  146)
* terminate() (subprocess.Popen method): Popen Objects.      (line   87)
* termination model:                     Exceptions<2>.      (line   20)
* termios (module):                      termios --- POSIX style tty control.
                                                             (line    6)
* termname() (in module curses):         Functions<2>.       (line  461)
* ternary; operator:                     Conditional expressions.
                                                             (line    6)
* test (doctest.DocTestFailure attribute): Debugging.        (line  195)
* test (doctest.UnexpectedException attribute): Debugging.   (line  216)
* test (module):                         test --- Regression tests package for Python.
                                                             (line    6)
* test() (in module cgi):                Functions<6>.       (line   51)
* test.support (module):                 test support --- Utilities for the Python test suite.
                                                             (line    6)
* TestCase (class in unittest):          Test cases.         (line    6)
* TestFailed:                            test support --- Utilities for the Python test suite.
                                                             (line   16)
* testfile() (in module doctest):        Basic API.          (line   12)
* TESTFN (in module test.support):       test support --- Utilities for the Python test suite.
                                                             (line   40)
* TestLoader (class in unittest):        Loading and running tests.
                                                             (line    6)
* testMethodPrefix (unittest.TestLoader attribute): Loading and running tests.
                                                             (line  174)
* testmod() (in module doctest):         Basic API.          (line   89)
* TestResult (class in unittest):        Loading and running tests.
                                                             (line  196)
* tests (in module imghdr):              imghdr --- Determine the type of an image.
                                                             (line   73)
* testsource() (in module doctest):      Debugging.          (line  106)
* testsRun (unittest.TestResult attribute): Loading and running tests.
                                                             (line  252)
* TestSuite (class in unittest):         Grouping tests.     (line    6)
* testzip() (zipfile.ZipFile method):    ZipFile Objects.    (line  174)
* text (in module msilib):               Precomputed tables. (line   23)
* text (traceback.TracebackException attribute): TracebackException Objects.
                                                             (line   50)
* text (xml.etree.ElementTree.Element attribute): Element Objects.
                                                             (line   21)
* text encoding:                         Glossary.           (line 1055)
* text file:                             Glossary.           (line 1059)
* text mode:                             Built-in Functions. (line 1067)
* text() (msilib.Dialog method):         GUI classes.        (line   56)
* Textbox (class in curses.textpad):     Textbox objects.    (line    8)
* TextCalendar (class in calendar):      calendar --- General calendar-related functions.
                                                             (line  103)
* textdomain() (in module gettext):      GNU gettext API.    (line   32)
* TextFile (class in distutils.text_file): distutils text_file --- The TextFile class.
                                                             (line   10)
* textinput() (in module turtle):        Input methods.      (line    6)
* TextIOBase (class in io):              Text I/O<2>.        (line    6)
* TextIOWrapper (class in io):           Text I/O<2>.        (line  100)
* TextTestResult (class in unittest):    Loading and running tests.
                                                             (line  401)
* TextTestRunner (class in unittest):    Loading and running tests.
                                                             (line  416)
* textwrap (module):                     textwrap --- Text wrapping and filling.
                                                             (line    6)
* TextWrapper (class in textwrap):       textwrap --- Text wrapping and filling.
                                                             (line  126)
* text_factory (sqlite3.Connection attribute): Connection Objects.
                                                             (line  316)
* theme_create() (tkinter.ttk.Style method): Ttk Styling.    (line  191)
* theme_names() (tkinter.ttk.Style method): Ttk Styling.     (line  239)
* theme_settings() (tkinter.ttk.Style method): Ttk Styling.  (line  201)
* theme_use() (tkinter.ttk.Style method): Ttk Styling.       (line  243)
* THOUSEP (in module locale):            locale --- Internationalization services.
                                                             (line  224)
* Thread (class in threading):           Thread Objects.     (line   53)
* thread() (imaplib.IMAP4 method):       IMAP4 Objects.      (line  326)
* threading (module):                    threading --- Thread-based parallelism.
                                                             (line    6)
* ThreadingMixIn (class in socketserver): Server Creation Notes.
                                                             (line   28)
* ThreadingTCPServer (class in socketserver): Server Creation Notes.
                                                             (line   42)
* ThreadingUDPServer (class in socketserver): Server Creation Notes.
                                                             (line   42)
* ThreadPoolExecutor (class in concurrent.futures): ThreadPoolExecutor.
                                                             (line   39)
* threads; POSIX:                        _thread --- Low-level threading API.
                                                             (line   14)
* thread_info (in module sys):           sys --- System-specific parameters and functions.
                                                             (line 1232)
* throw (2to3 fixer):                    Fixers.             (line  308)
* throw() (coroutine method):            Coroutine Objects.  (line   34)
* throw() (generator method):            Generator-iterator methods.
                                                             (line   38)
* tigetflag() (in module curses):        Functions<2>.       (line  466)
* tigetnum() (in module curses):         Functions<2>.       (line  473)
* tigetstr() (in module curses):         Functions<2>.       (line  480)
* TILDE (in module token):               token --- Constants used with Python parse trees.
                                                             (line   40)
* tilt() (in module turtle):             Appearance.         (line  102)
* tiltangle() (in module turtle):        Appearance.         (line  137)
* time (class in datetime):              time Objects.       (line   10)
* time (module):                         time --- Time access and conversions.
                                                             (line    6)
* time() (asyncio.BaseEventLoop method): Delayed calls.      (line   45)
* time() (datetime.datetime method):     datetime Objects.   (line  301)
* time() (in module time):               time --- Time access and conversions.
                                                             (line  572)
* Time2Internaldate() (in module imaplib): imaplib --- IMAP4 protocol client.
                                                             (line  117)
* timedelta (class in datetime):         timedelta Objects.  (line    9)
* TimedRotatingFileHandler (class in logging.handlers): TimedRotatingFileHandler.
                                                             (line   10)
* timegm() (in module calendar):         calendar --- General calendar-related functions.
                                                             (line  256)
* timeit (module):                       timeit --- Measure execution time of small code snippets.
                                                             (line    6)
* timeit command line option; -c, –clock: Command-Line Interface<2>.
                                                             (line   44)
* timeit command line option; -h, –help: Command-Line Interface<2>.
                                                             (line   52)
* timeit command line option; -n N, –number=N: Command-Line Interface<2>.
                                                             (line   13)
* timeit command line option; -p, –process: Command-Line Interface<2>.
                                                             (line   25)
* timeit command line option; -r N, –repeat=N: Command-Line Interface<2>.
                                                             (line   17)
* timeit command line option; -s S, –setup=S: Command-Line Interface<2>.
                                                             (line   21)
* timeit command line option; -t, –time: Command-Line Interface<2>.
                                                             (line   33)
* timeit command line option; -u, –unit=U: Command-Line Interface<2>.
                                                             (line   37)
* timeit command line option; -v, –verbose: Command-Line Interface<2>.
                                                             (line   48)
* timeit() (in module timeit):           Python Interface.   (line    8)
* timeit() (timeit.Timer method):        Python Interface.   (line   66)
* timeout:                               Exceptions<7>.      (line   40)
* timeout (socketserver.BaseServer attribute): Server Objects.
                                                             (line  112)
* timeout (subprocess.TimeoutExpired attribute): Using the subprocess Module.
                                                             (line  142)
* timeout() (curses.window method):      Window Objects.     (line  535)
* timeout() (in module asyncio):         Task functions.     (line  160)
* TimeoutError:                          OS exceptions.      (line  103)
* TimeoutError <1>:                      Process and exceptions.
                                                             (line  200)
* TimeoutError <2>:                      Exception classes.  (line   10)
* TimeoutError <3>:                      TimeoutError.       (line    6)
* TimeoutExpired:                        Using the subprocess Module.
                                                             (line  133)
* TIMEOUT_MAX (in module threading):     threading --- Thread-based parallelism.
                                                             (line   98)
* TIMEOUT_MAX (in module _thread):       _thread --- Low-level threading API.
                                                             (line   86)
* Timer (class in threading):            Timer Objects.      (line   25)
* Timer (class in timeit):               Python Interface.   (line   36)
* times() (in module os):                Process Management. (line  470)
* timestamp() (datetime.datetime method): datetime Objects.  (line  424)
* timetuple() (datetime.date method):    date Objects.       (line  153)
* timetuple() (datetime.datetime method): datetime Objects.  (line  392)
* timetz() (datetime.datetime method):   datetime Objects.   (line  307)
* timezone (class in datetime):          timezone Objects.   (line   13)
* timezone (in module time):             time --- Time access and conversions.
                                                             (line  581)
* title() (bytearray method):            Bytes and Bytearray Operations.
                                                             (line  607)
* title() (bytes method):                Bytes and Bytearray Operations.
                                                             (line  607)
* title() (in module turtle):            Methods specific to Screen not inherited from TurtleScreen.
                                                             (line   49)
* title() (str method):                  String Methods<2>.  (line  502)
* Tix:                                   tkinter tix --- Extension widgets for Tk.
                                                             (line    6)
* tixCommand (class in tkinter.tix):     Tix Commands.       (line    6)
* tix_addbitmapdir() (tkinter.tix.tixCommand method): Tix Commands.
                                                             (line   47)
* tix_cget() (tkinter.tix.tixCommand method): Tix Commands.  (line   32)
* tix_configure() (tkinter.tix.tixCommand method): Tix Commands.
                                                             (line   20)
* tix_filedialog() (tkinter.tix.tixCommand method): Tix Commands.
                                                             (line   57)
* tix_getbitmap() (tkinter.tix.tixCommand method): Tix Commands.
                                                             (line   37)
* tix_getimage() (tkinter.tix.tixCommand method): Tix Commands.
                                                             (line   68)
* TIX_LIBRARY:                           Using Tix.          (line   32)
* tix_option_get() (tkinter.tix.tixCommand method): Tix Commands.
                                                             (line   82)
* tix_resetoptions() (tkinter.tix.tixCommand method): Tix Commands.
                                                             (line   86)
* Tk:                                    Graphical User Interfaces with Tk.
                                                             (line    6)
* Tk (class in tkinter):                 Tkinter Modules.    (line   25)
* Tk (class in tkinter.tix):             Using Tix.          (line    6)
* Tk Option Data Types:                  Tk Option Data Types.
                                                             (line    6)
* Tkinter:                               Graphical User Interfaces with Tk.
                                                             (line    6)
* tkinter (module):                      tkinter --- Python interface to Tcl/Tk.
                                                             (line    6)
* tkinter.scrolledtext (module):         tkinter scrolledtext --- Scrolled Text Widget.
                                                             (line    6)
* tkinter.tix (module):                  tkinter tix --- Extension widgets for Tk.
                                                             (line    6)
* tkinter.ttk (module):                  tkinter ttk --- Tk themed widgets.
                                                             (line    6)
* TK_LIBRARY:                            How do I freeze Tkinter applications?.
                                                             (line   11)
* TList (class in tkinter.tix):          Tabular ListBox.    (line    6)
* TLS:                                   ssl --- TLS/SSL wrapper for socket objects.
                                                             (line    6)
* TMP:                                   tempfile --- Generate temporary files and directories.
                                                             (line  215)
* TMPDIR:                                tempfile --- Generate temporary files and directories.
                                                             (line  211)
* ToASCII() (in module encodings.idna):  encodings idna --- Internationalized Domain Names in Applications.
                                                             (line   52)
* tobuf() (tarfile.TarInfo method):      TarInfo Objects.    (line   31)
* tobytes() (array.array method):        array --- Efficient arrays of numeric values.
                                                             (line  217)
* tobytes() (memoryview method):         Memory Views.       (line  159)
* today() (datetime.date class method):  date Objects.       (line   31)
* today() (datetime.datetime class method): datetime Objects.
                                                             (line   41)
* tofile() (array.array method):         array --- Efficient arrays of numeric values.
                                                             (line  226)
* token:                                 Lexical analysis.   (line    6)
* token (module):                        token --- Constants used with Python parse trees.
                                                             (line    6)
* token (shlex.shlex attribute):         shlex Objects.      (line  160)
* tokeneater() (in module tabnanny):     tabnanny --- Detection of ambiguous indentation.
                                                             (line   42)
* TokenError:                            Tokenizing Input.   (line  111)
* tokenize (module):                     tokenize --- Tokenizer for Python source.
                                                             (line    6)
* tokenize command line option; -e, –exact: Command-Line Usage<2>.
                                                             (line   19)
* tokenize command line option; -h, –help: Command-Line Usage<2>.
                                                             (line   15)
* tokenize() (in module tokenize):       Tokenizing Input.   (line    8)
* token_bytes() (in module secrets):     Generating tokens.  (line   10)
* token_hex() (in module secrets):       Generating tokens.  (line   19)
* token_urlsafe() (in module secrets):   Generating tokens.  (line   28)
* tok_name (in module token):            token --- Constants used with Python parse trees.
                                                             (line   20)
* tolist() (array.array method):         array --- Efficient arrays of numeric values.
                                                             (line  231)
* tolist() (memoryview method):          Memory Views.       (line  187)
* tolist() (parser.ST method):           ST Objects.         (line   29)
* tomono() (in module audioop):          audioop --- Manipulate raw audio data.
                                                             (line  198)
* toordinal() (datetime.date method):    date Objects.       (line  163)
* toordinal() (datetime.datetime method): datetime Objects.  (line  419)
* top() (curses.panel.Panel method):     Panel Objects.      (line   52)
* top() (poplib.POP3 method):            POP3 Objects.       (line   86)
* toprettyxml() (xml.dom.minidom.Node method): DOM Objects.  (line   51)
* top_panel() (in module curses.panel):  Functions<3>.       (line   19)
* tostereo() (in module audioop):        audioop --- Manipulate raw audio data.
                                                             (line  204)
* tostring() (array.array method):       array --- Efficient arrays of numeric values.
                                                             (line  235)
* tostring() (in module xml.etree.ElementTree): Functions<5>.
                                                             (line  132)
* tostringlist() (in module xml.etree.ElementTree): Functions<5>.
                                                             (line  147)
* total_changes (sqlite3.Connection attribute): Connection Objects.
                                                             (line  362)
* total_ordering() (in module functools): functools --- Higher-order functions and operations on callable objects.
                                                             (line  117)
* total_seconds() (datetime.timedelta method): timedelta Objects.
                                                             (line  209)
* totuple() (parser.ST method):          ST Objects.         (line   33)
* touch() (pathlib.Path method):         Methods<2>.         (line  360)
* touchline() (curses.window method):    Window Objects.     (line  545)
* touchwin() (curses.window method):     Window Objects.     (line  552)
* tounicode() (array.array method):      array --- Efficient arrays of numeric values.
                                                             (line  239)
* ToUnicode() (in module encodings.idna): encodings idna --- Internationalized Domain Names in Applications.
                                                             (line   57)
* towards() (in module turtle):          Tell Turtle's state.
                                                             (line   15)
* toxml() (xml.dom.minidom.Node method): DOM Objects.        (line   39)
* to_bytes() (int method):               Additional Methods on Integer Types.
                                                             (line   35)
* to_eng_string() (decimal.Context method): Context objects. (line  502)
* to_eng_string() (decimal.Decimal method): Decimal objects. (line  554)
* to_integral() (decimal.Decimal method): Decimal objects.   (line  562)
* to_integral_exact() (decimal.Context method): Context objects.
                                                             (line  506)
* to_integral_exact() (decimal.Decimal method): Decimal objects.
                                                             (line  568)
* to_integral_value() (decimal.Decimal method): Decimal objects.
                                                             (line  576)
* to_sci_string() (decimal.Context method): Context objects. (line  510)
* tparm() (in module curses):            Functions<2>.       (line  487)
* tp_as_async (C member):                Type Objects<3>.    (line  313)
* tp_as_mapping (C member):              Type Objects<3>.    (line  360)
* tp_as_number (C member):               Type Objects<3>.    (line  342)
* tp_as_sequence (C member):             Type Objects<3>.    (line  351)
* Trace (class in trace):                Programmatic Interface.
                                                             (line    6)
* Trace (class in tracemalloc):          Trace.              (line    6)
* trace (module):                        trace --- Trace or track Python statement execution.
                                                             (line    6)
* trace command line option; -c, –count: Main options.       (line   12)
* trace command line option; -C, –coverdir=<dir>: Modifiers. (line   11)
* trace command line option; -f, –file=<file>: Modifiers.    (line    6)
* trace command line option; -g, –timing: Modifiers.         (line   33)
* trace command line option; –help:      Command-Line Usage. (line   15)
* trace command line option; –ignore-dir=<dir>: Filters.     (line   14)
* trace command line option; –ignore-module=<mod>: Filters.  (line    8)
* trace command line option; -l, –listfuncs: Main options.   (line   23)
* trace command line option; -m, –missing: Modifiers.        (line   17)
* trace command line option; -R, –no-report: Modifiers.      (line   27)
* trace command line option; -r, –report: Main options.      (line   27)
* trace command line option; -s, –summary: Modifiers.        (line   22)
* trace command line option; -t, –trace: Main options.       (line   19)
* trace command line option; -T, –trackcalls: Main options.  (line   33)
* trace command line option; –version:   Command-Line Usage. (line   19)
* trace function:                        threading --- Thread-based parallelism.
                                                             (line   64)
* trace function <1>:                    sys --- System-specific parameters and functions.
                                                             (line  534)
* trace function <2>:                    sys --- System-specific parameters and functions.
                                                             (line 1036)
* trace() (in module inspect):           The interpreter stack.
                                                             (line   94)
* Traceback (class in tracemalloc):      Traceback.          (line    6)
* traceback (module):                    traceback --- Print or retrieve a stack traceback.
                                                             (line    6)
* traceback (tracemalloc.Statistic attribute): Statistic.    (line   23)
* traceback (tracemalloc.StatisticDiff attribute): StatisticDiff.
                                                             (line   38)
* traceback (tracemalloc.Trace attribute): Trace.            (line   17)
* TracebackException (class in traceback): TracebackException Objects.
                                                             (line   11)
* tracebacklimit (in module sys):        sys --- System-specific parameters and functions.
                                                             (line 1266)
* tracebacks; in CGI scripts:            cgitb --- Traceback manager for CGI scripts.
                                                             (line    6)
* TracebackType (in module types):       Standard Interpreter Types.
                                                             (line   85)
* traceback_limit (tracemalloc.Snapshot attribute): Snapshot.
                                                             (line   83)
* traceback_limit (wsgiref.handlers.BaseHandler attribute): wsgiref handlers -- server/gateway base classes.
                                                             (line  216)
* tracemalloc (module):                  tracemalloc --- Trace memory allocations.
                                                             (line    6)
* tracer() (in module turtle):           Animation control.  (line   23)
* traces (tracemalloc.Snapshot attribute): Snapshot.         (line   89)
* trace_dispatch() (bdb.Bdb method):     bdb --- Debugger framework.
                                                             (line  111)
* trailing; comma:                       Expression lists.   (line   12)
* transfercmd() (ftplib.FTP method):     FTP Objects.        (line  126)
* TransientResource (class in test.support): test support --- Utilities for the Python test suite.
                                                             (line  420)
* translate() (bytearray method):        Bytes and Bytearray Operations.
                                                             (line  207)
* translate() (bytes method):            Bytes and Bytearray Operations.
                                                             (line  207)
* translate() (in module fnmatch):       fnmatch --- Unix filename pattern matching.
                                                             (line   71)
* translate() (str method):              String Methods<2>.  (line  534)
* translation() (in module gettext):     Class-based API.    (line   44)
* transport (asyncio.StreamWriter attribute): StreamWriter.  (line   19)
* Transport Layer Security:              ssl --- TLS/SSL wrapper for socket objects.
                                                             (line    6)
* traverseproc (C type):                 Supporting Cyclic Garbage Collection.
                                                             (line  108)
* Tree (class in tkinter.tix):           Hierarchical ListBox.
                                                             (line   20)
* TreeBuilder (class in xml.etree.ElementTree): TreeBuilder Objects.
                                                             (line    6)
* Treeview (class in tkinter.ttk):       ttk Treeview.       (line    6)
* triangular() (in module random):       random --- Generate pseudo-random numbers.
                                                             (line  179)
* triple-quoted string:                  String and Bytes literals.
                                                             (line   36)
* triple-quoted string <1>:              Glossary.           (line 1073)
* True:                                  The standard type hierarchy.
                                                             (line   75)
* true:                                  Truth Value Testing.
                                                             (line   24)
* True <1>:                              Truth Value Testing.
                                                             (line   27)
* True <2>:                              Boolean Values.     (line   15)
* True (built-in variable):              Built-in Constants. (line   13)
* truediv() (in module operator):        operator --- Standard operators as functions.
                                                             (line  156)
* trunc() (in module math):              Numeric Types --- int float complex.
                                                             (line  103)
* trunc() (in module math) <1>:          Number-theoretic and representation functions.
                                                             (line  146)
* truncate() (in module os):             Files and Directories.
                                                             (line 1191)
* truncate() (io.IOBase method):         I/O Base Classes.   (line  139)
* truth() (in module operator):          operator --- Standard operators as functions.
                                                             (line   55)
* truth; value:                          Truth Value Testing.
                                                             (line    6)
* ttk:                                   tkinter ttk --- Tk themed widgets.
                                                             (line    6)
* tty (module):                          tty --- Terminal control functions.
                                                             (line    6)
* tty; I/O control:                      termios --- POSIX style tty control.
                                                             (line    6)
* ttyname() (in module os):              File Descriptor Operations.
                                                             (line  507)
* tuple (built-in class):                Tuples.             (line   12)
* Tuple (class in typing):               Classes functions and decorators.
                                                             (line  105)
* tuple2st() (in module parser):         Creating ST Objects.
                                                             (line   51)
* tuple; display:                        Parenthesized forms.
                                                             (line   20)
* tuple_params (2to3 fixer):             Fixers.             (line  312)
* turnoff_sigfpe() (in module fpectl):   fpectl --- Floating point exception control.
                                                             (line   48)
* turnon_sigfpe() (in module fpectl):    fpectl --- Floating point exception control.
                                                             (line   43)
* Turtle (class in turtle):              Public classes.     (line   16)
* turtle (module):                       turtle --- Turtle graphics.
                                                             (line    6)
* turtledemo (module):                   turtledemo --- Demo scripts.
                                                             (line    6)
* turtles() (in module turtle):          Settings and special methods.
                                                             (line   96)
* TurtleScreen (class in turtle):        Public classes.     (line   22)
* turtlesize() (in module turtle):       Appearance.         (line   52)
* type:                                  The standard type hierarchy.
                                                             (line    6)
* type <1>:                              Glossary.           (line 1081)
* type (built-in class):                 Built-in Functions. (line 1449)
* type (optparse.Option attribute):      Option attributes.  (line   19)
* type (socket.socket attribute):        Socket Objects.     (line  540)
* type (tarfile.TarInfo attribute):      TarInfo Objects.    (line   59)
* type (urllib.request.Request attribute): Request Objects.  (line   21)
* type of an object:                     Objects values and types.
                                                             (line   11)
* type; hierarchy:                       The standard type hierarchy.
                                                             (line    6)
* typeahead() (in module curses):        Functions<2>.       (line  494)
* typecode (array.array attribute):      array --- Efficient arrays of numeric values.
                                                             (line  105)
* typecodes (in module array):           array --- Efficient arrays of numeric values.
                                                             (line   92)
* TYPED_ACTIONS (optparse.Option attribute): Adding new actions.
                                                             (line   39)
* typed_subpart_iterator() (in module email.iterators): email iterators Iterators.
                                                             (line   22)
* TypeError:                             Concrete exceptions.
                                                             (line  288)
* types (2to3 fixer):                    Fixers.             (line  317)
* types (module):                        types --- Dynamic type creation and names for built-in types.
                                                             (line    6)
* TYPES (optparse.Option attribute):     Adding new types.   (line   11)
* types, internal:                       The standard type hierarchy.
                                                             (line  594)
* types_map (in module mimetypes):       mimetypes --- Map filenames to MIME types.
                                                             (line  131)
* types_map (mimetypes.MimeTypes attribute): MimeTypes Objects.
                                                             (line   38)
* types_map_inv (mimetypes.MimeTypes attribute): MimeTypes Objects.
                                                             (line   45)
* TypeVar (class in typing):             Classes functions and decorators.
                                                             (line   19)
* TYPE_CHECKER (optparse.Option attribute): Adding new types.
                                                             (line   16)
* typing (module):                       typing --- Support for type hints.
                                                             (line    6)
* TZ:                                    time --- Time access and conversions.
                                                             (line  596)
* TZ <1>:                                time --- Time access and conversions.
                                                             (line  600)
* TZ <2>:                                time --- Time access and conversions.
                                                             (line  605)
* TZ <3>:                                time --- Time access and conversions.
                                                             (line  607)
* TZ <4>:                                time --- Time access and conversions.
                                                             (line  667)
* tzinfo (class in datetime):            tzinfo Objects.     (line    6)
* tzinfo (datetime.datetime attribute):  datetime Objects.   (line  205)
* tzinfo (datetime.time attribute):      time Objects.       (line   64)
* tzname (in module time):               time --- Time access and conversions.
                                                             (line  587)
* tzname() (datetime.datetime method):   datetime Objects.   (line  386)
* tzname() (datetime.time method):       time Objects.       (line  195)
* tzname() (datetime.timezone method):   timezone Objects.   (line   34)
* tzname() (datetime.tzinfo method):     tzinfo Objects.     (line  113)
* tzset() (in module time):              time --- Time access and conversions.
                                                             (line  593)
* T_FMT (in module locale):              locale --- Internationalization services.
                                                             (line  189)
* T_FMT_AMPM (in module locale):         locale --- Internationalization services.
                                                             (line  195)
* u-LAW:                                 audioop --- Manipulate raw audio data.
                                                             (line   15)
* u-LAW <1>:                             aifc --- Read and write AIFF and AIFC files.
                                                             (line  164)
* u-LAW <2>:                             sndhdr --- Determine type of sound file.
                                                             (line    6)
* ucd_3_2_0 (in module unicodedata):     unicodedata --- Unicode Database.
                                                             (line  121)
* udata (select.kevent attribute):       Kevent Objects.     (line  179)
* UDPServer (class in socketserver):     socketserver --- A framework for network servers.
                                                             (line   25)
* UF_APPEND (in module stat):            stat --- Interpreting stat results.
                                                             (line  348)
* UF_COMPRESSED (in module stat):        stat --- Interpreting stat results.
                                                             (line  360)
* UF_HIDDEN (in module stat):            stat --- Interpreting stat results.
                                                             (line  364)
* UF_IMMUTABLE (in module stat):         stat --- Interpreting stat results.
                                                             (line  344)
* UF_NODUMP (in module stat):            stat --- Interpreting stat results.
                                                             (line  340)
* UF_NOUNLINK (in module stat):          stat --- Interpreting stat results.
                                                             (line  356)
* UF_OPAQUE (in module stat):            stat --- Interpreting stat results.
                                                             (line  352)
* uid (tarfile.TarInfo attribute):       TarInfo Objects.    (line   72)
* uid() (imaplib.IMAP4 method):          IMAP4 Objects.      (line  349)
* uidl() (poplib.POP3 method):           POP3 Objects.       (line   98)
* ulaw2lin() (in module audioop):        audioop --- Manipulate raw audio data.
                                                             (line  211)
* ULONG_MAX:                             Integer Objects.    (line  167)
* umask() (in module os):                Process Parameters. (line  425)
* unalias (pdb command):                 Debugger Commands.  (line  306)
* uname (tarfile.TarInfo attribute):     TarInfo Objects.    (line   80)
* uname() (in module os):                Process Parameters. (line  429)
* uname() (in module platform):          Cross Platform.     (line  133)
* unary; arithmetic; operation:          Unary arithmetic and bitwise operations.
                                                             (line    6)
* unary; bitwise; operation:             Unary arithmetic and bitwise operations.
                                                             (line    6)
* UNARY_INVERT (opcode):                 Python Bytecode Instructions.
                                                             (line   98)
* UNARY_NEGATIVE (opcode):               Python Bytecode Instructions.
                                                             (line   90)
* UNARY_NOT (opcode):                    Python Bytecode Instructions.
                                                             (line   94)
* UNARY_POSITIVE (opcode):               Python Bytecode Instructions.
                                                             (line   86)
* unbinding; name:                       The del statement<2>.
                                                             (line   15)
* UnboundLocalError:                     Resolution of names.
                                                             (line   16)
* UnboundLocalError <1>:                 Concrete exceptions.
                                                             (line  294)
* unbuffered I/O:                        Built-in Functions. (line 1067)
* UNC paths; and os.makedirs():          Files and Directories.
                                                             (line  368)
* unconsumed_tail (zlib.Decompress attribute): zlib --- Compression compatible with gzip.
                                                             (line  195)
* unctrl() (in module curses):           Functions<2>.       (line  506)
* unctrl() (in module curses.ascii):     curses ascii --- Utilities for ASCII characters.
                                                             (line  225)
* undefine_macro() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  170)
* Underflow (class in decimal):          Signals.            (line   93)
* undisplay (pdb command):               Debugger Commands.  (line  266)
* undo() (in module turtle):             Turtle motion.      (line  291)
* undobufferentries() (in module turtle): Special Turtle methods.
                                                             (line   74)
* undoc_header (cmd.Cmd attribute):      Cmd Objects.        (line  158)
* unescape() (in module html):           html --- HyperText Markup Language support.
                                                             (line   23)
* unescape() (in module xml.sax.saxutils): xml sax saxutils --- SAX Utilities.
                                                             (line   20)
* UnexpectedException:                   Debugging.          (line  208)
* unexpectedSuccesses (unittest.TestResult attribute): Loading and running tests.
                                                             (line  242)
* ungetch() (in module curses):          Functions<2>.       (line  513)
* ungetch() (in module msvcrt):          Console I/O.        (line   44)
* ungetmouse() (in module curses):       Functions<2>.       (line  535)
* ungetwch() (in module msvcrt):         Console I/O.        (line   50)
* unget_wch() (in module curses):        Functions<2>.       (line  526)
* unhexlify() (in module binascii):      binascii --- Convert between binary and ASCII.
                                                             (line  132)
* Unicode:                               The standard type hierarchy.
                                                             (line  138)
* Unicode <1>:                           unicodedata --- Unicode Database.
                                                             (line    6)
* Unicode <2>:                           codecs --- Codec registry and base classes.
                                                             (line    8)
* unicode (2to3 fixer):                  Fixers.             (line  322)
* Unicode Consortium:                    String and Bytes literals.
                                                             (line   36)
* Unicode; database:                     unicodedata --- Unicode Database.
                                                             (line    6)
* unicodedata (module):                  unicodedata --- Unicode Database.
                                                             (line    6)
* UnicodeDecodeError:                    Concrete exceptions.
                                                             (line  334)
* UnicodeEncodeError:                    Concrete exceptions.
                                                             (line  329)
* UnicodeError:                          Concrete exceptions.
                                                             (line  300)
* UnicodeTranslateError:                 Concrete exceptions.
                                                             (line  339)
* UnicodeWarning:                        Warnings.           (line   43)
* unidata_version (in module unicodedata): unicodedata --- Unicode Database.
                                                             (line  117)
* unified_diff() (in module difflib):    difflib --- Helpers for computing deltas.
                                                             (line  290)
* uniform() (in module random):          random --- Generate pseudo-random numbers.
                                                             (line  170)
* UnimplementedFileMode:                 http client --- HTTP protocol client.
                                                             (line  119)
* Union (class in ctypes):               Structured data types.
                                                             (line    6)
* Union (class in typing):               Classes functions and decorators.
                                                             (line   58)
* union() (set method):                  Set Types --- set frozenset.
                                                             (line   85)
* unique() (in module enum):             Module Contents<2>. (line   20)
* unique() (in module enum) <1>:         Ensuring unique enumeration values.
                                                             (line   10)
* unittest (module):                     unittest --- Unit testing framework.
                                                             (line    6)
* unittest command line option; -b, –buffer: Command-line options.
                                                             (line    8)
* unittest command line option; -c, –catch: Command-line options.
                                                             (line   15)
* unittest command line option; -f, –failfast: Command-line options.
                                                             (line   24)
* unittest command line option; –locals: Command-line options.
                                                             (line   28)
* unittest-discover command line option; -p, –pattern pattern: Test Discovery.
                                                             (line   35)
* unittest-discover command line option; -s, –start-directory directory: Test Discovery.
                                                             (line   31)
* unittest-discover command line option; -t, –top-level-directory directory: Test Discovery.
                                                             (line   39)
* unittest-discover command line option; -v, –verbose: Test Discovery.
                                                             (line   27)
* unittest.mock (module):                unittest mock --- mock object library.
                                                             (line    6)
* universal newlines:                    Glossary.           (line 1088)
* universal newlines; bytearray.splitlines method: Bytes and Bytearray Operations.
                                                             (line  558)
* universal newlines; bytes.splitlines method: Bytes and Bytearray Operations.
                                                             (line  558)
* universal newlines; csv.reader function: Module Contents<3>.
                                                             (line    8)
* universal newlines; importlib.abc.InspectLoader.get_source method: importlib abc -- Abstract base classes related to import.
                                                             (line  301)
* universal newlines; io.IncrementalNewlineDecoder class: Text I/O<2>.
                                                             (line  208)
* universal newlines; io.TextIOWrapper class: Text I/O<2>.   (line  124)
* universal newlines; open() built-in function: Built-in Functions.
                                                             (line 1005)
* universal newlines; str.splitlines method: String Methods<2>.
                                                             (line  392)
* universal newlines; subprocess module: Frequently Used Arguments.
                                                             (line   33)
* universal newlines; What’s new:        PEP 3116 New I/O Library.
                                                             (line   42)
* universal newlines; What’s new <1>:    New Improved and Removed Modules.
                                                             (line  137)
* universal newlines; What’s new <2>:    PEP 324 New subprocess Module.
                                                             (line   36)
* universal newlines; What’s new <3>:    PEP 277 Unicode file name support for Windows NT.
                                                             (line   36)
* universal newlines; zipfile.ZipFile.open method: ZipFile Objects.
                                                             (line   82)
* UNIX:                                  Complete Python programs.
                                                             (line   25)
* UNIX; file control:                    fcntl --- The fcntl and ioctl system calls.
                                                             (line    6)
* UNIX; I/O control:                     fcntl --- The fcntl and ioctl system calls.
                                                             (line    6)
* UnixDatagramServer (class in socketserver): socketserver --- A framework for network servers.
                                                             (line   32)
* UnixStreamServer (class in socketserver): socketserver --- A framework for network servers.
                                                             (line   32)
* unix_dialect (class in csv):           Module Contents<3>. (line  187)
* UnknownHandler (class in urllib.request): urllib request --- Extensible library for opening URLs.
                                                             (line  395)
* UnknownProtocol:                       http client --- HTTP protocol client.
                                                             (line  111)
* UnknownTransferEncoding:               http client --- HTTP protocol client.
                                                             (line  115)
* unknown_decl() (html.parser.HTMLParser method): HTMLParser Methods.
                                                             (line  137)
* unknown_open() (urllib.request.BaseHandler method): BaseHandler Objects.
                                                             (line   55)
* unknown_open() (urllib.request.UnknownHandler method): UnknownHandler Objects.
                                                             (line    6)
* unlink() (in module os):               Files and Directories.
                                                             (line 1204)
* unlink() (pathlib.Path method):        Methods<2>.         (line  369)
* unlink() (xml.dom.minidom.Node method): DOM Objects.       (line   10)
* unlock() (mailbox.Babyl method):       Babyl.              (line   59)
* unlock() (mailbox.Mailbox method):     Mailbox objects.    (line  258)
* unlock() (mailbox.Maildir method):     Maildir.            (line  103)
* unlock() (mailbox.mbox method):        mbox.               (line   39)
* unlock() (mailbox.MH method):          MH.                 (line   84)
* unlock() (mailbox.MMDF method):        MMDF.               (line   35)
* unpack() (in module struct):           Functions and Exceptions.
                                                             (line   26)
* unpack() (struct.Struct method):       Classes<2>.         (line   29)
* Unpacker (class in xdrlib):            xdrlib --- Encode and decode XDR data.
                                                             (line   24)
* unpack_archive() (in module shutil):   Archiving operations.
                                                             (line   92)
* unpack_array() (xdrlib.Unpacker method): Unpacker Objects. (line   91)
* unpack_bytes() (xdrlib.Unpacker method): Unpacker Objects. (line   70)
* unpack_double() (xdrlib.Unpacker method): Unpacker Objects.
                                                             (line   40)
* UNPACK_EX (opcode):                    Python Bytecode Instructions.
                                                             (line  419)
* unpack_farray() (xdrlib.Unpacker method): Unpacker Objects.
                                                             (line   85)
* unpack_float() (xdrlib.Unpacker method): Unpacker Objects. (line   36)
* unpack_fopaque() (xdrlib.Unpacker method): Unpacker Objects.
                                                             (line   54)
* unpack_from() (in module struct):      Functions and Exceptions.
                                                             (line   34)
* unpack_from() (struct.Struct method):  Classes<2>.         (line   35)
* unpack_fstring() (xdrlib.Unpacker method): Unpacker Objects.
                                                             (line   48)
* unpack_list() (xdrlib.Unpacker method): Unpacker Objects.  (line   77)
* unpack_opaque() (xdrlib.Unpacker method): Unpacker Objects.
                                                             (line   65)
* UNPACK_SEQUENCE (opcode):              Python Bytecode Instructions.
                                                             (line  414)
* unpack_string() (xdrlib.Unpacker method): Unpacker Objects.
                                                             (line   59)
* unparsedEntityDecl() (xml.sax.handler.DTDHandler method): DTDHandler Objects.
                                                             (line   12)
* UnparsedEntityDeclHandler() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line  249)
* Unpickler (class in pickle):           Module Interface.   (line  209)
* UnpicklingError:                       Module Interface.   (line  120)
* unquote() (in module email.utils):     email utils Miscellaneous utilities.
                                                             (line   14)
* unquote() (in module urllib.parse):    URL Quoting.        (line   56)
* unquote_plus() (in module urllib.parse): URL Quoting.      (line   72)
* unquote_to_bytes() (in module urllib.parse): URL Quoting.  (line   82)
* unreachable object:                    Objects values and types.
                                                             (line   37)
* unreadline() (distutils.text_file.TextFile method): distutils text_file --- The TextFile class.
                                                             (line  130)
* unrecognized escape sequence:          String and Bytes literals.
                                                             (line  159)
* unregister() (in module atexit):       atexit --- Exit handlers.
                                                             (line   38)
* unregister() (in module faulthandler): Dumping the traceback on a user signal.
                                                             (line   23)
* unregister() (select.devpoll method):  /dev/poll Polling Objects.
                                                             (line   55)
* unregister() (select.epoll method):    Edge and Level Trigger Polling epoll Objects.
                                                             (line   76)
* unregister() (select.poll method):     Polling Objects.    (line   63)
* unregister() (selectors.BaseSelector method): Classes<3>.  (line   80)
* unregister_archive_format() (in module shutil): Archiving operations.
                                                             (line   87)
* unregister_dialect() (in module csv):  Module Contents<3>. (line   79)
* unregister_unpack_format() (in module shutil): Archiving operations.
                                                             (line  124)
* unset() (test.support.EnvironmentVarGuard method): test support --- Utilities for the Python test suite.
                                                             (line  445)
* unsetenv() (in module os):             Process Parameters. (line  459)
* UnstructuredHeader (class in email.headerregistry): email headerregistry Custom Header Objects.
                                                             (line  113)
* unsubscribe() (imaplib.IMAP4 method):  IMAP4 Objects.      (line  356)
* UnsupportedOperation:                  High-level Module Interface.
                                                             (line   22)
* until (pdb command):                   Debugger Commands.  (line  176)
* untokenize() (in module tokenize):     Tokenizing Input.   (line   63)
* untouchwin() (curses.window method):   Window Objects.     (line  557)
* unused_data (bz2.BZ2Decompressor attribute): Incremental de compression.
                                                             (line   78)
* unused_data (lzma.LZMADecompressor attribute): Compressing and decompressing data in memory.
                                                             (line  169)
* unused_data (zlib.Decompress attribute): zlib --- Compression compatible with gzip.
                                                             (line  187)
* unverifiable (urllib.request.Request attribute): Request Objects.
                                                             (line   47)
* unwrap() (in module inspect):          Classes and functions<2>.
                                                             (line  164)
* unwrap() (ssl.SSLSocket method):       SSL Sockets.        (line  249)
* up (pdb command):                      Debugger Commands.  (line   66)
* up() (in module turtle):               Drawing state.      (line   12)
* update() (collections.Counter method): Counter objects.    (line  104)
* update() (dict method):                Mapping Types --- dict.
                                                             (line  180)
* update() (hashlib.hash method):        Hash algorithms.    (line  105)
* update() (hmac.HMAC method):           hmac --- Keyed-Hashing for Message Authentication.
                                                             (line   31)
* update() (http.cookies.Morsel method): Morsel Objects.     (line   93)
* update() (in module turtle):           Animation control.  (line   46)
* update() (mailbox.Mailbox method):     Mailbox objects.    (line  227)
* update() (mailbox.Maildir method):     Maildir.            (line   87)
* update() (set method):                 Set Types --- set frozenset.
                                                             (line  158)
* update() (trace.CoverageResults method): Programmatic Interface.
                                                             (line   55)
* update_authenticated() (urllib.request.HTTPPasswordMgrWithPriorAuth method): HTTPPasswordMgrWithPriorAuth Objects.
                                                             (line   23)
* update_lines_cols() (in module curses): Functions<2>.      (line  519)
* update_panels() (in module curses.panel): Functions<3>.    (line   23)
* update_visible() (mailbox.BabylMessage method): BabylMessage.
                                                             (line   76)
* update_wrapper() (in module functools): functools --- Higher-order functions and operations on callable objects.
                                                             (line  366)
* upper() (bytearray method):            Bytes and Bytearray Operations.
                                                             (line  650)
* upper() (bytes method):                Bytes and Bytearray Operations.
                                                             (line  650)
* upper() (str method):                  String Methods<2>.  (line  552)
* urandom() (in module os):              Miscellaneous Functions.
                                                             (line    6)
* URL:                                   cgi --- Common Gateway Interface support.
                                                             (line    6)
* URL <1>:                               urllib parse --- Parse URLs into components.
                                                             (line    6)
* URL <2>:                               urllib robotparser --- Parser for robots txt.
                                                             (line    6)
* URL <3>:                               http server --- HTTP servers.
                                                             (line    6)
* url (xmlrpc.client.ProtocolError attribute): ProtocolError Objects.
                                                             (line   10)
* url2pathname() (in module urllib.request): urllib request --- Extensible library for opening URLs.
                                                             (line  150)
* URL; parsing:                          urllib parse --- Parse URLs into components.
                                                             (line    6)
* urlcleanup() (in module urllib.request): Legacy interface. (line   62)
* urldefrag() (in module urllib.parse):  URL Parsing.        (line  276)
* urlencode() (in module urllib.parse):  URL Quoting.        (line   94)
* URLError:                              urllib error --- Exception classes raised by urllib request.
                                                             (line   13)
* urljoin() (in module urllib.parse):    URL Parsing.        (line  246)
* urllib (2to3 fixer):                   Fixers.             (line  326)
* urllib (module):                       urllib --- URL handling modules.
                                                             (line    6)
* urllib.error (module):                 urllib error --- Exception classes raised by urllib request.
                                                             (line    6)
* urllib.parse (module):                 urllib parse --- Parse URLs into components.
                                                             (line    6)
* urllib.request (module):               urllib request --- Extensible library for opening URLs.
                                                             (line    6)
* urllib.response (module):              urllib response --- Response classes used by urllib.
                                                             (line    6)
* urllib.robotparser (module):           urllib robotparser --- Parser for robots txt.
                                                             (line    6)
* urlopen() (in module urllib.request):  urllib request --- Extensible library for opening URLs.
                                                             (line   18)
* URLopener (class in urllib.request):   Legacy interface.   (line   67)
* urlparse() (in module urllib.parse):   URL Parsing.        (line    9)
* urlretrieve() (in module urllib.request): Legacy interface.
                                                             (line   10)
* urlsafe_b64decode() (in module base64): base64 --- Base16 Base32 Base64 Base85 Data Encodings.
                                                             (line   87)
* urlsafe_b64encode() (in module base64): base64 --- Base16 Base32 Base64 Base85 Data Encodings.
                                                             (line   80)
* urlsplit() (in module urllib.parse):   URL Parsing.        (line  181)
* urlunparse() (in module urllib.parse): URL Parsing.        (line  173)
* urlunsplit() (in module urllib.parse): URL Parsing.        (line  237)
* urn (uuid.UUID attribute):             uuid --- UUID objects according to RFC 4122.
                                                             (line   97)
* UseForeignDTD() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line   63)
* USER:                                  getpass --- Portable password input.
                                                             (line   36)
* user() (poplib.POP3 method):           POP3 Objects.       (line   31)
* user-defined; function:                The standard type hierarchy.
                                                             (line  267)
* user-defined; function; call:          Calls.              (line  118)
* user-defined; method:                  The standard type hierarchy.
                                                             (line  352)
* user; effective id:                    Process Parameters. (line  137)
* user; id:                              Process Parameters. (line  265)
* user; id, setting:                     Process Parameters. (line  408)
* UserDict (class in collections):       UserDict objects.   (line   12)
* UserList (class in collections):       UserList objects.   (line   16)
* USERNAME:                              Process Parameters. (line  184)
* USERNAME <1>:                          getpass --- Portable password input.
                                                             (line   37)
* username (email.headerregistry.Address attribute): email headerregistry Custom Header Objects.
                                                             (line  409)
* USERPROFILE:                           os path --- Common pathname manipulations.
                                                             (line  122)
* USERPROFILE <1>:                       Location and names of config files.
                                                             (line   67)
* userptr() (curses.panel.Panel method): Panel Objects.      (line   56)
* UserString (class in collections):     UserString objects. (line   12)
* UserWarning:                           Warnings.           (line   13)
* USER_BASE:                             New and Improved Modules.
                                                             (line  471)
* USER_BASE (in module site):            Module contents<3>. (line   30)
* user_call() (bdb.Bdb method):          bdb --- Debugger framework.
                                                             (line  212)
* user_exception() (bdb.Bdb method):     bdb --- Debugger framework.
                                                             (line  229)
* user_line() (bdb.Bdb method):          bdb --- Debugger framework.
                                                             (line  218)
* user_return() (bdb.Bdb method):        bdb --- Debugger framework.
                                                             (line  224)
* USER_SITE (in module site):            Module contents<3>. (line   19)
* use_default_colors() (in module curses): Functions<2>.     (line  550)
* use_env() (in module curses):          Functions<2>.       (line  540)
* use_rawinput (cmd.Cmd attribute):      Cmd Objects.        (line  169)
* USTAR_FORMAT (in module tarfile):      tarfile --- Read and write tar archive files.
                                                             (line  219)
* UTC:                                   time --- Time access and conversions.
                                                             (line   37)
* utc (datetime.timezone attribute):     timezone Objects.   (line   58)
* utcfromtimestamp() (datetime.datetime class method): datetime Objects.
                                                             (line  100)
* utcnow() (datetime.datetime class method): datetime Objects.
                                                             (line   62)
* utcoffset() (datetime.datetime method): datetime Objects.  (line  370)
* utcoffset() (datetime.time method):    time Objects.       (line  179)
* utcoffset() (datetime.timezone method): timezone Objects.  (line   27)
* utcoffset() (datetime.tzinfo method):  tzinfo Objects.     (line   36)
* utctimetuple() (datetime.datetime method): datetime Objects.
                                                             (line  406)
* utf8 (email.policy.EmailPolicy attribute): email policy Policy Objects.
                                                             (line  395)
* utf8() (poplib.POP3 method):           POP3 Objects.       (line  105)
* utf8_enabled (imaplib.IMAP4 attribute): IMAP4 Objects.     (line  378)
* utime() (in module os):                Files and Directories.
                                                             (line 1213)
* uu (module):                           uu --- Encode and decode uuencode files.
                                                             (line    6)
* UUID (class in uuid):                  uuid --- UUID objects according to RFC 4122.
                                                             (line   16)
* uuid (module):                         uuid --- UUID objects according to RFC 4122.
                                                             (line    6)
* uuid1:                                 uuid --- UUID objects according to RFC 4122.
                                                             (line  133)
* uuid1() (in module uuid):              uuid --- UUID objects according to RFC 4122.
                                                             (line  125)
* uuid3:                                 uuid --- UUID objects according to RFC 4122.
                                                             (line  138)
* uuid3() (in module uuid):              uuid --- UUID objects according to RFC 4122.
                                                             (line  133)
* uuid4:                                 uuid --- UUID objects according to RFC 4122.
                                                             (line  142)
* uuid4() (in module uuid):              uuid --- UUID objects according to RFC 4122.
                                                             (line  138)
* uuid5:                                 uuid --- UUID objects according to RFC 4122.
                                                             (line  147)
* uuid5() (in module uuid):              uuid --- UUID objects according to RFC 4122.
                                                             (line  142)
* UuidCreate() (in module msilib):       msilib --- Read and write Microsoft Installer files.
                                                             (line   35)
* v4_int_to_packed() (in module ipaddress): Other Module Level Functions.
                                                             (line    8)
* v6_int_to_packed() (in module ipaddress): Other Module Level Functions.
                                                             (line   20)
* validator() (in module wsgiref.validate): wsgiref validate --- WSGI conformance checker.
                                                             (line   22)
* value (ctypes._SimpleCData attribute): Fundamental data types<2>.
                                                             (line   17)
* value (http.cookiejar.Cookie attribute): Cookie Objects<2>.
                                                             (line   31)
* value (http.cookies.Morsel attribute): Morsel Objects.     (line   39)
* value (xml.dom.Attr attribute):        Attr Objects.       (line   23)
* value of an object:                    Objects values and types.
                                                             (line   11)
* Value() (in module multiprocessing):   Shared ctypes Objects.
                                                             (line    9)
* Value() (in module multiprocessing.sharedctypes): The multiprocessing sharedctypes module.
                                                             (line   67)
* Value() (multiprocessing.managers.SyncManager method): Managers.
                                                             (line  198)
* ValueError:                            Concrete exceptions.
                                                             (line  344)
* valuerefs() (weakref.WeakValueDictionary method): weakref --- Weak references.
                                                             (line  199)
* values() (dict method):                Mapping Types --- dict.
                                                             (line  191)
* values() (email.message.Message method): email message Representing an email message.
                                                             (line  309)
* values() (mailbox.Mailbox method):     Mailbox objects.    (line  114)
* values() (types.MappingProxyType method): Standard Interpreter Types.
                                                             (line  161)
* ValuesView (class in collections.abc): Collections Abstract Base Classes.
                                                             (line  156)
* ValuesView (class in typing):          Classes functions and decorators.
                                                             (line  258)
* value_decode() (http.cookies.BaseCookie method): Cookie Objects.
                                                             (line    6)
* value_encode() (http.cookies.BaseCookie method): Cookie Objects.
                                                             (line   12)
* variance() (in module statistics):     Function details.   (line  256)
* variant (uuid.UUID attribute):         uuid --- UUID objects according to RFC 4122.
                                                             (line  101)
* vars() (built-in function):            Built-in Functions. (line 1477)
* VBAR (in module token):                token --- Constants used with Python parse trees.
                                                             (line   40)
* vbar (tkinter.scrolledtext.ScrolledText attribute): tkinter scrolledtext --- Scrolled Text Widget.
                                                             (line   24)
* VBAREQUAL (in module token):           token --- Constants used with Python parse trees.
                                                             (line   40)
* Vec2D (class in turtle):               Public classes.     (line   86)
* venv (module):                         venv --- Creation of virtual environments.
                                                             (line    6)
* VERBOSE (in module re):                Module Contents.    (line   97)
* verbose (in module tabnanny):          tabnanny --- Detection of ambiguous indentation.
                                                             (line   26)
* verbose (in module test.support):      test support --- Utilities for the Python test suite.
                                                             (line   30)
* verify() (smtplib.SMTP method):        SMTP Objects.       (line   88)
* VERIFY_CRL_CHECK_CHAIN (in module ssl): Constants<7>.      (line   59)
* VERIFY_CRL_CHECK_LEAF (in module ssl): Constants<7>.       (line   48)
* VERIFY_DEFAULT (in module ssl):        Constants<7>.       (line   40)
* verify_flags (ssl.SSLContext attribute): SSL Contexts.     (line  363)
* verify_mode (ssl.SSLContext attribute): SSL Contexts.      (line  373)
* verify_request() (socketserver.BaseServer method): Server Objects.
                                                             (line  173)
* VERIFY_X509_STRICT (in module ssl):    Constants<7>.       (line   66)
* VERIFY_X509_TRUSTED_FIRST (in module ssl): Constants<7>.   (line   73)
* version (email.headerregistry.MIMEVersionHeader attribute): email headerregistry Custom Header Objects.
                                                             (line  240)
* version (http.client.HTTPResponse attribute): HTTPResponse Objects.
                                                             (line   46)
* version (http.cookiejar.Cookie attribute): Cookie Objects<2>.
                                                             (line   19)
* version (in module curses):            Constants<4>.       (line   18)
* version (in module marshal):           marshal --- Internal Python object serialization.
                                                             (line   90)
* version (in module sqlite3):           Module functions and constants.
                                                             (line    6)
* version (in module sys):               sys --- System-specific parameters and functions.
                                                             (line 1274)
* version (in module sys) <1>:           Process-wide parameters.
                                                             (line  161)
* version (in module sys) <2>:           Process-wide parameters.
                                                             (line  196)
* version (in module sys) <3>:           Process-wide parameters.
                                                             (line  207)
* version (ipaddress.IPv4Address attribute): Address objects.
                                                             (line   38)
* version (ipaddress.IPv4Network attribute): Network objects.
                                                             (line   61)
* version (ipaddress.IPv6Address attribute): Address objects.
                                                             (line  166)
* version (ipaddress.IPv6Network attribute): Network objects.
                                                             (line  256)
* version (urllib.request.URLopener attribute): Legacy interface.
                                                             (line  139)
* version (uuid.UUID attribute):         uuid --- UUID objects according to RFC 4122.
                                                             (line  108)
* version() (in module ensurepip):       Module API.         (line    8)
* version() (in module platform):        Cross Platform.     (line  128)
* version() (ssl.SSLSocket method):      SSL Sockets.        (line  258)
* version_info (in module sqlite3):      Module functions and constants.
                                                             (line   11)
* version_info (in module sys):          sys --- System-specific parameters and functions.
                                                             (line 1289)
* version_string() (http.server.BaseHTTPRequestHandler method): http server --- HTTP servers.
                                                             (line  283)
* vformat() (string.Formatter method):   Custom String Formatting.
                                                             (line   26)
* virtual environment:                   Glossary.           (line 1096)
* virtual machine:                       Glossary.           (line 1105)
* visit() (ast.NodeVisitor method):      ast Helpers.        (line   82)
* visitproc (C type):                    Supporting Cyclic Garbage Collection.
                                                             (line   97)
* vline() (curses.window method):        Window Objects.     (line  562)
* voidcmd() (ftplib.FTP method):         FTP Objects.        (line   68)
* volume (zipfile.ZipInfo attribute):    ZipInfo Objects.    (line   99)
* vonmisesvariate() (in module random):  random --- Generate pseudo-random numbers.
                                                             (line  229)
* wait() (asyncio.asyncio.subprocess.Process method): Process.
                                                             (line   31)
* wait() (asyncio.Condition method):     Condition.          (line   72)
* wait() (asyncio.Event method):         Event.              (line   34)
* wait() (in module asyncio):            Task functions.     (line  177)
* wait() (in module concurrent.futures): Module Functions.   (line    6)
* wait() (in module multiprocessing.connection): Listeners and Clients.
                                                             (line  121)
* wait() (in module os):                 Process Management. (line  498)
* wait() (multiprocessing.pool.AsyncResult method): Process Pools.
                                                             (line  186)
* wait() (subprocess.Popen method):      Popen Objects.      (line   13)
* wait() (threading.Barrier method):     Barrier Objects.    (line   42)
* wait() (threading.Condition method):   Condition Objects.  (line   97)
* wait() (threading.Event method):       Event Objects.      (line   39)
* wait3() (in module os):                Process Management. (line  596)
* wait4() (in module os):                Process Management. (line  607)
* waitid() (in module os):               Process Management. (line  508)
* waitpid() (in module os):              Process Management. (line  559)
* wait_closed() (asyncio.Server method): Server.             (line   26)
* wait_for() (asyncio.Condition method): Condition.          (line   87)
* wait_for() (in module asyncio):        Task functions.     (line  223)
* wait_for() (threading.Condition method): Condition Objects.
                                                             (line  128)
* walk() (email.message.Message method): email message Representing an email message.
                                                             (line  588)
* walk() (in module ast):                ast Helpers.        (line   65)
* walk() (in module os):                 Files and Directories.
                                                             (line 1254)
* walk_packages() (in module pkgutil):   pkgutil --- Package extension utility.
                                                             (line  157)
* walk_stack() (in module traceback):    traceback --- Print or retrieve a stack traceback.
                                                             (line  145)
* walk_tb() (in module traceback):       traceback --- Print or retrieve a stack traceback.
                                                             (line  154)
* want (doctest.Example attribute):      Example Objects.    (line   23)
* warn() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  507)
* warn() (distutils.text_file.TextFile method): distutils text_file --- The TextFile class.
                                                             (line  101)
* warn() (in module warnings):           Available Functions.
                                                             (line    6)
* Warning:                               Warnings.           (line    9)
* warning() (in module logging):         Module-Level Functions.
                                                             (line  123)
* warning() (logging.Logger method):     Logger Objects.     (line  193)
* warning() (xml.sax.handler.ErrorHandler method): ErrorHandler Objects.
                                                             (line   29)
* warnings:                              warnings --- Warning control.
                                                             (line    6)
* warnings (module):                     warnings --- Warning control.
                                                             (line    6)
* WarningsRecorder (class in test.support): test support --- Utilities for the Python test suite.
                                                             (line  464)
* warnoptions (in module sys):           sys --- System-specific parameters and functions.
                                                             (line 1302)
* warn_explicit() (in module warnings):  Available Functions.
                                                             (line   32)
* wasSuccessful() (unittest.TestResult method): Loading and running tests.
                                                             (line  281)
* WatchedFileHandler (class in logging.handlers): WatchedFileHandler.
                                                             (line   24)
* wave (module):                         wave --- Read and write WAV files.
                                                             (line    6)
* WCONTINUED (in module os):             Process Management. (line  626)
* WCOREDUMP() (in module os):            Process Management. (line  646)
* WeakKeyDictionary (class in weakref):  weakref --- Weak references.
                                                             (line  155)
* WeakMethod (class in weakref):         weakref --- Weak references.
                                                             (line  208)
* weakref (module):                      weakref --- Weak references.
                                                             (line    6)
* WeakSet (class in weakref):            weakref --- Weak references.
                                                             (line  203)
* WeakValueDictionary (class in weakref): weakref --- Weak references.
                                                             (line  182)
* webbrowser (module):                   webbrowser --- Convenient Web-browser controller.
                                                             (line    6)
* weekday() (datetime.date method):      date Objects.       (line  169)
* weekday() (datetime.datetime method):  datetime Objects.   (line  456)
* weekday() (in module calendar):        calendar --- General calendar-related functions.
                                                             (line  214)
* weekheader() (in module calendar):     calendar --- General calendar-related functions.
                                                             (line  219)
* weibullvariate() (in module random):   random --- Generate pseudo-random numbers.
                                                             (line  241)
* WEXITED (in module os):                Process Management. (line  536)
* WEXITSTATUS() (in module os):          Process Management. (line  681)
* wfile (http.server.BaseHTTPRequestHandler attribute): http server --- HTTP servers.
                                                             (line  101)
* what() (in module imghdr):             imghdr --- Determine the type of an image.
                                                             (line   15)
* what() (in module sndhdr):             sndhdr --- Determine type of sound file.
                                                             (line   25)
* whathdr() (in module sndhdr):          sndhdr --- Determine type of sound file.
                                                             (line   34)
* whatis (pdb command):                  Debugger Commands.  (line  246)
* where (pdb command):                   Debugger Commands.  (line   55)
* which() (in module shutil):            Directory and files operations.
                                                             (line  300)
* whichdb() (in module dbm):             dbm --- Interfaces to Unix "databases".
                                                             (line   19)
* whitespace (in module string):         String constants.   (line   47)
* whitespace (shlex.shlex attribute):    shlex Objects.      (line   97)
* whitespace_split (shlex.shlex attribute): shlex Objects.   (line  121)
* Widget (class in tkinter.ttk):         ttk Widget.         (line    9)
* width (textwrap.TextWrapper attribute): textwrap --- Text wrapping and filling.
                                                             (line  146)
* width() (in module turtle):            Drawing state.      (line   18)
* WIFCONTINUED() (in module os):         Process Management. (line  653)
* WIFEXITED() (in module os):            Process Management. (line  674)
* WIFSIGNALED() (in module os):          Process Management. (line  667)
* WIFSTOPPED() (in module os):           Process Management. (line  660)
* win32_ver() (in module platform):      Windows Platform.   (line    6)
* WinDLL (class in ctypes):              Loading shared libraries.
                                                             (line   30)
* window manager (widgets):              The Window Manager. (line    6)
* window() (curses.panel.Panel method):  Panel Objects.      (line   61)
* Windows ini file:                      configparser --- Configuration file parser.
                                                             (line    8)
* WindowsError:                          Concrete exceptions.
                                                             (line  365)
* WindowsPath (class in pathlib):        Concrete paths.     (line   32)
* WindowsRegistryFinder (class in importlib.machinery): importlib machinery -- Importers and path hooks.
                                                             (line   85)
* window_height() (in module turtle):    Settings and special methods.
                                                             (line  103)
* window_width() (in module turtle):     Settings and special methods.
                                                             (line  110)
* winerror (OSError attribute):          Concrete exceptions.
                                                             (line  122)
* WinError() (in module ctypes):         Utility functions.  (line  179)
* WINFUNCTYPE() (in module ctypes):      Function prototypes.
                                                             (line   23)
* winreg (module):                       winreg -- Windows registry access.
                                                             (line    6)
* WinSock:                               select --- Waiting for I/O completion.
                                                             (line  133)
* winsound (module):                     winsound --- Sound-playing interface for Windows.
                                                             (line    6)
* winver (in module sys):                sys --- System-specific parameters and functions.
                                                             (line 1308)
* WITH_CLEANUP_FINISH (opcode):          Python Bytecode Instructions.
                                                             (line  389)
* WITH_CLEANUP_START (opcode):           Python Bytecode Instructions.
                                                             (line  370)
* with_hostmask (ipaddress.IPv4Interface attribute): Interface objects.
                                                             (line   52)
* with_hostmask (ipaddress.IPv4Network attribute): Network objects.
                                                             (line  117)
* with_hostmask (ipaddress.IPv6Interface attribute): Interface objects.
                                                             (line   79)
* with_hostmask (ipaddress.IPv6Network attribute): Network objects.
                                                             (line  286)
* with_name() (pathlib.PurePath method): Methods and properties.
                                                             (line  280)
* with_netmask (ipaddress.IPv4Interface attribute): Interface objects.
                                                             (line   43)
* with_netmask (ipaddress.IPv4Network attribute): Network objects.
                                                             (line  112)
* with_netmask (ipaddress.IPv6Interface attribute): Interface objects.
                                                             (line   77)
* with_netmask (ipaddress.IPv6Network attribute): Network objects.
                                                             (line  284)
* with_prefixlen (ipaddress.IPv4Interface attribute): Interface objects.
                                                             (line   34)
* with_prefixlen (ipaddress.IPv4Network attribute): Network objects.
                                                             (line   99)
* with_prefixlen (ipaddress.IPv6Interface attribute): Interface objects.
                                                             (line   75)
* with_prefixlen (ipaddress.IPv6Network attribute): Network objects.
                                                             (line  278)
* with_suffix() (pathlib.PurePath method): Methods and properties.
                                                             (line  296)
* with_traceback() (BaseException method): Base classes.     (line   25)
* WNOHANG (in module os):                Process Management. (line  618)
* WNOWAIT (in module os):                Process Management. (line  536)
* wordchars (shlex.shlex attribute):     shlex Objects.      (line   91)
* World Wide Web:                        Internet Protocols and Support.
                                                             (line    6)
* World Wide Web <1>:                    urllib parse --- Parse URLs into components.
                                                             (line    6)
* World Wide Web <2>:                    urllib robotparser --- Parser for robots txt.
                                                             (line    6)
* wrap() (in module textwrap):           textwrap --- Text wrapping and filling.
                                                             (line   16)
* wrap() (textwrap.TextWrapper method):  textwrap --- Text wrapping and filling.
                                                             (line  273)
* wrapper() (in module curses):          Functions<2>.       (line  559)
* wraps() (in module functools):         functools --- Higher-order functions and operations on callable objects.
                                                             (line  414)
* wrap_bio() (ssl.SSLContext method):    SSL Contexts.       (line  297)
* wrap_socket() (in module ssl):         Socket creation.    (line   10)
* wrap_socket() (ssl.SSLContext method): SSL Contexts.       (line  274)
* wrap_text() (in module distutils.fancy_getopt): distutils fancy_getopt --- Wrapper around the standard getopt module.
                                                             (line   32)
* WRITABLE (in module tkinter):          File Handlers.      (line   41)
* writable() (asyncore.dispatcher method): asyncore --- Asynchronous socket handler.
                                                             (line  170)
* writable() (io.IOBase method):         I/O Base Classes.   (line  152)
* write() (asyncio.StreamWriter method): StreamWriter.       (line   62)
* write() (asyncio.WriteTransport method): WriteTransport.   (line   61)
* write() (code.InteractiveInterpreter method): Interactive Interpreter Objects.
                                                             (line   63)
* write() (codecs.StreamWriter method):  StreamWriter Objects.
                                                             (line   31)
* write() (configparser.ConfigParser method): ConfigParser Objects.
                                                             (line  242)
* write() (email.generator.BytesGenerator method): email generator Generating MIME documents.
                                                             (line  190)
* write() (email.generator.Generator method): email generator Generating MIME documents.
                                                             (line  106)
* write() (in module os):                File Descriptor Operations.
                                                             (line  515)
* write() (in module turtle):            More drawing control.
                                                             (line   29)
* write() (io.BufferedIOBase method):    I/O Base Classes.   (line  314)
* write() (io.BufferedWriter method):    Buffered Streams.   (line  122)
* write() (io.RawIOBase method):         I/O Base Classes.   (line  207)
* write() (io.TextIOBase method):        Text I/O<2>.        (line   95)
* write() (mmap.mmap method):            mmap --- Memory-mapped file support.
                                                             (line  250)
* write() (ossaudiodev.oss_audio_device method): Audio Device Objects.
                                                             (line   39)
* write() (ssl.MemoryBIO method):        Memory BIO Support<2>.
                                                             (line  138)
* write() (ssl.SSLSocket method):        SSL Sockets.        (line   80)
* write() (telnetlib.Telnet method):     Telnet Objects.     (line   98)
* write() (xml.etree.ElementTree.ElementTree method): ElementTree Objects.
                                                             (line   67)
* write() (zipfile.ZipFile method):      ZipFile Objects.    (line  181)
* writeall() (ossaudiodev.oss_audio_device method): Audio Device Objects.
                                                             (line   51)
* writeframes() (aifc.aifc method):      aifc --- Read and write AIFF and AIFC files.
                                                             (line  191)
* writeframes() (sunau.AU_write method): AU_write Objects.   (line   52)
* writeframes() (wave.Wave_write method): Wave_write Objects.
                                                             (line   75)
* writeframesraw() (aifc.aifc method):   aifc --- Read and write AIFF and AIFC files.
                                                             (line  199)
* writeframesraw() (sunau.AU_write method): AU_write Objects.
                                                             (line   45)
* writeframesraw() (wave.Wave_write method): Wave_write Objects.
                                                             (line   68)
* writeheader() (csv.DictWriter method): Writer Objects.     (line   36)
* writelines() (asyncio.StreamWriter method): StreamWriter.  (line   67)
* writelines() (asyncio.WriteTransport method): WriteTransport.
                                                             (line   68)
* writelines() (codecs.StreamWriter method): StreamWriter Objects.
                                                             (line   35)
* writelines() (io.IOBase method):       I/O Base Classes.   (line  158)
* writePlist() (in module plistlib):     plistlib --- Generate and parse Mac OS X plist files.
                                                             (line  140)
* writePlistToBytes() (in module plistlib): plistlib --- Generate and parse Mac OS X plist files.
                                                             (line  159)
* writepy() (zipfile.PyZipFile method):  PyZipFile Objects.  (line   20)
* writer (formatter.formatter attribute): The Formatter Interface.
                                                             (line   22)
* writer() (in module csv):              Module Contents<3>. (line   40)
* writerow() (csv.csvwriter method):     Writer Objects.     (line   15)
* writerows() (csv.csvwriter method):    Writer Objects.     (line   22)
* writestr() (zipfile.ZipFile method):   ZipFile Objects.    (line  206)
* WriteTransport (class in asyncio):     WriteTransport.     (line    6)
* writev() (in module os):               File Descriptor Operations.
                                                             (line  533)
* writexml() (xml.dom.minidom.Node method): DOM Objects.     (line   27)
* write_byte() (mmap.mmap method):       mmap --- Memory-mapped file support.
                                                             (line  266)
* write_bytes() (pathlib.Path method):   Methods<2>.         (line  374)
* write_docstringdict() (in module turtle): Translation of docstrings into different languages.
                                                             (line   10)
* write_eof() (asyncio.StreamWriter method): StreamWriter.   (line   72)
* write_eof() (asyncio.WriteTransport method): WriteTransport.
                                                             (line   75)
* write_eof() (ssl.MemoryBIO method):    Memory BIO Support<2>.
                                                             (line  146)
* write_file() (in module distutils.file_util): distutils file_util --- Single file operations.
                                                             (line   44)
* write_history_file() (in module readline): History file.   (line   14)
* WRITE_RESTRICTED:                      Generic Attribute Management.
                                                             (line   92)
* write_results() (trace.CoverageResults method): Programmatic Interface.
                                                             (line   60)
* write_text() (pathlib.Path method):    Methods<2>.         (line  389)
* writing; values:                       Expression statements.
                                                             (line   17)
* WrongDocumentErr:                      Exceptions<12>.     (line   97)
* wsgiref (module):                      wsgiref --- WSGI Utilities and Reference Implementation.
                                                             (line    6)
* wsgiref.handlers (module):             wsgiref handlers -- server/gateway base classes.
                                                             (line    6)
* wsgiref.headers (module):              wsgiref headers -- WSGI response header tools.
                                                             (line    6)
* wsgiref.simple_server (module):        wsgiref simple_server -- a simple WSGI HTTP server.
                                                             (line    6)
* wsgiref.util (module):                 wsgiref util -- WSGI environment utilities.
                                                             (line    6)
* wsgiref.validate (module):             wsgiref validate --- WSGI conformance checker.
                                                             (line    6)
* WSGIRequestHandler (class in wsgiref.simple_server): wsgiref simple_server -- a simple WSGI HTTP server.
                                                             (line   75)
* WSGIServer (class in wsgiref.simple_server): wsgiref simple_server -- a simple WSGI HTTP server.
                                                             (line   45)
* wsgi_file_wrapper (wsgiref.handlers.BaseHandler attribute): wsgiref handlers -- server/gateway base classes.
                                                             (line  266)
* wsgi_multiprocess (wsgiref.handlers.BaseHandler attribute): wsgiref handlers -- server/gateway base classes.
                                                             (line  150)
* wsgi_multithread (wsgiref.handlers.BaseHandler attribute): wsgiref handlers -- server/gateway base classes.
                                                             (line  143)
* wsgi_run_once (wsgiref.handlers.BaseHandler attribute): wsgiref handlers -- server/gateway base classes.
                                                             (line  157)
* wShowWindow (subprocess.STARTUPINFO attribute): Windows Popen Helpers.
                                                             (line   44)
* WSTOPPED (in module os):               Process Management. (line  536)
* WSTOPSIG() (in module os):             Process Management. (line  688)
* wstring_at() (in module ctypes):       Utility functions.  (line  190)
* ws_comma (2to3 fixer):                 Fixers.             (line  331)
* WTERMSIG() (in module os):             Process Management. (line  694)
* WUNTRACED (in module os):              Process Management. (line  634)
* WWW:                                   Internet Protocols and Support.
                                                             (line    6)
* WWW <1>:                               urllib parse --- Parse URLs into components.
                                                             (line    6)
* WWW <2>:                               urllib robotparser --- Parser for robots txt.
                                                             (line    6)
* WWW; server:                           cgi --- Common Gateway Interface support.
                                                             (line    6)
* WWW; server <1>:                       http server --- HTTP servers.
                                                             (line    6)
* W_OK (in module os):                   Files and Directories.
                                                             (line   98)
* X (in module re):                      Module Contents.    (line   97)
* X509 certificate:                      SSL Contexts.       (line  379)
* xatom() (imaplib.IMAP4 method):        IMAP4 Objects.      (line  360)
* XATTR_CREATE (in module os):           Linux extended attributes.
                                                             (line   61)
* XATTR_REPLACE (in module os):          Linux extended attributes.
                                                             (line   67)
* XATTR_SIZE_MAX (in module os):         Linux extended attributes.
                                                             (line   56)
* xcor() (in module turtle):             Tell Turtle's state.
                                                             (line   34)
* XDR:                                   xdrlib --- Encode and decode XDR data.
                                                             (line    6)
* xdrlib (module):                       xdrlib --- Encode and decode XDR data.
                                                             (line    6)
* xhdr() (nntplib.NNTP method):          Methods<3>.         (line  320)
* XHTML:                                 html parser --- Simple HTML and XHTML parser.
                                                             (line    6)
* XHTML_NAMESPACE (in module xml.dom):   Module Contents<4>. (line   53)
* xml (module):                          XML Processing Modules.
                                                             (line    6)
* XML() (in module xml.etree.ElementTree): Functions<5>.     (line  166)
* xml.dom (module):                      xml dom --- The Document Object Model API.
                                                             (line    6)
* xml.dom.minidom (module):              xml dom minidom --- Minimal DOM implementation.
                                                             (line    6)
* xml.dom.pulldom (module):              xml dom pulldom --- Support for building partial DOM trees.
                                                             (line    6)
* xml.etree.ElementTree (module):        xml etree ElementTree --- The ElementTree XML API.
                                                             (line    6)
* xml.parsers.expat (module):            xml parsers expat --- Fast XML parsing using Expat.
                                                             (line    6)
* xml.parsers.expat.errors (module):     Expat error constants.
                                                             (line    6)
* xml.parsers.expat.model (module):      Content Model Descriptions.
                                                             (line    6)
* xml.sax (module):                      xml sax --- Support for SAX2 parsers.
                                                             (line    6)
* xml.sax.handler (module):              xml sax handler --- Base classes for SAX handlers.
                                                             (line    6)
* xml.sax.saxutils (module):             xml sax saxutils --- SAX Utilities.
                                                             (line    6)
* xml.sax.xmlreader (module):            xml sax xmlreader --- Interface for XML parsers.
                                                             (line    6)
* xmlcharrefreplace_errors() (in module codecs): Error Handlers.
                                                             (line  145)
* XmlDeclHandler() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line  175)
* XMLFilterBase (class in xml.sax.saxutils): xml sax saxutils --- SAX Utilities.
                                                             (line   64)
* XMLGenerator (class in xml.sax.saxutils): xml sax saxutils --- SAX Utilities.
                                                             (line   48)
* XMLID() (in module xml.etree.ElementTree): Functions<5>.   (line  174)
* XMLNS_NAMESPACE (in module xml.dom):   Module Contents<4>. (line   47)
* XMLParser (class in xml.etree.ElementTree): XMLParser Objects.
                                                             (line    6)
* XMLParserType (in module xml.parsers.expat): xml parsers expat --- Fast XML parsing using Expat.
                                                             (line   33)
* XMLPullParser (class in xml.etree.ElementTree): XMLPullParser Objects.
                                                             (line    6)
* XMLReader (class in xml.sax.xmlreader): xml sax xmlreader --- Interface for XML parsers.
                                                             (line   12)
* xmlrpc.client (module):                xmlrpc client --- XML-RPC client access.
                                                             (line    6)
* xmlrpc.server (module):                xmlrpc server --- Basic XML-RPC servers.
                                                             (line    6)
* XML_ERROR_ABORTED (in module xml.parsers.expat.errors): Expat error constants.
                                                             (line  180)
* XML_ERROR_ASYNC_ENTITY (in module xml.parsers.expat.errors): Expat error constants.
                                                             (line   29)
* XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF (in module xml.parsers.expat.errors): Expat error constants.
                                                             (line   31)
* XML_ERROR_BAD_CHAR_REF (in module xml.parsers.expat.errors): Expat error constants.
                                                             (line   37)
* XML_ERROR_BINARY_ENTITY_REF (in module xml.parsers.expat.errors): Expat error constants.
                                                             (line   42)
* XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING (in module xml.parsers.expat.errors): Expat error constants.
                                                             (line  135)
* XML_ERROR_DUPLICATE_ATTRIBUTE (in module xml.parsers.expat.errors): Expat error constants.
                                                             (line   47)
* XML_ERROR_ENTITY_DECLARED_IN_PE (in module xml.parsers.expat.errors): Expat error constants.
                                                             (line  126)
* XML_ERROR_EXTERNAL_ENTITY_HANDLING (in module xml.parsers.expat.errors): Expat error constants.
                                                             (line  116)
* XML_ERROR_FEATURE_REQUIRES_XML_DTD (in module xml.parsers.expat.errors): Expat error constants.
                                                             (line  128)
* XML_ERROR_FINISHED (in module xml.parsers.expat.errors): Expat error constants.
                                                             (line  184)
* XML_ERROR_INCOMPLETE_PE (in module xml.parsers.expat.errors): Expat error constants.
                                                             (line  152)
* XML_ERROR_INCORRECT_ENCODING (in module xml.parsers.expat.errors): Expat error constants.
                                                             (line   51)
* XML_ERROR_INVALID_TOKEN (in module xml.parsers.expat.errors): Expat error constants.
                                                             (line   53)
* XML_ERROR_JUNK_AFTER_DOC_ELEMENT (in module xml.parsers.expat.errors): Expat error constants.
                                                             (line   59)
* XML_ERROR_MISPLACED_XML_PI (in module xml.parsers.expat.errors): Expat error constants.
                                                             (line   64)
* XML_ERROR_NOT_STANDALONE (in module xml.parsers.expat.errors): Expat error constants.
                                                             (line  118)
* XML_ERROR_NOT_SUSPENDED (in module xml.parsers.expat.errors): Expat error constants.
                                                             (line  175)
* XML_ERROR_NO_ELEMENTS (in module xml.parsers.expat.errors): Expat error constants.
                                                             (line   69)
* XML_ERROR_NO_MEMORY (in module xml.parsers.expat.errors): Expat error constants.
                                                             (line   74)
* XML_ERROR_PARAM_ENTITY_REF (in module xml.parsers.expat.errors): Expat error constants.
                                                             (line   78)
* XML_ERROR_PARTIAL_CHAR (in module xml.parsers.expat.errors): Expat error constants.
                                                             (line   82)
* XML_ERROR_PUBLICID (in module xml.parsers.expat.errors): Expat error constants.
                                                             (line  165)
* XML_ERROR_RECURSIVE_ENTITY_REF (in module xml.parsers.expat.errors): Expat error constants.
                                                             (line   86)
* XML_ERROR_SUSPENDED (in module xml.parsers.expat.errors): Expat error constants.
                                                             (line  169)
* XML_ERROR_SUSPEND_PE (in module xml.parsers.expat.errors): Expat error constants.
                                                             (line  190)
* XML_ERROR_SYNTAX (in module xml.parsers.expat.errors): Expat error constants.
                                                             (line   91)
* XML_ERROR_TAG_MISMATCH (in module xml.parsers.expat.errors): Expat error constants.
                                                             (line   95)
* XML_ERROR_TEXT_DECL (in module xml.parsers.expat.errors): Expat error constants.
                                                             (line  160)
* XML_ERROR_UNBOUND_PREFIX (in module xml.parsers.expat.errors): Expat error constants.
                                                             (line  142)
* XML_ERROR_UNCLOSED_CDATA_SECTION (in module xml.parsers.expat.errors): Expat error constants.
                                                             (line  112)
* XML_ERROR_UNCLOSED_TOKEN (in module xml.parsers.expat.errors): Expat error constants.
                                                             (line   99)
* XML_ERROR_UNDECLARING_PREFIX (in module xml.parsers.expat.errors): Expat error constants.
                                                             (line  147)
* XML_ERROR_UNDEFINED_ENTITY (in module xml.parsers.expat.errors): Expat error constants.
                                                             (line  104)
* XML_ERROR_UNEXPECTED_STATE (in module xml.parsers.expat.errors): Expat error constants.
                                                             (line  124)
* XML_ERROR_UNKNOWN_ENCODING (in module xml.parsers.expat.errors): Expat error constants.
                                                             (line  108)
* XML_ERROR_XML_DECL (in module xml.parsers.expat.errors): Expat error constants.
                                                             (line  156)
* XML_NAMESPACE (in module xml.dom):     Module Contents<4>. (line   42)
* xor() (in module operator):            operator --- Standard operators as functions.
                                                             (line  162)
* xover() (nntplib.NNTP method):         Methods<3>.         (line  336)
* xpath() (nntplib.NNTP method):         Methods<3>.         (line  344)
* xrange (2to3 fixer):                   Fixers.             (line  336)
* xreadlines (2to3 fixer):               Fixers.             (line  341)
* xview() (tkinter.ttk.Treeview method): ttk Treeview.       (line  313)
* X_OK (in module os):                   Files and Directories.
                                                             (line   98)
* Y2K:                                   time --- Time access and conversions.
                                                             (line   28)
* ycor() (in module turtle):             Tell Turtle's state.
                                                             (line   46)
* year (datetime.date attribute):        date Objects.       (line   77)
* year (datetime.datetime attribute):    datetime Objects.   (line  176)
* Year 2000:                             time --- Time access and conversions.
                                                             (line   28)
* Year 2038:                             time --- Time access and conversions.
                                                             (line   23)
* yeardatescalendar() (calendar.Calendar method): calendar --- General calendar-related functions.
                                                             (line   81)
* yeardays2calendar() (calendar.Calendar method): calendar --- General calendar-related functions.
                                                             (line   89)
* yeardayscalendar() (calendar.Calendar method): calendar --- General calendar-related functions.
                                                             (line   96)
* YESEXPR (in module locale):            locale --- Internationalization services.
                                                             (line  229)
* yield; examples:                       Generator-iterator methods.
                                                             (line   57)
* yield; expression:                     Yield expressions.  (line    6)
* yield; yield from (in What’s New):     PEP 3151 Reworking the OS and IO exception hierarchy.
                                                             (line   87)
* YIELD_FROM (opcode):                   Python Bytecode Instructions.
                                                             (line  321)
* YIELD_VALUE (opcode):                  Python Bytecode Instructions.
                                                             (line  317)
* yiq_to_rgb() (in module colorsys):     colorsys --- Conversions between color systems.
                                                             (line   32)
* yview() (tkinter.ttk.Treeview method): ttk Treeview.       (line  317)
* Zen of Python:                         Glossary.           (line 1111)
* ZeroDivisionError:                     Concrete exceptions.
                                                             (line  351)
* zfill() (bytearray method):            Bytes and Bytearray Operations.
                                                             (line  669)
* zfill() (bytes method):                Bytes and Bytearray Operations.
                                                             (line  669)
* zfill() (str method):                  String Methods<2>.  (line  563)
* zip (2to3 fixer):                      Fixers.             (line  345)
* zip() (built-in function):             Built-in Functions. (line 1491)
* zipapp (module):                       zipapp --- Manage executable python zip archives.
                                                             (line    6)
* zipapp command line option; -h, –help: Command-Line Interface<3>.
                                                             (line   51)
* zipapp command line option; –info:     Command-Line Interface<3>.
                                                             (line   45)
* zipapp command line option; -m <mainfn>, –main=<mainfn>: Command-Line Interface<3>.
                                                             (line   35)
* zipapp command line option; -o <output>, –output=<output>: Command-Line Interface<3>.
                                                             (line   18)
* zipapp command line option; -p <interpreter>, –python=<interpreter>: Command-Line Interface<3>.
                                                             (line   29)
* ZipFile (class in zipfile):            ZipFile Objects.    (line    6)
* zipfile (module):                      zipfile --- Work with ZIP archives.
                                                             (line    6)
* zipimport (module):                    zipimport --- Import modules from Zip archives.
                                                             (line    6)
* zipimporter (class in zipimport):      zipimporter Objects.
                                                             (line    8)
* ZipImportError:                        zipimport --- Import modules from Zip archives.
                                                             (line   50)
* ZipInfo (class in zipfile):            zipfile --- Work with ZIP archives.
                                                             (line   51)
* ZIP_BZIP2 (in module zipfile):         zipfile --- Work with ZIP archives.
                                                             (line   81)
* ZIP_DEFLATED (in module zipfile):      zipfile --- Work with ZIP archives.
                                                             (line   76)
* zip_longest() (in module itertools):   Itertool functions. (line  552)
* ZIP_LZMA (in module zipfile):          zipfile --- Work with ZIP archives.
                                                             (line   88)
* ZIP_STORED (in module zipfile):        zipfile --- Work with ZIP archives.
                                                             (line   72)
* zlib (module):                         zlib --- Compression compatible with gzip.
                                                             (line    6)
* ZLIB_RUNTIME_VERSION (in module zlib): zlib --- Compression compatible with gzip.
                                                             (line  259)
* ZLIB_VERSION (in module zlib):         zlib --- Compression compatible with gzip.
                                                             (line  252)

