This is python.info, produced by makeinfo version 6.0 from python.texi.

     Python 3.6.0a0, May 06, 2016

     Georg Brandl

     Copyright © 2001-2016, Python Software Foundation

INFO-DIR-SECTION Documentation tools
START-INFO-DIR-ENTRY
* Python: (python.info). The Python Programming Language
END-INFO-DIR-ENTRY


   Generated by Sphinx 1.4.1.


File: python.info,  Node: NTEventLogHandler,  Next: SMTPHandler,  Prev: SysLogHandler,  Up: logging handlers --- Logging handlers

5.16.8.11 NTEventLogHandler
...........................

The *note NTEventLogHandler: 1a79. class, located in the *note
logging.handlers: aa. module, supports sending logging messages to a
local Windows NT, Windows 2000 or Windows XP event log.  Before you can
use it, you need Mark Hammond’s Win32 extensions for Python installed.

 -- Class: logging.handlers.NTEventLogHandler (appname, dllname=None,
          logtype='Application')

     Returns a new instance of the *note NTEventLogHandler: 1a79. class.
     The `appname' is used to define the application name as it appears
     in the event log.  An appropriate registry entry is created using
     this name.  The `dllname' should give the fully qualified pathname
     of a .dll or .exe which contains message definitions to hold in the
     log (if not specified, ‘'win32service.pyd'’ is used - this is
     installed with the Win32 extensions and contains some basic
     placeholder message definitions.  Note that use of these
     placeholders will make your event logs big, as the entire message
     source is held in the log.  If you want slimmer logs, you have to
     pass in the name of your own .dll or .exe which contains the
     message definitions you want to use in the event log).  The
     `logtype' is one of ‘'Application'’, ‘'System'’ or ‘'Security'’,
     and defaults to ‘'Application'’.

      -- Method: close ()

          At this point, you can remove the application name from the
          registry as a source of event log entries.  However, if you do
          this, you will not be able to see the events as you intended
          in the Event Log Viewer - it needs to be able to access the
          registry to get the .dll name.  The current version does not
          do this.

      -- Method: emit (record)

          Determines the message ID, event category and event type, and
          then logs the message in the NT event log.

      -- Method: getEventCategory (record)

          Returns the event category for the record.  Override this if
          you want to specify your own categories.  This version returns
          0.

      -- Method: getEventType (record)

          Returns the event type for the record.  Override this if you
          want to specify your own types.  This version does a mapping
          using the handler’s typemap attribute, which is set up in
          *note __init__(): 9d5. to a dictionary which contains mappings
          for ‘DEBUG’, ‘INFO’, ‘WARNING’, ‘ERROR’ and ‘CRITICAL’.  If
          you are using your own levels, you will either need to
          override this method or place a suitable dictionary in the
          handler’s `typemap' attribute.

      -- Method: getMessageID (record)

          Returns the message ID for the record.  If you are using your
          own messages, you could do this by having the `msg' passed to
          the logger being an ID rather than a format string.  Then, in
          here, you could use a dictionary lookup to get the message ID.
          This version returns 1, which is the base message ID in
          ‘win32service.pyd’.


File: python.info,  Node: SMTPHandler,  Next: MemoryHandler,  Prev: NTEventLogHandler,  Up: logging handlers --- Logging handlers

5.16.8.12 SMTPHandler
.....................

The *note SMTPHandler: 1a81. class, located in the *note
logging.handlers: aa. module, supports sending logging messages to an
email address via SMTP.

 -- Class: logging.handlers.SMTPHandler (mailhost, fromaddr, toaddrs,
          subject, credentials=None, secure=None, timeout=1.0)

     Returns a new instance of the *note SMTPHandler: 1a81. class.  The
     instance is initialized with the from and to addresses and subject
     line of the email.  The `toaddrs' should be a list of strings.  To
     specify a non-standard SMTP port, use the (host, port) tuple format
     for the `mailhost' argument.  If you use a string, the standard
     SMTP port is used.  If your SMTP server requires authentication,
     you can specify a (username, password) tuple for the `credentials'
     argument.

     To specify the use of a secure protocol (TLS), pass in a tuple to
     the `secure' argument.  This will only be used when authentication
     credentials are supplied.  The tuple should be either an empty
     tuple, or a single-value tuple with the name of a keyfile, or a
     2-value tuple with the names of the keyfile and certificate file.
     (This tuple is passed to the *note smtplib.SMTP.starttls(): 6bc.
     method.)

     A timeout can be specified for communication with the SMTP server
     using the `timeout' argument.

     New in version 3.3: The `timeout' argument was added.

      -- Method: emit (record)

          Formats the record and sends it to the specified addressees.

      -- Method: getSubject (record)

          If you want to specify a subject line which is
          record-dependent, override this method.


File: python.info,  Node: MemoryHandler,  Next: HTTPHandler,  Prev: SMTPHandler,  Up: logging handlers --- Logging handlers

5.16.8.13 MemoryHandler
.......................

The *note MemoryHandler: 1a39. class, located in the *note
logging.handlers: aa. module, supports buffering of logging records in
memory, periodically flushing them to a `target' handler.  Flushing
occurs whenever the buffer is full, or when an event of a certain
severity or greater is seen.

*note MemoryHandler: 1a39. is a subclass of the more general *note
BufferingHandler: 1a86, which is an abstract class.  This buffers
logging records in memory.  Whenever each record is added to the buffer,
a check is made by calling ‘shouldFlush()’ to see if the buffer should
be flushed.  If it should, then ‘flush()’ is expected to do the
flushing.

 -- Class: logging.handlers.BufferingHandler (capacity)

     Initializes the handler with a buffer of the specified capacity.

      -- Method: emit (record)

          Appends the record to the buffer.  If *note shouldFlush():
          1a88. returns true, calls *note flush(): 1a89. to process the
          buffer.

      -- Method: flush ()

          You can override this to implement custom flushing behavior.
          This version just zaps the buffer to empty.

      -- Method: shouldFlush (record)

          Returns true if the buffer is up to capacity.  This method can
          be overridden to implement custom flushing strategies.

 -- Class: logging.handlers.MemoryHandler (capacity, flushLevel=ERROR,
          target=None)

     Returns a new instance of the *note MemoryHandler: 1a39. class.
     The instance is initialized with a buffer size of `capacity'.  If
     `flushLevel' is not specified, ‘ERROR’ is used.  If no `target' is
     specified, the target will need to be set using *note setTarget():
     1a8a. before this handler does anything useful.

      -- Method: close ()

          Calls *note flush(): 1a8c, sets the target to ‘None’ and
          clears the buffer.

      -- Method: flush ()

          For a *note MemoryHandler: 1a39, flushing means just sending
          the buffered records to the target, if there is one.  The
          buffer is also cleared when this happens.  Override if you
          want different behavior.

      -- Method: setTarget (target)

          Sets the target handler for this handler.

      -- Method: shouldFlush (record)

          Checks for buffer full or a record at the `flushLevel' or
          higher.


File: python.info,  Node: HTTPHandler,  Next: QueueHandler,  Prev: MemoryHandler,  Up: logging handlers --- Logging handlers

5.16.8.14 HTTPHandler
.....................

The *note HTTPHandler: 2cb. class, located in the *note
logging.handlers: aa. module, supports sending logging messages to a Web
server, using either ‘GET’ or ‘POST’ semantics.

 -- Class: logging.handlers.HTTPHandler (host, url, method='GET',
          secure=False, credentials=None, context=None)

     Returns a new instance of the *note HTTPHandler: 2cb. class.  The
     `host' can be of the form ‘host:port’, should you need to use a
     specific port number.  If no `method' is specified, ‘GET’ is used.
     If `secure' is true, a HTTPS connection will be used.  The
     `context' parameter may be set to a *note ssl.SSLContext: 1c6.
     instance to configure the SSL settings used for the HTTPS
     connection.  If `credentials' is specified, it should be a 2-tuple
     consisting of userid and password, which will be placed in a HTTP
     ’Authorization’ header using Basic authentication.  If you specify
     credentials, you should also specify secure=True so that your
     userid and password are not passed in cleartext across the wire.

     Changed in version 3.5: The `context' parameter was added.

      -- Method: mapLogRecord (record)

          Provides a dictionary, based on ‘record’, which is to be
          URL-encoded and sent to the web server.  The default
          implementation just returns ‘record.__dict__’.  This method
          can be overridden if e.g.  only a subset of *note LogRecord:
          508. is to be sent to the web server, or if more specific
          customization of what’s sent to the server is required.

      -- Method: emit (record)

          Sends the record to the Web server as a URL-encoded
          dictionary.  The *note mapLogRecord(): 1a90. method is used to
          convert the record to the dictionary to be sent.

          Note: Since preparing a record for sending it to a Web server
          is not the same as a generic formatting operation, using *note
          setFormatter(): 19f0. to specify a *note Formatter: 19da. for
          a *note HTTPHandler: 2cb. has no effect.  Instead of calling
          *note format(): 19fa, this handler calls *note mapLogRecord():
          1a90. and then *note urllib.parse.urlencode(): 35e. to encode
          the dictionary in a form suitable for sending to a Web server.


File: python.info,  Node: QueueHandler,  Next: QueueListener,  Prev: HTTPHandler,  Up: logging handlers --- Logging handlers

5.16.8.15 QueueHandler
......................

New in version 3.2.

The *note QueueHandler: 1a94. class, located in the *note
logging.handlers: aa. module, supports sending logging messages to a
queue, such as those implemented in the *note queue: d8. or *note
multiprocessing: b6. modules.

Along with the *note QueueListener: 2cc. class, *note QueueHandler:
1a94. can be used to let handlers do their work on a separate thread
from the one which does the logging.  This is important in Web
applications and also other service applications where threads servicing
clients need to respond as quickly as possible, while any potentially
slow operations (such as sending an email via *note SMTPHandler: 1a81.)
are done on a separate thread.

 -- Class: logging.handlers.QueueHandler (queue)

     Returns a new instance of the *note QueueHandler: 1a94. class.  The
     instance is initialized with the queue to send messages to.  The
     queue can be any queue- like object; it’s used as-is by the *note
     enqueue(): 1a95. method, which needs to know how to send messages
     to it.

      -- Method: emit (record)

          Enqueues the result of preparing the LogRecord.

      -- Method: prepare (record)

          Prepares a record for queuing.  The object returned by this
          method is enqueued.

          The base implementation formats the record to merge the
          message and arguments, and removes unpickleable items from the
          record in-place.

          You might want to override this method if you want to convert
          the record to a dict or JSON string, or send a modified copy
          of the record while leaving the original intact.

      -- Method: enqueue (record)

          Enqueues the record on the queue using ‘put_nowait()’; you may
          want to override this if you want to use blocking behaviour,
          or a timeout, or a customized queue implementation.


File: python.info,  Node: QueueListener,  Prev: QueueHandler,  Up: logging handlers --- Logging handlers

5.16.8.16 QueueListener
.......................

New in version 3.2.

The *note QueueListener: 2cc. class, located in the *note
logging.handlers: aa. module, supports receiving logging messages from a
queue, such as those implemented in the *note queue: d8. or *note
multiprocessing: b6. modules.  The messages are received from a queue in
an internal thread and passed, on the same thread, to one or more
handlers for processing.  While *note QueueListener: 2cc. is not itself
a handler, it is documented here because it works hand-in-hand with
*note QueueHandler: 1a94.

Along with the *note QueueHandler: 1a94. class, *note QueueListener:
2cc. can be used to let handlers do their work on a separate thread from
the one which does the logging.  This is important in Web applications
and also other service applications where threads servicing clients need
to respond as quickly as possible, while any potentially slow operations
(such as sending an email via *note SMTPHandler: 1a81.) are done on a
separate thread.

 -- Class: logging.handlers.QueueListener (queue, *handlers,
          respect_handler_level=False)

     Returns a new instance of the *note QueueListener: 2cc. class.  The
     instance is initialized with the queue to send messages to and a
     list of handlers which will handle entries placed on the queue.
     The queue can be any queue- like object; it’s passed as-is to the
     *note dequeue(): 1a9a. method, which needs to know how to get
     messages from it.  If ‘respect_handler_level’ is ‘True’, a
     handler’s level is respected (compared with the level for the
     message) when deciding whether to pass messages to that handler;
     otherwise, the behaviour is as in previous Python versions - to
     always pass each message to each handler.

     Changed in version 3.5: The ‘respect_handler_levels’ argument was
     added.

      -- Method: dequeue (block)

          Dequeues a record and return it, optionally blocking.

          The base implementation uses ‘get()’.  You may want to
          override this method if you want to use timeouts or work with
          custom queue implementations.

      -- Method: prepare (record)

          Prepare a record for handling.

          This implementation just returns the passed-in record.  You
          may want to override this method if you need to do any custom
          marshalling or manipulation of the record before passing it to
          the handlers.

      -- Method: handle (record)

          Handle a record.

          This just loops through the handlers offering them the record
          to handle.  The actual object passed to the handlers is that
          which is returned from *note prepare(): 1a9b.

      -- Method: start ()

          Starts the listener.

          This starts up a background thread to monitor the queue for
          LogRecords to process.

      -- Method: stop ()

          Stops the listener.

          This asks the thread to terminate, and then waits for it to do
          so.  Note that if you don’t call this before your application
          exits, there may be some records still left on the queue,
          which won’t be processed.

      -- Method: enqueue_sentinel ()

          Writes a sentinel to the queue to tell the listener to quit.
          This implementation uses ‘put_nowait()’.  You may want to
          override this method if you want to use timeouts or work with
          custom queue implementations.

          New in version 3.3.

See also
........

Module *note logging: a8.

     API reference for the logging module.

Module *note logging.config: a9.

     Configuration API for the logging module.


File: python.info,  Node: getpass --- Portable password input,  Next: curses --- Terminal handling for character-cell displays,  Prev: logging handlers --- Logging handlers,  Up: Generic Operating System Services

5.16.9 ‘getpass’ — Portable password input
------------------------------------------

The *note getpass: 87. module provides two functions:

 -- Function: getpass.getpass (prompt='Password: ', stream=None)

     Prompt the user for a password without echoing.  The user is
     prompted using the string `prompt', which defaults to ‘'Password:
     '’.  On Unix, the prompt is written to the file-like object
     `stream' using the replace error handler if needed.  `stream'
     defaults to the controlling terminal (‘/dev/tty’) or if that is
     unavailable to ‘sys.stderr’ (this argument is ignored on Windows).

     If echo free input is unavailable getpass() falls back to printing
     a warning message to `stream' and reading from ‘sys.stdin’ and
     issuing a *note GetPassWarning: 1aa3.

     Availability: Macintosh, Unix, Windows.

          Note: If you call getpass from within IDLE, the input may be
          done in the terminal you launched IDLE from rather than the
          idle window itself.

 -- Exception: getpass.GetPassWarning

     A *note UserWarning: 10cc. subclass issued when password input may
     be echoed.

 -- Function: getpass.getuser ()

     Return the "login name" of the user.  Availability: Unix, Windows.

     This function checks the environment variables ‘LOGNAME’, ‘USER’,
     ‘LNAME’ and ‘USERNAME’, in order, and returns the value of the
     first one which is set to a non-empty string.  If none are set, the
     login name from the password database is returned on systems which
     support the *note pwd: d4. module, otherwise, an exception is
     raised.


File: python.info,  Node: curses --- Terminal handling for character-cell displays,  Next: curses textpad --- Text input widget for curses programs,  Prev: getpass --- Portable password input,  Up: Generic Operating System Services

5.16.10 ‘curses’ — Terminal handling for character-cell displays
----------------------------------------------------------------

The *note curses: 2b. module provides an interface to the curses
library, the de-facto standard for portable advanced terminal handling.

While curses is most widely used in the Unix environment, versions are
available for Windows, DOS, and possibly other systems as well.  This
extension module is designed to match the API of ncurses, an open-source
curses library hosted on Linux and the BSD variants of Unix.

     Note: Since version 5.4, the ncurses library decides how to
     interpret non-ASCII data using the ‘nl_langinfo’ function.  That
     means that you have to call *note locale.setlocale(): 196a. in the
     application and encode Unicode strings using one of the system’s
     available encodings.  This example uses the system’s default
     encoding:

          import locale
          locale.setlocale(locale.LC_ALL, '')
          code = locale.getpreferredencoding()

     Then use `code' as the encoding for *note str.encode(): 89d. calls.

See also
........

Module *note curses.ascii: 2c.

     Utilities for working with ASCII characters, regardless of your
     locale settings.

Module *note curses.panel: 2d.

     A panel stack extension that adds depth to curses windows.

Module *note curses.textpad: 2e.

     Editable text widget for curses supporting ‘Emacs’-like bindings.

*note Curses Programming with Python: 1aa7.

     Tutorial material on using curses with Python, by Andrew Kuchling
     and Eric Raymond.

The Tools/demo/(1) directory in the Python source distribution contains
some example programs using the curses bindings provided by this module.

* Menu:

* Functions: Functions<2>. 
* Window Objects:: 
* Constants: Constants<4>. 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Tools/demo/


File: python.info,  Node: Functions<2>,  Next: Window Objects,  Up: curses --- Terminal handling for character-cell displays

5.16.10.1 Functions
...................

The module *note curses: 2b. defines the following exception:

 -- Exception: curses.error

     Exception raised when a curses library function returns an error.

     Note: Whenever `x' or `y' arguments to a function or a method are
     optional, they default to the current cursor location.  Whenever
     `attr' is optional, it defaults to ‘A_NORMAL’.

The module *note curses: 2b. defines the following functions:

 -- Function: curses.baudrate ()

     Return the output speed of the terminal in bits per second.  On
     software terminal emulators it will have a fixed high value.
     Included for historical reasons; in former times, it was used to
     write output loops for time delays and occasionally to change
     interfaces depending on the line speed.

 -- Function: curses.beep ()

     Emit a short attention sound.

 -- Function: curses.can_change_color ()

     Return ‘True’ or ‘False’, depending on whether the programmer can
     change the colors displayed by the terminal.

 -- Function: curses.cbreak ()

     Enter cbreak mode.  In cbreak mode (sometimes called "rare" mode)
     normal tty line buffering is turned off and characters are
     available to be read one by one.  However, unlike raw mode, special
     characters (interrupt, quit, suspend, and flow control) retain
     their effects on the tty driver and calling program.  Calling first
     *note raw(): 1aaf. then *note cbreak(): 1aae. leaves the terminal
     in cbreak mode.

 -- Function: curses.color_content (color_number)

     Return the intensity of the red, green, and blue (RGB) components
     in the color `color_number', which must be between ‘0’ and
     ‘COLORS’.  A 3-tuple is returned, containing the R,G,B values for
     the given color, which will be between ‘0’ (no component) and
     ‘1000’ (maximum amount of component).

 -- Function: curses.color_pair (color_number)

     Return the attribute value for displaying text in the specified
     color.  This attribute value can be combined with ‘A_STANDOUT’,
     ‘A_REVERSE’, and the other ‘A_*’ attributes.  *note pair_number():
     1ab2. is the counterpart to this function.

 -- Function: curses.curs_set (visibility)

     Set the cursor state.  `visibility' can be set to 0, 1, or 2, for
     invisible, normal, or very visible.  If the terminal supports the
     visibility requested, the previous cursor state is returned;
     otherwise, an exception is raised.  On many terminals, the
     "visible" mode is an underline cursor and the "very visible" mode
     is a block cursor.

 -- Function: curses.def_prog_mode ()

     Save the current terminal mode as the "program" mode, the mode when
     the running program is using curses.  (Its counterpart is the
     "shell" mode, for when the program is not in curses.)  Subsequent
     calls to *note reset_prog_mode(): 1ab5. will restore this mode.

 -- Function: curses.def_shell_mode ()

     Save the current terminal mode as the "shell" mode, the mode when
     the running program is not using curses.  (Its counterpart is the
     "program" mode, when the program is using curses capabilities.)
     Subsequent calls to *note reset_shell_mode(): 1ab7. will restore
     this mode.

 -- Function: curses.delay_output (ms)

     Insert an `ms' millisecond pause in output.

 -- Function: curses.doupdate ()

     Update the physical screen.  The curses library keeps two data
     structures, one representing the current physical screen contents
     and a virtual screen representing the desired next state.  The
     *note doupdate(): 1ab9. ground updates the physical screen to match
     the virtual screen.

     The virtual screen may be updated by a ‘noutrefresh()’ call after
     write operations such as ‘addstr()’ have been performed on a
     window.  The normal ‘refresh()’ call is simply ‘noutrefresh()’
     followed by *note doupdate(): 1ab9.; if you have to update multiple
     windows, you can speed performance and perhaps reduce screen
     flicker by issuing ‘noutrefresh()’ calls on all windows, followed
     by a single *note doupdate(): 1ab9.

 -- Function: curses.echo ()

     Enter echo mode.  In echo mode, each character input is echoed to
     the screen as it is entered.

 -- Function: curses.endwin ()

     De-initialize the library, and return terminal to normal status.

 -- Function: curses.erasechar ()

     Return the user’s current erase character.  Under Unix operating
     systems this is a property of the controlling tty of the curses
     program, and is not set by the curses library itself.

 -- Function: curses.filter ()

     The *note filter(): 1abd. routine, if used, must be called before
     *note initscr(): 1abe. is called.  The effect is that, during those
     calls, ‘LINES’ is set to 1; the capabilities clear, cup, cud, cud1,
     cuu1, cuu, vpa are disabled; and the home string is set to the
     value of cr.  The effect is that the cursor is confined to the
     current line, and so are screen updates.  This may be used for
     enabling character-at-a-time line editing without touching the rest
     of the screen.

 -- Function: curses.flash ()

     Flash the screen.  That is, change it to reverse-video and then
     change it back in a short interval.  Some people prefer such as
     ’visible bell’ to the audible attention signal produced by *note
     beep(): 1aac.

 -- Function: curses.flushinp ()

     Flush all input buffers.  This throws away any typeahead that has
     been typed by the user and has not yet been processed by the
     program.

 -- Function: curses.getmouse ()

     After ‘getch()’ returns ‘KEY_MOUSE’ to signal a mouse event, this
     method should be call to retrieve the queued mouse event,
     represented as a 5-tuple ‘(id, x, y, z, bstate)’.  `id' is an ID
     value used to distinguish multiple devices, and `x', `y', `z' are
     the event’s coordinates.  (`z' is currently unused.)  `bstate' is
     an integer value whose bits will be set to indicate the type of
     event, and will be the bitwise OR of one or more of the following
     constants, where `n' is the button number from 1 to 4:
     ‘BUTTONn_PRESSED’, ‘BUTTONn_RELEASED’, ‘BUTTONn_CLICKED’,
     ‘BUTTONn_DOUBLE_CLICKED’, ‘BUTTONn_TRIPLE_CLICKED’, ‘BUTTON_SHIFT’,
     ‘BUTTON_CTRL’, ‘BUTTON_ALT’.

 -- Function: curses.getsyx ()

     Return the current coordinates of the virtual screen cursor in y
     and x.  If leaveok is currently true, then -1,-1 is returned.

 -- Function: curses.getwin (file)

     Read window related data stored in the file by an earlier
     ‘putwin()’ call.  The routine then creates and initializes a new
     window using that data, returning the new window object.

 -- Function: curses.has_colors ()

     Return ‘True’ if the terminal can display colors; otherwise, return
     ‘False’.

 -- Function: curses.has_ic ()

     Return ‘True’ if the terminal has insert- and delete-character
     capabilities.  This function is included for historical reasons
     only, as all modern software terminal emulators have such
     capabilities.

 -- Function: curses.has_il ()

     Return ‘True’ if the terminal has insert- and delete-line
     capabilities, or can simulate them using scrolling regions.  This
     function is included for historical reasons only, as all modern
     software terminal emulators have such capabilities.

 -- Function: curses.has_key (ch)

     Take a key value `ch', and return ‘True’ if the current terminal
     type recognizes a key with that value.

 -- Function: curses.halfdelay (tenths)

     Used for half-delay mode, which is similar to cbreak mode in that
     characters typed by the user are immediately available to the
     program.  However, after blocking for `tenths' tenths of seconds,
     an exception is raised if nothing has been typed.  The value of
     `tenths' must be a number between ‘1’ and ‘255’.  Use *note
     nocbreak(): 1ac9. to leave half-delay mode.

 -- Function: curses.init_color (color_number, r, g, b)

     Change the definition of a color, taking the number of the color to
     be changed followed by three RGB values (for the amounts of red,
     green, and blue components).  The value of `color_number' must be
     between ‘0’ and ‘COLORS’.  Each of `r', `g', `b', must be a value
     between ‘0’ and ‘1000’.  When *note init_color(): 1aca. is used,
     all occurrences of that color on the screen immediately change to
     the new definition.  This function is a no-op on most terminals; it
     is active only if *note can_change_color(): 1aad. returns ‘1’.

 -- Function: curses.init_pair (pair_number, fg, bg)

     Change the definition of a color-pair.  It takes three arguments:
     the number of the color-pair to be changed, the foreground color
     number, and the background color number.  The value of
     `pair_number' must be between ‘1’ and ‘COLOR_PAIRS - 1’ (the ‘0’
     color pair is wired to white on black and cannot be changed).  The
     value of `fg' and `bg' arguments must be between ‘0’ and ‘COLORS’.
     If the color-pair was previously initialized, the screen is
     refreshed and all occurrences of that color-pair are changed to the
     new definition.

 -- Function: curses.initscr ()

     Initialize the library.  Return a ‘WindowObject’ which represents
     the whole screen.

          Note: If there is an error opening the terminal, the
          underlying curses library may cause the interpreter to exit.

 -- Function: curses.is_term_resized (nlines, ncols)

     Return ‘True’ if *note resize_term(): 1acd. would modify the window
     structure, ‘False’ otherwise.

 -- Function: curses.isendwin ()

     Return ‘True’ if *note endwin(): 1abb. has been called (that is,
     the curses library has been deinitialized).

 -- Function: curses.keyname (k)

     Return the name of the key numbered `k'.  The name of a key
     generating printable ASCII character is the key’s character.  The
     name of a control-key combination is a two-character string
     consisting of a caret followed by the corresponding printable ASCII
     character.  The name of an alt-key combination (128-255) is a
     string consisting of the prefix ’M-’ followed by the name of the
     corresponding ASCII character.

 -- Function: curses.killchar ()

     Return the user’s current line kill character.  Under Unix
     operating systems this is a property of the controlling tty of the
     curses program, and is not set by the curses library itself.

 -- Function: curses.longname ()

     Return a string containing the terminfo long name field describing
     the current terminal.  The maximum length of a verbose description
     is 128 characters.  It is defined only after the call to *note
     initscr(): 1abe.

 -- Function: curses.meta (yes)

     If `yes' is 1, allow 8-bit characters to be input.  If `yes' is 0,
     allow only 7-bit chars.

 -- Function: curses.mouseinterval (interval)

     Set the maximum time in milliseconds that can elapse between press
     and release events in order for them to be recognized as a click,
     and return the previous interval value.  The default value is 200
     msec, or one fifth of a second.

 -- Function: curses.mousemask (mousemask)

     Set the mouse events to be reported, and return a tuple
     ‘(availmask, oldmask)’.  `availmask' indicates which of the
     specified mouse events can be reported; on complete failure it
     returns 0.  `oldmask' is the previous value of the given window’s
     mouse event mask.  If this function is never called, no mouse
     events are ever reported.

 -- Function: curses.napms (ms)

     Sleep for `ms' milliseconds.

 -- Function: curses.newpad (nlines, ncols)

     Create and return a pointer to a new pad data structure with the
     given number of lines and columns.  A pad is returned as a window
     object.

     A pad is like a window, except that it is not restricted by the
     screen size, and is not necessarily associated with a particular
     part of the screen.  Pads can be used when a large window is
     needed, and only a part of the window will be on the screen at one
     time.  Automatic refreshes of pads (such as from scrolling or
     echoing of input) do not occur.  The ‘refresh()’ and
     ‘noutrefresh()’ methods of a pad require 6 arguments to specify the
     part of the pad to be displayed and the location on the screen to
     be used for the display.  The arguments are `pminrow', `pmincol',
     `sminrow', `smincol', `smaxrow', `smaxcol'; the `p' arguments refer
     to the upper left corner of the pad region to be displayed and the
     `s' arguments define a clipping box on the screen within which the
     pad region is to be displayed.

 -- Function: curses.newwin (nlines, ncols)

 -- Function: curses.newwin (nlines, ncols, begin_y, begin_x)

     Return a new window, whose left-upper corner is at ‘(begin_y,
     begin_x)’, and whose height/width is `nlines'/`ncols'.

     By default, the window will extend from the specified position to
     the lower right corner of the screen.

 -- Function: curses.nl ()

     Enter newline mode.  This mode translates the return key into
     newline on input, and translates newline into return and line-feed
     on output.  Newline mode is initially on.

 -- Function: curses.nocbreak ()

     Leave cbreak mode.  Return to normal "cooked" mode with line
     buffering.

 -- Function: curses.noecho ()

     Leave echo mode.  Echoing of input characters is turned off.

 -- Function: curses.nonl ()

     Leave newline mode.  Disable translation of return into newline on
     input, and disable low-level translation of newline into
     newline/return on output (but this does not change the behavior of
     ‘addch('\n')’, which always does the equivalent of return and line
     feed on the virtual screen).  With translation off, curses can
     sometimes speed up vertical motion a little; also, it will be able
     to detect the return key on input.

 -- Function: curses.noqiflush ()

     When the *note noqiflush(): 1adb. routine is used, normal flush of
     input and output queues associated with the INTR, QUIT and SUSP
     characters will not be done.  You may want to call *note
     noqiflush(): 1adb. in a signal handler if you want output to
     continue as though the interrupt had not occurred, after the
     handler exits.

 -- Function: curses.noraw ()

     Leave raw mode.  Return to normal "cooked" mode with line
     buffering.

 -- Function: curses.pair_content (pair_number)

     Return a tuple ‘(fg, bg)’ containing the colors for the requested
     color pair.  The value of `pair_number' must be between ‘1’ and
     ‘COLOR_PAIRS - 1’.

 -- Function: curses.pair_number (attr)

     Return the number of the color-pair set by the attribute value
     `attr'.  *note color_pair(): 1ab1. is the counterpart to this
     function.

 -- Function: curses.putp (string)

     Equivalent to ‘tputs(str, 1, putchar)’; emit the value of a
     specified terminfo capability for the current terminal.  Note that
     the output of *note putp(): 1ade. always goes to standard output.

 -- Function: curses.qiflush ([flag])

     If `flag' is ‘False’, the effect is the same as calling *note
     noqiflush(): 1adb.  If `flag' is ‘True’, or no argument is
     provided, the queues will be flushed when these control characters
     are read.

 -- Function: curses.raw ()

     Enter raw mode.  In raw mode, normal line buffering and processing
     of interrupt, quit, suspend, and flow control keys are turned off;
     characters are presented to curses input functions one by one.

 -- Function: curses.reset_prog_mode ()

     Restore the terminal to "program" mode, as previously saved by
     *note def_prog_mode(): 1ab4.

 -- Function: curses.reset_shell_mode ()

     Restore the terminal to "shell" mode, as previously saved by *note
     def_shell_mode(): 1ab6.

 -- Function: curses.resetty ()

     Restore the state of the terminal modes to what it was at the last
     call to *note savetty(): 1ae1.

 -- Function: curses.resize_term (nlines, ncols)

     Backend function used by *note resizeterm(): 1ae2, performing most
     of the work; when resizing the windows, *note resize_term(): 1acd.
     blank-fills the areas that are extended.  The calling application
     should fill in these areas with appropriate data.  The *note
     resize_term(): 1acd. function attempts to resize all windows.
     However, due to the calling convention of pads, it is not possible
     to resize these without additional interaction with the
     application.

 -- Function: curses.resizeterm (nlines, ncols)

     Resize the standard and current windows to the specified
     dimensions, and adjusts other bookkeeping data used by the curses
     library that record the window dimensions (in particular the
     SIGWINCH handler).

 -- Function: curses.savetty ()

     Save the current state of the terminal modes in a buffer, usable by
     *note resetty(): 1ae0.

 -- Function: curses.setsyx (y, x)

     Set the virtual screen cursor to `y', `x'.  If `y' and `x' are both
     -1, then leaveok is set.

 -- Function: curses.setupterm ([termstr, fd])

     Initialize the terminal.  `termstr' is a string giving the terminal
     name; if omitted, the value of the ‘TERM’ environment variable will
     be used.  `fd' is the file descriptor to which any initialization
     sequences will be sent; if not supplied, the file descriptor for
     ‘sys.stdout’ will be used.

 -- Function: curses.start_color ()

     Must be called if the programmer wants to use colors, and before
     any other color manipulation routine is called.  It is good
     practice to call this routine right after *note initscr(): 1abe.

     *note start_color(): 1ae5. initializes eight basic colors (black,
     red, green, yellow, blue, magenta, cyan, and white), and two global
     variables in the *note curses: 2b. module, ‘COLORS’ and
     ‘COLOR_PAIRS’, containing the maximum number of colors and
     color-pairs the terminal can support.  It also restores the colors
     on the terminal to the values they had when the terminal was just
     turned on.

 -- Function: curses.termattrs ()

     Return a logical OR of all video attributes supported by the
     terminal.  This information is useful when a curses program needs
     complete control over the appearance of the screen.

 -- Function: curses.termname ()

     Return the value of the environment variable ‘TERM’, truncated to
     14 characters.

 -- Function: curses.tigetflag (capname)

     Return the value of the Boolean capability corresponding to the
     terminfo capability name `capname'.  The value ‘-1’ is returned if
     `capname' is not a Boolean capability, or ‘0’ if it is canceled or
     absent from the terminal description.

 -- Function: curses.tigetnum (capname)

     Return the value of the numeric capability corresponding to the
     terminfo capability name `capname'.  The value ‘-2’ is returned if
     `capname' is not a numeric capability, or ‘-1’ if it is canceled or
     absent from the terminal description.

 -- Function: curses.tigetstr (capname)

     Return the value of the string capability corresponding to the
     terminfo capability name `capname'.  ‘None’ is returned if
     `capname' is not a string capability, or is canceled or absent from
     the terminal description.

 -- Function: curses.tparm (str[, ...])

     Instantiate the string `str' with the supplied parameters, where
     `str' should be a parameterized string obtained from the terminfo
     database.  E.g.  ‘tparm(tigetstr("cup"), 5, 3)’ could result in
     ‘b'\033[6;4H'’, the exact result depending on terminal type.

 -- Function: curses.typeahead (fd)

     Specify that the file descriptor `fd' be used for typeahead
     checking.  If `fd' is ‘-1’, then no typeahead checking is done.

     The curses library does "line-breakout optimization" by looking for
     typeahead periodically while updating the screen.  If input is
     found, and it is coming from a tty, the current update is postponed
     until refresh or doupdate is called again, allowing faster response
     to commands typed in advance.  This function allows specifying a
     different file descriptor for typeahead checking.

 -- Function: curses.unctrl (ch)

     Return a string which is a printable representation of the
     character `ch'.  Control characters are displayed as a caret
     followed by the character, for example as ‘^C’.  Printing
     characters are left as they are.

 -- Function: curses.ungetch (ch)

     Push `ch' so the next ‘getch()’ will return it.

          Note: Only one `ch' can be pushed before ‘getch()’ is called.

 -- Function: curses.update_lines_cols ()

     Update ‘LINES’ and ‘COLS’.  Useful for detecting manual screen
     resize.

     New in version 3.5.

 -- Function: curses.unget_wch (ch)

     Push `ch' so the next ‘get_wch()’ will return it.

          Note: Only one `ch' can be pushed before ‘get_wch()’ is
          called.

     New in version 3.3.

 -- Function: curses.ungetmouse (id, x, y, z, bstate)

     Push a ‘KEY_MOUSE’ event onto the input queue, associating the
     given state data with it.

 -- Function: curses.use_env (flag)

     If used, this function should be called before *note initscr():
     1abe. or newterm are called.  When `flag' is ‘False’, the values of
     lines and columns specified in the terminfo database will be used,
     even if environment variables ‘LINES’ and ‘COLUMNS’ (used by
     default) are set, or if curses is running in a window (in which
     case default behavior would be to use the window size if ‘LINES’
     and ‘COLUMNS’ are not set).

 -- Function: curses.use_default_colors ()

     Allow use of default values for colors on terminals supporting this
     feature.  Use this to support transparency in your application.
     The default color is assigned to the color number -1.  After
     calling this function, ‘init_pair(x, curses.COLOR_RED, -1)’
     initializes, for instance, color pair `x' to a red foreground color
     on the default background.

 -- Function: curses.wrapper (func, ...)

     Initialize curses and call another callable object, `func', which
     should be the rest of your curses-using application.  If the
     application raises an exception, this function will restore the
     terminal to a sane state before re-raising the exception and
     generating a traceback.  The callable object `func' is then passed
     the main window ’stdscr’ as its first argument, followed by any
     other arguments passed to *note wrapper(): 1af2.  Before calling
     `func', *note wrapper(): 1af2. turns on cbreak mode, turns off
     echo, enables the terminal keypad, and initializes colors if the
     terminal has color support.  On exit (whether normally or by
     exception) it restores cooked mode, turns on echo, and disables the
     terminal keypad.


File: python.info,  Node: Window Objects,  Next: Constants<4>,  Prev: Functions<2>,  Up: curses --- Terminal handling for character-cell displays

5.16.10.2 Window Objects
........................

Window objects, as returned by *note initscr(): 1abe. and *note
newwin(): 1ad7. above, have the following methods and attributes:

 -- Method: window.addch (ch[, attr])

 -- Method: window.addch (y, x, ch[, attr])

          Note: A `character' means a C character (an ASCII code),
          rather than a Python character (a string of length 1).  (This
          note is true whenever the documentation mentions a character.)
          The built-in *note ord(): de6. is handy for conveying strings
          to codes.

     Paint character `ch' at ‘(y, x)’ with attributes `attr',
     overwriting any character previously painter at that location.  By
     default, the character position and attributes are the current
     settings for the window object.

 -- Method: window.addnstr (str, n[, attr])

 -- Method: window.addnstr (y, x, str, n[, attr])

     Paint at most `n' characters of the string `str' at ‘(y, x)’ with
     attributes `attr', overwriting anything previously on the display.

 -- Method: window.addstr (str[, attr])

 -- Method: window.addstr (y, x, str[, attr])

     Paint the string `str' at ‘(y, x)’ with attributes `attr',
     overwriting anything previously on the display.

 -- Method: window.attroff (attr)

     Remove attribute `attr' from the "background" set applied to all
     writes to the current window.

 -- Method: window.attron (attr)

     Add attribute `attr' from the "background" set applied to all
     writes to the current window.

 -- Method: window.attrset (attr)

     Set the "background" set of attributes to `attr'.  This set is
     initially 0 (no attributes).

 -- Method: window.bkgd (ch[, attr])

     Set the background property of the window to the character `ch',
     with attributes `attr'.  The change is then applied to every
     character position in that window:

        * The attribute of every character in the window is changed to
          the new background attribute.

        * Wherever the former background character appears, it is
          changed to the new background character.

 -- Method: window.bkgdset (ch[, attr])

     Set the window’s background.  A window’s background consists of a
     character and any combination of attributes.  The attribute part of
     the background is combined (OR’ed) with all non-blank characters
     that are written into the window.  Both the character and attribute
     parts of the background are combined with the blank characters.
     The background becomes a property of the character and moves with
     the character through any scrolling and insert/delete
     line/character operations.

 -- Method: window.border ([ls[, rs[, ts[, bs[, tl[, tr[, bl[,
          br]]]]]]]])

     Draw a border around the edges of the window.  Each parameter
     specifies the character to use for a specific part of the border;
     see the table below for more details.  The characters can be
     specified as integers or as one-character strings.

          Note: A ‘0’ value for any parameter will cause the default
          character to be used for that parameter.  Keyword parameters
          can `not' be used.  The defaults are listed in this table:

     Parameter       Description               Default value
                                               
     ----------------------------------------------------------------------
                                               
     `ls'            Left side                 ‘ACS_VLINE’
                                               
                                               
     `rs'            Right side                ‘ACS_VLINE’
                                               
                                               
     `ts'            Top                       ‘ACS_HLINE’
                                               
                                               
     `bs'            Bottom                    ‘ACS_HLINE’
                                               
                                               
     `tl'            Upper-left corner         ‘ACS_ULCORNER’
                                               
                                               
     `tr'            Upper-right corner        ‘ACS_URCORNER’
                                               
                                               
     `bl'            Bottom-left corner        ‘ACS_LLCORNER’
                                               
                                               
     `br'            Bottom-right corner       ‘ACS_LRCORNER’
                                               

 -- Method: window.box ([vertch, horch])

     Similar to *note border(): 1afd, but both `ls' and `rs' are
     `vertch' and both `ts' and `bs' are `horch'.  The default corner
     characters are always used by this function.

 -- Method: window.chgat (attr)

 -- Method: window.chgat (num, attr)

 -- Method: window.chgat (y, x, attr)

 -- Method: window.chgat (y, x, num, attr)

     Set the attributes of `num' characters at the current cursor
     position, or at position ‘(y, x)’ if supplied.  If no value of
     `num' is given or `num' = -1, the attribute will be set on all the
     characters to the end of the line.  This function does not move the
     cursor.  The changed line will be touched using the *note
     touchline(): 1b00. method so that the contents will be redisplayed
     by the next window refresh.

 -- Method: window.clear ()

     Like *note erase(): 1b02, but also cause the whole window to be
     repainted upon next call to *note refresh(): 1b03.

 -- Method: window.clearok (yes)

     If `yes' is 1, the next call to *note refresh(): 1b03. will clear
     the window completely.

 -- Method: window.clrtobot ()

     Erase from cursor to the end of the window: all lines below the
     cursor are deleted, and then the equivalent of *note clrtoeol():
     1b06. is performed.

 -- Method: window.clrtoeol ()

     Erase from cursor to the end of the line.

 -- Method: window.cursyncup ()

     Update the current cursor position of all the ancestors of the
     window to reflect the current cursor position of the window.

 -- Method: window.delch ([y, x])

     Delete any character at ‘(y, x)’.

 -- Method: window.deleteln ()

     Delete the line under the cursor.  All following lines are moved up
     by one line.

 -- Method: window.derwin (begin_y, begin_x)

 -- Method: window.derwin (nlines, ncols, begin_y, begin_x)

     An abbreviation for "derive window", *note derwin(): 1b0a. is the
     same as calling *note subwin(): 1b0b, except that `begin_y' and
     `begin_x' are relative to the origin of the window, rather than
     relative to the entire screen.  Return a window object for the
     derived window.

 -- Method: window.echochar (ch[, attr])

     Add character `ch' with attribute `attr', and immediately call
     *note refresh(): 1b03. on the window.

 -- Method: window.enclose (y, x)

     Test whether the given pair of screen-relative character-cell
     coordinates are enclosed by the given window, returning ‘True’ or
     ‘False’.  It is useful for determining what subset of the screen
     windows enclose the location of a mouse event.

 -- Attribute: window.encoding

     Encoding used to encode method arguments (Unicode strings and
     characters).  The encoding attribute is inherited from the parent
     window when a subwindow is created, for example with *note
     window.subwin(): 1b0b.  By default, the locale encoding is used
     (see *note locale.getpreferredencoding(): fb0.).

     New in version 3.3.

 -- Method: window.erase ()

     Clear the window.

 -- Method: window.getbegyx ()

     Return a tuple ‘(y, x)’ of co-ordinates of upper-left corner.

 -- Method: window.getbkgd ()

     Return the given window’s current background character/attribute
     pair.

 -- Method: window.getch ([y, x])

     Get a character.  Note that the integer returned does `not' have to
     be in ASCII range: function keys, keypad keys and so on return
     numbers higher than 256.  In no-delay mode, -1 is returned if there
     is no input, else *note getch(): 1b10. waits until a key is
     pressed.

 -- Method: window.get_wch ([y, x])

     Get a wide character.  Return a character for most keys, or an
     integer for function keys, keypad keys, and other special keys.

     New in version 3.3.

 -- Method: window.getkey ([y, x])

     Get a character, returning a string instead of an integer, as *note
     getch(): 1b10. does.  Function keys, keypad keys and other special
     keys return a multibyte string containing the key name.  In
     no-delay mode, an exception is raised if there is no input.

 -- Method: window.getmaxyx ()

     Return a tuple ‘(y, x)’ of the height and width of the window.

 -- Method: window.getparyx ()

     Return the beginning coordinates of this window relative to its
     parent window into two integer variables y and x.  Return ‘-1, -1’
     if this window has no parent.

 -- Method: window.getstr ([y, x])

     Read a string from the user, with primitive line editing capacity.

 -- Method: window.getyx ()

     Return a tuple ‘(y, x)’ of current cursor position relative to the
     window’s upper-left corner.

 -- Method: window.hline (ch, n)

 -- Method: window.hline (y, x, ch, n)

     Display a horizontal line starting at ‘(y, x)’ with length `n'
     consisting of the character `ch'.

 -- Method: window.idcok (flag)

     If `flag' is ‘False’, curses no longer considers using the hardware
     insert/delete character feature of the terminal; if `flag' is
     ‘True’, use of character insertion and deletion is enabled.  When
     curses is first initialized, use of character insert/delete is
     enabled by default.

 -- Method: window.idlok (yes)

     If called with `yes' equal to 1, *note curses: 2b. will try and use
     hardware line editing facilities.  Otherwise, line
     insertion/deletion are disabled.

 -- Method: window.immedok (flag)

     If `flag' is ‘True’, any change in the window image automatically
     causes the window to be refreshed; you no longer have to call *note
     refresh(): 1b03. yourself.  However, it may degrade performance
     considerably, due to repeated calls to wrefresh.  This option is
     disabled by default.

 -- Method: window.inch ([y, x])

     Return the character at the given position in the window.  The
     bottom 8 bits are the character proper, and upper bits are the
     attributes.

 -- Method: window.insch (ch[, attr])

 -- Method: window.insch (y, x, ch[, attr])

     Paint character `ch' at ‘(y, x)’ with attributes `attr', moving the
     line from position `x' right by one character.

 -- Method: window.insdelln (nlines)

     Insert `nlines' lines into the specified window above the current
     line.  The `nlines' bottom lines are lost.  For negative `nlines',
     delete `nlines' lines starting with the one under the cursor, and
     move the remaining lines up.  The bottom `nlines' lines are
     cleared.  The current cursor position remains the same.

 -- Method: window.insertln ()

     Insert a blank line under the cursor.  All following lines are
     moved down by one line.

 -- Method: window.insnstr (str, n[, attr])

 -- Method: window.insnstr (y, x, str, n[, attr])

     Insert a character string (as many characters as will fit on the
     line) before the character under the cursor, up to `n' characters.
     If `n' is zero or negative, the entire string is inserted.  All
     characters to the right of the cursor are shifted right, with the
     rightmost characters on the line being lost.  The cursor position
     does not change (after moving to `y', `x', if specified).

 -- Method: window.insstr (str[, attr])

 -- Method: window.insstr (y, x, str[, attr])

     Insert a character string (as many characters as will fit on the
     line) before the character under the cursor.  All characters to the
     right of the cursor are shifted right, with the rightmost
     characters on the line being lost.  The cursor position does not
     change (after moving to `y', `x', if specified).

 -- Method: window.instr ([n])

 -- Method: window.instr (y, x[, n])

     Return a string of characters, extracted from the window starting
     at the current cursor position, or at `y', `x' if specified.
     Attributes are stripped from the characters.  If `n' is specified,
     *note instr(): 1b20. returns a string at most `n' characters long
     (exclusive of the trailing NUL).

 -- Method: window.is_linetouched (line)

     Return ‘True’ if the specified line was modified since the last
     call to *note refresh(): 1b03.; otherwise return ‘False’.  Raise a
     *note curses.error: 1aaa. exception if `line' is not valid for the
     given window.

 -- Method: window.is_wintouched ()

     Return ‘True’ if the specified window was modified since the last
     call to *note refresh(): 1b03.; otherwise return ‘False’.

 -- Method: window.keypad (yes)

     If `yes' is 1, escape sequences generated by some keys (keypad,
     function keys) will be interpreted by *note curses: 2b.  If `yes'
     is 0, escape sequences will be left as is in the input stream.

 -- Method: window.leaveok (yes)

     If `yes' is 1, cursor is left where it is on update, instead of
     being at "cursor position."  This reduces cursor movement where
     possible.  If possible the cursor will be made invisible.

     If `yes' is 0, cursor will always be at "cursor position" after an
     update.

 -- Method: window.move (new_y, new_x)

     Move cursor to ‘(new_y, new_x)’.

 -- Method: window.mvderwin (y, x)

     Move the window inside its parent window.  The screen-relative
     parameters of the window are not changed.  This routine is used to
     display different parts of the parent window at the same physical
     position on the screen.

 -- Method: window.mvwin (new_y, new_x)

     Move the window so its upper-left corner is at ‘(new_y, new_x)’.

 -- Method: window.nodelay (yes)

     If `yes' is ‘1’, *note getch(): 1b10. will be non-blocking.

 -- Method: window.notimeout (yes)

     If `yes' is ‘1’, escape sequences will not be timed out.

     If `yes' is ‘0’, after a few milliseconds, an escape sequence will
     not be interpreted, and will be left in the input stream as is.

 -- Method: window.noutrefresh ()

     Mark for refresh but wait.  This function updates the data
     structure representing the desired state of the window, but does
     not force an update of the physical screen.  To accomplish that,
     call *note doupdate(): 1ab9.

 -- Method: window.overlay (destwin[, sminrow, smincol, dminrow,
          dmincol, dmaxrow, dmaxcol])

     Overlay the window on top of `destwin'.  The windows need not be
     the same size, only the overlapping region is copied.  This copy is
     non-destructive, which means that the current background character
     does not overwrite the old contents of `destwin'.

     To get fine-grained control over the copied region, the second form
     of *note overlay(): 1b2b. can be used.  `sminrow' and `smincol' are
     the upper-left coordinates of the source window, and the other
     variables mark a rectangle in the destination window.

 -- Method: window.overwrite (destwin[, sminrow, smincol, dminrow,
          dmincol, dmaxrow, dmaxcol])

     Overwrite the window on top of `destwin'.  The windows need not be
     the same size, in which case only the overlapping region is copied.
     This copy is destructive, which means that the current background
     character overwrites the old contents of `destwin'.

     To get fine-grained control over the copied region, the second form
     of *note overwrite(): 1b2c. can be used.  `sminrow' and `smincol'
     are the upper-left coordinates of the source window, the other
     variables mark a rectangle in the destination window.

 -- Method: window.putwin (file)

     Write all data associated with the window into the provided file
     object.  This information can be later retrieved using the *note
     getwin(): 1ac3. function.

 -- Method: window.redrawln (beg, num)

     Indicate that the `num' screen lines, starting at line `beg', are
     corrupted and should be completely redrawn on the next *note
     refresh(): 1b03. call.

 -- Method: window.redrawwin ()

     Touch the entire window, causing it to be completely redrawn on the
     next *note refresh(): 1b03. call.

 -- Method: window.refresh ([pminrow, pmincol, sminrow, smincol,
          smaxrow, smaxcol])

     Update the display immediately (sync actual screen with previous
     drawing/deleting methods).

     The 6 optional arguments can only be specified when the window is a
     pad created with *note newpad(): 1ad6.  The additional parameters
     are needed to indicate what part of the pad and screen are
     involved.  `pminrow' and `pmincol' specify the upper left-hand
     corner of the rectangle to be displayed in the pad.  `sminrow',
     `smincol', `smaxrow', and `smaxcol' specify the edges of the
     rectangle to be displayed on the screen.  The lower right-hand
     corner of the rectangle to be displayed in the pad is calculated
     from the screen coordinates, since the rectangles must be the same
     size.  Both rectangles must be entirely contained within their
     respective structures.  Negative values of `pminrow', `pmincol',
     `sminrow', or `smincol' are treated as if they were zero.

 -- Method: window.resize (nlines, ncols)

     Reallocate storage for a curses window to adjust its dimensions to
     the specified values.  If either dimension is larger than the
     current values, the window’s data is filled with blanks that have
     the current background rendition (as set by *note bkgdset(): 1afc.)
     merged into them.

 -- Method: window.scroll ([lines=1])

     Scroll the screen or scrolling region upward by `lines' lines.

 -- Method: window.scrollok (flag)

     Control what happens when the cursor of a window is moved off the
     edge of the window or scrolling region, either as a result of a
     newline action on the bottom line, or typing the last character of
     the last line.  If `flag' is false, the cursor is left on the
     bottom line.  If `flag' is true, the window is scrolled up one
     line.  Note that in order to get the physical scrolling effect on
     the terminal, it is also necessary to call *note idlok(): 1b18.

 -- Method: window.setscrreg (top, bottom)

     Set the scrolling region from line `top' to line `bottom'.  All
     scrolling actions will take place in this region.

 -- Method: window.standend ()

     Turn off the standout attribute.  On some terminals this has the
     side effect of turning off all attributes.

 -- Method: window.standout ()

     Turn on attribute `A_STANDOUT'.

 -- Method: window.subpad (begin_y, begin_x)

 -- Method: window.subpad (nlines, ncols, begin_y, begin_x)

     Return a sub-window, whose upper-left corner is at ‘(begin_y,
     begin_x)’, and whose width/height is `ncols'/`nlines'.

 -- Method: window.subwin (begin_y, begin_x)

 -- Method: window.subwin (nlines, ncols, begin_y, begin_x)

     Return a sub-window, whose upper-left corner is at ‘(begin_y,
     begin_x)’, and whose width/height is `ncols'/`nlines'.

     By default, the sub-window will extend from the specified position
     to the lower right corner of the window.

 -- Method: window.syncdown ()

     Touch each location in the window that has been touched in any of
     its ancestor windows.  This routine is called by *note refresh():
     1b03, so it should almost never be necessary to call it manually.

 -- Method: window.syncok (flag)

     If called with `flag' set to ‘True’, then *note syncup(): 1b39. is
     called automatically whenever there is a change in the window.

 -- Method: window.syncup ()

     Touch all locations in ancestors of the window that have been
     changed in the window.

 -- Method: window.timeout (delay)

     Set blocking or non-blocking read behavior for the window.  If
     `delay' is negative, blocking read is used (which will wait
     indefinitely for input).  If `delay' is zero, then non-blocking
     read is used, and -1 will be returned by *note getch(): 1b10. if no
     input is waiting.  If `delay' is positive, then *note getch():
     1b10. will block for `delay' milliseconds, and return -1 if there
     is still no input at the end of that time.

 -- Method: window.touchline (start, count[, changed])

     Pretend `count' lines have been changed, starting with line
     `start'.  If `changed' is supplied, it specifies whether the
     affected lines are marked as having been changed (`changed'=1) or
     unchanged (`changed'=0).

 -- Method: window.touchwin ()

     Pretend the whole window has been changed, for purposes of drawing
     optimizations.

 -- Method: window.untouchwin ()

     Mark all lines in the window as unchanged since the last call to
     *note refresh(): 1b03.

 -- Method: window.vline (ch, n)

 -- Method: window.vline (y, x, ch, n)

     Display a vertical line starting at ‘(y, x)’ with length `n'
     consisting of the character `ch'.


File: python.info,  Node: Constants<4>,  Prev: Window Objects,  Up: curses --- Terminal handling for character-cell displays

5.16.10.3 Constants
...................

The *note curses: 2b. module defines the following data members:

 -- Data: curses.ERR

     Some curses routines that return an integer, such as ‘getch()’,
     return *note ERR: 1b3f. upon failure.

 -- Data: curses.OK

     Some curses routines that return an integer, such as *note napms():
     1ad5, return *note OK: 1b40. upon success.

 -- Data: curses.version

     A string representing the current version of the module.  Also
     available as ‘__version__’.

Several constants are available to specify character cell attributes:

Attribute              Meaning
                       
-----------------------------------------------------------
                       
‘A_ALTCHARSET’         Alternate character set mode.
                       
                       
‘A_BLINK’              Blink mode.
                       
                       
‘A_BOLD’               Bold mode.
                       
                       
‘A_DIM’                Dim mode.
                       
                       
‘A_NORMAL’             Normal attribute.
                       
                       
‘A_REVERSE’            Reverse background and foreground
                       colors.
                       
                       
‘A_STANDOUT’           Standout mode.
                       
                       
‘A_UNDERLINE’          Underline mode.
                       

Keys are referred to by integer constants with names starting with
‘KEY_’.  The exact keycaps available are system dependent.

Key constant            Key
                        
-------------------------------------------------------------------------
                        
‘KEY_MIN’               Minimum key value
                        
                        
‘KEY_BREAK’             Break key (unreliable)
                        
                        
‘KEY_DOWN’              Down-arrow
                        
                        
‘KEY_UP’                Up-arrow
                        
                        
‘KEY_LEFT’              Left-arrow
                        
                        
‘KEY_RIGHT’             Right-arrow
                        
                        
‘KEY_HOME’              Home key (upward+left arrow)
                        
                        
‘KEY_BACKSPACE’         Backspace (unreliable)
                        
                        
‘KEY_F0’                Function keys.  Up to 64 function keys are
                        supported.
                        
                        
‘KEY_Fn’                Value of function key `n'
                        
                        
‘KEY_DL’                Delete line
                        
                        
‘KEY_IL’                Insert line
                        
                        
‘KEY_DC’                Delete character
                        
                        
‘KEY_IC’                Insert char or enter insert mode
                        
                        
‘KEY_EIC’               Exit insert char mode
                        
                        
‘KEY_CLEAR’             Clear screen
                        
                        
‘KEY_EOS’               Clear to end of screen
                        
                        
‘KEY_EOL’               Clear to end of line
                        
                        
‘KEY_SF’                Scroll 1 line forward
                        
                        
‘KEY_SR’                Scroll 1 line backward (reverse)
                        
                        
‘KEY_NPAGE’             Next page
                        
                        
‘KEY_PPAGE’             Previous page
                        
                        
‘KEY_STAB’              Set tab
                        
                        
‘KEY_CTAB’              Clear tab
                        
                        
‘KEY_CATAB’             Clear all tabs
                        
                        
‘KEY_ENTER’             Enter or send (unreliable)
                        
                        
‘KEY_SRESET’            Soft (partial) reset (unreliable)
                        
                        
‘KEY_RESET’             Reset or hard reset (unreliable)
                        
                        
‘KEY_PRINT’             Print
                        
                        
‘KEY_LL’                Home down or bottom (lower left)
                        
                        
‘KEY_A1’                Upper left of keypad
                        
                        
‘KEY_A3’                Upper right of keypad
                        
                        
‘KEY_B2’                Center of keypad
                        
                        
‘KEY_C1’                Lower left of keypad
                        
                        
‘KEY_C3’                Lower right of keypad
                        
                        
‘KEY_BTAB’              Back tab
                        
                        
‘KEY_BEG’               Beg (beginning)
                        
                        
‘KEY_CANCEL’            Cancel
                        
                        
‘KEY_CLOSE’             Close
                        
                        
‘KEY_COMMAND’           Cmd (command)
                        
                        
‘KEY_COPY’              Copy
                        
                        
‘KEY_CREATE’            Create
                        
                        
‘KEY_END’               End
                        
                        
‘KEY_EXIT’              Exit
                        
                        
‘KEY_FIND’              Find
                        
                        
‘KEY_HELP’              Help
                        
                        
‘KEY_MARK’              Mark
                        
                        
‘KEY_MESSAGE’           Message
                        
                        
‘KEY_MOVE’              Move
                        
                        
‘KEY_NEXT’              Next
                        
                        
‘KEY_OPEN’              Open
                        
                        
‘KEY_OPTIONS’           Options
                        
                        
‘KEY_PREVIOUS’          Prev (previous)
                        
                        
‘KEY_REDO’              Redo
                        
                        
‘KEY_REFERENCE’         Ref (reference)
                        
                        
‘KEY_REFRESH’           Refresh
                        
                        
‘KEY_REPLACE’           Replace
                        
                        
‘KEY_RESTART’           Restart
                        
                        
‘KEY_RESUME’            Resume
                        
                        
‘KEY_SAVE’              Save
                        
                        
‘KEY_SBEG’              Shifted Beg (beginning)
                        
                        
‘KEY_SCANCEL’           Shifted Cancel
                        
                        
‘KEY_SCOMMAND’          Shifted Command
                        
                        
‘KEY_SCOPY’             Shifted Copy
                        
                        
‘KEY_SCREATE’           Shifted Create
                        
                        
‘KEY_SDC’               Shifted Delete char
                        
                        
‘KEY_SDL’               Shifted Delete line
                        
                        
‘KEY_SELECT’            Select
                        
                        
‘KEY_SEND’              Shifted End
                        
                        
‘KEY_SEOL’              Shifted Clear line
                        
                        
‘KEY_SEXIT’             Shifted Dxit
                        
                        
‘KEY_SFIND’             Shifted Find
                        
                        
‘KEY_SHELP’             Shifted Help
                        
                        
‘KEY_SHOME’             Shifted Home
                        
                        
‘KEY_SIC’               Shifted Input
                        
                        
‘KEY_SLEFT’             Shifted Left arrow
                        
                        
‘KEY_SMESSAGE’          Shifted Message
                        
                        
‘KEY_SMOVE’             Shifted Move
                        
                        
‘KEY_SNEXT’             Shifted Next
                        
                        
‘KEY_SOPTIONS’          Shifted Options
                        
                        
‘KEY_SPREVIOUS’         Shifted Prev
                        
                        
‘KEY_SPRINT’            Shifted Print
                        
                        
‘KEY_SREDO’             Shifted Redo
                        
                        
‘KEY_SREPLACE’          Shifted Replace
                        
                        
‘KEY_SRIGHT’            Shifted Right arrow
                        
                        
‘KEY_SRSUME’            Shifted Resume
                        
                        
‘KEY_SSAVE’             Shifted Save
                        
                        
‘KEY_SSUSPEND’          Shifted Suspend
                        
                        
‘KEY_SUNDO’             Shifted Undo
                        
                        
‘KEY_SUSPEND’           Suspend
                        
                        
‘KEY_UNDO’              Undo
                        
                        
‘KEY_MOUSE’             Mouse event has occurred
                        
                        
‘KEY_RESIZE’            Terminal resize event
                        
                        
‘KEY_MAX’               Maximum key value
                        

On VT100s and their software emulations, such as X terminal emulators,
there are normally at least four function keys (‘KEY_F1’, ‘KEY_F2’,
‘KEY_F3’, ‘KEY_F4’) available, and the arrow keys mapped to ‘KEY_UP’,
‘KEY_DOWN’, ‘KEY_LEFT’ and ‘KEY_RIGHT’ in the obvious way.  If your
machine has a PC keyboard, it is safe to expect arrow keys and twelve
function keys (older PC keyboards may have only ten function keys);
also, the following keypad mappings are standard:

Keycap                 Constant
                       
---------------------------------------
                       
‘Insert’               KEY_IC
                       
                       
‘Delete’               KEY_DC
                       
                       
‘Home’                 KEY_HOME
                       
                       
‘End’                  KEY_END
                       
                       
‘Page Up’              KEY_PPAGE
                       
                       
‘Page Down’            KEY_NPAGE
                       

The following table lists characters from the alternate character set.
These are inherited from the VT100 terminal, and will generally be
available on software emulations such as X terminals.  When there is no
graphic available, curses falls back on a crude printable ASCII
approximation.

     Note: These are available only after *note initscr(): 1abe. has
     been called.

ACS code               Meaning
                       
----------------------------------------------------------------------
                       
‘ACS_BBSS’             alternate name for upper right corner
                       
                       
‘ACS_BLOCK’            solid square block
                       
                       
‘ACS_BOARD’            board of squares
                       
                       
‘ACS_BSBS’             alternate name for horizontal line
                       
                       
‘ACS_BSSB’             alternate name for upper left corner
                       
                       
‘ACS_BSSS’             alternate name for top tee
                       
                       
‘ACS_BTEE’             bottom tee
                       
                       
‘ACS_BULLET’           bullet
                       
                       
‘ACS_CKBOARD’          checker board (stipple)
                       
                       
‘ACS_DARROW’           arrow pointing down
                       
                       
‘ACS_DEGREE’           degree symbol
                       
                       
‘ACS_DIAMOND’          diamond
                       
                       
‘ACS_GEQUAL’           greater-than-or-equal-to
                       
                       
‘ACS_HLINE’            horizontal line
                       
                       
‘ACS_LANTERN’          lantern symbol
                       
                       
‘ACS_LARROW’           left arrow
                       
                       
‘ACS_LEQUAL’           less-than-or-equal-to
                       
                       
‘ACS_LLCORNER’         lower left-hand corner
                       
                       
‘ACS_LRCORNER’         lower right-hand corner
                       
                       
‘ACS_LTEE’             left tee
                       
                       
‘ACS_NEQUAL’           not-equal sign
                       
                       
‘ACS_PI’               letter pi
                       
                       
‘ACS_PLMINUS’          plus-or-minus sign
                       
                       
‘ACS_PLUS’             big plus sign
                       
                       
‘ACS_RARROW’           right arrow
                       
                       
‘ACS_RTEE’             right tee
                       
                       
‘ACS_S1’               scan line 1
                       
                       
‘ACS_S3’               scan line 3
                       
                       
‘ACS_S7’               scan line 7
                       
                       
‘ACS_S9’               scan line 9
                       
                       
‘ACS_SBBS’             alternate name for lower right corner
                       
                       
‘ACS_SBSB’             alternate name for vertical line
                       
                       
‘ACS_SBSS’             alternate name for right tee
                       
                       
‘ACS_SSBB’             alternate name for lower left corner
                       
                       
‘ACS_SSBS’             alternate name for bottom tee
                       
                       
‘ACS_SSSB’             alternate name for left tee
                       
                       
‘ACS_SSSS’             alternate name for crossover or big plus
                       
                       
‘ACS_STERLING’         pound sterling
                       
                       
‘ACS_TTEE’             top tee
                       
                       
‘ACS_UARROW’           up arrow
                       
                       
‘ACS_ULCORNER’         upper left corner
                       
                       
‘ACS_URCORNER’         upper right corner
                       
                       
‘ACS_VLINE’            vertical line
                       

The following table lists the predefined colors:

Constant                Color
                        
---------------------------------------------------------
                        
‘COLOR_BLACK’           Black
                        
                        
‘COLOR_BLUE’            Blue
                        
                        
‘COLOR_CYAN’            Cyan (light greenish blue)
                        
                        
‘COLOR_GREEN’           Green
                        
                        
‘COLOR_MAGENTA’         Magenta (purplish red)
                        
                        
‘COLOR_RED’             Red
                        
                        
‘COLOR_WHITE’           White
                        
                        
‘COLOR_YELLOW’          Yellow
                        


File: python.info,  Node: curses textpad --- Text input widget for curses programs,  Next: curses ascii --- Utilities for ASCII characters,  Prev: curses --- Terminal handling for character-cell displays,  Up: Generic Operating System Services

5.16.11 ‘curses.textpad’ — Text input widget for curses programs
----------------------------------------------------------------

The *note curses.textpad: 2e. module provides a *note Textbox: 1b43.
class that handles elementary text editing in a curses window,
supporting a set of keybindings resembling those of Emacs (thus, also of
Netscape Navigator, BBedit 6.x, FrameMaker, and many other programs).
The module also provides a rectangle-drawing function useful for framing
text boxes or for other purposes.

The module *note curses.textpad: 2e. defines the following function:

 -- Function: curses.textpad.rectangle (win, uly, ulx, lry, lrx)

     Draw a rectangle.  The first argument must be a window object; the
     remaining arguments are coordinates relative to that window.  The
     second and third arguments are the y and x coordinates of the upper
     left hand corner of the rectangle to be drawn; the fourth and fifth
     arguments are the y and x coordinates of the lower right hand
     corner.  The rectangle will be drawn using VT100/IBM PC forms
     characters on terminals that make this possible (including xterm
     and most other software terminal emulators).  Otherwise it will be
     drawn with ASCII dashes, vertical bars, and plus signs.

* Menu:

* Textbox objects:: 


File: python.info,  Node: Textbox objects,  Up: curses textpad --- Text input widget for curses programs

5.16.11.1 Textbox objects
.........................

You can instantiate a *note Textbox: 1b43. object as follows:

 -- Class: curses.textpad.Textbox (win)

     Return a textbox widget object.  The `win' argument should be a
     curses ‘WindowObject’ in which the textbox is to be contained.  The
     edit cursor of the textbox is initially located at the upper left
     hand corner of the containing window, with coordinates ‘(0, 0)’.
     The instance’s *note stripspaces: 1b47. flag is initially on.

     *note Textbox: 1b43. objects have the following methods:

      -- Method: edit ([validator])

          This is the entry point you will normally use.  It accepts
          editing keystrokes until one of the termination keystrokes is
          entered.  If `validator' is supplied, it must be a function.
          It will be called for each keystroke entered with the
          keystroke as a parameter; command dispatch is done on the
          result.  This method returns the window contents as a string;
          whether blanks in the window are included is affected by the
          *note stripspaces: 1b47. attribute.

      -- Method: do_command (ch)

          Process a single command keystroke.  Here are the supported
          special keystrokes:

          Keystroke              Action
                                 
          -----------------------------------------------------------------------
                                 
          ‘Control-A’            Go to left edge of window.
                                 
                                 
          ‘Control-B’            Cursor left, wrapping to previous line if
                                 appropriate.
                                 
                                 
          ‘Control-D’            Delete character under cursor.
                                 
                                 
          ‘Control-E’            Go to right edge (stripspaces off) or end of
                                 line (stripspaces on).
                                 
                                 
          ‘Control-F’            Cursor right, wrapping to next line when
                                 appropriate.
                                 
                                 
          ‘Control-G’            Terminate, returning the window contents.
                                 
                                 
          ‘Control-H’            Delete character backward.
                                 
                                 
          ‘Control-J’            Terminate if the window is 1 line, otherwise
                                 insert newline.
                                 
                                 
          ‘Control-K’            If line is blank, delete it, otherwise clear
                                 to end of line.
                                 
                                 
          ‘Control-L’            Refresh screen.
                                 
                                 
          ‘Control-N’            Cursor down; move down one line.
                                 
                                 
          ‘Control-O’            Insert a blank line at cursor location.
                                 
                                 
          ‘Control-P’            Cursor up; move up one line.
                                 

          Move operations do nothing if the cursor is at an edge where
          the movement is not possible.  The following synonyms are
          supported where possible:

          Constant                     Keystroke
                                       
          ----------------------------------------------------
                                       
          ‘KEY_LEFT’                   ‘Control-B’
                                       
                                       
          ‘KEY_RIGHT’                  ‘Control-F’
                                       
                                       
          ‘KEY_UP’                     ‘Control-P’
                                       
                                       
          ‘KEY_DOWN’                   ‘Control-N’
                                       
                                       
          ‘KEY_BACKSPACE’              ‘Control-h’
                                       

          All other keystrokes are treated as a command to insert the
          given character and move right (with line wrapping).

      -- Method: gather ()

          Return the window contents as a string; whether blanks in the
          window are included is affected by the *note stripspaces:
          1b47. member.

      -- Attribute: stripspaces

          This attribute is a flag which controls the interpretation of
          blanks in the window.  When it is on, trailing blanks on each
          line are ignored; any cursor motion that would land the cursor
          on a trailing blank goes to the end of that line instead, and
          trailing blanks are stripped when the window contents are
          gathered.


File: python.info,  Node: curses ascii --- Utilities for ASCII characters,  Next: curses panel --- A panel stack extension for curses,  Prev: curses textpad --- Text input widget for curses programs,  Up: Generic Operating System Services

5.16.12 ‘curses.ascii’ — Utilities for ASCII characters
-------------------------------------------------------

The *note curses.ascii: 2c. module supplies name constants for ASCII
characters and functions to test membership in various ASCII character
classes.  The constants supplied are names for control characters as
follows:

Name               Meaning
                   
----------------------------------------------------------------------
                   
‘NUL’

‘SOH’              Start of heading, console interrupt
                   
                   
‘STX’              Start of text
                   
                   
‘ETX’              End of text
                   
                   
‘EOT’              End of transmission
                   
                   
‘ENQ’              Enquiry, goes with ‘ACK’ flow control
                   
                   
‘ACK’              Acknowledgement
                   
                   
‘BEL’              Bell
                   
                   
‘BS’               Backspace
                   
                   
‘TAB’              Tab
                   
                   
‘HT’               Alias for ‘TAB’: "Horizontal tab"
                   
                   
‘LF’               Line feed
                   
                   
‘NL’               Alias for ‘LF’: "New line"
                   
                   
‘VT’               Vertical tab
                   
                   
‘FF’               Form feed
                   
                   
‘CR’               Carriage return
                   
                   
‘SO’               Shift-out, begin alternate character set
                   
                   
‘SI’               Shift-in, resume default character set
                   
                   
‘DLE’              Data-link escape
                   
                   
‘DC1’              XON, for flow control
                   
                   
‘DC2’              Device control 2, block-mode flow control
                   
                   
‘DC3’              XOFF, for flow control
                   
                   
‘DC4’              Device control 4
                   
                   
‘NAK’              Negative acknowledgement
                   
                   
‘SYN’              Synchronous idle
                   
                   
‘ETB’              End transmission block
                   
                   
‘CAN’              Cancel
                   
                   
‘EM’               End of medium
                   
                   
‘SUB’              Substitute
                   
                   
‘ESC’              Escape
                   
                   
‘FS’               File separator
                   
                   
‘GS’               Group separator
                   
                   
‘RS’               Record separator, block-mode terminator
                   
                   
‘US’               Unit separator
                   
                   
‘SP’               Space
                   
                   
‘DEL’              Delete
                   

Note that many of these have little practical significance in modern
usage.  The mnemonics derive from teleprinter conventions that predate
digital computers.

The module supplies the following functions, patterned on those in the
standard C library:

 -- Function: curses.ascii.isalnum (c)

     Checks for an ASCII alphanumeric character; it is equivalent to
     ‘isalpha(c) or isdigit(c)’.

 -- Function: curses.ascii.isalpha (c)

     Checks for an ASCII alphabetic character; it is equivalent to
     ‘isupper(c) or islower(c)’.

 -- Function: curses.ascii.isascii (c)

     Checks for a character value that fits in the 7-bit ASCII set.

 -- Function: curses.ascii.isblank (c)

     Checks for an ASCII whitespace character.

 -- Function: curses.ascii.iscntrl (c)

     Checks for an ASCII control character (in the range 0x00 to 0x1f).

 -- Function: curses.ascii.isdigit (c)

     Checks for an ASCII decimal digit, ‘'0'’ through ‘'9'’.  This is
     equivalent to ‘c in string.digits’.

 -- Function: curses.ascii.isgraph (c)

     Checks for ASCII any printable character except space.

 -- Function: curses.ascii.islower (c)

     Checks for an ASCII lower-case character.

 -- Function: curses.ascii.isprint (c)

     Checks for any ASCII printable character including space.

 -- Function: curses.ascii.ispunct (c)

     Checks for any printable ASCII character which is not a space or an
     alphanumeric character.

 -- Function: curses.ascii.isspace (c)

     Checks for ASCII white-space characters; space, line feed, carriage
     return, form feed, horizontal tab, vertical tab.

 -- Function: curses.ascii.isupper (c)

     Checks for an ASCII uppercase letter.

 -- Function: curses.ascii.isxdigit (c)

     Checks for an ASCII hexadecimal digit.  This is equivalent to ‘c in
     string.hexdigits’.

 -- Function: curses.ascii.isctrl (c)

     Checks for an ASCII control character (ordinal values 0 to 31).

 -- Function: curses.ascii.ismeta (c)

     Checks for a non-ASCII character (ordinal values 0x80 and above).

These functions accept either integers or strings; when the argument is
a string, it is first converted using the built-in function *note ord():
de6.

Note that all these functions check ordinal bit values derived from the
first character of the string you pass in; they do not actually know
anything about the host machine’s character encoding.  For functions
that know about the character encoding (and handle internationalization
properly) see the *note string: f4. module.

The following two functions take either a single-character string or
integer byte value; they return a value of the same type.

 -- Function: curses.ascii.ascii (c)

     Return the ASCII value corresponding to the low 7 bits of `c'.

 -- Function: curses.ascii.ctrl (c)

     Return the control character corresponding to the given character
     (the character bit value is bitwise-anded with 0x1f).

 -- Function: curses.ascii.alt (c)

     Return the 8-bit character corresponding to the given ASCII
     character (the character bit value is bitwise-ored with 0x80).

The following function takes either a single-character string or integer
value; it returns a string.

 -- Function: curses.ascii.unctrl (c)

     Return a string representation of the ASCII character `c'.  If `c'
     is printable, this string is the character itself.  If the
     character is a control character (0x00-0x1f) the string consists of
     a caret (‘'^'’) followed by the corresponding uppercase letter.  If
     the character is an ASCII delete (0x7f) the string is ‘'^?'’.  If
     the character has its meta bit (0x80) set, the meta bit is
     stripped, the preceding rules applied, and ‘'!'’ prepended to the
     result.

 -- Data: curses.ascii.controlnames

     A 33-element string array that contains the ASCII mnemonics for the
     thirty-two ASCII control characters from 0 (NUL) to 0x1f (US), in
     order, plus the mnemonic ‘SP’ for the space character.


File: python.info,  Node: curses panel --- A panel stack extension for curses,  Next: platform --- Access to underlying platform's identifying data,  Prev: curses ascii --- Utilities for ASCII characters,  Up: Generic Operating System Services

5.16.13 ‘curses.panel’ — A panel stack extension for curses
-----------------------------------------------------------

Panels are windows with the added feature of depth, so they can be
stacked on top of each other, and only the visible portions of each
window will be displayed.  Panels can be added, moved up or down in the
stack, and removed.

* Menu:

* Functions: Functions<3>. 
* Panel Objects:: 


File: python.info,  Node: Functions<3>,  Next: Panel Objects,  Up: curses panel --- A panel stack extension for curses

5.16.13.1 Functions
...................

The module *note curses.panel: 2d. defines the following functions:

 -- Function: curses.panel.bottom_panel ()

     Returns the bottom panel in the panel stack.

 -- Function: curses.panel.new_panel (win)

     Returns a panel object, associating it with the given window `win'.
     Be aware that you need to keep the returned panel object referenced
     explicitly.  If you don’t, the panel object is garbage collected
     and removed from the panel stack.

 -- Function: curses.panel.top_panel ()

     Returns the top panel in the panel stack.

 -- Function: curses.panel.update_panels ()

     Updates the virtual screen after changes in the panel stack.  This
     does not call *note curses.doupdate(): 1ab9, so you’ll have to do
     this yourself.


File: python.info,  Node: Panel Objects,  Prev: Functions<3>,  Up: curses panel --- A panel stack extension for curses

5.16.13.2 Panel Objects
.......................

Panel objects, as returned by *note new_panel(): 1b66. above, are
windows with a stacking order.  There’s always a window associated with
a panel which determines the content, while the panel methods are
responsible for the window’s depth in the panel stack.

Panel objects have the following methods:

 -- Method: Panel.above ()

     Returns the panel above the current panel.

 -- Method: Panel.below ()

     Returns the panel below the current panel.

 -- Method: Panel.bottom ()

     Push the panel to the bottom of the stack.

 -- Method: Panel.hidden ()

     Returns true if the panel is hidden (not visible), false otherwise.

 -- Method: Panel.hide ()

     Hide the panel.  This does not delete the object, it just makes the
     window on screen invisible.

 -- Method: Panel.move (y, x)

     Move the panel to the screen coordinates ‘(y, x)’.

 -- Method: Panel.replace (win)

     Change the window associated with the panel to the window `win'.

 -- Method: Panel.set_userptr (obj)

     Set the panel’s user pointer to `obj'.  This is used to associate
     an arbitrary piece of data with the panel, and can be any Python
     object.

 -- Method: Panel.show ()

     Display the panel (which might have been hidden).

 -- Method: Panel.top ()

     Push panel to the top of the stack.

 -- Method: Panel.userptr ()

     Returns the user pointer for the panel.  This might be any Python
     object.

 -- Method: Panel.window ()

     Returns the window object associated with the panel.


File: python.info,  Node: platform --- Access to underlying platform's identifying data,  Next: errno --- Standard errno system symbols,  Prev: curses panel --- A panel stack extension for curses,  Up: Generic Operating System Services

5.16.14 ‘platform’ — Access to underlying platform’s identifying data
---------------------------------------------------------------------

`Source code:' Lib/platform.py(1)

__________________________________________________________________

     Note: Specific platforms listed alphabetically, with Linux included
     in the Unix section.

* Menu:

* Cross Platform:: 
* Java Platform:: 
* Windows Platform:: 
* Mac OS Platform:: 
* Unix Platforms:: 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/platform.py


File: python.info,  Node: Cross Platform,  Next: Java Platform,  Up: platform --- Access to underlying platform's identifying data

5.16.14.1 Cross Platform
........................

 -- Function: platform.architecture (executable=sys.executable, bits='',
          linkage='')

     Queries the given executable (defaults to the Python interpreter
     binary) for various architecture information.

     Returns a tuple ‘(bits, linkage)’ which contain information about
     the bit architecture and the linkage format used for the
     executable.  Both values are returned as strings.

     Values that cannot be determined are returned as given by the
     parameter presets.  If bits is given as ‘''’, the ‘sizeof(pointer)’
     (or ‘sizeof(long)’ on Python version < 1.5.2) is used as indicator
     for the supported pointer size.

     The function relies on the system’s ‘file’ command to do the actual
     work.  This is available on most if not all Unix platforms and some
     non-Unix platforms and then only if the executable points to the
     Python interpreter.  Reasonable defaults are used when the above
     needs are not met.

          Note: On Mac OS X (and perhaps other platforms), executable
          files may be universal files containing multiple
          architectures.

          To get at the "64-bitness" of the current interpreter, it is
          more reliable to query the *note sys.maxsize: 78c. attribute:

               is_64bits = sys.maxsize > 2**32

 -- Function: platform.machine ()

     Returns the machine type, e.g.  ‘'i386'’.  An empty string is
     returned if the value cannot be determined.

 -- Function: platform.node ()

     Returns the computer’s network name (may not be fully qualified!).
     An empty string is returned if the value cannot be determined.

 -- Function: platform.platform (aliased=0, terse=0)

     Returns a single string identifying the underlying platform with as
     much useful information as possible.

     The output is intended to be `human readable' rather than machine
     parseable.  It may look different on different platforms and this
     is intended.

     If `aliased' is true, the function will use aliases for various
     platforms that report system names which differ from their common
     names, for example SunOS will be reported as Solaris.  The *note
     system_alias(): 1b7e. function is used to implement this.

     Setting `terse' to true causes the function to return only the
     absolute minimum information needed to identify the platform.

 -- Function: platform.processor ()

     Returns the (real) processor name, e.g.  ‘'amdk6'’.

     An empty string is returned if the value cannot be determined.
     Note that many platforms do not provide this information or simply
     return the same value as for *note machine(): 1b7b.  NetBSD does
     this.

 -- Function: platform.python_build ()

     Returns a tuple ‘(buildno, builddate)’ stating the Python build
     number and date as strings.

 -- Function: platform.python_compiler ()

     Returns a string identifying the compiler used for compiling
     Python.

 -- Function: platform.python_branch ()

     Returns a string identifying the Python implementation SCM branch.

 -- Function: platform.python_implementation ()

     Returns a string identifying the Python implementation.  Possible
     return values are: ’CPython’, ’IronPython’, ’Jython’, ’PyPy’.

 -- Function: platform.python_revision ()

     Returns a string identifying the Python implementation SCM
     revision.

 -- Function: platform.python_version ()

     Returns the Python version as string ‘'major.minor.patchlevel'’.

     Note that unlike the Python ‘sys.version’, the returned value will
     always include the patchlevel (it defaults to 0).

 -- Function: platform.python_version_tuple ()

     Returns the Python version as tuple ‘(major, minor, patchlevel)’ of
     strings.

     Note that unlike the Python ‘sys.version’, the returned value will
     always include the patchlevel (it defaults to ‘'0'’).

 -- Function: platform.release ()

     Returns the system’s release, e.g.  ‘'2.2.0'’ or ‘'NT'’ An empty
     string is returned if the value cannot be determined.

 -- Function: platform.system ()

     Returns the system/OS name, e.g.  ‘'Linux'’, ‘'Windows'’, or
     ‘'Java'’.  An empty string is returned if the value cannot be
     determined.

 -- Function: platform.system_alias (system, release, version)

     Returns ‘(system, release, version)’ aliased to common marketing
     names used for some systems.  It also does some reordering of the
     information in some cases where it would otherwise cause confusion.

 -- Function: platform.version ()

     Returns the system’s release version, e.g.  ‘'#3 on degas'’.  An
     empty string is returned if the value cannot be determined.

 -- Function: platform.uname ()

     Fairly portable uname interface.  Returns a *note namedtuple():
     229. containing six attributes: *note system: 1b88, *note node:
     1b7c, *note release: 1b87, *note version: 1b89, *note machine:
     1b7b, and *note processor: 1b7f.

     Note that this adds a sixth attribute (*note processor: 1b7f.) not
     present in the *note os.uname(): 692. result.  Also, the attribute
     names are different for the first two attributes; *note os.uname():
     692. names them ‘sysname’ and ‘nodename’.

     Entries which cannot be determined are set to ‘''’.

     Changed in version 3.3: Result changed from a tuple to a
     namedtuple.


File: python.info,  Node: Java Platform,  Next: Windows Platform,  Prev: Cross Platform,  Up: platform --- Access to underlying platform's identifying data

5.16.14.2 Java Platform
.......................

 -- Function: platform.java_ver (release='', vendor='', vminfo=('', '',
          ''), osinfo=('', '', ''))

     Version interface for Jython.

     Returns a tuple ‘(release, vendor, vminfo, osinfo)’ with `vminfo'
     being a tuple ‘(vm_name, vm_release, vm_vendor)’ and `osinfo' being
     a tuple ‘(os_name, os_version, os_arch)’.  Values which cannot be
     determined are set to the defaults given as parameters (which all
     default to ‘''’).


File: python.info,  Node: Windows Platform,  Next: Mac OS Platform,  Prev: Java Platform,  Up: platform --- Access to underlying platform's identifying data

5.16.14.3 Windows Platform
..........................

 -- Function: platform.win32_ver (release='', version='', csd='',
          ptype='')

     Get additional version information from the Windows Registry and
     return a tuple ‘(release, version, csd, ptype)’ referring to OS
     release, version number, CSD level (service pack) and OS type
     (multi/single processor).

     As a hint: `ptype' is ‘'Uniprocessor Free'’ on single processor NT
     machines and ‘'Multiprocessor Free'’ on multi processor machines.
     The `’Free’' refers to the OS version being free of debugging code.
     It could also state `’Checked’' which means the OS version uses
     debugging code, i.e.  code that checks arguments, ranges, etc.

          Note: This function works best with Mark Hammond’s ‘win32all’
          package installed, but also on Python 2.3 and later (support
          for this was added in Python 2.6).  It obviously only runs on
          Win32 compatible platforms.

* Menu:

* Win95/98 specific:: 


File: python.info,  Node: Win95/98 specific,  Up: Windows Platform

5.16.14.4 Win95/98 specific
...........................

 -- Function: platform.popen (cmd, mode='r', bufsize=-1)

     Portable *note popen(): 728. interface.  Find a working popen
     implementation preferring ‘win32pipe.popen()’.  On Windows NT,
     ‘win32pipe.popen()’ should work; on Windows 9x it hangs due to bugs
     in the MS C library.

     Deprecated since version 3.3: This function is obsolete.  Use the
     *note subprocess: f7. module.  Check especially the *note Replacing
     Older Functions with the subprocess Module: 729. section.


File: python.info,  Node: Mac OS Platform,  Next: Unix Platforms,  Prev: Windows Platform,  Up: platform --- Access to underlying platform's identifying data

5.16.14.5 Mac OS Platform
.........................

 -- Function: platform.mac_ver (release='', versioninfo=('', '', ''),
          machine='')

     Get Mac OS version information and return it as tuple ‘(release,
     versioninfo, machine)’ with `versioninfo' being a tuple ‘(version,
     dev_stage, non_release_version)’.

     Entries which cannot be determined are set to ‘''’.  All tuple
     entries are strings.


File: python.info,  Node: Unix Platforms,  Prev: Mac OS Platform,  Up: platform --- Access to underlying platform's identifying data

5.16.14.6 Unix Platforms
........................

 -- Function: platform.dist (distname='', version='', id='',
          supported_dists=('SuSE', 'debian', 'redhat', 'mandrake', ...))

     This is another name for *note linux_distribution(): 399.

     Deprecated since version 3.5, will be removed in version 3.7.

 -- Function: platform.linux_distribution (distname='', version='',
          id='', supported_dists=('SuSE', 'debian', 'redhat',
          'mandrake', ...), full_distribution_name=1)

     Tries to determine the name of the Linux OS distribution name.

     ‘supported_dists’ may be given to define the set of Linux
     distributions to look for.  It defaults to a list of currently
     supported Linux distributions identified by their release file
     name.

     If ‘full_distribution_name’ is true (default), the full
     distribution read from the OS is returned.  Otherwise the short
     name taken from ‘supported_dists’ is used.

     Returns a tuple ‘(distname,version,id)’ which defaults to the args
     given as parameters.  ‘id’ is the item in parentheses after the
     version number.  It is usually the version codename.

     Deprecated since version 3.5, will be removed in version 3.7.

 -- Function: platform.libc_ver (executable=sys.executable, lib='',
          version='', chunksize=2048)

     Tries to determine the libc version against which the file
     executable (defaults to the Python interpreter) is linked.  Returns
     a tuple of strings ‘(lib, version)’ which default to the given
     parameters in case the lookup fails.

     Note that this function has intimate knowledge of how different
     libc versions add symbols to the executable is probably only usable
     for executables compiled using ‘gcc’.

     The file is read and scanned in chunks of `chunksize' bytes.


File: python.info,  Node: errno --- Standard errno system symbols,  Next: ctypes --- A foreign function library for Python,  Prev: platform --- Access to underlying platform's identifying data,  Up: Generic Operating System Services

5.16.15 ‘errno’ — Standard errno system symbols
-----------------------------------------------

This module makes available standard ‘errno’ system symbols.  The value
of each symbol is the corresponding integer value.  The names and
descriptions are borrowed from ‘linux/include/errno.h’, which should be
pretty all-inclusive.

 -- Data: errno.errorcode

     Dictionary providing a mapping from the errno value to the string
     name in the underlying system.  For instance,
     ‘errno.errorcode[errno.EPERM]’ maps to ‘'EPERM'’.

To translate a numeric error code to an error message, use *note
os.strerror(): 1873.

Of the following list, symbols that are not used on the current platform
are not defined by the module.  The specific list of defined symbols is
available as ‘errno.errorcode.keys()’.  Symbols available can include:

 -- Data: errno.EPERM

     Operation not permitted

 -- Data: errno.ENOENT

     No such file or directory

 -- Data: errno.ESRCH

     No such process

 -- Data: errno.EINTR

     Interrupted system call.

     See also
     ........

     This error is mapped to the exception *note InterruptedError: 1e7.

 -- Data: errno.EIO

     I/O error

 -- Data: errno.ENXIO

     No such device or address

 -- Data: errno.E2BIG

     Arg list too long

 -- Data: errno.ENOEXEC

     Exec format error

 -- Data: errno.EBADF

     Bad file number

 -- Data: errno.ECHILD

     No child processes

 -- Data: errno.EAGAIN

     Try again

 -- Data: errno.ENOMEM

     Out of memory

 -- Data: errno.EACCES

     Permission denied

 -- Data: errno.EFAULT

     Bad address

 -- Data: errno.ENOTBLK

     Block device required

 -- Data: errno.EBUSY

     Device or resource busy

 -- Data: errno.EEXIST

     File exists

 -- Data: errno.EXDEV

     Cross-device link

 -- Data: errno.ENODEV

     No such device

 -- Data: errno.ENOTDIR

     Not a directory

 -- Data: errno.EISDIR

     Is a directory

 -- Data: errno.EINVAL

     Invalid argument

 -- Data: errno.ENFILE

     File table overflow

 -- Data: errno.EMFILE

     Too many open files

 -- Data: errno.ENOTTY

     Not a typewriter

 -- Data: errno.ETXTBSY

     Text file busy

 -- Data: errno.EFBIG

     File too large

 -- Data: errno.ENOSPC

     No space left on device

 -- Data: errno.ESPIPE

     Illegal seek

 -- Data: errno.EROFS

     Read-only file system

 -- Data: errno.EMLINK

     Too many links

 -- Data: errno.EPIPE

     Broken pipe

 -- Data: errno.EDOM

     Math argument out of domain of func

 -- Data: errno.ERANGE

     Math result not representable

 -- Data: errno.EDEADLK

     Resource deadlock would occur

 -- Data: errno.ENAMETOOLONG

     File name too long

 -- Data: errno.ENOLCK

     No record locks available

 -- Data: errno.ENOSYS

     Function not implemented

 -- Data: errno.ENOTEMPTY

     Directory not empty

 -- Data: errno.ELOOP

     Too many symbolic links encountered

 -- Data: errno.EWOULDBLOCK

     Operation would block

 -- Data: errno.ENOMSG

     No message of desired type

 -- Data: errno.EIDRM

     Identifier removed

 -- Data: errno.ECHRNG

     Channel number out of range

 -- Data: errno.EL2NSYNC

     Level 2 not synchronized

 -- Data: errno.EL3HLT

     Level 3 halted

 -- Data: errno.EL3RST

     Level 3 reset

 -- Data: errno.ELNRNG

     Link number out of range

 -- Data: errno.EUNATCH

     Protocol driver not attached

 -- Data: errno.ENOCSI

     No CSI structure available

 -- Data: errno.EL2HLT

     Level 2 halted

 -- Data: errno.EBADE

     Invalid exchange

 -- Data: errno.EBADR

     Invalid request descriptor

 -- Data: errno.EXFULL

     Exchange full

 -- Data: errno.ENOANO

     No anode

 -- Data: errno.EBADRQC

     Invalid request code

 -- Data: errno.EBADSLT

     Invalid slot

 -- Data: errno.EDEADLOCK

     File locking deadlock error

 -- Data: errno.EBFONT

     Bad font file format

 -- Data: errno.ENOSTR

     Device not a stream

 -- Data: errno.ENODATA

     No data available

 -- Data: errno.ETIME

     Timer expired

 -- Data: errno.ENOSR

     Out of streams resources

 -- Data: errno.ENONET

     Machine is not on the network

 -- Data: errno.ENOPKG

     Package not installed

 -- Data: errno.EREMOTE

     Object is remote

 -- Data: errno.ENOLINK

     Link has been severed

 -- Data: errno.EADV

     Advertise error

 -- Data: errno.ESRMNT

     Srmount error

 -- Data: errno.ECOMM

     Communication error on send

 -- Data: errno.EPROTO

     Protocol error

 -- Data: errno.EMULTIHOP

     Multihop attempted

 -- Data: errno.EDOTDOT

     RFS specific error

 -- Data: errno.EBADMSG

     Not a data message

 -- Data: errno.EOVERFLOW

     Value too large for defined data type

 -- Data: errno.ENOTUNIQ

     Name not unique on network

 -- Data: errno.EBADFD

     File descriptor in bad state

 -- Data: errno.EREMCHG

     Remote address changed

 -- Data: errno.ELIBACC

     Can not access a needed shared library

 -- Data: errno.ELIBBAD

     Accessing a corrupted shared library

 -- Data: errno.ELIBSCN

     .lib section in a.out corrupted

 -- Data: errno.ELIBMAX

     Attempting to link in too many shared libraries

 -- Data: errno.ELIBEXEC

     Cannot exec a shared library directly

 -- Data: errno.EILSEQ

     Illegal byte sequence

 -- Data: errno.ERESTART

     Interrupted system call should be restarted

 -- Data: errno.ESTRPIPE

     Streams pipe error

 -- Data: errno.EUSERS

     Too many users

 -- Data: errno.ENOTSOCK

     Socket operation on non-socket

 -- Data: errno.EDESTADDRREQ

     Destination address required

 -- Data: errno.EMSGSIZE

     Message too long

 -- Data: errno.EPROTOTYPE

     Protocol wrong type for socket

 -- Data: errno.ENOPROTOOPT

     Protocol not available

 -- Data: errno.EPROTONOSUPPORT

     Protocol not supported

 -- Data: errno.ESOCKTNOSUPPORT

     Socket type not supported

 -- Data: errno.EOPNOTSUPP

     Operation not supported on transport endpoint

 -- Data: errno.EPFNOSUPPORT

     Protocol family not supported

 -- Data: errno.EAFNOSUPPORT

     Address family not supported by protocol

 -- Data: errno.EADDRINUSE

     Address already in use

 -- Data: errno.EADDRNOTAVAIL

     Cannot assign requested address

 -- Data: errno.ENETDOWN

     Network is down

 -- Data: errno.ENETUNREACH

     Network is unreachable

 -- Data: errno.ENETRESET

     Network dropped connection because of reset

 -- Data: errno.ECONNABORTED

     Software caused connection abort

 -- Data: errno.ECONNRESET

     Connection reset by peer

 -- Data: errno.ENOBUFS

     No buffer space available

 -- Data: errno.EISCONN

     Transport endpoint is already connected

 -- Data: errno.ENOTCONN

     Transport endpoint is not connected

 -- Data: errno.ESHUTDOWN

     Cannot send after transport endpoint shutdown

 -- Data: errno.ETOOMANYREFS

     Too many references: cannot splice

 -- Data: errno.ETIMEDOUT

     Connection timed out

 -- Data: errno.ECONNREFUSED

     Connection refused

 -- Data: errno.EHOSTDOWN

     Host is down

 -- Data: errno.EHOSTUNREACH

     No route to host

 -- Data: errno.EALREADY

     Operation already in progress

 -- Data: errno.EINPROGRESS

     Operation now in progress

 -- Data: errno.ESTALE

     Stale NFS file handle

 -- Data: errno.EUCLEAN

     Structure needs cleaning

 -- Data: errno.ENOTNAM

     Not a XENIX named type file

 -- Data: errno.ENAVAIL

     No XENIX semaphores available

 -- Data: errno.EISNAM

     Is a named type file

 -- Data: errno.EREMOTEIO

     Remote I/O error

 -- Data: errno.EDQUOT

     Quota exceeded


File: python.info,  Node: ctypes --- A foreign function library for Python,  Prev: errno --- Standard errno system symbols,  Up: Generic Operating System Services

5.16.16 ‘ctypes’ — A foreign function library for Python
--------------------------------------------------------

*note ctypes: 2a. is a foreign function library for Python.  It provides
C compatible data types, and allows calling functions in DLLs or shared
libraries.  It can be used to wrap these libraries in pure Python.

* Menu:

* ctypes tutorial:: 
* ctypes reference:: 


File: python.info,  Node: ctypes tutorial,  Next: ctypes reference,  Up: ctypes --- A foreign function library for Python

5.16.16.1 ctypes tutorial
.........................

Note: The code samples in this tutorial use *note doctest: 65. to make
sure that they actually work.  Since some code samples behave
differently under Linux, Windows, or Mac OS X, they contain doctest
directives in comments.

Note: Some code samples reference the ctypes *note c_int: 1c12. type.
This type is an alias for the *note c_long: 1c13. type on 32-bit
systems.  So, you should not be confused if *note c_long: 1c13. is
printed if you would expect *note c_int: 1c12. — they are actually the
same type.

* Menu:

* Loading dynamic link libraries:: 
* Accessing functions from loaded dlls:: 
* Calling functions:: 
* Fundamental data types:: 
* Calling functions, continued: Calling functions continued. 
* Calling functions with your own custom data types:: 
* Specifying the required argument types (function prototypes): Specifying the required argument types function prototypes. 
* Return types:: 
* Passing pointers (or; passing parameters by reference): Passing pointers or passing parameters by reference. 
* Structures and unions:: 
* Structure/union alignment and byte order:: 
* Bit fields in structures and unions:: 
* Arrays:: 
* Pointers:: 
* Type conversions:: 
* Incomplete Types:: 
* Callback functions:: 
* Accessing values exported from dlls:: 
* Surprises:: 
* Variable-sized data types:: 


File: python.info,  Node: Loading dynamic link libraries,  Next: Accessing functions from loaded dlls,  Up: ctypes tutorial

5.16.16.2 Loading dynamic link libraries
........................................

*note ctypes: 2a. exports the `cdll', and on Windows `windll' and
`oledll' objects, for loading dynamic link libraries.

You load libraries by accessing them as attributes of these objects.
`cdll' loads libraries which export functions using the standard ‘cdecl’
calling convention, while `windll' libraries call functions using the
‘stdcall’ calling convention.  `oledll' also uses the ‘stdcall’ calling
convention, and assumes the functions return a Windows ‘HRESULT’ error
code.  The error code is used to automatically raise an *note OSError:
4b6. exception when the function call fails.

Changed in version 3.3: Windows errors used to raise *note WindowsError:
5b2, which is now an alias of *note OSError: 4b6.

Here are some examples for Windows.  Note that ‘msvcrt’ is the MS
standard C library containing most standard C functions, and uses the
cdecl calling convention:

     >>> from ctypes import *
     >>> print(windll.kernel32) # doctest: +WINDOWS
     <WinDLL 'kernel32', handle ... at ...>
     >>> print(cdll.msvcrt) # doctest: +WINDOWS
     <CDLL 'msvcrt', handle ... at ...>
     >>> libc = cdll.msvcrt # doctest: +WINDOWS
     >>>

Windows appends the usual ‘.dll’ file suffix automatically.

     Note: Accessing the standard C library through ‘cdll.msvcrt’ will
     use an outdated version of the library that may be incompatible
     with the one being used by Python.  Where possible, use native
     Python functionality, or else import and use the ‘msvcrt’ module.

On Linux, it is required to specify the filename `including' the
extension to load a library, so attribute access can not be used to load
libraries.  Either the ‘LoadLibrary()’ method of the dll loaders should
be used, or you should load the library by creating an instance of CDLL
by calling the constructor:

     >>> cdll.LoadLibrary("libc.so.6") # doctest: +LINUX
     <CDLL 'libc.so.6', handle ... at ...>
     >>> libc = CDLL("libc.so.6")     # doctest: +LINUX
     >>> libc                         # doctest: +LINUX
     <CDLL 'libc.so.6', handle ... at ...>
     >>>


File: python.info,  Node: Accessing functions from loaded dlls,  Next: Calling functions,  Prev: Loading dynamic link libraries,  Up: ctypes tutorial

5.16.16.3 Accessing functions from loaded dlls
..............................................

Functions are accessed as attributes of dll objects:

     >>> from ctypes import *
     >>> libc.printf
     <_FuncPtr object at 0x...>
     >>> print(windll.kernel32.GetModuleHandleA) # doctest: +WINDOWS
     <_FuncPtr object at 0x...>
     >>> print(windll.kernel32.MyOwnFunction) # doctest: +WINDOWS
     Traceback (most recent call last):
       File "<stdin>", line 1, in ?
       File "ctypes.py", line 239, in __getattr__
         func = _StdcallFuncPtr(name, self)
     AttributeError: function 'MyOwnFunction' not found
     >>>

Note that win32 system dlls like ‘kernel32’ and ‘user32’ often export
ANSI as well as UNICODE versions of a function.  The UNICODE version is
exported with an ‘W’ appended to the name, while the ANSI version is
exported with an ‘A’ appended to the name.  The win32 ‘GetModuleHandle’
function, which returns a `module handle' for a given module name, has
the following C prototype, and a macro is used to expose one of them as
‘GetModuleHandle’ depending on whether UNICODE is defined or not:

     /* ANSI version */
     HMODULE GetModuleHandleA(LPCSTR lpModuleName);
     /* UNICODE version */
     HMODULE GetModuleHandleW(LPCWSTR lpModuleName);

`windll' does not try to select one of them by magic, you must access
the version you need by specifying ‘GetModuleHandleA’ or
‘GetModuleHandleW’ explicitly, and then call it with bytes or string
objects respectively.

Sometimes, dlls export functions with names which aren’t valid Python
identifiers, like ‘"??2@YAPAXI@Z"’.  In this case you have to use *note
getattr(): 781. to retrieve the function:

     >>> getattr(cdll.msvcrt, "??2@YAPAXI@Z") # doctest: +WINDOWS
     <_FuncPtr object at 0x...>
     >>>

On Windows, some dlls export functions not by name but by ordinal.
These functions can be accessed by indexing the dll object with the
ordinal number:

     >>> cdll.kernel32[1] # doctest: +WINDOWS
     <_FuncPtr object at 0x...>
     >>> cdll.kernel32[0] # doctest: +WINDOWS
     Traceback (most recent call last):
       File "<stdin>", line 1, in ?
       File "ctypes.py", line 310, in __getitem__
         func = _StdcallFuncPtr(name, self)
     AttributeError: function ordinal 0 not found
     >>>


File: python.info,  Node: Calling functions,  Next: Fundamental data types,  Prev: Accessing functions from loaded dlls,  Up: ctypes tutorial

5.16.16.4 Calling functions
...........................

You can call these functions like any other Python callable.  This
example uses the ‘time()’ function, which returns system time in seconds
since the Unix epoch, and the ‘GetModuleHandleA()’ function, which
returns a win32 module handle.

This example calls both functions with a NULL pointer (‘None’ should be
used as the NULL pointer):

     >>> print(libc.time(None)) # doctest: +SKIP
     1150640792
     >>> print(hex(windll.kernel32.GetModuleHandleA(None))) # doctest: +WINDOWS
     0x1d000000
     >>>

*note ctypes: 2a. tries to protect you from calling functions with the
wrong number of arguments or the wrong calling convention.
Unfortunately this only works on Windows.  It does this by examining the
stack after the function returns, so although an error is raised the
function `has' been called:

     >>> windll.kernel32.GetModuleHandleA() # doctest: +WINDOWS
     Traceback (most recent call last):
       File "<stdin>", line 1, in ?
     ValueError: Procedure probably called with not enough arguments (4 bytes missing)
     >>> windll.kernel32.GetModuleHandleA(0, 0) # doctest: +WINDOWS
     Traceback (most recent call last):
       File "<stdin>", line 1, in ?
     ValueError: Procedure probably called with too many arguments (4 bytes in excess)
     >>>

The same exception is raised when you call an ‘stdcall’ function with
the ‘cdecl’ calling convention, or vice versa:

     >>> cdll.kernel32.GetModuleHandleA(None) # doctest: +WINDOWS
     Traceback (most recent call last):
       File "<stdin>", line 1, in ?
     ValueError: Procedure probably called with not enough arguments (4 bytes missing)
     >>>

     >>> windll.msvcrt.printf(b"spam") # doctest: +WINDOWS
     Traceback (most recent call last):
       File "<stdin>", line 1, in ?
     ValueError: Procedure probably called with too many arguments (4 bytes in excess)
     >>>

To find out the correct calling convention you have to look into the C
header file or the documentation for the function you want to call.

On Windows, *note ctypes: 2a. uses win32 structured exception handling
to prevent crashes from general protection faults when functions are
called with invalid argument values:

     >>> windll.kernel32.GetModuleHandleA(32) # doctest: +WINDOWS
     Traceback (most recent call last):
       File "<stdin>", line 1, in ?
     OSError: exception: access violation reading 0x00000020
     >>>

There are, however, enough ways to crash Python with *note ctypes: 2a,
so you should be careful anyway.  The *note faulthandler: 7b. module can
be helpful in debugging crashes (e.g.  from segmentation faults produced
by erroneous C library calls).

‘None’, integers, bytes objects and (unicode) strings are the only
native Python objects that can directly be used as parameters in these
function calls.  ‘None’ is passed as a C ‘NULL’ pointer, bytes objects
and strings are passed as pointer to the memory block that contains
their data (‘char *’ or ‘wchar_t *’).  Python integers are passed as the
platforms default C ‘int’ type, their value is masked to fit into the C
type.

Before we move on calling functions with other parameter types, we have
to learn more about *note ctypes: 2a. data types.


File: python.info,  Node: Fundamental data types,  Next: Calling functions continued,  Prev: Calling functions,  Up: ctypes tutorial

5.16.16.5 Fundamental data types
................................

*note ctypes: 2a. defines a number of primitive C compatible data types:

ctypes type                C type                                         Python type
                                                                          
-----------------------------------------------------------------------------------------------------------
                                                                          
*note c_bool: 1c1c.        ‘_Bool’                                        bool (1)
                                                                          
                                                                          
*note c_char: 1c1d.        ‘char’                                         1-character bytes object
                                                                          
                                                                          
*note c_wchar: 1c1e.       ‘wchar_t’                                      1-character string
                                                                          
                                                                          
*note c_byte: 1c1f.        ‘char’                                         int
                                                                          
                                                                          
*note c_ubyte: 1c20.       ‘unsigned char’                                int
                                                                          
                                                                          
*note c_short: 1c21.       ‘short’                                        int
                                                                          
                                                                          
*note c_ushort: 1c22.      ‘unsigned short’                               int
                                                                          
                                                                          
*note c_int: 1c12.         ‘int’                                          int
                                                                          
                                                                          
*note c_uint: 1c23.        ‘unsigned int’                                 int
                                                                          
                                                                          
*note c_long: 1c13.        ‘long’                                         int
                                                                          
                                                                          
*note c_ulong: 1c24.       ‘unsigned long’                                int
                                                                          
                                                                          
*note c_longlong: 1c25.    ‘__int64’ or ‘long long’                       int
                                                                          
                                                                          
*note c_ulonglong: 1c26.   ‘unsigned __int64’ or ‘unsigned long long’     int
                                                                          
                                                                          
*note c_size_t: 1c27.      ‘size_t’                                       int
                                                                          
                                                                          
*note c_ssize_t: 82f.      ‘ssize_t’ or ‘Py_ssize_t’                      int
                                                                          
                                                                          
*note c_float: 1c28.       ‘float’                                        float
                                                                          
                                                                          
*note c_double: 1c29.      ‘double’                                       float
                                                                          
                                                                          
*note c_longdouble: 1c2a.  ‘long double’                                  float
                                                                          
                                                                          
*note c_char_p: 1c2b.      ‘char *’ (NUL terminated)                      bytes object or ‘None’
                                                                          
                                                                          
*note c_wchar_p: 1c2c.     ‘wchar_t *’ (NUL terminated)                   string or ‘None’
                                                                          
                                                                          
*note c_void_p: 1c2d.      ‘void *’                                       int or ‘None’
                                                                          

  1. The constructor accepts any object with a truth value.

All these types can be created by calling them with an optional
initializer of the correct type and value:

     >>> c_int()
     c_long(0)
     >>> c_wchar_p("Hello, World")
     c_wchar_p('Hello, World')
     >>> c_ushort(-3)
     c_ushort(65533)
     >>>

Since these types are mutable, their value can also be changed
afterwards:

     >>> i = c_int(42)
     >>> print(i)
     c_long(42)
     >>> print(i.value)
     42
     >>> i.value = -99
     >>> print(i.value)
     -99
     >>>

Assigning a new value to instances of the pointer types *note c_char_p:
1c2b, *note c_wchar_p: 1c2c, and *note c_void_p: 1c2d. changes the
`memory location' they point to, `not the contents' of the memory block
(of course not, because Python bytes objects are immutable):

     >>> s = "Hello, World"
     >>> c_s = c_wchar_p(s)
     >>> print(c_s)
     c_wchar_p('Hello, World')
     >>> c_s.value = "Hi, there"
     >>> print(c_s)
     c_wchar_p('Hi, there')
     >>> print(s)                 # first object is unchanged
     Hello, World
     >>>

You should be careful, however, not to pass them to functions expecting
pointers to mutable memory.  If you need mutable memory blocks, ctypes
has a *note create_string_buffer(): 1c2e. function which creates these
in various ways.  The current memory block contents can be accessed (or
changed) with the ‘raw’ property; if you want to access it as NUL
terminated string, use the ‘value’ property:

     >>> from ctypes import *
     >>> p = create_string_buffer(3)            # create a 3 byte buffer, initialized to NUL bytes
     >>> print(sizeof(p), repr(p.raw))
     3 b'\x00\x00\x00'
     >>> p = create_string_buffer(b"Hello")     # create a buffer containing a NUL terminated string
     >>> print(sizeof(p), repr(p.raw))
     6 b'Hello\x00'
     >>> print(repr(p.value))
     b'Hello'
     >>> p = create_string_buffer(b"Hello", 10) # create a 10 byte buffer
     >>> print(sizeof(p), repr(p.raw))
     10 b'Hello\x00\x00\x00\x00\x00'
     >>> p.value = b"Hi"
     >>> print(sizeof(p), repr(p.raw))
     10 b'Hi\x00lo\x00\x00\x00\x00\x00'
     >>>

The *note create_string_buffer(): 1c2e. function replaces the
‘c_buffer()’ function (which is still available as an alias), as well as
the ‘c_string()’ function from earlier ctypes releases.  To create a
mutable memory block containing unicode characters of the C type
‘wchar_t’ use the *note create_unicode_buffer(): 1c2f. function.


File: python.info,  Node: Calling functions continued,  Next: Calling functions with your own custom data types,  Prev: Fundamental data types,  Up: ctypes tutorial

5.16.16.6 Calling functions, continued
......................................

Note that printf prints to the real standard output channel, `not' to
*note sys.stdout: 1ba, so these examples will only work at the console
prompt, not from within `IDLE' or `PythonWin':

     >>> printf = libc.printf
     >>> printf(b"Hello, %s\n", b"World!")
     Hello, World!
     14
     >>> printf(b"Hello, %S\n", "World!")
     Hello, World!
     14
     >>> printf(b"%d bottles of beer\n", 42)
     42 bottles of beer
     19
     >>> printf(b"%f bottles of beer\n", 42.5)
     Traceback (most recent call last):
       File "<stdin>", line 1, in ?
     ArgumentError: argument 2: exceptions.TypeError: Don't know how to convert parameter 2
     >>>

As has been mentioned before, all Python types except integers, strings,
and bytes objects have to be wrapped in their corresponding *note
ctypes: 2a. type, so that they can be converted to the required C data
type:

     >>> printf(b"An int %d, a double %f\n", 1234, c_double(3.14))
     An int 1234, a double 3.140000
     31
     >>>


File: python.info,  Node: Calling functions with your own custom data types,  Next: Specifying the required argument types function prototypes,  Prev: Calling functions continued,  Up: ctypes tutorial

5.16.16.7 Calling functions with your own custom data types
...........................................................

You can also customize *note ctypes: 2a. argument conversion to allow
instances of your own classes be used as function arguments.  *note
ctypes: 2a. looks for an ‘_as_parameter_’ attribute and uses this as the
function argument.  Of course, it must be one of integer, string, or
bytes:

     >>> class Bottles:
     ...     def __init__(self, number):
     ...         self._as_parameter_ = number
     ...
     >>> bottles = Bottles(42)
     >>> printf(b"%d bottles of beer\n", bottles)
     42 bottles of beer
     19
     >>>

If you don’t want to store the instance’s data in the ‘_as_parameter_’
instance variable, you could define a *note property: 377. which makes
the attribute available on request.


File: python.info,  Node: Specifying the required argument types function prototypes,  Next: Return types,  Prev: Calling functions with your own custom data types,  Up: ctypes tutorial

5.16.16.8 Specifying the required argument types (function prototypes)
......................................................................

It is possible to specify the required argument types of functions
exported from DLLs by setting the ‘argtypes’ attribute.

‘argtypes’ must be a sequence of C data types (the ‘printf’ function is
probably not a good example here, because it takes a variable number and
different types of parameters depending on the format string, on the
other hand this is quite handy to experiment with this feature):

     >>> printf.argtypes = [c_char_p, c_char_p, c_int, c_double]
     >>> printf(b"String '%s', Int %d, Double %f\n", b"Hi", 10, 2.2)
     String 'Hi', Int 10, Double 2.200000
     37
     >>>

Specifying a format protects against incompatible argument types (just
as a prototype for a C function), and tries to convert the arguments to
valid types:

     >>> printf(b"%d %d %d", 1, 2, 3)
     Traceback (most recent call last):
       File "<stdin>", line 1, in ?
     ArgumentError: argument 2: exceptions.TypeError: wrong type
     >>> printf(b"%s %d %f\n", b"X", 2, 3)
     X 2 3.000000
     13
     >>>

If you have defined your own classes which you pass to function calls,
you have to implement a ‘from_param()’ class method for them to be able
to use them in the ‘argtypes’ sequence.  The ‘from_param()’ class method
receives the Python object passed to the function call, it should do a
typecheck or whatever is needed to make sure this object is acceptable,
and then return the object itself, its ‘_as_parameter_’ attribute, or
whatever you want to pass as the C function argument in this case.
Again, the result should be an integer, string, bytes, a *note ctypes:
2a. instance, or an object with an ‘_as_parameter_’ attribute.


File: python.info,  Node: Return types,  Next: Passing pointers or passing parameters by reference,  Prev: Specifying the required argument types function prototypes,  Up: ctypes tutorial

5.16.16.9 Return types
......................

By default functions are assumed to return the C ‘int’ type.  Other
return types can be specified by setting the ‘restype’ attribute of the
function object.

Here is a more advanced example, it uses the ‘strchr’ function, which
expects a string pointer and a char, and returns a pointer to a string:

     >>> strchr = libc.strchr
     >>> strchr(b"abcdef", ord("d")) # doctest: +SKIP
     8059983
     >>> strchr.restype = c_char_p   # c_char_p is a pointer to a string
     >>> strchr(b"abcdef", ord("d"))
     b'def'
     >>> print(strchr(b"abcdef", ord("x")))
     None
     >>>

If you want to avoid the ‘ord("x")’ calls above, you can set the
‘argtypes’ attribute, and the second argument will be converted from a
single character Python bytes object into a C char:

     >>> strchr.restype = c_char_p
     >>> strchr.argtypes = [c_char_p, c_char]
     >>> strchr(b"abcdef", b"d")
     'def'
     >>> strchr(b"abcdef", b"def")
     Traceback (most recent call last):
       File "<stdin>", line 1, in ?
     ArgumentError: argument 2: exceptions.TypeError: one character string expected
     >>> print(strchr(b"abcdef", b"x"))
     None
     >>> strchr(b"abcdef", b"d")
     'def'
     >>>

You can also use a callable Python object (a function or a class for
example) as the ‘restype’ attribute, if the foreign function returns an
integer.  The callable will be called with the `integer' the C function
returns, and the result of this call will be used as the result of your
function call.  This is useful to check for error return values and
automatically raise an exception:

     >>> GetModuleHandle = windll.kernel32.GetModuleHandleA # doctest: +WINDOWS
     >>> def ValidHandle(value):
     ...     if value == 0:
     ...         raise WinError()
     ...     return value
     ...
     >>>
     >>> GetModuleHandle.restype = ValidHandle # doctest: +WINDOWS
     >>> GetModuleHandle(None) # doctest: +WINDOWS
     486539264
     >>> GetModuleHandle("something silly") # doctest: +WINDOWS
     Traceback (most recent call last):
       File "<stdin>", line 1, in ?
       File "<stdin>", line 3, in ValidHandle
     OSError: [Errno 126] The specified module could not be found.
     >>>

‘WinError’ is a function which will call Windows ‘FormatMessage()’ api
to get the string representation of an error code, and `returns' an
exception.  ‘WinError’ takes an optional error code parameter, if no one
is used, it calls *note GetLastError(): 1c38. to retrieve it.

Please note that a much more powerful error checking mechanism is
available through the ‘errcheck’ attribute; see the reference manual for
details.


File: python.info,  Node: Passing pointers or passing parameters by reference,  Next: Structures and unions,  Prev: Return types,  Up: ctypes tutorial

5.16.16.10 Passing pointers (or: passing parameters by reference)
.................................................................

Sometimes a C api function expects a `pointer' to a data type as
parameter, probably to write into the corresponding location, or if the
data is too large to be passed by value.  This is also known as `passing
parameters by reference'.

*note ctypes: 2a. exports the *note byref(): 1c3b. function which is
used to pass parameters by reference.  The same effect can be achieved
with the *note pointer(): 1c3c. function, although *note pointer():
1c3c. does a lot more work since it constructs a real pointer object, so
it is faster to use *note byref(): 1c3b. if you don’t need the pointer
object in Python itself:

     >>> i = c_int()
     >>> f = c_float()
     >>> s = create_string_buffer(b'\000' * 32)
     >>> print(i.value, f.value, repr(s.value))
     0 0.0 b''
     >>> libc.sscanf(b"1 3.14 Hello", b"%d %f %s",
     ...             byref(i), byref(f), s)
     3
     >>> print(i.value, f.value, repr(s.value))
     1 3.1400001049 b'Hello'
     >>>


File: python.info,  Node: Structures and unions,  Next: Structure/union alignment and byte order,  Prev: Passing pointers or passing parameters by reference,  Up: ctypes tutorial

5.16.16.11 Structures and unions
................................

Structures and unions must derive from the *note Structure: 1c3f. and
*note Union: 1c40. base classes which are defined in the *note ctypes:
2a. module.  Each subclass must define a ‘_fields_’ attribute.
‘_fields_’ must be a list of `2-tuples', containing a `field name' and a
`field type'.

The field type must be a *note ctypes: 2a. type like *note c_int: 1c12,
or any other derived *note ctypes: 2a. type: structure, union, array,
pointer.

Here is a simple example of a POINT structure, which contains two
integers named `x' and `y', and also shows how to initialize a structure
in the constructor:

     >>> from ctypes import *
     >>> class POINT(Structure):
     ...     _fields_ = [("x", c_int),
     ...                 ("y", c_int)]
     ...
     >>> point = POINT(10, 20)
     >>> print(point.x, point.y)
     10 20
     >>> point = POINT(y=5)
     >>> print(point.x, point.y)
     0 5
     >>> POINT(1, 2, 3)
     Traceback (most recent call last):
       File "<stdin>", line 1, in ?
     ValueError: too many initializers
     >>>

You can, however, build much more complicated structures.  A structure
can itself contain other structures by using a structure as a field
type.

Here is a RECT structure which contains two POINTs named `upperleft' and
`lowerright':

     >>> class RECT(Structure):
     ...     _fields_ = [("upperleft", POINT),
     ...                 ("lowerright", POINT)]
     ...
     >>> rc = RECT(point)
     >>> print(rc.upperleft.x, rc.upperleft.y)
     0 5
     >>> print(rc.lowerright.x, rc.lowerright.y)
     0 0
     >>>

Nested structures can also be initialized in the constructor in several
ways:

     >>> r = RECT(POINT(1, 2), POINT(3, 4))
     >>> r = RECT((1, 2), (3, 4))

Field *note descriptor: 14d4.s can be retrieved from the `class', they
are useful for debugging because they can provide useful information:

     >>> print(POINT.x)
     <Field type=c_long, ofs=0, size=4>
     >>> print(POINT.y)
     <Field type=c_long, ofs=4, size=4>
     >>>
     Warning: *note ctypes: 2a. does not support passing unions or
     structures with bit-fields to functions by value.  While this may
     work on 32-bit x86, it’s not guaranteed by the library to work in
     the general case.  Unions and structures with bit-fields should
     always be passed to functions by pointer.


File: python.info,  Node: Structure/union alignment and byte order,  Next: Bit fields in structures and unions,  Prev: Structures and unions,  Up: ctypes tutorial

5.16.16.12 Structure/union alignment and byte order
...................................................

By default, Structure and Union fields are aligned in the same way the C
compiler does it.  It is possible to override this behavior be
specifying a ‘_pack_’ class attribute in the subclass definition.  This
must be set to a positive integer and specifies the maximum alignment
for the fields.  This is what ‘#pragma pack(n)’ also does in MSVC.

*note ctypes: 2a. uses the native byte order for Structures and Unions.
To build structures with non-native byte order, you can use one of the
*note BigEndianStructure: 1c43, *note LittleEndianStructure: 1c44,
‘BigEndianUnion’, and ‘LittleEndianUnion’ base classes.  These classes
cannot contain pointer fields.


File: python.info,  Node: Bit fields in structures and unions,  Next: Arrays,  Prev: Structure/union alignment and byte order,  Up: ctypes tutorial

5.16.16.13 Bit fields in structures and unions
..............................................

It is possible to create structures and unions containing bit fields.
Bit fields are only possible for integer fields, the bit width is
specified as the third item in the ‘_fields_’ tuples:

     >>> class Int(Structure):
     ...     _fields_ = [("first_16", c_int, 16),
     ...                 ("second_16", c_int, 16)]
     ...
     >>> print(Int.first_16)
     <Field type=c_long, ofs=0:0, bits=16>
     >>> print(Int.second_16)
     <Field type=c_long, ofs=0:16, bits=16>
     >>>


File: python.info,  Node: Arrays,  Next: Pointers,  Prev: Bit fields in structures and unions,  Up: ctypes tutorial

5.16.16.14 Arrays
.................

Arrays are sequences, containing a fixed number of instances of the same
type.

The recommended way to create array types is by multiplying a data type
with a positive integer:

     TenPointsArrayType = POINT * 10

Here is an example of a somewhat artificial data type, a structure
containing 4 POINTs among other stuff:

     >>> from ctypes import *
     >>> class POINT(Structure):
     ...    _fields_ = ("x", c_int), ("y", c_int)
     ...
     >>> class MyStruct(Structure):
     ...    _fields_ = [("a", c_int),
     ...                ("b", c_float),
     ...                ("point_array", POINT * 4)]
     >>>
     >>> print(len(MyStruct().point_array))
     4
     >>>

Instances are created in the usual way, by calling the class:

     arr = TenPointsArrayType()
     for pt in arr:
         print(pt.x, pt.y)

The above code print a series of ‘0 0’ lines, because the array contents
is initialized to zeros.

Initializers of the correct type can also be specified:

     >>> from ctypes import *
     >>> TenIntegers = c_int * 10
     >>> ii = TenIntegers(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
     >>> print(ii)
     <c_long_Array_10 object at 0x...>
     >>> for i in ii: print(i, end=" ")
     ...
     1 2 3 4 5 6 7 8 9 10
     >>>


File: python.info,  Node: Pointers,  Next: Type conversions,  Prev: Arrays,  Up: ctypes tutorial

5.16.16.15 Pointers
...................

Pointer instances are created by calling the *note pointer(): 1c3c.
function on a *note ctypes: 2a. type:

     >>> from ctypes import *
     >>> i = c_int(42)
     >>> pi = pointer(i)
     >>>

Pointer instances have a *note contents: 1c4b. attribute which returns
the object to which the pointer points, the ‘i’ object above:

     >>> pi.contents
     c_long(42)
     >>>

Note that *note ctypes: 2a. does not have OOR (original object return),
it constructs a new, equivalent object each time you retrieve an
attribute:

     >>> pi.contents is i
     False
     >>> pi.contents is pi.contents
     False
     >>>

Assigning another *note c_int: 1c12. instance to the pointer’s contents
attribute would cause the pointer to point to the memory location where
this is stored:

     >>> i = c_int(99)
     >>> pi.contents = i
     >>> pi.contents
     c_long(99)
     >>>

Pointer instances can also be indexed with integers:

     >>> pi[0]
     99
     >>>

Assigning to an integer index changes the pointed to value:

     >>> print(i)
     c_long(99)
     >>> pi[0] = 22
     >>> print(i)
     c_long(22)
     >>>

It is also possible to use indexes different from 0, but you must know
what you’re doing, just as in C: You can access or change arbitrary
memory locations.  Generally you only use this feature if you receive a
pointer from a C function, and you `know' that the pointer actually
points to an array instead of a single item.

Behind the scenes, the *note pointer(): 1c3c. function does more than
simply create pointer instances, it has to create pointer `types' first.
This is done with the *note POINTER(): 1c4c. function, which accepts any
*note ctypes: 2a. type, and returns a new type:

     >>> PI = POINTER(c_int)
     >>> PI
     <class 'ctypes.LP_c_long'>
     >>> PI(42)
     Traceback (most recent call last):
       File "<stdin>", line 1, in ?
     TypeError: expected c_long instead of int
     >>> PI(c_int(42))
     <ctypes.LP_c_long object at 0x...>
     >>>

Calling the pointer type without an argument creates a ‘NULL’ pointer.
‘NULL’ pointers have a ‘False’ boolean value:

     >>> null_ptr = POINTER(c_int)()
     >>> print(bool(null_ptr))
     False
     >>>

*note ctypes: 2a. checks for ‘NULL’ when dereferencing pointers (but
dereferencing invalid non-‘NULL’ pointers would crash Python):

     >>> null_ptr[0]
     Traceback (most recent call last):
         ....
     ValueError: NULL pointer access
     >>>

     >>> null_ptr[0] = 1234
     Traceback (most recent call last):
         ....
     ValueError: NULL pointer access
     >>>


File: python.info,  Node: Type conversions,  Next: Incomplete Types,  Prev: Pointers,  Up: ctypes tutorial

5.16.16.16 Type conversions
...........................

Usually, ctypes does strict type checking.  This means, if you have
‘POINTER(c_int)’ in the ‘argtypes’ list of a function or as the type of
a member field in a structure definition, only instances of exactly the
same type are accepted.  There are some exceptions to this rule, where
ctypes accepts other objects.  For example, you can pass compatible
array instances instead of pointer types.  So, for ‘POINTER(c_int)’,
ctypes accepts an array of c_int:

     >>> class Bar(Structure):
     ...     _fields_ = [("count", c_int), ("values", POINTER(c_int))]
     ...
     >>> bar = Bar()
     >>> bar.values = (c_int * 3)(1, 2, 3)
     >>> bar.count = 3
     >>> for i in range(bar.count):
     ...     print(bar.values[i])
     ...
     1
     2
     3
     >>>

In addition, if a function argument is explicitly declared to be a
pointer type (such as ‘POINTER(c_int)’) in ‘argtypes’, an object of the
pointed type (‘c_int’ in this case) can be passed to the function.
ctypes will apply the required *note byref(): 1c3b. conversion in this
case automatically.

To set a POINTER type field to ‘NULL’, you can assign ‘None’:

     >>> bar.values = None
     >>>

Sometimes you have instances of incompatible types.  In C, you can cast
one type into another type.  *note ctypes: 2a. provides a *note cast():
1c4f. function which can be used in the same way.  The ‘Bar’ structure
defined above accepts ‘POINTER(c_int)’ pointers or *note c_int: 1c12.
arrays for its ‘values’ field, but not instances of other types:

     >>> bar.values = (c_byte * 4)()
     Traceback (most recent call last):
       File "<stdin>", line 1, in ?
     TypeError: incompatible types, c_byte_Array_4 instance instead of LP_c_long instance
     >>>

For these cases, the *note cast(): 1c4f. function is handy.

The *note cast(): 1c4f. function can be used to cast a ctypes instance
into a pointer to a different ctypes data type.  *note cast(): 1c4f.
takes two parameters, a ctypes object that is or can be converted to a
pointer of some kind, and a ctypes pointer type.  It returns an instance
of the second argument, which references the same memory block as the
first argument:

     >>> a = (c_byte * 4)()
     >>> cast(a, POINTER(c_int))
     <ctypes.LP_c_long object at ...>
     >>>

So, *note cast(): 1c4f. can be used to assign to the ‘values’ field of
‘Bar’ the structure:

     >>> bar = Bar()
     >>> bar.values = cast((c_byte * 4)(), POINTER(c_int))
     >>> print(bar.values[0])
     0
     >>>


File: python.info,  Node: Incomplete Types,  Next: Callback functions,  Prev: Type conversions,  Up: ctypes tutorial

5.16.16.17 Incomplete Types
...........................

`Incomplete Types' are structures, unions or arrays whose members are
not yet specified.  In C, they are specified by forward declarations,
which are defined later:

     struct cell; /* forward declaration */

     struct cell {
         char *name;
         struct cell *next;
     };

The straightforward translation into ctypes code would be this, but it
does not work:

     >>> class cell(Structure):
     ...     _fields_ = [("name", c_char_p),
     ...                 ("next", POINTER(cell))]
     ...
     Traceback (most recent call last):
       File "<stdin>", line 1, in ?
       File "<stdin>", line 2, in cell
     NameError: name 'cell' is not defined
     >>>

because the new ‘class cell’ is not available in the class statement
itself.  In *note ctypes: 2a, we can define the ‘cell’ class and set the
‘_fields_’ attribute later, after the class statement:

     >>> from ctypes import *
     >>> class cell(Structure):
     ...     pass
     ...
     >>> cell._fields_ = [("name", c_char_p),
     ...                  ("next", POINTER(cell))]
     >>>

Lets try it.  We create two instances of ‘cell’, and let them point to
each other, and finally follow the pointer chain a few times:

     >>> c1 = cell()
     >>> c1.name = "foo"
     >>> c2 = cell()
     >>> c2.name = "bar"
     >>> c1.next = pointer(c2)
     >>> c2.next = pointer(c1)
     >>> p = c1
     >>> for i in range(8):
     ...     print(p.name, end=" ")
     ...     p = p.next[0]
     ...
     foo bar foo bar foo bar foo bar
     >>>


File: python.info,  Node: Callback functions,  Next: Accessing values exported from dlls,  Prev: Incomplete Types,  Up: ctypes tutorial

5.16.16.18 Callback functions
.............................

*note ctypes: 2a. allows creating C callable function pointers from
Python callables.  These are sometimes called `callback functions'.

First, you must create a class for the callback function.  The class
knows the calling convention, the return type, and the number and types
of arguments this function will receive.

The *note CFUNCTYPE(): 1c54. factory function creates types for callback
functions using the ‘cdecl’ calling convention.  On Windows, the *note
WINFUNCTYPE(): 1c55. factory function creates types for callback
functions using the ‘stdcall’ calling convention.

Both of these factory functions are called with the result type as first
argument, and the callback functions expected argument types as the
remaining arguments.

I will present an example here which uses the standard C library’s
‘qsort()’ function, that is used to sort items with the help of a
callback function.  ‘qsort()’ will be used to sort an array of integers:

     >>> IntArray5 = c_int * 5
     >>> ia = IntArray5(5, 1, 7, 33, 99)
     >>> qsort = libc.qsort
     >>> qsort.restype = None
     >>>

‘qsort()’ must be called with a pointer to the data to sort, the number
of items in the data array, the size of one item, and a pointer to the
comparison function, the callback.  The callback will then be called
with two pointers to items, and it must return a negative integer if the
first item is smaller than the second, a zero if they are equal, and a
positive integer otherwise.

So our callback function receives pointers to integers, and must return
an integer.  First we create the ‘type’ for the callback function:

     >>> CMPFUNC = CFUNCTYPE(c_int, POINTER(c_int), POINTER(c_int))
     >>>

To get started, here is a simple callback that shows the values it gets
passed:

     >>> def py_cmp_func(a, b):
     ...     print("py_cmp_func", a[0], b[0])
     ...     return 0
     ...
     >>> cmp_func = CMPFUNC(py_cmp_func)
     >>>

The result:

     >>> qsort(ia, len(ia), sizeof(c_int), cmp_func) # doctest: +LINUX
     py_cmp_func 5 1
     py_cmp_func 33 99
     py_cmp_func 7 33
     py_cmp_func 5 7
     py_cmp_func 1 7
     >>>

Now we can actually compare the two items and return a useful result:

     >>> def py_cmp_func(a, b):
     ...     print("py_cmp_func", a[0], b[0])
     ...     return a[0] - b[0]
     ...
     >>>
     >>> qsort(ia, len(ia), sizeof(c_int), CMPFUNC(py_cmp_func)) # doctest: +LINUX
     py_cmp_func 5 1
     py_cmp_func 33 99
     py_cmp_func 7 33
     py_cmp_func 1 7
     py_cmp_func 5 7
     >>>

As we can easily check, our array is sorted now:

     >>> for i in ia: print(i, end=" ")
     ...
     1 5 7 33 99
     >>>

     Note: Make sure you keep references to *note CFUNCTYPE(): 1c54.
     objects as long as they are used from C code.  *note ctypes: 2a.
     doesn’t, and if you don’t, they may be garbage collected, crashing
     your program when a callback is made.

     Also, note that if the callback function is called in a thread
     created outside of Python’s control (e.g.  by the foreign code that
     calls the callback), ctypes creates a new dummy Python thread on
     every invocation.  This behavior is correct for most purposes, but
     it means that values stored with *note threading.local: 1c56. will
     `not' survive across different callbacks, even when those calls are
     made from the same C thread.


File: python.info,  Node: Accessing values exported from dlls,  Next: Surprises,  Prev: Callback functions,  Up: ctypes tutorial

5.16.16.19 Accessing values exported from dlls
..............................................

Some shared libraries not only export functions, they also export
variables.  An example in the Python library itself is the
‘Py_OptimizeFlag’, an integer set to 0, 1, or 2, depending on the *note
-O: 221. or *note -OO: 222. flag given on startup.

*note ctypes: 2a. can access values like this with the ‘in_dll()’ class
methods of the type.  `pythonapi' is a predefined symbol giving access
to the Python C api:

     >>> opt_flag = c_int.in_dll(pythonapi, "Py_OptimizeFlag")
     >>> print(opt_flag)
     c_long(0)
     >>>

If the interpreter would have been started with *note -O: 221, the
sample would have printed ‘c_long(1)’, or ‘c_long(2)’ if *note -OO: 222.
would have been specified.

An extended example which also demonstrates the use of pointers accesses
the *note PyImport_FrozenModules: 1c59. pointer exported by Python.

Quoting the docs for that value:

     This pointer is initialized to point to an array of ‘struct
     _frozen’ records, terminated by one whose members are all `NULL' or
     zero.  When a frozen module is imported, it is searched in this
     table.  Third-party code could play tricks with this to provide a
     dynamically created collection of frozen modules.

So manipulating this pointer could even prove useful.  To restrict the
example size, we show only how this table can be read with *note ctypes:
2a.:

     >>> from ctypes import *
     >>>
     >>> class struct_frozen(Structure):
     ...     _fields_ = [("name", c_char_p),
     ...                 ("code", POINTER(c_ubyte)),
     ...                 ("size", c_int)]
     ...
     >>>

We have defined the ‘struct _frozen’ data type, so we can get the
pointer to the table:

     >>> FrozenTable = POINTER(struct_frozen)
     >>> table = FrozenTable.in_dll(pythonapi, "PyImport_FrozenModules")
     >>>

Since ‘table’ is a ‘pointer’ to the array of ‘struct_frozen’ records, we
can iterate over it, but we just have to make sure that our loop
terminates, because pointers have no size.  Sooner or later it would
probably crash with an access violation or whatever, so it’s better to
break out of the loop when we hit the NULL entry:

     >>> for item in table:
     ...    print(item.name, item.size)
     ...    if item.name is None:
     ...        break
     ...
     __hello__ 104
     __phello__ -104
     __phello__.spam 104
     None 0
     >>>

The fact that standard Python has a frozen module and a frozen package
(indicated by the negative size member) is not well known, it is only
used for testing.  Try it out with ‘import __hello__’ for example.


File: python.info,  Node: Surprises,  Next: Variable-sized data types,  Prev: Accessing values exported from dlls,  Up: ctypes tutorial

5.16.16.20 Surprises
....................

There are some edges in *note ctypes: 2a. where you might expect
something other than what actually happens.

Consider the following example:

     >>> from ctypes import *
     >>> class POINT(Structure):
     ...     _fields_ = ("x", c_int), ("y", c_int)
     ...
     >>> class RECT(Structure):
     ...     _fields_ = ("a", POINT), ("b", POINT)
     ...
     >>> p1 = POINT(1, 2)
     >>> p2 = POINT(3, 4)
     >>> rc = RECT(p1, p2)
     >>> print(rc.a.x, rc.a.y, rc.b.x, rc.b.y)
     1 2 3 4
     >>> # now swap the two points
     >>> rc.a, rc.b = rc.b, rc.a
     >>> print(rc.a.x, rc.a.y, rc.b.x, rc.b.y)
     3 4 3 4
     >>>

Hm.  We certainly expected the last statement to print ‘3 4 1 2’.  What
happened?  Here are the steps of the ‘rc.a, rc.b = rc.b, rc.a’ line
above:

     >>> temp0, temp1 = rc.b, rc.a
     >>> rc.a = temp0
     >>> rc.b = temp1
     >>>

Note that ‘temp0’ and ‘temp1’ are objects still using the internal
buffer of the ‘rc’ object above.  So executing ‘rc.a = temp0’ copies the
buffer contents of ‘temp0’ into ‘rc’ ’s buffer.  This, in turn, changes
the contents of ‘temp1’.  So, the last assignment ‘rc.b = temp1’,
doesn’t have the expected effect.

Keep in mind that retrieving sub-objects from Structure, Unions, and
Arrays doesn’t `copy' the sub-object, instead it retrieves a wrapper
object accessing the root-object’s underlying buffer.

Another example that may behave different from what one would expect is
this:

     >>> s = c_char_p()
     >>> s.value = "abc def ghi"
     >>> s.value
     'abc def ghi'
     >>> s.value is s.value
     False
     >>>

Why is it printing ‘False’?  ctypes instances are objects containing a
memory block plus some *note descriptor: 14d4.s accessing the contents
of the memory.  Storing a Python object in the memory block does not
store the object itself, instead the ‘contents’ of the object is stored.
Accessing the contents again constructs a new Python object each time!


File: python.info,  Node: Variable-sized data types,  Prev: Surprises,  Up: ctypes tutorial

5.16.16.21 Variable-sized data types
....................................

*note ctypes: 2a. provides some support for variable-sized arrays and
structures.

The *note resize(): 1c5e. function can be used to resize the memory
buffer of an existing ctypes object.  The function takes the object as
first argument, and the requested size in bytes as the second argument.
The memory block cannot be made smaller than the natural memory block
specified by the objects type, a *note ValueError: 19c. is raised if
this is tried:

     >>> short_array = (c_short * 4)()
     >>> print(sizeof(short_array))
     8
     >>> resize(short_array, 4)
     Traceback (most recent call last):
         ...
     ValueError: minimum size is 8
     >>> resize(short_array, 32)
     >>> sizeof(short_array)
     32
     >>> sizeof(type(short_array))
     8
     >>>

This is nice and fine, but how would one access the additional elements
contained in this array?  Since the type still only knows about 4
elements, we get errors accessing other elements:

     >>> short_array[:]
     [0, 0, 0, 0]
     >>> short_array[7]
     Traceback (most recent call last):
         ...
     IndexError: invalid index
     >>>

Another way to use variable-sized data types with *note ctypes: 2a. is
to use the dynamic nature of Python, and (re-)define the data type after
the required size is already known, on a case by case basis.


File: python.info,  Node: ctypes reference,  Prev: ctypes tutorial,  Up: ctypes --- A foreign function library for Python

5.16.16.22 ctypes reference
...........................

* Menu:

* Finding shared libraries:: 
* Loading shared libraries:: 
* Foreign functions:: 
* Function prototypes:: 
* Utility functions:: 
* Data types:: 
* Fundamental data types: Fundamental data types<2>. 
* Structured data types:: 
* Arrays and pointers:: 


File: python.info,  Node: Finding shared libraries,  Next: Loading shared libraries,  Up: ctypes reference

5.16.16.23 Finding shared libraries
...................................

When programming in a compiled language, shared libraries are accessed
when compiling/linking a program, and when the program is run.

The purpose of the ‘find_library()’ function is to locate a library in a
way similar to what the compiler does (on platforms with several
versions of a shared library the most recent should be loaded), while
the ctypes library loaders act like when a program is run, and call the
runtime loader directly.

The ‘ctypes.util’ module provides a function which can help to determine
the library to load.

 -- Data: ctypes.util.find_library (name)

     Try to find a library and return a pathname.  `name' is the library
     name without any prefix like `lib', suffix like ‘.so’, ‘.dylib’ or
     version number (this is the form used for the posix linker option
     *note -l: 1784.).  If no library can be found, returns ‘None’.

The exact functionality is system dependent.

On Linux, ‘find_library()’ tries to run external programs
(‘/sbin/ldconfig’, ‘gcc’, and ‘objdump’) to find the library file.  It
returns the filename of the library file.  Here are some examples:

     >>> from ctypes.util import find_library
     >>> find_library("m")
     'libm.so.6'
     >>> find_library("c")
     'libc.so.6'
     >>> find_library("bz2")
     'libbz2.so.1.0'
     >>>

On OS X, ‘find_library()’ tries several predefined naming schemes and
paths to locate the library, and returns a full pathname if successful:

     >>> from ctypes.util import find_library
     >>> find_library("c")
     '/usr/lib/libc.dylib'
     >>> find_library("m")
     '/usr/lib/libm.dylib'
     >>> find_library("bz2")
     '/usr/lib/libbz2.dylib'
     >>> find_library("AGL")
     '/System/Library/Frameworks/AGL.framework/AGL'
     >>>

On Windows, ‘find_library()’ searches along the system search path, and
returns the full pathname, but since there is no predefined naming
scheme a call like ‘find_library("c")’ will fail and return ‘None’.

If wrapping a shared library with *note ctypes: 2a, it `may' be better
to determine the shared library name at development time, and hardcode
that into the wrapper module instead of using ‘find_library()’ to locate
the library at runtime.


File: python.info,  Node: Loading shared libraries,  Next: Foreign functions,  Prev: Finding shared libraries,  Up: ctypes reference

5.16.16.24 Loading shared libraries
...................................

There are several ways to load shared libraries into the Python process.
One way is to instantiate one of the following classes:

 -- Class: ctypes.CDLL (name, mode=DEFAULT_MODE, handle=None,
          use_errno=False, use_last_error=False)

     Instances of this class represent loaded shared libraries.
     Functions in these libraries use the standard C calling convention,
     and are assumed to return ‘int’.

 -- Class: ctypes.OleDLL (name, mode=DEFAULT_MODE, handle=None,
          use_errno=False, use_last_error=False)

     Windows only: Instances of this class represent loaded shared
     libraries, functions in these libraries use the ‘stdcall’ calling
     convention, and are assumed to return the windows specific *note
     HRESULT: 1c67. code.  *note HRESULT: 1c67. values contain
     information specifying whether the function call failed or
     succeeded, together with additional error code.  If the return
     value signals a failure, an *note OSError: 4b6. is automatically
     raised.

     Changed in version 3.3: *note WindowsError: 5b2. used to be raised.

 -- Class: ctypes.WinDLL (name, mode=DEFAULT_MODE, handle=None,
          use_errno=False, use_last_error=False)

     Windows only: Instances of this class represent loaded shared
     libraries, functions in these libraries use the ‘stdcall’ calling
     convention, and are assumed to return ‘int’ by default.

     On Windows CE only the standard calling convention is used, for
     convenience the *note WinDLL: 1c68. and *note OleDLL: 1c66. use the
     standard calling convention on this platform.

The Python *note global interpreter lock: 153. is released before
calling any function exported by these libraries, and reacquired
afterwards.

 -- Class: ctypes.PyDLL (name, mode=DEFAULT_MODE, handle=None)

     Instances of this class behave like *note CDLL: 1c65. instances,
     except that the Python GIL is `not' released during the function
     call, and after the function execution the Python error flag is
     checked.  If the error flag is set, a Python exception is raised.

     Thus, this is only useful to call Python C api functions directly.

All these classes can be instantiated by calling them with at least one
argument, the pathname of the shared library.  If you have an existing
handle to an already loaded shared library, it can be passed as the
‘handle’ named parameter, otherwise the underlying platforms ‘dlopen’ or
‘LoadLibrary’ function is used to load the library into the process, and
to get a handle to it.

The `mode' parameter can be used to specify how the library is loaded.
For details, consult the ‘dlopen(3)’ manpage, on Windows, `mode' is
ignored.

The `use_errno' parameter, when set to True, enables a ctypes mechanism
that allows accessing the system *note errno: 7a. error number in a safe
way.  *note ctypes: 2a. maintains a thread-local copy of the systems
*note errno: 7a. variable; if you call foreign functions created with
‘use_errno=True’ then the *note errno: 7a. value before the function
call is swapped with the ctypes private copy, the same happens
immediately after the function call.

The function *note ctypes.get_errno(): 1c6a. returns the value of the
ctypes private copy, and the function *note ctypes.set_errno(): 1c6b.
changes the ctypes private copy to a new value and returns the former
value.

The `use_last_error' parameter, when set to True, enables the same
mechanism for the Windows error code which is managed by the *note
GetLastError(): 1c38. and ‘SetLastError()’ Windows API functions; *note
ctypes.get_last_error(): 1c6c. and *note ctypes.set_last_error(): 1c6d.
are used to request and change the ctypes private copy of the windows
error code.

 -- Data: ctypes.RTLD_GLOBAL

     Flag to use as `mode' parameter.  On platforms where this flag is
     not available, it is defined as the integer zero.

 -- Data: ctypes.RTLD_LOCAL

     Flag to use as `mode' parameter.  On platforms where this is not
     available, it is the same as `RTLD_GLOBAL'.

 -- Data: ctypes.DEFAULT_MODE

     The default mode which is used to load shared libraries.  On OSX
     10.3, this is `RTLD_GLOBAL', otherwise it is the same as
     `RTLD_LOCAL'.

Instances of these classes have no public methods.  Functions exported
by the shared library can be accessed as attributes or by index.  Please
note that accessing the function through an attribute caches the result
and therefore accessing it repeatedly returns the same object each time.
On the other hand, accessing it through an index returns a new object
each time:

     >>> libc.time == libc.time
     True
     >>> libc['time'] == libc['time']
     False

The following public attributes are available, their name starts with an
underscore to not clash with exported function names:

 -- Attribute: PyDLL._handle

     The system handle used to access the library.

 -- Attribute: PyDLL._name

     The name of the library passed in the constructor.

Shared libraries can also be loaded by using one of the prefabricated
objects, which are instances of the *note LibraryLoader: 1c70. class,
either by calling the ‘LoadLibrary()’ method, or by retrieving the
library as attribute of the loader instance.

 -- Class: ctypes.LibraryLoader (dlltype)

     Class which loads shared libraries.  `dlltype' should be one of the
     *note CDLL: 1c65, *note PyDLL: 1c69, *note WinDLL: 1c68, or *note
     OleDLL: 1c66. types.

     *note __getattr__(): 782. has special behavior: It allows loading a
     shared library by accessing it as attribute of a library loader
     instance.  The result is cached, so repeated attribute accesses
     return the same library each time.

      -- Method: LoadLibrary (name)

          Load a shared library into the process and return it.  This
          method always returns a new instance of the library.

These prefabricated library loaders are available:

 -- Data: ctypes.cdll

     Creates *note CDLL: 1c65. instances.

 -- Data: ctypes.windll

     Windows only: Creates *note WinDLL: 1c68. instances.

 -- Data: ctypes.oledll

     Windows only: Creates *note OleDLL: 1c66. instances.

 -- Data: ctypes.pydll

     Creates *note PyDLL: 1c69. instances.

For accessing the C Python api directly, a ready-to-use Python shared
library object is available:

 -- Data: ctypes.pythonapi

     An instance of *note PyDLL: 1c69. that exposes Python C API
     functions as attributes.  Note that all these functions are assumed
     to return C ‘int’, which is of course not always the truth, so you
     have to assign the correct ‘restype’ attribute to use these
     functions.


File: python.info,  Node: Foreign functions,  Next: Function prototypes,  Prev: Loading shared libraries,  Up: ctypes reference

5.16.16.25 Foreign functions
............................

As explained in the previous section, foreign functions can be accessed
as attributes of loaded shared libraries.  The function objects created
in this way by default accept any number of arguments, accept any ctypes
data instances as arguments, and return the default result type
specified by the library loader.  They are instances of a private class:

 -- Class: ctypes._FuncPtr

     Base class for C callable foreign functions.

     Instances of foreign functions are also C compatible data types;
     they represent C function pointers.

     This behavior can be customized by assigning to special attributes
     of the foreign function object.

      -- Attribute: restype

          Assign a ctypes type to specify the result type of the foreign
          function.  Use ‘None’ for ‘void’, a function not returning
          anything.

          It is possible to assign a callable Python object that is not
          a ctypes type, in this case the function is assumed to return
          a C ‘int’, and the callable will be called with this integer,
          allowing further processing or error checking.  Using this is
          deprecated, for more flexible post processing or error
          checking use a ctypes data type as *note restype: 1c75. and
          assign a callable to the *note errcheck: 1c76. attribute.

      -- Attribute: argtypes

          Assign a tuple of ctypes types to specify the argument types
          that the function accepts.  Functions using the ‘stdcall’
          calling convention can only be called with the same number of
          arguments as the length of this tuple; functions using the C
          calling convention accept additional, unspecified arguments as
          well.

          When a foreign function is called, each actual argument is
          passed to the ‘from_param()’ class method of the items in the
          *note argtypes: 1c77. tuple, this method allows adapting the
          actual argument to an object that the foreign function
          accepts.  For example, a *note c_char_p: 1c2b. item in the
          *note argtypes: 1c77. tuple will convert a string passed as
          argument into a bytes object using ctypes conversion rules.

          New: It is now possible to put items in argtypes which are not
          ctypes types, but each item must have a ‘from_param()’ method
          which returns a value usable as argument (integer, string,
          ctypes instance).  This allows defining adapters that can
          adapt custom objects as function parameters.

      -- Attribute: errcheck

          Assign a Python function or another callable to this
          attribute.  The callable will be called with three or more
          arguments:

           -- Function: callable (result, func, arguments)

               `result' is what the foreign function returns, as
               specified by the *note restype: 1c75. attribute.

               `func' is the foreign function object itself, this allows
               reusing the same callable object to check or post process
               the results of several functions.

               `arguments' is a tuple containing the parameters
               originally passed to the function call, this allows
               specializing the behavior on the arguments used.

          The object that this function returns will be returned from
          the foreign function call, but it can also check the result
          value and raise an exception if the foreign function call
          failed.

 -- Exception: ctypes.ArgumentError

     This exception is raised when a foreign function call cannot
     convert one of the passed arguments.


File: python.info,  Node: Function prototypes,  Next: Utility functions,  Prev: Foreign functions,  Up: ctypes reference

5.16.16.26 Function prototypes
..............................

Foreign functions can also be created by instantiating function
prototypes.  Function prototypes are similar to function prototypes in
C; they describe a function (return type, argument types, calling
convention) without defining an implementation.  The factory functions
must be called with the desired result type and the argument types of
the function.

 -- Function: ctypes.CFUNCTYPE (restype, *argtypes, use_errno=False,
          use_last_error=False)

     The returned function prototype creates functions that use the
     standard C calling convention.  The function will release the GIL
     during the call.  If `use_errno' is set to True, the ctypes private
     copy of the system *note errno: 7a. variable is exchanged with the
     real *note errno: 7a. value before and after the call;
     `use_last_error' does the same for the Windows error code.

 -- Function: ctypes.WINFUNCTYPE (restype, *argtypes, use_errno=False,
          use_last_error=False)

     Windows only: The returned function prototype creates functions
     that use the ‘stdcall’ calling convention, except on Windows CE
     where *note WINFUNCTYPE(): 1c55. is the same as *note CFUNCTYPE():
     1c54.  The function will release the GIL during the call.
     `use_errno' and `use_last_error' have the same meaning as above.

 -- Function: ctypes.PYFUNCTYPE (restype, *argtypes)

     The returned function prototype creates functions that use the
     Python calling convention.  The function will `not' release the GIL
     during the call.

Function prototypes created by these factory functions can be
instantiated in different ways, depending on the type and number of the
parameters in the call:

      -- Function: prototype (address)

          Returns a foreign function at the specified address which must
          be an integer.

      -- Function: prototype (callable)

          Create a C callable function (a callback function) from a
          Python `callable'.

      -- Function: prototype (func_spec[, paramflags])

          Returns a foreign function exported by a shared library.
          `func_spec' must be a 2-tuple ‘(name_or_ordinal, library)’.
          The first item is the name of the exported function as string,
          or the ordinal of the exported function as small integer.  The
          second item is the shared library instance.

      -- Function: prototype (vtbl_index, name[, paramflags[, iid]])

          Returns a foreign function that will call a COM method.
          `vtbl_index' is the index into the virtual function table, a
          small non-negative integer.  `name' is name of the COM method.
          `iid' is an optional pointer to the interface identifier which
          is used in extended error reporting.

          COM methods use a special calling convention: They require a
          pointer to the COM interface as first argument, in addition to
          those parameters that are specified in the ‘argtypes’ tuple.

     The optional `paramflags' parameter creates foreign function
     wrappers with much more functionality than the features described
     above.

     `paramflags' must be a tuple of the same length as ‘argtypes’.

     Each item in this tuple contains further information about a
     parameter, it must be a tuple containing one, two, or three items.

     The first item is an integer containing a combination of direction
     flags for the parameter:

          1

               Specifies an input parameter to the function.

          2

               Output parameter.  The foreign function fills in a value.

          4

               Input parameter which defaults to the integer zero.

     The optional second item is the parameter name as string.  If this
     is specified, the foreign function can be called with named
     parameters.

     The optional third item is the default value for this parameter.

This example demonstrates how to wrap the Windows ‘MessageBoxA’ function
so that it supports default parameters and named arguments.  The C
declaration from the windows header file is this:

     WINUSERAPI int WINAPI
     MessageBoxA(
         HWND hWnd,
         LPCSTR lpText,
         LPCSTR lpCaption,
         UINT uType);

Here is the wrapping with *note ctypes: 2a.:

     >>> from ctypes import c_int, WINFUNCTYPE, windll
     >>> from ctypes.wintypes import HWND, LPCSTR, UINT
     >>> prototype = WINFUNCTYPE(c_int, HWND, LPCSTR, LPCSTR, UINT)
     >>> paramflags = (1, "hwnd", 0), (1, "text", "Hi"), (1, "caption", None), (1, "flags", 0)
     >>> MessageBox = prototype(("MessageBoxA", windll.user32), paramflags)
     >>>

The MessageBox foreign function can now be called in these ways:

     >>> MessageBox()
     >>> MessageBox(text="Spam, spam, spam")
     >>> MessageBox(flags=2, text="foo bar")
     >>>

A second example demonstrates output parameters.  The win32
‘GetWindowRect’ function retrieves the dimensions of a specified window
by copying them into ‘RECT’ structure that the caller has to supply.
Here is the C declaration:

     WINUSERAPI BOOL WINAPI
     GetWindowRect(
          HWND hWnd,
          LPRECT lpRect);

Here is the wrapping with *note ctypes: 2a.:

     >>> from ctypes import POINTER, WINFUNCTYPE, windll, WinError
     >>> from ctypes.wintypes import BOOL, HWND, RECT
     >>> prototype = WINFUNCTYPE(BOOL, HWND, POINTER(RECT))
     >>> paramflags = (1, "hwnd"), (2, "lprect")
     >>> GetWindowRect = prototype(("GetWindowRect", windll.user32), paramflags)
     >>>

Functions with output parameters will automatically return the output
parameter value if there is a single one, or a tuple containing the
output parameter values when there are more than one, so the
GetWindowRect function now returns a RECT instance, when called.

Output parameters can be combined with the ‘errcheck’ protocol to do
further output processing and error checking.  The win32 ‘GetWindowRect’
api function returns a ‘BOOL’ to signal success or failure, so this
function could do the error checking, and raises an exception when the
api call failed:

     >>> def errcheck(result, func, args):
     ...     if not result:
     ...         raise WinError()
     ...     return args
     ...
     >>> GetWindowRect.errcheck = errcheck
     >>>

If the ‘errcheck’ function returns the argument tuple it receives
unchanged, *note ctypes: 2a. continues the normal processing it does on
the output parameters.  If you want to return a tuple of window
coordinates instead of a ‘RECT’ instance, you can retrieve the fields in
the function and return them instead, the normal processing will no
longer take place:

     >>> def errcheck(result, func, args):
     ...     if not result:
     ...         raise WinError()
     ...     rc = args[1]
     ...     return rc.left, rc.top, rc.bottom, rc.right
     ...
     >>> GetWindowRect.errcheck = errcheck
     >>>


File: python.info,  Node: Utility functions,  Next: Data types,  Prev: Function prototypes,  Up: ctypes reference

5.16.16.27 Utility functions
............................

 -- Function: ctypes.addressof (obj)

     Returns the address of the memory buffer as integer.  `obj' must be
     an instance of a ctypes type.

 -- Function: ctypes.alignment (obj_or_type)

     Returns the alignment requirements of a ctypes type.  `obj_or_type'
     must be a ctypes type or instance.

 -- Function: ctypes.byref (obj[, offset])

     Returns a light-weight pointer to `obj', which must be an instance
     of a ctypes type.  `offset' defaults to zero, and must be an
     integer that will be added to the internal pointer value.

     ‘byref(obj, offset)’ corresponds to this C code:

          (((char *)&obj) + offset)

     The returned object can only be used as a foreign function call
     parameter.  It behaves similar to ‘pointer(obj)’, but the
     construction is a lot faster.

 -- Function: ctypes.cast (obj, type)

     This function is similar to the cast operator in C. It returns a
     new instance of `type' which points to the same memory block as
     `obj'.  `type' must be a pointer type, and `obj' must be an object
     that can be interpreted as a pointer.

 -- Function: ctypes.create_string_buffer (init_or_size, size=None)

     This function creates a mutable character buffer.  The returned
     object is a ctypes array of *note c_char: 1c1d.

     `init_or_size' must be an integer which specifies the size of the
     array, or a bytes object which will be used to initialize the array
     items.

     If a bytes object is specified as first argument, the buffer is
     made one item larger than its length so that the last element in
     the array is a NUL termination character.  An integer can be passed
     as second argument which allows specifying the size of the array if
     the length of the bytes should not be used.

 -- Function: ctypes.create_unicode_buffer (init_or_size, size=None)

     This function creates a mutable unicode character buffer.  The
     returned object is a ctypes array of *note c_wchar: 1c1e.

     `init_or_size' must be an integer which specifies the size of the
     array, or a string which will be used to initialize the array
     items.

     If a string is specified as first argument, the buffer is made one
     item larger than the length of the string so that the last element
     in the array is a NUL termination character.  An integer can be
     passed as second argument which allows specifying the size of the
     array if the length of the string should not be used.

 -- Function: ctypes.DllCanUnloadNow ()

     Windows only: This function is a hook which allows implementing
     in-process COM servers with ctypes.  It is called from the
     DllCanUnloadNow function that the _ctypes extension dll exports.

 -- Function: ctypes.DllGetClassObject ()

     Windows only: This function is a hook which allows implementing
     in-process COM servers with ctypes.  It is called from the
     DllGetClassObject function that the ‘_ctypes’ extension dll
     exports.

 -- Function: ctypes.util.find_library (name)

     Try to find a library and return a pathname.  `name' is the library
     name without any prefix like ‘lib’, suffix like ‘.so’, ‘.dylib’ or
     version number (this is the form used for the posix linker option
     *note -l: 1784.).  If no library can be found, returns ‘None’.

     The exact functionality is system dependent.

 -- Function: ctypes.util.find_msvcrt ()

     Windows only: return the filename of the VC runtime library used by
     Python, and by the extension modules.  If the name of the library
     cannot be determined, ‘None’ is returned.

     If you need to free memory, for example, allocated by an extension
     module with a call to the ‘free(void *)’, it is important that you
     use the function in the same library that allocated the memory.

 -- Function: ctypes.FormatError ([code])

     Windows only: Returns a textual description of the error code
     `code'.  If no error code is specified, the last error code is used
     by calling the Windows api function GetLastError.

 -- Function: ctypes.GetLastError ()

     Windows only: Returns the last error code set by Windows in the
     calling thread.  This function calls the Windows ‘GetLastError()’
     function directly, it does not return the ctypes-private copy of
     the error code.

 -- Function: ctypes.get_errno ()

     Returns the current value of the ctypes-private copy of the system
     *note errno: 7a. variable in the calling thread.

 -- Function: ctypes.get_last_error ()

     Windows only: returns the current value of the ctypes-private copy
     of the system ‘LastError’ variable in the calling thread.

 -- Function: ctypes.memmove (dst, src, count)

     Same as the standard C memmove library function: copies `count'
     bytes from `src' to `dst'.  `dst' and `src' must be integers or
     ctypes instances that can be converted to pointers.

 -- Function: ctypes.memset (dst, c, count)

     Same as the standard C memset library function: fills the memory
     block at address `dst' with `count' bytes of value `c'.  `dst' must
     be an integer specifying an address, or a ctypes instance.

 -- Function: ctypes.POINTER (type)

     This factory function creates and returns a new ctypes pointer
     type.  Pointer types are cached and reused internally, so calling
     this function repeatedly is cheap.  `type' must be a ctypes type.

 -- Function: ctypes.pointer (obj)

     This function creates a new pointer instance, pointing to `obj'.
     The returned object is of the type ‘POINTER(type(obj))’.

     Note: If you just want to pass a pointer to an object to a foreign
     function call, you should use ‘byref(obj)’ which is much faster.

 -- Function: ctypes.resize (obj, size)

     This function resizes the internal memory buffer of `obj', which
     must be an instance of a ctypes type.  It is not possible to make
     the buffer smaller than the native size of the objects type, as
     given by ‘sizeof(type(obj))’, but it is possible to enlarge the
     buffer.

 -- Function: ctypes.set_errno (value)

     Set the current value of the ctypes-private copy of the system
     *note errno: 7a. variable in the calling thread to `value' and
     return the previous value.

 -- Function: ctypes.set_last_error (value)

     Windows only: set the current value of the ctypes-private copy of
     the system ‘LastError’ variable in the calling thread to `value'
     and return the previous value.

 -- Function: ctypes.sizeof (obj_or_type)

     Returns the size in bytes of a ctypes type or instance memory
     buffer.  Does the same as the C ‘sizeof’ operator.

 -- Function: ctypes.string_at (address, size=-1)

     This function returns the C string starting at memory address
     `address' as a bytes object.  If size is specified, it is used as
     size, otherwise the string is assumed to be zero-terminated.

 -- Function: ctypes.WinError (code=None, descr=None)

     Windows only: this function is probably the worst-named thing in
     ctypes.  It creates an instance of OSError.  If `code' is not
     specified, ‘GetLastError’ is called to determine the error code.
     If `descr' is not specified, *note FormatError(): 1c84. is called
     to get a textual description of the error.

     Changed in version 3.3: An instance of *note WindowsError: 5b2.
     used to be created.

 -- Function: ctypes.wstring_at (address, size=-1)

     This function returns the wide character string starting at memory
     address `address' as a string.  If `size' is specified, it is used
     as the number of characters of the string, otherwise the string is
     assumed to be zero-terminated.


File: python.info,  Node: Data types,  Next: Fundamental data types<2>,  Prev: Utility functions,  Up: ctypes reference

5.16.16.28 Data types
.....................

 -- Class: ctypes._CData

     This non-public class is the common base class of all ctypes data
     types.  Among other things, all ctypes type instances contain a
     memory block that hold C compatible data; the address of the memory
     block is returned by the *note addressof(): 1c7e. helper function.
     Another instance variable is exposed as *note _objects: 1c8e.; this
     contains other Python objects that need to be kept alive in case
     the memory block contains pointers.

     Common methods of ctypes data types, these are all class methods
     (to be exact, they are methods of the *note metaclass: 12ec.):

      -- Method: from_buffer (source[, offset])

          This method returns a ctypes instance that shares the buffer
          of the `source' object.  The `source' object must support the
          writeable buffer interface.  The optional `offset' parameter
          specifies an offset into the source buffer in bytes; the
          default is zero.  If the source buffer is not large enough a
          *note ValueError: 19c. is raised.

      -- Method: from_buffer_copy (source[, offset])

          This method creates a ctypes instance, copying the buffer from
          the `source' object buffer which must be readable.  The
          optional `offset' parameter specifies an offset into the
          source buffer in bytes; the default is zero.  If the source
          buffer is not large enough a *note ValueError: 19c. is raised.

      -- Method: from_address (address)

          This method returns a ctypes type instance using the memory
          specified by `address' which must be an integer.

      -- Method: from_param (obj)

          This method adapts `obj' to a ctypes type.  It is called with
          the actual object used in a foreign function call when the
          type is present in the foreign function’s ‘argtypes’ tuple; it
          must return an object that can be used as a function call
          parameter.

          All ctypes data types have a default implementation of this
          classmethod that normally returns `obj' if that is an instance
          of the type.  Some types accept other objects as well.

      -- Method: in_dll (library, name)

          This method returns a ctypes type instance exported by a
          shared library.  `name' is the name of the symbol that exports
          the data, `library' is the loaded shared library.

     Common instance variables of ctypes data types:

      -- Attribute: _b_base_

          Sometimes ctypes data instances do not own the memory block
          they contain, instead they share part of the memory block of a
          base object.  The *note _b_base_: 1c94. read-only member is
          the root ctypes object that owns the memory block.

      -- Attribute: _b_needsfree_

          This read-only variable is true when the ctypes data instance
          has allocated the memory block itself, false otherwise.

      -- Attribute: _objects

          This member is either ‘None’ or a dictionary containing Python
          objects that need to be kept alive so that the memory block
          contents is kept valid.  This object is only exposed for
          debugging; never modify the contents of this dictionary.


File: python.info,  Node: Fundamental data types<2>,  Next: Structured data types,  Prev: Data types,  Up: ctypes reference

5.16.16.29 Fundamental data types
.................................

 -- Class: ctypes._SimpleCData

     This non-public class is the base class of all fundamental ctypes
     data types.  It is mentioned here because it contains the common
     attributes of the fundamental ctypes data types.  *note
     _SimpleCData: 1c98. is a subclass of *note _CData: 1c8d, so it
     inherits their methods and attributes.  ctypes data types that are
     not and do not contain pointers can now be pickled.

     Instances have a single attribute:

      -- Attribute: value

          This attribute contains the actual value of the instance.  For
          integer and pointer types, it is an integer, for character
          types, it is a single character bytes object or string, for
          character pointer types it is a Python bytes object or string.

          When the ‘value’ attribute is retrieved from a ctypes
          instance, usually a new object is returned each time.  *note
          ctypes: 2a. does `not' implement original object return,
          always a new object is constructed.  The same is true for all
          other ctypes object instances.

Fundamental data types, when returned as foreign function call results,
or, for example, by retrieving structure field members or array items,
are transparently converted to native Python types.  In other words, if
a foreign function has a ‘restype’ of *note c_char_p: 1c2b, you will
always receive a Python bytes object, `not' a *note c_char_p: 1c2b.
instance.

Subclasses of fundamental data types do `not' inherit this behavior.
So, if a foreign functions ‘restype’ is a subclass of *note c_void_p:
1c2d, you will receive an instance of this subclass from the function
call.  Of course, you can get the value of the pointer by accessing the
‘value’ attribute.

These are the fundamental ctypes data types:

 -- Class: ctypes.c_byte

     Represents the C ‘signed char’ datatype, and interprets the value
     as small integer.  The constructor accepts an optional integer
     initializer; no overflow checking is done.

 -- Class: ctypes.c_char

     Represents the C ‘char’ datatype, and interprets the value as a
     single character.  The constructor accepts an optional string
     initializer, the length of the string must be exactly one
     character.

 -- Class: ctypes.c_char_p

     Represents the C ‘char *’ datatype when it points to a
     zero-terminated string.  For a general character pointer that may
     also point to binary data, ‘POINTER(c_char)’ must be used.  The
     constructor accepts an integer address, or a bytes object.

 -- Class: ctypes.c_double

     Represents the C ‘double’ datatype.  The constructor accepts an
     optional float initializer.

 -- Class: ctypes.c_longdouble

     Represents the C ‘long double’ datatype.  The constructor accepts
     an optional float initializer.  On platforms where ‘sizeof(long
     double) == sizeof(double)’ it is an alias to *note c_double: 1c29.

 -- Class: ctypes.c_float

     Represents the C ‘float’ datatype.  The constructor accepts an
     optional float initializer.

 -- Class: ctypes.c_int

     Represents the C ‘signed int’ datatype.  The constructor accepts an
     optional integer initializer; no overflow checking is done.  On
     platforms where ‘sizeof(int) == sizeof(long)’ it is an alias to
     *note c_long: 1c13.

 -- Class: ctypes.c_int8

     Represents the C 8-bit ‘signed int’ datatype.  Usually an alias for
     *note c_byte: 1c1f.

 -- Class: ctypes.c_int16

     Represents the C 16-bit ‘signed int’ datatype.  Usually an alias
     for *note c_short: 1c21.

 -- Class: ctypes.c_int32

     Represents the C 32-bit ‘signed int’ datatype.  Usually an alias
     for *note c_int: 1c12.

 -- Class: ctypes.c_int64

     Represents the C 64-bit ‘signed int’ datatype.  Usually an alias
     for *note c_longlong: 1c25.

 -- Class: ctypes.c_long

     Represents the C ‘signed long’ datatype.  The constructor accepts
     an optional integer initializer; no overflow checking is done.

 -- Class: ctypes.c_longlong

     Represents the C ‘signed long long’ datatype.  The constructor
     accepts an optional integer initializer; no overflow checking is
     done.

 -- Class: ctypes.c_short

     Represents the C ‘signed short’ datatype.  The constructor accepts
     an optional integer initializer; no overflow checking is done.

 -- Class: ctypes.c_size_t

     Represents the C ‘size_t’ datatype.

 -- Class: ctypes.c_ssize_t

     Represents the C ‘ssize_t’ datatype.

     New in version 3.2.

 -- Class: ctypes.c_ubyte

     Represents the C ‘unsigned char’ datatype, it interprets the value
     as small integer.  The constructor accepts an optional integer
     initializer; no overflow checking is done.

 -- Class: ctypes.c_uint

     Represents the C ‘unsigned int’ datatype.  The constructor accepts
     an optional integer initializer; no overflow checking is done.  On
     platforms where ‘sizeof(int) == sizeof(long)’ it is an alias for
     *note c_ulong: 1c24.

 -- Class: ctypes.c_uint8

     Represents the C 8-bit ‘unsigned int’ datatype.  Usually an alias
     for *note c_ubyte: 1c20.

 -- Class: ctypes.c_uint16

     Represents the C 16-bit ‘unsigned int’ datatype.  Usually an alias
     for *note c_ushort: 1c22.

 -- Class: ctypes.c_uint32

     Represents the C 32-bit ‘unsigned int’ datatype.  Usually an alias
     for *note c_uint: 1c23.

 -- Class: ctypes.c_uint64

     Represents the C 64-bit ‘unsigned int’ datatype.  Usually an alias
     for *note c_ulonglong: 1c26.

 -- Class: ctypes.c_ulong

     Represents the C ‘unsigned long’ datatype.  The constructor accepts
     an optional integer initializer; no overflow checking is done.

 -- Class: ctypes.c_ulonglong

     Represents the C ‘unsigned long long’ datatype.  The constructor
     accepts an optional integer initializer; no overflow checking is
     done.

 -- Class: ctypes.c_ushort

     Represents the C ‘unsigned short’ datatype.  The constructor
     accepts an optional integer initializer; no overflow checking is
     done.

 -- Class: ctypes.c_void_p

     Represents the C ‘void *’ type.  The value is represented as
     integer.  The constructor accepts an optional integer initializer.

 -- Class: ctypes.c_wchar

     Represents the C ‘wchar_t’ datatype, and interprets the value as a
     single character unicode string.  The constructor accepts an
     optional string initializer, the length of the string must be
     exactly one character.

 -- Class: ctypes.c_wchar_p

     Represents the C ‘wchar_t *’ datatype, which must be a pointer to a
     zero-terminated wide character string.  The constructor accepts an
     integer address, or a string.

 -- Class: ctypes.c_bool

     Represent the C ‘bool’ datatype (more accurately, ‘_Bool’ from
     C99).  Its value can be ‘True’ or ‘False’, and the constructor
     accepts any object that has a truth value.

 -- Class: ctypes.HRESULT

     Windows only: Represents a ‘HRESULT’ value, which contains success
     or error information for a function or method call.

 -- Class: ctypes.py_object

     Represents the C *note PyObject *: 9f5. datatype.  Calling this
     without an argument creates a ‘NULL’ *note PyObject *: 9f5.
     pointer.

The ‘ctypes.wintypes’ module provides quite some other Windows specific
data types, for example ‘HWND’, ‘WPARAM’, or ‘DWORD’.  Some useful
structures like ‘MSG’ or ‘RECT’ are also defined.


File: python.info,  Node: Structured data types,  Next: Arrays and pointers,  Prev: Fundamental data types<2>,  Up: ctypes reference

5.16.16.30 Structured data types
................................

 -- Class: ctypes.Union (*args, **kw)

     Abstract base class for unions in native byte order.

 -- Class: ctypes.BigEndianStructure (*args, **kw)

     Abstract base class for structures in `big endian' byte order.

 -- Class: ctypes.LittleEndianStructure (*args, **kw)

     Abstract base class for structures in `little endian' byte order.

Structures with non-native byte order cannot contain pointer type
fields, or any other data types containing pointer type fields.

 -- Class: ctypes.Structure (*args, **kw)

     Abstract base class for structures in `native' byte order.

     Concrete structure and union types must be created by subclassing
     one of these types, and at least define a *note _fields_: 1ca5.
     class variable.  *note ctypes: 2a. will create *note descriptor:
     14d4.s which allow reading and writing the fields by direct
     attribute accesses.  These are the

      -- Attribute: _fields_

          A sequence defining the structure fields.  The items must be
          2-tuples or 3-tuples.  The first item is the name of the
          field, the second item specifies the type of the field; it can
          be any ctypes data type.

          For integer type fields like *note c_int: 1c12, a third
          optional item can be given.  It must be a small positive
          integer defining the bit width of the field.

          Field names must be unique within one structure or union.
          This is not checked, only one field can be accessed when names
          are repeated.

          It is possible to define the *note _fields_: 1ca5. class
          variable `after' the class statement that defines the
          Structure subclass, this allows creating data types that
          directly or indirectly reference themselves:

               class List(Structure):
                   pass
               List._fields_ = [("pnext", POINTER(List)),
                                ...
                               ]

          The *note _fields_: 1ca5. class variable must, however, be
          defined before the type is first used (an instance is created,
          *note sizeof(): 1c87. is called on it, and so on).  Later
          assignments to the *note _fields_: 1ca5. class variable will
          raise an AttributeError.

          It is possible to defined sub-subclasses of structure types,
          they inherit the fields of the base class plus the *note
          _fields_: 1ca5. defined in the sub-subclass, if any.

      -- Attribute: _pack_

          An optional small integer that allows overriding the alignment
          of structure fields in the instance.  *note _pack_: 1ca6. must
          already be defined when *note _fields_: 1ca5. is assigned,
          otherwise it will have no effect.

      -- Attribute: _anonymous_

          An optional sequence that lists the names of unnamed
          (anonymous) fields.  *note _anonymous_: 1ca7. must be already
          defined when *note _fields_: 1ca5. is assigned, otherwise it
          will have no effect.

          The fields listed in this variable must be structure or union
          type fields.  *note ctypes: 2a. will create descriptors in the
          structure type that allows accessing the nested fields
          directly, without the need to create the structure or union
          field.

          Here is an example type (Windows):

               class _U(Union):
                   _fields_ = [("lptdesc", POINTER(TYPEDESC)),
                               ("lpadesc", POINTER(ARRAYDESC)),
                               ("hreftype", HREFTYPE)]

               class TYPEDESC(Structure):
                   _anonymous_ = ("u",)
                   _fields_ = [("u", _U),
                               ("vt", VARTYPE)]

          The ‘TYPEDESC’ structure describes a COM data type, the ‘vt’
          field specifies which one of the union fields is valid.  Since
          the ‘u’ field is defined as anonymous field, it is now
          possible to access the members directly off the TYPEDESC
          instance.  ‘td.lptdesc’ and ‘td.u.lptdesc’ are equivalent, but
          the former is faster since it does not need to create a
          temporary union instance:

               td = TYPEDESC()
               td.vt = VT_PTR
               td.lptdesc = POINTER(some_type)
               td.u.lptdesc = POINTER(some_type)

     It is possible to defined sub-subclasses of structures, they
     inherit the fields of the base class.  If the subclass definition
     has a separate *note _fields_: 1ca5. variable, the fields specified
     in this are appended to the fields of the base class.

     Structure and union constructors accept both positional and keyword
     arguments.  Positional arguments are used to initialize member
     fields in the same order as they are appear in *note _fields_:
     1ca5.  Keyword arguments in the constructor are interpreted as
     attribute assignments, so they will initialize *note _fields_:
     1ca5. with the same name, or create new attributes for names not
     present in *note _fields_: 1ca5.


File: python.info,  Node: Arrays and pointers,  Prev: Structured data types,  Up: ctypes reference

5.16.16.31 Arrays and pointers
..............................

 -- Class: ctypes.Array (*args)

     Abstract base class for arrays.

     The recommended way to create concrete array types is by
     multiplying any *note ctypes: 2a. data type with a positive
     integer.  Alternatively, you can subclass this type and define
     *note _length_: 1cab. and *note _type_: 1cac. class variables.
     Array elements can be read and written using standard subscript and
     slice accesses; for slice reads, the resulting object is `not'
     itself an *note Array: 1caa.

      -- Attribute: _length_

          A positive integer specifying the number of elements in the
          array.  Out-of-range subscripts result in an *note IndexError:
          afb.  Will be returned by *note len(): 5a8.

      -- Attribute: _type_

          Specifies the type of each element in the array.

     Array subclass constructors accept positional arguments, used to
     initialize the elements in order.

 -- Class: ctypes._Pointer

     Private, abstract base class for pointers.

     Concrete pointer types are created by calling *note POINTER():
     1c4c. with the type that will be pointed to; this is done
     automatically by *note pointer(): 1c3c.

     If a pointer points to an array, its elements can be read and
     written using standard subscript and slice accesses.  Pointer
     objects have no size, so *note len(): 5a8. will raise *note
     TypeError: 562.  Negative subscripts will read from the memory
     `before' the pointer (as in C), and out-of-range subscripts will
     probably crash with an access violation (if you’re lucky).

      -- Attribute: _type_

          Specifies the type pointed to.

      -- Attribute: contents

          Returns the object to which to pointer points.  Assigning to
          this attribute changes the pointer to point to the assigned
          object.


File: python.info,  Node: Concurrent Execution,  Next: Interprocess Communication and Networking,  Prev: Generic Operating System Services,  Up: The Python Standard Library

5.17 Concurrent Execution
=========================

The modules described in this chapter provide support for concurrent
execution of code.  The appropriate choice of tool will depend on the
task to be executed (CPU bound vs IO bound) and preferred style of
development (event driven cooperative multitasking vs preemptive
multitasking).  Here’s an overview:

* Menu:

* threading: threading --- Thread-based parallelism. Thread-based parallelism
* multiprocessing: multiprocessing --- Process-based parallelism. Process-based parallelism
* The concurrent package:: 
* concurrent.futures: concurrent futures --- Launching parallel tasks. Launching parallel tasks
* subprocess: subprocess --- Subprocess management. Subprocess management
* sched: sched --- Event scheduler. Event scheduler
* queue: queue --- A synchronized queue class. A synchronized queue class
* dummy_threading: dummy_threading --- Drop-in replacement for the threading module. Drop-in replacement for the threading module
* _thread: _thread --- Low-level threading API. Low-level threading API
* _dummy_thread: _dummy_thread --- Drop-in replacement for the _thread module. Drop-in replacement for the _thread module


File: python.info,  Node: threading --- Thread-based parallelism,  Next: multiprocessing --- Process-based parallelism,  Up: Concurrent Execution

5.17.1 ‘threading’ — Thread-based parallelism
---------------------------------------------

`Source code:' Lib/threading.py(1)

__________________________________________________________________

This module constructs higher-level threading interfaces on top of the
lower level *note _thread: 3. module.  See also the *note queue: d8.
module.

The *note dummy_threading: 66. module is provided for situations where
*note threading: 106. cannot be used because *note _thread: 3. is
missing.

     Note: While they are not listed below, the ‘camelCase’ names used
     for some methods and functions in this module in the Python 2.x
     series are still supported by this module.

This module defines the following functions:

 -- Function: threading.active_count ()

     Return the number of *note Thread: 4f0. objects currently alive.
     The returned count is equal to the length of the list returned by
     *note enumerate(): 1cb5.

 -- Function: threading.current_thread ()

     Return the current *note Thread: 4f0. object, corresponding to the
     caller’s thread of control.  If the caller’s thread of control was
     not created through the *note threading: 106. module, a dummy
     thread object with limited functionality is returned.

 -- Function: threading.get_ident ()

     Return the ’thread identifier’ of the current thread.  This is a
     nonzero integer.  Its value has no direct meaning; it is intended
     as a magic cookie to be used e.g.  to index a dictionary of
     thread-specific data.  Thread identifiers may be recycled when a
     thread exits and another thread is created.

     New in version 3.3.

 -- Function: threading.enumerate ()

     Return a list of all *note Thread: 4f0. objects currently alive.
     The list includes daemonic threads, dummy thread objects created by
     *note current_thread(): 1cb6, and the main thread.  It excludes
     terminated threads and threads that have not yet been started.

 -- Function: threading.main_thread ()

     Return the main *note Thread: 4f0. object.  In normal conditions,
     the main thread is the thread from which the Python interpreter was
     started.

     New in version 3.4.

 -- Function: threading.settrace (func)

     Set a trace function for all threads started from the *note
     threading: 106. module.  The `func' will be passed to *note
     sys.settrace(): ac0. for each thread, before its *note run(): 1cb8.
     method is called.

 -- Function: threading.setprofile (func)

     Set a profile function for all threads started from the *note
     threading: 106. module.  The `func' will be passed to *note
     sys.setprofile(): abf. for each thread, before its *note run():
     1cb8. method is called.

 -- Function: threading.stack_size ([size])

     Return the thread stack size used when creating new threads.  The
     optional `size' argument specifies the stack size to be used for
     subsequently created threads, and must be 0 (use platform or
     configured default) or a positive integer value of at least 32,768
     (32 KiB). If `size' is not specified, 0 is used.  If changing the
     thread stack size is unsupported, a *note RuntimeError: 193. is
     raised.  If the specified stack size is invalid, a *note
     ValueError: 19c. is raised and the stack size is unmodified.  32
     KiB is currently the minimum supported stack size value to
     guarantee sufficient stack space for the interpreter itself.  Note
     that some platforms may have particular restrictions on values for
     the stack size, such as requiring a minimum stack size > 32 KiB or
     requiring allocation in multiples of the system memory page size -
     platform documentation should be referred to for more information
     (4 KiB pages are common; using multiples of 4096 for the stack size
     is the suggested approach in the absence of more specific
     information).  Availability: Windows, systems with POSIX threads.

This module also defines the following constant:

 -- Data: threading.TIMEOUT_MAX

     The maximum value allowed for the `timeout' parameter of blocking
     functions (*note Lock.acquire(): 33d, *note RLock.acquire(): 33e,
     *note Condition.wait(): 1cbc, etc.).  Specifying a timeout greater
     than this value will raise an *note OverflowError: 578.

     New in version 3.2.

This module defines a number of classes, which are detailed in the
sections below.

The design of this module is loosely based on Java’s threading model.
However, where Java makes locks and condition variables basic behavior
of every object, they are separate objects in Python.  Python’s *note
Thread: 4f0. class supports a subset of the behavior of Java’s Thread
class; currently, there are no priorities, no thread groups, and threads
cannot be destroyed, stopped, suspended, resumed, or interrupted.  The
static methods of Java’s Thread class, when implemented, are mapped to
module-level functions.

All of the methods described below are executed atomically.

* Menu:

* Thread-Local Data:: 
* Thread Objects:: 
* Lock Objects:: 
* RLock Objects:: 
* Condition Objects:: 
* Semaphore Objects:: 
* Event Objects:: 
* Timer Objects:: 
* Barrier Objects:: 
* Using locks, conditions, and semaphores in the with statement: Using locks conditions and semaphores in the with statement. 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/threading.py


File: python.info,  Node: Thread-Local Data,  Next: Thread Objects,  Up: threading --- Thread-based parallelism

5.17.1.1 Thread-Local Data
..........................

Thread-local data is data whose values are thread specific.  To manage
thread-local data, just create an instance of *note local: 1c56. (or a
subclass) and store attributes on it:

     mydata = threading.local()
     mydata.x = 1

The instance’s values will be different for separate threads.

 -- Class: threading.local

     A class that represents thread-local data.

     For more details and extensive examples, see the documentation
     string of the ‘_threading_local’ module.


File: python.info,  Node: Thread Objects,  Next: Lock Objects,  Prev: Thread-Local Data,  Up: threading --- Thread-based parallelism

5.17.1.2 Thread Objects
.......................

The *note Thread: 4f0. class represents an activity that is run in a
separate thread of control.  There are two ways to specify the activity:
by passing a callable object to the constructor, or by overriding the
*note run(): 1cb8. method in a subclass.  No other methods (except for
the constructor) should be overridden in a subclass.  In other words,
`only' override the ‘__init__()’ and *note run(): 1cb8. methods of this
class.

Once a thread object is created, its activity must be started by calling
the thread’s *note start(): 1a2a. method.  This invokes the *note run():
1cb8. method in a separate thread of control.

Once the thread’s activity is started, the thread is considered ’alive’.
It stops being alive when its *note run(): 1cb8. method terminates –
either normally, or by raising an unhandled exception.  The *note
is_alive(): 1cc0. method tests whether the thread is alive.

Other threads can call a thread’s *note join(): 7aa. method.  This
blocks the calling thread until the thread whose *note join(): 7aa.
method is called is terminated.

A thread has a name.  The name can be passed to the constructor, and
read or changed through the *note name: 1cc1. attribute.

A thread can be flagged as a "daemon thread".  The significance of this
flag is that the entire Python program exits when only daemon threads
are left.  The initial value is inherited from the creating thread.  The
flag can be set through the *note daemon: 1cc2. property or the `daemon'
constructor argument.

     Note: Daemon threads are abruptly stopped at shutdown.  Their
     resources (such as open files, database transactions, etc.)  may
     not be released properly.  If you want your threads to stop
     gracefully, make them non-daemonic and use a suitable signalling
     mechanism such as an *note Event: 6e7.

There is a "main thread" object; this corresponds to the initial thread
of control in the Python program.  It is not a daemon thread.

There is the possibility that "dummy thread objects" are created.  These
are thread objects corresponding to "alien threads", which are threads
of control started outside the threading module, such as directly from C
code.  Dummy thread objects have limited functionality; they are always
considered alive and daemonic, and cannot be *note join(): 7aa.ed.  They
are never deleted, since it is impossible to detect the termination of
alien threads.

 -- Class: threading.Thread (group=None, target=None, name=None,
          args=(), kwargs={}, *, daemon=None)

     This constructor should always be called with keyword arguments.
     Arguments are:

     `group' should be ‘None’; reserved for future extension when a
     ‘ThreadGroup’ class is implemented.

     `target' is the callable object to be invoked by the *note run():
     1cb8. method.  Defaults to ‘None’, meaning nothing is called.

     `name' is the thread name.  By default, a unique name is
     constructed of the form "Thread-`N'" where `N' is a small decimal
     number.

     `args' is the argument tuple for the target invocation.  Defaults
     to ‘()’.

     `kwargs' is a dictionary of keyword arguments for the target
     invocation.  Defaults to ‘{}’.

     If not ‘None’, `daemon' explicitly sets whether the thread is
     daemonic.  If ‘None’ (the default), the daemonic property is
     inherited from the current thread.

     If the subclass overrides the constructor, it must make sure to
     invoke the base class constructor (‘Thread.__init__()’) before
     doing anything else to the thread.

     Changed in version 3.3: Added the `daemon' argument.

      -- Method: start ()

          Start the thread’s activity.

          It must be called at most once per thread object.  It arranges
          for the object’s *note run(): 1cb8. method to be invoked in a
          separate thread of control.

          This method will raise a *note RuntimeError: 193. if called
          more than once on the same thread object.

      -- Method: run ()

          Method representing the thread’s activity.

          You may override this method in a subclass.  The standard
          *note run(): 1cb8. method invokes the callable object passed
          to the object’s constructor as the `target' argument, if any,
          with sequential and keyword arguments taken from the `args'
          and `kwargs' arguments, respectively.

      -- Method: join (timeout=None)

          Wait until the thread terminates.  This blocks the calling
          thread until the thread whose *note join(): 7aa. method is
          called terminates – either normally or through an unhandled
          exception –, or until the optional timeout occurs.

          When the `timeout' argument is present and not ‘None’, it
          should be a floating point number specifying a timeout for the
          operation in seconds (or fractions thereof).  As *note join():
          7aa. always returns ‘None’, you must call *note is_alive():
          1cc0. after *note join(): 7aa. to decide whether a timeout
          happened – if the thread is still alive, the *note join():
          7aa. call timed out.

          When the `timeout' argument is not present or ‘None’, the
          operation will block until the thread terminates.

          A thread can be *note join(): 7aa.ed many times.

          *note join(): 7aa. raises a *note RuntimeError: 193. if an
          attempt is made to join the current thread as that would cause
          a deadlock.  It is also an error to *note join(): 7aa. a
          thread before it has been started and attempts to do so raise
          the same exception.

      -- Attribute: name

          A string used for identification purposes only.  It has no
          semantics.  Multiple threads may be given the same name.  The
          initial name is set by the constructor.

      -- Method: getName ()
      -- Method: setName ()

          Old getter/setter API for *note name: 1cc1.; use it directly
          as a property instead.

      -- Attribute: ident

          The ’thread identifier’ of this thread or ‘None’ if the thread
          has not been started.  This is a nonzero integer.  See the
          *note _thread.get_ident(): 1cc6. function.  Thread identifiers
          may be recycled when a thread exits and another thread is
          created.  The identifier is available even after the thread
          has exited.

      -- Method: is_alive ()

          Return whether the thread is alive.

          This method returns ‘True’ just before the *note run(): 1cb8.
          method starts until just after the *note run(): 1cb8. method
          terminates.  The module function *note enumerate(): 1cb5.
          returns a list of all alive threads.

      -- Attribute: daemon

          A boolean value indicating whether this thread is a daemon
          thread (True) or not (False).  This must be set before *note
          start(): 1a2a. is called, otherwise *note RuntimeError: 193.
          is raised.  Its initial value is inherited from the creating
          thread; the main thread is not a daemon thread and therefore
          all threads created in the main thread default to *note
          daemon: 1cc2. = ‘False’.

          The entire Python program exits when no alive non-daemon
          threads are left.

      -- Method: isDaemon ()
      -- Method: setDaemon ()

          Old getter/setter API for *note daemon: 1cc2.; use it directly
          as a property instead.

`CPython implementation detail:' In CPython, due to the *note Global
Interpreter Lock: 153, only one thread can execute Python code at once
(even though certain performance-oriented libraries might overcome this
limitation).  If you want your application to make better use of the
computational resources of multi-core machines, you are advised to use
*note multiprocessing: b6. or *note
concurrent.futures.ProcessPoolExecutor: 269.  However, threading is
still an appropriate model if you want to run multiple I/O-bound tasks
simultaneously.


File: python.info,  Node: Lock Objects,  Next: RLock Objects,  Prev: Thread Objects,  Up: threading --- Thread-based parallelism

5.17.1.3 Lock Objects
.....................

A primitive lock is a synchronization primitive that is not owned by a
particular thread when locked.  In Python, it is currently the lowest
level synchronization primitive available, implemented directly by the
*note _thread: 3. extension module.

A primitive lock is in one of two states, "locked" or "unlocked".  It is
created in the unlocked state.  It has two basic methods, *note
acquire(): 33d. and *note release(): 1ccb.  When the state is unlocked,
*note acquire(): 33d. changes the state to locked and returns
immediately.  When the state is locked, *note acquire(): 33d. blocks
until a call to *note release(): 1ccb. in another thread changes it to
unlocked, then the *note acquire(): 33d. call resets it to locked and
returns.  The *note release(): 1ccb. method should only be called in the
locked state; it changes the state to unlocked and returns immediately.
If an attempt is made to release an unlocked lock, a *note RuntimeError:
193. will be raised.

Locks also support the *note context management protocol: 1ccc.

When more than one thread is blocked in *note acquire(): 33d. waiting
for the state to turn to unlocked, only one thread proceeds when a *note
release(): 1ccb. call resets the state to unlocked; which one of the
waiting threads proceeds is not defined, and may vary across
implementations.

All methods are executed atomically.

 -- Class: threading.Lock

     The class implementing primitive lock objects.  Once a thread has
     acquired a lock, subsequent attempts to acquire it block, until it
     is released; any thread may release it.

     Changed in version 3.3: Changed from a factory function to a class.

      -- Method: acquire (blocking=True, timeout=-1)

          Acquire a lock, blocking or non-blocking.

          When invoked with the `blocking' argument set to ‘True’ (the
          default), block until the lock is unlocked, then set it to
          locked and return ‘True’.

          When invoked with the `blocking' argument set to ‘False’, do
          not block.  If a call with `blocking' set to ‘True’ would
          block, return ‘False’ immediately; otherwise, set the lock to
          locked and return ‘True’.

          When invoked with the floating-point `timeout' argument set to
          a positive value, block for at most the number of seconds
          specified by `timeout' and as long as the lock cannot be
          acquired.  A `timeout' argument of ‘-1’ specifies an unbounded
          wait.  It is forbidden to specify a `timeout' when `blocking'
          is false.

          The return value is ‘True’ if the lock is acquired
          successfully, ‘False’ if not (for example if the `timeout'
          expired).

          Changed in version 3.2: The `timeout' parameter is new.

          Changed in version 3.2: Lock acquires can now be interrupted
          by signals on POSIX.

      -- Method: release ()

          Release a lock.  This can be called from any thread, not only
          the thread which has acquired the lock.

          When the lock is locked, reset it to unlocked, and return.  If
          any other threads are blocked waiting for the lock to become
          unlocked, allow exactly one of them to proceed.

          When invoked on an unlocked lock, a *note RuntimeError: 193.
          is raised.

          There is no return value.


File: python.info,  Node: RLock Objects,  Next: Condition Objects,  Prev: Lock Objects,  Up: threading --- Thread-based parallelism

5.17.1.4 RLock Objects
......................

A reentrant lock is a synchronization primitive that may be acquired
multiple times by the same thread.  Internally, it uses the concepts of
"owning thread" and "recursion level" in addition to the locked/unlocked
state used by primitive locks.  In the locked state, some thread owns
the lock; in the unlocked state, no thread owns it.

To lock the lock, a thread calls its *note acquire(): 33e. method; this
returns once the thread owns the lock.  To unlock the lock, a thread
calls its *note release(): 1ccb. method.  *note acquire(): 33d./*note
release(): 1ccb. call pairs may be nested; only the final *note
release(): 1ccb. (the *note release(): 1ccb. of the outermost pair)
resets the lock to unlocked and allows another thread blocked in *note
acquire(): 33d. to proceed.

Reentrant locks also support the *note context management protocol:
1ccc.

 -- Class: threading.RLock

     This class implements reentrant lock objects.  A reentrant lock
     must be released by the thread that acquired it.  Once a thread has
     acquired a reentrant lock, the same thread may acquire it again
     without blocking; the thread must release it once for each time it
     has acquired it.

     Note that ‘RLock’ is actually a factory function which returns an
     instance of the most efficient version of the concrete RLock class
     that is supported by the platform.

      -- Method: acquire (blocking=True, timeout=-1)

          Acquire a lock, blocking or non-blocking.

          When invoked without arguments: if this thread already owns
          the lock, increment the recursion level by one, and return
          immediately.  Otherwise, if another thread owns the lock,
          block until the lock is unlocked.  Once the lock is unlocked
          (not owned by any thread), then grab ownership, set the
          recursion level to one, and return.  If more than one thread
          is blocked waiting until the lock is unlocked, only one at a
          time will be able to grab ownership of the lock.  There is no
          return value in this case.

          When invoked with the `blocking' argument set to true, do the
          same thing as when called without arguments, and return true.

          When invoked with the `blocking' argument set to false, do not
          block.  If a call without an argument would block, return
          false immediately; otherwise, do the same thing as when called
          without arguments, and return true.

          When invoked with the floating-point `timeout' argument set to
          a positive value, block for at most the number of seconds
          specified by `timeout' and as long as the lock cannot be
          acquired.  Return true if the lock has been acquired, false if
          the timeout has elapsed.

          Changed in version 3.2: The `timeout' parameter is new.

      -- Method: release ()

          Release a lock, decrementing the recursion level.  If after
          the decrement it is zero, reset the lock to unlocked (not
          owned by any thread), and if any other threads are blocked
          waiting for the lock to become unlocked, allow exactly one of
          them to proceed.  If after the decrement the recursion level
          is still nonzero, the lock remains locked and owned by the
          calling thread.

          Only call this method when the calling thread owns the lock.
          A *note RuntimeError: 193. is raised if this method is called
          when the lock is unlocked.

          There is no return value.


File: python.info,  Node: Condition Objects,  Next: Semaphore Objects,  Prev: RLock Objects,  Up: threading --- Thread-based parallelism

5.17.1.5 Condition Objects
..........................

A condition variable is always associated with some kind of lock; this
can be passed in or one will be created by default.  Passing one in is
useful when several condition variables must share the same lock.  The
lock is part of the condition object: you don’t have to track it
separately.

A condition variable obeys the *note context management protocol: 1ccc.:
using the ‘with’ statement acquires the associated lock for the duration
of the enclosed block.  The *note acquire(): 1cd3. and *note release():
1cd4. methods also call the corresponding methods of the associated
lock.

Other methods must be called with the associated lock held.  The *note
wait(): 1cbc. method releases the lock, and then blocks until another
thread awakens it by calling *note notify(): 1cd5. or *note
notify_all(): 1cd6.  Once awakened, *note wait(): 1cbc. re-acquires the
lock and returns.  It is also possible to specify a timeout.

The *note notify(): 1cd5. method wakes up one of the threads waiting for
the condition variable, if any are waiting.  The *note notify_all():
1cd6. method wakes up all threads waiting for the condition variable.

Note: the *note notify(): 1cd5. and *note notify_all(): 1cd6. methods
don’t release the lock; this means that the thread or threads awakened
will not return from their *note wait(): 1cbc. call immediately, but
only when the thread that called *note notify(): 1cd5. or *note
notify_all(): 1cd6. finally relinquishes ownership of the lock.

The typical programming style using condition variables uses the lock to
synchronize access to some shared state; threads that are interested in
a particular change of state call *note wait(): 1cbc. repeatedly until
they see the desired state, while threads that modify the state call
*note notify(): 1cd5. or *note notify_all(): 1cd6. when they change the
state in such a way that it could possibly be a desired state for one of
the waiters.  For example, the following code is a generic
producer-consumer situation with unlimited buffer capacity:

     # Consume one item
     with cv:
         while not an_item_is_available():
             cv.wait()
         get_an_available_item()

     # Produce one item
     with cv:
         make_an_item_available()
         cv.notify()

The ‘while’ loop checking for the application’s condition is necessary
because *note wait(): 1cbc. can return after an arbitrary long time, and
the condition which prompted the *note notify(): 1cd5. call may no
longer hold true.  This is inherent to multi-threaded programming.  The
*note wait_for(): 1cd7. method can be used to automate the condition
checking, and eases the computation of timeouts:

     # Consume an item
     with cv:
         cv.wait_for(an_item_is_available)
         get_an_available_item()

To choose between *note notify(): 1cd5. and *note notify_all(): 1cd6,
consider whether one state change can be interesting for only one or
several waiting threads.  E.g.  in a typical producer-consumer
situation, adding one item to the buffer only needs to wake up one
consumer thread.

 -- Class: threading.Condition (lock=None)

     This class implements condition variable objects.  A condition
     variable allows one or more threads to wait until they are notified
     by another thread.

     If the `lock' argument is given and not ‘None’, it must be a *note
     Lock: 1ccd. or *note RLock: 84f. object, and it is used as the
     underlying lock.  Otherwise, a new *note RLock: 84f. object is
     created and used as the underlying lock.

     Changed in version 3.3: changed from a factory function to a class.

      -- Method: acquire (*args)

          Acquire the underlying lock.  This method calls the
          corresponding method on the underlying lock; the return value
          is whatever that method returns.

      -- Method: release ()

          Release the underlying lock.  This method calls the
          corresponding method on the underlying lock; there is no
          return value.

      -- Method: wait (timeout=None)

          Wait until notified or until a timeout occurs.  If the calling
          thread has not acquired the lock when this method is called, a
          *note RuntimeError: 193. is raised.

          This method releases the underlying lock, and then blocks
          until it is awakened by a *note notify(): 1cd5. or *note
          notify_all(): 1cd6. call for the same condition variable in
          another thread, or until the optional timeout occurs.  Once
          awakened or timed out, it re-acquires the lock and returns.

          When the `timeout' argument is present and not ‘None’, it
          should be a floating point number specifying a timeout for the
          operation in seconds (or fractions thereof).

          When the underlying lock is an *note RLock: 84f, it is not
          released using its *note release(): 1cd4. method, since this
          may not actually unlock the lock when it was acquired multiple
          times recursively.  Instead, an internal interface of the
          *note RLock: 84f. class is used, which really unlocks it even
          when it has been recursively acquired several times.  Another
          internal interface is then used to restore the recursion level
          when the lock is reacquired.

          The return value is ‘True’ unless a given `timeout' expired,
          in which case it is ‘False’.

          Changed in version 3.2: Previously, the method always returned
          ‘None’.

      -- Method: wait_for (predicate, timeout=None)

          Wait until a condition evaluates to True.  `predicate' should
          be a callable which result will be interpreted as a boolean
          value.  A `timeout' may be provided giving the maximum time to
          wait.

          This utility method may call *note wait(): 1cbc. repeatedly
          until the predicate is satisfied, or until a timeout occurs.
          The return value is the last return value of the predicate and
          will evaluate to ‘False’ if the method timed out.

          Ignoring the timeout feature, calling this method is roughly
          equivalent to writing:

               while not predicate():
                   cv.wait()

          Therefore, the same rules apply as with *note wait(): 1cbc.:
          The lock must be held when called and is re-acquired on
          return.  The predicate is evaluated with the lock held.

          New in version 3.2.

      -- Method: notify (n=1)

          By default, wake up one thread waiting on this condition, if
          any.  If the calling thread has not acquired the lock when
          this method is called, a *note RuntimeError: 193. is raised.

          This method wakes up at most `n' of the threads waiting for
          the condition variable; it is a no-op if no threads are
          waiting.

          The current implementation wakes up exactly `n' threads, if at
          least `n' threads are waiting.  However, it’s not safe to rely
          on this behavior.  A future, optimized implementation may
          occasionally wake up more than `n' threads.

          Note: an awakened thread does not actually return from its
          *note wait(): 1cbc. call until it can reacquire the lock.
          Since *note notify(): 1cd5. does not release the lock, its
          caller should.

      -- Method: notify_all ()

          Wake up all threads waiting on this condition.  This method
          acts like *note notify(): 1cd5, but wakes up all waiting
          threads instead of one.  If the calling thread has not
          acquired the lock when this method is called, a *note
          RuntimeError: 193. is raised.


File: python.info,  Node: Semaphore Objects,  Next: Event Objects,  Prev: Condition Objects,  Up: threading --- Thread-based parallelism

5.17.1.6 Semaphore Objects
..........................

This is one of the oldest synchronization primitives in the history of
computer science, invented by the early Dutch computer scientist Edsger
W. Dijkstra (he used the names ‘P()’ and ‘V()’ instead of *note
acquire(): 84a. and *note release(): 1cda.).

A semaphore manages an internal counter which is decremented by each
*note acquire(): 84a. call and incremented by each *note release():
1cda. call.  The counter can never go below zero; when *note acquire():
84a. finds that it is zero, it blocks, waiting until some other thread
calls *note release(): 1cda.

Semaphores also support the *note context management protocol: 1ccc.

 -- Class: threading.Semaphore (value=1)

     This class implements semaphore objects.  A semaphore manages a
     counter representing the number of *note release(): 1cda. calls
     minus the number of *note acquire(): 84a. calls, plus an initial
     value.  The *note acquire(): 84a. method blocks if necessary until
     it can return without making the counter negative.  If not given,
     `value' defaults to 1.

     The optional argument gives the initial `value' for the internal
     counter; it defaults to ‘1’.  If the `value' given is less than 0,
     *note ValueError: 19c. is raised.

     Changed in version 3.3: changed from a factory function to a class.

      -- Method: acquire (blocking=True, timeout=None)

          Acquire a semaphore.

          When invoked without arguments: if the internal counter is
          larger than zero on entry, decrement it by one and return
          immediately.  If it is zero on entry, block, waiting until
          some other thread has called *note release(): 1cda. to make it
          larger than zero.  This is done with proper interlocking so
          that if multiple *note acquire(): 84a. calls are blocked,
          *note release(): 1cda. will wake exactly one of them up.  The
          implementation may pick one at random, so the order in which
          blocked threads are awakened should not be relied on.  Returns
          true (or blocks indefinitely).

          When invoked with `blocking' set to false, do not block.  If a
          call without an argument would block, return false
          immediately; otherwise, do the same thing as when called
          without arguments, and return true.

          When invoked with a `timeout' other than None, it will block
          for at most `timeout' seconds.  If acquire does not complete
          successfully in that interval, return false.  Return true
          otherwise.

          Changed in version 3.2: The `timeout' parameter is new.

      -- Method: release ()

          Release a semaphore, incrementing the internal counter by one.
          When it was zero on entry and another thread is waiting for it
          to become larger than zero again, wake up that thread.

 -- Class: threading.BoundedSemaphore (value=1)

     Class implementing bounded semaphore objects.  A bounded semaphore
     checks to make sure its current value doesn’t exceed its initial
     value.  If it does, *note ValueError: 19c. is raised.  In most
     situations semaphores are used to guard resources with limited
     capacity.  If the semaphore is released too many times it’s a sign
     of a bug.  If not given, `value' defaults to 1.

     Changed in version 3.3: changed from a factory function to a class.

* Menu:

* Semaphore Example:: 


File: python.info,  Node: Semaphore Example,  Up: Semaphore Objects

5.17.1.7 ‘Semaphore’ Example
............................

Semaphores are often used to guard resources with limited capacity, for
example, a database server.  In any situation where the size of the
resource is fixed, you should use a bounded semaphore.  Before spawning
any worker threads, your main thread would initialize the semaphore:

     maxconnections = 5
     # ...
     pool_sema = BoundedSemaphore(value=maxconnections)

Once spawned, worker threads call the semaphore’s acquire and release
methods when they need to connect to the server:

     with pool_sema:
         conn = connectdb()
         try:
             # ... use connection ...
         finally:
             conn.close()

The use of a bounded semaphore reduces the chance that a programming
error which causes the semaphore to be released more than it’s acquired
will go undetected.


File: python.info,  Node: Event Objects,  Next: Timer Objects,  Prev: Semaphore Objects,  Up: threading --- Thread-based parallelism

5.17.1.8 Event Objects
......................

This is one of the simplest mechanisms for communication between
threads: one thread signals an event and other threads wait for it.

An event object manages an internal flag that can be set to true with
the *note set(): 1cdf. method and reset to false with the *note clear():
1ce0. method.  The *note wait(): 92d. method blocks until the flag is
true.

 -- Class: threading.Event

     Class implementing event objects.  An event manages a flag that can
     be set to true with the *note set(): 1cdf. method and reset to
     false with the *note clear(): 1ce0. method.  The *note wait(): 92d.
     method blocks until the flag is true.  The flag is initially false.

     Changed in version 3.3: changed from a factory function to a class.

      -- Method: is_set ()

          Return true if and only if the internal flag is true.

      -- Method: set ()

          Set the internal flag to true.  All threads waiting for it to
          become true are awakened.  Threads that call *note wait():
          92d. once the flag is true will not block at all.

      -- Method: clear ()

          Reset the internal flag to false.  Subsequently, threads
          calling *note wait(): 92d. will block until *note set(): 1cdf.
          is called to set the internal flag to true again.

      -- Method: wait (timeout=None)

          Block until the internal flag is true.  If the internal flag
          is true on entry, return immediately.  Otherwise, block until
          another thread calls *note set(): 1cdf. to set the flag to
          true, or until the optional timeout occurs.

          When the timeout argument is present and not ‘None’, it should
          be a floating point number specifying a timeout for the
          operation in seconds (or fractions thereof).

          This method returns true if and only if the internal flag has
          been set to true, either before the wait call or after the
          wait starts, so it will always return ‘True’ except if a
          timeout is given and the operation times out.

          Changed in version 3.1: Previously, the method always returned
          ‘None’.


File: python.info,  Node: Timer Objects,  Next: Barrier Objects,  Prev: Event Objects,  Up: threading --- Thread-based parallelism

5.17.1.9 Timer Objects
......................

This class represents an action that should be run only after a certain
amount of time has passed — a timer.  *note Timer: 6e8. is a subclass of
*note Thread: 4f0. and as such also functions as an example of creating
custom threads.

Timers are started, as with threads, by calling their ‘start()’ method.
The timer can be stopped (before its action has begun) by calling the
*note cancel(): 1ce4. method.  The interval the timer will wait before
executing its action may not be exactly the same as the interval
specified by the user.

For example:

     def hello():
         print("hello, world")

     t = Timer(30.0, hello)
     t.start() # after 30 seconds, "hello, world" will be printed

 -- Class: threading.Timer (interval, function, args=None, kwargs=None)

     Create a timer that will run `function' with arguments `args' and
     keyword arguments `kwargs', after `interval' seconds have passed.
     If `args' is None (the default) then an empty list will be used.
     If `kwargs' is None (the default) then an empty dict will be used.

     Changed in version 3.3: changed from a factory function to a class.

      -- Method: cancel ()

          Stop the timer, and cancel the execution of the timer’s
          action.  This will only work if the timer is still in its
          waiting stage.


File: python.info,  Node: Barrier Objects,  Next: Using locks conditions and semaphores in the with statement,  Prev: Timer Objects,  Up: threading --- Thread-based parallelism

5.17.1.10 Barrier Objects
.........................

New in version 3.2.

This class provides a simple synchronization primitive for use by a
fixed number of threads that need to wait for each other.  Each of the
threads tries to pass the barrier by calling the *note wait(): 1ce6.
method and will block until all of the threads have made the call.  At
this points, the threads are released simultaneously.

The barrier can be reused any number of times for the same number of
threads.

As an example, here is a simple way to synchronize a client and server
thread:

     b = Barrier(2, timeout=5)

     def server():
         start_server()
         b.wait()
         while True:
             connection = accept_connection()
             process_server_connection(connection)

     def client():
         b.wait()
         while True:
             connection = make_connection()
             process_client_connection(connection)

 -- Class: threading.Barrier (parties, action=None, timeout=None)

     Create a barrier object for `parties' number of threads.  An
     `action', when provided, is a callable to be called by one of the
     threads when they are released.  `timeout' is the default timeout
     value if none is specified for the *note wait(): 1ce6. method.

      -- Method: wait (timeout=None)

          Pass the barrier.  When all the threads party to the barrier
          have called this function, they are all released
          simultaneously.  If a `timeout' is provided, it is used in
          preference to any that was supplied to the class constructor.

          The return value is an integer in the range 0 to `parties' –
          1, different for each thread.  This can be used to select a
          thread to do some special housekeeping, e.g.:

               i = barrier.wait()
               if i == 0:
                   # Only one thread needs to print this
                   print("passed the barrier")

          If an `action' was provided to the constructor, one of the
          threads will have called it prior to being released.  Should
          this call raise an error, the barrier is put into the broken
          state.

          If the call times out, the barrier is put into the broken
          state.

          This method may raise a *note BrokenBarrierError: 7ab.
          exception if the barrier is broken or reset while a thread is
          waiting.

      -- Method: reset ()

          Return the barrier to the default, empty state.  Any threads
          waiting on it will receive the *note BrokenBarrierError: 7ab.
          exception.

          Note that using this function may can require some external
          synchronization if there are other threads whose state is
          unknown.  If a barrier is broken it may be better to just
          leave it and create a new one.

      -- Method: abort ()

          Put the barrier into a broken state.  This causes any active
          or future calls to *note wait(): 1ce6. to fail with the *note
          BrokenBarrierError: 7ab.  Use this for example if one of the
          needs to abort, to avoid deadlocking the application.

          It may be preferable to simply create the barrier with a
          sensible `timeout' value to automatically guard against one of
          the threads going awry.

      -- Attribute: parties

          The number of threads required to pass the barrier.

      -- Attribute: n_waiting

          The number of threads currently waiting in the barrier.

      -- Attribute: broken

          A boolean that is ‘True’ if the barrier is in the broken
          state.

 -- Exception: threading.BrokenBarrierError

     This exception, a subclass of *note RuntimeError: 193, is raised
     when the *note Barrier: 7a9. object is reset or broken.


File: python.info,  Node: Using locks conditions and semaphores in the with statement,  Prev: Barrier Objects,  Up: threading --- Thread-based parallelism

5.17.1.11 Using locks, conditions, and semaphores in the ‘with’ statement
.........................................................................

All of the objects provided by this module that have ‘acquire()’ and
‘release()’ methods can be used as context managers for a *note with:
29d. statement.  The ‘acquire()’ method will be called when the block is
entered, and ‘release()’ will be called when the block is exited.
Hence, the following snippet:

     with some_lock:
         # do something...

is equivalent to:

     some_lock.acquire()
     try:
         # do something...
     finally:
         some_lock.release()

Currently, *note Lock: 1ccd, *note RLock: 84f, *note Condition: 6e4,
*note Semaphore: 6e5, and *note BoundedSemaphore: 6e6. objects may be
used as *note with: 29d. statement context managers.


File: python.info,  Node: multiprocessing --- Process-based parallelism,  Next: The concurrent package,  Prev: threading --- Thread-based parallelism,  Up: Concurrent Execution

5.17.2 ‘multiprocessing’ — Process-based parallelism
----------------------------------------------------

* Menu:

* Introduction: Introduction<8>. 
* Reference:: 
* Programming guidelines:: 
* Examples: Examples<9>. 


File: python.info,  Node: Introduction<8>,  Next: Reference,  Up: multiprocessing --- Process-based parallelism

5.17.2.1 Introduction
.....................

*note multiprocessing: b6. is a package that supports spawning processes
using an API similar to the *note threading: 106. module.  The *note
multiprocessing: b6. package offers both local and remote concurrency,
effectively side-stepping the *note Global Interpreter Lock: 153. by
using subprocesses instead of threads.  Due to this, the *note
multiprocessing: b6. module allows the programmer to fully leverage
multiple processors on a given machine.  It runs on both Unix and
Windows.

The *note multiprocessing: b6. module also introduces APIs which do not
have analogs in the *note threading: 106. module.  A prime example of
this is the *note Pool: 474. object which offers a convenient means of
parallelizing the execution of a function across multiple input values,
distributing the input data across processes (data parallelism).  The
following example demonstrates the common practice of defining such
functions in a module so that child processes can successfully import
that module.  This basic example of data parallelism using *note Pool:
474,

     from multiprocessing import Pool

     def f(x):
         return x*x

     if __name__ == '__main__':
         with Pool(5) as p:
             print(p.map(f, [1, 2, 3]))

will print to standard output

     [1, 4, 9]

* Menu:

* The Process class:: 
* Contexts and start methods:: 
* Exchanging objects between processes:: 
* Synchronization between processes:: 
* Sharing state between processes:: 
* Using a pool of workers:: 


File: python.info,  Node: The Process class,  Next: Contexts and start methods,  Up: Introduction<8>

5.17.2.2 The ‘Process’ class
............................

In *note multiprocessing: b6, processes are spawned by creating a *note
Process: 655. object and then calling its *note start(): 1cf1. method.
*note Process: 655. follows the API of *note threading.Thread: 4f0.  A
trivial example of a multiprocess program is

     from multiprocessing import Process

     def f(name):
         print('hello', name)

     if __name__ == '__main__':
         p = Process(target=f, args=('bob',))
         p.start()
         p.join()

To show the individual process IDs involved, here is an expanded
example:

     from multiprocessing import Process
     import os

     def info(title):
         print(title)
         print('module name:', __name__)
         print('parent process:', os.getppid())
         print('process id:', os.getpid())

     def f(name):
         info('function f')
         print('hello', name)

     if __name__ == '__main__':
         info('main line')
         p = Process(target=f, args=('bob',))
         p.start()
         p.join()

For an explanation of why the ‘if __name__ == '__main__'’ part is
necessary, see *note Programming guidelines: 1cf2.


File: python.info,  Node: Contexts and start methods,  Next: Exchanging objects between processes,  Prev: The Process class,  Up: Introduction<8>

5.17.2.3 Contexts and start methods
...................................

Depending on the platform, *note multiprocessing: b6. supports three
ways to start a process.  These `start methods' are

     `spawn'

          The parent process starts a fresh python interpreter process.
          The child process will only inherit those resources necessary
          to run the process objects *note run(): 1cf4. method.  In
          particular, unnecessary file descriptors and handles from the
          parent process will not be inherited.  Starting a process
          using this method is rather slow compared to using `fork' or
          `forkserver'.

          Available on Unix and Windows.  The default on Windows.

     `fork'

          The parent process uses *note os.fork(): 57b. to fork the
          Python interpreter.  The child process, when it begins, is
          effectively identical to the parent process.  All resources of
          the parent are inherited by the child process.  Note that
          safely forking a multithreaded process is problematic.

          Available on Unix only.  The default on Unix.

     `forkserver'

          When the program starts and selects the `forkserver' start
          method, a server process is started.  From then on, whenever a
          new process is needed, the parent process connects to the
          server and requests that it fork a new process.  The fork
          server process is single threaded so it is safe for it to use
          *note os.fork(): 57b.  No unnecessary resources are inherited.

          Available on Unix platforms which support passing file
          descriptors over Unix pipes.

Changed in version 3.4: `spawn' added on all unix platforms, and
`forkserver' added for some unix platforms.  Child processes no longer
inherit all of the parents inheritable handles on Windows.

On Unix using the `spawn' or `forkserver' start methods will also start
a `semaphore tracker' process which tracks the unlinked named semaphores
created by processes of the program.  When all processes have exited the
semaphore tracker unlinks any remaining semaphores.  Usually there
should be none, but if a process was killed by a signal there may some
"leaked" semaphores.  (Unlinking the named semaphores is a serious
matter since the system allows only a limited number, and they will not
be automatically unlinked until the next reboot.)

To select a start method you use the *note set_start_method(): 472. in
the ‘if __name__ == '__main__'’ clause of the main module.  For example:

     import multiprocessing as mp

     def foo(q):
         q.put('hello')

     if __name__ == '__main__':
         mp.set_start_method('spawn')
         q = mp.Queue()
         p = mp.Process(target=foo, args=(q,))
         p.start()
         print(q.get())
         p.join()

*note set_start_method(): 472. should not be used more than once in the
program.

Alternatively, you can use *note get_context(): 473. to obtain a context
object.  Context objects have the same API as the multiprocessing
module, and allow one to use multiple start methods in the same program.

     import multiprocessing as mp

     def foo(q):
         q.put('hello')

     if __name__ == '__main__':
         ctx = mp.get_context('spawn')
         q = ctx.Queue()
         p = ctx.Process(target=foo, args=(q,))
         p.start()
         print(q.get())
         p.join()

Note that objects related to one context may not be compatible with
processes for a different context.  In particular, locks created using
the `fork' context cannot be passed to a processes started using the
`spawn' or `forkserver' start methods.

A library which wants to use a particular start method should probably
use *note get_context(): 473. to avoid interfering with the choice of
the library user.


File: python.info,  Node: Exchanging objects between processes,  Next: Synchronization between processes,  Prev: Contexts and start methods,  Up: Introduction<8>

5.17.2.4 Exchanging objects between processes
.............................................

*note multiprocessing: b6. supports two types of communication channel
between processes:

`Queues'

     The *note Queue: 1cf6. class is a near clone of *note queue.Queue:
     cc5.  For example:

          from multiprocessing import Process, Queue

          def f(q):
              q.put([42, None, 'hello'])

          if __name__ == '__main__':
              q = Queue()
              p = Process(target=f, args=(q,))
              p.start()
              print(q.get())    # prints "[42, None, 'hello']"
              p.join()

     Queues are thread and process safe.

`Pipes'

     The *note Pipe(): 1cf7. function returns a pair of connection
     objects connected by a pipe which by default is duplex (two-way).
     For example:

          from multiprocessing import Process, Pipe

          def f(conn):
              conn.send([42, None, 'hello'])
              conn.close()

          if __name__ == '__main__':
              parent_conn, child_conn = Pipe()
              p = Process(target=f, args=(child_conn,))
              p.start()
              print(parent_conn.recv())   # prints "[42, None, 'hello']"
              p.join()

     The two connection objects returned by *note Pipe(): 1cf7.
     represent the two ends of the pipe.  Each connection object has
     *note send(): 1cf8. and *note recv(): 1cf9. methods (among others).
     Note that data in a pipe may become corrupted if two processes (or
     threads) try to read from or write to the `same' end of the pipe at
     the same time.  Of course there is no risk of corruption from
     processes using different ends of the pipe at the same time.


File: python.info,  Node: Synchronization between processes,  Next: Sharing state between processes,  Prev: Exchanging objects between processes,  Up: Introduction<8>

5.17.2.5 Synchronization between processes
..........................................

*note multiprocessing: b6. contains equivalents of all the
synchronization primitives from *note threading: 106.  For instance one
can use a lock to ensure that only one process prints to standard output
at a time:

     from multiprocessing import Process, Lock

     def f(l, i):
         l.acquire()
         try:
             print('hello world', i)
         finally:
             l.release()

     if __name__ == '__main__':
         lock = Lock()

         for num in range(10):
             Process(target=f, args=(lock, num)).start()

Without using the lock output from the different processes is liable to
get all mixed up.


File: python.info,  Node: Sharing state between processes,  Next: Using a pool of workers,  Prev: Synchronization between processes,  Up: Introduction<8>

5.17.2.6 Sharing state between processes
........................................

As mentioned above, when doing concurrent programming it is usually best
to avoid using shared state as far as possible.  This is particularly
true when using multiple processes.

However, if you really do need to use some shared data then *note
multiprocessing: b6. provides a couple of ways of doing so.

`Shared memory'

     Data can be stored in a shared memory map using *note Value: 1cfc.
     or *note Array: 1cfd.  For example, the following code

          from multiprocessing import Process, Value, Array

          def f(n, a):
              n.value = 3.1415927
              for i in range(len(a)):
                  a[i] = -a[i]

          if __name__ == '__main__':
              num = Value('d', 0.0)
              arr = Array('i', range(10))

              p = Process(target=f, args=(num, arr))
              p.start()
              p.join()

              print(num.value)
              print(arr[:])

     will print

          3.1415927
          [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]

     The ‘'d'’ and ‘'i'’ arguments used when creating ‘num’ and ‘arr’
     are typecodes of the kind used by the *note array: 7. module: ‘'d'’
     indicates a double precision float and ‘'i'’ indicates a signed
     integer.  These shared objects will be process and thread-safe.

     For more flexibility in using shared memory one can use the *note
     multiprocessing.sharedctypes: bb. module which supports the
     creation of arbitrary ctypes objects allocated from shared memory.

`Server process'

     A manager object returned by ‘Manager()’ controls a server process
     which holds Python objects and allows other processes to manipulate
     them using proxies.

     A manager returned by ‘Manager()’ will support types *note list:
     25d, *note dict: 3b0, *note Namespace: 1cfe, *note Lock: 1cff,
     *note RLock: 1d00, *note Semaphore: 1d01, *note BoundedSemaphore:
     1d02, *note Condition: 1d03, *note Event: 1d04, *note Barrier:
     1d05, *note Queue: 1cf6, *note Value: 1cfc. and *note Array: 1cfd.
     For example,

          from multiprocessing import Process, Manager

          def f(d, l):
              d[1] = '1'
              d['2'] = 2
              d[0.25] = None
              l.reverse()

          if __name__ == '__main__':
              with Manager() as manager:
                  d = manager.dict()
                  l = manager.list(range(10))

                  p = Process(target=f, args=(d, l))
                  p.start()
                  p.join()

                  print(d)
                  print(l)

     will print

          {0.25: None, 1: '1', '2': 2}
          [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]

     Server process managers are more flexible than using shared memory
     objects because they can be made to support arbitrary object types.
     Also, a single manager can be shared by processes on different
     computers over a network.  They are, however, slower than using
     shared memory.


File: python.info,  Node: Using a pool of workers,  Prev: Sharing state between processes,  Up: Introduction<8>

5.17.2.7 Using a pool of workers
................................

The *note Pool: 474. class represents a pool of worker processes.  It
has methods which allows tasks to be offloaded to the worker processes
in a few different ways.

For example:

     from multiprocessing import Pool, TimeoutError
     import time
     import os

     def f(x):
         return x*x

     if __name__ == '__main__':
         # start 4 worker processes
         with Pool(processes=4) as pool:

             # print "[0, 1, 4,..., 81]"
             print(pool.map(f, range(10)))

             # print same numbers in arbitrary order
             for i in pool.imap_unordered(f, range(10)):
                 print(i)

             # evaluate "f(20)" asynchronously
             res = pool.apply_async(f, (20,))      # runs in *only* one process
             print(res.get(timeout=1))             # prints "400"

             # evaluate "os.getpid()" asynchronously
             res = pool.apply_async(os.getpid, ()) # runs in *only* one process
             print(res.get(timeout=1))             # prints the PID of that process

             # launching multiple evaluations asynchronously *may* use more processes
             multiple_results = [pool.apply_async(os.getpid, ()) for i in range(4)]
             print([res.get(timeout=1) for res in multiple_results])

             # make a single worker sleep for 10 secs
             res = pool.apply_async(time.sleep, (10,))
             try:
                 print(res.get(timeout=1))
             except TimeoutError:
                 print("We lacked patience and got a multiprocessing.TimeoutError")

             print("For the moment, the pool remains available for more work")

         # exiting the 'with'-block has stopped the pool
         print("Now the pool is closed and no longer available")

Note that the methods of a pool should only ever be used by the process
which created it.

     Note: Functionality within this package requires that the
     ‘__main__’ module be importable by the children.  This is covered
     in *note Programming guidelines: 1cf2. however it is worth pointing
     out here.  This means that some examples, such as the *note
     multiprocessing.pool.Pool: 474. examples will not work in the
     interactive interpreter.  For example:

          >>> from multiprocessing import Pool
          >>> p = Pool(5)
          >>> def f(x):
          ...     return x*x
          ...
          >>> p.map(f, [1,2,3])
          Process PoolWorker-1:
          Process PoolWorker-2:
          Process PoolWorker-3:
          Traceback (most recent call last):
          Traceback (most recent call last):
          Traceback (most recent call last):
          AttributeError: 'module' object has no attribute 'f'
          AttributeError: 'module' object has no attribute 'f'
          AttributeError: 'module' object has no attribute 'f'

     (If you try this it will actually output three full tracebacks
     interleaved in a semi-random fashion, and then you may have to stop
     the master process somehow.)


File: python.info,  Node: Reference,  Next: Programming guidelines,  Prev: Introduction<8>,  Up: multiprocessing --- Process-based parallelism

5.17.2.8 Reference
..................

The *note multiprocessing: b6. package mostly replicates the API of the
*note threading: 106. module.

* Menu:

* Process and exceptions:: 
* Pipes and Queues:: 
* Miscellaneous: Miscellaneous<3>. 
* Connection Objects: Connection Objects<2>. 
* Synchronization primitives:: 
* Shared ctypes Objects:: 
* Managers:: 
* Proxy Objects:: 
* Process Pools:: 
* Listeners and Clients:: 
* Authentication keys:: 
* Logging: Logging<2>. 
* The multiprocessing.dummy module: The multiprocessing dummy module. 


File: python.info,  Node: Process and exceptions,  Next: Pipes and Queues,  Up: Reference

5.17.2.9 ‘Process’ and exceptions
.................................

 -- Class: multiprocessing.Process (group=None, target=None, name=None,
          args=(), kwargs={}, *, daemon=None)

     Process objects represent activity that is run in a separate
     process.  The *note Process: 655. class has equivalents of all the
     methods of *note threading.Thread: 4f0.

     The constructor should always be called with keyword arguments.
     `group' should always be ‘None’; it exists solely for compatibility
     with *note threading.Thread: 4f0.  `target' is the callable object
     to be invoked by the *note run(): 1cf4. method.  It defaults to
     ‘None’, meaning nothing is called.  `name' is the process name (see
     *note name: 1d09. for more details).  `args' is the argument tuple
     for the target invocation.  `kwargs' is a dictionary of keyword
     arguments for the target invocation.  If provided, the keyword-only
     `daemon' argument sets the process *note daemon: 1d0a. flag to
     ‘True’ or ‘False’.  If ‘None’ (the default), this flag will be
     inherited from the creating process.

     By default, no arguments are passed to `target'.

     If a subclass overrides the constructor, it must make sure it
     invokes the base class constructor (‘Process.__init__()’) before
     doing anything else to the process.

     Changed in version 3.3: Added the `daemon' argument.

      -- Method: run ()

          Method representing the process’s activity.

          You may override this method in a subclass.  The standard
          *note run(): 1cf4. method invokes the callable object passed
          to the object’s constructor as the target argument, if any,
          with sequential and keyword arguments taken from the `args'
          and `kwargs' arguments, respectively.

      -- Method: start ()

          Start the process’s activity.

          This must be called at most once per process object.  It
          arranges for the object’s *note run(): 1cf4. method to be
          invoked in a separate process.

      -- Method: join ([timeout])

          If the optional argument `timeout' is ‘None’ (the default),
          the method blocks until the process whose *note join(): 1d0b.
          method is called terminates.  If `timeout' is a positive
          number, it blocks at most `timeout' seconds.

          A process can be joined many times.

          A process cannot join itself because this would cause a
          deadlock.  It is an error to attempt to join a process before
          it has been started.

      -- Attribute: name

          The process’s name.  The name is a string used for
          identification purposes only.  It has no semantics.  Multiple
          processes may be given the same name.

          The initial name is set by the constructor.  If no explicit
          name is provided to the constructor, a name of the form
          ’Process-N[1]:N[2]:...:N[k]’ is constructed, where each N[k]
          is the N-th child of its parent.

      -- Method: is_alive ()

          Return whether the process is alive.

          Roughly, a process object is alive from the moment the *note
          start(): 1cf1. method returns until the child process
          terminates.

      -- Attribute: daemon

          The process’s daemon flag, a Boolean value.  This must be set
          before *note start(): 1cf1. is called.

          The initial value is inherited from the creating process.

          When a process exits, it attempts to terminate all of its
          daemonic child processes.

          Note that a daemonic process is not allowed to create child
          processes.  Otherwise a daemonic process would leave its
          children orphaned if it gets terminated when its parent
          process exits.  Additionally, these are `not' Unix daemons or
          services, they are normal processes that will be terminated
          (and not joined) if non-daemonic processes have exited.

     In addition to the *note threading.Thread: 4f0. API, *note Process:
     655. objects also support the following attributes and methods:

      -- Attribute: pid

          Return the process ID. Before the process is spawned, this
          will be ‘None’.

      -- Attribute: exitcode

          The child’s exit code.  This will be ‘None’ if the process has
          not yet terminated.  A negative value `-N' indicates that the
          child was terminated by signal `N'.

      -- Attribute: authkey

          The process’s authentication key (a byte string).

          When *note multiprocessing: b6. is initialized the main
          process is assigned a random string using *note os.urandom():
          2df.

          When a *note Process: 655. object is created, it will inherit
          the authentication key of its parent process, although this
          may be changed by setting *note authkey: 1d0f. to another byte
          string.

          See *note Authentication keys: 1d10.

      -- Attribute: sentinel

          A numeric handle of a system object which will become "ready"
          when the process ends.

          You can use this value if you want to wait on several events
          at once using *note multiprocessing.connection.wait(): 653.
          Otherwise calling *note join(): 1d0b. is simpler.

          On Windows, this is an OS handle usable with the
          ‘WaitForSingleObject’ and ‘WaitForMultipleObjects’ family of
          API calls.  On Unix, this is a file descriptor usable with
          primitives from the *note select: e3. module.

          New in version 3.3.

      -- Method: terminate ()

          Terminate the process.  On Unix this is done using the
          ‘SIGTERM’ signal; on Windows ‘TerminateProcess()’ is used.
          Note that exit handlers and finally clauses, etc., will not be
          executed.

          Note that descendant processes of the process will `not' be
          terminated – they will simply become orphaned.

               Warning: If this method is used when the associated
               process is using a pipe or queue then the pipe or queue
               is liable to become corrupted and may become unusable by
               other process.  Similarly, if the process has acquired a
               lock or semaphore etc.  then terminating it is liable to
               cause other processes to deadlock.

     Note that the *note start(): 1cf1, *note join(): 1d0b, *note
     is_alive(): 1d0c, *note terminate(): 1d11. and *note exitcode:
     1d0e. methods should only be called by the process that created the
     process object.

     Example usage of some of the methods of *note Process: 655.:

          >>> import multiprocessing, time, signal
          >>> p = multiprocessing.Process(target=time.sleep, args=(1000,))
          >>> print(p, p.is_alive())
          <Process(Process-1, initial)> False
          >>> p.start()
          >>> print(p, p.is_alive())
          <Process(Process-1, started)> True
          >>> p.terminate()
          >>> time.sleep(0.1)
          >>> print(p, p.is_alive())
          <Process(Process-1, stopped[SIGTERM])> False
          >>> p.exitcode == -signal.SIGTERM
          True

 -- Exception: multiprocessing.ProcessError

     The base class of all *note multiprocessing: b6. exceptions.

 -- Exception: multiprocessing.BufferTooShort

     Exception raised by *note Connection.recv_bytes_into(): 1d14. when
     the supplied buffer object is too small for the message read.

     If ‘e’ is an instance of *note BufferTooShort: 1d13. then
     ‘e.args[0]’ will give the message as a byte string.

 -- Exception: multiprocessing.AuthenticationError

     Raised when there is an authentication error.

 -- Exception: multiprocessing.TimeoutError

     Raised by methods with a timeout when the timeout expires.


File: python.info,  Node: Pipes and Queues,  Next: Miscellaneous<3>,  Prev: Process and exceptions,  Up: Reference

5.17.2.10 Pipes and Queues
..........................

When using multiple processes, one generally uses message passing for
communication between processes and avoids having to use any
synchronization primitives like locks.

For passing messages one can use *note Pipe(): 1cf7. (for a connection
between two processes) or a queue (which allows multiple producers and
consumers).

The *note Queue: 1cf6, *note SimpleQueue: 1d18. and *note JoinableQueue:
1d19. types are multi-producer, multi-consumer FIFO queues modelled on
the *note queue.Queue: cc5. class in the standard library.  They differ
in that *note Queue: 1cf6. lacks the *note task_done(): 1d1a. and *note
join(): 1d1b. methods introduced into Python 2.5’s *note queue.Queue:
cc5. class.

If you use *note JoinableQueue: 1d19. then you `must' call *note
JoinableQueue.task_done(): 1d1c. for each task removed from the queue or
else the semaphore used to count the number of unfinished tasks may
eventually overflow, raising an exception.

Note that one can also create a shared queue by using a manager object –
see *note Managers: 1d1d.

     Note: *note multiprocessing: b6. uses the usual *note queue.Empty:
     1d1e. and *note queue.Full: 1d1f. exceptions to signal a timeout.
     They are not available in the *note multiprocessing: b6. namespace
     so you need to import them from *note queue: d8.

     Note: When an object is put on a queue, the object is pickled and a
     background thread later flushes the pickled data to an underlying
     pipe.  This has some consequences which are a little surprising,
     but should not cause any practical difficulties – if they really
     bother you then you can instead use a queue created with a *note
     manager: 1d1d.

       1. After putting an object on an empty queue there may be an
          infinitesimal delay before the queue’s *note empty(): 1d20.
          method returns *note False: 60d. and *note get_nowait(): 1d21.
          can return without raising *note queue.Empty: 1d1e.

       2. If multiple processes are enqueuing objects, it is possible
          for the objects to be received at the other end out-of-order.
          However, objects enqueued by the same process will always be
          in the expected order with respect to each other.

     Warning: If a process is killed using *note Process.terminate():
     1d11. or *note os.kill(): 96e. while it is trying to use a *note
     Queue: 1cf6, then the data in the queue is likely to become
     corrupted.  This may cause any other process to get an exception
     when it tries to use the queue later on.

     Warning: As mentioned above, if a child process has put items on a
     queue (and it has not used *note JoinableQueue.cancel_join_thread:
     1d22.), then that process will not terminate until all buffered
     items have been flushed to the pipe.

     This means that if you try joining that process you may get a
     deadlock unless you are sure that all items which have been put on
     the queue have been consumed.  Similarly, if the child process is
     non-daemonic then the parent process may hang on exit when it tries
     to join all its non-daemonic children.

     Note that a queue created using a manager does not have this issue.
     See *note Programming guidelines: 1cf2.

For an example of the usage of queues for interprocess communication see
*note Examples: 1d23.

 -- Function: multiprocessing.Pipe ([duplex])

     Returns a pair ‘(conn1, conn2)’ of *note Connection: 654. objects
     representing the ends of a pipe.

     If `duplex' is ‘True’ (the default) then the pipe is bidirectional.
     If `duplex' is ‘False’ then the pipe is unidirectional: ‘conn1’ can
     only be used for receiving messages and ‘conn2’ can only be used
     for sending messages.

 -- Class: multiprocessing.Queue ([maxsize])

     Returns a process shared queue implemented using a pipe and a few
     locks/semaphores.  When a process first puts an item on the queue a
     feeder thread is started which transfers objects from a buffer into
     the pipe.

     The usual *note queue.Empty: 1d1e. and *note queue.Full: 1d1f.
     exceptions from the standard library’s *note queue: d8. module are
     raised to signal timeouts.

     *note Queue: 1cf6. implements all the methods of *note queue.Queue:
     cc5. except for *note task_done(): 1d1a. and *note join(): 1d1b.

      -- Method: qsize ()

          Return the approximate size of the queue.  Because of
          multithreading/multiprocessing semantics, this number is not
          reliable.

          Note that this may raise *note NotImplementedError: 569. on
          Unix platforms like Mac OS X where ‘sem_getvalue()’ is not
          implemented.

      -- Method: empty ()

          Return ‘True’ if the queue is empty, ‘False’ otherwise.
          Because of multithreading/multiprocessing semantics, this is
          not reliable.

      -- Method: full ()

          Return ‘True’ if the queue is full, ‘False’ otherwise.
          Because of multithreading/multiprocessing semantics, this is
          not reliable.

      -- Method: put (obj[, block[, timeout]])

          Put obj into the queue.  If the optional argument `block' is
          ‘True’ (the default) and `timeout' is ‘None’ (the default),
          block if necessary until a free slot is available.  If
          `timeout' is a positive number, it blocks at most `timeout'
          seconds and raises the *note queue.Full: 1d1f. exception if no
          free slot was available within that time.  Otherwise (`block'
          is ‘False’), put an item on the queue if a free slot is
          immediately available, else raise the *note queue.Full: 1d1f.
          exception (`timeout' is ignored in that case).

      -- Method: put_nowait (obj)

          Equivalent to ‘put(obj, False)’.

      -- Method: get ([block[, timeout]])

          Remove and return an item from the queue.  If optional args
          `block' is ‘True’ (the default) and `timeout' is ‘None’ (the
          default), block if necessary until an item is available.  If
          `timeout' is a positive number, it blocks at most `timeout'
          seconds and raises the *note queue.Empty: 1d1e. exception if
          no item was available within that time.  Otherwise (block is
          ‘False’), return an item if one is immediately available, else
          raise the *note queue.Empty: 1d1e. exception (`timeout' is
          ignored in that case).

      -- Method: get_nowait ()

          Equivalent to ‘get(False)’.

     *note multiprocessing.Queue: 1cf6. has a few additional methods not
     found in *note queue.Queue: cc5.  These methods are usually
     unnecessary for most code:

      -- Method: close ()

          Indicate that no more data will be put on this queue by the
          current process.  The background thread will quit once it has
          flushed all buffered data to the pipe.  This is called
          automatically when the queue is garbage collected.

      -- Method: join_thread ()

          Join the background thread.  This can only be used after *note
          close(): 1d29. has been called.  It blocks until the
          background thread exits, ensuring that all data in the buffer
          has been flushed to the pipe.

          By default if a process is not the creator of the queue then
          on exit it will attempt to join the queue’s background thread.
          The process can call *note cancel_join_thread(): 1d22. to make
          *note join_thread(): 1d2a. do nothing.

      -- Method: cancel_join_thread ()

          Prevent *note join_thread(): 1d2a. from blocking.  In
          particular, this prevents the background thread from being
          joined automatically when the process exits – see *note
          join_thread(): 1d2a.

          A better name for this method might be
          ‘allow_exit_without_flush()’.  It is likely to cause enqueued
          data to lost, and you almost certainly will not need to use
          it.  It is really only there if you need the current process
          to exit immediately without waiting to flush enqueued data to
          the underlying pipe, and you don’t care about lost data.

          Note: This class’s functionality requires a functioning shared
          semaphore implementation on the host operating system.
          Without one, the functionality in this class will be disabled,
          and attempts to instantiate a *note Queue: 1cf6. will result
          in an *note ImportError: 19f.  See issue 3770(1) for
          additional information.  The same holds true for any of the
          specialized queue types listed below.

 -- Class: multiprocessing.SimpleQueue

     It is a simplified *note Queue: 1cf6. type, very close to a locked
     *note Pipe: 1cf7.

      -- Method: empty ()

          Return ‘True’ if the queue is empty, ‘False’ otherwise.

      -- Method: get ()

          Remove and return an item from the queue.

      -- Method: put (item)

          Put `item' into the queue.

 -- Class: multiprocessing.JoinableQueue ([maxsize])

     *note JoinableQueue: 1d19, a *note Queue: 1cf6. subclass, is a
     queue which additionally has *note task_done(): 1d1c. and *note
     join(): 1d2e. methods.

      -- Method: task_done ()

          Indicate that a formerly enqueued task is complete.  Used by
          queue consumers.  For each *note get(): 1d28. used to fetch a
          task, a subsequent call to *note task_done(): 1d1c. tells the
          queue that the processing on the task is complete.

          If a *note join(): 1d1b. is currently blocking, it will resume
          when all items have been processed (meaning that a *note
          task_done(): 1d1c. call was received for every item that had
          been *note put(): 1d26. into the queue).

          Raises a *note ValueError: 19c. if called more times than
          there were items placed in the queue.

      -- Method: join ()

          Block until all items in the queue have been gotten and
          processed.

          The count of unfinished tasks goes up whenever an item is
          added to the queue.  The count goes down whenever a consumer
          calls *note task_done(): 1d1c. to indicate that the item was
          retrieved and all work on it is complete.  When the count of
          unfinished tasks drops to zero, *note join(): 1d1b. unblocks.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue3770

