This is python.info, produced by makeinfo version 6.0 from python.texi.

     Python 3.6.0a0, May 06, 2016

     Georg Brandl

     Copyright © 2001-2016, Python Software Foundation

INFO-DIR-SECTION Documentation tools
START-INFO-DIR-ENTRY
* Python: (python.info). The Python Programming Language
END-INFO-DIR-ENTRY


   Generated by Sphinx 1.4.1.


File: python.info,  Node: Top,  Next: What's New in Python,  Up: (dir)

Python Documentation
********************

     Python 3.6.0a0, May 06, 2016

     Georg Brandl

     Copyright © 2001-2016, Python Software Foundation

* Menu:

* What's New in Python:: 
* The Python Tutorial:: 
* Python Setup and Usage:: 
* The Python Language Reference:: 
* The Python Standard Library:: 
* Extending and Embedding the Python Interpreter:: 
* Python/C API Reference Manual:: 
* Distributing Python Modules:: 
* Installing Python Modules:: 
* Python HOWTOs:: 
* Python Frequently Asked Questions:: 
* Glossary:: 
* About these documents:: 
* Reporting Bugs:: 
* Copyright:: 
* History and License:: 
* Distributing Python Modules (Legacy version): Distributing Python Modules Legacy version. 
* Installing Python Modules (Legacy version): Installing Python Modules Legacy version. 
* Python Module Index:: 
* Index:: 

 — The Detailed Node Listing —

What’s New in Python

* What’s New In Python 3.6: What's New In Python 3 6. 
* What’s New In Python 3.5: What's New In Python 3 5. 
* What’s New In Python 3.4: What's New In Python 3 4. 
* What’s New In Python 3.3: What's New In Python 3 3. 
* What’s New In Python 3.2: What's New In Python 3 2. 
* What’s New In Python 3.1: What's New In Python 3 1. 
* What’s New In Python 3.0: What's New In Python 3 0. 
* What’s New in Python 2.7: What's New in Python 2 7. 
* What’s New in Python 2.6: What's New in Python 2 6. 
* What’s New in Python 2.5: What's New in Python 2 5. 
* What’s New in Python 2.4: What's New in Python 2 4. 
* What’s New in Python 2.3: What's New in Python 2 3. 
* What’s New in Python 2.2: What's New in Python 2 2. 
* What’s New in Python 2.1: What's New in Python 2 1. 
* What’s New in Python 2.0: What's New in Python 2 0. 
* Changelog:: 

What’s New In Python 3.6

* Summary: Summary -- Release highlights. Release highlights
* New Features:: 
* Other Language Changes:: 
* New Modules:: 
* Improved Modules:: 
* Optimizations:: 
* Build and C API Changes:: 
* Deprecated:: 
* Removed:: 
* Porting to Python 3.6: Porting to Python 3 6. 

New Features

* PEP 498; Formatted string literals: PEP 498 Formatted string literals. 
* PYTHONMALLOC environment variable:: 

Improved Modules

* contextlib:: 
* datetime:: 
* faulthandler:: 
* os:: 
* pickle:: 
* rlcompleter:: 
* site:: 
* socketserver:: 
* telnetlib:: 
* typing:: 
* unittest.mock: unittest mock. 
* urllib.robotparser: urllib robotparser. 
* warnings:: 
* zipfile:: 
* zlib:: 
* fileinput:: 

Deprecated

* New Keywords:: 
* Deprecated Python modules, functions and methods: Deprecated Python modules functions and methods. 
* Deprecated functions and types of the C API:: 
* Deprecated features:: 
* Deprecated Python behavior:: 

Removed

* API and Feature Removals:: 

Porting to Python 3.6

* Changes in the Python API:: 
* Changes in the C API:: 

What’s New In Python 3.5

* Summary: Summary -- Release highlights<2>. Release highlights
* New Features: New Features<2>. 
* Other Language Changes: Other Language Changes<2>. 
* New Modules: New Modules<2>. 
* Improved Modules: Improved Modules<2>. 
* Other module-level changes:: 
* Optimizations: Optimizations<2>. 
* Build and C API Changes: Build and C API Changes<2>. 
* Deprecated: Deprecated<2>. 
* Removed: Removed<2>. 
* Porting to Python 3.5: Porting to Python 3 5. 

New Features

* PEP 492 - Coroutines with async and await syntax:: 
* PEP 465 - A dedicated infix operator for matrix multiplication:: 
* PEP 448 - Additional Unpacking Generalizations:: 
* PEP 461 - % formatting support for bytes and bytearray:: 
* PEP 484 - Type Hints:: 
* PEP 471 - os.scandir() function: PEP 471 - os scandir function -- a better and faster directory iterator. a better and faster directory iterator
* PEP 475; Retry system calls failing with EINTR: PEP 475 Retry system calls failing with EINTR. 
* PEP 479; Change StopIteration handling inside generators: PEP 479 Change StopIteration handling inside generators. 
* PEP 485; A function for testing approximate equality: PEP 485 A function for testing approximate equality. 
* PEP 486; Make the Python Launcher aware of virtual environments: PEP 486 Make the Python Launcher aware of virtual environments. 
* PEP 488; Elimination of PYO files: PEP 488 Elimination of PYO files. 
* PEP 489; Multi-phase extension module initialization: PEP 489 Multi-phase extension module initialization. 

New Modules

* typing: typing<2>. 
* zipapp:: 

Improved Modules

* argparse:: 
* asyncio:: 
* bz2:: 
* cgi:: 
* cmath:: 
* code:: 
* collections:: 
* collections.abc: collections abc. 
* compileall:: 
* concurrent.futures: concurrent futures. 
* configparser:: 
* contextlib: contextlib<2>. 
* csv:: 
* curses:: 
* dbm:: 
* difflib:: 
* distutils:: 
* doctest:: 
* email:: 
* enum:: 
* faulthandler: faulthandler<2>. 
* functools:: 
* glob:: 
* gzip:: 
* heapq:: 
* http:: 
* http.client: http client. 
* idlelib and IDLE:: 
* imaplib:: 
* imghdr:: 
* importlib:: 
* inspect:: 
* io:: 
* ipaddress:: 
* json:: 
* linecache:: 
* locale:: 
* logging:: 
* lzma:: 
* math:: 
* multiprocessing:: 
* operator:: 
* os: os<2>. 
* pathlib:: 
* pickle: pickle<2>. 
* poplib:: 
* re:: 
* readline:: 
* selectors:: 
* shutil:: 
* signal:: 
* smtpd:: 
* smtplib:: 
* sndhdr:: 
* socket:: 
* ssl:: 
* sqlite3:: 
* subprocess:: 
* sys:: 
* sysconfig:: 
* tarfile:: 
* threading:: 
* time:: 
* timeit:: 
* tkinter:: 
* traceback:: 
* types:: 
* unicodedata:: 
* unittest:: 
* unittest.mock: unittest mock<2>. 
* urllib:: 
* wsgiref:: 
* xmlrpc:: 
* xml.sax: xml sax. 
* zipfile: zipfile<2>. 

ssl

* Memory BIO Support:: 
* Application-Layer Protocol Negotiation Support:: 
* Other Changes:: 

Deprecated

* New Keywords: New Keywords<2>. 
* Deprecated Python Behavior:: 
* Unsupported Operating Systems:: 
* Deprecated Python modules, functions and methods: Deprecated Python modules functions and methods<2>. 

Removed

* API and Feature Removals: API and Feature Removals<2>. 

Porting to Python 3.5

* Changes in Python behavior:: 
* Changes in the Python API: Changes in the Python API<2>. 
* Changes in the C API: Changes in the C API<2>. 

What’s New In Python 3.4

* Summary: Summary -- Release Highlights. Release Highlights
* New Features: New Features<3>. 
* New Modules: New Modules<3>. 
* Improved Modules: Improved Modules<3>. 
* CPython Implementation Changes:: 
* Deprecated: Deprecated<3>. 
* Removed: Removed<3>. 
* Porting to Python 3.4: Porting to Python 3 4. 
* Changed in 3.4.3: Changed in 3 4 3. 

New Features

* PEP 453; Explicit Bootstrapping of PIP in Python Installations: PEP 453 Explicit Bootstrapping of PIP in Python Installations. 
* PEP 446; Newly Created File Descriptors Are Non-Inheritable: PEP 446 Newly Created File Descriptors Are Non-Inheritable. 
* Improvements to Codec Handling:: 
* PEP 451; A ModuleSpec Type for the Import System: PEP 451 A ModuleSpec Type for the Import System. 
* Other Language Changes: Other Language Changes<3>. 

PEP 453: Explicit Bootstrapping of PIP in Python Installations

* Bootstrapping pip By Default:: 
* Documentation Changes:: 

New Modules

* asyncio: asyncio<2>. 
* ensurepip:: 
* enum: enum<2>. 
* pathlib: pathlib<2>. 
* selectors: selectors<2>. 
* statistics:: 
* tracemalloc:: 

Improved Modules

* abc:: 
* aifc:: 
* argparse: argparse<2>. 
* audioop:: 
* base64:: 
* collections: collections<2>. 
* colorsys:: 
* contextlib: contextlib<3>. 
* dbm: dbm<2>. 
* dis:: 
* doctest: doctest<2>. 
* email: email<2>. 
* filecmp:: 
* functools: functools<2>. 
* gc:: 
* glob: glob<2>. 
* hashlib:: 
* hmac:: 
* html:: 
* http: http<2>. 
* idlelib and IDLE: idlelib and IDLE<2>. 
* importlib: importlib<2>. 
* inspect: inspect<2>. 
* ipaddress: ipaddress<2>. 
* logging: logging<2>. 
* marshal:: 
* mmap:: 
* multiprocessing: multiprocessing<2>. 
* operator: operator<2>. 
* os: os<3>. 
* pdb:: 
* pickle: pickle<3>. 
* plistlib:: 
* poplib: poplib<2>. 
* pprint:: 
* pty:: 
* pydoc:: 
* re: re<2>. 
* resource:: 
* select:: 
* shelve:: 
* shutil: shutil<2>. 
* smtpd: smtpd<2>. 
* smtplib: smtplib<2>. 
* socket: socket<2>. 
* sqlite3: sqlite3<2>. 
* ssl: ssl<2>. 
* stat:: 
* struct:: 
* subprocess: subprocess<2>. 
* sunau:: 
* sys: sys<2>. 
* tarfile: tarfile<2>. 
* textwrap:: 
* threading: threading<2>. 
* traceback: traceback<2>. 
* types: types<2>. 
* urllib: urllib<2>. 
* unittest: unittest<2>. 
* venv:: 
* wave:: 
* weakref:: 
* xml.etree: xml etree. 
* zipfile: zipfile<3>. 

CPython Implementation Changes

* PEP 445; Customization of CPython Memory Allocators: PEP 445 Customization of CPython Memory Allocators. 
* PEP 442; Safe Object Finalization: PEP 442 Safe Object Finalization. 
* PEP 456; Secure and Interchangeable Hash Algorithm: PEP 456 Secure and Interchangeable Hash Algorithm. 
* PEP 436; Argument Clinic: PEP 436 Argument Clinic. 
* Other Build and C API Changes:: 
* Other Improvements:: 
* Significant Optimizations:: 

Deprecated

* Deprecations in the Python API:: 
* Deprecated Features:: 

Removed

* Operating Systems No Longer Supported:: 
* API and Feature Removals: API and Feature Removals<3>. 
* Code Cleanups:: 

Porting to Python 3.4

* Changes in 'python' Command Behavior:: 
* Changes in the Python API: Changes in the Python API<3>. 
* Changes in the C API: Changes in the C API<3>. 

Changed in 3.4.3

* PEP 476; Enabling certificate verification by default for stdlib http clients: PEP 476 Enabling certificate verification by default for stdlib http clients. 

What’s New In Python 3.3

* Summary: Summary -- Release highlights<3>. Release highlights
* PEP 405; Virtual Environments: PEP 405 Virtual Environments. 
* PEP 420; Implicit Namespace Packages: PEP 420 Implicit Namespace Packages. 
* PEP 3118; New memoryview implementation and buffer protocol documentation: PEP 3118 New memoryview implementation and buffer protocol documentation. 
* PEP 393; Flexible String Representation: PEP 393 Flexible String Representation. 
* PEP 397; Python Launcher for Windows: PEP 397 Python Launcher for Windows. 
* PEP 3151; Reworking the OS and IO exception hierarchy: PEP 3151 Reworking the OS and IO exception hierarchy. 
* PEP 380; Syntax for Delegating to a Subgenerator: PEP 380 Syntax for Delegating to a Subgenerator. 
* PEP 409; Suppressing exception context: PEP 409 Suppressing exception context. 
* PEP 414; Explicit Unicode literals: PEP 414 Explicit Unicode literals. 
* PEP 3155; Qualified name for classes and functions: PEP 3155 Qualified name for classes and functions. 
* PEP 412; Key-Sharing Dictionary: PEP 412 Key-Sharing Dictionary. 
* PEP 362; Function Signature Object: PEP 362 Function Signature Object. 
* PEP 421; Adding sys.implementation: PEP 421 Adding sys implementation. 
* Using importlib as the Implementation of Import:: 
* Other Language Changes: Other Language Changes<4>. 
* A Finer-Grained Import Lock:: 
* Builtin functions and types:: 
* New Modules: New Modules<4>. 
* Improved Modules: Improved Modules<4>. 
* Optimizations: Optimizations<3>. 
* Build and C API Changes: Build and C API Changes<3>. 
* Deprecated: Deprecated<4>. 
* Porting to Python 3.3: Porting to Python 3 3. 

PEP 3118: New memoryview implementation and buffer protocol documentation

* Features:: 
* API changes:: 

PEP 393: Flexible String Representation

* Functionality:: 
* Performance and resource usage:: 

PEP 421: Adding sys.implementation

* SimpleNamespace:: 

Using importlib as the Implementation of Import

* New APIs:: 
* Visible Changes:: 

New Modules

* faulthandler: faulthandler<3>. 
* ipaddress: ipaddress<3>. 
* lzma: lzma<2>. 

Improved Modules

* abc: abc<2>. 
* array:: 
* base64: base64<2>. 
* binascii:: 
* bz2: bz2<2>. 
* codecs:: 
* collections: collections<3>. 
* contextlib: contextlib<4>. 
* crypt:: 
* curses: curses<2>. 
* datetime: datetime<2>. 
* decimal:: 
* email: email<3>. 
* ftplib:: 
* functools: functools<3>. 
* gc: gc<2>. 
* hmac: hmac<2>. 
* http: http<3>. 
* html: html<2>. 
* imaplib: imaplib<2>. 
* inspect: inspect<3>. 
* io: io<2>. 
* itertools:: 
* logging: logging<3>. 
* math: math<2>. 
* mmap: mmap<2>. 
* multiprocessing: multiprocessing<3>. 
* nntplib:: 
* os: os<4>. 
* pdb: pdb<2>. 
* pickle: pickle<4>. 
* pydoc: pydoc<2>. 
* re: re<3>. 
* sched:: 
* select: select<2>. 
* shlex:: 
* shutil: shutil<3>. 
* signal: signal<2>. 
* smtpd: smtpd<3>. 
* smtplib: smtplib<3>. 
* socket: socket<3>. 
* socketserver: socketserver<2>. 
* sqlite3: sqlite3<3>. 
* ssl: ssl<3>. 
* stat: stat<2>. 
* struct: struct<2>. 
* subprocess: subprocess<3>. 
* sys: sys<3>. 
* tarfile: tarfile<3>. 
* tempfile:: 
* textwrap: textwrap<2>. 
* threading: threading<3>. 
* time: time<2>. 
* types: types<3>. 
* unittest: unittest<3>. 
* urllib: urllib<3>. 
* webbrowser:: 
* xml.etree.ElementTree: xml etree ElementTree. 
* zlib: zlib<2>. 

decimal

* Features: Features<2>. 
* API changes: API changes<2>. 

email

* Policy Framework:: 
* Provisional Policy with New Header API:: 
* Other API Changes:: 

Deprecated

* Unsupported Operating Systems: Unsupported Operating Systems<2>. 
* Deprecated Python modules, functions and methods: Deprecated Python modules functions and methods<3>. 
* Deprecated functions and types of the C API: Deprecated functions and types of the C API<2>. 
* Deprecated features: Deprecated features<2>. 

Porting to Python 3.3

* Porting Python code:: 
* Porting C code:: 
* Building C extensions:: 
* Command Line Switch Changes:: 

What’s New In Python 3.2

* PEP 384; Defining a Stable ABI: PEP 384 Defining a Stable ABI. 
* PEP 389; Argparse Command Line Parsing Module: PEP 389 Argparse Command Line Parsing Module. 
* PEP 391; Dictionary Based Configuration for Logging: PEP 391 Dictionary Based Configuration for Logging. 
* PEP 3148; The concurrent.futures module: PEP 3148 The concurrent futures module. 
* PEP 3147; PYC Repository Directories: PEP 3147 PYC Repository Directories. 
* PEP 3149; ABI Version Tagged .so Files: PEP 3149 ABI Version Tagged so Files. 
* PEP 3333; Python Web Server Gateway Interface v1.0.1: PEP 3333 Python Web Server Gateway Interface v1 0 1. 
* Other Language Changes: Other Language Changes<5>. 
* New, Improved, and Deprecated Modules: New Improved and Deprecated Modules. 
* Multi-threading:: 
* Optimizations: Optimizations<4>. 
* Unicode:: 
* Codecs:: 
* Documentation:: 
* IDLE:: 
* Code Repository:: 
* Build and C API Changes: Build and C API Changes<4>. 
* Porting to Python 3.2: Porting to Python 3 2. 

New, Improved, and Deprecated Modules

* email: email<4>. 
* elementtree:: 
* functools: functools<4>. 
* itertools: itertools<2>. 
* collections: collections<4>. 
* threading: threading<4>. 
* datetime and time:: 
* math: math<3>. 
* abc: abc<3>. 
* io: io<3>. 
* reprlib:: 
* logging: logging<4>. 
* csv: csv<2>. 
* contextlib: contextlib<5>. 
* decimal and fractions:: 
* ftp:: 
* popen:: 
* select: select<3>. 
* gzip and zipfile:: 
* tarfile: tarfile<4>. 
* hashlib: hashlib<2>. 
* ast:: 
* os: os<5>. 
* shutil: shutil<4>. 
* sqlite3: sqlite3<4>. 
* html: html<3>. 
* socket: socket<4>. 
* ssl: ssl<4>. 
* nntp:: 
* certificates:: 
* imaplib: imaplib<3>. 
* http.client: http client<2>. 
* unittest: unittest<4>. 
* random:: 
* poplib: poplib<3>. 
* asyncore:: 
* tempfile: tempfile<2>. 
* inspect: inspect<4>. 
* pydoc: pydoc<3>. 
* dis: dis<2>. 
* dbm: dbm<3>. 
* ctypes:: 
* site: site<2>. 
* sysconfig: sysconfig<2>. 
* pdb: pdb<3>. 
* configparser: configparser<2>. 
* urllib.parse: urllib parse. 
* mailbox:: 
* turtledemo:: 

What’s New In Python 3.1

* PEP 372; Ordered Dictionaries: PEP 372 Ordered Dictionaries. 
* PEP 378; Format Specifier for Thousands Separator: PEP 378 Format Specifier for Thousands Separator. 
* Other Language Changes: Other Language Changes<6>. 
* New, Improved, and Deprecated Modules: New Improved and Deprecated Modules<2>. 
* Optimizations: Optimizations<5>. 
* IDLE: IDLE<2>. 
* Build and C API Changes: Build and C API Changes<5>. 
* Porting to Python 3.1: Porting to Python 3 1. 

What’s New In Python 3.0

* Common Stumbling Blocks:: 
* Overview Of Syntax Changes:: 
* Changes Already Present In Python 2.6: Changes Already Present In Python 2 6. 
* Library Changes:: 
* PEP 3101; A New Approach To String Formatting: PEP 3101 A New Approach To String Formatting. 
* Changes To Exceptions:: 
* Miscellaneous Other Changes:: 
* Build and C API Changes: Build and C API Changes<6>. 
* Performance:: 
* Porting To Python 3.0: Porting To Python 3 0. 

Common Stumbling Blocks

* Print Is A Function:: 
* Views And Iterators Instead Of Lists:: 
* Ordering Comparisons:: 
* Integers:: 
* Text Vs. Data Instead Of Unicode Vs. 8-bit: Text Vs Data Instead Of Unicode Vs 8-bit. 

Overview Of Syntax Changes

* New Syntax:: 
* Changed Syntax:: 
* Removed Syntax:: 

Miscellaneous Other Changes

* Operators And Special Methods:: 
* Builtins:: 

What’s New in Python 2.7

* The Future for Python 2.x: The Future for Python 2 x. 
* Changes to the Handling of Deprecation Warnings:: 
* Python 3.1 Features: Python 3 1 Features. 
* PEP 372; Adding an Ordered Dictionary to collections: PEP 372 Adding an Ordered Dictionary to collections. 
* PEP 378; Format Specifier for Thousands Separator: PEP 378 Format Specifier for Thousands Separator<2>. 
* PEP 389; The argparse Module for Parsing Command Lines: PEP 389 The argparse Module for Parsing Command Lines. 
* PEP 391; Dictionary-Based Configuration For Logging: PEP 391 Dictionary-Based Configuration For Logging. 
* PEP 3106; Dictionary Views: PEP 3106 Dictionary Views. 
* PEP 3137; The memoryview Object: PEP 3137 The memoryview Object. 
* Other Language Changes: Other Language Changes<7>. 
* New and Improved Modules:: 
* Build and C API Changes: Build and C API Changes<7>. 
* Other Changes and Fixes:: 
* Porting to Python 2.7: Porting to Python 2 7. 
* New Features Added to Python 2.7 Maintenance Releases: New Features Added to Python 2 7 Maintenance Releases. 
* Acknowledgements:: 

Other Language Changes

* Interpreter Changes:: 
* Optimizations: Optimizations<6>. 

New and Improved Modules

* New module; importlib: New module importlib. 
* New module; sysconfig: New module sysconfig. 
* ttk; Themed Widgets for Tk: ttk Themed Widgets for Tk. 
* Updated module; unittest: Updated module unittest. 
* Updated module; ElementTree 1.3: Updated module ElementTree 1 3. 

Build and C API Changes

* Capsules:: 
* Port-Specific Changes; Windows: Port-Specific Changes Windows. 
* Port-Specific Changes; Mac OS X: Port-Specific Changes Mac OS X. 
* Port-Specific Changes; FreeBSD: Port-Specific Changes FreeBSD. 

New Features Added to Python 2.7 Maintenance Releases

* PEP 434; IDLE Enhancement Exception for All Branches: PEP 434 IDLE Enhancement Exception for All Branches. 
* PEP 466; Network Security Enhancements for Python 2.7: PEP 466 Network Security Enhancements for Python 2 7. 

What’s New in Python 2.6

* Python 3.0: Python 3 0. 
* Changes to the Development Process:: 
* PEP 343; The ’with’ statement: PEP 343 The 'with' statement. 
* PEP 366; Explicit Relative Imports From a Main Module: PEP 366 Explicit Relative Imports From a Main Module. 
* PEP 370; Per-user site-packages Directory: PEP 370 Per-user site-packages Directory. 
* PEP 371; The multiprocessing Package: PEP 371 The multiprocessing Package. 
* PEP 3101; Advanced String Formatting: PEP 3101 Advanced String Formatting. 
* PEP 3105; print As a Function: PEP 3105 print As a Function. 
* PEP 3110; Exception-Handling Changes: PEP 3110 Exception-Handling Changes. 
* PEP 3112; Byte Literals: PEP 3112 Byte Literals. 
* PEP 3116; New I/O Library: PEP 3116 New I/O Library. 
* PEP 3118; Revised Buffer Protocol: PEP 3118 Revised Buffer Protocol. 
* PEP 3119; Abstract Base Classes: PEP 3119 Abstract Base Classes. 
* PEP 3127; Integer Literal Support and Syntax: PEP 3127 Integer Literal Support and Syntax. 
* PEP 3129; Class Decorators: PEP 3129 Class Decorators. 
* PEP 3141; A Type Hierarchy for Numbers: PEP 3141 A Type Hierarchy for Numbers. 
* Other Language Changes: Other Language Changes<8>. 
* New and Improved Modules: New and Improved Modules<2>. 
* Deprecations and Removals:: 
* Build and C API Changes: Build and C API Changes<8>. 
* Porting to Python 2.6: Porting to Python 2 6. 
* Acknowledgements: Acknowledgements<2>. 

Changes to the Development Process

* New Issue Tracker; Roundup: New Issue Tracker Roundup. 
* New Documentation Format; reStructuredText Using Sphinx: New Documentation Format reStructuredText Using Sphinx. 

PEP 343: The ’with’ statement

* Writing Context Managers:: 
* The contextlib module:: 

PEP 3141: A Type Hierarchy for Numbers

* The fractions Module:: 

Other Language Changes

* Optimizations: Optimizations<7>. 
* Interpreter Changes: Interpreter Changes<2>. 

New and Improved Modules

* The ast module:: 
* The future_builtins module:: 
* The json module; JavaScript Object Notation: The json module JavaScript Object Notation. 
* The plistlib module; A Property-List Parser: The plistlib module A Property-List Parser. 
* ctypes Enhancements:: 
* Improved SSL Support:: 

Build and C API Changes

* Port-Specific Changes; Windows: Port-Specific Changes Windows<2>. 
* Port-Specific Changes; Mac OS X: Port-Specific Changes Mac OS X<2>. 
* Port-Specific Changes; IRIX: Port-Specific Changes IRIX. 

What’s New in Python 2.5

* PEP 308; Conditional Expressions: PEP 308 Conditional Expressions. 
* PEP 309; Partial Function Application: PEP 309 Partial Function Application. 
* PEP 314; Metadata for Python Software Packages v1.1: PEP 314 Metadata for Python Software Packages v1 1. 
* PEP 328; Absolute and Relative Imports: PEP 328 Absolute and Relative Imports. 
* PEP 338; Executing Modules as Scripts: PEP 338 Executing Modules as Scripts. 
* PEP 341; Unified try/except/finally: PEP 341 Unified try/except/finally. 
* PEP 342; New Generator Features: PEP 342 New Generator Features. 
* PEP 343; The ’with’ statement: PEP 343 The 'with' statement<2>. 
* PEP 352; Exceptions as New-Style Classes: PEP 352 Exceptions as New-Style Classes. 
* PEP 353; Using ssize_t as the index type: PEP 353 Using ssize_t as the index type. 
* PEP 357; The ’__index__’ method: PEP 357 The '__index__' method. 
* Other Language Changes: Other Language Changes<9>. 
* New, Improved, and Removed Modules: New Improved and Removed Modules. 
* Build and C API Changes: Build and C API Changes<9>. 
* Porting to Python 2.5: Porting to Python 2 5. 
* Acknowledgements: Acknowledgements<3>. 

PEP 343: The ’with’ statement

* Writing Context Managers: Writing Context Managers<2>. 
* The contextlib module: The contextlib module<2>. 

Other Language Changes

* Interactive Interpreter Changes:: 
* Optimizations: Optimizations<8>. 

New, Improved, and Removed Modules

* The ctypes package:: 
* The ElementTree package:: 
* The hashlib package:: 
* The sqlite3 package:: 
* The wsgiref package:: 

Build and C API Changes

* Port-Specific Changes:: 

What’s New in Python 2.4

* PEP 218; Built-In Set Objects: PEP 218 Built-In Set Objects. 
* PEP 237; Unifying Long Integers and Integers: PEP 237 Unifying Long Integers and Integers. 
* PEP 289; Generator Expressions: PEP 289 Generator Expressions. 
* PEP 292; Simpler String Substitutions: PEP 292 Simpler String Substitutions. 
* PEP 318; Decorators for Functions and Methods: PEP 318 Decorators for Functions and Methods. 
* PEP 322; Reverse Iteration: PEP 322 Reverse Iteration. 
* PEP 324; New subprocess Module: PEP 324 New subprocess Module. 
* PEP 327; Decimal Data Type: PEP 327 Decimal Data Type. 
* PEP 328; Multi-line Imports: PEP 328 Multi-line Imports. 
* PEP 331; Locale-Independent Float/String Conversions: PEP 331 Locale-Independent Float/String Conversions. 
* Other Language Changes: Other Language Changes<10>. 
* New, Improved, and Deprecated Modules: New Improved and Deprecated Modules<3>. 
* Build and C API Changes: Build and C API Changes<10>. 
* Porting to Python 2.4: Porting to Python 2 4. 
* Acknowledgements: Acknowledgements<4>. 

PEP 327: Decimal Data Type

* Why is Decimal needed?:: 
* The Decimal type:: 
* The Context type:: 

Other Language Changes

* Optimizations: Optimizations<9>. 

New, Improved, and Deprecated Modules

* cookielib:: 
* doctest: doctest<3>. 

Build and C API Changes

* Port-Specific Changes: Port-Specific Changes<2>. 

What’s New in Python 2.3

* PEP 218; A Standard Set Datatype: PEP 218 A Standard Set Datatype. 
* PEP 255; Simple Generators: PEP 255 Simple Generators. 
* PEP 263; Source Code Encodings: PEP 263 Source Code Encodings. 
* PEP 273; Importing Modules from ZIP Archives: PEP 273 Importing Modules from ZIP Archives. 
* PEP 277; Unicode file name support for Windows NT: PEP 277 Unicode file name support for Windows NT. 
* PEP 278; Universal Newline Support: PEP 278 Universal Newline Support. 
* PEP 279; enumerate(): PEP 279 enumerate. 
* PEP 282; The logging Package: PEP 282 The logging Package. 
* PEP 285; A Boolean Type: PEP 285 A Boolean Type. 
* PEP 293; Codec Error Handling Callbacks: PEP 293 Codec Error Handling Callbacks. 
* PEP 301; Package Index and Metadata for Distutils: PEP 301 Package Index and Metadata for Distutils. 
* PEP 302; New Import Hooks: PEP 302 New Import Hooks. 
* PEP 305; Comma-separated Files: PEP 305 Comma-separated Files. 
* PEP 307; Pickle Enhancements: PEP 307 Pickle Enhancements. 
* Extended Slices:: 
* Other Language Changes: Other Language Changes<11>. 
* New, Improved, and Deprecated Modules: New Improved and Deprecated Modules<4>. 
* Pymalloc; A Specialized Object Allocator: Pymalloc A Specialized Object Allocator. 
* Build and C API Changes: Build and C API Changes<11>. 
* Other Changes and Fixes: Other Changes and Fixes<2>. 
* Porting to Python 2.3: Porting to Python 2 3. 
* Acknowledgements: Acknowledgements<5>. 

Other Language Changes

* String Changes:: 
* Optimizations: Optimizations<10>. 

New, Improved, and Deprecated Modules

* Date/Time Type:: 
* The optparse Module:: 

Build and C API Changes

* Port-Specific Changes: Port-Specific Changes<3>. 

What’s New in Python 2.2

* Introduction:: 
* PEPs 252 and 253; Type and Class Changes: PEPs 252 and 253 Type and Class Changes. 
* PEP 234; Iterators: PEP 234 Iterators. 
* PEP 255; Simple Generators: PEP 255 Simple Generators<2>. 
* PEP 237; Unifying Long Integers and Integers: PEP 237 Unifying Long Integers and Integers<2>. 
* PEP 238; Changing the Division Operator: PEP 238 Changing the Division Operator. 
* Unicode Changes:: 
* PEP 227; Nested Scopes: PEP 227 Nested Scopes. 
* New and Improved Modules: New and Improved Modules<3>. 
* Interpreter Changes and Fixes:: 
* Other Changes and Fixes: Other Changes and Fixes<3>. 
* Acknowledgements: Acknowledgements<6>. 

PEPs 252 and 253: Type and Class Changes

* Old and New Classes:: 
* Descriptors:: 
* Multiple Inheritance; The Diamond Rule: Multiple Inheritance The Diamond Rule. 
* Attribute Access:: 
* Related Links:: 

What’s New in Python 2.1

* Introduction: Introduction<2>. 
* PEP 227; Nested Scopes: PEP 227 Nested Scopes<2>. 
* PEP 236; __future__ Directives: PEP 236 __future__ Directives. 
* PEP 207; Rich Comparisons: PEP 207 Rich Comparisons. 
* PEP 230; Warning Framework: PEP 230 Warning Framework. 
* PEP 229; New Build System: PEP 229 New Build System. 
* PEP 205; Weak References: PEP 205 Weak References. 
* PEP 232; Function Attributes: PEP 232 Function Attributes. 
* PEP 235; Importing Modules on Case-Insensitive Platforms: PEP 235 Importing Modules on Case-Insensitive Platforms. 
* PEP 217; Interactive Display Hook: PEP 217 Interactive Display Hook. 
* PEP 208; New Coercion Model: PEP 208 New Coercion Model. 
* PEP 241; Metadata in Python Packages: PEP 241 Metadata in Python Packages. 
* New and Improved Modules: New and Improved Modules<4>. 
* Other Changes and Fixes: Other Changes and Fixes<4>. 
* Acknowledgements: Acknowledgements<7>. 

What’s New in Python 2.0

* Introduction: Introduction<3>. 
* What About Python 1.6?: What About Python 1 6?. 
* New Development Process:: 
* Unicode: Unicode<2>. 
* List Comprehensions:: 
* Augmented Assignment:: 
* String Methods:: 
* Garbage Collection of Cycles:: 
* Other Core Changes:: 
* Porting to 2.0: Porting to 2 0. 
* Extending/Embedding Changes:: 
* Distutils; Making Modules Easy to Install: Distutils Making Modules Easy to Install. 
* XML Modules:: 
* Module changes:: 
* New modules:: 
* IDLE Improvements:: 
* Deleted and Deprecated Modules:: 
* Acknowledgements: Acknowledgements<8>. 

Other Core Changes

* Minor Language Changes:: 
* Changes to Built-in Functions:: 

XML Modules

* SAX2 Support:: 
* DOM Support:: 
* Relationship to PyXML:: 

Changelog

* Python 3.6.0 alpha 1: Python 3 6 0 alpha 1. 
* Python 3.5.1 final: Python 3 5 1 final. 
* Python 3.5.1 release candidate 1: Python 3 5 1 release candidate 1. 
* Python 3.5.0 final: Python 3 5 0 final. 
* Python 3.5.0 release candidate 4: Python 3 5 0 release candidate 4. 
* Python 3.5.0 release candidate 3: Python 3 5 0 release candidate 3. 
* Python 3.5.0 release candidate 2: Python 3 5 0 release candidate 2. 
* Python 3.5.0 release candidate 1: Python 3 5 0 release candidate 1. 
* Python 3.5.0 beta 4: Python 3 5 0 beta 4. 
* Python 3.5.0 beta 3: Python 3 5 0 beta 3. 
* Python 3.5.0 beta 2: Python 3 5 0 beta 2. 
* Python 3.5.0 beta 1: Python 3 5 0 beta 1. 
* Python 3.5.0 alpha 4: Python 3 5 0 alpha 4. 
* Python 3.5.0 alpha 3: Python 3 5 0 alpha 3. 
* Python 3.5 alpha 2: Python 3 5 alpha 2. 
* Python 3.5 alpha 1: Python 3 5 alpha 1. 
* Python 3.4.0: Python 3 4 0. 
* Python 3.4.0 release candidate 3: Python 3 4 0 release candidate 3. 
* Python 3.4.0 release candidate 2: Python 3 4 0 release candidate 2. 
* Python 3.4.0 release candidate 1: Python 3 4 0 release candidate 1. 
* Python 3.4.0 Beta 3: Python 3 4 0 Beta 3. 
* Python 3.4.0 Beta 2: Python 3 4 0 Beta 2. 
* Python 3.4.0 Beta 1: Python 3 4 0 Beta 1. 
* Python 3.4.0 Alpha 4: Python 3 4 0 Alpha 4. 
* Python 3.4.0 Alpha 3: Python 3 4 0 Alpha 3. 
* Python 3.4.0 Alpha 2: Python 3 4 0 Alpha 2. 
* Python 3.4.0 Alpha 1: Python 3 4 0 Alpha 1. 

Python 3.6.0 alpha 1

* Core and Builtins:: 
* Library:: 
* IDLE: IDLE<3>. 
* Documentation: Documentation<2>. 
* Tests:: 
* Build:: 
* Windows:: 
* Tools/Demos:: 
* C API:: 

Python 3.5.1 final

* Core and Builtins: Core and Builtins<2>. 
* Windows: Windows<2>. 

Python 3.5.1 release candidate 1

* Core and Builtins: Core and Builtins<3>. 
* Library: Library<2>. 
* IDLE: IDLE<4>. 
* Documentation: Documentation<3>. 
* Tests: Tests<2>. 
* Build: Build<2>. 
* Windows: Windows<3>. 
* Tools/Demos: Tools/Demos<2>. 

Python 3.5.0 final

* Build: Build<3>. 

Python 3.5.0 release candidate 4

* Library: Library<3>. 
* Build: Build<4>. 

Python 3.5.0 release candidate 3

* Core and Builtins: Core and Builtins<4>. 
* Library: Library<4>. 

Python 3.5.0 release candidate 2

* Core and Builtins: Core and Builtins<5>. 
* Library: Library<5>. 

Python 3.5.0 release candidate 1

* Core and Builtins: Core and Builtins<6>. 
* Library: Library<6>. 
* IDLE: IDLE<5>. 
* Documentation: Documentation<4>. 
* Tests: Tests<3>. 

Python 3.5.0 beta 4

* Core and Builtins: Core and Builtins<7>. 
* Library: Library<7>. 
* Build: Build<5>. 

Python 3.5.0 beta 3

* Core and Builtins: Core and Builtins<8>. 
* Library: Library<8>. 
* Tests: Tests<4>. 
* Documentation: Documentation<5>. 
* Build: Build<6>. 

Python 3.5.0 beta 2

* Core and Builtins: Core and Builtins<9>. 
* Library: Library<9>. 

Python 3.5.0 beta 1

* Core and Builtins: Core and Builtins<10>. 
* Library: Library<10>. 
* IDLE: IDLE<6>. 
* Tests: Tests<5>. 
* Documentation: Documentation<6>. 
* Tools/Demos: Tools/Demos<3>. 

Python 3.5.0 alpha 4

* Core and Builtins: Core and Builtins<11>. 
* Library: Library<11>. 
* Build: Build<7>. 
* Tests: Tests<6>. 
* Tools/Demos: Tools/Demos<4>. 
* C API: C API<2>. 

Python 3.5.0 alpha 3

* Core and Builtins: Core and Builtins<12>. 
* Library: Library<12>. 
* Build: Build<8>. 
* Tests: Tests<7>. 
* Tools/Demos: Tools/Demos<5>. 

Python 3.5 alpha 2

* Core and Builtins: Core and Builtins<13>. 
* Library: Library<13>. 
* Build: Build<9>. 
* C API: C API<3>. 
* Windows: Windows<4>. 

Python 3.5 alpha 1

* Core and Builtins: Core and Builtins<14>. 
* Library: Library<14>. 
* IDLE: IDLE<7>. 
* Build: Build<10>. 
* C API: C API<4>. 
* Documentation: Documentation<7>. 
* Tests: Tests<8>. 
* Tools/Demos: Tools/Demos<6>. 
* Windows: Windows<5>. 

Python 3.4.0

* Library: Library<15>. 
* Documentation: Documentation<8>. 

Python 3.4.0 release candidate 3

* Core and Builtins: Core and Builtins<15>. 
* Library: Library<16>. 
* Build: Build<11>. 

Python 3.4.0 release candidate 2

* Core and Builtins: Core and Builtins<16>. 
* Library: Library<17>. 
* Build: Build<12>. 

Python 3.4.0 release candidate 1

* Core and Builtins: Core and Builtins<17>. 
* Library: Library<18>. 
* IDLE: IDLE<8>. 
* Tests: Tests<9>. 
* Tools/Demos: Tools/Demos<7>. 
* Build: Build<13>. 
* C-API:: 
* Documentation: Documentation<9>. 

Python 3.4.0 Beta 3

* Core and Builtins: Core and Builtins<18>. 
* Library: Library<19>. 
* IDLE: IDLE<9>. 
* Tests: Tests<10>. 
* Tools/Demos: Tools/Demos<8>. 
* Build: Build<14>. 

Python 3.4.0 Beta 2

* Core and Builtins: Core and Builtins<19>. 
* Library: Library<20>. 
* IDLE: IDLE<10>. 
* Tests: Tests<11>. 
* Build: Build<15>. 
* Documentation: Documentation<10>. 
* Tools/Demos: Tools/Demos<9>. 

Python 3.4.0 Beta 1

* Core and Builtins: Core and Builtins<20>. 
* Library: Library<21>. 
* Tests: Tests<12>. 
* Documentation: Documentation<11>. 
* Build: Build<16>. 
* Tools/Demos: Tools/Demos<10>. 

Python 3.4.0 Alpha 4

* Core and Builtins: Core and Builtins<21>. 
* Library: Library<22>. 
* C API: C API<5>. 
* Tests: Tests<13>. 
* Documentation: Documentation<12>. 
* Build: Build<17>. 

Python 3.4.0 Alpha 3

* Core and Builtins: Core and Builtins<22>. 
* Library: Library<23>. 
* Tests: Tests<14>. 
* IDLE: IDLE<11>. 
* Documentation: Documentation<13>. 
* Build: Build<18>. 
* Tools/Demos: Tools/Demos<11>. 

Python 3.4.0 Alpha 2

* Core and Builtins: Core and Builtins<23>. 
* Library: Library<24>. 
* Tests: Tests<15>. 
* IDLE: IDLE<12>. 
* Documentation: Documentation<14>. 
* Build: Build<19>. 
* Tools/Demos: Tools/Demos<12>. 

Python 3.4.0 Alpha 1

* Core and Builtins: Core and Builtins<24>. 
* Library: Library<25>. 
* IDLE: IDLE<13>. 
* Tests: Tests<16>. 
* Build: Build<20>. 
* C-API: C-API<2>. 
* Documentation: Documentation<15>. 
* Tools/Demos: Tools/Demos<13>. 
* Windows: Windows<6>. 

The Python Tutorial

* Whetting Your Appetite:: 
* Using the Python Interpreter:: 
* An Informal Introduction to Python:: 
* More Control Flow Tools:: 
* Data Structures:: 
* Modules:: 
* Input and Output:: 
* Errors and Exceptions:: 
* Classes:: 
* Brief Tour of the Standard Library:: 
* Brief Tour of the Standard Library: Brief Tour of the Standard Library -- Part II. Part II
* Virtual Environments and Packages:: 
* What Now?:: 
* Interactive Input Editing and History Substitution:: 
* Floating Point Arithmetic; Issues and Limitations: Floating Point Arithmetic Issues and Limitations. 
* Appendix:: 

Using the Python Interpreter

* Invoking the Interpreter:: 
* The Interpreter and Its Environment:: 

Invoking the Interpreter

* Argument Passing:: 
* Interactive Mode:: 

The Interpreter and Its Environment

* Source Code Encoding:: 

An Informal Introduction to Python

* Using Python as a Calculator:: 
* First Steps Towards Programming:: 

Using Python as a Calculator

* Numbers:: 
* Strings:: 
* Lists:: 

More Control Flow Tools

* if Statements:: 
* for Statements:: 
* The range() Function: The range Function. 
* break and continue Statements, and else Clauses on Loops: break and continue Statements and else Clauses on Loops. 
* pass Statements:: 
* Defining Functions:: 
* More on Defining Functions:: 
* Intermezzo; Coding Style: Intermezzo Coding Style. 

More on Defining Functions

* Default Argument Values:: 
* Keyword Arguments:: 
* Arbitrary Argument Lists:: 
* Unpacking Argument Lists:: 
* Lambda Expressions:: 
* Documentation Strings:: 
* Function Annotations:: 

Data Structures

* More on Lists:: 
* The del statement:: 
* Tuples and Sequences:: 
* Sets:: 
* Dictionaries:: 
* Looping Techniques:: 
* More on Conditions:: 
* Comparing Sequences and Other Types:: 

More on Lists

* Using Lists as Stacks:: 
* Using Lists as Queues:: 
* List Comprehensions: List Comprehensions<2>. 
* Nested List Comprehensions:: 

Modules

* More on Modules:: 
* Standard Modules:: 
* The dir() Function: The dir Function. 
* Packages:: 

More on Modules

* Executing modules as scripts:: 
* The Module Search Path:: 
* "Compiled" Python files:: 

Packages

* Importing * From a Package:: 
* Intra-package References:: 
* Packages in Multiple Directories:: 

Input and Output

* Fancier Output Formatting:: 
* Reading and Writing Files:: 

Fancier Output Formatting

* Old string formatting:: 

Reading and Writing Files

* Methods of File Objects:: 
* Saving structured data with json:: 

Errors and Exceptions

* Syntax Errors:: 
* Exceptions:: 
* Handling Exceptions:: 
* Raising Exceptions:: 
* User-defined Exceptions:: 
* Defining Clean-up Actions:: 
* Predefined Clean-up Actions:: 

Classes

* A Word About Names and Objects:: 
* Python Scopes and Namespaces:: 
* A First Look at Classes:: 
* Random Remarks:: 
* Inheritance:: 
* Private Variables:: 
* Odds and Ends:: 
* Exceptions Are Classes Too:: 
* Iterators:: 
* Generators:: 
* Generator Expressions:: 

Python Scopes and Namespaces

* Scopes and Namespaces Example:: 

A First Look at Classes

* Class Definition Syntax:: 
* Class Objects:: 
* Instance Objects:: 
* Method Objects:: 
* Class and Instance Variables:: 

Inheritance

* Multiple Inheritance:: 

Brief Tour of the Standard Library

* Operating System Interface:: 
* File Wildcards:: 
* Command Line Arguments:: 
* Error Output Redirection and Program Termination:: 
* String Pattern Matching:: 
* Mathematics:: 
* Internet Access:: 
* Dates and Times:: 
* Data Compression:: 
* Performance Measurement:: 
* Quality Control:: 
* Batteries Included:: 

Brief Tour of the Standard Library – Part II

* Output Formatting:: 
* Templating:: 
* Working with Binary Data Record Layouts:: 
* Multi-threading: Multi-threading<2>. 
* Logging:: 
* Weak References:: 
* Tools for Working with Lists:: 
* Decimal Floating Point Arithmetic:: 

Virtual Environments and Packages

* Introduction: Introduction<4>. 
* Creating Virtual Environments:: 
* Managing Packages with pip:: 

Interactive Input Editing and History Substitution

* Tab Completion and History Editing:: 
* Alternatives to the Interactive Interpreter:: 

Floating Point Arithmetic:  Issues and Limitations

* Representation Error:: 

Appendix

* Interactive Mode: Interactive Mode<2>. 

Interactive Mode

* Error Handling:: 
* Executable Python Scripts:: 
* The Interactive Startup File:: 
* The Customization Modules:: 

Python Setup and Usage

* Command line and environment:: 
* Using Python on Unix platforms:: 
* Using Python on Windows:: 
* Using Python on a Macintosh:: 
* Additional Tools and Scripts:: 

Command line and environment

* Command line:: 
* Environment variables:: 

Command line

* Interface options:: 
* Generic options:: 
* Miscellaneous options:: 
* Options you shouldn't use:: 

Environment variables

* Debug-mode variables:: 

Using Python on Unix platforms

* Getting and installing the latest version of Python:: 
* Building Python:: 
* Python-related paths and files:: 
* Miscellaneous:: 
* Editors:: 

Getting and installing the latest version of Python

* On Linux:: 
* On FreeBSD and OpenBSD:: 
* On OpenSolaris:: 

Using Python on Windows

* Installing Python:: 
* Alternative bundles:: 
* Configuring Python:: 
* Python Launcher for Windows:: 
* Finding modules:: 
* Additional modules:: 
* Compiling Python on Windows:: 
* Embedded Distribution:: 
* Other resources:: 

Installing Python

* Supported Versions:: 
* Installation Steps:: 
* Installing Without UI:: 
* Installing Without Downloading:: 
* Modifying an install:: 
* Other Platforms:: 

Configuring Python

* Excursus; Setting environment variables: Excursus Setting environment variables. 
* Finding the Python executable:: 

Python Launcher for Windows

* Getting started:: 
* Shebang Lines:: 
* Arguments in shebang lines:: 
* Customization:: 
* Diagnostics:: 

Getting started

* From the command-line:: 
* Virtual environments:: 
* From a script:: 
* From file associations:: 

Customization

* Customization via INI files:: 
* Customizing default Python versions:: 

Additional modules

* PyWin32:: 
* cx_Freeze:: 
* WConio:: 

Embedded Distribution

* Python Application:: 
* Embedding Python:: 

Using Python on a Macintosh

* Getting and Installing MacPython:: 
* The IDE:: 
* Installing Additional Python Packages:: 
* GUI Programming on the Mac:: 
* Distributing Python Applications on the Mac:: 
* Other Resources:: 

Getting and Installing MacPython

* How to run a Python script:: 
* Running scripts with a GUI:: 
* Configuration:: 

Additional Tools and Scripts

* pyvenv - Creating virtual environments:: 

The Python Language Reference

* Introduction: Introduction<5>. 
* Lexical analysis:: 
* Data model:: 
* Execution model:: 
* The import system:: 
* Expressions:: 
* Simple statements:: 
* Compound statements:: 
* Top-level components:: 
* Full Grammar specification:: 

Introduction

* Alternate Implementations:: 
* Notation:: 

Lexical analysis

* Line structure:: 
* Other tokens:: 
* Identifiers and keywords:: 
* Literals:: 
* Operators:: 
* Delimiters:: 

Line structure

* Logical lines:: 
* Physical lines:: 
* Comments:: 
* Encoding declarations:: 
* Explicit line joining:: 
* Implicit line joining:: 
* Blank lines:: 
* Indentation:: 
* Whitespace between tokens:: 

Identifiers and keywords

* Keywords:: 
* Reserved classes of identifiers:: 

Literals

* String and Bytes literals:: 
* String literal concatenation:: 
* Formatted string literals:: 
* Numeric literals:: 
* Integer literals:: 
* Floating point literals:: 
* Imaginary literals:: 

Data model

* Objects, values and types: Objects values and types. 
* The standard type hierarchy:: 
* Special method names:: 
* Coroutines:: 

Special method names

* Basic customization:: 
* Customizing attribute access:: 
* Customizing class creation:: 
* Customizing instance and subclass checks:: 
* Emulating callable objects:: 
* Emulating container types:: 
* Emulating numeric types:: 
* With Statement Context Managers:: 
* Special method lookup:: 

Customizing attribute access

* Implementing Descriptors:: 
* Invoking Descriptors:: 
* __slots__:: 

__slots__

* Notes on using __slots__:: 

Customizing class creation

* Determining the appropriate metaclass:: 
* Preparing the class namespace:: 
* Executing the class body:: 
* Creating the class object:: 
* Metaclass example:: 

Coroutines

* Awaitable Objects:: 
* Coroutine Objects:: 
* Asynchronous Iterators:: 
* Asynchronous Context Managers:: 

Execution model

* Structure of a program:: 
* Naming and binding:: 
* Exceptions: Exceptions<2>. 

Naming and binding

* Binding of names:: 
* Resolution of names:: 
* Builtins and restricted execution:: 
* Interaction with dynamic features:: 

The import system

* importlib: importlib<3>. 
* Packages: Packages<2>. 
* Searching:: 
* Loading:: 
* The Path Based Finder:: 
* Replacing the standard import system:: 
* Special considerations for __main__:: 
* Open issues:: 
* References:: 

Packages

* Regular packages:: 
* Namespace packages:: 

Searching

* The module cache:: 
* Finders and loaders:: 
* Import hooks:: 
* The meta path:: 

Loading

* Loaders:: 
* Submodules:: 
* Module spec:: 
* Import-related module attributes:: 
* module.__path__: module __path__. 
* Module reprs:: 

The Path Based Finder

* Path entry finders:: 
* Path entry finder protocol:: 

Special considerations for __main__

* __main__.__spec__: __main__ __spec__. 

Expressions

* Arithmetic conversions:: 
* Atoms:: 
* Primaries:: 
* Await expression:: 
* The power operator:: 
* Unary arithmetic and bitwise operations:: 
* Binary arithmetic operations:: 
* Shifting operations:: 
* Binary bitwise operations:: 
* Comparisons:: 
* Boolean operations:: 
* Conditional expressions:: 
* Lambdas:: 
* Expression lists:: 
* Evaluation order:: 
* Operator precedence:: 

Atoms

* Identifiers (Names): Identifiers Names. 
* Literals: Literals<2>. 
* Parenthesized forms:: 
* Displays for lists, sets and dictionaries: Displays for lists sets and dictionaries. 
* List displays:: 
* Set displays:: 
* Dictionary displays:: 
* Generator expressions:: 
* Yield expressions:: 

Yield expressions

* Generator-iterator methods:: 
* Examples:: 

Primaries

* Attribute references:: 
* Subscriptions:: 
* Slicings:: 
* Calls:: 

Comparisons

* Value comparisons:: 
* Membership test operations:: 
* Identity comparisons:: 

Simple statements

* Expression statements:: 
* Assignment statements:: 
* The assert statement:: 
* The pass statement:: 
* The del statement: The del statement<2>. 
* The return statement:: 
* The yield statement:: 
* The raise statement:: 
* The break statement:: 
* The continue statement:: 
* The import statement:: 
* The global statement:: 
* The nonlocal statement:: 

Assignment statements

* Augmented assignment statements:: 

The import statement

* Future statements:: 

Compound statements

* The if statement:: 
* The while statement:: 
* The for statement:: 
* The try statement:: 
* The with statement:: 
* Function definitions:: 
* Class definitions:: 
* Coroutines: Coroutines<2>. 

Coroutines

* Coroutine function definition:: 
* The async for statement:: 
* The async with statement:: 

Top-level components

* Complete Python programs:: 
* File input:: 
* Interactive input:: 
* Expression input:: 

The Python Standard Library

* Introduction: Introduction<6>. 
* Built-in Functions:: 
* Built-in Constants:: 
* Built-in Types:: 
* Built-in Exceptions:: 
* Text Processing Services:: 
* Binary Data Services:: 
* Data Types:: 
* Numeric and Mathematical Modules:: 
* Functional Programming Modules:: 
* File and Directory Access:: 
* Data Persistence:: 
* Data Compression and Archiving:: 
* File Formats:: 
* Cryptographic Services:: 
* Generic Operating System Services:: 
* Concurrent Execution:: 
* Interprocess Communication and Networking:: 
* Internet Data Handling:: 
* Structured Markup Processing Tools:: 
* Internet Protocols and Support:: 
* Multimedia Services:: 
* Internationalization:: 
* Program Frameworks:: 
* Graphical User Interfaces with Tk:: 
* Development Tools:: 
* Debugging and Profiling:: 
* Software Packaging and Distribution:: 
* Python Runtime Services:: 
* Custom Python Interpreters:: 
* Importing Modules:: 
* Python Language Services:: 
* Miscellaneous Services:: 
* MS Windows Specific Services:: 
* Unix Specific Services:: 
* Superseded Modules:: 
* Undocumented Modules:: 

Built-in Constants

* Constants added by the site module:: 

Built-in Types

* Truth Value Testing:: 
* Boolean Operations: Boolean Operations --- and or not. and, or, not
* Comparisons: Comparisons<2>. 
* Numeric Types: Numeric Types --- int float complex. int, float, complex
* Iterator Types:: 
* Sequence Types: Sequence Types --- list tuple range. list, tuple, range
* Text Sequence Type: Text Sequence Type --- str. str
* Binary Sequence Types: Binary Sequence Types --- bytes bytearray memoryview. bytes, bytearray, memoryview
* Set Types: Set Types --- set frozenset. set, frozenset
* Mapping Types: Mapping Types --- dict. dict
* Context Manager Types:: 
* Other Built-in Types:: 
* Special Attributes:: 

Numeric Types — int, float, complex

* Bitwise Operations on Integer Types:: 
* Additional Methods on Integer Types:: 
* Additional Methods on Float:: 
* Hashing of numeric types:: 

Iterator Types

* Generator Types:: 

Sequence Types — list, tuple, range

* Common Sequence Operations:: 
* Immutable Sequence Types:: 
* Mutable Sequence Types:: 
* Lists: Lists<2>. 
* Tuples:: 
* Ranges:: 

Text Sequence Type — str

* String Methods: String Methods<2>. 
* printf-style String Formatting:: 

Binary Sequence Types — bytes, bytearray, memoryview

* Bytes:: 
* Bytearray Objects:: 
* Bytes and Bytearray Operations:: 
* printf-style Bytes Formatting:: 
* Memory Views:: 

Mapping Types — dict

* Dictionary view objects:: 

Other Built-in Types

* Modules: Modules<2>. 
* Classes and Class Instances:: 
* Functions:: 
* Methods:: 
* Code Objects:: 
* Type Objects:: 
* The Null Object:: 
* The Ellipsis Object:: 
* The NotImplemented Object:: 
* Boolean Values:: 
* Internal Objects:: 

Built-in Exceptions

* Base classes:: 
* Concrete exceptions:: 
* Warnings:: 
* Exception hierarchy:: 

Concrete exceptions

* OS exceptions:: 

Text Processing Services

* string: string --- Common string operations. Common string operations
* re: re --- Regular expression operations. Regular expression operations
* difflib: difflib --- Helpers for computing deltas. Helpers for computing deltas
* textwrap: textwrap --- Text wrapping and filling. Text wrapping and filling
* unicodedata: unicodedata --- Unicode Database. Unicode Database
* stringprep: stringprep --- Internet String Preparation. Internet String Preparation
* readline: readline --- GNU readline interface. GNU readline interface
* rlcompleter: rlcompleter --- Completion function for GNU readline. Completion function for GNU readline

string — Common string operations

* String constants:: 
* Custom String Formatting:: 
* Format String Syntax:: 
* Template strings:: 
* Helper functions:: 

Format String Syntax

* Format Specification Mini-Language:: 
* Format examples:: 

re — Regular expression operations

* Regular Expression Syntax:: 
* Module Contents:: 
* Regular Expression Objects:: 
* Match Objects:: 
* Regular Expression Examples:: 

Regular Expression Examples

* Checking for a Pair:: 
* Simulating scanf(): Simulating scanf. 
* search() vs. match(): search vs match. 
* Making a Phonebook:: 
* Text Munging:: 
* Finding all Adverbs:: 
* Finding all Adverbs and their Positions:: 
* Raw String Notation:: 
* Writing a Tokenizer:: 

difflib — Helpers for computing deltas

* SequenceMatcher Objects:: 
* SequenceMatcher Examples:: 
* Differ Objects:: 
* Differ Example:: 
* A command-line interface to difflib:: 

readline — GNU readline interface

* Init file:: 
* Line buffer:: 
* History file:: 
* History list:: 
* Startup hooks:: 
* Completion:: 
* Example:: 

rlcompleter — Completion function for GNU readline

* Completer Objects:: 

Binary Data Services

* struct: struct --- Interpret bytes as packed binary data. Interpret bytes as packed binary data
* codecs: codecs --- Codec registry and base classes. Codec registry and base classes

struct — Interpret bytes as packed binary data

* Functions and Exceptions:: 
* Format Strings:: 
* Classes: Classes<2>. 

Format Strings

* Byte Order, Size, and Alignment: Byte Order Size and Alignment. 
* Format Characters:: 
* Examples: Examples<2>. 

codecs — Codec registry and base classes

* Codec Base Classes:: 
* Encodings and Unicode:: 
* Standard Encodings:: 
* Python Specific Encodings:: 
* encodings.idna: encodings idna --- Internationalized Domain Names in Applications. Internationalized Domain Names in Applications
* encodings.mbcs: encodings mbcs --- Windows ANSI codepage. Windows ANSI codepage
* encodings.utf_8_sig: encodings utf_8_sig --- UTF-8 codec with BOM signature. UTF-8 codec with BOM signature

Codec Base Classes

* Error Handlers:: 
* Stateless Encoding and Decoding:: 
* Incremental Encoding and Decoding:: 
* Stream Encoding and Decoding:: 

Incremental Encoding and Decoding

* IncrementalEncoder Objects:: 
* IncrementalDecoder Objects:: 

Stream Encoding and Decoding

* StreamWriter Objects:: 
* StreamReader Objects:: 
* StreamReaderWriter Objects:: 
* StreamRecoder Objects:: 

Python Specific Encodings

* Text Encodings:: 
* Binary Transforms:: 
* Text Transforms:: 

Data Types

* datetime: datetime --- Basic date and time types. Basic date and time types
* calendar: calendar --- General calendar-related functions. General calendar-related functions
* collections: collections --- Container datatypes. Container datatypes
* collections.abc: collections abc --- Abstract Base Classes for Containers. Abstract Base Classes for Containers
* heapq: heapq --- Heap queue algorithm. Heap queue algorithm
* bisect: bisect --- Array bisection algorithm. Array bisection algorithm
* array: array --- Efficient arrays of numeric values. Efficient arrays of numeric values
* weakref: weakref --- Weak references. Weak references
* types: types --- Dynamic type creation and names for built-in types. Dynamic type creation and names for built-in types
* copy: copy --- Shallow and deep copy operations. Shallow and deep copy operations
* pprint: pprint --- Data pretty printer. Data pretty printer
* reprlib: reprlib --- Alternate repr implementation. Alternate repr() implementation
* enum: enum --- Support for enumerations. Support for enumerations

datetime — Basic date and time types

* Available Types:: 
* timedelta Objects:: 
* date Objects:: 
* datetime Objects:: 
* time Objects:: 
* tzinfo Objects:: 
* timezone Objects:: 
* strftime() and strptime() Behavior: strftime and strptime Behavior. 

collections — Container datatypes

* ChainMap objects:: 
* Counter objects:: 
* deque objects:: 
* defaultdict objects:: 
* namedtuple() Factory Function for Tuples with Named Fields: namedtuple Factory Function for Tuples with Named Fields. 
* OrderedDict objects:: 
* UserDict objects:: 
* UserList objects:: 
* UserString objects:: 

ChainMap objects

* ChainMap Examples and Recipes:: 

deque objects

* deque Recipes:: 

defaultdict objects

* defaultdict Examples:: 

OrderedDict objects

* OrderedDict Examples and Recipes:: 

collections.abc — Abstract Base Classes for Containers

* Collections Abstract Base Classes:: 

heapq — Heap queue algorithm

* Basic Examples:: 
* Priority Queue Implementation Notes:: 
* Theory:: 

bisect — Array bisection algorithm

* Searching Sorted Lists:: 
* Other Examples:: 

weakref — Weak references

* Weak Reference Objects:: 
* Example: Example<2>. 
* Finalizer Objects:: 
* Comparing finalizers with __del__() methods: Comparing finalizers with __del__ methods. 

types — Dynamic type creation and names for built-in types

* Dynamic Type Creation:: 
* Standard Interpreter Types:: 
* Additional Utility Classes and Functions:: 
* Coroutine Utility Functions:: 

pprint — Data pretty printer

* PrettyPrinter Objects:: 
* Example: Example<3>. 

reprlib — Alternate repr() implementation

* Repr Objects:: 
* Subclassing Repr Objects:: 

enum — Support for enumerations

* Module Contents: Module Contents<2>. 
* Creating an Enum:: 
* Programmatic access to enumeration members and their attributes:: 
* Duplicating enum members and values:: 
* Ensuring unique enumeration values:: 
* Iteration:: 
* Comparisons: Comparisons<3>. 
* Allowed members and attributes of enumerations:: 
* Restricted subclassing of enumerations:: 
* Pickling:: 
* Functional API:: 
* Derived Enumerations:: 
* Interesting examples:: 
* How are Enums different?:: 

Derived Enumerations

* IntEnum:: 
* Others:: 

Interesting examples

* AutoNumber:: 
* OrderedEnum:: 
* DuplicateFreeEnum:: 
* Planet:: 

How are Enums different?

* Enum Classes:: 
* Enum Members (aka instances): Enum Members aka instances. 
* Finer Points:: 

Numeric and Mathematical Modules

* numbers: numbers --- Numeric abstract base classes. Numeric abstract base classes
* math: math --- Mathematical functions. Mathematical functions
* cmath: cmath --- Mathematical functions for complex numbers. Mathematical functions for complex numbers
* decimal: decimal --- Decimal fixed point and floating point arithmetic. Decimal fixed point and floating point arithmetic
* fractions: fractions --- Rational numbers. Rational numbers
* random: random --- Generate pseudo-random numbers. Generate pseudo-random numbers
* statistics: statistics --- Mathematical statistics functions. Mathematical statistics functions

numbers — Numeric abstract base classes

* The numeric tower:: 
* Notes for type implementors:: 

Notes for type implementors

* Adding More Numeric ABCs:: 
* Implementing the arithmetic operations:: 

math — Mathematical functions

* Number-theoretic and representation functions:: 
* Power and logarithmic functions:: 
* Trigonometric functions:: 
* Angular conversion:: 
* Hyperbolic functions:: 
* Special functions:: 
* Constants:: 

cmath — Mathematical functions for complex numbers

* Conversions to and from polar coordinates:: 
* Power and logarithmic functions: Power and logarithmic functions<2>. 
* Trigonometric functions: Trigonometric functions<2>. 
* Hyperbolic functions: Hyperbolic functions<2>. 
* Classification functions:: 
* Constants: Constants<2>. 

decimal — Decimal fixed point and floating point arithmetic

* Quick-start Tutorial:: 
* Decimal objects:: 
* Context objects:: 
* Constants: Constants<3>. 
* Rounding modes:: 
* Signals:: 
* Floating Point Notes:: 
* Working with threads:: 
* Recipes:: 
* Decimal FAQ:: 

Decimal objects

* Logical operands:: 

Floating Point Notes

* Mitigating round-off error with increased precision:: 
* Special values:: 

random — Generate pseudo-random numbers

* Notes on Reproducibility:: 
* Examples and Recipes:: 

statistics — Mathematical statistics functions

* Averages and measures of central location:: 
* Measures of spread:: 
* Function details:: 
* Exceptions: Exceptions<3>. 

Functional Programming Modules

* itertools: itertools --- Functions creating iterators for efficient looping. Functions creating iterators for efficient looping
* functools: functools --- Higher-order functions and operations on callable objects. Higher-order functions and operations on callable
                        objects
* operator: operator --- Standard operators as functions. Standard operators as functions

itertools — Functions creating iterators for efficient looping

* Itertool functions:: 
* Itertools Recipes:: 

functools — Higher-order functions and operations on callable objects

* partial Objects:: 

operator — Standard operators as functions

* Mapping Operators to Functions:: 
* Inplace Operators:: 

File and Directory Access

* pathlib: pathlib --- Object-oriented filesystem paths. Object-oriented filesystem paths
* os.path: os path --- Common pathname manipulations. Common pathname manipulations
* fileinput: fileinput --- Iterate over lines from multiple input streams. Iterate over lines from multiple input streams
* stat: stat --- Interpreting stat results. Interpreting stat() results
* filecmp: filecmp --- File and Directory Comparisons. File and Directory Comparisons
* tempfile: tempfile --- Generate temporary files and directories. Generate temporary files and directories
* glob: glob --- Unix style pathname pattern expansion. Unix style pathname pattern expansion
* fnmatch: fnmatch --- Unix filename pattern matching. Unix filename pattern matching
* linecache: linecache --- Random access to text lines. Random access to text lines
* shutil: shutil --- High-level file operations. High-level file operations
* macpath: macpath --- Mac OS 9 path manipulation functions. Mac OS 9 path manipulation functions

pathlib — Object-oriented filesystem paths

* Basic use:: 
* Pure paths:: 
* Concrete paths:: 

Pure paths

* General properties:: 
* Operators: Operators<2>. 
* Accessing individual parts:: 
* Methods and properties:: 

Concrete paths

* Methods: Methods<2>. 

filecmp — File and Directory Comparisons

* The dircmp class:: 

tempfile — Generate temporary files and directories

* Examples: Examples<3>. 
* Deprecated functions and variables:: 

shutil — High-level file operations

* Directory and files operations:: 
* Archiving operations:: 
* Querying the size of the output terminal:: 

Directory and files operations

* copytree example:: 
* rmtree example:: 

Archiving operations

* Archiving example:: 

Data Persistence

* pickle: pickle --- Python object serialization. Python object serialization
* copyreg: copyreg --- Register pickle support functions. Register pickle support functions
* shelve: shelve --- Python object persistence. Python object persistence
* marshal: marshal --- Internal Python object serialization. Internal Python object serialization
* dbm: dbm --- Interfaces to Unix "databases". Interfaces to Unix "databases"
* sqlite3: sqlite3 --- DB-API 2 0 interface for SQLite databases. DB-API 2.0 interface for SQLite databases

pickle — Python object serialization

* Relationship to other Python modules:: 
* Data stream format:: 
* Module Interface:: 
* What can be pickled and unpickled?:: 
* Pickling Class Instances:: 
* Restricting Globals:: 
* Performance: Performance<2>. 
* Examples: Examples<4>. 

Relationship to other Python modules

* Comparison with marshal:: 
* Comparison with json:: 

Pickling Class Instances

* Persistence of External Objects:: 
* Dispatch Tables:: 
* Handling Stateful Objects:: 

copyreg — Register pickle support functions

* Example: Example<4>. 

shelve — Python object persistence

* Restrictions:: 
* Example: Example<5>. 

dbm — Interfaces to Unix "databases"

* dbm.gnu: dbm gnu --- GNU's reinterpretation of dbm. GNU’s reinterpretation of dbm
* dbm.ndbm: dbm ndbm --- Interface based on ndbm. Interface based on ndbm
* dbm.dumb: dbm dumb --- Portable DBM implementation. Portable DBM implementation

sqlite3 — DB-API 2.0 interface for SQLite databases

* Module functions and constants:: 
* Connection Objects:: 
* Cursor Objects:: 
* Row Objects:: 
* SQLite and Python types:: 
* Controlling Transactions:: 
* Using sqlite3 efficiently:: 
* Common issues:: 

SQLite and Python types

* Introduction: Introduction<7>. 
* Using adapters to store additional Python types in SQLite databases:: 
* Converting SQLite values to custom Python types:: 
* Default adapters and converters:: 

Using adapters to store additional Python types in SQLite databases

* Letting your object adapt itself:: 
* Registering an adapter callable:: 

Using sqlite3 efficiently

* Using shortcut methods:: 
* Accessing columns by name instead of by index:: 
* Using the connection as a context manager:: 

Common issues

* Multithreading:: 

Data Compression and Archiving

* zlib: zlib --- Compression compatible with gzip. Compression compatible with gzip
* gzip: gzip --- Support for gzip files. Support for gzip files
* bz2: bz2 --- Support for bzip2 compression. Support for bzip2 compression
* lzma: lzma --- Compression using the LZMA algorithm. Compression using the LZMA algorithm
* zipfile: zipfile --- Work with ZIP archives. Work with ZIP archives
* tarfile: tarfile --- Read and write tar archive files. Read and write tar archive files

gzip — Support for gzip files

* Examples of usage:: 

bz2 — Support for bzip2 compression

* (De)compression of files: De compression of files. 
* Incremental (de)compression: Incremental de compression. 
* One-shot (de)compression: One-shot de compression. 

lzma — Compression using the LZMA algorithm

* Reading and writing compressed files:: 
* Compressing and decompressing data in memory:: 
* Miscellaneous: Miscellaneous<2>. 
* Specifying custom filter chains:: 
* Examples: Examples<5>. 

zipfile — Work with ZIP archives

* ZipFile Objects:: 
* PyZipFile Objects:: 
* ZipInfo Objects:: 

tarfile — Read and write tar archive files

* TarFile Objects:: 
* TarInfo Objects:: 
* Command Line Interface:: 
* Examples: Examples<6>. 
* Supported tar formats:: 
* Unicode issues:: 

Command Line Interface

* Command line options:: 

File Formats

* csv: csv --- CSV File Reading and Writing. CSV File Reading and Writing
* configparser: configparser --- Configuration file parser. Configuration file parser
* netrc: netrc --- netrc file processing. netrc file processing
* xdrlib: xdrlib --- Encode and decode XDR data. Encode and decode XDR data
* plistlib: plistlib --- Generate and parse Mac OS X plist files. Generate and parse Mac OS X .plist files

csv — CSV File Reading and Writing

* Module Contents: Module Contents<3>. 
* Dialects and Formatting Parameters:: 
* Reader Objects:: 
* Writer Objects:: 
* Examples: Examples<7>. 

configparser — Configuration file parser

* Quick Start:: 
* Supported Datatypes:: 
* Fallback Values:: 
* Supported INI File Structure:: 
* Interpolation of values:: 
* Mapping Protocol Access:: 
* Customizing Parser Behaviour:: 
* Legacy API Examples:: 
* ConfigParser Objects:: 
* RawConfigParser Objects:: 
* Exceptions: Exceptions<4>. 

netrc — netrc file processing

* netrc Objects:: 

xdrlib — Encode and decode XDR data

* Packer Objects:: 
* Unpacker Objects:: 
* Exceptions: Exceptions<5>. 

plistlib — Generate and parse Mac OS X .plist files

* Examples: Examples<8>. 

Cryptographic Services

* hashlib: hashlib --- Secure hashes and message digests. Secure hashes and message digests
* hmac: hmac --- Keyed-Hashing for Message Authentication. Keyed-Hashing for Message Authentication
* secrets: secrets --- Generate secure random numbers for managing secrets. Generate secure random numbers for managing secrets

hashlib — Secure hashes and message digests

* Hash algorithms:: 
* Key derivation:: 

secrets — Generate secure random numbers for managing secrets

* Random numbers:: 
* Generating tokens:: 
* Other functions:: 
* Recipes and best practices:: 

Generating tokens

* How many bytes should tokens use?:: 

Generic Operating System Services

* os: os --- Miscellaneous operating system interfaces. Miscellaneous operating system interfaces
* io: io --- Core tools for working with streams. Core tools for working with streams
* time: time --- Time access and conversions. Time access and conversions
* argparse: argparse --- Parser for command-line options arguments and sub-commands. Parser for command-line options, arguments and sub-
                        commands
* getopt: getopt --- C-style parser for command line options. C-style parser for command line options
* logging: logging --- Logging facility for Python. Logging facility for Python
* logging.config: logging config --- Logging configuration. Logging configuration
* logging.handlers: logging handlers --- Logging handlers. Logging handlers
* getpass: getpass --- Portable password input. Portable password input
* curses: curses --- Terminal handling for character-cell displays. Terminal handling for character-cell displays
* curses.textpad: curses textpad --- Text input widget for curses programs. Text input widget for curses programs
* curses.ascii: curses ascii --- Utilities for ASCII characters. Utilities for ASCII characters
* curses.panel: curses panel --- A panel stack extension for curses. A panel stack extension for curses
* platform: platform --- Access to underlying platform's identifying data. Access to underlying platform’s identifying data
* errno: errno --- Standard errno system symbols. Standard errno system symbols
* ctypes: ctypes --- A foreign function library for Python. A foreign function library for Python

os — Miscellaneous operating system interfaces

* File Names, Command Line Arguments, and Environment Variables: File Names Command Line Arguments and Environment Variables. 
* Process Parameters:: 
* File Object Creation:: 
* File Descriptor Operations:: 
* Files and Directories:: 
* Process Management:: 
* Interface to the scheduler:: 
* Miscellaneous System Information:: 
* Miscellaneous Functions:: 

File Descriptor Operations

* Querying the size of a terminal:: 
* Inheritance of File Descriptors:: 

Files and Directories

* Linux extended attributes:: 

io — Core tools for working with streams

* Overview:: 
* High-level Module Interface:: 
* Class hierarchy:: 
* Performance: Performance<3>. 

Overview

* Text I/O:: 
* Binary I/O:: 
* Raw I/O:: 

High-level Module Interface

* In-memory streams:: 

Class hierarchy

* I/O Base Classes:: 
* Raw File I/O:: 
* Buffered Streams:: 
* Text I/O: Text I/O<2>. 

Performance

* Binary I/O: Binary I/O<2>. 
* Text I/O: Text I/O<3>. 
* Multi-threading: Multi-threading<3>. 
* Reentrancy:: 

argparse — Parser for command-line options, arguments and sub-commands

* Example: Example<6>. 
* ArgumentParser objects:: 
* The add_argument() method: The add_argument method. 
* The parse_args() method: The parse_args method. 
* Other utilities:: 
* Upgrading optparse code:: 

Example

* Creating a parser:: 
* Adding arguments:: 
* Parsing arguments:: 

ArgumentParser objects

* prog:: 
* usage:: 
* description:: 
* epilog:: 
* parents:: 
* formatter_class:: 
* prefix_chars:: 
* fromfile_prefix_chars:: 
* argument_default:: 
* allow_abbrev:: 
* conflict_handler:: 
* add_help:: 

The add_argument() method

* name or flags:: 
* action:: 
* nargs:: 
* const:: 
* default:: 
* type:: 
* choices:: 
* required:: 
* help:: 
* metavar:: 
* dest:: 
* Action classes:: 

The parse_args() method

* Option value syntax:: 
* Invalid arguments:: 
* Arguments containing -:: 
* Argument abbreviations (prefix matching): Argument abbreviations prefix matching. 
* Beyond sys.argv: Beyond sys argv. 
* The Namespace object:: 

Other utilities

* Sub-commands:: 
* FileType objects:: 
* Argument groups:: 
* Mutual exclusion:: 
* Parser defaults:: 
* Printing help:: 
* Partial parsing:: 
* Customizing file parsing:: 
* Exiting methods:: 

logging — Logging facility for Python

* Logger Objects:: 
* Logging Levels:: 
* Handler Objects:: 
* Formatter Objects:: 
* Filter Objects:: 
* LogRecord Objects:: 
* LogRecord attributes:: 
* LoggerAdapter Objects:: 
* Thread Safety:: 
* Module-Level Functions:: 
* Module-Level Attributes:: 
* Integration with the warnings module:: 

logging.config — Logging configuration

* Configuration functions:: 
* Configuration dictionary schema:: 
* Configuration file format:: 

Configuration dictionary schema

* Dictionary Schema Details:: 
* Incremental Configuration:: 
* Object connections:: 
* User-defined objects:: 
* Access to external objects:: 
* Access to internal objects:: 
* Import resolution and custom importers:: 

logging.handlers — Logging handlers

* StreamHandler:: 
* FileHandler:: 
* NullHandler:: 
* WatchedFileHandler:: 
* BaseRotatingHandler:: 
* RotatingFileHandler:: 
* TimedRotatingFileHandler:: 
* SocketHandler:: 
* DatagramHandler:: 
* SysLogHandler:: 
* NTEventLogHandler:: 
* SMTPHandler:: 
* MemoryHandler:: 
* HTTPHandler:: 
* QueueHandler:: 
* QueueListener:: 

curses — Terminal handling for character-cell displays

* Functions: Functions<2>. 
* Window Objects:: 
* Constants: Constants<4>. 

curses.textpad — Text input widget for curses programs

* Textbox objects:: 

curses.panel — A panel stack extension for curses

* Functions: Functions<3>. 
* Panel Objects:: 

platform —  Access to underlying platform’s identifying data

* Cross Platform:: 
* Java Platform:: 
* Windows Platform:: 
* Mac OS Platform:: 
* Unix Platforms:: 

Windows Platform

* Win95/98 specific:: 

ctypes — A foreign function library for Python

* ctypes tutorial:: 
* ctypes reference:: 

ctypes tutorial

* Loading dynamic link libraries:: 
* Accessing functions from loaded dlls:: 
* Calling functions:: 
* Fundamental data types:: 
* Calling functions, continued: Calling functions continued. 
* Calling functions with your own custom data types:: 
* Specifying the required argument types (function prototypes): Specifying the required argument types function prototypes. 
* Return types:: 
* Passing pointers (or; passing parameters by reference): Passing pointers or passing parameters by reference. 
* Structures and unions:: 
* Structure/union alignment and byte order:: 
* Bit fields in structures and unions:: 
* Arrays:: 
* Pointers:: 
* Type conversions:: 
* Incomplete Types:: 
* Callback functions:: 
* Accessing values exported from dlls:: 
* Surprises:: 
* Variable-sized data types:: 

ctypes reference

* Finding shared libraries:: 
* Loading shared libraries:: 
* Foreign functions:: 
* Function prototypes:: 
* Utility functions:: 
* Data types:: 
* Fundamental data types: Fundamental data types<2>. 
* Structured data types:: 
* Arrays and pointers:: 

Concurrent Execution

* threading: threading --- Thread-based parallelism. Thread-based parallelism
* multiprocessing: multiprocessing --- Process-based parallelism. Process-based parallelism
* The concurrent package:: 
* concurrent.futures: concurrent futures --- Launching parallel tasks. Launching parallel tasks
* subprocess: subprocess --- Subprocess management. Subprocess management
* sched: sched --- Event scheduler. Event scheduler
* queue: queue --- A synchronized queue class. A synchronized queue class
* dummy_threading: dummy_threading --- Drop-in replacement for the threading module. Drop-in replacement for the threading module
* _thread: _thread --- Low-level threading API. Low-level threading API
* _dummy_thread: _dummy_thread --- Drop-in replacement for the _thread module. Drop-in replacement for the _thread module

threading — Thread-based parallelism

* Thread-Local Data:: 
* Thread Objects:: 
* Lock Objects:: 
* RLock Objects:: 
* Condition Objects:: 
* Semaphore Objects:: 
* Event Objects:: 
* Timer Objects:: 
* Barrier Objects:: 
* Using locks, conditions, and semaphores in the with statement: Using locks conditions and semaphores in the with statement. 

Semaphore Objects

* Semaphore Example:: 

multiprocessing — Process-based parallelism

* Introduction: Introduction<8>. 
* Reference:: 
* Programming guidelines:: 
* Examples: Examples<9>. 

Introduction

* The Process class:: 
* Contexts and start methods:: 
* Exchanging objects between processes:: 
* Synchronization between processes:: 
* Sharing state between processes:: 
* Using a pool of workers:: 

Reference

* Process and exceptions:: 
* Pipes and Queues:: 
* Miscellaneous: Miscellaneous<3>. 
* Connection Objects: Connection Objects<2>. 
* Synchronization primitives:: 
* Shared ctypes Objects:: 
* Managers:: 
* Proxy Objects:: 
* Process Pools:: 
* Listeners and Clients:: 
* Authentication keys:: 
* Logging: Logging<2>. 
* The multiprocessing.dummy module: The multiprocessing dummy module. 

Shared ctypes Objects

* The multiprocessing.sharedctypes module: The multiprocessing sharedctypes module. 

Managers

* Customized managers:: 
* Using a remote manager:: 

Proxy Objects

* Cleanup:: 

Listeners and Clients

* Address Formats:: 

Programming guidelines

* All start methods:: 
* The spawn and forkserver start methods:: 

concurrent.futures — Launching parallel tasks

* Executor Objects:: 
* ThreadPoolExecutor:: 
* ProcessPoolExecutor:: 
* Future Objects:: 
* Module Functions:: 
* Exception classes:: 

ThreadPoolExecutor

* ThreadPoolExecutor Example:: 

ProcessPoolExecutor

* ProcessPoolExecutor Example:: 

subprocess — Subprocess management

* Using the subprocess Module:: 
* Security Considerations:: 
* Popen Objects:: 
* Windows Popen Helpers:: 
* Older high-level API:: 
* Replacing Older Functions with the subprocess Module:: 
* Legacy Shell Invocation Functions:: 
* Notes:: 

Using the subprocess Module

* Frequently Used Arguments:: 
* Popen Constructor:: 
* Exceptions: Exceptions<6>. 

Windows Popen Helpers

* Constants: Constants<5>. 

Replacing Older Functions with the subprocess Module

* Replacing /bin/sh shell backquote:: 
* Replacing shell pipeline:: 
* Replacing os.system(): Replacing os system. 
* Replacing the os.spawn family: Replacing the os spawn family. 
* Replacing os.popen(), os.popen2(), os.popen3(): Replacing os popen os popen2 os popen3. 
* Replacing functions from the popen2 module:: 

Notes

* Converting an argument sequence to a string on Windows:: 

sched — Event scheduler

* Scheduler Objects:: 

queue — A synchronized queue class

* Queue Objects:: 

Interprocess Communication and Networking

* socket: socket --- Low-level networking interface. Low-level networking interface
* ssl: ssl --- TLS/SSL wrapper for socket objects. TLS/SSL wrapper for socket objects
* select: select --- Waiting for I/O completion. Waiting for I/O completion
* selectors: selectors -- High-level I/O multiplexing. High-level I/O multiplexing
* asyncio: asyncio -- Asynchronous I/O event loop coroutines and tasks. Asynchronous I/O, event loop, coroutines and tasks
* asyncore: asyncore --- Asynchronous socket handler. Asynchronous socket handler
* asynchat: asynchat --- Asynchronous socket command/response handler. Asynchronous socket command/response handler
* signal: signal --- Set handlers for asynchronous events. Set handlers for asynchronous events
* mmap: mmap --- Memory-mapped file support. Memory-mapped file support

socket — Low-level networking interface

* Socket families:: 
* Module contents:: 
* Socket Objects:: 
* Notes on socket timeouts:: 
* Example: Example<7>. 

Module contents

* Exceptions: Exceptions<7>. 
* Constants: Constants<6>. 
* Functions: Functions<4>. 

Functions

* Creating sockets:: 
* Other functions: Other functions<2>. 

Notes on socket timeouts

* Timeouts and the connect method:: 
* Timeouts and the accept method:: 

ssl — TLS/SSL wrapper for socket objects

* Functions, Constants, and Exceptions: Functions Constants and Exceptions. 
* SSL Sockets:: 
* SSL Contexts:: 
* Certificates:: 
* Examples: Examples<10>. 
* Notes on non-blocking sockets:: 
* Memory BIO Support: Memory BIO Support<2>. 
* Security considerations:: 

Functions, Constants, and Exceptions

* Socket creation:: 
* Context creation:: 
* Random generation:: 
* Certificate handling:: 
* Constants: Constants<7>. 

Certificates

* Certificate chains:: 
* CA certificates:: 
* Combined key and certificate:: 
* Self-signed certificates:: 

Examples

* Testing for SSL support:: 
* Client-side operation:: 
* Server-side operation:: 

Security considerations

* Best defaults:: 
* Manual settings:: 
* Multi-processing:: 

Manual settings

* Verifying certificates:: 
* Protocol versions:: 
* Cipher selection:: 

select — Waiting for I/O completion

* /dev/poll Polling Objects:: 
* Edge and Level Trigger Polling (epoll) Objects: Edge and Level Trigger Polling epoll Objects. 
* Polling Objects:: 
* Kqueue Objects:: 
* Kevent Objects:: 

selectors – High-level I/O multiplexing

* Introduction: Introduction<9>. 
* Classes: Classes<3>. 
* Examples: Examples<11>. 

asyncio – Asynchronous I/O, event loop, coroutines and tasks

* Base Event Loop:: 
* Event loops:: 
* Tasks and coroutines:: 
* Transports and protocols (callback based API): Transports and protocols callback based API. 
* Streams (coroutine based API): Streams coroutine based API. 
* Subprocess:: 
* Synchronization primitives: Synchronization primitives<2>. 
* Queues:: 
* Develop with asyncio:: 

Base Event Loop

* Run an event loop:: 
* Calls: Calls<2>. 
* Delayed calls:: 
* Tasks:: 
* Creating connections:: 
* Creating listening connections:: 
* Watch file descriptors:: 
* Low-level socket operations:: 
* Resolve host name:: 
* Connect pipes:: 
* UNIX signals:: 
* Executor:: 
* Error Handling API:: 
* Debug mode:: 
* Server:: 
* Handle:: 
* Event loop examples:: 

Event loop examples

* Hello World with call_soon(): Hello World with call_soon. 
* Display the current date with call_later(): Display the current date with call_later. 
* Watch a file descriptor for read events:: 
* Set signal handlers for SIGINT and SIGTERM:: 

Event loops

* Event loop functions:: 
* Available event loops:: 
* Platform support:: 
* Event loop policies and the default policy:: 
* Event loop policy interface:: 
* Access to the global loop policy:: 

Platform support

* Windows: Windows<7>. 
* Mac OS X:: 

Tasks and coroutines

* Coroutines: Coroutines<3>. 
* InvalidStateError:: 
* TimeoutError:: 
* Future:: 
* Task:: 
* Task functions:: 

Coroutines

* Example; Hello World coroutine: Example Hello World coroutine. 
* Example; Coroutine displaying the current date: Example Coroutine displaying the current date. 
* Example; Chain coroutines: Example Chain coroutines. 

Future

* Example; Future with run_until_complete(): Example Future with run_until_complete. 
* Example; Future with run_forever(): Example Future with run_forever. 

Task

* Example; Parallel execution of tasks: Example Parallel execution of tasks. 

Transports  and protocols (callback based API)

* Transports:: 
* Protocols:: 
* Protocol examples:: 

Transports

* BaseTransport:: 
* ReadTransport:: 
* WriteTransport:: 
* DatagramTransport:: 
* BaseSubprocessTransport:: 

Protocols

* Protocol classes:: 
* Connection callbacks:: 
* Streaming protocols:: 
* Datagram protocols:: 
* Flow control callbacks:: 
* Coroutines and protocols:: 

Protocol examples

* TCP echo client protocol:: 
* TCP echo server protocol:: 
* UDP echo client protocol:: 
* UDP echo server protocol:: 
* Register an open socket to wait for data using a protocol:: 

Streams (coroutine based API)

* Stream functions:: 
* StreamReader:: 
* StreamWriter:: 
* StreamReaderProtocol:: 
* IncompleteReadError:: 
* Stream examples:: 

Stream examples

* TCP echo client using streams:: 
* TCP echo server using streams:: 
* Get HTTP headers:: 
* Register an open socket to wait for data using streams:: 

Subprocess

* Windows event loop:: 
* Create a subprocess; high-level API using Process: Create a subprocess high-level API using Process. 
* Create a subprocess; low-level API using subprocess.Popen: Create a subprocess low-level API using subprocess Popen. 
* Constants: Constants<8>. 
* Process:: 
* Subprocess and threads:: 
* Subprocess examples:: 

Subprocess examples

* Subprocess using transport and protocol:: 
* Subprocess using streams:: 

Synchronization primitives

* Locks:: 
* Semaphores:: 

Locks

* Lock:: 
* Event:: 
* Condition:: 

Semaphores

* Semaphore:: 
* BoundedSemaphore:: 

Queues

* Queue:: 
* PriorityQueue:: 
* LifoQueue:: 

LifoQueue

* Exceptions: Exceptions<8>. 

Develop with asyncio

* Debug mode of asyncio:: 
* Cancellation:: 
* Concurrency and multithreading:: 
* Handle blocking functions correctly:: 
* Logging: Logging<3>. 
* Detect coroutine objects never scheduled:: 
* Detect exceptions never consumed:: 
* Chain coroutines correctly:: 
* Pending task destroyed:: 
* Close transports and event loops:: 

asyncore — Asynchronous socket handler

* asyncore Example basic HTTP client:: 
* asyncore Example basic echo server:: 

asynchat — Asynchronous socket command/response handler

* asynchat Example:: 

signal — Set handlers for asynchronous events

* General rules:: 
* Module contents: Module contents<2>. 
* Example: Example<8>. 

General rules

* Execution of Python signal handlers:: 
* Signals and threads:: 

Internet Data Handling

* email: email --- An email and MIME handling package. An email and MIME handling package
* json: json --- JSON encoder and decoder. JSON encoder and decoder
* mailcap: mailcap --- Mailcap file handling. Mailcap file handling
* mailbox: mailbox --- Manipulate mailboxes in various formats. Manipulate mailboxes in various formats
* mimetypes: mimetypes --- Map filenames to MIME types. Map filenames to MIME types
* base64: base64 --- Base16 Base32 Base64 Base85 Data Encodings. Base16, Base32, Base64, Base85 Data Encodings
* binhex: binhex --- Encode and decode binhex4 files. Encode and decode binhex4 files
* binascii: binascii --- Convert between binary and ASCII. Convert between binary and ASCII
* quopri: quopri --- Encode and decode MIME quoted-printable data. Encode and decode MIME quoted-printable data
* uu: uu --- Encode and decode uuencode files. Encode and decode uuencode files

email — An email and MIME handling package

* email.message; Representing an email message: email message Representing an email message. 
* email.parser; Parsing email messages: email parser Parsing email messages. 
* email.generator; Generating MIME documents: email generator Generating MIME documents. 
* email.policy; Policy Objects: email policy Policy Objects. 
* email.headerregistry; Custom Header Objects: email headerregistry Custom Header Objects. 
* email.contentmanager; Managing MIME Content: email contentmanager Managing MIME Content. 
* email.mime; Creating email and MIME objects from scratch: email mime Creating email and MIME objects from scratch. 
* email.header; Internationalized headers: email header Internationalized headers. 
* email.charset; Representing character sets: email charset Representing character sets. 
* email.encoders; Encoders: email encoders Encoders. 
* email.errors; Exception and Defect classes: email errors Exception and Defect classes. 
* email.utils; Miscellaneous utilities: email utils Miscellaneous utilities. 
* email.iterators; Iterators: email iterators Iterators. 
* email; Examples: email Examples. 
* Package History:: 
* Differences from mimelib:: 

email.parser: Parsing email messages

* FeedParser API:: 
* Parser class API:: 
* Additional notes:: 

email.contentmanager: Managing MIME Content

* Content Manager Instances:: 

email: Examples

* Examples using the Provisional API:: 

json — JSON encoder and decoder

* Basic Usage:: 
* Encoders and Decoders:: 
* Exceptions: Exceptions<9>. 
* Standard Compliance and Interoperability:: 
* Command Line Interface: Command Line Interface<2>. 

Standard Compliance and Interoperability

* Character Encodings:: 
* Infinite and NaN Number Values:: 
* Repeated Names Within an Object:: 
* Top-level Non-Object, Non-Array Values: Top-level Non-Object Non-Array Values. 
* Implementation Limitations:: 

Command Line Interface

* Command line options: Command line options<2>. 

mailbox — Manipulate mailboxes in various formats

* Mailbox objects:: 
* Message objects:: 
* Exceptions: Exceptions<10>. 
* Examples: Examples<12>. 

Mailbox objects

* Maildir:: 
* mbox:: 
* MH:: 
* Babyl:: 
* MMDF:: 

Message objects

* MaildirMessage:: 
* mboxMessage:: 
* MHMessage:: 
* BabylMessage:: 
* MMDFMessage:: 

mimetypes — Map filenames to MIME types

* MimeTypes Objects:: 

binhex — Encode and decode binhex4 files

* Notes: Notes<2>. 

Structured Markup Processing Tools

* html: html --- HyperText Markup Language support. HyperText Markup Language support
* html.parser: html parser --- Simple HTML and XHTML parser. Simple HTML and XHTML parser
* html.entities: html entities --- Definitions of HTML general entities. Definitions of HTML general entities
* XML Processing Modules:: 
* xml.etree.ElementTree: xml etree ElementTree --- The ElementTree XML API. The ElementTree XML API
* xml.dom: xml dom --- The Document Object Model API. The Document Object Model API
* xml.dom.minidom: xml dom minidom --- Minimal DOM implementation. Minimal DOM implementation
* xml.dom.pulldom: xml dom pulldom --- Support for building partial DOM trees. Support for building partial DOM trees
* xml.sax: xml sax --- Support for SAX2 parsers. Support for SAX2 parsers
* xml.sax.handler: xml sax handler --- Base classes for SAX handlers. Base classes for SAX handlers
* xml.sax.saxutils: xml sax saxutils --- SAX Utilities. SAX Utilities
* xml.sax.xmlreader: xml sax xmlreader --- Interface for XML parsers. Interface for XML parsers
* xml.parsers.expat: xml parsers expat --- Fast XML parsing using Expat. Fast XML parsing using Expat

html.parser — Simple HTML and XHTML parser

* Example HTML Parser Application:: 
* HTMLParser Methods:: 
* Examples: Examples<13>. 

XML Processing Modules

* XML vulnerabilities:: 
* The defusedxml and defusedexpat Packages:: 

xml.etree.ElementTree — The ElementTree XML API

* Tutorial:: 
* XPath support:: 
* Reference: Reference<2>. 

Tutorial

* XML tree and elements:: 
* Parsing XML:: 
* Pull API for non-blocking parsing:: 
* Finding interesting elements:: 
* Modifying an XML File:: 
* Building XML documents:: 
* Parsing XML with Namespaces:: 
* Additional resources:: 

XPath support

* Example: Example<9>. 
* Supported XPath syntax:: 

Reference

* Functions: Functions<5>. 
* Element Objects:: 
* ElementTree Objects:: 
* QName Objects:: 
* TreeBuilder Objects:: 
* XMLParser Objects:: 
* XMLPullParser Objects:: 
* Exceptions: Exceptions<11>. 

xml.dom — The Document Object Model API

* Module Contents: Module Contents<4>. 
* Objects in the DOM:: 
* Conformance:: 

Objects in the DOM

* DOMImplementation Objects:: 
* Node Objects:: 
* NodeList Objects:: 
* DocumentType Objects:: 
* Document Objects:: 
* Element Objects: Element Objects<2>. 
* Attr Objects:: 
* NamedNodeMap Objects:: 
* Comment Objects:: 
* Text and CDATASection Objects:: 
* ProcessingInstruction Objects:: 
* Exceptions: Exceptions<12>. 

Conformance

* Type Mapping:: 
* Accessor Methods:: 

xml.dom.minidom — Minimal DOM implementation

* DOM Objects:: 
* DOM Example:: 
* minidom and the DOM standard:: 

xml.dom.pulldom — Support for building partial DOM trees

* DOMEventStream Objects:: 

xml.sax — Support for SAX2 parsers

* SAXException Objects:: 

xml.sax.handler — Base classes for SAX handlers

* ContentHandler Objects:: 
* DTDHandler Objects:: 
* EntityResolver Objects:: 
* ErrorHandler Objects:: 

xml.sax.xmlreader — Interface for XML parsers

* XMLReader Objects:: 
* IncrementalParser Objects:: 
* Locator Objects:: 
* InputSource Objects:: 
* The Attributes Interface:: 
* The AttributesNS Interface:: 

xml.parsers.expat — Fast XML parsing using Expat

* XMLParser Objects: XMLParser Objects<2>. 
* ExpatError Exceptions:: 
* Example: Example<10>. 
* Content Model Descriptions:: 
* Expat error constants:: 

Internet Protocols and Support

* webbrowser: webbrowser --- Convenient Web-browser controller. Convenient Web-browser controller
* cgi: cgi --- Common Gateway Interface support. Common Gateway Interface support
* cgitb: cgitb --- Traceback manager for CGI scripts. Traceback manager for CGI scripts
* wsgiref: wsgiref --- WSGI Utilities and Reference Implementation. WSGI Utilities and Reference Implementation
* urllib: urllib --- URL handling modules. URL handling modules
* urllib.request: urllib request --- Extensible library for opening URLs. Extensible library for opening URLs
* urllib.response: urllib response --- Response classes used by urllib. Response classes used by urllib
* urllib.parse: urllib parse --- Parse URLs into components. Parse URLs into components
* urllib.error: urllib error --- Exception classes raised by urllib request. Exception classes raised by urllib.request
* urllib.robotparser: urllib robotparser --- Parser for robots txt. Parser for robots.txt
* http: http --- HTTP modules. HTTP modules
* http.client: http client --- HTTP protocol client. HTTP protocol client
* ftplib: ftplib --- FTP protocol client. FTP protocol client
* poplib: poplib --- POP3 protocol client. POP3 protocol client
* imaplib: imaplib --- IMAP4 protocol client. IMAP4 protocol client
* nntplib: nntplib --- NNTP protocol client. NNTP protocol client
* smtplib: smtplib --- SMTP protocol client. SMTP protocol client
* smtpd: smtpd --- SMTP Server. SMTP Server
* telnetlib: telnetlib --- Telnet client. Telnet client
* uuid: uuid --- UUID objects according to RFC 4122. UUID objects according to RFC 4122
* socketserver: socketserver --- A framework for network servers. A framework for network servers
* http.server: http server --- HTTP servers. HTTP servers
* http.cookies: http cookies --- HTTP state management. HTTP state management
* http.cookiejar: http cookiejar --- Cookie handling for HTTP clients. Cookie handling for HTTP clients
* xmlrpc: xmlrpc --- XMLRPC server and client modules. XMLRPC server and client modules
* xmlrpc.client: xmlrpc client --- XML-RPC client access. XML-RPC client access
* xmlrpc.server: xmlrpc server --- Basic XML-RPC servers. Basic XML-RPC servers
* ipaddress: ipaddress --- IPv4/IPv6 manipulation library. IPv4/IPv6 manipulation library

webbrowser — Convenient Web-browser controller

* Browser Controller Objects:: 

cgi — Common Gateway Interface support

* Introduction: Introduction<10>. 
* Using the cgi module:: 
* Higher Level Interface:: 
* Functions: Functions<6>. 
* Caring about security:: 
* Installing your CGI script on a Unix system:: 
* Testing your CGI script:: 
* Debugging CGI scripts:: 
* Common problems and solutions:: 

wsgiref — WSGI Utilities and Reference Implementation

* wsgiref.util: wsgiref util -- WSGI environment utilities. WSGI environment utilities
* wsgiref.headers: wsgiref headers -- WSGI response header tools. WSGI response header tools
* wsgiref.simple_server: wsgiref simple_server -- a simple WSGI HTTP server. a simple WSGI HTTP server
* wsgiref.validate: wsgiref validate --- WSGI conformance checker. WSGI conformance checker
* wsgiref.handlers: wsgiref handlers -- server/gateway base classes. server/gateway base classes
* Examples: Examples<14>. 

urllib.request — Extensible library for opening URLs

* Request Objects:: 
* OpenerDirector Objects:: 
* BaseHandler Objects:: 
* HTTPRedirectHandler Objects:: 
* HTTPCookieProcessor Objects:: 
* ProxyHandler Objects:: 
* HTTPPasswordMgr Objects:: 
* HTTPPasswordMgrWithPriorAuth Objects:: 
* AbstractBasicAuthHandler Objects:: 
* HTTPBasicAuthHandler Objects:: 
* ProxyBasicAuthHandler Objects:: 
* AbstractDigestAuthHandler Objects:: 
* HTTPDigestAuthHandler Objects:: 
* ProxyDigestAuthHandler Objects:: 
* HTTPHandler Objects:: 
* HTTPSHandler Objects:: 
* FileHandler Objects:: 
* DataHandler Objects:: 
* FTPHandler Objects:: 
* CacheFTPHandler Objects:: 
* UnknownHandler Objects:: 
* HTTPErrorProcessor Objects:: 
* Examples: Examples<15>. 
* Legacy interface:: 
* urllib.request Restrictions: urllib request Restrictions. 

urllib.parse — Parse URLs into components

* URL Parsing:: 
* Parsing ASCII Encoded Bytes:: 
* Structured Parse Results:: 
* URL Quoting:: 

http — HTTP modules

* HTTP status codes:: 

http.client — HTTP protocol client

* HTTPConnection Objects:: 
* HTTPResponse Objects:: 
* Examples: Examples<16>. 
* HTTPMessage Objects:: 

ftplib — FTP protocol client

* FTP Objects:: 
* FTP_TLS Objects:: 

poplib — POP3 protocol client

* POP3 Objects:: 
* POP3 Example:: 

imaplib — IMAP4 protocol client

* IMAP4 Objects:: 
* IMAP4 Example:: 

nntplib — NNTP protocol client

* NNTP Objects:: 
* Utility functions: Utility functions<2>. 

NNTP Objects

* Attributes:: 
* Methods: Methods<3>. 

smtplib — SMTP protocol client

* SMTP Objects:: 
* SMTP Example:: 

smtpd — SMTP Server

* SMTPServer Objects:: 
* DebuggingServer Objects:: 
* PureProxy Objects:: 
* MailmanProxy Objects:: 
* SMTPChannel Objects:: 

telnetlib — Telnet client

* Telnet Objects:: 
* Telnet Example:: 

uuid — UUID objects according to RFC 4122

* Example: Example<11>. 

socketserver — A framework for network servers

* Server Creation Notes:: 
* Server Objects:: 
* Request Handler Objects:: 
* Examples: Examples<17>. 

Examples

* socketserver.TCPServer Example: socketserver TCPServer Example. 
* socketserver.UDPServer Example: socketserver UDPServer Example. 
* Asynchronous Mixins:: 

http.cookies — HTTP state management

* Cookie Objects:: 
* Morsel Objects:: 
* Example: Example<12>. 

http.cookiejar — Cookie handling for HTTP clients

* CookieJar and FileCookieJar Objects:: 
* FileCookieJar subclasses and co-operation with web browsers:: 
* CookiePolicy Objects:: 
* DefaultCookiePolicy Objects:: 
* Cookie Objects: Cookie Objects<2>. 
* Examples: Examples<18>. 

xmlrpc.client — XML-RPC client access

* ServerProxy Objects:: 
* DateTime Objects:: 
* Binary Objects:: 
* Fault Objects:: 
* ProtocolError Objects:: 
* MultiCall Objects:: 
* Convenience Functions:: 
* Example of Client Usage:: 
* Example of Client and Server Usage:: 

xmlrpc.server — Basic XML-RPC servers

* SimpleXMLRPCServer Objects:: 
* CGIXMLRPCRequestHandler:: 
* Documenting XMLRPC server:: 
* DocXMLRPCServer Objects:: 
* DocCGIXMLRPCRequestHandler:: 

SimpleXMLRPCServer Objects

* SimpleXMLRPCServer Example:: 

ipaddress — IPv4/IPv6 manipulation library

* Convenience factory functions:: 
* IP Addresses:: 
* IP Network definitions:: 
* Interface objects:: 
* Other Module Level Functions:: 
* Custom Exceptions:: 

IP Addresses

* Address objects:: 
* Conversion to Strings and Integers:: 
* Operators: Operators<3>. 

Operators

* Comparison operators:: 
* Arithmetic operators:: 

IP Network definitions

* Prefix, net mask and host mask: Prefix net mask and host mask. 
* Network objects:: 
* Operators: Operators<4>. 

Operators

* Logical operators:: 
* Iteration: Iteration<2>. 
* Networks as containers of addresses:: 

Multimedia Services

* audioop: audioop --- Manipulate raw audio data. Manipulate raw audio data
* aifc: aifc --- Read and write AIFF and AIFC files. Read and write AIFF and AIFC files
* sunau: sunau --- Read and write Sun AU files. Read and write Sun AU files
* wave: wave --- Read and write WAV files. Read and write WAV files
* chunk: chunk --- Read IFF chunked data. Read IFF chunked data
* colorsys: colorsys --- Conversions between color systems. Conversions between color systems
* imghdr: imghdr --- Determine the type of an image. Determine the type of an image
* sndhdr: sndhdr --- Determine type of sound file. Determine type of sound file
* ossaudiodev: ossaudiodev --- Access to OSS-compatible audio devices. Access to OSS-compatible audio devices

sunau — Read and write Sun AU files

* AU_read Objects:: 
* AU_write Objects:: 

wave — Read and write WAV files

* Wave_read Objects:: 
* Wave_write Objects:: 

ossaudiodev — Access to OSS-compatible audio devices

* Audio Device Objects:: 
* Mixer Device Objects:: 

Internationalization

* gettext: gettext --- Multilingual internationalization services. Multilingual internationalization services
* locale: locale --- Internationalization services. Internationalization services

gettext — Multilingual internationalization services

* GNU gettext API:: 
* Class-based API:: 
* Internationalizing your programs and modules:: 
* Acknowledgements: Acknowledgements<9>. 

Class-based API

* The NullTranslations class:: 
* The GNUTranslations class:: 
* Solaris message catalog support:: 
* The Catalog constructor:: 

Internationalizing your programs and modules

* Localizing your module:: 
* Localizing your application:: 
* Changing languages on the fly:: 
* Deferred translations:: 

locale — Internationalization services

* Background, details, hints, tips and caveats: Background details hints tips and caveats. 
* For extension writers and programs that embed Python:: 
* Access to message catalogs:: 

Program Frameworks

* turtle: turtle --- Turtle graphics. Turtle graphics
* cmd: cmd --- Support for line-oriented command interpreters. Support for line-oriented command interpreters
* shlex: shlex --- Simple lexical analysis. Simple lexical analysis

turtle — Turtle graphics

* Introduction: Introduction<11>. 
* Overview of available Turtle and Screen methods:: 
* Methods of RawTurtle/Turtle and corresponding functions:: 
* Methods of TurtleScreen/Screen and corresponding functions:: 
* Public classes:: 
* Help and configuration:: 
* turtledemo: turtledemo --- Demo scripts. Demo scripts
* Changes since Python 2.6: Changes since Python 2 6. 
* Changes since Python 3.0: Changes since Python 3 0. 

Overview of available Turtle and Screen methods

* Turtle methods:: 
* Methods of TurtleScreen/Screen:: 

Methods of RawTurtle/Turtle and corresponding functions

* Turtle motion:: 
* Tell Turtle's state:: 
* Settings for measurement:: 
* Pen control:: 
* Turtle state:: 
* Using events:: 
* Special Turtle methods:: 
* Compound shapes:: 

Pen control

* Drawing state:: 
* Color control:: 
* Filling:: 
* More drawing control:: 

Turtle state

* Visibility:: 
* Appearance:: 

Methods of TurtleScreen/Screen and corresponding functions

* Window control:: 
* Animation control:: 
* Using screen events:: 
* Input methods:: 
* Settings and special methods:: 
* Methods specific to Screen, not inherited from TurtleScreen: Methods specific to Screen not inherited from TurtleScreen. 

Help and configuration

* How to use help:: 
* Translation of docstrings into different languages:: 
* How to configure Screen and Turtles:: 

cmd — Support for line-oriented command interpreters

* Cmd Objects:: 
* Cmd Example:: 

shlex — Simple lexical analysis

* shlex Objects:: 
* Parsing Rules:: 

Graphical User Interfaces with Tk

* tkinter: tkinter --- Python interface to Tcl/Tk. Python interface to Tcl/Tk
* tkinter.ttk: tkinter ttk --- Tk themed widgets. Tk themed widgets
* tkinter.tix: tkinter tix --- Extension widgets for Tk. Extension widgets for Tk
* tkinter.scrolledtext: tkinter scrolledtext --- Scrolled Text Widget. Scrolled Text Widget
* IDLE: IDLE<14>. 
* Other Graphical User Interface Packages:: 

tkinter — Python interface to Tcl/Tk

* Tkinter Modules:: 
* Tkinter Life Preserver:: 
* A (Very) Quick Look at Tcl/Tk: A Very Quick Look at Tcl/Tk. 
* Mapping Basic Tk into Tkinter:: 
* How Tk and Tkinter are Related:: 
* Handy Reference:: 
* File Handlers:: 

Tkinter Life Preserver

* How To Use This Section:: 
* A Simple Hello World Program:: 

Handy Reference

* Setting Options:: 
* The Packer:: 
* Packer Options:: 
* Coupling Widget Variables:: 
* The Window Manager:: 
* Tk Option Data Types:: 
* Bindings and Events:: 
* The index Parameter:: 
* Images:: 

tkinter.ttk — Tk themed widgets

* Using Ttk:: 
* Ttk Widgets:: 
* Widget:: 
* Combobox:: 
* Notebook:: 
* Progressbar:: 
* Separator:: 
* Sizegrip:: 
* Treeview:: 
* Ttk Styling:: 

Widget

* Standard Options:: 
* Scrollable Widget Options:: 
* Label Options:: 
* Compatibility Options:: 
* Widget States:: 
* ttk.Widget: ttk Widget. 

Combobox

* Options:: 
* Virtual events:: 
* ttk.Combobox: ttk Combobox. 

Notebook

* Options: Options<2>. 
* Tab Options:: 
* Tab Identifiers:: 
* Virtual Events:: 
* ttk.Notebook: ttk Notebook. 

Progressbar

* Options: Options<3>. 
* ttk.Progressbar: ttk Progressbar. 

Separator

* Options: Options<4>. 

Sizegrip

* Platform-specific notes:: 
* Bugs:: 

Treeview

* Options: Options<5>. 
* Item Options:: 
* Tag Options:: 
* Column Identifiers:: 
* Virtual Events: Virtual Events<2>. 
* ttk.Treeview: ttk Treeview. 

Ttk Styling

* Layouts:: 

tkinter.tix — Extension widgets for Tk

* Using Tix:: 
* Tix Widgets:: 
* Tix Commands:: 

Tix Widgets

* Basic Widgets:: 
* File Selectors:: 
* Hierarchical ListBox:: 
* Tabular ListBox:: 
* Manager Widgets:: 
* Image Types:: 
* Miscellaneous Widgets:: 
* Form Geometry Manager:: 

IDLE

* Menus:: 
* Editing and navigation:: 
* Startup and code execution:: 
* Help and preferences:: 

Menus

* File menu (Shell and Editor): File menu Shell and Editor. 
* Edit menu (Shell and Editor): Edit menu Shell and Editor. 
* Format menu (Editor window only): Format menu Editor window only. 
* Run menu (Editor window only): Run menu Editor window only. 
* Shell menu (Shell window only): Shell menu Shell window only. 
* Debug menu (Shell window only): Debug menu Shell window only. 
* Options menu (Shell and Editor): Options menu Shell and Editor. 
* Window menu (Shell and Editor): Window menu Shell and Editor. 
* Help menu (Shell and Editor): Help menu Shell and Editor. 
* Context Menus:: 

Editing and navigation

* Automatic indentation:: 
* Completions:: 
* Calltips:: 
* Python Shell window:: 
* Text colors:: 

Startup and code execution

* Command line usage:: 
* IDLE-console differences:: 
* Running without a subprocess:: 

Help and preferences

* Additional help sources:: 
* Setting preferences:: 
* Extensions:: 

Development Tools

* typing: typing --- Support for type hints. Support for type hints
* pydoc: pydoc --- Documentation generator and online help system. Documentation generator and online help system
* doctest: doctest --- Test interactive Python examples. Test interactive Python examples
* unittest: unittest --- Unit testing framework. Unit testing framework
* unittest.mock: unittest mock --- mock object library. mock object library
* unittest.mock: unittest mock --- getting started. getting started
* 2to3 - Automated Python 2 to 3 code translation:: 
* test: test --- Regression tests package for Python. Regression tests package for Python
* test.support: test support --- Utilities for the Python test suite. Utilities for the Python test suite

typing — Support for type hints

* Type aliases:: 
* Callable:: 
* Generics:: 
* User-defined generic types:: 
* The Any type:: 
* Classes, functions, and decorators: Classes functions and decorators. 

doctest — Test interactive Python examples

* Simple Usage; Checking Examples in Docstrings: Simple Usage Checking Examples in Docstrings. 
* Simple Usage; Checking Examples in a Text File: Simple Usage Checking Examples in a Text File. 
* How It Works:: 
* Basic API:: 
* Unittest API:: 
* Advanced API:: 
* Debugging:: 
* Soapbox:: 

How It Works

* Which Docstrings Are Examined?:: 
* How are Docstring Examples Recognized?:: 
* What's the Execution Context?:: 
* What About Exceptions?:: 
* Option Flags:: 
* Directives:: 
* Warnings: Warnings<2>. 

Advanced API

* DocTest Objects:: 
* Example Objects:: 
* DocTestFinder objects:: 
* DocTestParser objects:: 
* DocTestRunner objects:: 
* OutputChecker objects:: 

unittest — Unit testing framework

* Basic example:: 
* Command-Line Interface:: 
* Test Discovery:: 
* Organizing test code:: 
* Re-using old test code:: 
* Skipping tests and expected failures:: 
* Distinguishing test iterations using subtests:: 
* Classes and functions:: 
* Class and Module Fixtures:: 
* Signal Handling:: 

Command-Line Interface

* Command-line options:: 

Classes and functions

* Test cases:: 
* Grouping tests:: 
* Loading and running tests:: 

Test cases

* Deprecated aliases:: 

Loading and running tests

* load_tests Protocol:: 

Class and Module Fixtures

* setUpClass and tearDownClass:: 
* setUpModule and tearDownModule:: 

unittest.mock — mock object library

* Quick Guide:: 
* The Mock Class:: 
* The patchers:: 
* MagicMock and magic method support:: 
* Helpers:: 

The Mock Class

* Calling:: 
* Deleting Attributes:: 
* Mock names and the name attribute:: 
* Attaching Mocks as Attributes:: 

The patchers

* patch:: 
* patch.object: patch object. 
* patch.dict: patch dict. 
* patch.multiple: patch multiple. 
* patch methods; start and stop: patch methods start and stop. 
* patch builtins:: 
* TEST_PREFIX:: 
* Nesting Patch Decorators:: 
* Where to patch:: 
* Patching Descriptors and Proxy Objects:: 

MagicMock and magic method support

* Mocking Magic Methods:: 
* Magic Mock:: 

Helpers

* sentinel:: 
* DEFAULT:: 
* call:: 
* create_autospec:: 
* ANY:: 
* FILTER_DIR:: 
* mock_open:: 
* Autospeccing:: 

unittest.mock — getting started

* Using Mock:: 
* Patch Decorators:: 
* Further Examples:: 

Using Mock

* Mock Patching Methods:: 
* Mock for Method Calls on an Object:: 
* Mocking Classes:: 
* Naming your mocks:: 
* Tracking all Calls:: 
* Setting Return Values and Attributes:: 
* Raising exceptions with mocks:: 
* Side effect functions and iterables:: 
* Creating a Mock from an Existing Object:: 

Further Examples

* Mocking chained calls:: 
* Partial mocking:: 
* Mocking a Generator Method:: 
* Applying the same patch to every test method:: 
* Mocking Unbound Methods:: 
* Checking multiple calls with mock:: 
* Coping with mutable arguments:: 
* Nesting Patches:: 
* Mocking a dictionary with MagicMock:: 
* Mock subclasses and their attributes:: 
* Mocking imports with patch.dict: Mocking imports with patch dict. 
* Tracking order of calls and less verbose call assertions:: 
* More complex argument matching:: 

2to3 - Automated Python 2 to 3 code translation

* Using 2to3:: 
* Fixers:: 
* lib2to3 - 2to3's library:: 

test — Regression tests package for Python

* Writing Unit Tests for the test package:: 
* Running tests using the command-line interface:: 

Debugging and Profiling

* bdb: bdb --- Debugger framework. Debugger framework
* faulthandler: faulthandler --- Dump the Python traceback. Dump the Python traceback
* pdb: pdb --- The Python Debugger. The Python Debugger
* The Python Profilers:: 
* timeit: timeit --- Measure execution time of small code snippets. Measure execution time of small code snippets
* trace: trace --- Trace or track Python statement execution. Trace or track Python statement execution
* tracemalloc: tracemalloc --- Trace memory allocations. Trace memory allocations

faulthandler — Dump the Python traceback

* Dumping the traceback:: 
* Fault handler state:: 
* Dumping the tracebacks after a timeout:: 
* Dumping the traceback on a user signal:: 
* Issue with file descriptors:: 
* Example: Example<13>. 

pdb — The Python Debugger

* Debugger Commands:: 

The Python Profilers

* Introduction to the profilers:: 
* Instant User's Manual:: 
* profile and cProfile Module Reference:: 
* The Stats Class:: 
* What Is Deterministic Profiling?:: 
* Limitations:: 
* Calibration:: 
* Using a custom timer:: 

timeit — Measure execution time of small code snippets

* Basic Examples: Basic Examples<2>. 
* Python Interface:: 
* Command-Line Interface: Command-Line Interface<2>. 
* Examples: Examples<19>. 

trace — Trace or track Python statement execution

* Command-Line Usage:: 
* Programmatic Interface:: 

Command-Line Usage

* Main options:: 
* Modifiers:: 
* Filters:: 

tracemalloc — Trace memory allocations

* Examples: Examples<20>. 
* API:: 

Examples

* Display the top 10:: 
* Compute differences:: 
* Get the traceback of a memory block:: 
* Pretty top:: 

API

* Functions: Functions<7>. 
* DomainFilter:: 
* Filter:: 
* Frame:: 
* Snapshot:: 
* Statistic:: 
* StatisticDiff:: 
* Trace:: 
* Traceback:: 

Software Packaging and Distribution

* distutils: distutils --- Building and installing Python modules. Building and installing Python modules
* ensurepip: ensurepip --- Bootstrapping the pip installer. Bootstrapping the pip installer
* venv: venv --- Creation of virtual environments. Creation of virtual environments
* zipapp: zipapp --- Manage executable python zip archives. Manage executable python zip archives

ensurepip — Bootstrapping the pip installer

* Command line interface:: 
* Module API:: 

venv — Creation of virtual environments

* Creating virtual environments:: 
* API: API<2>. 
* An example of extending EnvBuilder:: 

zipapp — Manage executable python zip archives

* Basic Example:: 
* Command-Line Interface: Command-Line Interface<3>. 
* Python API:: 
* Examples: Examples<21>. 
* The Python Zip Application Archive Format:: 

Python Runtime Services

* sys: sys --- System-specific parameters and functions. System-specific parameters and functions
* sysconfig: sysconfig --- Provide access to Python's configuration information. Provide access to Python’s configuration information
* builtins: builtins --- Built-in objects. Built-in objects
* __main__: __main__ --- Top-level script environment. Top-level script environment
* warnings: warnings --- Warning control. Warning control
* contextlib: contextlib --- Utilities for with-statement contexts. Utilities for with-statement contexts
* abc: abc --- Abstract Base Classes. Abstract Base Classes
* atexit: atexit --- Exit handlers. Exit handlers
* traceback: traceback --- Print or retrieve a stack traceback. Print or retrieve a stack traceback
* __future__: __future__ --- Future statement definitions. Future statement definitions
* gc: gc --- Garbage Collector interface. Garbage Collector interface
* inspect: inspect --- Inspect live objects. Inspect live objects
* site: site --- Site-specific configuration hook. Site-specific configuration hook
* fpectl: fpectl --- Floating point exception control. Floating point exception control

sysconfig — Provide access to Python’s configuration information

* Configuration variables:: 
* Installation paths:: 
* Other functions: Other functions<3>. 
* Using sysconfig as a script:: 

warnings — Warning control

* Warning Categories:: 
* The Warnings Filter:: 
* Temporarily Suppressing Warnings:: 
* Testing Warnings:: 
* Updating Code For New Versions of Python:: 
* Available Functions:: 
* Available Context Managers:: 

The Warnings Filter

* Default Warning Filters:: 

contextlib — Utilities for with-statement contexts

* Utilities:: 
* Examples and Recipes: Examples and Recipes<2>. 
* Single use, reusable and reentrant context managers: Single use reusable and reentrant context managers. 

Examples and Recipes

* Supporting a variable number of context managers:: 
* Simplifying support for single optional context managers:: 
* Catching exceptions from __enter__ methods:: 
* Cleaning up in an __enter__ implementation:: 
* Replacing any use of try-finally and flag variables:: 
* Using a context manager as a function decorator:: 

Single use, reusable and reentrant context managers

* Reentrant context managers:: 
* Reusable context managers:: 

atexit — Exit handlers

* atexit Example:: 

traceback — Print or retrieve a stack traceback

* TracebackException Objects:: 
* StackSummary Objects:: 
* FrameSummary Objects:: 
* Traceback Examples:: 

inspect — Inspect live objects

* Types and members:: 
* Retrieving source code:: 
* Introspecting callables with the Signature object:: 
* Classes and functions: Classes and functions<2>. 
* The interpreter stack:: 
* Fetching attributes statically:: 
* Current State of Generators and Coroutines:: 
* Command Line Interface: Command Line Interface<3>. 

site — Site-specific configuration hook

* Readline configuration:: 
* Module contents: Module contents<3>. 

fpectl — Floating point exception control

* Example: Example<14>. 
* Limitations and other considerations:: 

Custom Python Interpreters

* code: code --- Interpreter base classes. Interpreter base classes
* codeop: codeop --- Compile Python code. Compile Python code

code — Interpreter base classes

* Interactive Interpreter Objects:: 
* Interactive Console Objects:: 

Importing Modules

* zipimport: zipimport --- Import modules from Zip archives. Import modules from Zip archives
* pkgutil: pkgutil --- Package extension utility. Package extension utility
* modulefinder: modulefinder --- Find modules used by a script. Find modules used by a script
* runpy: runpy --- Locating and executing Python modules. Locating and executing Python modules
* importlib: importlib -- The implementation of import. The implementation of import

zipimport — Import modules from Zip archives

* zipimporter Objects:: 
* Examples: Examples<22>. 

modulefinder — Find modules used by a script

* Example usage of ModuleFinder:: 

importlib – The implementation of import

* Introduction: Introduction<12>. 
* Functions: Functions<8>. 
* importlib.abc: importlib abc -- Abstract base classes related to import. Abstract base classes related to import
* importlib.machinery: importlib machinery -- Importers and path hooks. Importers and path hooks
* importlib.util: importlib util -- Utility code for importers. Utility code for importers
* Examples: Examples<23>. 

Python Language Services

* parser: parser --- Access Python parse trees. Access Python parse trees
* ast: ast --- Abstract Syntax Trees. Abstract Syntax Trees
* symtable: symtable --- Access to the compiler's symbol tables. Access to the compiler’s symbol tables
* symbol: symbol --- Constants used with Python parse trees. Constants used with Python parse trees
* token: token --- Constants used with Python parse trees. Constants used with Python parse trees
* keyword: keyword --- Testing for Python keywords. Testing for Python keywords
* tokenize: tokenize --- Tokenizer for Python source. Tokenizer for Python source
* tabnanny: tabnanny --- Detection of ambiguous indentation. Detection of ambiguous indentation
* pyclbr: pyclbr --- Python class browser support. Python class browser support
* py_compile: py_compile --- Compile Python source files. Compile Python source files
* compileall: compileall --- Byte-compile Python libraries. Byte-compile Python libraries
* dis: dis --- Disassembler for Python bytecode. Disassembler for Python bytecode
* pickletools: pickletools --- Tools for pickle developers. Tools for pickle developers

parser — Access Python parse trees

* Creating ST Objects:: 
* Converting ST Objects:: 
* Queries on ST Objects:: 
* Exceptions and Error Handling:: 
* ST Objects:: 
* Example; Emulation of compile(): Example Emulation of compile. 

ast — Abstract Syntax Trees

* Node classes:: 
* Abstract Grammar:: 
* ast Helpers:: 

symtable — Access to the compiler’s symbol tables

* Generating Symbol Tables:: 
* Examining Symbol Tables:: 

tokenize — Tokenizer for Python source

* Tokenizing Input:: 
* Command-Line Usage: Command-Line Usage<2>. 
* Examples: Examples<24>. 

pyclbr — Python class browser support

* Class Objects: Class Objects<2>. 
* Function Objects:: 

compileall — Byte-compile Python libraries

* Command-line use:: 
* Public functions:: 

dis — Disassembler for Python bytecode

* Bytecode analysis:: 
* Analysis functions:: 
* Python Bytecode Instructions:: 
* Opcode collections:: 

pickletools — Tools for pickle developers

* Command line usage: Command line usage<2>. 
* Programmatic Interface: Programmatic Interface<2>. 

Command line usage

* Command line options: Command line options<3>. 

Miscellaneous Services

* formatter: formatter --- Generic output formatting. Generic output formatting

formatter — Generic output formatting

* The Formatter Interface:: 
* Formatter Implementations:: 
* The Writer Interface:: 
* Writer Implementations:: 

MS Windows Specific Services

* msilib: msilib --- Read and write Microsoft Installer files. Read and write Microsoft Installer files
* msvcrt: msvcrt -- Useful routines from the MS VC++ runtime. Useful routines from the MS VC++ runtime
* winreg: winreg -- Windows registry access. Windows registry access
* winsound: winsound --- Sound-playing interface for Windows. Sound-playing interface for Windows

msilib — Read and write Microsoft Installer files

* Database Objects:: 
* View Objects:: 
* Summary Information Objects:: 
* Record Objects:: 
* Errors:: 
* CAB Objects:: 
* Directory Objects:: 
* Features: Features<3>. 
* GUI classes:: 
* Precomputed tables:: 

msvcrt – Useful routines from the MS VC++ runtime

* File Operations:: 
* Console I/O:: 
* Other Functions:: 

winreg – Windows registry access

* Functions: Functions<9>. 
* Constants: Constants<9>. 
* Registry Handle Objects:: 

Constants

* HKEY_* Constants:: 
* Access Rights:: 
* Value Types:: 

Access Rights

* 64-bit Specific:: 

Unix Specific Services

* posix: posix --- The most common POSIX system calls. The most common POSIX system calls
* pwd: pwd --- The password database. The password database
* spwd: spwd --- The shadow password database. The shadow password database
* grp: grp --- The group database. The group database
* crypt: crypt --- Function to check Unix passwords. Function to check Unix passwords
* termios: termios --- POSIX style tty control. POSIX style tty control
* tty: tty --- Terminal control functions. Terminal control functions
* pty: pty --- Pseudo-terminal utilities. Pseudo-terminal utilities
* fcntl: fcntl --- The fcntl and ioctl system calls. The fcntl and ioctl system calls
* pipes: pipes --- Interface to shell pipelines. Interface to shell pipelines
* resource: resource --- Resource usage information. Resource usage information
* nis: nis --- Interface to Sun's NIS Yellow Pages. Interface to Sun’s NIS (Yellow Pages)
* syslog: syslog --- Unix syslog library routines. Unix syslog library routines

posix — The most common POSIX system calls

* Large File Support:: 
* Notable Module Contents:: 

crypt — Function to check Unix passwords

* Hashing Methods:: 
* Module Attributes:: 
* Module Functions: Module Functions<2>. 
* Examples: Examples<25>. 

termios — POSIX style tty control

* Example: Example<15>. 

pty — Pseudo-terminal utilities

* Example: Example<16>. 

pipes — Interface to shell pipelines

* Template Objects:: 

resource — Resource usage information

* Resource Limits:: 
* Resource Usage:: 

syslog — Unix syslog library routines

* Examples: Examples<26>. 

Examples

* Simple example:: 

Superseded Modules

* optparse: optparse --- Parser for command line options. Parser for command line options
* imp: imp --- Access the import internals. Access the import internals

optparse — Parser for command line options

* Background:: 
* Tutorial: Tutorial<2>. 
* Reference Guide:: 
* Option Callbacks:: 
* Extending optparse:: 

Background

* Terminology:: 
* What are options for?:: 
* What are positional arguments for?:: 

Tutorial

* Understanding option actions:: 
* The store action:: 
* Handling boolean (flag) options: Handling boolean flag options. 
* Other actions:: 
* Default values:: 
* Generating help:: 
* Printing a version string:: 
* How optparse handles errors:: 
* Putting it all together:: 

Generating help

* Grouping Options:: 

Reference Guide

* Creating the parser:: 
* Populating the parser:: 
* Defining options:: 
* Option attributes:: 
* Standard option actions:: 
* Standard option types:: 
* Parsing arguments: Parsing arguments<2>. 
* Querying and manipulating your option parser:: 
* Conflicts between options:: 
* Cleanup: Cleanup<2>. 
* Other methods:: 

Option Callbacks

* Defining a callback option:: 
* How callbacks are called:: 
* Raising errors in a callback:: 
* Callback example 1; trivial callback: Callback example 1 trivial callback. 
* Callback example 2; check option order: Callback example 2 check option order. 
* Callback example 3; check option order (generalized): Callback example 3 check option order generalized. 
* Callback example 4; check arbitrary condition: Callback example 4 check arbitrary condition. 
* Callback example 5; fixed arguments: Callback example 5 fixed arguments. 
* Callback example 6; variable arguments: Callback example 6 variable arguments. 

Extending optparse

* Adding new types:: 
* Adding new actions:: 

imp — Access the import internals

* Examples: Examples<27>. 

Undocumented Modules

* Platform specific modules:: 

Extending and Embedding the Python Interpreter

* Recommended third party tools:: 
* Creating extensions without third party tools:: 
* Embedding the CPython runtime in a larger application:: 

Creating extensions without third party tools

* Extending Python with C or C++:: 
* Defining New Types:: 
* Building C and C++ Extensions:: 
* Building C and C++ Extensions on Windows:: 

Extending Python with C or C++

* A Simple Example:: 
* Intermezzo; Errors and Exceptions: Intermezzo Errors and Exceptions. 
* Back to the Example:: 
* The Module's Method Table and Initialization Function:: 
* Compilation and Linkage:: 
* Calling Python Functions from C:: 
* Extracting Parameters in Extension Functions:: 
* Keyword Parameters for Extension Functions:: 
* Building Arbitrary Values:: 
* Reference Counts:: 
* Writing Extensions in C++:: 
* Providing a C API for an Extension Module:: 

Reference Counts

* Reference Counting in Python:: 
* Ownership Rules:: 
* Thin Ice:: 
* NULL Pointers:: 

Defining New Types

* The Basics:: 
* Type Methods:: 

The Basics

* Adding data and methods to the Basic example:: 
* Providing finer control over data attributes:: 
* Supporting cyclic garbage collection:: 
* Subclassing other types:: 

Type Methods

* Finalization and De-allocation:: 
* Object Presentation:: 
* Attribute Management:: 
* Object Comparison:: 
* Abstract Protocol Support:: 
* Weak Reference Support:: 
* More Suggestions:: 

Attribute Management

* Generic Attribute Management:: 
* Type-specific Attribute Management:: 

Building C and C++ Extensions

* Building C and C++ Extensions with distutils:: 
* Distributing your extension modules:: 

Building C and C++ Extensions on Windows

* A Cookbook Approach:: 
* Differences Between Unix and Windows:: 
* Using DLLs in Practice:: 

Embedding the CPython runtime in a larger application

* Embedding Python in Another Application:: 

Embedding Python in Another Application

* Very High Level Embedding:: 
* Beyond Very High Level Embedding; An overview: Beyond Very High Level Embedding An overview. 
* Pure Embedding:: 
* Extending Embedded Python:: 
* Embedding Python in C++:: 
* Compiling and Linking under Unix-like systems:: 

Python/C API Reference Manual

* Introduction: Introduction<13>. 
* Stable Application Binary Interface:: 
* The Very High Level Layer:: 
* Reference Counting:: 
* Exception Handling:: 
* Utilities: Utilities<2>. 
* Abstract Objects Layer:: 
* Concrete Objects Layer:: 
* Initialization, Finalization, and Threads: Initialization Finalization and Threads. 
* Memory Management:: 
* Object Implementation Support:: 
* API and ABI Versioning:: 

Introduction

* Include Files:: 
* Objects, Types and Reference Counts: Objects Types and Reference Counts. 
* Exceptions: Exceptions<13>. 
* Embedding Python: Embedding Python<2>. 
* Debugging Builds:: 

Objects, Types and Reference Counts

* Reference Counts: Reference Counts<2>. 
* Types:: 

Reference Counts

* Reference Count Details:: 

Exception Handling

* Printing and clearing:: 
* Raising exceptions:: 
* Issuing warnings:: 
* Querying the error indicator:: 
* Signal Handling: Signal Handling<2>. 
* Exception Classes:: 
* Exception Objects:: 
* Unicode Exception Objects:: 
* Recursion Control:: 
* Standard Exceptions:: 

Utilities

* Operating System Utilities:: 
* System Functions:: 
* Process Control:: 
* Importing Modules: Importing Modules<2>. 
* Data marshalling support:: 
* Parsing arguments and building values:: 
* String conversion and formatting:: 
* Reflection:: 
* Codec registry and support functions:: 

Parsing arguments and building values

* Parsing arguments: Parsing arguments<3>. 
* Building values:: 

Parsing arguments

* Strings and buffers:: 
* Numbers: Numbers<2>. 
* Other objects:: 
* API Functions:: 

Codec registry and support functions

* Codec lookup API:: 
* Registry API for Unicode encoding error handlers:: 

Abstract Objects Layer

* Object Protocol:: 
* Number Protocol:: 
* Sequence Protocol:: 
* Mapping Protocol:: 
* Iterator Protocol:: 
* Buffer Protocol:: 
* Old Buffer Protocol:: 

Buffer Protocol

* Buffer structure:: 
* Buffer request types:: 
* Complex arrays:: 
* Buffer-related functions:: 

Buffer request types

* request-independent fields:: 
* readonly, format: readonly format. 
* shape, strides, suboffsets: shape strides suboffsets. 
* contiguity requests:: 
* compound requests:: 

Complex arrays

* NumPy-style; shape and strides: NumPy-style shape and strides. 
* PIL-style; shape, strides and suboffsets: PIL-style shape strides and suboffsets. 

Concrete Objects Layer

* Fundamental Objects:: 
* Numeric Objects:: 
* Sequence Objects:: 
* Container Objects:: 
* Function Objects: Function Objects<2>. 
* Other Objects:: 

Fundamental Objects

* Type Objects: Type Objects<2>. 
* The None Object:: 

Numeric Objects

* Integer Objects:: 
* Boolean Objects:: 
* Floating Point Objects:: 
* Complex Number Objects:: 

Complex Number Objects

* Complex Numbers as C Structures:: 
* Complex Numbers as Python Objects:: 

Sequence Objects

* Bytes Objects:: 
* Byte Array Objects:: 
* Unicode Objects and Codecs:: 
* Tuple Objects:: 
* Struct Sequence Objects:: 
* List Objects:: 

Byte Array Objects

* Type check macros:: 
* Direct API functions:: 
* Macros:: 

Unicode Objects and Codecs

* Unicode Objects:: 
* Built-in Codecs:: 
* Methods and Slot Functions:: 

Unicode Objects

* Unicode Type:: 
* Unicode Character Properties:: 
* Creating and accessing Unicode strings:: 
* Deprecated Py_UNICODE APIs:: 
* Locale Encoding:: 
* File System Encoding:: 
* wchar_t Support:: 
* UCS4 Support:: 

Built-in Codecs

* Generic Codecs:: 
* UTF-8 Codecs:: 
* UTF-32 Codecs:: 
* UTF-16 Codecs:: 
* UTF-7 Codecs:: 
* Unicode-Escape Codecs:: 
* Raw-Unicode-Escape Codecs:: 
* Latin-1 Codecs:: 
* ASCII Codecs:: 
* Character Map Codecs:: 
* MBCS codecs for Windows:: 
* Methods & Slots:: 

Container Objects

* Dictionary Objects:: 
* Set Objects:: 

Function Objects

* Function Objects: Function Objects<3>. 
* Instance Method Objects:: 
* Method Objects: Method Objects<2>. 
* Cell Objects:: 
* Code Objects: Code Objects<2>. 

Other Objects

* File Objects:: 
* Module Objects:: 
* Iterator Objects:: 
* Descriptor Objects:: 
* Slice Objects:: 
* MemoryView objects:: 
* Weak Reference Objects: Weak Reference Objects<2>. 
* Capsules: Capsules<2>. 
* Generator Objects:: 
* Coroutine Objects: Coroutine Objects<2>. 
* DateTime Objects: DateTime Objects<2>. 

Module Objects

* Initializing C modules:: 
* Module lookup:: 

Initializing C modules

* Single-phase initialization:: 
* Multi-phase initialization:: 
* Low-level module creation functions:: 
* Support functions:: 

Initialization, Finalization, and Threads

* Initializing and finalizing the interpreter:: 
* Process-wide parameters:: 
* Thread State and the Global Interpreter Lock:: 
* Sub-interpreter support:: 
* Asynchronous Notifications:: 
* Profiling and Tracing:: 
* Advanced Debugger Support:: 

Thread State and the Global Interpreter Lock

* Releasing the GIL from extension code:: 
* Non-Python created threads:: 
* High-level API:: 
* Low-level API:: 

Sub-interpreter support

* Bugs and caveats:: 

Memory Management

* Overview: Overview<2>. 
* Raw Memory Interface:: 
* Memory Interface:: 
* Customize Memory Allocators:: 
* The pymalloc allocator:: 
* Examples: Examples<28>. 

The pymalloc allocator

* Customize pymalloc Arena Allocator:: 

Object Implementation Support

* Allocating Objects on the Heap:: 
* Common Object Structures:: 
* Type Objects: Type Objects<3>. 
* Number Object Structures:: 
* Mapping Object Structures:: 
* Sequence Object Structures:: 
* Buffer Object Structures:: 
* Async Object Structures:: 
* Supporting Cyclic Garbage Collection:: 

Distributing Python Modules

* Key terms:: 
* Open source licensing and collaboration:: 
* Installing the tools:: 
* Reading the guide:: 
* How do I...?: How do I ?. 

How do I...?

* ... choose a name for my project?: choose a name for my project?. 
* ... create and distribute binary extensions?: create and distribute binary extensions?. 

Installing Python Modules

* Key terms: Key terms<2>. 
* Basic usage:: 
* How do I ...?: How do I ?<2>. 
* Common installation issues:: 

How do I ...?

* ... install pip in versions of Python prior to Python 3.4?: install pip in versions of Python prior to Python 3 4?. 
* ... install packages just for the current user?: install packages just for the current user?. 
* ... install scientific Python packages?: install scientific Python packages?. 
* ... work with multiple versions of Python installed in parallel?: work with multiple versions of Python installed in parallel?. 

Common installation issues

* Installing into the system Python on Linux:: 
* Installing binary extensions:: 

Python HOWTOs

* Porting Python 2 Code to Python 3:: 
* Porting Extension Modules to Python 3:: 
* Curses Programming with Python:: 
* Descriptor HowTo Guide:: 
* Functional Programming HOWTO:: 
* Logging HOWTO:: 
* Logging Cookbook:: 
* Regular Expression HOWTO:: 
* Socket Programming HOWTO:: 
* Sorting HOW TO:: 
* Unicode HOWTO:: 
* HOWTO Fetch Internet Resources Using The urllib Package:: 
* Argparse Tutorial:: 
* An introduction to the ipaddress module:: 
* Argument Clinic How-To:: 

Porting Python 2 Code to Python 3

* The Short Explanation:: 
* Details:: 
* Dropping Python 2 support completely:: 

Details

* Drop support for Python 2.6 and older: Drop support for Python 2 6 and older. 
* Make sure you specify the proper version support in your setup.py file: Make sure you specify the proper version support in your setup py file. 
* Have good test coverage:: 
* Learn the differences between Python 2 & 3:: 
* Update your code:: 
* Prevent compatibility regressions:: 
* Check which dependencies block your transition:: 
* Update your setup.py file to denote Python 3 compatibility: Update your setup py file to denote Python 3 compatibility. 
* Use continuous integration to stay compatible:: 

Update your code

* Division:: 
* Text versus binary data:: 
* Use feature detection instead of version detection:: 

Porting Extension Modules to Python 3

* Conditional compilation:: 
* Changes to Object APIs:: 
* Module initialization and state:: 
* CObject replaced with Capsule:: 
* Other options:: 

Changes to Object APIs

* str/unicode Unification:: 
* long/int Unification:: 

Curses Programming with Python

* What is curses?:: 
* Starting and ending a curses application:: 
* Windows and Pads:: 
* Displaying Text:: 
* User Input:: 
* For More Information:: 

What is curses?

* The Python curses module:: 

Displaying Text

* Attributes and Color:: 

Descriptor HowTo Guide

* Abstract:: 
* Definition and Introduction:: 
* Descriptor Protocol:: 
* Invoking Descriptors: Invoking Descriptors<2>. 
* Descriptor Example:: 
* Properties:: 
* Functions and Methods:: 
* Static Methods and Class Methods:: 

Functional Programming HOWTO

* Introduction: Introduction<14>. 
* Iterators: Iterators<2>. 
* Generator expressions and list comprehensions:: 
* Generators: Generators<2>. 
* Built-in functions:: 
* The itertools module:: 
* The functools module:: 
* Small functions and the lambda expression:: 
* Revision History and Acknowledgements:: 
* References: References<2>. 

Introduction

* Formal provability:: 
* Modularity:: 
* Ease of debugging and testing:: 
* Composability:: 

Iterators

* Data Types That Support Iterators:: 

Generators

* Passing values into a generator:: 

The itertools module

* Creating new iterators:: 
* Calling functions on elements:: 
* Selecting elements:: 
* Combinatoric functions:: 
* Grouping elements:: 

The functools module

* The operator module:: 

References

* General:: 
* Python-specific:: 
* Python documentation:: 

Logging HOWTO

* Basic Logging Tutorial:: 
* Advanced Logging Tutorial:: 
* Logging Levels: Logging Levels<2>. 
* Useful Handlers:: 
* Exceptions raised during logging:: 
* Using arbitrary objects as messages:: 
* Optimization:: 

Basic Logging Tutorial

* When to use logging:: 
* A simple example:: 
* Logging to a file:: 
* Logging from multiple modules:: 
* Logging variable data:: 
* Changing the format of displayed messages:: 
* Displaying the date/time in messages:: 
* Next Steps:: 

Advanced Logging Tutorial

* Logging Flow:: 
* Loggers:: 
* Handlers:: 
* Formatters:: 
* Configuring Logging:: 
* What happens if no configuration is provided:: 
* Configuring Logging for a Library:: 

Logging Levels

* Custom Levels:: 

Logging Cookbook

* Using logging in multiple modules:: 
* Logging from multiple threads:: 
* Multiple handlers and formatters:: 
* Logging to multiple destinations:: 
* Configuration server example:: 
* Dealing with handlers that block:: 
* Sending and receiving logging events across a network:: 
* Adding contextual information to your logging output:: 
* Logging to a single file from multiple processes:: 
* Using file rotation:: 
* Use of alternative formatting styles:: 
* Customizing LogRecord:: 
* Subclassing QueueHandler - a ZeroMQ example:: 
* Subclassing QueueListener - a ZeroMQ example:: 
* An example dictionary-based configuration:: 
* Using a rotator and namer to customize log rotation processing:: 
* A more elaborate multiprocessing example:: 
* Inserting a BOM into messages sent to a SysLogHandler:: 
* Implementing structured logging:: 
* Customizing handlers with dictConfig(): Customizing handlers with dictConfig. 
* Using particular formatting styles throughout your application:: 
* Configuring filters with dictConfig(): Configuring filters with dictConfig. 
* Customized exception formatting:: 
* Speaking logging messages:: 
* Buffering logging messages and outputting them conditionally:: 
* Formatting times using UTC (GMT) via configuration: Formatting times using UTC GMT via configuration. 
* Using a context manager for selective logging:: 

Adding contextual information to your logging output

* Using LoggerAdapters to impart contextual information:: 
* Using Filters to impart contextual information:: 

Using LoggerAdapters to impart contextual information

* Using objects other than dicts to pass contextual information:: 

Using particular formatting styles throughout your application

* Using LogRecord factories:: 
* Using custom message objects:: 

Regular Expression HOWTO

* Introduction: Introduction<15>. 
* Simple Patterns:: 
* Using Regular Expressions:: 
* More Pattern Power:: 
* Modifying Strings:: 
* Common Problems:: 
* Feedback:: 

Simple Patterns

* Matching Characters:: 
* Repeating Things:: 

Using Regular Expressions

* Compiling Regular Expressions:: 
* The Backslash Plague:: 
* Performing Matches:: 
* Module-Level Functions: Module-Level Functions<2>. 
* Compilation Flags:: 

More Pattern Power

* More Metacharacters:: 
* Grouping:: 
* Non-capturing and Named Groups:: 
* Lookahead Assertions:: 

Modifying Strings

* Splitting Strings:: 
* Search and Replace:: 

Common Problems

* Use String Methods:: 
* match() versus search(): match versus search. 
* Greedy versus Non-Greedy:: 
* Using re.VERBOSE: Using re VERBOSE. 

Socket Programming HOWTO

* Sockets:: 
* Creating a Socket:: 
* Using a Socket:: 
* Disconnecting:: 
* Non-blocking Sockets:: 

Sockets

* History:: 

Creating a Socket

* IPC:: 

Using a Socket

* Binary Data:: 

Disconnecting

* When Sockets Die:: 

Sorting HOW TO

* Sorting Basics:: 
* Key Functions:: 
* Operator Module Functions:: 
* Ascending and Descending:: 
* Sort Stability and Complex Sorts:: 
* The Old Way Using Decorate-Sort-Undecorate:: 
* The Old Way Using the cmp Parameter:: 
* Odd and Ends:: 

Unicode HOWTO

* Introduction to Unicode:: 
* Python's Unicode Support:: 
* Reading and Writing Unicode Data:: 
* Acknowledgements: Acknowledgements<10>. 

Introduction to Unicode

* History of Character Codes:: 
* Definitions:: 
* Encodings:: 
* References: References<3>. 

Python’s Unicode Support

* The String Type:: 
* Converting to Bytes:: 
* Unicode Literals in Python Source Code:: 
* Unicode Properties:: 
* Unicode Regular Expressions:: 
* References: References<4>. 

Reading and Writing Unicode Data

* Unicode filenames:: 
* Tips for Writing Unicode-aware Programs:: 
* References: References<5>. 

Tips for Writing Unicode-aware Programs

* Converting Between File Encodings:: 
* Files in an Unknown Encoding:: 

HOWTO Fetch Internet Resources Using The urllib Package

* Introduction: Introduction<16>. 
* Fetching URLs:: 
* Handling Exceptions: Handling Exceptions<2>. 
* info and geturl:: 
* Openers and Handlers:: 
* Basic Authentication:: 
* Proxies:: 
* Sockets and Layers:: 
* Footnotes:: 

Fetching URLs

* Data:: 
* Headers:: 

Handling Exceptions

* URLError:: 
* HTTPError:: 
* Wrapping it Up:: 

HTTPError

* Error Codes:: 

Wrapping it Up

* Number 1:: 
* Number 2:: 

Argparse Tutorial

* Concepts:: 
* The basics:: 
* Introducing Positional arguments:: 
* Introducing Optional arguments:: 
* Combining Positional and Optional arguments:: 
* Getting a little more advanced:: 
* Conclusion:: 

Introducing Optional arguments

* Short options:: 

Getting a little more advanced

* Conflicting options:: 

An introduction to the ipaddress module

* Creating Address/Network/Interface objects:: 
* Inspecting Address/Network/Interface Objects:: 
* Networks as lists of Addresses:: 
* Comparisons: Comparisons<4>. 
* Using IP Addresses with other modules:: 
* Getting more detail when instance creation fails:: 

Creating Address/Network/Interface objects

* A Note on IP Versions:: 
* IP Host Addresses:: 
* Defining Networks:: 
* Host Interfaces:: 

Argument Clinic How-To

* The Goals Of Argument Clinic:: 
* Basic Concepts And Usage:: 
* Converting Your First Function:: 
* Advanced Topics:: 

Advanced Topics

* Symbolic default values:: 
* Renaming the C functions and variables generated by Argument Clinic:: 
* Converting functions using PyArg_UnpackTuple:: 
* Optional Groups:: 
* Using real Argument Clinic converters, instead of "legacy converters": Using real Argument Clinic converters instead of "legacy converters". 
* Py_buffer:: 
* Advanced converters:: 
* Parameter default values:: 
* The NULL default value:: 
* Expressions specified as default values:: 
* Using a return converter:: 
* Cloning existing functions:: 
* Calling Python code:: 
* Using a "self converter":: 
* Writing a custom converter:: 
* Writing a custom return converter:: 
* METH_O and METH_NOARGS:: 
* tp_new and tp_init functions:: 
* Changing and redirecting Clinic's output:: 
* The #ifdef trick:: 
* Using Argument Clinic in Python files:: 

Python Frequently Asked Questions

* General Python FAQ:: 
* Programming FAQ:: 
* Design and History FAQ:: 
* Library and Extension FAQ:: 
* Extending/Embedding FAQ:: 
* Python on Windows FAQ:: 
* Graphic User Interface FAQ:: 
* "Why is Python Installed on my Computer?" FAQ:: 

General Python FAQ

* General Information:: 
* Python in the real world:: 

General Information

* What is Python?:: 
* What is the Python Software Foundation?:: 
* Are there copyright restrictions on the use of Python?:: 
* Why was Python created in the first place?:: 
* What is Python good for?:: 
* How does the Python version numbering scheme work?:: 
* How do I obtain a copy of the Python source?:: 
* How do I get documentation on Python?:: 
* I’ve never programmed before. Is there a Python tutorial?: I've never programmed before Is there a Python tutorial?. 
* Is there a newsgroup or mailing list devoted to Python?:: 
* How do I get a beta test version of Python?:: 
* How do I submit bug reports and patches for Python?:: 
* Are there any published articles about Python that I can reference?:: 
* Are there any books on Python?:: 
* Where in the world is www.python.org located?: Where in the world is www python org located?. 
* Why is it called Python?:: 
* Do I have to like "Monty Python's Flying Circus"?:: 

Python in the real world

* How stable is Python?:: 
* How many people are using Python?:: 
* Have any significant projects been done in Python?:: 
* What new developments are expected for Python in the future?:: 
* Is it reasonable to propose incompatible changes to Python?:: 
* Is Python a good language for beginning programmers?:: 

Programming FAQ

* General Questions:: 
* Core Language:: 
* Numbers and strings:: 
* Performance: Performance<4>. 
* Sequences (Tuples/Lists): Sequences Tuples/Lists. 
* Dictionaries: Dictionaries<2>. 
* Objects:: 
* Modules: Modules<3>. 

General Questions

* Is there a source code level debugger with breakpoints, single-stepping, etc.?: Is there a source code level debugger with breakpoints single-stepping etc ?. 
* Is there a tool to help find bugs or perform static analysis?:: 
* How can I create a stand-alone binary from a Python script?:: 
* Are there coding standards or a style guide for Python programs?:: 

Core Language

* Why am I getting an UnboundLocalError when the variable has a value?:: 
* What are the rules for local and global variables in Python?:: 
* Why do lambdas defined in a loop with different values all return the same result?:: 
* How do I share global variables across modules?:: 
* What are the "best practices" for using import in a module?:: 
* Why are default values shared between objects?:: 
* How can I pass optional or keyword parameters from one function to another?:: 
* What is the difference between arguments and parameters?:: 
* Why did changing list 'y' also change list 'x'?:: 
* How do I write a function with output parameters (call by reference)?: How do I write a function with output parameters call by reference ?. 
* How do you make a higher order function in Python?:: 
* How do I copy an object in Python?:: 
* How can I find the methods or attributes of an object?:: 
* How can my code discover the name of an object?:: 
* What's up with the comma operator's precedence?:: 
* Is there an equivalent of C’s "?;" ternary operator?: Is there an equivalent of C's "? " ternary operator?. 
* Is it possible to write obfuscated one-liners in Python?:: 

Numbers and strings

* How do I specify hexadecimal and octal integers?:: 
* Why does -22 // 10 return -3?:: 
* How do I convert a string to a number?:: 
* How do I convert a number to a string?:: 
* How do I modify a string in place?:: 
* How do I use strings to call functions/methods?:: 
* Is there an equivalent to Perl’s chomp() for removing trailing newlines from strings?: Is there an equivalent to Perl's chomp for removing trailing newlines from strings?. 
* Is there a scanf() or sscanf() equivalent?: Is there a scanf or sscanf equivalent?. 
* What does 'UnicodeDecodeError' or 'UnicodeEncodeError' error mean?:: 

Performance

* My program is too slow. How do I speed it up?: My program is too slow How do I speed it up?. 
* What is the most efficient way to concatenate many strings together?:: 

Sequences (Tuples/Lists)

* How do I convert between tuples and lists?:: 
* What's a negative index?:: 
* How do I iterate over a sequence in reverse order?:: 
* How do you remove duplicates from a list?:: 
* How do you make an array in Python?:: 
* How do I create a multidimensional list?:: 
* How do I apply a method to a sequence of objects?:: 
* Why does a_tuple[i] += ['item'] raise an exception when the addition works?:: 

Dictionaries

* How can I get a dictionary to store and display its keys in a consistent order?:: 
* I want to do a complicated sort; can you do a Schwartzian Transform in Python?: I want to do a complicated sort can you do a Schwartzian Transform in Python?. 
* How can I sort one list by values from another list?:: 

Objects

* What is a class?:: 
* What is a method?:: 
* What is self?:: 
* How do I check if an object is an instance of a given class or of a subclass of it?:: 
* What is delegation?:: 
* How do I call a method defined in a base class from a derived class that overrides it?:: 
* How can I organize my code to make it easier to change the base class?:: 
* How do I create static class data and static class methods?:: 
* How can I overload constructors (or methods) in Python?: How can I overload constructors or methods in Python?. 
* I try to use __spam and I get an error about _SomeClassName__spam.: I try to use __spam and I get an error about _SomeClassName__spam. 
* My class defines __del__ but it is not called when I delete the object.: My class defines __del__ but it is not called when I delete the object. 
* How do I get a list of all instances of a given class?:: 
* Why does the result of id() appear to be not unique?: Why does the result of id appear to be not unique?. 

Modules

* How do I create a .pyc file?: How do I create a pyc file?. 
* How do I find the current module name?:: 
* How can I have modules that mutually import each other?:: 
* __import__(’x.y.z’) returns <module ’x’>; how do I get z?: __import__ 'x y z' returns <module 'x'>; how do I get z?. 
* When I edit an imported module and reimport it, the changes don’t show up. Why does this happen?: When I edit an imported module and reimport it the changes don't show up Why does this happen?. 

Design and History FAQ

* Why does Python use indentation for grouping of statements?:: 
* Why am I getting strange results with simple arithmetic operations?:: 
* Why are floating-point calculations so inaccurate?:: 
* Why are Python strings immutable?:: 
* Why must 'self' be used explicitly in method definitions and calls?:: 
* Why can't I use an assignment in an expression?:: 
* Why does Python use methods for some functionality (e.g. list.index()) but functions for other (e.g. len(list))?: Why does Python use methods for some functionality e g list index but functions for other e g len list ?. 
* Why is join() a string method instead of a list or tuple method?: Why is join a string method instead of a list or tuple method?. 
* How fast are exceptions?:: 
* Why isn't there a switch or case statement in Python?:: 
* Can't you emulate threads in the interpreter instead of relying on an OS-specific thread implementation?:: 
* Why can't lambda expressions contain statements?:: 
* Can Python be compiled to machine code, C or some other language?: Can Python be compiled to machine code C or some other language?. 
* How does Python manage memory?:: 
* Why doesn't CPython use a more traditional garbage collection scheme?:: 
* Why isn't all memory freed when CPython exits?:: 
* Why are there separate tuple and list data types?:: 
* How are lists implemented?:: 
* How are dictionaries implemented?:: 
* Why must dictionary keys be immutable?:: 
* Why doesn’t list.sort() return the sorted list?: Why doesn't list sort return the sorted list?. 
* How do you specify and enforce an interface spec in Python?:: 
* Why is there no goto?:: 
* Why can’t raw strings (r-strings) end with a backslash?: Why can't raw strings r-strings end with a backslash?. 
* Why doesn't Python have a "with" statement for attribute assignments?:: 
* Why are colons required for the if/while/def/class statements?:: 
* Why does Python allow commas at the end of lists and tuples?:: 

Library and Extension FAQ

* General Library Questions:: 
* Common tasks:: 
* Threads:: 
* Input and Output: Input and Output<2>. 
* Network/Internet Programming:: 
* Databases:: 
* Mathematics and Numerics:: 

General Library Questions

* How do I find a module or application to perform task X?:: 
* Where is the math.py (socket.py, regex.py, etc.) source file?: Where is the math py socket py regex py etc source file?. 
* How do I make a Python script executable on Unix?:: 
* Is there a curses/termcap package for Python?:: 
* Is there an equivalent to C’s onexit() in Python?: Is there an equivalent to C's onexit in Python?. 
* Why don't my signal handlers work?:: 

Common tasks

* How do I test a Python program or component?:: 
* How do I create documentation from doc strings?:: 
* How do I get a single keypress at a time?:: 

Threads

* How do I program using threads?:: 
* None of my threads seem to run; why?: None of my threads seem to run why?. 
* How do I parcel out work among a bunch of worker threads?:: 
* What kinds of global value mutation are thread-safe?:: 
* Can't we get rid of the Global Interpreter Lock?:: 

Input and Output

* How do I delete a file? (And other file questions...): How do I delete a file? And other file questions. 
* How do I copy a file?:: 
* How do I read (or write) binary data?: How do I read or write binary data?. 
* I can’t seem to use os.read() on a pipe created with os.popen(); why?: I can't seem to use os read on a pipe created with os popen ; why?. 
* How do I access the serial (RS232) port?: How do I access the serial RS232 port?. 
* Why doesn’t closing sys.stdout (stdin, stderr) really close it?: Why doesn't closing sys stdout stdin stderr really close it?. 

Network/Internet Programming

* What WWW tools are there for Python?:: 
* How can I mimic CGI form submission (METHOD=POST)?: How can I mimic CGI form submission METHOD=POST ?. 
* What module should I use to help with generating HTML?:: 
* How do I send mail from a Python script?:: 
* How do I avoid blocking in the connect() method of a socket?: How do I avoid blocking in the connect method of a socket?. 

Databases

* Are there any interfaces to database packages in Python?:: 
* How do you implement persistent objects in Python?:: 

Mathematics and Numerics

* How do I generate random numbers in Python?:: 

Extending/Embedding FAQ

* Can I create my own functions in C?:: 
* Can I create my own functions in C++?:: 
* Writing C is hard; are there any alternatives?:: 
* How can I execute arbitrary Python statements from C?:: 
* How can I evaluate an arbitrary Python expression from C?:: 
* How do I extract C values from a Python object?:: 
* How do I use Py_BuildValue() to create a tuple of arbitrary length?: How do I use Py_BuildValue to create a tuple of arbitrary length?. 
* How do I call an object's method from C?:: 
* How do I catch the output from PyErr_Print() (or anything that prints to stdout/stderr)?: How do I catch the output from PyErr_Print or anything that prints to stdout/stderr ?. 
* How do I access a module written in Python from C?:: 
* How do I interface to C++ objects from Python?:: 
* I added a module using the Setup file and the make fails; why?:: 
* How do I debug an extension?:: 
* I want to compile a Python module on my Linux system, but some files are missing. Why?: I want to compile a Python module on my Linux system but some files are missing Why?. 
* How do I tell "incomplete input" from "invalid input"?:: 
* How do I find undefined g++ symbols __builtin_new or __pure_virtual?:: 
* Can I create an object class with some methods implemented in C and others in Python (e.g. through inheritance)?: Can I create an object class with some methods implemented in C and others in Python e g through inheritance ?. 

Python on Windows FAQ

* How do I run a Python program under Windows?:: 
* How do I make Python scripts executable?:: 
* Why does Python sometimes take so long to start?:: 
* How do I make an executable from a Python script?:: 
* Is a *.pyd file the same as a DLL?: Is a * pyd file the same as a DLL?. 
* How can I embed Python into a Windows application?:: 
* How do I keep editors from inserting tabs into my Python source?:: 
* How do I check for a keypress without blocking?:: 
* How do I emulate os.kill() in Windows?: How do I emulate os kill in Windows?. 
* How do I extract the downloaded documentation on Windows?:: 

Graphic User Interface FAQ

* General GUI Questions:: 
* What platform-independent GUI toolkits exist for Python?:: 
* What platform-specific GUI toolkits exist for Python?:: 
* Tkinter questions:: 

What platform-independent GUI toolkits exist for Python?

* Tkinter:: 
* wxWidgets:: 
* Qt:: 
* Gtk+:: 
* FLTK:: 
* FOX:: 
* OpenGL:: 

Tkinter questions

* How do I freeze Tkinter applications?:: 
* Can I have Tk events handled while waiting for I/O?:: 
* I can’t get key bindings to work in Tkinter; why?: I can't get key bindings to work in Tkinter why?. 

"Why is Python Installed on my Computer?" FAQ

* What is Python?: What is Python?<2>. 
* Why is Python installed on my machine?:: 
* Can I delete Python?:: 

About these documents

* Contributors to the Python Documentation:: 

Reporting Bugs

* Documentation bugs:: 
* Using the Python issue tracker:: 
* Getting started contributing to Python yourself:: 

History and License

* History of the software:: 
* Terms and conditions for accessing or otherwise using Python:: 
* Licenses and Acknowledgements for Incorporated Software:: 

Terms and conditions for accessing or otherwise using Python

* PSF LICENSE AGREEMENT FOR PYTHON 3.6.0a0: PSF LICENSE AGREEMENT FOR PYTHON 3 6 0a0. 
* BEOPEN.COM LICENSE AGREEMENT FOR PYTHON 2.0: BEOPEN COM LICENSE AGREEMENT FOR PYTHON 2 0. 
* CNRI LICENSE AGREEMENT FOR PYTHON 1.6.1: CNRI LICENSE AGREEMENT FOR PYTHON 1 6 1. 
* CWI LICENSE AGREEMENT FOR PYTHON 0.9.0 THROUGH 1.2: CWI LICENSE AGREEMENT FOR PYTHON 0 9 0 THROUGH 1 2. 

Licenses and Acknowledgements for Incorporated Software

* Mersenne Twister:: 
* Sockets: Sockets<2>. 
* Floating point exception control:: 
* Asynchronous socket services:: 
* Cookie management:: 
* Execution tracing:: 
* UUencode and UUdecode functions:: 
* XML Remote Procedure Calls:: 
* test_epoll:: 
* Select kqueue:: 
* SipHash24:: 
* strtod and dtoa:: 
* OpenSSL:: 
* expat:: 
* libffi:: 
* zlib: zlib<3>. 
* cfuhash:: 
* libmpdec:: 

Distributing Python Modules (Legacy version)

* An Introduction to Distutils:: 
* Writing the Setup Script:: 
* Writing the Setup Configuration File:: 
* Creating a Source Distribution:: 
* Creating Built Distributions:: 
* The Python Package Index (PyPI): The Python Package Index PyPI. 
* Examples: Examples<29>. 
* Extending Distutils:: 
* Command Reference:: 
* API Reference:: 

An Introduction to Distutils

* Concepts & Terminology:: 
* A Simple Example: A Simple Example<2>. 
* General Python terminology:: 
* Distutils-specific terminology:: 

Writing the Setup Script

* Listing whole packages:: 
* Listing individual modules:: 
* Describing extension modules:: 
* Relationships between Distributions and Packages:: 
* Installing Scripts:: 
* Installing Package Data:: 
* Installing Additional Files:: 
* Additional meta-data:: 
* Debugging the setup script:: 

Describing extension modules

* Extension names and packages:: 
* Extension source files:: 
* Preprocessor options:: 
* Library options:: 
* Other options: Other options<2>. 

Creating a Source Distribution

* Specifying the files to distribute:: 
* Manifest-related options:: 

Creating Built Distributions

* Creating RPM packages:: 
* Creating Windows Installers:: 
* Cross-compiling on Windows:: 
* Vista User Access Control (UAC): Vista User Access Control UAC. 

Cross-compiling on Windows

* The Postinstallation script:: 

The Python Package Index (PyPI)

* PyPI overview:: 
* Distutils commands:: 
* PyPI package display:: 

Distutils commands

* The register command:: 
* The upload command:: 
* Additional command options:: 
* The .pypirc file: The pypirc file. 

Examples

* Pure Python distribution (by module): Pure Python distribution by module. 
* Pure Python distribution (by package): Pure Python distribution by package. 
* Single extension module:: 
* Checking a package:: 
* Reading the metadata:: 

Extending Distutils

* Integrating new commands:: 
* Adding new distribution types:: 

Command Reference

* Installing modules; the install command family: Installing modules the install command family. 
* Creating a source distribution; the sdist command: Creating a source distribution the sdist command. 

Installing modules: the install command family

* install_data:: 
* install_scripts:: 

API Reference

* distutils.core: distutils core --- Core Distutils functionality. Core Distutils functionality
* distutils.ccompiler: distutils ccompiler --- CCompiler base class. CCompiler base class
* distutils.unixccompiler: distutils unixccompiler --- Unix C Compiler. Unix C Compiler
* distutils.msvccompiler: distutils msvccompiler --- Microsoft Compiler. Microsoft Compiler
* distutils.bcppcompiler: distutils bcppcompiler --- Borland Compiler. Borland Compiler
* distutils.cygwincompiler: distutils cygwincompiler --- Cygwin Compiler. Cygwin Compiler
* distutils.archive_util: distutils archive_util --- Archiving utilities. Archiving utilities
* distutils.dep_util: distutils dep_util --- Dependency checking. Dependency checking
* distutils.dir_util: distutils dir_util --- Directory tree operations. Directory tree operations
* distutils.file_util: distutils file_util --- Single file operations. Single file operations
* distutils.util: distutils util --- Miscellaneous other utility functions. Miscellaneous other utility functions
* distutils.dist: distutils dist --- The Distribution class. The Distribution class
* distutils.extension: distutils extension --- The Extension class. The Extension class
* distutils.debug: distutils debug --- Distutils debug mode. Distutils debug mode
* distutils.errors: distutils errors --- Distutils exceptions. Distutils exceptions
* distutils.fancy_getopt: distutils fancy_getopt --- Wrapper around the standard getopt module. Wrapper around the standard getopt module
* distutils.filelist: distutils filelist --- The FileList class. The FileList class
* distutils.log: distutils log --- Simple PEP 282-style logging. Simple PEP 282-style logging
* distutils.spawn: distutils spawn --- Spawn a sub-process. Spawn a sub-process
* distutils.sysconfig: distutils sysconfig --- System configuration information. System configuration information
* distutils.text_file: distutils text_file --- The TextFile class. The TextFile class
* distutils.version: distutils version --- Version number classes. Version number classes
* distutils.cmd: distutils cmd --- Abstract base class for Distutils commands. Abstract base class for Distutils commands
* Creating a new Distutils command:: 
* distutils.command: distutils command --- Individual Distutils commands. Individual Distutils commands
* distutils.command.bdist: distutils command bdist --- Build a binary installer. Build a binary installer
* distutils.command.bdist_packager: distutils command bdist_packager --- Abstract base class for packagers. Abstract base class for packagers
* distutils.command.bdist_dumb: distutils command bdist_dumb --- Build a "dumb" installer. Build a "dumb" installer
* distutils.command.bdist_msi: distutils command bdist_msi --- Build a Microsoft Installer binary package. Build a Microsoft Installer binary package
* distutils.command.bdist_rpm: distutils command bdist_rpm --- Build a binary distribution as a Redhat RPM and SRPM. Build a binary distribution as a Redhat RPM and
                               SRPM
* distutils.command.bdist_wininst: distutils command bdist_wininst --- Build a Windows installer. Build a Windows installer
* distutils.command.sdist: distutils command sdist --- Build a source distribution. Build a source distribution
* distutils.command.build: distutils command build --- Build all files of a package. Build all files of a package
* distutils.command.build_clib: distutils command build_clib --- Build any C libraries in a package. Build any C libraries in a package
* distutils.command.build_ext: distutils command build_ext --- Build any extensions in a package. Build any extensions in a package
* distutils.command.build_py: distutils command build_py --- Build the py/ pyc files of a package. Build the .py/.pyc files of a package
* distutils.command.build_scripts: distutils command build_scripts --- Build the scripts of a package. Build the scripts of a package
* distutils.command.clean: distutils command clean --- Clean a package build area. Clean a package build area
* distutils.command.config: distutils command config --- Perform package configuration. Perform package configuration
* distutils.command.install: distutils command install --- Install a package. Install a package
* distutils.command.install_data: distutils command install_data --- Install data files from a package. Install data files from a package
* distutils.command.install_headers: distutils command install_headers --- Install C/C++ header files from a package. Install C/C++ header files from a package
* distutils.command.install_lib: distutils command install_lib --- Install library files from a package. Install library files from a package
* distutils.command.install_scripts: distutils command install_scripts --- Install script files from a package. Install script files from a package
* distutils.command.register: distutils command register --- Register a module with the Python Package Index. Register a module with the Python Package Index
* distutils.command.check: distutils command check --- Check the meta-data of a package. Check the meta-data of a package

Installing Python Modules (Legacy version)

* Introduction: Introduction<17>. 
* Standard Build and Install:: 
* Alternate Installation:: 
* Custom Installation:: 
* Distutils Configuration Files:: 
* Building Extensions; Tips and Tricks: Building Extensions Tips and Tricks. 

Introduction

* Best case; trivial installation: Best case trivial installation. 
* The new standard; Distutils: The new standard Distutils. 

Standard Build and Install

* Platform variations:: 
* Splitting the job up:: 
* How building works:: 
* How installation works:: 

Alternate Installation

* Alternate installation; the user scheme: Alternate installation the user scheme. 
* Alternate installation; the home scheme: Alternate installation the home scheme. 
* Alternate installation; Unix (the prefix scheme): Alternate installation Unix the prefix scheme. 
* Alternate installation; Windows (the prefix scheme): Alternate installation Windows the prefix scheme. 

Custom Installation

* Modifying Python's Search Path:: 

Distutils Configuration Files

* Location and names of config files:: 
* Syntax of config files:: 

Building Extensions: Tips and Tricks

* Tweaking compiler/linker flags:: 
* Using non-Microsoft compilers on Windows:: 

Using non-Microsoft compilers on Windows

* Borland/CodeGear C++:: 
* GNU C / Cygwin / MinGW:: 

GNU C / Cygwin / MinGW

* Older Versions of Python and MinGW:: 



File: python.info,  Node: What's New in Python,  Next: The Python Tutorial,  Prev: Top,  Up: Top

1 What’s New in Python
**********************

The "What’s New in Python" series of essays takes tours through the most
important changes between major Python versions.  They are a "must read"
for anyone wishing to stay up-to-date after a new release.

* Menu:

* What’s New In Python 3.6: What's New In Python 3 6. 
* What’s New In Python 3.5: What's New In Python 3 5. 
* What’s New In Python 3.4: What's New In Python 3 4. 
* What’s New In Python 3.3: What's New In Python 3 3. 
* What’s New In Python 3.2: What's New In Python 3 2. 
* What’s New In Python 3.1: What's New In Python 3 1. 
* What’s New In Python 3.0: What's New In Python 3 0. 
* What’s New in Python 2.7: What's New in Python 2 7. 
* What’s New in Python 2.6: What's New in Python 2 6. 
* What’s New in Python 2.5: What's New in Python 2 5. 
* What’s New in Python 2.4: What's New in Python 2 4. 
* What’s New in Python 2.3: What's New in Python 2 3. 
* What’s New in Python 2.2: What's New in Python 2 2. 
* What’s New in Python 2.1: What's New in Python 2 1. 
* What’s New in Python 2.0: What's New in Python 2 0. 
* Changelog:: 


File: python.info,  Node: What's New In Python 3 6,  Next: What's New In Python 3 5,  Up: What's New in Python

1.1 What’s New In Python 3.6
============================


Release: 3.6.0a0


Date: May 06, 2016

This article explains the new features in Python 3.6, compared to 3.5.

For full details, see the Misc/NEWS(1) file.

     Note: Prerelease users should be aware that this document is
     currently in draft form.  It will be updated substantially as
     Python 3.6 moves towards release, so it’s worth checking back even
     after reading earlier versions.

* Menu:

* Summary: Summary -- Release highlights. Release highlights
* New Features:: 
* Other Language Changes:: 
* New Modules:: 
* Improved Modules:: 
* Optimizations:: 
* Build and C API Changes:: 
* Deprecated:: 
* Removed:: 
* Porting to Python 3.6: Porting to Python 3 6. 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Misc/NEWS


File: python.info,  Node: Summary -- Release highlights,  Next: New Features,  Up: What's New In Python 3 6

1.1.1 Summary – Release highlights
----------------------------------

   * PEP 498: *note Formatted string literals: 149.


File: python.info,  Node: New Features,  Next: Other Language Changes,  Prev: Summary -- Release highlights,  Up: What's New In Python 3 6

1.1.2 New Features
------------------

* Menu:

* PEP 498; Formatted string literals: PEP 498 Formatted string literals. 
* PYTHONMALLOC environment variable:: 


File: python.info,  Node: PEP 498 Formatted string literals,  Next: PYTHONMALLOC environment variable,  Up: New Features

1.1.2.1 PEP 498: Formatted string literals
..........................................

Formatted string literals are a new kind of string literal, prefixed
with ‘'f'’.  They are similar to the format strings accepted by *note
str.format(): 14d.  They contain replacement fields surrounded by curly
braces.  The replacement fields are expressions, which are evaluated at
run time, and then formatted using the *note format(): 14e. protocol.

     >>> name = "Fred"
     >>> f"He said his name is {name}."
     'He said his name is Fred.'

See PEP 498(1) and the main documentation at *note Formatted string
literals: 14f.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0498


File: python.info,  Node: PYTHONMALLOC environment variable,  Prev: PEP 498 Formatted string literals,  Up: New Features

1.1.2.2 PYTHONMALLOC environment variable
.........................................

The new *note PYTHONMALLOC: 151. environment variable allows to set the
Python memory allocators and/or install debug hooks.

It is now possible to install debug hooks on Python memory allocators on
Python compiled in release mode using ‘PYTHONMALLOC=debug’.  Effects of
debug hooks:

   * Newly allocated memory is filled with the byte ‘0xCB’

   * Freed memory is filled with the byte ‘0xDB’

   * Detect violations of Python memory allocator API. For example,
     ‘PyObject_Free()’ called on a memory block allocated by *note
     PyMem_Malloc(): 152.

   * Detect write before the start of the buffer (buffer underflow)

   * Detect write after the end of the buffer (buffer overflow)

   * Check that the *note GIL: 153. is held when allocator functions of
     *note PYMEM_DOMAIN_OBJ: 154. (ex: ‘PyObject_Malloc()’) and *note
     PYMEM_DOMAIN_MEM: 155. (ex: *note PyMem_Malloc(): 152.) domains are
     called.

Checking if the GIL is held is also a new feature of Python 3.6.

See the *note PyMem_SetupDebugHooks(): 156. function for debug hooks on
Python memory allocators.

It is now also possible to force the usage of the ‘malloc()’ allocator
of the C library for all Python memory allocations using
‘PYTHONMALLOC=malloc’.  It helps to use external memory debuggers like
Valgrind on a Python compiled in release mode.

On error, the debug hooks on Python memory allocators now use the *note
tracemalloc: 111. module to get the traceback where a memory block was
allocated.

Example of fatal error on buffer overflow using ‘python3.6 -X
tracemalloc=5’ (store 5 frames in traces):

     Debug memory block at address p=0x7fbcd41666f8: API 'o'
         4 bytes originally requested
         The 7 pad bytes at p-7 are FORBIDDENBYTE, as expected.
         The 8 pad bytes at tail=0x7fbcd41666fc are not all FORBIDDENBYTE (0xfb):
             at tail+0: 0x02 *** OUCH
             at tail+1: 0xfb
             at tail+2: 0xfb
             at tail+3: 0xfb
             at tail+4: 0xfb
             at tail+5: 0xfb
             at tail+6: 0xfb
             at tail+7: 0xfb
         The block was made by call #1233329 to debug malloc/realloc.
         Data at p: 1a 2b 30 00

     Memory block allocated at (most recent call first):
       File "test/test_bytes.py", line 323
       File "unittest/case.py", line 600
       File "unittest/case.py", line 648
       File "unittest/suite.py", line 122
       File "unittest/suite.py", line 84

     Fatal Python error: bad trailing pad byte

     Current thread 0x00007fbcdbd32700 (most recent call first):
       File "test/test_bytes.py", line 323 in test_hex
       File "unittest/case.py", line 600 in run
       File "unittest/case.py", line 648 in __call__
       File "unittest/suite.py", line 122 in run
       File "unittest/suite.py", line 84 in __call__
       File "unittest/suite.py", line 122 in run
       File "unittest/suite.py", line 84 in __call__
       ...

(Contributed by Victor Stinner in issue 26516(1) and issue 26564(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue26516

   (2) https://bugs.python.org/issue26564


File: python.info,  Node: Other Language Changes,  Next: New Modules,  Prev: New Features,  Up: What's New In Python 3 6

1.1.3 Other Language Changes
----------------------------

   * None yet.


File: python.info,  Node: New Modules,  Next: Improved Modules,  Prev: Other Language Changes,  Up: What's New In Python 3 6

1.1.4 New Modules
-----------------

   * None yet.


File: python.info,  Node: Improved Modules,  Next: Optimizations,  Prev: New Modules,  Up: What's New In Python 3 6

1.1.5 Improved Modules
----------------------

* Menu:

* contextlib:: 
* datetime:: 
* faulthandler:: 
* os:: 
* pickle:: 
* rlcompleter:: 
* site:: 
* socketserver:: 
* telnetlib:: 
* typing:: 
* unittest.mock: unittest mock. 
* urllib.robotparser: urllib robotparser. 
* warnings:: 
* zipfile:: 
* zlib:: 
* fileinput:: 


File: python.info,  Node: contextlib,  Next: datetime,  Up: Improved Modules

1.1.5.1 contextlib
..................

The *note contextlib.AbstractContextManager: 15b. class has been added
to provide an abstract base class for context managers.  It provides a
sensible default implementation for ‘__enter__()’ which returns ‘self’
and leaves ‘__exit__()’ an abstract method.  A matching class has been
added to the *note typing: 116. module as *note typing.ContextManager:
15c.  (Contributed by Brett Cannon in issue 25609(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue25609


File: python.info,  Node: datetime,  Next: faulthandler,  Prev: contextlib,  Up: Improved Modules

1.1.5.2 datetime
................

The *note datetime.strftime(): 15e. and *note date.strftime(): 15f.
methods now support ISO 8601 date directives ‘%G’, ‘%u’ and ‘%V’.
(Contributed by Ashley Anderson in issue 12006(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue12006


File: python.info,  Node: faulthandler,  Next: os,  Prev: datetime,  Up: Improved Modules

1.1.5.3 faulthandler
....................

On Windows, the *note faulthandler: 7b. module now installs a handler
for Windows exceptions: see *note faulthandler.enable(): 161.
(Contributed by Victor Stinner in issue 23848(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue23848


File: python.info,  Node: os,  Next: pickle,  Prev: faulthandler,  Up: Improved Modules

1.1.5.4 os
..........

A new *note close(): 163. method allows explicitly closing a *note
scandir(): 164. iterator.  The *note scandir(): 164. iterator now
supports the *note context manager: 165. protocol.  If a ‘scandir()’
iterator is neither exhausted nor explicitly closed a *note
ResourceWarning: 166. will be emitted in its destructor.  (Contributed
by Serhiy Storchaka in issue 25994(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue25994


File: python.info,  Node: pickle,  Next: rlcompleter,  Prev: os,  Up: Improved Modules

1.1.5.5 pickle
..............

Objects that need calling ‘__new__’ with keyword arguments can now be
pickled using *note pickle protocols: 168. older than protocol version
4.  Protocol version 4 already supports this case.  (Contributed by
Serhiy Storchaka in issue 24164(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue24164


File: python.info,  Node: rlcompleter,  Next: site,  Prev: pickle,  Up: Improved Modules

1.1.5.6 rlcompleter
...................

Private and special attribute names now are omitted unless the prefix
starts with underscores.  A space or a colon is added after some
completed keywords.  (Contributed by Serhiy Storchaka in issue 25011(1)
and issue 25209(2).)

Names of most attributes listed by *note dir(): 16a. are now completed.
Previously, names of properties and slots which were not yet created on
an instance were excluded.  (Contributed by Martin Panter in issue
25590(3).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue25011

   (2) https://bugs.python.org/issue25209

   (3) https://bugs.python.org/issue25590


File: python.info,  Node: site,  Next: socketserver,  Prev: rlcompleter,  Up: Improved Modules

1.1.5.7 site
............

When specifying paths to add to *note sys.path: 16c. in a ‘.pth’ file,
you may now specify file paths on top of directories (e.g.  zip files).
(Contributed by Wolfgang Langner in issue 26587(1)).

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue26587


File: python.info,  Node: socketserver,  Next: telnetlib,  Prev: site,  Up: Improved Modules

1.1.5.8 socketserver
....................

Servers based on the *note socketserver: ee. module, including those
defined in *note http.server: 96, *note xmlrpc.server: 13d. and *note
wsgiref.simple_server: 12c, now support the *note context manager: 165.
protocol.  (Contributed by Aviv Palivoda in issue 26404(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue26404


File: python.info,  Node: telnetlib,  Next: typing,  Prev: socketserver,  Up: Improved Modules

1.1.5.9 telnetlib
.................

*note Telnet: 16f. is now a context manager (contributed by Stéphane
Wirtel in issue 25485(1)).

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue25485


File: python.info,  Node: typing,  Next: unittest mock,  Prev: telnetlib,  Up: Improved Modules

1.1.5.10 typing
...............

The *note typing.ContextManager: 15c. class has been added for
representing *note contextlib.AbstractContextManager: 15b.  (Contributed
by Brett Cannon in issue 25609(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue25609


File: python.info,  Node: unittest mock,  Next: urllib robotparser,  Prev: typing,  Up: Improved Modules

1.1.5.11 unittest.mock
......................

The *note Mock: 172. class has the following improvements:

   * Two new methods, *note Mock.assert_called(): 173. and *note
     Mock.assert_called_once(): 174. to check if the mock object was
     called.  (Contributed by Amit Saha in issue 26323(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue26323


File: python.info,  Node: urllib robotparser,  Next: warnings,  Prev: unittest mock,  Up: Improved Modules

1.1.5.12 urllib.robotparser
...........................

*note RobotFileParser: 176. now supports the ‘Crawl-delay’ and
‘Request-rate’ extensions.  (Contributed by Nikolay Bogoychev in issue
16099(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue16099


File: python.info,  Node: warnings,  Next: zipfile,  Prev: urllib robotparser,  Up: Improved Modules

1.1.5.13 warnings
.................

A new optional `source' parameter has been added to the *note
warnings.warn_explicit(): 178. function: the destroyed object which
emitted a *note ResourceWarning: 166.  A `source' attribute has also
been added to ‘warnings.WarningMessage’ (contributed by Victor Stinner
in issue 26568(1) and issue 26567(2)).

When a *note ResourceWarning: 166. warning is logged, the *note
tracemalloc: 111. is now used to try to retrieve the traceback where the
detroyed object was allocated.

Example with the script ‘example.py’:

     import warnings

     def func():
         return open(__file__)

     f = func()
     f = None

Output of the command ‘python3.6 -Wd -X tracemalloc=5 example.py’:

     example.py:7: ResourceWarning: unclosed file <_io.TextIOWrapper name='example.py' mode='r' encoding='UTF-8'>
       f = None
     Object allocated at (most recent call first):
       File "example.py", lineno 4
         return open(__file__)
       File "example.py", lineno 6
         f = func()

The "Object allocated at" traceback is new and only displayed if *note
tracemalloc: 111. is tracing Python memory allocations and if the *note
warnings: 123. was already imported.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue26568

   (2) https://bugs.python.org/issue26567


File: python.info,  Node: zipfile,  Next: zlib,  Prev: warnings,  Up: Improved Modules

1.1.5.14 zipfile
................

A new *note ZipInfo.from_file(): 17a. class method allows making a *note
ZipInfo: 17b. instance from a filesystem file.  A new ‘ZipInfo.is_dir()’
method can be used to check if the *note ZipInfo: 17b. instance
represents a directory.  (Contributed by Thomas Kluyver in issue
26039(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue26039


File: python.info,  Node: zlib,  Next: fileinput,  Prev: zipfile,  Up: Improved Modules

1.1.5.15 zlib
.............

The *note compress(): 17d. function now accepts keyword arguments.
(Contributed by Aviv Palivoda in issue 26243(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue26243


File: python.info,  Node: fileinput,  Prev: zlib,  Up: Improved Modules

1.1.5.16 fileinput
..................

*note hook_encoded(): 17f. now supports the `errors' argument.
(Contributed by Joseph Hackman in issue 25788(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue25788


File: python.info,  Node: Optimizations,  Next: Build and C API Changes,  Prev: Improved Modules,  Up: What's New In Python 3 6

1.1.6 Optimizations
-------------------

   * The ASCII decoder is now up to 60 times as fast for error handlers
     ‘surrogateescape’, ‘ignore’ and ‘replace’ (Contributed by Victor
     Stinner in issue 24870(1)).

   * The ASCII and the Latin1 encoders are now up to 3 times as fast for
     the error handler ‘surrogateescape’ (Contributed by Victor Stinner
     in issue 25227(2)).

   * The UTF-8 encoder is now up to 75 times as fast for error handlers
     ‘ignore’, ‘replace’, ‘surrogateescape’, ‘surrogatepass’
     (Contributed by Victor Stinner in issue 25267(3)).

   * The UTF-8 decoder is now up to 15 times as fast for error handlers
     ‘ignore’, ‘replace’ and ‘surrogateescape’ (Contributed by Victor
     Stinner in issue 25301(4)).

   * ‘bytes % args’ is now up to 2 times faster.  (Contributed by Victor
     Stinner in issue 25349(5)).

   * ‘bytearray % args’ is now between 2.5 and 5 times faster.
     (Contributed by Victor Stinner in issue 25399(6)).

   * Optimize *note bytes.fromhex(): 181. and *note bytearray.fromhex():
     182.: they are now between 2x and 3.5x faster.  (Contributed by
     Victor Stinner in issue 25401(7)).

   * Optimize ‘bytes.replace(b'', b'.')’ and ‘bytearray.replace(b'',
     b'.')’: up to 80% faster.  (Contributed by Josh Snider in issue
     26574(8)).

   * Allocator functions of the *note PyMem_Malloc(): 152. domain (*note
     PYMEM_DOMAIN_MEM: 155.) now use the *note pymalloc memory
     allocator: 183. instead of ‘malloc()’ function of the C library.
     The pymalloc allocator is optimized for objects smaller or equal to
     512 bytes with a short lifetime, and use ‘malloc()’ for larger
     memory blocks.  (Contributed by Victor Stinner in issue 26249(9)).

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue24870

   (2) https://bugs.python.org/issue25227

   (3) https://bugs.python.org/issue25267

   (4) https://bugs.python.org/issue25301

   (5) https://bugs.python.org/issue25349

   (6) https://bugs.python.org/issue25399

   (7) https://bugs.python.org/issue25401

   (8) https://bugs.python.org/issue26574

   (9) https://bugs.python.org/issue26249


File: python.info,  Node: Build and C API Changes,  Next: Deprecated,  Prev: Optimizations,  Up: What's New In Python 3 6

1.1.7 Build and C API Changes
-----------------------------

   * New *note Py_FinalizeEx(): 185. API which indicates if flushing
     buffered data failed (issue 5319(1)).

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue5319


File: python.info,  Node: Deprecated,  Next: Removed,  Prev: Build and C API Changes,  Up: What's New In Python 3 6

1.1.8 Deprecated
----------------

* Menu:

* New Keywords:: 
* Deprecated Python modules, functions and methods: Deprecated Python modules functions and methods. 
* Deprecated functions and types of the C API:: 
* Deprecated features:: 
* Deprecated Python behavior:: 


File: python.info,  Node: New Keywords,  Next: Deprecated Python modules functions and methods,  Up: Deprecated

1.1.8.1 New Keywords
....................

‘async’ and ‘await’ are not recommended to be used as variable, class,
function or module names.  Introduced by PEP 492(1) in Python 3.5, they
will become proper keywords in Python 3.7.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0492


File: python.info,  Node: Deprecated Python modules functions and methods,  Next: Deprecated functions and types of the C API,  Prev: New Keywords,  Up: Deprecated

1.1.8.2 Deprecated Python modules, functions and methods
........................................................

   * *note importlib.machinery.SourceFileLoader.load_module(): 189. and
     *note importlib.machinery.SourcelessFileLoader.load_module(): 18a.
     are now deprecated.  They were the only remaining implementations
     of *note importlib.abc.Loader.load_module(): 18b. in *note
     importlib: 9a. that had not been deprecated in previous versions of
     Python in favour of *note importlib.abc.Loader.exec_module(): 18c.


File: python.info,  Node: Deprecated functions and types of the C API,  Next: Deprecated features,  Prev: Deprecated Python modules functions and methods,  Up: Deprecated

1.1.8.3 Deprecated functions and types of the C API
...................................................

   * None yet.


File: python.info,  Node: Deprecated features,  Next: Deprecated Python behavior,  Prev: Deprecated functions and types of the C API,  Up: Deprecated

1.1.8.4 Deprecated features
...........................

   * The ‘pyvenv’ script has been deprecated in favour of ‘python3 -m
     venv’.  This prevents confusion as to what Python interpreter
     ‘pyvenv’ is connected to and thus what Python interpreter will be
     used by the virtual environment.  (Contributed by Brett Cannon in
     issue 25154(1).)

   * When performing a relative import, falling back on ‘__name__’ and
     ‘__path__’ from the calling module when ‘__spec__’ or ‘__package__’
     are not defined now raises an *note ImportWarning: 18f.
     (Contributed by Rose Ames in issue 25791(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue25154

   (2) https://bugs.python.org/issue25791


File: python.info,  Node: Deprecated Python behavior,  Prev: Deprecated features,  Up: Deprecated

1.1.8.5 Deprecated Python behavior
..................................

   * Raising the *note StopIteration: 191. exception inside a generator
     will now generate a *note DeprecationWarning: 192, and will trigger
     a *note RuntimeError: 193. in Python 3.7.  See *note PEP 479;
     Change StopIteration handling inside generators: 194. for details.


File: python.info,  Node: Removed,  Next: Porting to Python 3 6,  Prev: Deprecated,  Up: What's New In Python 3 6

1.1.9 Removed
-------------

* Menu:

* API and Feature Removals:: 


File: python.info,  Node: API and Feature Removals,  Up: Removed

1.1.9.1 API and Feature Removals
................................

   * ‘inspect.getmoduleinfo()’ was removed (was deprecated since CPython
     3.3).  *note inspect.getmodulename(): 197. should be used for
     obtaining the module name for a given path.

   * ‘traceback.Ignore’ class and ‘traceback.usage’,
     ‘traceback.modname’, ‘traceback.fullmodname’,
     ‘traceback.find_lines_from_code’, ‘traceback.find_lines’,
     ‘traceback.find_strings’, ‘traceback.find_executable_lines’ methods
     were removed from the *note traceback: 110. module.  They were
     undocumented methods deprecated since Python 3.2 and equivalent
     functionality is available from private methods.


File: python.info,  Node: Porting to Python 3 6,  Prev: Removed,  Up: What's New In Python 3 6

1.1.10 Porting to Python 3.6
----------------------------

This section lists previously described changes and other bugfixes that
may require changes to your code.

* Menu:

* Changes in the Python API:: 
* Changes in the C API:: 


File: python.info,  Node: Changes in the Python API,  Next: Changes in the C API,  Up: Porting to Python 3 6

1.1.10.1 Changes in the Python API
..................................

   * The format of the ‘co_lnotab’ attribute of code objects changed to
     support negative line number delta.  By default, Python does not
     emit bytecode with negative line number delta.  Functions using
     ‘frame.f_lineno’, ‘PyFrame_GetLineNumber()’ or ‘PyCode_Addr2Line()’
     are not affected.  Functions decoding directly ‘co_lnotab’ should
     be updated to use a signed 8-bit integer type for the line number
     delta, but it’s only required to support applications using
     negative line number delta.  See ‘Objects/lnotab_notes.txt’ for the
     ‘co_lnotab’ format and how to decode it, and see the PEP 511(1) for
     the rationale.

   * The functions in the *note compileall: 21. module now return
     booleans instead of ‘1’ or ‘0’ to represent success or failure,
     respectively.  Thanks to booleans being a subclass of integers,
     this should only be an issue if you were doing identity checks for
     ‘1’ or ‘0’.  See issue 25768(2).

   * Reading the ‘port’ attribute of *note urllib.parse.urlsplit(): 19a.
     and *note urlparse(): 19b. results now raises *note ValueError:
     19c. for out-of-range values, rather than returning *note None:
     19d.  See issue 20059(3).

   * The *note imp: 99. module now raises a *note DeprecationWarning:
     192. instead of *note PendingDeprecationWarning: 19e.

   * The following modules have had missing APIs added to their
     ‘__all__’ attributes to match the documented APIs: *note calendar:
     15, *note csv: 29, *note ElementTree: 134, *note enum: 79, *note
     fileinput: 7e, *note ftplib: 83, *note logging: a8, *note optparse:
     c1, *note subprocess: f7, *note tarfile: ff, *note threading: 106.
     and *note wave: 124.  This means they will export new symbols when
     ‘import *’ is used.  See issue 23883(4).

   * When performing a relative import, if ‘__package__’ does not
     compare equal to ‘__spec__.parent’ then *note ImportWarning: 18f.
     is raised.  (Contributed by Brett Cannon in issue 25791(5).)

   * When a relative import is performed and no parent package is known,
     then *note ImportError: 19f. will be raised.  Previously, *note
     SystemError: 1a0. could be raised.  (Contributed by Brett Cannon in
     issue 18018(6).)

   * Servers based on the *note socketserver: ee. module, including
     those defined in *note http.server: 96, *note xmlrpc.server: 13d.
     and *note wsgiref.simple_server: 12c, now only catch exceptions
     derived from *note Exception: 1a1.  Therefore if a request handler
     raises an exception like *note SystemExit: 1a2. or *note
     KeyboardInterrupt: 1a3, *note handle_error(): 1a4. is no longer
     called, and the exception will stop a single-threaded server.
     (Contributed by Martin Panter in issue 23430(7).)

   * *note spwd.getspnam(): 1a5. now raises a *note PermissionError:
     1a6. instead of *note KeyError: 1a7. if the user doesn’t have
     privileges.

   * The *note socket.socket.close(): 1a8. method now raises an
     exception if an error (e.g.  EBADF) was reported by the underlying
     system call.  See issue 26685(8).

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0511

   (2) https://bugs.python.org/issue25768

   (3) https://bugs.python.org/issue20059

   (4) https://bugs.python.org/issue23883

   (5) https://bugs.python.org/issue25791

   (6) https://bugs.python.org/issue18018

   (7) https://bugs.python.org/issue23430

   (8) https://bugs.python.org/issue26685


File: python.info,  Node: Changes in the C API,  Prev: Changes in the Python API,  Up: Porting to Python 3 6

1.1.10.2 Changes in the C API
.............................

   * *note PyMem_Malloc(): 152. allocator family now uses the *note
     pymalloc allocator: 183. rather than system ‘malloc()’.
     Applications calling *note PyMem_Malloc(): 152. without holding the
     GIL can now crash.  Set the *note PYTHONMALLOC: 151. environment
     variable to ‘debug’ to validate the usage of memory allocators in
     your application.  See issue 26249(1).

   * *note Py_Exit(): 1aa. (and the main interpreter) now override the
     exit status with 120 if flushing buffered data failed.  See issue
     5319(2).

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue26249

   (2) https://bugs.python.org/issue5319


File: python.info,  Node: What's New In Python 3 5,  Next: What's New In Python 3 4,  Prev: What's New In Python 3 6,  Up: What's New in Python

1.2 What’s New In Python 3.5
============================


Editors: Elvis Pranskevichus <<elvis@magic.io>>, Yury Selivanov
<<yury@magic.io>>

This article explains the new features in Python 3.5, compared to 3.4.
Python 3.5 was released on September 13, 2015.  See the changelog(1) for
a full list of changes.

See also
........

PEP 478(2) - Python 3.5 Release Schedule

* Menu:

* Summary: Summary -- Release highlights<2>. Release highlights
* New Features: New Features<2>. 
* Other Language Changes: Other Language Changes<2>. 
* New Modules: New Modules<2>. 
* Improved Modules: Improved Modules<2>. 
* Other module-level changes:: 
* Optimizations: Optimizations<2>. 
* Build and C API Changes: Build and C API Changes<2>. 
* Deprecated: Deprecated<2>. 
* Removed: Removed<2>. 
* Porting to Python 3.5: Porting to Python 3 5. 

   ---------- Footnotes ----------

   (1) https://docs.python.org/3.5/whatsnew/changelog.html

   (2) https://www.python.org/dev/peps/pep-0478


File: python.info,  Node: Summary -- Release highlights<2>,  Next: New Features<2>,  Up: What's New In Python 3 5

1.2.1 Summary – Release highlights
----------------------------------

New syntax features:

   * *note PEP 492: 1ae, coroutines with async and await syntax.

   * *note PEP 465: 1af, a new matrix multiplication operator: ‘a @ b’.

   * *note PEP 448: 1b0, additional unpacking generalizations.

New library modules:

   * *note typing: 116.: *note PEP 484 – Type Hints: 1b1.

   * *note zipapp: 13e.: *note PEP 441 Improving Python ZIP Application
     Support: 1b2.

New built-in features:

   * ‘bytes % args’, ‘bytearray % args’: *note PEP 461: 1b3. – Adding
     ‘%’ formatting to bytes and bytearray.

   * New *note bytes.hex(): 1b4, *note bytearray.hex(): 1b5. and *note
     memoryview.hex(): 1b6. methods.  (Contributed by Arnon Yaari in
     issue 9951(1).)

   * *note memoryview: 1b7. now supports tuple indexing (including
     multi-dimensional).  (Contributed by Antoine Pitrou in issue
     23632(2).)

   * Generators have a new ‘gi_yieldfrom’ attribute, which returns the
     object being iterated by ‘yield from’ expressions.  (Contributed by
     Benno Leslie and Yury Selivanov in issue 24450(3).)

   * A new *note RecursionError: 1b8. exception is now raised when
     maximum recursion depth is reached.  (Contributed by Georg Brandl
     in issue 19235(4).)

CPython implementation improvements:

   * When the ‘LC_TYPE’ locale is the POSIX locale (‘C’ locale), *note
     sys.stdin: 1b9. and *note sys.stdout: 1ba. now use the
     ‘surrogateescape’ error handler, instead of the ‘strict’ error
     handler.  (Contributed by Victor Stinner in issue 19977(5).)

   * ‘.pyo’ files are no longer used and have been replaced by a more
     flexible scheme that includes the optimization level explicitly in
     ‘.pyc’ name.  (See *note PEP 488 overview: 1bb.)

   * Builtin and extension modules are now initialized in a multi-phase
     process, which is similar to how Python modules are loaded.  (See
     *note PEP 489 overview: 1bc.)

Significant improvements in the standard library:

   * *note collections.OrderedDict: 1bd. is now *note implemented in C:
     1be, which makes it 4 to 100 times faster.

   * The *note ssl: f1. module gained *note support for Memory BIO: 1bf,
     which decouples SSL protocol handling from network IO.

   * The new *note os.scandir(): 164. function provides a *note better
     and significantly faster way: 1c0. of directory traversal.

   * *note functools.lru_cache(): 1c1. has been mostly *note
     reimplemented in C: 1c2, yielding much better performance.

   * The new *note subprocess.run(): 1c3. function provides a *note
     streamlined way to run subprocesses: 1c4.

   * The *note traceback: 110. module has been significantly *note
     enhanced: 1c5. for improved performance and developer convenience.

Security improvements:

   * SSLv3 is now disabled throughout the standard library.  It can
     still be enabled by instantiating a *note ssl.SSLContext: 1c6.
     manually.  (See issue 22638(6) for more details; this change was
     backported to CPython 3.4 and 2.7.)

   * HTTP cookie parsing is now stricter, in order to protect against
     potential injection attacks.  (Contributed by Antoine Pitrou in
     issue 22796(7).)

Windows improvements:

   * A new installer for Windows has replaced the old MSI. See *note
     Using Python on Windows: 1c7. for more information.

   * Windows builds now use Microsoft Visual C++ 14.0, and extension
     modules should use the same.

Please read on for a comprehensive list of user-facing changes,
including many other smaller improvements, CPython optimizations,
deprecations, and potential porting issues.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue9951

   (2) https://bugs.python.org/issue23632

   (3) https://bugs.python.org/issue24450

   (4) https://bugs.python.org/issue19235

   (5) https://bugs.python.org/issue19977

   (6) https://bugs.python.org/issue22638

   (7) https://bugs.python.org/issue22796


File: python.info,  Node: New Features<2>,  Next: Other Language Changes<2>,  Prev: Summary -- Release highlights<2>,  Up: What's New In Python 3 5

1.2.2 New Features
------------------

* Menu:

* PEP 492 - Coroutines with async and await syntax:: 
* PEP 465 - A dedicated infix operator for matrix multiplication:: 
* PEP 448 - Additional Unpacking Generalizations:: 
* PEP 461 - % formatting support for bytes and bytearray:: 
* PEP 484 - Type Hints:: 
* PEP 471 - os.scandir() function: PEP 471 - os scandir function -- a better and faster directory iterator. a better and faster directory iterator
* PEP 475; Retry system calls failing with EINTR: PEP 475 Retry system calls failing with EINTR. 
* PEP 479; Change StopIteration handling inside generators: PEP 479 Change StopIteration handling inside generators. 
* PEP 485; A function for testing approximate equality: PEP 485 A function for testing approximate equality. 
* PEP 486; Make the Python Launcher aware of virtual environments: PEP 486 Make the Python Launcher aware of virtual environments. 
* PEP 488; Elimination of PYO files: PEP 488 Elimination of PYO files. 
* PEP 489; Multi-phase extension module initialization: PEP 489 Multi-phase extension module initialization. 


File: python.info,  Node: PEP 492 - Coroutines with async and await syntax,  Next: PEP 465 - A dedicated infix operator for matrix multiplication,  Up: New Features<2>

1.2.2.1 PEP 492 - Coroutines with async and await syntax
........................................................

PEP 492(1) greatly improves support for asynchronous programming in
Python by adding *note awaitable objects: 1ca, *note coroutine
functions: 1cb, *note asynchronous iteration: 1cc, and *note
asynchronous context managers: 1cd.

Coroutine functions are declared using the new *note async def: 1ce.
syntax:

     >>> async def coro():
     ...     return 'spam'

Inside a coroutine function, the new *note await: 1cf. expression can be
used to suspend coroutine execution until the result is available.  Any
object can be `awaited', as long as it implements the *note awaitable:
1ca. protocol by defining the *note __await__(): 1d0. method.

PEP 492 also adds *note async for: 1d1. statement for convenient
iteration over asynchronous iterables.

An example of a rudimentary HTTP client written using the new syntax:

     import asyncio

     async def http_get(domain):
         reader, writer = await asyncio.open_connection(domain, 80)

         writer.write(b'\r\n'.join([
             b'GET / HTTP/1.1',
             b'Host: %b' % domain.encode('latin-1'),
             b'Connection: close',
             b'', b''
         ]))

         async for line in reader:
             print('>>>', line)

         writer.close()

     loop = asyncio.get_event_loop()
     try:
         loop.run_until_complete(http_get('example.com'))
     finally:
         loop.close()

Similarly to asynchronous iteration, there is a new syntax for
asynchronous context managers.  The following script:

     import asyncio

     async def coro(name, lock):
         print('coro {}: waiting for lock'.format(name))
         async with lock:
             print('coro {}: holding the lock'.format(name))
             await asyncio.sleep(1)
             print('coro {}: releasing the lock'.format(name))

     loop = asyncio.get_event_loop()
     lock = asyncio.Lock()
     coros = asyncio.gather(coro(1, lock), coro(2, lock))
     try:
         loop.run_until_complete(coros)
     finally:
         loop.close()

will output:

     coro 2: waiting for lock
     coro 2: holding the lock
     coro 1: waiting for lock
     coro 2: releasing the lock
     coro 1: holding the lock
     coro 1: releasing the lock

Note that both *note async for: 1d1. and *note async with: 1d2. can only
be used inside a coroutine function declared with *note async def: 1ce.

Coroutine functions are intended to be run inside a compatible event
loop, such as the *note asyncio loop: 1d3.

See also
........

PEP 492(2) – Coroutines with async and await syntax

     PEP written and implemented by Yury Selivanov.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0492

   (2) https://www.python.org/dev/peps/pep-0492


File: python.info,  Node: PEP 465 - A dedicated infix operator for matrix multiplication,  Next: PEP 448 - Additional Unpacking Generalizations,  Prev: PEP 492 - Coroutines with async and await syntax,  Up: New Features<2>

1.2.2.2 PEP 465 - A dedicated infix operator for matrix multiplication
......................................................................

PEP 465(1) adds the ‘@’ infix operator for matrix multiplication.
Currently, no builtin Python types implement the new operator, however,
it can be implemented by defining *note __matmul__(): 1d5, *note
__rmatmul__(): 1d6, and *note __imatmul__(): 1d7. for regular,
reflected, and in-place matrix multiplication.  The semantics of these
methods is similar to that of methods defining other infix arithmetic
operators.

Matrix multiplication is a notably common operation in many fields of
mathematics, science, engineering, and the addition of ‘@’ allows
writing cleaner code:

     S = (H @ beta - r).T @ inv(H @ V @ H.T) @ (H @ beta - r)

instead of:

     S = dot((dot(H, beta) - r).T,
             dot(inv(dot(dot(H, V), H.T)), dot(H, beta) - r))

NumPy 1.10 has support for the new operator:

     >>> import numpy

     >>> x = numpy.ones(3)
     >>> x
     array([ 1., 1., 1.])

     >>> m = numpy.eye(3)
     >>> m
     array([[ 1., 0., 0.],
            [ 0., 1., 0.],
            [ 0., 0., 1.]])

     >>> x @ m
     array([ 1., 1., 1.])

See also
........

PEP 465(2) – A dedicated infix operator for matrix multiplication

     PEP written by Nathaniel J. Smith; implemented by Benjamin
     Peterson.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0465

   (2) https://www.python.org/dev/peps/pep-0465


File: python.info,  Node: PEP 448 - Additional Unpacking Generalizations,  Next: PEP 461 - % formatting support for bytes and bytearray,  Prev: PEP 465 - A dedicated infix operator for matrix multiplication,  Up: New Features<2>

1.2.2.3 PEP 448 - Additional Unpacking Generalizations
......................................................

PEP 448(1) extends the allowed uses of the ‘*’ iterable unpacking
operator and ‘**’ dictionary unpacking operator.  It is now possible to
use an arbitrary number of unpackings in function calls:

     >>> print(*[1], *[2], 3, *[4, 5])
     1 2 3 4 5

     >>> def fn(a, b, c, d):
     ...     print(a, b, c, d)
     ...

     >>> fn(**{'a': 1, 'c': 3}, **{'b': 2, 'd': 4})
     1 2 3 4

Similarly, tuple, list, set, and dictionary displays allow multiple
unpackings:

     >>> *range(4), 4
     (0, 1, 2, 3, 4)

     >>> [*range(4), 4]
     [0, 1, 2, 3, 4]

     >>> {*range(4), 4, *(5, 6, 7)}
     {0, 1, 2, 3, 4, 5, 6, 7}

     >>> {'x': 1, **{'y': 2}}
     {'x': 1, 'y': 2}

See also
........

PEP 448(2) – Additional Unpacking Generalizations

     PEP written by Joshua Landau; implemented by Neil Girdhar, Thomas
     Wouters, and Joshua Landau.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0448

   (2) https://www.python.org/dev/peps/pep-0448


File: python.info,  Node: PEP 461 - % formatting support for bytes and bytearray,  Next: PEP 484 - Type Hints,  Prev: PEP 448 - Additional Unpacking Generalizations,  Up: New Features<2>

1.2.2.4 PEP 461 - % formatting support for bytes and bytearray
..............................................................

PEP 461(1) adds support for the ‘%’ *note interpolation operator: 1da.
to *note bytes: 1db. and *note bytearray: 1dc.

While interpolation is usually thought of as a string operation, there
are cases where interpolation on ‘bytes’ or ‘bytearrays’ makes sense,
and the work needed to make up for this missing functionality detracts
from the overall readability of the code.  This issue is particularly
important when dealing with wire format protocols, which are often a
mixture of binary and ASCII compatible text.

Examples:

     >>> b'Hello %b!' % b'World'
     b'Hello World!'

     >>> b'x=%i y=%f' % (1, 2.5)
     b'x=1 y=2.500000'

Unicode is not allowed for ‘%b’, but it is accepted by ‘%a’ (equivalent
of ‘repr(obj).encode('ascii', 'backslashreplace')’):

     >>> b'Hello %b!' % 'World'
     Traceback (most recent call last):
       File "<stdin>", line 1, in <module>
     TypeError: %b requires bytes, or an object that implements __bytes__, not 'str'

     >>> b'price: %a' % '10€'
     b"price: '10\\u20ac'"

Note that ‘%s’ and ‘%r’ conversion types, although supported, should
only be used in codebases that need compatibility with Python 2.

See also
........

PEP 461(2) – Adding % formatting to bytes and bytearray

     PEP written by Ethan Furman; implemented by Neil Schemenauer and
     Ethan Furman.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0461

   (2) https://www.python.org/dev/peps/pep-0461


File: python.info,  Node: PEP 484 - Type Hints,  Next: PEP 471 - os scandir function -- a better and faster directory iterator,  Prev: PEP 461 - % formatting support for bytes and bytearray,  Up: New Features<2>

1.2.2.5 PEP 484 - Type Hints
............................

Function annotation syntax has been a Python feature since version 3.0 (
PEP 3107(1)), however the semantics of annotations has been left
undefined.

Experience has shown that the majority of function annotation uses were
to provide type hints to function parameters and return values.  It
became evident that it would be beneficial for Python users, if the
standard library included the base definitions and tools for type
annotations.

PEP 484(2) introduces a *note provisional module: 1de. to provide these
standard definitions and tools, along with some conventions for
situations where annotations are not available.

For example, here is a simple function whose argument and return type
are declared in the annotations:

     def greeting(name: str) -> str:
         return 'Hello ' + name

While these annotations are available at runtime through the usual
‘__annotations__’ attribute, `no automatic type checking happens at
runtime'.  Instead, it is assumed that a separate off-line type checker
(e.g.  mypy(3)) will be used for on-demand source code analysis.

The type system supports unions, generic types, and a special type named
*note Any: 1df. which is consistent with (i.e.  assignable to and from)
all types.

See also
........

   * *note typing: 116. module documentation

   * 
     PEP 484(4) – Type Hints

          PEP written by Guido van Rossum, Jukka Lehtosalo, and Łukasz
          Langa; implemented by Guido van Rossum.

   * 
     PEP 483(5) – The Theory of Type Hints

          PEP written by Guido van Rossum

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3107

   (2) https://www.python.org/dev/peps/pep-0484

   (3) http://mypy-lang.org

   (4) https://www.python.org/dev/peps/pep-0484

   (5) https://www.python.org/dev/peps/pep-0483


File: python.info,  Node: PEP 471 - os scandir function -- a better and faster directory iterator,  Next: PEP 475 Retry system calls failing with EINTR,  Prev: PEP 484 - Type Hints,  Up: New Features<2>

1.2.2.6 PEP 471 - os.scandir() function – a better and faster directory iterator
................................................................................

PEP 471(1) adds a new directory iteration function, *note os.scandir():
164, to the standard library.  Additionally, *note os.walk(): 1e1. is
now implemented using ‘scandir’, which makes it 3 to 5 times faster on
POSIX systems and 7 to 20 times faster on Windows systems.  This is
largely achieved by greatly reducing the number of calls to *note
os.stat(): 1e2. required to walk a directory tree.

Additionally, ‘scandir’ returns an iterator, as opposed to returning a
list of file names, which improves memory efficiency when iterating over
very large directories.

The following example shows a simple use of *note os.scandir(): 164. to
display all the files (excluding directories) in the given `path' that
don’t start with ‘'.'’.  The *note entry.is_file(): 1e3. call will
generally not make an additional system call:

     for entry in os.scandir(path):
         if not entry.name.startswith('.') and entry.is_file():
             print(entry.name)

See also
........

PEP 471(2) – os.scandir() function – a better and faster directory iterator

     PEP written and implemented by Ben Hoyt with the help of Victor
     Stinner.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0471

   (2) https://www.python.org/dev/peps/pep-0471


File: python.info,  Node: PEP 475 Retry system calls failing with EINTR,  Next: PEP 479 Change StopIteration handling inside generators,  Prev: PEP 471 - os scandir function -- a better and faster directory iterator,  Up: New Features<2>

1.2.2.7 PEP 475: Retry system calls failing with EINTR
......................................................

An *note errno.EINTR: 1e6. error code is returned whenever a system
call, that is waiting for I/O, is interrupted by a signal.  Previously,
Python would raise *note InterruptedError: 1e7. in such cases.  This
meant that, when writing a Python application, the developer had two
choices:

  1. Ignore the ‘InterruptedError’.

  2. Handle the ‘InterruptedError’ and attempt to restart the
     interrupted system call at every call site.

The first option makes an application fail intermittently.  The second
option adds a large amount of boilerplate that makes the code nearly
unreadable.  Compare:

     print("Hello World")

and:

     while True:
         try:
             print("Hello World")
             break
         except InterruptedError:
             continue

PEP 475(1) implements automatic retry of system calls on ‘EINTR’.  This
removes the burden of dealing with ‘EINTR’ or *note InterruptedError:
1e7. in user code in most situations and makes Python programs,
including the standard library, more robust.  Note that the system call
is only retried if the signal handler does not raise an exception.

Below is a list of functions which are now retried when interrupted by a
signal:

   * *note open(): 1e8. and *note io.open(): 1e9.;

   * functions of the *note faulthandler: 7b. module;

   * *note os: c2. functions: *note fchdir(): 1ea, *note fchmod(): 1eb,
     *note fchown(): 1ec, *note fdatasync(): 1ed, *note fstat(): 1ee,
     *note fstatvfs(): 1ef, *note fsync(): 1f0, *note ftruncate(): 1f1,
     *note mkfifo(): 1f2, *note mknod(): 1f3, *note open(): 1f4, *note
     posix_fadvise(): 1f5, *note posix_fallocate(): 1f6, *note pread():
     1f7, *note pwrite(): 1f8, *note read(): 1f9, *note readv(): 1fa,
     *note sendfile(): 1fb, *note wait3(): 1fc, *note wait4(): 1fd,
     *note wait(): 1fe, *note waitid(): 1ff, *note waitpid(): 200, *note
     write(): 201, *note writev(): 202.;

   * special cases: *note os.close(): 203. and *note os.dup2(): 204. now
     ignore *note EINTR: 1e6. errors; the syscall is not retried (see
     the PEP for the rationale);

   * *note select: e3. functions: *note devpoll.poll(): 205, *note
     epoll.poll(): 206, *note kqueue.control(): 207, *note poll.poll():
     208, *note select(): 209.;

   * methods of the *note socket: 20a. class: *note accept(): 20b, *note
     connect(): 20c. (except for non-blocking sockets), *note recv():
     20d, *note recvfrom(): 20e, *note recvmsg(): 20f, *note send():
     210, *note sendall(): 211, *note sendmsg(): 212, *note sendto():
     213.;

   * *note signal.sigtimedwait(): 214. and *note signal.sigwaitinfo():
     215.;

   * *note time.sleep(): 216.

See also
........

PEP 475(2) – Retry system calls failing with EINTR

     PEP and implementation written by Charles-François Natali and
     Victor Stinner, with the help of Antoine Pitrou (the French
     connection).

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0475

   (2) https://www.python.org/dev/peps/pep-0475


File: python.info,  Node: PEP 479 Change StopIteration handling inside generators,  Next: PEP 485 A function for testing approximate equality,  Prev: PEP 475 Retry system calls failing with EINTR,  Up: New Features<2>

1.2.2.8 PEP 479: Change StopIteration handling inside generators
................................................................

The interaction of generators and *note StopIteration: 191. in Python
3.4 and earlier was sometimes surprising, and could conceal obscure
bugs.  Previously, ‘StopIteration’ raised accidentally inside a
generator function was interpreted as the end of the iteration by the
loop construct driving the generator.

PEP 479(1) changes the behavior of generators: when a ‘StopIteration’
exception is raised inside a generator, it is replaced with a *note
RuntimeError: 193. before it exits the generator frame.  The main goal
of this change is to ease debugging in the situation where an unguarded
*note next(): 218. call raises ‘StopIteration’ and causes the iteration
controlled by the generator to terminate silently.  This is particularly
pernicious in combination with the ‘yield from’ construct.

This is a backwards incompatible change, so to enable the new behavior,
a *note __future__: 219. import is necessary:

     >>> from __future__ import generator_stop

     >>> def gen():
     ...     next(iter([]))
     ...     yield
     ...
     >>> next(gen())
     Traceback (most recent call last):
       File "<stdin>", line 2, in gen
     StopIteration

     The above exception was the direct cause of the following exception:

     Traceback (most recent call last):
       File "<stdin>", line 1, in <module>
     RuntimeError: generator raised StopIteration

Without a ‘__future__’ import, a *note PendingDeprecationWarning: 19e.
will be raised whenever a ‘StopIteration’ exception is raised inside a
generator.

See also
........

PEP 479(2) – Change StopIteration handling inside generators

     PEP written by Chris Angelico and Guido van Rossum.  Implemented by
     Chris Angelico, Yury Selivanov and Nick Coghlan.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0479

   (2) https://www.python.org/dev/peps/pep-0479


File: python.info,  Node: PEP 485 A function for testing approximate equality,  Next: PEP 486 Make the Python Launcher aware of virtual environments,  Prev: PEP 479 Change StopIteration handling inside generators,  Up: New Features<2>

1.2.2.9 PEP 485: A function for testing approximate equality
............................................................

PEP 485(1) adds the *note math.isclose(): 21c. and *note
cmath.isclose(): 21d. functions which tell whether two values are
approximately equal or "close" to each other.  Whether or not two values
are considered close is determined according to given absolute and
relative tolerances.  Relative tolerance is the maximum allowed
difference between ‘isclose’ arguments, relative to the larger absolute
value:

     >>> import math
     >>> a = 5.0
     >>> b = 4.99998
     >>> math.isclose(a, b, rel_tol=1e-5)
     True
     >>> math.isclose(a, b, rel_tol=1e-6)
     False

It is also possible to compare two values using absolute tolerance,
which must be a non-negative value:

     >>> import math
     >>> a = 5.0
     >>> b = 4.99998
     >>> math.isclose(a, b, abs_tol=0.00003)
     True
     >>> math.isclose(a, b, abs_tol=0.00001)
     False

See also
........

PEP 485(2) – A function for testing approximate equality

     PEP written by Christopher Barker; implemented by Chris Barker and
     Tal Einat.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0485

   (2) https://www.python.org/dev/peps/pep-0485


File: python.info,  Node: PEP 486 Make the Python Launcher aware of virtual environments,  Next: PEP 488 Elimination of PYO files,  Prev: PEP 485 A function for testing approximate equality,  Up: New Features<2>

1.2.2.10 PEP 486: Make the Python Launcher aware of virtual environments
........................................................................

PEP 486(1) makes the Windows launcher (see PEP 397(2)) aware of an
active virtual environment.  When the default interpreter would be used
and the ‘VIRTUAL_ENV’ environment variable is set, the interpreter in
the virtual environment will be used.

See also
........

PEP 486(3) – Make the Python Launcher aware of virtual environments

     PEP written and implemented by Paul Moore.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0486

   (2) https://www.python.org/dev/peps/pep-0397

   (3) https://www.python.org/dev/peps/pep-0486


File: python.info,  Node: PEP 488 Elimination of PYO files,  Next: PEP 489 Multi-phase extension module initialization,  Prev: PEP 486 Make the Python Launcher aware of virtual environments,  Up: New Features<2>

1.2.2.11 PEP 488: Elimination of PYO files
..........................................

PEP 488(1) does away with the concept of ‘.pyo’ files.  This means that
‘.pyc’ files represent both unoptimized and optimized bytecode.  To
prevent the need to constantly regenerate bytecode files, ‘.pyc’ files
now have an optional ‘opt-’ tag in their name when the bytecode is
optimized.  This has the side-effect of no more bytecode file name
clashes when running under either *note -O: 221. or *note -OO: 222.
Consequently, bytecode files generated from *note -O: 221, and *note
-OO: 222. may now exist simultaneously.  *note
importlib.util.cache_from_source(): 223. has an updated API to help with
this change.

See also
........

PEP 488(2) – Elimination of PYO files

     PEP written and implemented by Brett Cannon.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0488

   (2) https://www.python.org/dev/peps/pep-0488


File: python.info,  Node: PEP 489 Multi-phase extension module initialization,  Prev: PEP 488 Elimination of PYO files,  Up: New Features<2>

1.2.2.12 PEP 489: Multi-phase extension module initialization
.............................................................

PEP 489(1) updates extension module initialization to take advantage of
the two step module loading mechanism introduced by PEP 451(2) in Python
3.4.

This change brings the import semantics of extension modules that opt-in
to using the new mechanism much closer to those of Python source and
bytecode modules, including the ability to use any valid identifier as a
module name, rather than being restricted to ASCII.

See also
........

PEP 489(3) – Multi-phase extension module initialization

     PEP written by Petr Viktorin, Stefan Behnel, and Nick Coghlan;
     implemented by Petr Viktorin.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0489

   (2) https://www.python.org/dev/peps/pep-0451

   (3) https://www.python.org/dev/peps/pep-0489


File: python.info,  Node: Other Language Changes<2>,  Next: New Modules<2>,  Prev: New Features<2>,  Up: What's New In Python 3 5

1.2.3 Other Language Changes
----------------------------

Some smaller changes made to the core Python language are:

   * Added the ‘"namereplace"’ error handlers.  The ‘"backslashreplace"’
     error handlers now work with decoding and translating.
     (Contributed by Serhiy Storchaka in issue 19676(1) and issue
     22286(2).)

   * The *note -b: 226. option now affects comparisons of *note bytes:
     1db. with *note int: 227.  (Contributed by Serhiy Storchaka in
     issue 23681(3).)

   * New Kazakh ‘kz1048’ and Tajik ‘koi8_t’ *note codecs: 228.
     (Contributed by Serhiy Storchaka in issue 22682(4) and issue
     22681(5).)

   * Property docstrings are now writable.  This is especially useful
     for *note collections.namedtuple(): 229. docstrings.  (Contributed
     by Berker Peksag in issue 24064(6).)

   * Circular imports involving relative imports are now supported.
     (Contributed by Brett Cannon and Antoine Pitrou in issue 17636(7).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue19676

   (2) https://bugs.python.org/issue22286

   (3) https://bugs.python.org/issue23681

   (4) https://bugs.python.org/issue22682

   (5) https://bugs.python.org/issue22681

   (6) https://bugs.python.org/issue24064

   (7) https://bugs.python.org/issue17636


File: python.info,  Node: New Modules<2>,  Next: Improved Modules<2>,  Prev: Other Language Changes<2>,  Up: What's New In Python 3 5

1.2.4 New Modules
-----------------

* Menu:

* typing: typing<2>. 
* zipapp:: 


File: python.info,  Node: typing<2>,  Next: zipapp,  Up: New Modules<2>

1.2.4.1 typing
..............

The new *note typing: 116. *note provisional: 1de. module provides
standard definitions and tools for function type annotations.  See *note
Type Hints: 1b1. for more information.


File: python.info,  Node: zipapp,  Prev: typing<2>,  Up: New Modules<2>

1.2.4.2 zipapp
..............

The new *note zipapp: 13e. module (specified in PEP 441(1)) provides an
API and command line tool for creating executable Python Zip
Applications, which were introduced in Python 2.6 in issue 1739468(2),
but which were not well publicized, either at the time or since.

With the new module, bundling your application is as simple as putting
all the files, including a ‘__main__.py’ file, into a directory ‘myapp’
and running:

     $ python -m zipapp myapp
     $ python myapp.pyz

The module implementation has been contributed by Paul Moore in issue
23491(3).

See also
........

PEP 441(4) – Improving Python ZIP Application Support

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0441

   (2) https://bugs.python.org/issue1739468

   (3) https://bugs.python.org/issue23491

   (4) https://www.python.org/dev/peps/pep-0441


File: python.info,  Node: Improved Modules<2>,  Next: Other module-level changes,  Prev: New Modules<2>,  Up: What's New In Python 3 5

1.2.5 Improved Modules
----------------------

* Menu:

* argparse:: 
* asyncio:: 
* bz2:: 
* cgi:: 
* cmath:: 
* code:: 
* collections:: 
* collections.abc: collections abc. 
* compileall:: 
* concurrent.futures: concurrent futures. 
* configparser:: 
* contextlib: contextlib<2>. 
* csv:: 
* curses:: 
* dbm:: 
* difflib:: 
* distutils:: 
* doctest:: 
* email:: 
* enum:: 
* faulthandler: faulthandler<2>. 
* functools:: 
* glob:: 
* gzip:: 
* heapq:: 
* http:: 
* http.client: http client. 
* idlelib and IDLE:: 
* imaplib:: 
* imghdr:: 
* importlib:: 
* inspect:: 
* io:: 
* ipaddress:: 
* json:: 
* linecache:: 
* locale:: 
* logging:: 
* lzma:: 
* math:: 
* multiprocessing:: 
* operator:: 
* os: os<2>. 
* pathlib:: 
* pickle: pickle<2>. 
* poplib:: 
* re:: 
* readline:: 
* selectors:: 
* shutil:: 
* signal:: 
* smtpd:: 
* smtplib:: 
* sndhdr:: 
* socket:: 
* ssl:: 
* sqlite3:: 
* subprocess:: 
* sys:: 
* sysconfig:: 
* tarfile:: 
* threading:: 
* time:: 
* timeit:: 
* tkinter:: 
* traceback:: 
* types:: 
* unicodedata:: 
* unittest:: 
* unittest.mock: unittest mock<2>. 
* urllib:: 
* wsgiref:: 
* xmlrpc:: 
* xml.sax: xml sax. 
* zipfile: zipfile<2>. 


File: python.info,  Node: argparse,  Next: asyncio,  Up: Improved Modules<2>

1.2.5.1 argparse
................

The *note ArgumentParser: 22f. class now allows disabling *note
abbreviated usage: 230. of long options by setting *note allow_abbrev:
231. to ‘False’.  (Contributed by Jonathan Paugh, Steven Bethard, paul
j3 and Daniel Eriksson in issue 14910(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue14910


File: python.info,  Node: asyncio,  Next: bz2,  Prev: argparse,  Up: Improved Modules<2>

1.2.5.2 asyncio
...............

Since the *note asyncio: a. module is *note provisional: 1de, all
changes introduced in Python 3.5 have also been backported to Python
3.4.x.

Notable changes in the *note asyncio: a. module since Python 3.4.0:

   * New debugging APIs: *note loop.set_debug(): 233. and *note
     loop.get_debug(): 234. methods.  (Contributed by Victor Stinner.)

   * The proactor event loop now supports SSL. (Contributed by Antoine
     Pitrou and Victor Stinner in issue 22560(1).)

   * A new *note loop.is_closed(): 235. method to check if the event
     loop is closed.  (Contributed by Victor Stinner in issue 21326(2).)

   * A new *note loop.create_task(): 236. to conveniently create and
     schedule a new *note Task: 237. for a coroutine.  The ‘create_task’
     method is also used by all asyncio functions that wrap coroutines
     into tasks, such as *note asyncio.wait(): 238, *note
     asyncio.gather(): 239, etc.  (Contributed by Victor Stinner.)

   * A new *note transport.get_write_buffer_limits(): 23a. method to
     inquire for `high-' and `low-' water limits of the flow control.
     (Contributed by Victor Stinner.)

   * The *note async(): 23b. function is deprecated in favor of *note
     ensure_future(): 23c.  (Contributed by Yury Selivanov.)

   * New *note loop.set_task_factory(): 23d. and *note
     loop.set_task_factory(): 23e. methods to customize the task factory
     that *note loop.create_task(): 236. method uses.  (Contributed by
     Yury Selivanov.)

   * New *note Queue.join(): 23f. and *note Queue.task_done(): 240.
     queue methods.  (Contributed by Victor Stinner.)

   * The ‘JoinableQueue’ class was removed, in favor of the *note
     asyncio.Queue: 241. class.  (Contributed by Victor Stinner.)

Updates in 3.5.1:

   * The *note ensure_future(): 23c. function and all functions that use
     it, such as *note loop.run_until_complete(): 242, now accept all
     kinds of *note awaitable objects: 1ca.  (Contributed by Yury
     Selivanov.)

   * New *note run_coroutine_threadsafe(): 243. function to submit
     coroutines to event loops from other threads.  (Contributed by
     Vincent Michel.)

   * New *note Transport.is_closing(): 244. method to check if the
     transport is closing or closed.  (Contributed by Yury Selivanov.)

   * The *note loop.create_server(): 245. method can now accept a list
     of hosts.  (Contributed by Yann Sionneau.)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue22560

   (2) https://bugs.python.org/issue21326


File: python.info,  Node: bz2,  Next: cgi,  Prev: asyncio,  Up: Improved Modules<2>

1.2.5.3 bz2
...........

The *note BZ2Decompressor.decompress: 247. method now accepts an
optional `max_length' argument to limit the maximum size of decompressed
data.  (Contributed by Nikolaus Rath in issue 15955(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue15955


File: python.info,  Node: cgi,  Next: cmath,  Prev: bz2,  Up: Improved Modules<2>

1.2.5.4 cgi
...........

The ‘FieldStorage’ class now supports the *note context manager: 165.
protocol.  (Contributed by Berker Peksag in issue 20289(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue20289


File: python.info,  Node: cmath,  Next: code,  Prev: cgi,  Up: Improved Modules<2>

1.2.5.5 cmath
.............

A new function *note isclose(): 21d. provides a way to test for
approximate equality.  (Contributed by Chris Barker and Tal Einat in
issue 24270(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue24270


File: python.info,  Node: code,  Next: collections,  Prev: cmath,  Up: Improved Modules<2>

1.2.5.6 code
............

The *note InteractiveInterpreter.showtraceback(): 24b. method now prints
the full chained traceback, just like the interactive interpreter.
(Contributed by Claudiu Popa in issue 17442(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue17442


File: python.info,  Node: collections,  Next: collections abc,  Prev: code,  Up: Improved Modules<2>

1.2.5.7 collections
...................

The *note OrderedDict: 1bd. class is now implemented in C, which makes
it 4 to 100 times faster.  (Contributed by Eric Snow in issue 16991(1).)

‘OrderedDict.items()’, ‘OrderedDict.keys()’, ‘OrderedDict.values()’
views now support *note reversed(): 24d. iteration.  (Contributed by
Serhiy Storchaka in issue 19505(2).)

The *note deque: 24e. class now defines *note index(): 24f, *note
insert(): 250, and *note copy(): 251, and supports the ‘+’ and ‘*’
operators.  This allows deques to be recognized as a *note
MutableSequence: 252. and improves their substitutability for lists.
(Contributed by Raymond Hettinger in issue 23704(3).)

Docstrings produced by *note namedtuple(): 229. can now be updated:

     Point = namedtuple('Point', ['x', 'y'])
     Point.__doc__ += ': Cartesian coodinate'
     Point.x.__doc__ = 'abscissa'
     Point.y.__doc__ = 'ordinate'

(Contributed by Berker Peksag in issue 24064(4).)

The *note UserString: 253. class now implements the *note
__getnewargs__(): 254, *note __rmod__(): 255, *note casefold(): 256,
*note format_map(): 257, *note isprintable(): 258, and *note
maketrans(): 259. methods to match the corresponding methods of *note
str: 25a.  (Contributed by Joe Jevnik in issue 22189(5).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue16991

   (2) https://bugs.python.org/issue19505

   (3) https://bugs.python.org/issue23704

   (4) https://bugs.python.org/issue24064

   (5) https://bugs.python.org/issue22189


File: python.info,  Node: collections abc,  Next: compileall,  Prev: collections,  Up: Improved Modules<2>

1.2.5.8 collections.abc
.......................

The ‘Sequence.index()’ method now accepts `start' and `stop' arguments
to match the corresponding methods of *note tuple: 25c, *note list: 25d,
etc.  (Contributed by Devin Jeanpierre in issue 23086(1).)

A new *note Generator: 25e. abstract base class.  (Contributed by Stefan
Behnel in issue 24018(2).)

New *note Awaitable: 25f, *note Coroutine: 260, *note AsyncIterator:
261, and *note AsyncIterable: 262. abstract base classes.  (Contributed
by Yury Selivanov in issue 24184(3).)

For earlier Python versions, a backport of the new ABCs is available in
an external PyPI package(4).

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue23086

   (2) https://bugs.python.org/issue24018

   (3) https://bugs.python.org/issue24184

   (4) https://pypi.python.org/pypi/backports_abc


File: python.info,  Node: compileall,  Next: concurrent futures,  Prev: collections abc,  Up: Improved Modules<2>

1.2.5.9 compileall
..................

A new *note compileall: 21. option, ‘-j `N'’, allows running `N' workers
simultaneously to perform parallel bytecode compilation.  The *note
compile_dir(): 264. function has a corresponding ‘workers’ parameter.
(Contributed by Claudiu Popa in issue 16104(1).)

Another new option, ‘-r’, allows controlling the maximum recursion level
for subdirectories.  (Contributed by Claudiu Popa in issue 19628(2).)

The ‘-q’ command line option can now be specified more than once, in
which case all output, including errors, will be suppressed.  The
corresponding ‘quiet’ parameter in *note compile_dir(): 264, *note
compile_file(): 265, and *note compile_path(): 266. can now accept an
integer value indicating the level of output suppression.  (Contributed
by Thomas Kluyver in issue 21338(3).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue16104

   (2) https://bugs.python.org/issue19628

   (3) https://bugs.python.org/issue21338


File: python.info,  Node: concurrent futures,  Next: configparser,  Prev: compileall,  Up: Improved Modules<2>

1.2.5.10 concurrent.futures
...........................

The *note Executor.map(): 268. method now accepts a `chunksize' argument
to allow batching of tasks to improve performance when *note
ProcessPoolExecutor(): 269. is used.  (Contributed by Dan O’Reilly in
issue 11271(1).)

The number of workers in the *note ThreadPoolExecutor: 26a. constructor
is optional now.  The default value is 5 times the number of CPUs.
(Contributed by Claudiu Popa in issue 21527(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue11271

   (2) https://bugs.python.org/issue21527


File: python.info,  Node: configparser,  Next: contextlib<2>,  Prev: concurrent futures,  Up: Improved Modules<2>

1.2.5.11 configparser
.....................

*note configparser: 23. now provides a way to customize the conversion
of values by specifying a dictionary of converters in the *note
ConfigParser: 26c. constructor, or by defining them as methods in
‘ConfigParser’ subclasses.  Converters defined in a parser instance are
inherited by its section proxies.

Example:

     >>> import configparser
     >>> conv = {}
     >>> conv['list'] = lambda v: [e.strip() for e in v.split() if e.strip()]
     >>> cfg = configparser.ConfigParser(converters=conv)
     >>> cfg.read_string("""
     ... [s]
     ... list = a b c d e f g
     ... """)
     >>> cfg.get('s', 'list')
     'a b c d e f g'
     >>> cfg.getlist('s', 'list')
     ['a', 'b', 'c', 'd', 'e', 'f', 'g']
     >>> section = cfg['s']
     >>> section.getlist('list')
     ['a', 'b', 'c', 'd', 'e', 'f', 'g']

(Contributed by Łukasz Langa in issue 18159(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue18159


File: python.info,  Node: contextlib<2>,  Next: csv,  Prev: configparser,  Up: Improved Modules<2>

1.2.5.12 contextlib
...................

The new *note redirect_stderr(): 26e. *note context manager: 165.
(similar to *note redirect_stdout(): 26f.) makes it easier for utility
scripts to handle inflexible APIs that write their output to *note
sys.stderr: 270. and don’t provide any options to redirect it:

     >>> import contextlib, io, logging
     >>> f = io.StringIO()
     >>> with contextlib.redirect_stderr(f):
     ...     logging.warning('warning')
     ...
     >>> f.getvalue()
     'WARNING:root:warning\n'

(Contributed by Berker Peksag in issue 22389(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue22389


File: python.info,  Node: csv,  Next: curses,  Prev: contextlib<2>,  Up: Improved Modules<2>

1.2.5.13 csv
............

The *note writerow(): 272. method now supports arbitrary iterables, not
just sequences.  (Contributed by Serhiy Storchaka in issue 23171(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue23171


File: python.info,  Node: curses,  Next: dbm,  Prev: csv,  Up: Improved Modules<2>

1.2.5.14 curses
...............

The new *note update_lines_cols(): 274. function updates the ‘LINES’ and
‘COLS’ environment variables.  This is useful for detecting manual
screen resizing.  (Contributed by Arnon Yaari in issue 4254(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue4254


File: python.info,  Node: dbm,  Next: difflib,  Prev: curses,  Up: Improved Modules<2>

1.2.5.15 dbm
............

*note dumb.open: 276. always creates a new database when the flag has
the value ‘"n"’.  (Contributed by Claudiu Popa in issue 18039(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue18039


File: python.info,  Node: difflib,  Next: distutils,  Prev: dbm,  Up: Improved Modules<2>

1.2.5.16 difflib
................

The charset of HTML documents generated by *note HtmlDiff.make_file():
278. can now be customized by using a new `charset' keyword-only
argument.  The default charset of HTML document changed from
‘"ISO-8859-1"’ to ‘"utf-8"’.  (Contributed by Berker Peksag in issue
2052(1).)

The *note diff_bytes(): 279. function can now compare lists of byte
strings.  This fixes a regression from Python 2.  (Contributed by Terry
J. Reedy and Greg Ward in issue 17445(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue2052

   (2) https://bugs.python.org/issue17445


File: python.info,  Node: distutils,  Next: doctest,  Prev: difflib,  Up: Improved Modules<2>

1.2.5.17 distutils
..................

Both the ‘build’ and ‘build_ext’ commands now accept a ‘-j’ option to
enable parallel building of extension modules.  (Contributed by Antoine
Pitrou in issue 5309(1).)

The *note distutils: 37. module now supports ‘xz’ compression, and can
be enabled by passing ‘xztar’ as an argument to ‘bdist --format’.
(Contributed by Serhiy Storchaka in issue 16314(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue5309

   (2) https://bugs.python.org/issue16314


File: python.info,  Node: doctest,  Next: email,  Prev: distutils,  Up: Improved Modules<2>

1.2.5.18 doctest
................

The *note DocTestSuite(): 27c. function returns an empty *note
unittest.TestSuite: 27d. if `module' contains no docstrings, instead of
raising *note ValueError: 19c.  (Contributed by Glenn Jones in issue
15916(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue15916


File: python.info,  Node: email,  Next: enum,  Prev: doctest,  Up: Improved Modules<2>

1.2.5.19 email
..............

A new policy option *note Policy.mangle_from_: 27f. controls whether or
not lines that start with ‘"From "’ in email bodies are prefixed with a
‘">"’ character by generators.  The default is ‘True’ for *note
compat32: 280. and ‘False’ for all other policies.  (Contributed by
Milan Oberkirch in issue 20098(1).)

A new *note Message.get_content_disposition(): 281. method provides easy
access to a canonical value for the ‘Content-Disposition’ header.
(Contributed by Abhilash Raj in issue 21083(2).)

A new policy option *note EmailPolicy.utf8: 282. can be set to ‘True’ to
encode email headers using the UTF-8 charset instead of using encoded
words.  This allows ‘Messages’ to be formatted according to RFC 6532(3)
and used with an SMTP server that supports the RFC 6531(4) ‘SMTPUTF8’
extension.  (Contributed by R. David Murray in issue 24211(5).)

The *note mime.text.MIMEText: 283. constructor now accepts a *note
charset.Charset: 284. instance.  (Contributed by Claude Paroz and Berker
Peksag in issue 16324(6).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue20098

   (2) https://bugs.python.org/issue21083

   (3) https://tools.ietf.org/html/rfc6532.html

   (4) https://tools.ietf.org/html/rfc6531.html

   (5) https://bugs.python.org/issue24211

   (6) https://bugs.python.org/issue16324


File: python.info,  Node: enum,  Next: faulthandler<2>,  Prev: email,  Up: Improved Modules<2>

1.2.5.20 enum
.............

The *note Enum: 286. callable has a new parameter `start' to specify the
initial number of enum values if only `names' are provided:

     >>> Animal = enum.Enum('Animal', 'cat dog', start=10)
     >>> Animal.cat
     <Animal.cat: 10>
     >>> Animal.dog
     <Animal.dog: 11>

(Contributed by Ethan Furman in issue 21706(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue21706


File: python.info,  Node: faulthandler<2>,  Next: functools,  Prev: enum,  Up: Improved Modules<2>

1.2.5.21 faulthandler
.....................

The *note enable(): 161, *note register(): 288, *note dump_traceback():
289. and *note dump_traceback_later(): 28a. functions now accept file
descriptors in addition to file-like objects.  (Contributed by Wei Wu in
issue 23566(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue23566


File: python.info,  Node: functools,  Next: glob,  Prev: faulthandler<2>,  Up: Improved Modules<2>

1.2.5.22 functools
..................

Most of the *note lru_cache(): 1c1. machinery is now implemented in C,
making it significantly faster.  (Contributed by Matt Joiner, Alexey
Kachayev, and Serhiy Storchaka in issue 14373(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue14373


File: python.info,  Node: glob,  Next: gzip,  Prev: functools,  Up: Improved Modules<2>

1.2.5.23 glob
.............

The *note iglob(): 28d. and *note glob(): 28e. functions now support
recursive search in subdirectories, using the ‘"**"’ pattern.
(Contributed by Serhiy Storchaka in issue 13968(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue13968


File: python.info,  Node: gzip,  Next: heapq,  Prev: glob,  Up: Improved Modules<2>

1.2.5.24 gzip
.............

The `mode' argument of the *note GzipFile: 290. constructor now accepts
‘"x"’ to request exclusive creation.  (Contributed by Tim Heaney in
issue 19222(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue19222


File: python.info,  Node: heapq,  Next: http,  Prev: gzip,  Up: Improved Modules<2>

1.2.5.25 heapq
..............

Element comparison in *note merge(): 292. can now be customized by
passing a *note key function: 293. in a new optional `key' keyword
argument, and a new optional `reverse' keyword argument can be used to
reverse element comparison:

     >>> import heapq
     >>> a = ['9', '777', '55555']
     >>> b = ['88', '6666']
     >>> list(heapq.merge(a, b, key=len))
     ['9', '88', '777', '6666', '55555']
     >>> list(heapq.merge(reversed(a), reversed(b), key=len, reverse=True))
     ['55555', '6666', '777', '88', '9']

(Contributed by Raymond Hettinger in issue 13742(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue13742


File: python.info,  Node: http,  Next: http client,  Prev: heapq,  Up: Improved Modules<2>

1.2.5.26 http
.............

A new *note HTTPStatus: 295. enum that defines a set of HTTP status
codes, reason phrases and long descriptions written in English.
(Contributed by Demian Brecht in issue 21793(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue21793


File: python.info,  Node: http client,  Next: idlelib and IDLE,  Prev: http,  Up: Improved Modules<2>

1.2.5.27 http.client
....................

*note HTTPConnection.getresponse(): 297. now raises a *note
RemoteDisconnected: 298. exception when a remote server connection is
closed unexpectedly.  Additionally, if a *note ConnectionError: 299. (of
which ‘RemoteDisconnected’ is a subclass) is raised, the client socket
is now closed automatically, and will reconnect on the next request:

     import http.client
     conn = http.client.HTTPConnection('www.python.org')
     for retries in range(3):
         try:
             conn.request('GET', '/')
             resp = conn.getresponse()
         except http.client.RemoteDisconnected:
             pass

(Contributed by Martin Panter in issue 3566(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue3566


File: python.info,  Node: idlelib and IDLE,  Next: imaplib,  Prev: http client,  Up: Improved Modules<2>

1.2.5.28 idlelib and IDLE
.........................

Since idlelib implements the IDLE shell and editor and is not intended
for import by other programs, it gets improvements with every release.
See ‘Lib/idlelib/NEWS.txt’ for a cumulative list of changes since 3.4.0,
as well as changes made in future 3.5.x releases.  This file is also
available from the IDLE Help ‣ About IDLE dialog.


File: python.info,  Node: imaplib,  Next: imghdr,  Prev: idlelib and IDLE,  Up: Improved Modules<2>

1.2.5.29 imaplib
................

The *note IMAP4: 29c. class now supports the *note context manager: 165.
protocol.  When used in a *note with: 29d. statement, the IMAP4 ‘LOGOUT’
command will be called automatically at the end of the block.
(Contributed by Tarek Ziadé and Serhiy Storchaka in issue 4972(1).)

The *note imaplib: 97. module now supports RFC 5161(2) (ENABLE
Extension) and RFC 6855(3) (UTF-8 Support) via the *note IMAP4.enable():
29e. method.  A new *note IMAP4.utf8_enabled: 29f. attribute tracks
whether or not RFC 6855(4) support is enabled.  (Contributed by Milan
Oberkirch, R. David Murray, and Maciej Szulik in issue 21800(5).)

The *note imaplib: 97. module now automatically encodes non-ASCII string
usernames and passwords using UTF-8, as recommended by the RFCs.
(Contributed by Milan Oberkirch in issue 21800(6).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue4972

   (2) https://tools.ietf.org/html/rfc5161.html

   (3) https://tools.ietf.org/html/rfc6855.html

   (4) https://tools.ietf.org/html/rfc6855.html

   (5) https://bugs.python.org/issue21800

   (6) https://bugs.python.org/issue21800


File: python.info,  Node: imghdr,  Next: importlib,  Prev: imaplib,  Up: Improved Modules<2>

1.2.5.30 imghdr
...............

The *note what(): 2a1. function now recognizes the OpenEXR(1) format
(contributed by Martin Vignali and Claudiu Popa in issue 20295(2)), and
the WebP(3) format (contributed by Fabrice Aneche and Claudiu Popa in
issue 20197(4).)

   ---------- Footnotes ----------

   (1) http://www.openexr.com

   (2) https://bugs.python.org/issue20295

   (3) https://en.wikipedia.org/wiki/WebP

   (4) https://bugs.python.org/issue20197


File: python.info,  Node: importlib,  Next: inspect,  Prev: imghdr,  Up: Improved Modules<2>

1.2.5.31 importlib
..................

The *note util.LazyLoader: 2a3. class allows for lazy loading of modules
in applications where startup time is important.  (Contributed by Brett
Cannon in issue 17621(1).)

The *note abc.InspectLoader.source_to_code(): 2a4. method is now a
static method.  This makes it easier to initialize a module object with
code compiled from a string by running ‘exec(code, module.__dict__)’.
(Contributed by Brett Cannon in issue 21156(2).)

The new *note util.module_from_spec(): 2a5. function is now the
preferred way to create a new module.  As opposed to creating a *note
types.ModuleType: 2a6. instance directly, this new function will set the
various import-controlled attributes based on the passed-in spec object.
(Contributed by Brett Cannon in issue 20383(3).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue17621

   (2) https://bugs.python.org/issue21156

   (3) https://bugs.python.org/issue20383


File: python.info,  Node: inspect,  Next: io,  Prev: importlib,  Up: Improved Modules<2>

1.2.5.32 inspect
................

Both the *note Signature: 2a8. and *note Parameter: 2a9. classes are now
picklable and hashable.  (Contributed by Yury Selivanov in issue
20726(1) and issue 20334(2).)

A new *note BoundArguments.apply_defaults(): 2aa. method provides a way
to set default values for missing arguments:

     >>> def foo(a, b='ham', *args): pass
     >>> ba = inspect.signature(foo).bind('spam')
     >>> ba.apply_defaults()
     >>> ba.arguments
     OrderedDict([('a', 'spam'), ('b', 'ham'), ('args', ())])

(Contributed by Yury Selivanov in issue 24190(3).)

A new class method *note Signature.from_callable(): 2ab. makes
subclassing of *note Signature: 2a8. easier.  (Contributed by Yury
Selivanov and Eric Snow in issue 17373(4).)

The *note signature(): 2ac. function now accepts a `follow_wrapped'
optional keyword argument, which, when set to ‘False’, disables
automatic following of ‘__wrapped__’ links.  (Contributed by Yury
Selivanov in issue 20691(5).)

A set of new functions to inspect *note coroutine functions: 1cb. and
*note coroutine objects: 2ad. has been added: *note iscoroutine(): 2ae,
*note iscoroutinefunction(): 2af, *note isawaitable(): 2b0, *note
getcoroutinelocals(): 2b1, and *note getcoroutinestate(): 2b2.
(Contributed by Yury Selivanov in issue 24017(6) and issue 24400(7).)

The *note stack(): 2b3, *note trace(): 2b4, *note getouterframes(): 2b5,
and *note getinnerframes(): 2b6. functions now return a list of named
tuples.  (Contributed by Daniel Shahaf in issue 16808(8).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue20726

   (2) https://bugs.python.org/issue20334

   (3) https://bugs.python.org/issue24190

   (4) https://bugs.python.org/issue17373

   (5) https://bugs.python.org/issue20691

   (6) https://bugs.python.org/issue24017

   (7) https://bugs.python.org/issue24400

   (8) https://bugs.python.org/issue16808


File: python.info,  Node: io,  Next: ipaddress,  Prev: inspect,  Up: Improved Modules<2>

1.2.5.33 io
...........

A new *note BufferedIOBase.readinto1(): 2b8. method, that uses at most
one call to the underlying raw stream’s *note RawIOBase.read(): 2b9. or
*note RawIOBase.readinto(): 2ba. methods.  (Contributed by Nikolaus Rath
in issue 20578(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue20578


File: python.info,  Node: ipaddress,  Next: json,  Prev: io,  Up: Improved Modules<2>

1.2.5.34 ipaddress
..................

Both the *note IPv4Network: 2bc. and *note IPv6Network: 2bd. classes now
accept an ‘(address, netmask)’ tuple argument, so as to easily construct
network objects from existing addresses:

     >>> import ipaddress
     >>> ipaddress.IPv4Network(('127.0.0.0', 8))
     IPv4Network('127.0.0.0/8')
     >>> ipaddress.IPv4Network(('127.0.0.0', '255.0.0.0'))
     IPv4Network('127.0.0.0/8')

(Contributed by Peter Moody and Antoine Pitrou in issue 16531(1).)

A new ‘reverse_pointer’ attribute for the *note IPv4Network: 2bc. and
*note IPv6Network: 2bd. classes returns the name of the reverse DNS PTR
record:

     >>> import ipaddress
     >>> addr = ipaddress.IPv4Address('127.0.0.1')
     >>> addr.reverse_pointer
     '1.0.0.127.in-addr.arpa'
     >>> addr6 = ipaddress.IPv6Address('::1')
     >>> addr6.reverse_pointer
     '1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.ip6.arpa'

(Contributed by Leon Weber in issue 20480(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue16531

   (2) https://bugs.python.org/issue20480


File: python.info,  Node: json,  Next: linecache,  Prev: ipaddress,  Up: Improved Modules<2>

1.2.5.35 json
.............

The *note json.tool: a3. command line interface now preserves the order
of keys in JSON objects passed in input.  The new ‘--sort-keys’ option
can be used to sort the keys alphabetically.  (Contributed by Berker
Peksag in issue 21650(1).)

JSON decoder now raises *note JSONDecodeError: 2bf. instead of *note
ValueError: 19c. to provide better context information about the error.
(Contributed by Serhiy Storchaka in issue 19361(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue21650

   (2) https://bugs.python.org/issue19361


File: python.info,  Node: linecache,  Next: locale,  Prev: json,  Up: Improved Modules<2>

1.2.5.36 linecache
..................

A new *note lazycache(): 2c1. function can be used to capture
information about a non-file-based module to permit getting its lines
later via *note getline(): 2c2.  This avoids doing I/O until a line is
actually needed, without having to carry the module globals around
indefinitely.  (Contributed by Robert Collins in issue 17911(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue17911


File: python.info,  Node: locale,  Next: logging,  Prev: linecache,  Up: Improved Modules<2>

1.2.5.37 locale
...............

A new *note delocalize(): 2c4. function can be used to convert a string
into a normalized number string, taking the ‘LC_NUMERIC’ settings into
account:

     >>> import locale
     >>> locale.setlocale(locale.LC_NUMERIC, 'de_DE.UTF-8')
     'de_DE.UTF-8'
     >>> locale.delocalize('1.234,56')
     '1234.56'
     >>> locale.setlocale(locale.LC_NUMERIC, 'en_US.UTF-8')
     'en_US.UTF-8'
     >>> locale.delocalize('1,234.56')
     '1234.56'

(Contributed by Cédric Krier in issue 13918(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue13918


File: python.info,  Node: logging,  Next: lzma,  Prev: locale,  Up: Improved Modules<2>

1.2.5.38 logging
................

All logging methods (*note Logger: 2c6. *note log(): 2c7, *note
exception(): 2c8, *note critical(): 2c9, *note debug(): 2ca, etc.), now
accept exception instances as an `exc_info' argument, in addition to
boolean values and exception tuples:

     >>> import logging
     >>> try:
     ...     1/0
     ... except ZeroDivisionError as ex:
     ...     logging.error('exception', exc_info=ex)
     ERROR:root:exception

(Contributed by Yury Selivanov in issue 20537(1).)

The *note handlers.HTTPHandler: 2cb. class now accepts an optional *note
ssl.SSLContext: 1c6. instance to configure SSL settings used in an HTTP
connection.  (Contributed by Alex Gaynor in issue 22788(2).)

The *note handlers.QueueListener: 2cc. class now takes a
`respect_handler_level' keyword argument which, if set to ‘True’, will
pass messages to handlers taking handler levels into account.
(Contributed by Vinay Sajip.)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue20537

   (2) https://bugs.python.org/issue22788


File: python.info,  Node: lzma,  Next: math,  Prev: logging,  Up: Improved Modules<2>

1.2.5.39 lzma
.............

The *note LZMADecompressor.decompress(): 2ce. method now accepts an
optional `max_length' argument to limit the maximum size of decompressed
data.  (Contributed by Martin Panter in issue 15955(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue15955


File: python.info,  Node: math,  Next: multiprocessing,  Prev: lzma,  Up: Improved Modules<2>

1.2.5.40 math
.............

Two new constants have been added to the *note math: b0. module: *note
inf: 2d0. and *note nan: 2d1.  (Contributed by Mark Dickinson in issue
23185(1).)

A new function *note isclose(): 21c. provides a way to test for
approximate equality.  (Contributed by Chris Barker and Tal Einat in
issue 24270(2).)

A new *note gcd(): 2d2. function has been added.  The *note
fractions.gcd(): 2d3. function is now deprecated.  (Contributed by Mark
Dickinson and Serhiy Storchaka in issue 22486(3).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue23185

   (2) https://bugs.python.org/issue24270

   (3) https://bugs.python.org/issue22486


File: python.info,  Node: multiprocessing,  Next: operator,  Prev: math,  Up: Improved Modules<2>

1.2.5.41 multiprocessing
........................

*note sharedctypes.synchronized(): 2d5. objects now support the *note
context manager: 165. protocol.  (Contributed by Charles-François Natali
in issue 21565(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue21565


File: python.info,  Node: operator,  Next: os<2>,  Prev: multiprocessing,  Up: Improved Modules<2>

1.2.5.42 operator
.................

*note attrgetter(): 2d7, *note itemgetter(): 2d8, and *note
methodcaller(): 2d9. objects now support pickling.  (Contributed by Josh
Rosenberg and Serhiy Storchaka in issue 22955(1).)

New *note matmul(): 2da. and *note imatmul(): 2db. functions to perform
matrix multiplication.  (Contributed by Benjamin Peterson in issue
21176(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue22955

   (2) https://bugs.python.org/issue21176


File: python.info,  Node: os<2>,  Next: pathlib,  Prev: operator,  Up: Improved Modules<2>

1.2.5.43 os
...........

The new *note scandir(): 164. function returning an iterator of *note
DirEntry: 2dd. objects has been added.  If possible, *note scandir():
164. extracts file attributes while scanning a directory, removing the
need to perform subsequent system calls to determine file type or
attributes, which may significantly improve performance.  (Contributed
by Ben Hoyt with the help of Victor Stinner in issue 22524(1).)

On Windows, a new *note stat_result.st_file_attributes: 2de. attribute
is now available.  It corresponds to the ‘dwFileAttributes’ member of
the ‘BY_HANDLE_FILE_INFORMATION’ structure returned by
‘GetFileInformationByHandle()’.  (Contributed by Ben Hoyt in issue
21719(2).)

The *note urandom(): 2df. function now uses the ‘getrandom()’ syscall on
Linux 3.17 or newer, and ‘getentropy()’ on OpenBSD 5.6 and newer,
removing the need to use ‘/dev/urandom’ and avoiding failures due to
potential file descriptor exhaustion.  (Contributed by Victor Stinner in
issue 22181(3).)

New *note get_blocking(): 2e0. and *note set_blocking(): 2e1. functions
allow getting and setting a file descriptor’s blocking mode (*note
O_NONBLOCK: 2e2.)  (Contributed by Victor Stinner in issue 22054(4).)

The *note truncate(): 2e3. and *note ftruncate(): 1f1. functions are now
supported on Windows.  (Contributed by Steve Dower in issue 23668(5).)

There is a new *note os.path.commonpath(): 2e4. function returning the
longest common sub-path of each passed pathname.  Unlike the *note
os.path.commonprefix(): 2e5. function, it always returns a valid path:

     >>> os.path.commonprefix(['/usr/lib', '/usr/local/lib'])
     '/usr/l'

     >>> os.path.commonpath(['/usr/lib', '/usr/local/lib'])
     '/usr'

(Contributed by Rafik Draoui and Serhiy Storchaka in issue 10395(6).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue22524

   (2) https://bugs.python.org/issue21719

   (3) https://bugs.python.org/issue22181

   (4) https://bugs.python.org/issue22054

   (5) https://bugs.python.org/issue23668

   (6) https://bugs.python.org/issue10395


File: python.info,  Node: pathlib,  Next: pickle<2>,  Prev: os<2>,  Up: Improved Modules<2>

1.2.5.44 pathlib
................

The new *note Path.samefile(): 2e7. method can be used to check whether
the path points to the same file as another path, which can be either
another *note Path: 2e8. object, or a string:

     >>> import pathlib
     >>> p1 = pathlib.Path('/etc/hosts')
     >>> p2 = pathlib.Path('/etc/../etc/hosts')
     >>> p1.samefile(p2)
     True

(Contributed by Vajrasky Kok and Antoine Pitrou in issue 19775(1).)

The *note Path.mkdir(): 2e9. method now accepts a new optional
`exist_ok' argument to match ‘mkdir -p’ and *note os.makedirs(): 2ea.
functionality.  (Contributed by Berker Peksag in issue 21539(2).)

There is a new *note Path.expanduser(): 2eb. method to expand ‘~’ and
‘~user’ prefixes.  (Contributed by Serhiy Storchaka and Claudiu Popa in
issue 19776(3).)

A new *note Path.home(): 2ec. class method can be used to get a *note
Path: 2e8. instance representing the user’s home directory.
(Contributed by Victor Salgado and Mayank Tripathi in issue 19777(4).)

New *note Path.write_text(): 2ed, *note Path.read_text(): 2ee, *note
Path.write_bytes(): 2ef, *note Path.read_bytes(): 2f0. methods to
simplify read/write operations on files.

The following code snippet will create or rewrite existing file
‘~/spam42’:

     >>> import pathlib
     >>> p = pathlib.Path('~/spam42')
     >>> p.expanduser().write_text('ham')
     3

(Contributed by Christopher Welborn in issue 20218(5).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue19775

   (2) https://bugs.python.org/issue21539

   (3) https://bugs.python.org/issue19776

   (4) https://bugs.python.org/issue19777

   (5) https://bugs.python.org/issue20218


File: python.info,  Node: pickle<2>,  Next: poplib,  Prev: pathlib,  Up: Improved Modules<2>

1.2.5.45 pickle
...............

Nested objects, such as unbound methods or nested classes, can now be
pickled using *note pickle protocols: 168. older than protocol version
4.  Protocol version 4 already supports these cases.  (Contributed by
Serhiy Storchaka in issue 23611(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue23611


File: python.info,  Node: poplib,  Next: re,  Prev: pickle<2>,  Up: Improved Modules<2>

1.2.5.46 poplib
...............

A new *note POP3.utf8(): 2f3. command enables RFC 6856(1)
(Internationalized Email) support, if a POP server supports it.
(Contributed by Milan OberKirch in issue 21804(2).)

   ---------- Footnotes ----------

   (1) https://tools.ietf.org/html/rfc6856.html

   (2) https://bugs.python.org/issue21804


File: python.info,  Node: re,  Next: readline,  Prev: poplib,  Up: Improved Modules<2>

1.2.5.47 re
...........

References and conditional references to groups with fixed length are
now allowed in lookbehind assertions:

     >>> import re
     >>> pat = re.compile(r'(a|b).(?<=\1)c')
     >>> pat.match('aac')
     <_sre.SRE_Match object; span=(0, 3), match='aac'>
     >>> pat.match('bbc')
     <_sre.SRE_Match object; span=(0, 3), match='bbc'>

(Contributed by Serhiy Storchaka in issue 9179(1).)

The number of capturing groups in regular expressions is no longer
limited to 100.  (Contributed by Serhiy Storchaka in issue 22437(2).)

The *note sub(): 2f5. and *note subn(): 2f6. functions now replace
unmatched groups with empty strings instead of raising an exception.
(Contributed by Serhiy Storchaka in issue 1519638(3).)

The *note re.error: 2f7. exceptions have new attributes, *note msg: 2f8,
*note pattern: 2f9, *note pos: 2fa, *note lineno: 2fb, and *note colno:
2fc, that provide better context information about the error:

     >>> re.compile("""
     ...     (?x)
     ...     .++
     ... """)
     Traceback (most recent call last):
        ...
     sre_constants.error: multiple repeat at position 16 (line 3, column 7)

(Contributed by Serhiy Storchaka in issue 22578(4).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue9179

   (2) https://bugs.python.org/issue22437

   (3) https://bugs.python.org/issue1519638

   (4) https://bugs.python.org/issue22578


File: python.info,  Node: readline,  Next: selectors,  Prev: re,  Up: Improved Modules<2>

1.2.5.48 readline
.................

A new *note append_history_file(): 2fe. function can be used to append
the specified number of trailing elements in history to the given file.
(Contributed by Bruno Cauet in issue 22940(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue22940


File: python.info,  Node: selectors,  Next: shutil,  Prev: readline,  Up: Improved Modules<2>

1.2.5.49 selectors
..................

The new *note DevpollSelector: 300. supports efficient ‘/dev/poll’
polling on Solaris.  (Contributed by Giampaolo Rodola’ in issue
18931(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue18931


File: python.info,  Node: shutil,  Next: signal,  Prev: selectors,  Up: Improved Modules<2>

1.2.5.50 shutil
...............

The *note move(): 302. function now accepts a `copy_function' argument,
allowing, for example, the *note copy(): 303. function to be used
instead of the default *note copy2(): 304. if there is a need to ignore
file metadata when moving.  (Contributed by Claudiu Popa in issue
19840(1).)

The *note make_archive(): 305. function now supports the `xztar' format.
(Contributed by Serhiy Storchaka in issue 5411(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue19840

   (2) https://bugs.python.org/issue5411


File: python.info,  Node: signal,  Next: smtpd,  Prev: shutil,  Up: Improved Modules<2>

1.2.5.51 signal
...............

On Windows, the *note set_wakeup_fd(): 307. function now also supports
socket handles.  (Contributed by Victor Stinner in issue 22018(1).)

Various ‘SIG*’ constants in the *note signal: e8. module have been
converted into *note Enums: 79.  This allows meaningful names to be
printed during debugging, instead of integer "magic numbers".
(Contributed by Giampaolo Rodola’ in issue 21076(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue22018

   (2) https://bugs.python.org/issue21076


File: python.info,  Node: smtpd,  Next: smtplib,  Prev: signal,  Up: Improved Modules<2>

1.2.5.52 smtpd
..............

Both the *note SMTPServer: 309. and *note SMTPChannel: 30a. classes now
accept a `decode_data' keyword argument to determine if the ‘DATA’
portion of the SMTP transaction is decoded using the ‘"utf-8"’ codec or
is instead provided to the *note SMTPServer.process_message(): 30b.
method as a byte string.  The default is ‘True’ for backward
compatibility reasons, but will change to ‘False’ in Python 3.6.  If
`decode_data' is set to ‘False’, the ‘process_message’ method must be
prepared to accept keyword arguments.  (Contributed by Maciej Szulik in
issue 19662(1).)

The *note SMTPServer: 309. class now advertises the ‘8BITMIME’ extension
( RFC 6152(2)) if `decode_data' has been set ‘True’.  If the client
specifies ‘BODY=8BITMIME’ on the ‘MAIL’ command, it is passed to *note
SMTPServer.process_message(): 30b. via the `mail_options' keyword.
(Contributed by Milan Oberkirch and R. David Murray in issue 21795(3).)

The *note SMTPServer: 309. class now also supports the ‘SMTPUTF8’
extension ( RFC 6531(4): Internationalized Email).  If the client
specified ‘SMTPUTF8 BODY=8BITMIME’ on the ‘MAIL’ command, they are
passed to *note SMTPServer.process_message(): 30b. via the
`mail_options' keyword.  It is the responsibility of the
‘process_message’ method to correctly handle the ‘SMTPUTF8’ data.
(Contributed by Milan Oberkirch in issue 21725(5).)

It is now possible to provide, directly or via name resolution, IPv6
addresses in the *note SMTPServer: 309. constructor, and have it
successfully connect.  (Contributed by Milan Oberkirch in issue
14758(6).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue19662

   (2) https://tools.ietf.org/html/rfc6152.html

   (3) https://bugs.python.org/issue21795

   (4) https://tools.ietf.org/html/rfc6531.html

   (5) https://bugs.python.org/issue21725

   (6) https://bugs.python.org/issue14758


File: python.info,  Node: smtplib,  Next: sndhdr,  Prev: smtpd,  Up: Improved Modules<2>

1.2.5.53 smtplib
................

A new *note SMTP.auth(): 30d. method provides a convenient way to
implement custom authentication mechanisms.  (Contributed by Milan
Oberkirch in issue 15014(1).)

The *note SMTP.set_debuglevel(): 30e. method now accepts an additional
debuglevel (2), which enables timestamps in debug messages.
(Contributed by Gavin Chappell and Maciej Szulik in issue 16914(2).)

Both the *note SMTP.sendmail(): 30f. and *note SMTP.send_message(): 310.
methods now support support RFC 6531(3) (SMTPUTF8).  (Contributed by
Milan Oberkirch and R. David Murray in issue 22027(4).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue15014

   (2) https://bugs.python.org/issue16914

   (3) https://tools.ietf.org/html/rfc6531.html

   (4) https://bugs.python.org/issue22027


File: python.info,  Node: sndhdr,  Next: socket,  Prev: smtplib,  Up: Improved Modules<2>

1.2.5.54 sndhdr
...............

The *note what(): 312. and *note whathdr(): 313. functions now return a
*note namedtuple(): 229.  (Contributed by Claudiu Popa in issue
18615(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue18615


File: python.info,  Node: socket,  Next: ssl,  Prev: sndhdr,  Up: Improved Modules<2>

1.2.5.55 socket
...............

Functions with timeouts now use a monotonic clock, instead of a system
clock.  (Contributed by Victor Stinner in issue 22043(1).)

A new *note socket.sendfile(): 315. method allows sending a file over a
socket by using the high-performance *note os.sendfile(): 1fb. function
on UNIX, resulting in uploads being from 2 to 3 times faster than when
using plain *note socket.send(): 210.  (Contributed by Giampaolo Rodola’
in issue 17552(2).)

The *note socket.sendall(): 211. method no longer resets the socket
timeout every time bytes are received or sent.  The socket timeout is
now the maximum total duration to send all data.  (Contributed by Victor
Stinner in issue 23853(3).)

The `backlog' argument of the *note socket.listen(): 316. method is now
optional.  By default it is set to *note SOMAXCONN: 317. or to ‘128’,
whichever is less.  (Contributed by Charles-François Natali in issue
21455(4).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue22043

   (2) https://bugs.python.org/issue17552

   (3) https://bugs.python.org/issue23853

   (4) https://bugs.python.org/issue21455


File: python.info,  Node: ssl,  Next: sqlite3,  Prev: socket,  Up: Improved Modules<2>

1.2.5.56 ssl
............

* Menu:

* Memory BIO Support:: 
* Application-Layer Protocol Negotiation Support:: 
* Other Changes:: 


File: python.info,  Node: Memory BIO Support,  Next: Application-Layer Protocol Negotiation Support,  Up: ssl

1.2.5.57 Memory BIO Support
...........................

(Contributed by Geert Jansen in issue 21965(1).)

The new *note SSLObject: 31a. class has been added to provide SSL
protocol support for cases when the network I/O capabilities of *note
SSLSocket: 31b. are not necessary or are suboptimal.  ‘SSLObject’
represents an SSL protocol instance, but does not implement any network
I/O methods, and instead provides a memory buffer interface.  The new
*note MemoryBIO: 31c. class can be used to pass data between Python and
an SSL protocol instance.

The memory BIO SSL support is primarily intended to be used in
frameworks implementing asynchronous I/O for which *note SSLSocket:
31b.’s readiness model ("select/poll") is inefficient.

A new *note SSLContext.wrap_bio(): 31d. method can be used to create a
new ‘SSLObject’ instance.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue21965


File: python.info,  Node: Application-Layer Protocol Negotiation Support,  Next: Other Changes,  Prev: Memory BIO Support,  Up: ssl

1.2.5.58 Application-Layer Protocol Negotiation Support
.......................................................

(Contributed by Benjamin Peterson in issue 20188(1).)

Where OpenSSL support is present, the *note ssl: f1. module now
implements the `Application-Layer Protocol Negotiation' TLS extension as
described in RFC 7301(2).

The new *note SSLContext.set_alpn_protocols(): 31f. can be used to
specify which protocols a socket should advertise during the TLS
handshake.

The new *note SSLSocket.selected_alpn_protocol(): 320. returns the
protocol that was selected during the TLS handshake.  The *note
HAS_ALPN: 321. flag indicates whether ALPN support is present.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue20188

   (2) https://tools.ietf.org/html/rfc7301.html


File: python.info,  Node: Other Changes,  Prev: Application-Layer Protocol Negotiation Support,  Up: ssl

1.2.5.59 Other Changes
......................

There is a new *note SSLSocket.version(): 323. method to query the
actual protocol version in use.  (Contributed by Antoine Pitrou in issue
20421(1).)

The *note SSLSocket: 31b. class now implements a ‘SSLSocket.sendfile()’
method.  (Contributed by Giampaolo Rodola’ in issue 17552(2).)

The ‘SSLSocket.send()’ method now raises either the *note
ssl.SSLWantReadError: 324. or *note ssl.SSLWantWriteError: 325.
exception on a non-blocking socket if the operation would block.
Previously, it would return ‘0’.  (Contributed by Nikolaus Rath in issue
20951(3).)

The *note cert_time_to_seconds(): 326. function now interprets the input
time as UTC and not as local time, per RFC 5280(4).  Additionally, the
return value is always an *note int: 227.  (Contributed by Akira Li in
issue 19940(5).)

New ‘SSLObject.shared_ciphers()’ and *note SSLSocket.shared_ciphers():
327. methods return the list of ciphers sent by the client during the
handshake.  (Contributed by Benjamin Peterson in issue 23186(6).)

The *note SSLSocket.do_handshake(): 328, *note SSLSocket.read(): 329,
‘SSLSocket.shutdown()’, and *note SSLSocket.write(): 32a. methods of the
*note SSLSocket: 31b. class no longer reset the socket timeout every
time bytes are received or sent.  The socket timeout is now the maximum
total duration of the method.  (Contributed by Victor Stinner in issue
23853(7).)

The *note match_hostname(): 32b. function now supports matching of IP
addresses.  (Contributed by Antoine Pitrou in issue 23239(8).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue20421

   (2) https://bugs.python.org/issue17552

   (3) https://bugs.python.org/issue20951

   (4) https://tools.ietf.org/html/rfc5280.html

   (5) https://bugs.python.org/issue19940

   (6) https://bugs.python.org/issue23186

   (7) https://bugs.python.org/issue23853

   (8) https://bugs.python.org/issue23239


File: python.info,  Node: sqlite3,  Next: subprocess,  Prev: ssl,  Up: Improved Modules<2>

1.2.5.60 sqlite3
................

The *note Row: 32d. class now fully supports the sequence protocol, in
particular *note reversed(): 24d. iteration and slice indexing.
(Contributed by Claudiu Popa in issue 10203(1); by Lucas Sinclair,
Jessica McKellar, and Serhiy Storchaka in issue 13583(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue10203

   (2) https://bugs.python.org/issue13583


File: python.info,  Node: subprocess,  Next: sys,  Prev: sqlite3,  Up: Improved Modules<2>

1.2.5.61 subprocess
...................

The new *note run(): 1c3. function has been added.  It runs the
specified command and returns a *note CompletedProcess: 32f. object,
which describes a finished process.  The new API is more consistent and
is the recommended approach to invoking subprocesses in Python code that
does not need to maintain compatibility with earlier Python versions.
(Contributed by Thomas Kluyver in issue 23342(1).)

Examples:

     >>> subprocess.run(["ls", "-l"])  # doesn't capture output
     CompletedProcess(args=['ls', '-l'], returncode=0)

     >>> subprocess.run("exit 1", shell=True, check=True)
     Traceback (most recent call last):
       ...
     subprocess.CalledProcessError: Command 'exit 1' returned non-zero exit status 1

     >>> subprocess.run(["ls", "-l", "/dev/null"], stdout=subprocess.PIPE)
     CompletedProcess(args=['ls', '-l', '/dev/null'], returncode=0,
     stdout=b'crw-rw-rw- 1 root root 1, 3 Jan 23 16:23 /dev/null\n')

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue23342


File: python.info,  Node: sys,  Next: sysconfig,  Prev: subprocess,  Up: Improved Modules<2>

1.2.5.62 sys
............

A new *note set_coroutine_wrapper(): 331. function allows setting a
global hook that will be called whenever a *note coroutine object: 2ad.
is created by an *note async def: 1ce. function.  A corresponding *note
get_coroutine_wrapper(): 332. can be used to obtain a currently set
wrapper.  Both functions are *note provisional: 1de, and are intended
for debugging purposes only.  (Contributed by Yury Selivanov in issue
24017(1).)

A new *note is_finalizing(): 333. function can be used to check if the
Python interpreter is *note shutting down: 334.  (Contributed by Antoine
Pitrou in issue 22696(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue24017

   (2) https://bugs.python.org/issue22696


File: python.info,  Node: sysconfig,  Next: tarfile,  Prev: sys,  Up: Improved Modules<2>

1.2.5.63 sysconfig
..................

The name of the user scripts directory on Windows now includes the first
two components of the Python version.  (Contributed by Paul Moore in
issue 23437(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue23437


File: python.info,  Node: tarfile,  Next: threading,  Prev: sysconfig,  Up: Improved Modules<2>

1.2.5.64 tarfile
................

The `mode' argument of the *note open(): 337. function now accepts ‘"x"’
to request exclusive creation.  (Contributed by Berker Peksag in issue
21717(1).)

The *note TarFile.extractall(): 338. and *note TarFile.extract(): 339.
methods now take a keyword argument `numeric_only'.  If set to ‘True’,
the extracted files and directories will be owned by the numeric ‘uid’
and ‘gid’ from the tarfile.  If set to ‘False’ (the default, and the
behavior in versions prior to 3.5), they will be owned by the named user
and group in the tarfile.  (Contributed by Michael Vogt and Eric Smith
in issue 23193(2).)

The *note TarFile.list(): 33a. now accepts an optional `members' keyword
argument that can be set to a subset of the list returned by *note
TarFile.getmembers(): 33b.  (Contributed by Serhiy Storchaka in issue
21549(3).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue21717

   (2) https://bugs.python.org/issue23193

   (3) https://bugs.python.org/issue21549


File: python.info,  Node: threading,  Next: time,  Prev: tarfile,  Up: Improved Modules<2>

1.2.5.65 threading
..................

Both the *note Lock.acquire(): 33d. and *note RLock.acquire(): 33e.
methods now use a monotonic clock for timeout management.  (Contributed
by Victor Stinner in issue 22043(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue22043


File: python.info,  Node: time,  Next: timeit,  Prev: threading,  Up: Improved Modules<2>

1.2.5.66 time
.............

The *note monotonic(): 340. function is now always available.
(Contributed by Victor Stinner in issue 22043(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue22043


File: python.info,  Node: timeit,  Next: tkinter,  Prev: time,  Up: Improved Modules<2>

1.2.5.67 timeit
...............

A new command line option ‘-u’ or ‘--unit=`U'’ can be used to specify
the time unit for the timer output.  Supported options are ‘usec’,
‘msec’, or ‘sec’.  (Contributed by Julian Gindi in issue 18983(1).)

The *note timeit(): 342. function has a new `globals' parameter for
specifying the namespace in which the code will be running.
(Contributed by Ben Roberts in issue 2527(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue18983

   (2) https://bugs.python.org/issue2527


File: python.info,  Node: tkinter,  Next: traceback,  Prev: timeit,  Up: Improved Modules<2>

1.2.5.68 tkinter
................

The ‘tkinter._fix’ module used for setting up the Tcl/Tk environment on
Windows has been replaced by a private function in the ‘_tkinter’ module
which makes no permanent changes to environment variables.  (Contributed
by Zachary Ware in issue 20035(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue20035


File: python.info,  Node: traceback,  Next: types,  Prev: tkinter,  Up: Improved Modules<2>

1.2.5.69 traceback
..................

New *note walk_stack(): 345. and *note walk_tb(): 346. functions to
conveniently traverse frame and traceback objects.  (Contributed by
Robert Collins in issue 17911(1).)

New lightweight classes: *note TracebackException: 347, *note
StackSummary: 348, and *note FrameSummary: 349.  (Contributed by Robert
Collins in issue 17911(2).)

Both the *note print_tb(): 34a. and *note print_stack(): 34b. functions
now support negative values for the `limit' argument.  (Contributed by
Dmitry Kazakov in issue 22619(3).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue17911

   (2) https://bugs.python.org/issue17911

   (3) https://bugs.python.org/issue22619


File: python.info,  Node: types,  Next: unicodedata,  Prev: traceback,  Up: Improved Modules<2>

1.2.5.70 types
..............

A new *note coroutine(): 34d. function to transform *note generator:
34e. and *note generator-like: 25e. objects into *note awaitables: 1ca.
(Contributed by Yury Selivanov in issue 24017(1).)

A new type called *note CoroutineType: 34f, which is used for *note
coroutine: 2ad. objects created by *note async def: 1ce. functions.
(Contributed by Yury Selivanov in issue 24400(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue24017

   (2) https://bugs.python.org/issue24400


File: python.info,  Node: unicodedata,  Next: unittest,  Prev: types,  Up: Improved Modules<2>

1.2.5.71 unicodedata
....................

The *note unicodedata: 117. module now uses data from Unicode 8.0.0(1).

   ---------- Footnotes ----------

   (1) http://unicode.org/versions/Unicode8.0.0/


File: python.info,  Node: unittest,  Next: unittest mock<2>,  Prev: unicodedata,  Up: Improved Modules<2>

1.2.5.72 unittest
.................

The *note TestLoader.loadTestsFromModule(): 352. method now accepts a
keyword-only argument `pattern' which is passed to ‘load_tests’ as the
third argument.  Found packages are now checked for ‘load_tests’
regardless of whether their path matches `pattern', because it is
impossible for a package name to match the default pattern.
(Contributed by Robert Collins and Barry A. Warsaw in issue 16662(1).)

Unittest discovery errors now are exposed in the *note
TestLoader.errors: 353. attribute of the *note TestLoader: 354.
instance.  (Contributed by Robert Collins in issue 19746(2).)

A new command line option ‘--locals’ to show local variables in
tracebacks.  (Contributed by Robert Collins in issue 22936(3).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue16662

   (2) https://bugs.python.org/issue19746

   (3) https://bugs.python.org/issue22936


File: python.info,  Node: unittest mock<2>,  Next: urllib,  Prev: unittest,  Up: Improved Modules<2>

1.2.5.73 unittest.mock
......................

The *note Mock: 172. class has the following improvements:

   * The class constructor has a new `unsafe' parameter, which causes
     mock objects to raise *note AttributeError: 356. on attribute names
     starting with ‘"assert"’.  (Contributed by Kushal Das in issue
     21238(1).)

   * A new *note Mock.assert_not_called(): 357. method to check if the
     mock object was called.  (Contributed by Kushal Das in issue
     21262(2).)

The *note MagicMock: 358. class now supports *note __truediv__(): 359,
*note __divmod__(): 35a. and *note __matmul__(): 1d5. operators.
(Contributed by Johannes Baiter in issue 20968(3), and Håkan Lövdahl in
issue 23581(4) and issue 23568(5).)

It is no longer necessary to explicitly pass ‘create=True’ to the *note
patch(): 35b. function when patching builtin names.  (Contributed by
Kushal Das in issue 17660(6).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue21238

   (2) https://bugs.python.org/issue21262

   (3) https://bugs.python.org/issue20968

   (4) https://bugs.python.org/issue23581

   (5) https://bugs.python.org/issue23568

   (6) https://bugs.python.org/issue17660


File: python.info,  Node: urllib,  Next: wsgiref,  Prev: unittest mock<2>,  Up: Improved Modules<2>

1.2.5.74 urllib
...............

A new *note request.HTTPPasswordMgrWithPriorAuth: 35d. class allows HTTP
Basic Authentication credentials to be managed so as to eliminate
unnecessary ‘401’ response handling, or to unconditionally send
credentials on the first request in order to communicate with servers
that return a ‘404’ response instead of a ‘401’ if the ‘Authorization’
header is not sent.  (Contributed by Matej Cepl in issue 19494(1) and
Akshit Khurana in issue 7159(2).)

A new `quote_via' argument for the *note parse.urlencode(): 35e.
function provides a way to control the encoding of query parts if
needed.  (Contributed by Samwyse and Arnon Yaari in issue 13866(3).)

The *note request.urlopen(): 35f. function accepts an *note
ssl.SSLContext: 1c6. object as a `context' argument, which will be used
for the HTTPS connection.  (Contributed by Alex Gaynor in issue
22366(4).)

The *note parse.urljoin(): 360. was updated to use the RFC 3986(5)
semantics for the resolution of relative URLs, rather than RFC 1808(6)
and RFC 2396(7).  (Contributed by Demian Brecht and Senthil Kumaran in
issue 22118(8).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue19494

   (2) https://bugs.python.org/issue7159

   (3) https://bugs.python.org/issue13866

   (4) https://bugs.python.org/issue22366

   (5) https://tools.ietf.org/html/rfc3986.html

   (6) https://tools.ietf.org/html/rfc1808.html

   (7) https://tools.ietf.org/html/rfc2396.html

   (8) https://bugs.python.org/issue22118


File: python.info,  Node: wsgiref,  Next: xmlrpc,  Prev: urllib,  Up: Improved Modules<2>

1.2.5.75 wsgiref
................

The `headers' argument of the *note headers.Headers: 362. class
constructor is now optional.  (Contributed by Pablo Torres Navarrete and
SilentGhost in issue 5800(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue5800


File: python.info,  Node: xmlrpc,  Next: xml sax,  Prev: wsgiref,  Up: Improved Modules<2>

1.2.5.76 xmlrpc
...............

The *note client.ServerProxy: 364. class now supports the *note context
manager: 165. protocol.  (Contributed by Claudiu Popa in issue
20627(1).)

The *note client.ServerProxy: 364. constructor now accepts an optional
*note ssl.SSLContext: 1c6. instance.  (Contributed by Alex Gaynor in
issue 22960(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue20627

   (2) https://bugs.python.org/issue22960


File: python.info,  Node: xml sax,  Next: zipfile<2>,  Prev: xmlrpc,  Up: Improved Modules<2>

1.2.5.77 xml.sax
................

SAX parsers now support a character stream of the *note
xmlreader.InputSource: 366. object.  (Contributed by Serhiy Storchaka in
issue 2175(1).)

*note parseString(): 367. now accepts a *note str: 25a. instance.
(Contributed by Serhiy Storchaka in issue 10590(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue2175

   (2) https://bugs.python.org/issue10590


File: python.info,  Node: zipfile<2>,  Prev: xml sax,  Up: Improved Modules<2>

1.2.5.78 zipfile
................

ZIP output can now be written to unseekable streams.  (Contributed by
Serhiy Storchaka in issue 23252(1).)

The `mode' argument of *note ZipFile.open(): 369. method now accepts
‘"x"’ to request exclusive creation.  (Contributed by Serhiy Storchaka
in issue 21717(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue23252

   (2) https://bugs.python.org/issue21717


File: python.info,  Node: Other module-level changes,  Next: Optimizations<2>,  Prev: Improved Modules<2>,  Up: What's New In Python 3 5

1.2.6 Other module-level changes
--------------------------------

Many functions in the *note mmap: b2, *note ossaudiodev: c4, *note
socket: ed, *note ssl: f1, and *note codecs: 1c. modules now accept
writable *note bytes-like objects: 36b.  (Contributed by Serhiy
Storchaka in issue 23001(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue23001


File: python.info,  Node: Optimizations<2>,  Next: Build and C API Changes<2>,  Prev: Other module-level changes,  Up: What's New In Python 3 5

1.2.7 Optimizations
-------------------

The *note os.walk(): 1e1. function has been sped up by 3 to 5 times on
POSIX systems, and by 7 to 20 times on Windows.  This was done using the
new *note os.scandir(): 164. function, which exposes file information
from the underlying ‘readdir’ or ‘FindFirstFile’/‘FindNextFile’ system
calls.  (Contributed by Ben Hoyt with help from Victor Stinner in issue
23605(1).)

Construction of ‘bytes(int)’ (filled by zero bytes) is faster and uses
less memory for large objects.  ‘calloc()’ is used instead of ‘malloc()’
to allocate memory for these objects.  (Contributed by Victor Stinner in
issue 21233(2).)

Some operations on *note ipaddress: a0. *note IPv4Network: 2bc. and
*note IPv6Network: 2bd. have been massively sped up, such as *note
subnets(): 36d, *note supernet(): 36e, *note summarize_address_range():
36f, *note collapse_addresses(): 370.  The speed up can range from 3 to
15 times.  (Contributed by Antoine Pitrou, Michel Albert, and Markus in
issue 21486(3), issue 21487(4), issue 20826(5), issue 23266(6).)

Pickling of *note ipaddress: a0. objects was optimized to produce
significantly smaller output.  (Contributed by Serhiy Storchaka in issue
23133(7).)

Many operations on *note io.BytesIO: 371. are now 50% to 100% faster.
(Contributed by Serhiy Storchaka in issue 15381(8) and David Wilson in
issue 22003(9).)

The *note marshal.dumps(): 372. function is now faster: 65-85% with
versions 3 and 4, 20-25% with versions 0 to 2 on typical data, and up to
5 times in best cases.  (Contributed by Serhiy Storchaka in issue
20416(10) and issue 23344(11).)

The UTF-32 encoder is now 3 to 7 times faster.  (Contributed by Serhiy
Storchaka in issue 15027(12).)

Regular expressions are now parsed up to 10% faster.  (Contributed by
Serhiy Storchaka in issue 19380(13).)

The *note json.dumps(): 373. function was optimized to run with
‘ensure_ascii=False’ as fast as with ‘ensure_ascii=True’.  (Contributed
by Naoki Inada in issue 23206(14).)

The *note PyObject_IsInstance(): 374. and *note PyObject_IsSubclass():
375. functions have been sped up in the common case that the second
argument has *note type: 376. as its metaclass.  (Contributed Georg
Brandl by in issue 22540(15).)

Method caching was slightly improved, yielding up to 5% performance
improvement in some benchmarks.  (Contributed by Antoine Pitrou in issue
22847(16).)

Objects from the *note random: da. module now use 50% less memory on
64-bit builds.  (Contributed by Serhiy Storchaka in issue 23488(17).)

The *note property(): 377. getter calls are up to 25% faster.
(Contributed by Joe Jevnik in issue 23910(18).)

Instantiation of *note fractions.Fraction: 378. is now up to 30% faster.
(Contributed by Stefan Behnel in issue 22464(19).)

String methods *note find(): 379, *note rfind(): 37a, *note split():
37b, *note partition(): 37c. and the *note in: 37d. string operator are
now significantly faster for searching 1-character substrings.
(Contributed by Serhiy Storchaka in issue 23573(20).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue23605

   (2) https://bugs.python.org/issue21233

   (3) https://bugs.python.org/issue21486

   (4) https://bugs.python.org/issue21487

   (5) https://bugs.python.org/issue20826

   (6) https://bugs.python.org/issue23266

   (7) https://bugs.python.org/issue23133

   (8) https://bugs.python.org/issue15381

   (9) https://bugs.python.org/issue22003

   (10) https://bugs.python.org/issue20416

   (11) https://bugs.python.org/issue23344

   (12) https://bugs.python.org/issue15027

   (13) https://bugs.python.org/issue19380

   (14) https://bugs.python.org/issue23206

   (15) https://bugs.python.org/issue22540

   (16) https://bugs.python.org/issue22847

   (17) https://bugs.python.org/issue23488

   (18) https://bugs.python.org/issue23910

   (19) https://bugs.python.org/issue22464

   (20) https://bugs.python.org/issue23573


File: python.info,  Node: Build and C API Changes<2>,  Next: Deprecated<2>,  Prev: Optimizations<2>,  Up: What's New In Python 3 5

1.2.8 Build and C API Changes
-----------------------------

New ‘calloc’ functions were added:

   * *note PyMem_RawCalloc(): 37f,

   * *note PyMem_Calloc(): 380,

   * ‘PyObject_Calloc()’,

   * ‘_PyObject_GC_Calloc()’.

(Contributed by Victor Stinner in issue 21233(1).)

New encoding/decoding helper functions:

   * *note Py_DecodeLocale(): 381. (replaced ‘_Py_char2wchar()’),

   * *note Py_EncodeLocale(): 382. (replaced ‘_Py_wchar2char()’).

(Contributed by Victor Stinner in issue 18395(2).)

A new *note PyCodec_NameReplaceErrors(): 383. function to replace the
unicode encode error with ‘\N{...}’ escapes.  (Contributed by Serhiy
Storchaka in issue 19676(3).)

A new *note PyErr_FormatV(): 384. function similar to *note
PyErr_Format(): 385, but accepts a ‘va_list’ argument.  (Contributed by
Antoine Pitrou in issue 18711(4).)

A new ‘PyExc_RecursionError’ exception.  (Contributed by Georg Brandl in
issue 19235(5).)

New *note PyModule_FromDefAndSpec(): 386, *note
PyModule_FromDefAndSpec2(): 387, and *note PyModule_ExecDef(): 388.
functions introduced by PEP 489(6) – multi-phase extension module
initialization.  (Contributed by Petr Viktorin in issue 24268(7).)

New *note PyNumber_MatrixMultiply(): 389. and *note
PyNumber_InPlaceMatrixMultiply(): 38a. functions to perform matrix
multiplication.  (Contributed by Benjamin Peterson in issue 21176(8).
See also PEP 465(9) for details.)

The *note PyTypeObject.tp_finalize: 38b. slot is now part of the stable
ABI.

Windows builds now require Microsoft Visual C++ 14.0, which is available
as part of Visual Studio 2015(10).

Extension modules now include a platform information tag in their
filename on some platforms (the tag is optional, and CPython will import
extensions without it, although if the tag is present and mismatched,
the extension won’t be loaded):

   * On Linux, extension module filenames end with
     ‘.cpython-<major><minor>m-<architecture>-<os>.pyd’:

        * ‘<major>’ is the major number of the Python version; for
          Python 3.5 this is ‘3’.

        * ‘<minor>’ is the minor number of the Python version; for
          Python 3.5 this is ‘5’.

        * ‘<architecture>’ is the hardware architecture the extension
          module was built to run on.  It’s most commonly either ‘i386’
          for 32-bit Intel platforms or ‘x86_64’ for 64-bit Intel (and
          AMD) platforms.

        * ‘<os>’ is always ‘linux-gnu’, except for extensions built to
          talk to the 32-bit ABI on 64-bit platforms, in which case it
          is ‘linux-gnu32’ (and ‘<architecture>’ will be ‘x86_64’).

   * On Windows, extension module filenames end with
     ‘<debug>.cp<major><minor>-<platform>.pyd’:

        * ‘<major>’ is the major number of the Python version; for
          Python 3.5 this is ‘3’.

        * ‘<minor>’ is the minor number of the Python version; for
          Python 3.5 this is ‘5’.

        * ‘<platform>’ is the platform the extension module was built
          for, either ‘win32’ for Win32, ‘win_amd64’ for Win64,
          ‘win_ia64’ for Windows Itanium 64, and ‘win_arm’ for Windows
          on ARM.

        * If built in debug mode, ‘<debug>’ will be ‘_d’, otherwise it
          will be blank.

   * On OS X platforms, extension module filenames now end with
     ‘-darwin.so’.

   * On all other platforms, extension module filenames are the same as
     they were with Python 3.4.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue21233

   (2) https://bugs.python.org/issue18395

   (3) https://bugs.python.org/issue19676

   (4) https://bugs.python.org/issue18711

   (5) https://bugs.python.org/issue19235

   (6) https://www.python.org/dev/peps/pep-0489

   (7) https://bugs.python.org/issue24268

   (8) https://bugs.python.org/issue21176

   (9) https://www.python.org/dev/peps/pep-0465

   (10) https://www.visualstudio.com/


File: python.info,  Node: Deprecated<2>,  Next: Removed<2>,  Prev: Build and C API Changes<2>,  Up: What's New In Python 3 5

1.2.9 Deprecated
----------------

* Menu:

* New Keywords: New Keywords<2>. 
* Deprecated Python Behavior:: 
* Unsupported Operating Systems:: 
* Deprecated Python modules, functions and methods: Deprecated Python modules functions and methods<2>. 


File: python.info,  Node: New Keywords<2>,  Next: Deprecated Python Behavior,  Up: Deprecated<2>

1.2.9.1 New Keywords
....................

‘async’ and ‘await’ are not recommended to be used as variable, class,
function or module names.  Introduced by PEP 492(1) in Python 3.5, they
will become proper keywords in Python 3.7.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0492


File: python.info,  Node: Deprecated Python Behavior,  Next: Unsupported Operating Systems,  Prev: New Keywords<2>,  Up: Deprecated<2>

1.2.9.2 Deprecated Python Behavior
..................................

Raising the *note StopIteration: 191. exception inside a generator will
now generate a silent *note PendingDeprecationWarning: 19e, which will
become a non-silent deprecation warning in Python 3.6 and will trigger a
*note RuntimeError: 193. in Python 3.7.  See *note PEP 479; Change
StopIteration handling inside generators: 194. for details.


File: python.info,  Node: Unsupported Operating Systems,  Next: Deprecated Python modules functions and methods<2>,  Prev: Deprecated Python Behavior,  Up: Deprecated<2>

1.2.9.3 Unsupported Operating Systems
.....................................

Windows XP is no longer supported by Microsoft, thus, per PEP 11(1),
CPython 3.5 is no longer officially supported on this OS.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0011


File: python.info,  Node: Deprecated Python modules functions and methods<2>,  Prev: Unsupported Operating Systems,  Up: Deprecated<2>

1.2.9.4 Deprecated Python modules, functions and methods
........................................................

The *note formatter: 80. module has now graduated to full deprecation
and is still slated for removal in Python 3.6.

The *note asyncio.async(): 23b. function is deprecated in favor of *note
ensure_future(): 23c.

The *note smtpd: ea. module has in the past always decoded the DATA
portion of email messages using the ‘utf-8’ codec.  This can now be
controlled by the new `decode_data' keyword to *note SMTPServer: 309.
The default value is ‘True’, but this default is deprecated.  Specify
the `decode_data' keyword with an appropriate value to avoid the
deprecation warning.

Directly assigning values to the *note key: 391, *note value: 392. and
*note coded_value: 393. of *note http.cookies.Morsel: 394. objects is
deprecated.  Use the *note set(): 395. method instead.  In addition, the
undocumented `LegalChars' parameter of *note set(): 395. is deprecated,
and is now ignored.

Passing a format string as keyword argument `format_string' to the *note
format(): 396. method of the *note string.Formatter: 397. class has been
deprecated.  (Contributed by Serhiy Storchaka in issue 23671(1).)

The *note platform.dist(): 398. and *note platform.linux_distribution():
399. functions are now deprecated.  Linux distributions use too many
different ways of describing themselves, so the functionality is left to
a package.  (Contributed by Vajrasky Kok and Berker Peksag in issue
1322(2).)

The previously undocumented ‘from_function’ and ‘from_builtin’ methods
of *note inspect.Signature: 2a8. are deprecated.  Use the new *note
Signature.from_callable(): 2ab. method instead.  (Contributed by Yury
Selivanov in issue 24248(3).)

The *note inspect.getargspec(): 39a. function is deprecated and
scheduled to be removed in Python 3.6.  (See issue 20438(4) for
details.)

The *note inspect: 9e. *note getfullargspec(): 39b, *note
getargvalues(): 39c, *note getcallargs(): 39d, *note getargvalues():
39c, *note formatargspec(): 39e, and *note formatargvalues(): 39f.
functions are deprecated in favor of the *note inspect.signature(): 2ac.
API. (Contributed by Yury Selivanov in issue 20438(5).)

Use of *note re.LOCALE: 3a0. flag with str patterns or *note re.ASCII:
3a1. is now deprecated.  (Contributed by Serhiy Storchaka in issue
22407(6).)

Use of unrecognized special sequences consisting of ‘'\'’ and an ASCII
letter in regular expression patterns and replacement patterns now
raises a deprecation warning and will be forbidden in Python 3.6.
(Contributed by Serhiy Storchaka in issue 23622(7).)

The undocumented and unofficial `use_load_tests' default argument of the
*note unittest.TestLoader.loadTestsFromModule(): 352. method now is
deprecated and ignored.  (Contributed by Robert Collins and Barry A.
Warsaw in issue 16662(8).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue23671

   (2) https://bugs.python.org/issue1322

   (3) https://bugs.python.org/issue24248

   (4) https://bugs.python.org/issue20438

   (5) https://bugs.python.org/issue20438

   (6) https://bugs.python.org/issue22407

   (7) https://bugs.python.org/issue23622

   (8) https://bugs.python.org/issue16662

