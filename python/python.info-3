This is python.info, produced by makeinfo version 6.0 from python.texi.

     Python 3.6.0a0, May 06, 2016

     Georg Brandl

     Copyright © 2001-2016, Python Software Foundation

INFO-DIR-SECTION Documentation tools
START-INFO-DIR-ENTRY
* Python: (python.info). The Python Programming Language
END-INFO-DIR-ENTRY


   Generated by Sphinx 1.4.1.


File: python.info,  Node: PEP 3147 PYC Repository Directories,  Next: PEP 3149 ABI Version Tagged so Files,  Prev: PEP 3148 The concurrent futures module,  Up: What's New In Python 3 2

1.5.5 PEP 3147: PYC Repository Directories
------------------------------------------

Python’s scheme for caching bytecode in `.pyc' files did not work well
in environments with multiple Python interpreters.  If one interpreter
encountered a cached file created by another interpreter, it would
recompile the source and overwrite the cached file, thus losing the
benefits of caching.

The issue of "pyc fights" has become more pronounced as it has become
commonplace for Linux distributions to ship with multiple versions of
Python.  These conflicts also arise with CPython alternatives such as
Unladen Swallow.

To solve this problem, Python’s import machinery has been extended to
use distinct filenames for each interpreter.  Instead of Python 3.2 and
Python 3.3 and Unladen Swallow each competing for a file called
"mymodule.pyc", they will now look for "mymodule.cpython-32.pyc",
"mymodule.cpython-33.pyc", and "mymodule.unladen10.pyc".  And to prevent
all of these new files from cluttering source directories, the `pyc'
files are now collected in a "__pycache__" directory stored under the
package directory.

Aside from the filenames and target directories, the new scheme has a
few aspects that are visible to the programmer:

   * Imported modules now have a *note __cached__: 775. attribute which
     stores the name of the actual file that was imported:

          >>> import collections
          >>> collections.__cached__
          'c:/py32/lib/__pycache__/collections.cpython-32.pyc'

   * The tag that is unique to each interpreter is accessible from the
     *note imp: 99. module:

          >>> import imp
          >>> imp.get_tag()
          'cpython-32'

   * Scripts that try to deduce source filename from the imported file
     now need to be smarter.  It is no longer sufficient to simply strip
     the "c" from a ".pyc" filename.  Instead, use the new functions in
     the *note imp: 99. module:

          >>> imp.source_from_cache('c:/py32/lib/__pycache__/collections.cpython-32.pyc')
          'c:/py32/lib/collections.py'
          >>> imp.cache_from_source('c:/py32/lib/collections.py')
          'c:/py32/lib/__pycache__/collections.cpython-32.pyc'

   * The *note py_compile: d5. and *note compileall: 21. modules have
     been updated to reflect the new naming convention and target
     directory.  The command-line invocation of `compileall' has new
     options: ‘-i’ for specifying a list of files and directories to
     compile and ‘-b’ which causes bytecode files to be written to their
     legacy location rather than `__pycache__'.

   * The *note importlib.abc: 9b. module has been updated with new *note
     abstract base classes: 776. for loading bytecode files.  The
     obsolete ABCs, ‘PyLoader’ and ‘PyPycLoader’, have been deprecated
     (instructions on how to stay Python 3.1 compatible are included
     with the documentation).

See also
........

PEP 3147(1) - PYC Repository Directories

     PEP written by Barry Warsaw.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3147


File: python.info,  Node: PEP 3149 ABI Version Tagged so Files,  Next: PEP 3333 Python Web Server Gateway Interface v1 0 1,  Prev: PEP 3147 PYC Repository Directories,  Up: What's New In Python 3 2

1.5.6 PEP 3149: ABI Version Tagged .so Files
--------------------------------------------

The PYC repository directory allows multiple bytecode cache files to be
co-located.  This PEP implements a similar mechanism for shared object
files by giving them a common directory and distinct names for each
version.

The common directory is "pyshared" and the file names are made distinct
by identifying the Python implementation (such as CPython, PyPy, Jython,
etc.), the major and minor version numbers, and optional build flags
(such as "d" for debug, "m" for pymalloc, "u" for wide-unicode).  For an
arbitrary package "foo", you may see these files when the distribution
package is installed:

     /usr/share/pyshared/foo.cpython-32m.so
     /usr/share/pyshared/foo.cpython-33md.so

In Python itself, the tags are accessible from functions in the *note
sysconfig: fc. module:

     >>> import sysconfig
     >>> sysconfig.get_config_var('SOABI')       # find the version tag
     'cpython-32mu'
     >>> sysconfig.get_config_var('EXT_SUFFIX')  # find the full filename extension
     '.cpython-32mu.so'

See also
........

PEP 3149(1) - ABI Version Tagged .so Files

     PEP written by Barry Warsaw.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3149


File: python.info,  Node: PEP 3333 Python Web Server Gateway Interface v1 0 1,  Next: Other Language Changes<5>,  Prev: PEP 3149 ABI Version Tagged so Files,  Up: What's New In Python 3 2

1.5.7 PEP 3333: Python Web Server Gateway Interface v1.0.1
----------------------------------------------------------

This informational PEP clarifies how bytes/text issues are to be handled
by the WSGI protocol.  The challenge is that string handling in Python 3
is most conveniently handled with the *note str: 25a. type even though
the HTTP protocol is itself bytes oriented.

The PEP differentiates so-called `native strings' that are used for
request/response headers and metadata versus `byte strings' which are
used for the bodies of requests and responses.

The `native strings' are always of type *note str: 25a. but are
restricted to code points between `U+0000' through `U+00FF' which are
translatable to bytes using `Latin-1' encoding.  These strings are used
for the keys and values in the environment dictionary and for response
headers and statuses in the ‘start_response()’ function.  They must
follow RFC 2616(1) with respect to encoding.  That is, they must either
be `ISO-8859-1' characters or use RFC 2047(2) MIME encoding.

For developers porting WSGI applications from Python 2, here are the
salient points:

   * If the app already used strings for headers in Python 2, no change
     is needed.

   * If instead, the app encoded output headers or decoded input
     headers, then the headers will need to be re-encoded to Latin-1.
     For example, an output header encoded in utf-8 was using
     ‘h.encode('utf-8')’ now needs to convert from bytes to native
     strings using ‘h.encode('utf-8').decode('latin-1')’.

   * Values yielded by an application or sent using the ‘write()’ method
     must be byte strings.  The ‘start_response()’ function and environ
     must use native strings.  The two cannot be mixed.

For server implementers writing CGI-to-WSGI pathways or other CGI-style
protocols, the users must to be able access the environment using native
strings even though the underlying platform may have a different
convention.  To bridge this gap, the *note wsgiref: 129. module has a
new function, *note wsgiref.handlers.read_environ(): 779. for
transcoding CGI variables from *note os.environ: 77a. into native
strings and returning a new dictionary.

See also
........

PEP 3333(3) - Python Web Server Gateway Interface v1.0.1

     PEP written by Phillip Eby.

   ---------- Footnotes ----------

   (1) https://tools.ietf.org/html/rfc2616.html

   (2) https://tools.ietf.org/html/rfc2047.html

   (3) https://www.python.org/dev/peps/pep-3333


File: python.info,  Node: Other Language Changes<5>,  Next: New Improved and Deprecated Modules,  Prev: PEP 3333 Python Web Server Gateway Interface v1 0 1,  Up: What's New In Python 3 2

1.5.8 Other Language Changes
----------------------------

Some smaller changes made to the core Python language are:

   * String formatting for *note format(): 14e. and *note str.format():
     14d. gained new capabilities for the format character `#'.
     Previously, for integers in binary, octal, or hexadecimal, it
     caused the output to be prefixed with ’0b’, ’0o’, or ’0x’
     respectively.  Now it can also handle floats, complex, and Decimal,
     causing the output to always have a decimal point even when no
     digits follow it.

          >>> format(20, '#o')
          '0o24'
          >>> format(12.34, '#5.0f')
          '  12.'

     (Suggested by Mark Dickinson and implemented by Eric Smith in issue
     7094(1).)

   * There is also a new *note str.format_map(): 257. method that
     extends the capabilities of the existing *note str.format(): 14d.
     method by accepting arbitrary *note mapping: 77c. objects.  This
     new method makes it possible to use string formatting with any of
     Python’s many dictionary-like objects such as *note defaultdict:
     77d, *note Shelf: 4ad, *note ConfigParser: 26c, or *note dbm: 30.
     It is also useful with custom *note dict: 3b0. subclasses that
     normalize keys before look-up or that supply a *note __missing__():
     77e. method for unknown keys:

          >>> import shelve
          >>> d = shelve.open('tmp.shl')
          >>> 'The {project_name} status is {status} as of {date}'.format_map(d)
          'The testing project status is green as of February 15, 2011'

          >>> class LowerCasedDict(dict):
                  def __getitem__(self, key):
                      return dict.__getitem__(self, key.lower())
          >>> lcd = LowerCasedDict(part='widgets', quantity=10)
          >>> 'There are {QUANTITY} {Part} in stock'.format_map(lcd)
          'There are 10 widgets in stock'

          >>> class PlaceholderDict(dict):
                  def __missing__(self, key):
                      return '<{}>'.format(key)
          >>> 'Hello {name}, welcome to {location}'.format_map(PlaceholderDict())
          'Hello <name>, welcome to <location>'

     (Suggested by Raymond Hettinger and implemented by Eric Smith in
     issue 6081(2).)

   * The interpreter can now be started with a quiet option, ‘-q’, to
     prevent the copyright and version information from being displayed
     in the interactive mode.  The option can be introspected using the
     *note sys.flags: 77f. attribute:

          $ python -q
          >>> sys.flags
          sys.flags(debug=0, division_warning=0, inspect=0, interactive=0,
          optimize=0, dont_write_bytecode=0, no_user_site=0, no_site=0,
          ignore_environment=0, verbose=0, bytes_warning=0, quiet=1)

     (Contributed by Marcin Wojdyr in issue 1772833(3)).

   * The *note hasattr(): 780. function works by calling *note
     getattr(): 781. and detecting whether an exception is raised.  This
     technique allows it to detect methods created dynamically by *note
     __getattr__(): 782. or *note __getattribute__(): 783. which would
     otherwise be absent from the class dictionary.  Formerly, `hasattr'
     would catch any exception, possibly masking genuine errors.  Now,
     `hasattr' has been tightened to only catch *note AttributeError:
     356. and let other exceptions pass through:

          >>> class A:
                  @property
                  def f(self):
                      return 1 // 0

          >>> a = A()
          >>> hasattr(a, 'f')
          Traceback (most recent call last):
            ...
          ZeroDivisionError: integer division or modulo by zero

     (Discovered by Yury Selivanov and fixed by Benjamin Peterson; issue
     9666(4).)

   * The *note str(): 25a. of a float or complex number is now the same
     as its *note repr(): 3bb.  Previously, the *note str(): 25a. form
     was shorter but that just caused confusion and is no longer needed
     now that the shortest possible *note repr(): 3bb. is displayed by
     default:

          >>> import math
          >>> repr(math.pi)
          '3.141592653589793'
          >>> str(math.pi)
          '3.141592653589793'

     (Proposed and implemented by Mark Dickinson; issue 9337(5).)

   * *note memoryview: 1b7. objects now have a *note release(): 784.
     method and they also now support the context management protocol.
     This allows timely release of any resources that were acquired when
     requesting a buffer from the original object.

          >>> with memoryview(b'abcdefgh') as v:
                  print(v.tolist())
          [97, 98, 99, 100, 101, 102, 103, 104]

     (Added by Antoine Pitrou; issue 9757(6).)

   * Previously it was illegal to delete a name from the local namespace
     if it occurs as a free variable in a nested block:

          def outer(x):
              def inner():
                 return x
              inner()
              del x

     This is now allowed.  Remember that the target of an *note except:
     785. clause is cleared, so this code which used to work with Python
     2.6, raised a *note SyntaxError: 3a6. with Python 3.1 and now works
     again:

          def f():
              def print_error():
                 print(e)
              try:
                 something
              except Exception as e:
                 print_error()
                 # implicit "del e" here

     (See issue 4617(7).)

   * The internal ‘structsequence’ tool now creates subclasses of tuple.
     This means that C structures like those returned by *note
     os.stat(): 1e2, *note time.gmtime(): 786, and *note
     sys.version_info: 75c. now work like a *note named tuple: 787. and
     now work with functions and methods that expect a tuple as an
     argument.  This is a big step forward in making the C structures as
     flexible as their pure Python counterparts:

          >>> isinstance(sys.version_info, tuple)
          True
          >>> 'Version %d.%d.%d %s(%d)' % sys.version_info
          'Version 3.2.0 final(0)'

     (Suggested by Arfrever Frehtes Taifersar Arahesis and implemented
     by Benjamin Peterson in issue 8413(8).)

   * Warnings are now easier to control using the *note PYTHONWARNINGS:
     788. environment variable as an alternative to using ‘-W’ at the
     command line:

          $ export PYTHONWARNINGS='ignore::RuntimeWarning::,once::UnicodeWarning::'

     (Suggested by Barry Warsaw and implemented by Philip Jenvey in
     issue 7301(9).)

   * A new warning category, *note ResourceWarning: 166, has been added.
     It is emitted when potential issues with resource consumption or
     cleanup are detected.  It is silenced by default in normal release
     builds but can be enabled through the means provided by the *note
     warnings: 123. module, or on the command line.

     A *note ResourceWarning: 166. is issued at interpreter shutdown if
     the *note gc.garbage: 789. list isn’t empty, and if *note
     gc.DEBUG_UNCOLLECTABLE: 78a. is set, all uncollectable objects are
     printed.  This is meant to make the programmer aware that their
     code contains object finalization issues.

     A *note ResourceWarning: 166. is also issued when a *note file
     object: 78b. is destroyed without having been explicitly closed.
     While the deallocator for such object ensures it closes the
     underlying operating system resource (usually, a file descriptor),
     the delay in deallocating the object could produce various issues,
     especially under Windows.  Here is an example of enabling the
     warning from the command line:

          $ python -q -Wdefault
          >>> f = open("foo", "wb")
          >>> del f
          __main__:1: ResourceWarning: unclosed file <_io.BufferedWriter name='foo'>

     (Added by Antoine Pitrou and Georg Brandl in issue 10093(10) and
     issue 477863(11).)

   * *note range: 5e0. objects now support `index' and `count' methods.
     This is part of an effort to make more objects fully implement the
     ‘collections.Sequence’ *note abstract base class: 776.  As a
     result, the language will have a more uniform API. In addition,
     *note range: 5e0. objects now support slicing and negative indices,
     even with values larger than *note sys.maxsize: 78c.  This makes
     `range' more interoperable with lists:

          >>> range(0, 100, 2).count(10)
          1
          >>> range(0, 100, 2).index(10)
          5
          >>> range(0, 100, 2)[5]
          10
          >>> range(0, 100, 2)[0:5]
          range(0, 10, 2)

     (Contributed by Daniel Stutzbach in issue 9213(12), by Alexander
     Belopolsky in issue 2690(13), and by Nick Coghlan in issue
     10889(14).)

   * The *note callable(): 78d. builtin function from Py2.x was
     resurrected.  It provides a concise, readable alternative to using
     an *note abstract base class: 776. in an expression like
     ‘isinstance(x, collections.Callable)’:

          >>> callable(max)
          True
          >>> callable(20)
          False

     (See issue 10518(15).)

   * Python’s import mechanism can now load modules installed in
     directories with non-ASCII characters in the path name.  This
     solved an aggravating problem with home directories for users with
     non-ASCII characters in their usernames.

     (Required extensive work by Victor Stinner in issue 9425(16).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue7094

   (2) https://bugs.python.org/issue6081

   (3) https://bugs.python.org/issue1772833

   (4) https://bugs.python.org/issue9666

   (5) https://bugs.python.org/issue9337

   (6) https://bugs.python.org/issue9757

   (7) https://bugs.python.org/issue4617

   (8) https://bugs.python.org/issue8413

   (9) https://bugs.python.org/issue7301

   (10) https://bugs.python.org/issue10093

   (11) https://bugs.python.org/issue477863

   (12) https://bugs.python.org/issue9213

   (13) https://bugs.python.org/issue2690

   (14) https://bugs.python.org/issue10889

   (15) https://bugs.python.org/issue10518

   (16) https://bugs.python.org/issue9425


File: python.info,  Node: New Improved and Deprecated Modules,  Next: Multi-threading,  Prev: Other Language Changes<5>,  Up: What's New In Python 3 2

1.5.9 New, Improved, and Deprecated Modules
-------------------------------------------

Python’s standard library has undergone significant maintenance efforts
and quality improvements.

The biggest news for Python 3.2 is that the *note email: 67. package,
*note mailbox: ad. module, and *note nntplib: be. modules now work
correctly with the bytes/text model in Python 3.  For the first time,
there is correct handling of messages with mixed encodings.

Throughout the standard library, there has been more careful attention
to encodings and text versus bytes issues.  In particular, interactions
with the operating system are now better able to exchange non-ASCII data
using the Windows MBCS encoding, locale-aware encodings, or UTF-8.

Another significant win is the addition of substantially better support
for `SSL' connections and security certificates.

In addition, more classes now implement a *note context manager: 165. to
support convenient and reliable resource clean-up using a *note with:
29d. statement.

* Menu:

* email: email<4>. 
* elementtree:: 
* functools: functools<4>. 
* itertools: itertools<2>. 
* collections: collections<4>. 
* threading: threading<4>. 
* datetime and time:: 
* math: math<3>. 
* abc: abc<3>. 
* io: io<3>. 
* reprlib:: 
* logging: logging<4>. 
* csv: csv<2>. 
* contextlib: contextlib<5>. 
* decimal and fractions:: 
* ftp:: 
* popen:: 
* select: select<3>. 
* gzip and zipfile:: 
* tarfile: tarfile<4>. 
* hashlib: hashlib<2>. 
* ast:: 
* os: os<5>. 
* shutil: shutil<4>. 
* sqlite3: sqlite3<4>. 
* html: html<3>. 
* socket: socket<4>. 
* ssl: ssl<4>. 
* nntp:: 
* certificates:: 
* imaplib: imaplib<3>. 
* http.client: http client<2>. 
* unittest: unittest<4>. 
* random:: 
* poplib: poplib<3>. 
* asyncore:: 
* tempfile: tempfile<2>. 
* inspect: inspect<4>. 
* pydoc: pydoc<3>. 
* dis: dis<2>. 
* dbm: dbm<3>. 
* ctypes:: 
* site: site<2>. 
* sysconfig: sysconfig<2>. 
* pdb: pdb<3>. 
* configparser: configparser<2>. 
* urllib.parse: urllib parse. 
* mailbox:: 
* turtledemo:: 


File: python.info,  Node: email<4>,  Next: elementtree,  Up: New Improved and Deprecated Modules

1.5.9.1 email
.............

The usability of the *note email: 67. package in Python 3 has been
mostly fixed by the extensive efforts of R. David Murray.  The problem
was that emails are typically read and stored in the form of *note
bytes: 1db. rather than *note str: 25a. text, and they may contain
multiple encodings within a single email.  So, the email package had to
be extended to parse and generate email messages in bytes format.

   * New functions *note message_from_bytes(): 790. and *note
     message_from_binary_file(): 791, and new classes *note
     BytesFeedParser: 792. and *note BytesParser: 793. allow binary
     message data to be parsed into model objects.

   * Given bytes input to the model, *note get_payload(): 794. will by
     default decode a message body that has a
     ‘Content-Transfer-Encoding’ of `8bit' using the charset specified
     in the MIME headers and return the resulting string.

   * Given bytes input to the model, *note Generator: 795. will convert
     message bodies that have a ‘Content-Transfer-Encoding’ of `8bit' to
     instead have a `7bit' ‘Content-Transfer-Encoding’.

     Headers with unencoded non-ASCII bytes are deemed to be RFC
     2047(1)-encoded using the `unknown-8bit' character set.

   * A new class *note BytesGenerator: 796. produces bytes as output,
     preserving any unchanged non-ASCII data that was present in the
     input used to build the model, including message bodies with a
     ‘Content-Transfer-Encoding’ of `8bit'.

   * The *note smtplib: eb. *note SMTP: 6b9. class now accepts a byte
     string for the `msg' argument to the *note sendmail(): 30f. method,
     and a new method, *note send_message(): 310. accepts a *note
     Message: 3d2. object and can optionally obtain the `from_addr' and
     `to_addrs' addresses directly from the object.

(Proposed and implemented by R. David Murray, issue 4661(2) and issue
10321(3).)

   ---------- Footnotes ----------

   (1) https://tools.ietf.org/html/rfc2047.html

   (2) https://bugs.python.org/issue4661

   (3) https://bugs.python.org/issue10321


File: python.info,  Node: elementtree,  Next: functools<4>,  Prev: email<4>,  Up: New Improved and Deprecated Modules

1.5.9.2 elementtree
...................

The *note xml.etree.ElementTree: 134. package and its
‘xml.etree.cElementTree’ counterpart have been updated to version 1.3.

Several new and useful functions and methods have been added:

   * *note xml.etree.ElementTree.fromstringlist(): 798. which builds an
     XML document from a sequence of fragments

   * *note xml.etree.ElementTree.register_namespace(): 799. for
     registering a global namespace prefix

   * *note xml.etree.ElementTree.tostringlist(): 51a. for string
     representation including all sublists

   * *note xml.etree.ElementTree.Element.extend(): 79a. for appending a
     sequence of zero or more elements

   * *note xml.etree.ElementTree.Element.iterfind(): 79b. searches an
     element and subelements

   * *note xml.etree.ElementTree.Element.itertext(): 79c. creates a text
     iterator over an element and its subelements

   * *note xml.etree.ElementTree.TreeBuilder.end(): 79d. closes the
     current element

   * *note xml.etree.ElementTree.TreeBuilder.doctype(): 79e. handles a
     doctype declaration

Two methods have been deprecated:

   * ‘xml.etree.ElementTree.getchildren()’ use ‘list(elem)’ instead.

   * ‘xml.etree.ElementTree.getiterator()’ use ‘Element.iter’ instead.

For details of the update, see Introducing ElementTree(1) on Fredrik
Lundh’s website.

(Contributed by Florent Xicluna and Fredrik Lundh, issue 6472(2).)

   ---------- Footnotes ----------

   (1) http://effbot.org/zone/elementtree-13-intro.htm

   (2) https://bugs.python.org/issue6472


File: python.info,  Node: functools<4>,  Next: itertools<2>,  Prev: elementtree,  Up: New Improved and Deprecated Modules

1.5.9.3 functools
.................

   * The *note functools: 84. module includes a new decorator for
     caching function calls.  *note functools.lru_cache(): 1c1. can save
     repeated queries to an external resource whenever the results are
     expected to be the same.

     For example, adding a caching decorator to a database query
     function can save database accesses for popular searches:

          >>> import functools
          >>> @functools.lru_cache(maxsize=300)
          >>> def get_phone_number(name):
                  c = conn.cursor()
                  c.execute('SELECT phonenumber FROM phonelist WHERE name=?', (name,))
                  return c.fetchone()[0]

          >>> for name in user_requests:
                  get_phone_number(name)        # cached lookup

     To help with choosing an effective cache size, the wrapped function
     is instrumented for tracking cache statistics:

          >>> get_phone_number.cache_info()
          CacheInfo(hits=4805, misses=980, maxsize=300, currsize=300)

     If the phonelist table gets updated, the outdated contents of the
     cache can be cleared with:

          >>> get_phone_number.cache_clear()

     (Contributed by Raymond Hettinger and incorporating design ideas
     from Jim Baker, Miki Tebeka, and Nick Coghlan; see recipe
     498245(1), recipe 577479(2), issue 10586(3), and issue 10593(4).)

   * The *note functools.wraps(): 462. decorator now adds a
     ‘__wrapped__’ attribute pointing to the original callable function.
     This allows wrapped functions to be introspected.  It also copies
     ‘__annotations__’ if defined.  And now it also gracefully skips
     over missing attributes such as ‘__doc__’ which might not be
     defined for the wrapped callable.

     In the above example, the cache can be removed by recovering the
     original function:

          >>> get_phone_number = get_phone_number.__wrapped__    # uncached function

     (By Nick Coghlan and Terrence Cole; issue 9567(5), issue 3445(6),
     and issue 8814(7).)

   * To help write classes with rich comparison methods, a new decorator
     *note functools.total_ordering(): 440. will use existing equality
     and inequality methods to fill in the remaining methods.

     For example, supplying `__eq__' and `__lt__' will enable *note
     total_ordering(): 440. to fill-in `__le__', `__gt__' and `__ge__':

          @total_ordering
          class Student:
              def __eq__(self, other):
                  return ((self.lastname.lower(), self.firstname.lower()) ==
                          (other.lastname.lower(), other.firstname.lower()))
              def __lt__(self, other):
                  return ((self.lastname.lower(), self.firstname.lower()) <
                          (other.lastname.lower(), other.firstname.lower()))

     With the `total_ordering' decorator, the remaining comparison
     methods are filled in automatically.

     (Contributed by Raymond Hettinger.)

   * To aid in porting programs from Python 2, the *note
     functools.cmp_to_key(): 7a0. function converts an old-style
     comparison function to modern *note key function: 293.:

          >>> # locale-aware sort order
          >>> sorted(iterable, key=cmp_to_key(locale.strcoll))

     For sorting examples and a brief sorting tutorial, see the Sorting
     HowTo(8) tutorial.

     (Contributed by Raymond Hettinger.)

   ---------- Footnotes ----------

   (1) http://code.activestate.com/recipes/498245

   (2) http://code.activestate.com/recipes/577479

   (3) https://bugs.python.org/issue10586

   (4) https://bugs.python.org/issue10593

   (5) https://bugs.python.org/issue9567

   (6) https://bugs.python.org/issue3445

   (7) https://bugs.python.org/issue8814

   (8) https://wiki.python.org/moin/HowTo/Sorting/


File: python.info,  Node: itertools<2>,  Next: collections<4>,  Prev: functools<4>,  Up: New Improved and Deprecated Modules

1.5.9.4 itertools
.................

   * The *note itertools: a1. module has a new *note accumulate(): 64a.
     function modeled on APL’s `scan' operator and Numpy’s `accumulate'
     function:

          >>> from itertools import accumulate
          >>> list(accumulate([8, 2, 50]))
          [8, 10, 60]

          >>> prob_dist = [0.1, 0.4, 0.2, 0.3]
          >>> list(accumulate(prob_dist))      # cumulative probability distribution
          [0.1, 0.5, 0.7, 1.0]

     For an example using *note accumulate(): 64a, see the *note
     examples for the random module: 7a2.

     (Contributed by Raymond Hettinger and incorporating design
     suggestions from Mark Dickinson.)


File: python.info,  Node: collections<4>,  Next: threading<4>,  Prev: itertools<2>,  Up: New Improved and Deprecated Modules

1.5.9.5 collections
...................

   * The *note collections.Counter: 602. class now has two forms of
     in-place subtraction, the existing `-=' operator for saturating
     subtraction(1) and the new *note subtract(): 7a4. method for
     regular subtraction.  The former is suitable for multisets(2) which
     only have positive counts, and the latter is more suitable for use
     cases that allow negative counts:

          >>> tally = Counter(dogs=5, cat=3)
          >>> tally -= Counter(dogs=2, cats=8)    # saturating subtraction
          >>> tally
          Counter({'dogs': 3})

          >>> tally = Counter(dogs=5, cats=3)
          >>> tally.subtract(dogs=2, cats=8)      # regular subtraction
          >>> tally
          Counter({'dogs': 3, 'cats': -5})

     (Contributed by Raymond Hettinger.)

   * The *note collections.OrderedDict: 1bd. class has a new method
     *note move_to_end(): 7a5. which takes an existing key and moves it
     to either the first or last position in the ordered sequence.

     The default is to move an item to the last position.  This is
     equivalent of renewing an entry with ‘od[k] = od.pop(k)’.

     A fast move-to-end operation is useful for resequencing entries.
     For example, an ordered dictionary can be used to track order of
     access by aging entries from the oldest to the most recently
     accessed.

          >>> d = OrderedDict.fromkeys(['a', 'b', 'X', 'd', 'e'])
          >>> list(d)
          ['a', 'b', 'X', 'd', 'e']
          >>> d.move_to_end('X')
          >>> list(d)
          ['a', 'b', 'd', 'e', 'X']

     (Contributed by Raymond Hettinger.)

   * The *note collections.deque: 24e. class grew two new methods *note
     count(): 7a6. and *note reverse(): 7a7. that make them more
     substitutable for *note list: 25d. objects:

          >>> d = deque('simsalabim')
          >>> d.count('s')
          2
          >>> d.reverse()
          >>> d
          deque(['m', 'i', 'b', 'a', 'l', 'a', 's', 'm', 'i', 's'])

     (Contributed by Raymond Hettinger.)

   ---------- Footnotes ----------

   (1) https://en.wikipedia.org/wiki/Saturation_arithmetic

   (2) https://en.wikipedia.org/wiki/Multiset


File: python.info,  Node: threading<4>,  Next: datetime and time,  Prev: collections<4>,  Up: New Improved and Deprecated Modules

1.5.9.6 threading
.................

The *note threading: 106. module has a new *note Barrier: 7a9.
synchronization class for making multiple threads wait until all of them
have reached a common barrier point.  Barriers are useful for making
sure that a task with multiple preconditions does not run until all of
the predecessor tasks are complete.

Barriers can work with an arbitrary number of threads.  This is a
generalization of a Rendezvous(1) which is defined for only two threads.

Implemented as a two-phase cyclic barrier, *note Barrier: 7a9. objects
are suitable for use in loops.  The separate `filling' and `draining'
phases assure that all threads get released (drained) before any one of
them can loop back and re-enter the barrier.  The barrier fully resets
after each cycle.

Example of using barriers:

     from threading import Barrier, Thread

     def get_votes(site):
         ballots = conduct_election(site)
         all_polls_closed.wait()        # do not count until all polls are closed
         totals = summarize(ballots)
         publish(site, totals)

     all_polls_closed = Barrier(len(sites))
     for site in sites:
         Thread(target=get_votes, args=(site,)).start()

In this example, the barrier enforces a rule that votes cannot be
counted at any polling site until all polls are closed.  Notice how a
solution with a barrier is similar to one with *note
threading.Thread.join(): 7aa, but the threads stay alive and continue to
do work (summarizing ballots) after the barrier point is crossed.

If any of the predecessor tasks can hang or be delayed, a barrier can be
created with an optional `timeout' parameter.  Then if the timeout
period elapses before all the predecessor tasks reach the barrier point,
all waiting threads are released and a *note BrokenBarrierError: 7ab.
exception is raised:

     def get_votes(site):
         ballots = conduct_election(site)
         try:
             all_polls_closed.wait(timeout = midnight - time.now())
         except BrokenBarrierError:
             lockbox = seal_ballots(ballots)
             queue.put(lockbox)
         else:
             totals = summarize(ballots)
             publish(site, totals)

In this example, the barrier enforces a more robust rule.  If some
election sites do not finish before midnight, the barrier times-out and
the ballots are sealed and deposited in a queue for later handling.

See Barrier Synchronization Patterns(2) for more examples of how
barriers can be used in parallel computing.  Also, there is a simple but
thorough explanation of barriers in The Little Book of Semaphores(3),
`section 3.6'.

(Contributed by Kristján Valur Jónsson with an API review by Jeffrey
Yasskin in issue 8777(4).)

   ---------- Footnotes ----------

   (1) https://en.wikipedia.org/wiki/Synchronous_rendezvous

   (2) 
http://parlab.eecs.berkeley.edu/wiki/_media/patterns/paraplop_g1_3.pdf

   (3) http://greenteapress.com/semaphores/downey08semaphores.pdf

   (4) https://bugs.python.org/issue8777


File: python.info,  Node: datetime and time,  Next: math<3>,  Prev: threading<4>,  Up: New Improved and Deprecated Modules

1.5.9.7 datetime and time
.........................

   * The *note datetime: 2f. module has a new type *note timezone: 62d.
     that implements the *note tzinfo: 7ad. interface by returning a
     fixed UTC offset and timezone name.  This makes it easier to create
     timezone-aware datetime objects:

          >>> from datetime import datetime, timezone

          >>> datetime.now(timezone.utc)
          datetime.datetime(2010, 12, 8, 21, 4, 2, 923754, tzinfo=datetime.timezone.utc)

          >>> datetime.strptime("01/01/2000 12:00 +0000", "%m/%d/%Y %H:%M %z")
          datetime.datetime(2000, 1, 1, 12, 0, tzinfo=datetime.timezone.utc)

   * Also, *note timedelta: 7ae. objects can now be multiplied by *note
     float: 57a. and divided by *note float: 57a. and *note int: 227.
     objects.  And *note timedelta: 7ae. objects can now divide one
     another.

   * The *note datetime.date.strftime(): 15f. method is no longer
     restricted to years after 1900.  The new supported year range is
     from 1000 to 9999 inclusive.

   * Whenever a two-digit year is used in a time tuple, the
     interpretation has been governed by ‘time.accept2dyear’.  The
     default is `True' which means that for a two-digit year, the
     century is guessed according to the POSIX rules governing the ‘%y’
     strptime format.

     Starting with Py3.2, use of the century guessing heuristic will
     emit a *note DeprecationWarning: 192.  Instead, it is recommended
     that ‘time.accept2dyear’ be set to `False' so that large date
     ranges can be used without guesswork:

          >>> import time, warnings
          >>> warnings.resetwarnings()      # remove the default warning filters

          >>> time.accept2dyear = True      # guess whether 11 means 11 or 2011
          >>> time.asctime((11, 1, 1, 12, 34, 56, 4, 1, 0))
          Warning (from warnings module):
            ...
          DeprecationWarning: Century info guessed for a 2-digit year.
          'Fri Jan  1 12:34:56 2011'

          >>> time.accept2dyear = False     # use the full range of allowable dates
          >>> time.asctime((11, 1, 1, 12, 34, 56, 4, 1, 0))
          'Fri Jan  1 12:34:56 11'

     Several functions now have significantly expanded date ranges.
     When ‘time.accept2dyear’ is false, the *note time.asctime(): 7af.
     function will accept any year that fits in a C int, while the *note
     time.mktime(): 7b0. and *note time.strftime(): 7b1. functions will
     accept the full range supported by the corresponding operating
     system functions.

(Contributed by Alexander Belopolsky and Victor Stinner in issue
1289118(1), issue 5094(2), issue 6641(3), issue 2706(4), issue
1777412(5), issue 8013(6), and issue 10827(7).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue1289118

   (2) https://bugs.python.org/issue5094

   (3) https://bugs.python.org/issue6641

   (4) https://bugs.python.org/issue2706

   (5) https://bugs.python.org/issue1777412

   (6) https://bugs.python.org/issue8013

   (7) https://bugs.python.org/issue10827


File: python.info,  Node: math<3>,  Next: abc<3>,  Prev: datetime and time,  Up: New Improved and Deprecated Modules

1.5.9.8 math
............

The *note math: b0. module has been updated with six new functions
inspired by the C99 standard.

The *note isfinite(): 7b3. function provides a reliable and fast way to
detect special values.  It returns `True' for regular numbers and
`False' for `Nan' or `Infinity':

     >>> [isfinite(x) for x in (123, 4.56, float('Nan'), float('Inf'))]
     [True, True, False, False]

The *note expm1(): 7b4. function computes ‘e**x-1’ for small values of
`x' without incurring the loss of precision that usually accompanies the
subtraction of nearly equal quantities:

     >>> expm1(0.013671875)   # more accurate way to compute e**x-1 for a small x
     0.013765762467652909

The *note erf(): 7b5. function computes a probability integral or
Gaussian error function(1).  The complementary error function, *note
erfc(): 7b6, is ‘1 - erf(x)’:

     >>> erf(1.0/sqrt(2.0))   # portion of normal distribution within 1 standard deviation
     0.682689492137086
     >>> erfc(1.0/sqrt(2.0))  # portion of normal distribution outside 1 standard deviation
     0.31731050786291404
     >>> erf(1.0/sqrt(2.0)) + erfc(1.0/sqrt(2.0))
     1.0

The *note gamma(): 7b7. function is a continuous extension of the
factorial function.  See ‘https://en.wikipedia.org/wiki/Gamma_function’
for details.  Because the function is related to factorials, it grows
large even for small values of `x', so there is also a *note lgamma():
7b8. function for computing the natural logarithm of the gamma function:

     >>> gamma(7.0)           # six factorial
     720.0
     >>> lgamma(801.0)        # log(800 factorial)
     4551.950730698041

(Contributed by Mark Dickinson.)

   ---------- Footnotes ----------

   (1) https://en.wikipedia.org/wiki/Error_function


File: python.info,  Node: abc<3>,  Next: io<3>,  Prev: math<3>,  Up: New Improved and Deprecated Modules

1.5.9.9 abc
...........

The *note abc: 4. module now supports *note abstractclassmethod(): 5f3.
and *note abstractstaticmethod(): 5f5.

These tools make it possible to define an *note abstract base class:
776. that requires a particular *note classmethod(): 5f4. or *note
staticmethod(): 5f6. to be implemented:

     class Temperature(metaclass=abc.ABCMeta):
         @abc.abstractclassmethod
         def from_fahrenheit(cls, t):
             ...
         @abc.abstractclassmethod
         def from_celsius(cls, t):
             ...

(Patch submitted by Daniel Urban; issue 5867(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue5867


File: python.info,  Node: io<3>,  Next: reprlib,  Prev: abc<3>,  Up: New Improved and Deprecated Modules

1.5.9.10 io
...........

The *note io.BytesIO: 371. has a new method, *note getbuffer(): 7bb,
which provides functionality similar to *note memoryview(): 1b7.  It
creates an editable view of the data without making a copy.  The
buffer’s random access and support for slice notation are well-suited to
in-place editing:

     >>> REC_LEN, LOC_START, LOC_LEN = 34, 7, 11

     >>> def change_location(buffer, record_number, location):
             start = record_number * REC_LEN + LOC_START
             buffer[start: start+LOC_LEN] = location

     >>> import io

     >>> byte_stream = io.BytesIO(
         b'G3805  storeroom  Main chassis    '
         b'X7899  shipping   Reserve cog     '
         b'L6988  receiving  Primary sprocket'
     )
     >>> buffer = byte_stream.getbuffer()
     >>> change_location(buffer, 1, b'warehouse  ')
     >>> change_location(buffer, 0, b'showroom   ')
     >>> print(byte_stream.getvalue())
     b'G3805  showroom   Main chassis    '
     b'X7899  warehouse  Reserve cog     '
     b'L6988  receiving  Primary sprocket'

(Contributed by Antoine Pitrou in issue 5506(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue5506


File: python.info,  Node: reprlib,  Next: logging<4>,  Prev: io<3>,  Up: New Improved and Deprecated Modules

1.5.9.11 reprlib
................

When writing a *note __repr__(): 7bd. method for a custom container, it
is easy to forget to handle the case where a member refers back to the
container itself.  Python’s builtin objects such as *note list: 25d. and
*note set: 7be. handle self-reference by displaying "..."  in the
recursive part of the representation string.

To help write such *note __repr__(): 7bd. methods, the *note reprlib:
dd. module has a new decorator, *note recursive_repr(): 7bf, for
detecting recursive calls to *note __repr__(): 7bd. and substituting a
placeholder string instead:

     >>> class MyList(list):
             @recursive_repr()
             def __repr__(self):
                 return '<' + '|'.join(map(repr, self)) + '>'

     >>> m = MyList('abc')
     >>> m.append(m)
     >>> m.append('x')
     >>> print(m)
     <'a'|'b'|'c'|...|'x'>

(Contributed by Raymond Hettinger in issue 9826(1) and issue 9840(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue9826

   (2) https://bugs.python.org/issue9840


File: python.info,  Node: logging<4>,  Next: csv<2>,  Prev: reprlib,  Up: New Improved and Deprecated Modules

1.5.9.12 logging
................

In addition to dictionary-based configuration described above, the *note
logging: a8. package has many other improvements.

The logging documentation has been augmented by a *note basic tutorial:
7c1, an *note advanced tutorial: 7c2, and a *note cookbook: 7c3. of
logging recipes.  These documents are the fastest way to learn about
logging.

The *note logging.basicConfig(): 64c. set-up function gained a `style'
argument to support three different types of string formatting.  It
defaults to "%" for traditional %-formatting, can be set to "{" for the
new *note str.format(): 14d. style, or can be set to "$" for the
shell-style formatting provided by *note string.Template: 7c4.  The
following three configurations are equivalent:

     >>> from logging import basicConfig
     >>> basicConfig(style='%', format="%(name)s -> %(levelname)s: %(message)s")
     >>> basicConfig(style='{', format="{name} -> {levelname} {message}")
     >>> basicConfig(style='$', format="$name -> $levelname: $message")

If no configuration is set-up before a logging event occurs, there is
now a default configuration using a *note StreamHandler: 7c5. directed
to *note sys.stderr: 270. for events of ‘WARNING’ level or higher.
Formerly, an event occurring before a configuration was set-up would
either raise an exception or silently drop the event depending on the
value of ‘logging.raiseExceptions’.  The new default handler is stored
in *note logging.lastResort: 7c6.

The use of filters has been simplified.  Instead of creating a *note
Filter: 7c7. object, the predicate can be any Python callable that
returns `True' or `False'.

There were a number of other improvements that add flexibility and
simplify configuration.  See the module documentation for a full listing
of changes in Python 3.2.


File: python.info,  Node: csv<2>,  Next: contextlib<5>,  Prev: logging<4>,  Up: New Improved and Deprecated Modules

1.5.9.13 csv
............

The *note csv: 29. module now supports a new dialect, *note
unix_dialect: 7c9, which applies quoting for all fields and a
traditional Unix style with ‘'\n'’ as the line terminator.  The
registered dialect name is ‘unix’.

The *note csv.DictWriter: 7ca. has a new method, *note writeheader():
7cb. for writing-out an initial row to document the field names:

     >>> import csv, sys
     >>> w = csv.DictWriter(sys.stdout, ['name', 'dept'], dialect='unix')
     >>> w.writeheader()
     "name","dept"
     >>> w.writerows([
             {'name': 'tom', 'dept': 'accounting'},
             {'name': 'susan', 'dept': 'Salesl'}])
     "tom","accounting"
     "susan","sales"

(New dialect suggested by Jay Talbot in issue 5975(1), and the new
method suggested by Ed Abraham in issue 1537721(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue5975

   (2) https://bugs.python.org/issue1537721


File: python.info,  Node: contextlib<5>,  Next: decimal and fractions,  Prev: csv<2>,  Up: New Improved and Deprecated Modules

1.5.9.14 contextlib
...................

There is a new and slightly mind-blowing tool *note ContextDecorator:
7cd. that is helpful for creating a *note context manager: 165. that
does double duty as a function decorator.

As a convenience, this new functionality is used by *note
contextmanager(): 7ce. so that no extra effort is needed to support both
roles.

The basic idea is that both context managers and function decorators can
be used for pre-action and post-action wrappers.  Context managers wrap
a group of statements using a *note with: 29d. statement, and function
decorators wrap a group of statements enclosed in a function.  So,
occasionally there is a need to write a pre-action or post-action
wrapper that can be used in either role.

For example, it is sometimes useful to wrap functions or groups of
statements with a logger that can track the time of entry and time of
exit.  Rather than writing both a function decorator and a context
manager for the task, the *note contextmanager(): 7ce. provides both
capabilities in a single definition:

     from contextlib import contextmanager
     import logging

     logging.basicConfig(level=logging.INFO)

     @contextmanager
     def track_entry_and_exit(name):
         logging.info('Entering: {}'.format(name))
         yield
         logging.info('Exiting: {}'.format(name))

Formerly, this would have only been usable as a context manager:

     with track_entry_and_exit('widget loader'):
         print('Some time consuming activity goes here')
         load_widget()

Now, it can be used as a decorator as well:

     @track_entry_and_exit('widget loader')
     def activity():
         print('Some time consuming activity goes here')
         load_widget()

Trying to fulfill two roles at once places some limitations on the
technique.  Context managers normally have the flexibility to return an
argument usable by a *note with: 29d. statement, but there is no
parallel for function decorators.

In the above example, there is not a clean way for the
`track_entry_and_exit' context manager to return a logging instance for
use in the body of enclosed statements.

(Contributed by Michael Foord in issue 9110(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue9110


File: python.info,  Node: decimal and fractions,  Next: ftp,  Prev: contextlib<5>,  Up: New Improved and Deprecated Modules

1.5.9.15 decimal and fractions
..............................

Mark Dickinson crafted an elegant and efficient scheme for assuring that
different numeric datatypes will have the same hash value whenever their
actual values are equal (issue 8188(1)):

     assert hash(Fraction(3, 2)) == hash(1.5) == \
            hash(Decimal("1.5")) == hash(complex(1.5, 0))

Some of the hashing details are exposed through a new attribute, *note
sys.hash_info: 528, which describes the bit width of the hash value, the
prime modulus, the hash values for `infinity' and `nan', and the
multiplier used for the imaginary part of a number:

     >>> sys.hash_info
     sys.hash_info(width=64, modulus=2305843009213693951, inf=314159, nan=0, imag=1000003)

An early decision to limit the inter-operability of various numeric
types has been relaxed.  It is still unsupported (and ill-advised) to
have implicit mixing in arithmetic expressions such as ‘Decimal('1.1') +
float('1.1')’ because the latter loses information in the process of
constructing the binary float.  However, since existing floating point
value can be converted losslessly to either a decimal or rational
representation, it makes sense to add them to the constructor and to
support mixed-type comparisons.

   * The *note decimal.Decimal: 618. constructor now accepts *note
     float: 57a. objects directly so there in no longer a need to use
     the *note from_float(): 7d0. method (issue 8257(2)).

   * Mixed type comparisons are now fully supported so that *note
     Decimal: 618. objects can be directly compared with *note float:
     57a. and *note fractions.Fraction: 378. (issue 2531(3) and issue
     8188(4)).

Similar changes were made to *note fractions.Fraction: 378. so that the
*note from_float(): 7d1. and *note from_decimal(): 7d2. methods are no
longer needed (issue 8294(5)):

     >>> Decimal(1.1)
     Decimal('1.100000000000000088817841970012523233890533447265625')
     >>> Fraction(1.1)
     Fraction(2476979795053773, 2251799813685248)

Another useful change for the *note decimal: 34. module is that the
‘Context.clamp’ attribute is now public.  This is useful in creating
contexts that correspond to the decimal interchange formats specified in
IEEE 754 (see issue 8540(6)).

(Contributed by Mark Dickinson and Raymond Hettinger.)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue8188

   (2) https://bugs.python.org/issue8257

   (3) https://bugs.python.org/issue2531

   (4) https://bugs.python.org/issue8188

   (5) https://bugs.python.org/issue8294

   (6) https://bugs.python.org/issue8540


File: python.info,  Node: ftp,  Next: popen,  Prev: decimal and fractions,  Up: New Improved and Deprecated Modules

1.5.9.16 ftp
............

The *note ftplib.FTP: 62f. class now supports the context management
protocol to unconditionally consume *note socket.error: 5b3. exceptions
and to close the FTP connection when done:

     >>> from ftplib import FTP
     >>> with FTP("ftp1.at.proftpd.org") as ftp:
             ftp.login()
             ftp.dir()

     '230 Anonymous login ok, restrictions apply.'
     dr-xr-xr-x   9 ftp      ftp           154 May  6 10:43 .
     dr-xr-xr-x   9 ftp      ftp           154 May  6 10:43 ..
     dr-xr-xr-x   5 ftp      ftp          4096 May  6 10:43 CentOS
     dr-xr-xr-x   3 ftp      ftp            18 Jul 10  2008 Fedora

Other file-like objects such as *note mmap.mmap: 7d4. and *note
fileinput.input(): 7d5. also grew auto-closing context managers:

     with fileinput.input(files=('log1.txt', 'log2.txt')) as f:
         for line in f:
             process(line)

(Contributed by Tarek Ziadé and Giampaolo Rodolà in issue 4972(1), and
by Georg Brandl in issue 8046(2) and issue 1286(3).)

The *note FTP_TLS: 630. class now accepts a `context' parameter, which
is a *note ssl.SSLContext: 1c6. object allowing bundling SSL
configuration options, certificates and private keys into a single
(potentially long-lived) structure.

(Contributed by Giampaolo Rodolà; issue 8806(4).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue4972

   (2) https://bugs.python.org/issue8046

   (3) https://bugs.python.org/issue1286

   (4) https://bugs.python.org/issue8806


File: python.info,  Node: popen,  Next: select<3>,  Prev: ftp,  Up: New Improved and Deprecated Modules

1.5.9.17 popen
..............

The *note os.popen(): 7d7. and *note subprocess.Popen(): 7d8. functions
now support *note with: 29d. statements for auto-closing of the file
descriptors.

(Contributed by Antoine Pitrou and Brian Curtin in issue 7461(1) and
issue 10554(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue7461

   (2) https://bugs.python.org/issue10554


File: python.info,  Node: select<3>,  Next: gzip and zipfile,  Prev: popen,  Up: New Improved and Deprecated Modules

1.5.9.18 select
...............

The *note select: e3. module now exposes a new, constant attribute,
*note PIPE_BUF: 7da, which gives the minimum number of bytes which are
guaranteed not to block when *note select.select(): 209. says a pipe is
ready for writing.

     >>> import select
     >>> select.PIPE_BUF
     512

(Available on Unix systems.  Patch by Sébastien Sablé in issue 9862(1))

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue9862


File: python.info,  Node: gzip and zipfile,  Next: tarfile<4>,  Prev: select<3>,  Up: New Improved and Deprecated Modules

1.5.9.19 gzip and zipfile
.........................

*note gzip.GzipFile: 290. now implements the *note io.BufferedIOBase:
5fe. *note abstract base class: 776. (except for ‘truncate()’).  It also
has a *note peek(): 7dc. method and supports unseekable as well as
zero-padded file objects.

The *note gzip: 8b. module also gains the *note compress(): 7dd. and
*note decompress(): 7de. functions for easier in-memory compression and
decompression.  Keep in mind that text needs to be encoded as *note
bytes: 1db. before compressing and decompressing:

     >>> s = 'Three shall be the number thou shalt count, '
     >>> s += 'and the number of the counting shall be three'
     >>> b = s.encode()                        # convert to utf-8
     >>> len(b)
     89
     >>> c = gzip.compress(b)
     >>> len(c)
     77
     >>> gzip.decompress(c).decode()[:42]      # decompress and convert to text
     'Three shall be the number thou shalt count,'

(Contributed by Anand B. Pillai in issue 3488(1); and by Antoine Pitrou,
Nir Aides and Brian Curtin in issue 9962(2), issue 1675951(3), issue
7471(4) and issue 2846(5).)

Also, the ‘zipfile.ZipExtFile’ class was reworked internally to
represent files stored inside an archive.  The new implementation is
significantly faster and can be wrapped in an *note io.BufferedReader:
7df. object for more speedups.  It also solves an issue where
interleaved calls to `read' and `readline' gave the wrong results.

(Patch submitted by Nir Aides in issue 7610(6).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue3488

   (2) https://bugs.python.org/issue9962

   (3) https://bugs.python.org/issue1675951

   (4) https://bugs.python.org/issue7471

   (5) https://bugs.python.org/issue2846

   (6) https://bugs.python.org/issue7610


File: python.info,  Node: tarfile<4>,  Next: hashlib<2>,  Prev: gzip and zipfile,  Up: New Improved and Deprecated Modules

1.5.9.20 tarfile
................

The *note TarFile: 7e1. class can now be used as a context manager.  In
addition, its *note add(): 7e2. method has a new option, `filter', that
controls which files are added to the archive and allows the file
metadata to be edited.

The new `filter' option replaces the older, less flexible `exclude'
parameter which is now deprecated.  If specified, the optional `filter'
parameter needs to be a *note keyword argument: 7e3.  The user-supplied
filter function accepts a *note TarInfo: 7e4. object and returns an
updated *note TarInfo: 7e4. object, or if it wants the file to be
excluded, the function can return `None':

     >>> import tarfile, glob

     >>> def myfilter(tarinfo):
            if tarinfo.isfile():             # only save real files
                 tarinfo.uname = 'monty'     # redact the user name
                 return tarinfo

     >>> with tarfile.open(name='myarchive.tar.gz', mode='w:gz') as tf:
             for filename in glob.glob('*.txt'):
                 tf.add(filename, filter=myfilter)
             tf.list()
     -rw-r--r-- monty/501        902 2011-01-26 17:59:11 annotations.txt
     -rw-r--r-- monty/501        123 2011-01-26 17:59:11 general_questions.txt
     -rw-r--r-- monty/501       3514 2011-01-26 17:59:11 prion.txt
     -rw-r--r-- monty/501        124 2011-01-26 17:59:11 py_todo.txt
     -rw-r--r-- monty/501       1399 2011-01-26 17:59:11 semaphore_notes.txt

(Proposed by Tarek Ziadé and implemented by Lars Gustäbel in issue
6856(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue6856


File: python.info,  Node: hashlib<2>,  Next: ast,  Prev: tarfile<4>,  Up: New Improved and Deprecated Modules

1.5.9.21 hashlib
................

The *note hashlib: 8c. module has two new constant attributes listing
the hashing algorithms guaranteed to be present in all implementations
and those available on the current implementation:

     >>> import hashlib

     >>> hashlib.algorithms_guaranteed
     {'sha1', 'sha224', 'sha384', 'sha256', 'sha512', 'md5'}

     >>> hashlib.algorithms_available
     {'md2', 'SHA256', 'SHA512', 'dsaWithSHA', 'mdc2', 'SHA224', 'MD4', 'sha256',
     'sha512', 'ripemd160', 'SHA1', 'MDC2', 'SHA', 'SHA384', 'MD2',
     'ecdsa-with-SHA1','md4', 'md5', 'sha1', 'DSA-SHA', 'sha224',
     'dsaEncryption', 'DSA', 'RIPEMD160', 'sha', 'MD5', 'sha384'}

(Suggested by Carl Chenet in issue 7418(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue7418


File: python.info,  Node: ast,  Next: os<5>,  Prev: hashlib<2>,  Up: New Improved and Deprecated Modules

1.5.9.22 ast
............

The *note ast: 8. module has a wonderful a general-purpose tool for
safely evaluating expression strings using the Python literal syntax.
The *note ast.literal_eval(): 7e7. function serves as a secure
alternative to the builtin *note eval(): 7e8. function which is easily
abused.  Python 3.2 adds *note bytes: 1db. and *note set: 7be. literals
to the list of supported types: strings, bytes, numbers, tuples, lists,
dicts, sets, booleans, and None.

     >>> from ast import literal_eval

     >>> request = "{'req': 3, 'func': 'pow', 'args': (2, 0.5)}"
     >>> literal_eval(request)
     {'args': (2, 0.5), 'req': 3, 'func': 'pow'}

     >>> request = "os.system('do something harmful')"
     >>> literal_eval(request)
     Traceback (most recent call last):
       ...
     ValueError: malformed node or string: <_ast.Call object at 0x101739a10>

(Implemented by Benjamin Peterson and Georg Brandl.)


File: python.info,  Node: os<5>,  Next: shutil<4>,  Prev: ast,  Up: New Improved and Deprecated Modules

1.5.9.23 os
...........

Different operating systems use various encodings for filenames and
environment variables.  The *note os: c2. module provides two new
functions, *note fsencode(): 7ea. and *note fsdecode(): 7eb, for
encoding and decoding filenames:

     >>> filename = 'Sehenswürdigkeiten'
     >>> os.fsencode(filename)
     b'Sehensw\xc3\xbcrdigkeiten'

Some operating systems allow direct access to encoded bytes in the
environment.  If so, the *note os.supports_bytes_environ: 7ec. constant
will be true.

For direct access to encoded environment variables (if available), use
the new *note os.getenvb(): 7ed. function or use *note os.environb: 7ee.
which is a bytes version of *note os.environ: 77a.

(Contributed by Victor Stinner.)


File: python.info,  Node: shutil<4>,  Next: sqlite3<4>,  Prev: os<5>,  Up: New Improved and Deprecated Modules

1.5.9.24 shutil
...............

The *note shutil.copytree(): 7f0. function has two new options:

   * `ignore_dangling_symlinks': when ‘symlinks=False’ so that the
     function copies a file pointed to by a symlink, not the symlink
     itself.  This option will silence the error raised if the file
     doesn’t exist.

   * `copy_function': is a callable that will be used to copy files.
     *note shutil.copy2(): 304. is used by default.

(Contributed by Tarek Ziadé.)

In addition, the *note shutil: e7. module now supports *note archiving
operations: 7f1. for zipfiles, uncompressed tarfiles, gzipped tarfiles,
and bzipped tarfiles.  And there are functions for registering
additional archiving file formats (such as xz compressed tarfiles or
custom formats).

The principal functions are *note make_archive(): 305. and *note
unpack_archive(): 7f2.  By default, both operate on the current
directory (which can be set by *note os.chdir(): 673.) and on any
sub-directories.  The archive filename needs to be specified with a full
pathname.  The archiving step is non-destructive (the original files are
left unchanged).

     >>> import shutil, pprint

     >>> os.chdir('mydata')                               # change to the source directory
     >>> f = shutil.make_archive('/var/backup/mydata',
                                 'zip')                   # archive the current directory
     >>> f                                                # show the name of archive
     '/var/backup/mydata.zip'
     >>> os.chdir('tmp')                                  # change to an unpacking
     >>> shutil.unpack_archive('/var/backup/mydata.zip')  # recover the data

     >>> pprint.pprint(shutil.get_archive_formats())      # display known formats
     [('bztar', "bzip2'ed tar-file"),
      ('gztar', "gzip'ed tar-file"),
      ('tar', 'uncompressed tar file'),
      ('zip', 'ZIP file')]

     >>> shutil.register_archive_format(                  # register a new archive format
             name = 'xz',
             function = xz.compress,                      # callable archiving function
             extra_args = [('level', 8)],                 # arguments to the function
             description = 'xz compression'
     )

(Contributed by Tarek Ziadé.)


File: python.info,  Node: sqlite3<4>,  Next: html<3>,  Prev: shutil<4>,  Up: New Improved and Deprecated Modules

1.5.9.25 sqlite3
................

The *note sqlite3: f0. module was updated to pysqlite version 2.6.0.  It
has two new capabilities.

   * The ‘sqlite3.Connection.in_transit’ attribute is true if there is
     an active transaction for uncommitted changes.

   * The *note sqlite3.Connection.enable_load_extension(): 7f4. and
     *note sqlite3.Connection.load_extension(): 7f5. methods allows you
     to load SQLite extensions from ".so" files.  One well-known
     extension is the fulltext-search extension distributed with SQLite.

(Contributed by R. David Murray and Shashwat Anand; issue 8845(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue8845


File: python.info,  Node: html<3>,  Next: socket<4>,  Prev: sqlite3<4>,  Up: New Improved and Deprecated Modules

1.5.9.26 html
.............

A new *note html: 8f. module was introduced with only a single function,
*note escape(): 53c, which is used for escaping reserved characters from
HTML markup:

     >>> import html
     >>> html.escape('x > 2 && x < 7')
     'x &gt; 2 &amp;&amp; x &lt; 7'


File: python.info,  Node: socket<4>,  Next: ssl<4>,  Prev: html<3>,  Up: New Improved and Deprecated Modules

1.5.9.27 socket
...............

The *note socket: ed. module has two new improvements.

   * Socket objects now have a *note detach(): 7f8. method which puts
     the socket into closed state without actually closing the
     underlying file descriptor.  The latter can then be reused for
     other purposes.  (Added by Antoine Pitrou; issue 8524(1).)

   * *note socket.create_connection(): 7f9. now supports the context
     management protocol to unconditionally consume *note socket.error:
     5b3. exceptions and to close the socket when done.  (Contributed by
     Giampaolo Rodolà; issue 9794(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue8524

   (2) https://bugs.python.org/issue9794


File: python.info,  Node: ssl<4>,  Next: nntp,  Prev: socket<4>,  Up: New Improved and Deprecated Modules

1.5.9.28 ssl
............

The *note ssl: f1. module added a number of features to satisfy common
requirements for secure (encrypted, authenticated) internet connections:

   * A new class, *note SSLContext: 1c6, serves as a container for
     persistent SSL data, such as protocol settings, certificates,
     private keys, and various other options.  It includes a *note
     wrap_socket(): 7fb. for creating an SSL socket from an SSL context.

   * A new function, *note ssl.match_hostname(): 32b, supports server
     identity verification for higher-level protocols by implementing
     the rules of HTTPS (from RFC 2818(1)) which are also suitable for
     other protocols.

   * The *note ssl.wrap_socket(): 7fc. constructor function now takes a
     `ciphers' argument.  The `ciphers' string lists the allowed
     encryption algorithms using the format described in the OpenSSL
     documentation(2).

   * When linked against recent versions of OpenSSL, the *note ssl: f1.
     module now supports the Server Name Indication extension to the TLS
     protocol, allowing multiple "virtual hosts" using different
     certificates on a single IP port.  This extension is only supported
     in client mode, and is activated by passing the `server_hostname'
     argument to *note ssl.SSLContext.wrap_socket(): 7fb.

   * Various options have been added to the *note ssl: f1. module, such
     as *note OP_NO_SSLv2: 7fd. which disables the insecure and obsolete
     SSLv2 protocol.

   * The extension now loads all the OpenSSL ciphers and digest
     algorithms.  If some SSL certificates cannot be verified, they are
     reported as an "unknown algorithm" error.

   * The version of OpenSSL being used is now accessible using the
     module attributes *note ssl.OPENSSL_VERSION: 7fe. (a string), *note
     ssl.OPENSSL_VERSION_INFO: 7ff. (a 5-tuple), and *note
     ssl.OPENSSL_VERSION_NUMBER: 800. (an integer).

(Contributed by Antoine Pitrou in issue 8850(3), issue 1589(4), issue
8322(5), issue 5639(6), issue 4870(7), issue 8484(8), and issue
8321(9).)

   ---------- Footnotes ----------

   (1) https://tools.ietf.org/html/rfc2818.html

   (2) http://www.openssl.org/docs/apps/ciphers.html#CIPHER-LIST-FORMAT

   (3) https://bugs.python.org/issue8850

   (4) https://bugs.python.org/issue1589

   (5) https://bugs.python.org/issue8322

   (6) https://bugs.python.org/issue5639

   (7) https://bugs.python.org/issue4870

   (8) https://bugs.python.org/issue8484

   (9) https://bugs.python.org/issue8321


File: python.info,  Node: nntp,  Next: certificates,  Prev: ssl<4>,  Up: New Improved and Deprecated Modules

1.5.9.29 nntp
.............

The *note nntplib: be. module has a revamped implementation with better
bytes and text semantics as well as more practical APIs.  These
improvements break compatibility with the nntplib version in Python 3.1,
which was partly dysfunctional in itself.

Support for secure connections through both implicit (using *note
nntplib.NNTP_SSL: 802.) and explicit (using *note
nntplib.NNTP.starttls(): 803.) TLS has also been added.

(Contributed by Antoine Pitrou in issue 9360(1) and Andrew Vant in issue
1926(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue9360

   (2) https://bugs.python.org/issue1926


File: python.info,  Node: certificates,  Next: imaplib<3>,  Prev: nntp,  Up: New Improved and Deprecated Modules

1.5.9.30 certificates
.....................

*note http.client.HTTPSConnection: 560, *note
urllib.request.HTTPSHandler: 805. and *note urllib.request.urlopen():
35f. now take optional arguments to allow for server certificate
checking against a set of Certificate Authorities, as recommended in
public uses of HTTPS.

(Added by Antoine Pitrou, issue 9003(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue9003


File: python.info,  Node: imaplib<3>,  Next: http client<2>,  Prev: certificates,  Up: New Improved and Deprecated Modules

1.5.9.31 imaplib
................

Support for explicit TLS on standard IMAP4 connections has been added
through the new *note imaplib.IMAP4.starttls: 807. method.

(Contributed by Lorenzo M. Catucci and Antoine Pitrou, issue 4471(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue4471


File: python.info,  Node: http client<2>,  Next: unittest<4>,  Prev: imaplib<3>,  Up: New Improved and Deprecated Modules

1.5.9.32 http.client
....................

There were a number of small API improvements in the *note http.client:
93. module.  The old-style HTTP 0.9 simple responses are no longer
supported and the `strict' parameter is deprecated in all classes.

The *note HTTPConnection: 55f. and *note HTTPSConnection: 560. classes
now have a `source_address' parameter for a (host, port) tuple
indicating where the HTTP connection is made from.

Support for certificate checking and HTTPS virtual hosts were added to
*note HTTPSConnection: 560.

The *note request(): 809. method on connection objects allowed an
optional `body' argument so that a *note file object: 78b. could be used
to supply the content of the request.  Conveniently, the `body' argument
now also accepts an *note iterable: 80a. object so long as it includes
an explicit ‘Content-Length’ header.  This extended interface is much
more flexible than before.

To establish an HTTPS connection through a proxy server, there is a new
*note set_tunnel(): 80b. method that sets the host and port for HTTP
Connect tunneling.

To match the behavior of *note http.server: 96, the HTTP client library
now also encodes headers with ISO-8859-1 (Latin-1) encoding.  It was
already doing that for incoming headers, so now the behavior is
consistent for both incoming and outgoing traffic.  (See work by Armin
Ronacher in issue 10980(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue10980


File: python.info,  Node: unittest<4>,  Next: random,  Prev: http client<2>,  Up: New Improved and Deprecated Modules

1.5.9.33 unittest
.................

The unittest module has a number of improvements supporting test
discovery for packages, easier experimentation at the interactive
prompt, new testcase methods, improved diagnostic messages for test
failures, and better method names.

   * The command-line call ‘python -m unittest’ can now accept file
     paths instead of module names for running specific tests (issue
     10620(1)).  The new test discovery can find tests within packages,
     locating any test importable from the top-level directory.  The
     top-level directory can be specified with the ‘-t’ option, a
     pattern for matching files with ‘-p’, and a directory to start
     discovery with ‘-s’:

          $ python -m unittest discover -s my_proj_dir -p _test.py

     (Contributed by Michael Foord.)

   * Experimentation at the interactive prompt is now easier because the
     ‘unittest.case.TestCase’ class can now be instantiated without
     arguments:

          >>> TestCase().assertEqual(pow(2, 3), 8)

     (Contributed by Michael Foord.)

   * The *note unittest: 118. module has two new methods, *note
     assertWarns(): 6f8. and *note assertWarnsRegex(): 6f9. to verify
     that a given warning type is triggered by the code under test:

          with self.assertWarns(DeprecationWarning):
              legacy_function('XYZ')

     (Contributed by Antoine Pitrou, issue 9754(2).)

     Another new method, *note assertCountEqual(): 80d. is used to
     compare two iterables to determine if their element counts are
     equal (whether the same elements are present with the same number
     of occurrences regardless of order):

          def test_anagram(self):
              self.assertCountEqual('algorithm', 'logarithm')

     (Contributed by Raymond Hettinger.)

   * A principal feature of the unittest module is an effort to produce
     meaningful diagnostics when a test fails.  When possible, the
     failure is recorded along with a diff of the output.  This is
     especially helpful for analyzing log files of failed test runs.
     However, since diffs can sometime be voluminous, there is a new
     *note maxDiff: 80e. attribute that sets maximum length of diffs
     displayed.

   * In addition, the method names in the module have undergone a number
     of clean-ups.

     For example, *note assertRegex(): 80f. is the new name for
     ‘assertRegexpMatches()’ which was misnamed because the test uses
     *note re.search(): 810, not *note re.match(): 811.  Other methods
     using regular expressions are now named using short form "Regex" in
     preference to "Regexp" – this matches the names used in other
     unittest implementations, matches Python’s old name for the *note
     re: db. module, and it has unambiguous camel-casing.

     (Contributed by Raymond Hettinger and implemented by Ezio Melotti.)

   * To improve consistency, some long-standing method aliases are being
     deprecated in favor of the preferred names:

          Old Name                            Preferred Name
                                              
          -----------------------------------------------------------------------
                                              
          ‘assert_()’                         *note assertTrue(): 812.
                                              
                                              
          ‘assertEquals()’                    *note assertEqual(): 813.
                                              
                                              
          ‘assertNotEquals()’                 *note assertNotEqual(): 814.
                                              
                                              
          ‘assertAlmostEquals()’              *note assertAlmostEqual(): 815.
                                              
                                              
          ‘assertNotAlmostEquals()’           *note assertNotAlmostEqual(): 816.
                                              

     Likewise, the ‘TestCase.fail*’ methods deprecated in Python 3.1 are
     expected to be removed in Python 3.3.  Also see the *note
     Deprecated aliases: 817. section in the *note unittest: 118.
     documentation.

     (Contributed by Ezio Melotti; issue 9424(3).)

   * The ‘assertDictContainsSubset()’ method was deprecated because it
     was misimplemented with the arguments in the wrong order.  This
     created hard-to-debug optical illusions where tests like
     ‘TestCase().assertDictContainsSubset({'a':1, 'b':2}, {'a':1})’
     would fail.

     (Contributed by Raymond Hettinger.)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue10620

   (2) https://bugs.python.org/issue9754

   (3) https://bugs.python.org/issue9424


File: python.info,  Node: random,  Next: poplib<3>,  Prev: unittest<4>,  Up: New Improved and Deprecated Modules

1.5.9.34 random
...............

The integer methods in the *note random: da. module now do a better job
of producing uniform distributions.  Previously, they computed
selections with ‘int(n*random())’ which had a slight bias whenever `n'
was not a power of two.  Now, multiple selections are made from a range
up to the next power of two and a selection is kept only when it falls
within the range ‘0 <= x < n’.  The functions and methods affected are
*note randrange(): 819, *note randint(): 81a, *note choice(): 81b, *note
shuffle(): 81c. and *note sample(): 81d.

(Contributed by Raymond Hettinger; issue 9025(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue9025


File: python.info,  Node: poplib<3>,  Next: asyncore,  Prev: random,  Up: New Improved and Deprecated Modules

1.5.9.35 poplib
...............

*note POP3_SSL: 81f. class now accepts a `context' parameter, which is a
*note ssl.SSLContext: 1c6. object allowing bundling SSL configuration
options, certificates and private keys into a single (potentially
long-lived) structure.

(Contributed by Giampaolo Rodolà; issue 8807(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue8807


File: python.info,  Node: asyncore,  Next: tempfile<2>,  Prev: poplib<3>,  Up: New Improved and Deprecated Modules

1.5.9.36 asyncore
.................

*note asyncore.dispatcher: 821. now provides a *note handle_accepted():
822. method returning a ‘(sock, addr)’ pair which is called when a
connection has actually been established with a new remote endpoint.
This is supposed to be used as a replacement for old *note
handle_accept(): 823. and avoids the user to call *note accept(): 824.
directly.

(Contributed by Giampaolo Rodolà; issue 6706(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue6706


File: python.info,  Node: tempfile<2>,  Next: inspect<4>,  Prev: asyncore,  Up: New Improved and Deprecated Modules

1.5.9.37 tempfile
.................

The *note tempfile: 101. module has a new context manager, *note
TemporaryDirectory: 826. which provides easy deterministic cleanup of
temporary directories:

     with tempfile.TemporaryDirectory() as tmpdirname:
         print('created temporary dir:', tmpdirname)

(Contributed by Neil Schemenauer and Nick Coghlan; issue 5178(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue5178


File: python.info,  Node: inspect<4>,  Next: pydoc<3>,  Prev: tempfile<2>,  Up: New Improved and Deprecated Modules

1.5.9.38 inspect
................

   * The *note inspect: 9e. module has a new function *note
     getgeneratorstate(): 828. to easily identify the current state of a
     generator-iterator:

          >>> from inspect import getgeneratorstate
          >>> def gen():
                  yield 'demo'
          >>> g = gen()
          >>> getgeneratorstate(g)
          'GEN_CREATED'
          >>> next(g)
          'demo'
          >>> getgeneratorstate(g)
          'GEN_SUSPENDED'
          >>> next(g, None)
          >>> getgeneratorstate(g)
          'GEN_CLOSED'

     (Contributed by Rodolpho Eckhardt and Nick Coghlan, issue
     10220(1).)

   * To support lookups without the possibility of activating a dynamic
     attribute, the *note inspect: 9e. module has a new function, *note
     getattr_static(): 829.  Unlike *note hasattr(): 780, this is a true
     read-only search, guaranteed not to change state while it is
     searching:

          >>> class A:
                  @property
                  def f(self):
                      print('Running')
                      return 10

          >>> a = A()
          >>> getattr(a, 'f')
          Running
          10
          >>> inspect.getattr_static(a, 'f')
          <property object at 0x1022bd788>

     (Contributed by Michael Foord.)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue10220


File: python.info,  Node: pydoc<3>,  Next: dis<2>,  Prev: inspect<4>,  Up: New Improved and Deprecated Modules

1.5.9.39 pydoc
..............

The *note pydoc: d7. module now provides a much-improved Web server
interface, as well as a new command-line option ‘-b’ to automatically
open a browser window to display that server:

     $ pydoc3.2 -b

(Contributed by Ron Adam; issue 2001(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue2001


File: python.info,  Node: dis<2>,  Next: dbm<3>,  Prev: pydoc<3>,  Up: New Improved and Deprecated Modules

1.5.9.40 dis
............

The *note dis: 36. module gained two new functions for inspecting code,
*note code_info(): 82c. and *note show_code(): 423.  Both provide
detailed code object information for the supplied function, method,
source code string or code object.  The former returns a string and the
latter prints it:

     >>> import dis, random
     >>> dis.show_code(random.choice)
     Name:              choice
     Filename:          /Library/Frameworks/Python.framework/Versions/3.2/lib/python3.2/random.py
     Argument count:    2
     Kw-only arguments: 0
     Number of locals:  3
     Stack size:        11
     Flags:             OPTIMIZED, NEWLOCALS, NOFREE
     Constants:
        0: 'Choose a random element from a non-empty sequence.'
        1: 'Cannot choose from an empty sequence'
     Names:
        0: _randbelow
        1: len
        2: ValueError
        3: IndexError
     Variable names:
        0: self
        1: seq
        2: i

In addition, the *note dis(): 424. function now accepts string arguments
so that the common idiom ‘dis(compile(s, '', 'eval'))’ can be shortened
to ‘dis(s)’:

     >>> dis('3*x+1 if x%2==1 else x//2')
       1           0 LOAD_NAME                0 (x)
                   3 LOAD_CONST               0 (2)
                   6 BINARY_MODULO
                   7 LOAD_CONST               1 (1)
                  10 COMPARE_OP               2 (==)
                  13 POP_JUMP_IF_FALSE       28
                  16 LOAD_CONST               2 (3)
                  19 LOAD_NAME                0 (x)
                  22 BINARY_MULTIPLY
                  23 LOAD_CONST               1 (1)
                  26 BINARY_ADD
                  27 RETURN_VALUE
             >>   28 LOAD_NAME                0 (x)
                  31 LOAD_CONST               0 (2)
                  34 BINARY_FLOOR_DIVIDE
                  35 RETURN_VALUE

Taken together, these improvements make it easier to explore how CPython
is implemented and to see for yourself what the language syntax does
under-the-hood.

(Contributed by Nick Coghlan in issue 9147(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue9147


File: python.info,  Node: dbm<3>,  Next: ctypes,  Prev: dis<2>,  Up: New Improved and Deprecated Modules

1.5.9.41 dbm
............

All database modules now support the ‘get()’ and ‘setdefault()’ methods.

(Suggested by Ray Allen in issue 9523(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue9523


File: python.info,  Node: ctypes,  Next: site<2>,  Prev: dbm<3>,  Up: New Improved and Deprecated Modules

1.5.9.42 ctypes
...............

A new type, *note ctypes.c_ssize_t: 82f. represents the C ‘ssize_t’
datatype.


File: python.info,  Node: site<2>,  Next: sysconfig<2>,  Prev: ctypes,  Up: New Improved and Deprecated Modules

1.5.9.43 site
.............

The *note site: e9. module has three new functions useful for reporting
on the details of a given Python installation.

   * *note getsitepackages(): 831. lists all global site-packages
     directories.

   * *note getuserbase(): 832. reports on the user’s base directory
     where data can be stored.

   * *note getusersitepackages(): 833. reveals the user-specific
     site-packages directory path.

     >>> import site
     >>> site.getsitepackages()
     ['/Library/Frameworks/Python.framework/Versions/3.2/lib/python3.2/site-packages',
      '/Library/Frameworks/Python.framework/Versions/3.2/lib/site-python',
      '/Library/Python/3.2/site-packages']
     >>> site.getuserbase()
     '/Users/raymondhettinger/Library/Python/3.2'
     >>> site.getusersitepackages()
     '/Users/raymondhettinger/Library/Python/3.2/lib/python/site-packages'

Conveniently, some of site’s functionality is accessible directly from
the command-line:

     $ python -m site --user-base
     /Users/raymondhettinger/.local
     $ python -m site --user-site
     /Users/raymondhettinger/.local/lib/python3.2/site-packages

(Contributed by Tarek Ziadé in issue 6693(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue6693


File: python.info,  Node: sysconfig<2>,  Next: pdb<3>,  Prev: site<2>,  Up: New Improved and Deprecated Modules

1.5.9.44 sysconfig
..................

The new *note sysconfig: fc. module makes it straightforward to discover
installation paths and configuration variables that vary across
platforms and installations.

The module offers access simple access functions for platform and
version information:

   * *note get_platform(): 835. returning values like `linux-i586' or
     `macosx-10.6-ppc'.

   * *note get_python_version(): 836. returns a Python version string
     such as "3.2".

It also provides access to the paths and variables corresponding to one
of seven named schemes used by *note distutils: 37.  Those include
`posix_prefix', `posix_home', `posix_user', `nt', `nt_user', `os2',
`os2_home':

   * *note get_paths(): 837. makes a dictionary containing installation
     paths for the current installation scheme.

   * *note get_config_vars(): 581. returns a dictionary of platform
     specific variables.

There is also a convenient command-line interface:

     C:\Python32>python -m sysconfig
     Platform: "win32"
     Python version: "3.2"
     Current installation scheme: "nt"

     Paths:
             data = "C:\Python32"
             include = "C:\Python32\Include"
             platinclude = "C:\Python32\Include"
             platlib = "C:\Python32\Lib\site-packages"
             platstdlib = "C:\Python32\Lib"
             purelib = "C:\Python32\Lib\site-packages"
             scripts = "C:\Python32\Scripts"
             stdlib = "C:\Python32\Lib"

     Variables:
             BINDIR = "C:\Python32"
             BINLIBDEST = "C:\Python32\Lib"
             EXE = ".exe"
             INCLUDEPY = "C:\Python32\Include"
             LIBDEST = "C:\Python32\Lib"
             SO = ".pyd"
             VERSION = "32"
             abiflags = ""
             base = "C:\Python32"
             exec_prefix = "C:\Python32"
             platbase = "C:\Python32"
             prefix = "C:\Python32"
             projectbase = "C:\Python32"
             py_version = "3.2"
             py_version_nodot = "32"
             py_version_short = "3.2"
             srcdir = "C:\Python32"
             userbase = "C:\Documents and Settings\Raymond\Application Data\Python"

(Moved out of Distutils by Tarek Ziadé.)


File: python.info,  Node: pdb<3>,  Next: configparser<2>,  Prev: sysconfig<2>,  Up: New Improved and Deprecated Modules

1.5.9.45 pdb
............

The *note pdb: c7. debugger module gained a number of usability
improvements:

   * ‘pdb.py’ now has a ‘-c’ option that executes commands as given in a
     ‘.pdbrc’ script file.

   * A ‘.pdbrc’ script file can contain ‘continue’ and ‘next’ commands
     that continue debugging.

   * The ‘Pdb’ class constructor now accepts a `nosigint' argument.

   * New commands: ‘l(list)’, ‘ll(long list)’ and ‘source’ for listing
     source code.

   * New commands: ‘display’ and ‘undisplay’ for showing or hiding the
     value of an expression if it has changed.

   * New command: ‘interact’ for starting an interactive interpreter
     containing the global and local names found in the current scope.

   * Breakpoints can be cleared by breakpoint number.

(Contributed by Georg Brandl, Antonio Cuni and Ilya Sandler.)


File: python.info,  Node: configparser<2>,  Next: urllib parse,  Prev: pdb<3>,  Up: New Improved and Deprecated Modules

1.5.9.46 configparser
.....................

The *note configparser: 23. module was modified to improve usability and
predictability of the default parser and its supported INI syntax.  The
old ‘ConfigParser’ class was removed in favor of ‘SafeConfigParser’
which has in turn been renamed to *note ConfigParser: 26c.  Support for
inline comments is now turned off by default and section or option
duplicates are not allowed in a single configuration source.

Config parsers gained a new API based on the mapping protocol:

     >>> parser = ConfigParser()
     >>> parser.read_string("""
     [DEFAULT]
     location = upper left
     visible = yes
     editable = no
     color = blue

     [main]
     title = Main Menu
     color = green

     [options]
     title = Options
     """)
     >>> parser['main']['color']
     'green'
     >>> parser['main']['editable']
     'no'
     >>> section = parser['options']
     >>> section['title']
     'Options'
     >>> section['title'] = 'Options (editable: %(editable)s)'
     >>> section['title']
     'Options (editable: no)'

The new API is implemented on top of the classical API, so custom parser
subclasses should be able to use it without modifications.

The INI file structure accepted by config parsers can now be customized.
Users can specify alternative option/value delimiters and comment
prefixes, change the name of the `DEFAULT' section or switch the
interpolation syntax.

There is support for pluggable interpolation including an additional
interpolation handler *note ExtendedInterpolation: 83a.:

     >>> parser = ConfigParser(interpolation=ExtendedInterpolation())
     >>> parser.read_dict({'buildout': {'directory': '/home/ambv/zope9'},
                           'custom': {'prefix': '/usr/local'}})
     >>> parser.read_string("""
         [buildout]
         parts =
           zope9
           instance
         find-links =
           ${buildout:directory}/downloads/dist

         [zope9]
         recipe = plone.recipe.zope9install
         location = /opt/zope

         [instance]
         recipe = plone.recipe.zope9instance
         zope9-location = ${zope9:location}
         zope-conf = ${custom:prefix}/etc/zope.conf
         """)
     >>> parser['buildout']['find-links']
     '\n/home/ambv/zope9/downloads/dist'
     >>> parser['instance']['zope-conf']
     '/usr/local/etc/zope.conf'
     >>> instance = parser['instance']
     >>> instance['zope-conf']
     '/usr/local/etc/zope.conf'
     >>> instance['zope9-location']
     '/opt/zope'

A number of smaller features were also introduced, like support for
specifying encoding in read operations, specifying fallback values for
get-functions, or reading directly from dictionaries and strings.

(All changes contributed by Łukasz Langa.)


File: python.info,  Node: urllib parse,  Next: mailbox,  Prev: configparser<2>,  Up: New Improved and Deprecated Modules

1.5.9.47 urllib.parse
.....................

A number of usability improvements were made for the *note urllib.parse:
11c. module.

The *note urlparse(): 19b. function now supports IPv6(1) addresses as
described in RFC 2732(2):

     >>> import urllib.parse
     >>> urllib.parse.urlparse('http://[dead:beef:cafe:5417:affe:8FA3:deaf:feed]/foo/')
     ParseResult(scheme='http',
                 netloc='[dead:beef:cafe:5417:affe:8FA3:deaf:feed]',
                 path='/foo/',
                 params='',
                 query='',
                 fragment='')

The *note urldefrag(): 83c. function now returns a *note named tuple:
787.:

     >>> r = urllib.parse.urldefrag('http://python.org/about/#target')
     >>> r
     DefragResult(url='http://python.org/about/', fragment='target')
     >>> r[0]
     'http://python.org/about/'
     >>> r.fragment
     'target'

And, the *note urlencode(): 35e. function is now much more flexible,
accepting either a string or bytes type for the `query' argument.  If it
is a string, then the `safe', `encoding', and `error' parameters are
sent to *note quote_plus(): 83d. for encoding:

     >>> urllib.parse.urlencode([
              ('type', 'telenovela'),
              ('name', '¿Dónde Está Elisa?')],
              encoding='latin-1')
     'type=telenovela&name=%BFD%F3nde+Est%E1+Elisa%3F'

As detailed in *note Parsing ASCII Encoded Bytes: 83e, all the *note
urllib.parse: 11c. functions now accept ASCII-encoded byte strings as
input, so long as they are not mixed with regular strings.  If
ASCII-encoded byte strings are given as parameters, the return types
will also be an ASCII-encoded byte strings:

     >>> urllib.parse.urlparse(b'http://www.python.org:80/about/')
     ParseResultBytes(scheme=b'http', netloc=b'www.python.org:80',
                      path=b'/about/', params=b'', query=b'', fragment=b'')

(Work by Nick Coghlan, Dan Mahn, and Senthil Kumaran in issue 2987(3),
issue 5468(4), and issue 9873(5).)

   ---------- Footnotes ----------

   (1) https://en.wikipedia.org/wiki/IPv6

   (2) https://tools.ietf.org/html/rfc2732.html

   (3) https://bugs.python.org/issue2987

   (4) https://bugs.python.org/issue5468

   (5) https://bugs.python.org/issue9873


File: python.info,  Node: mailbox,  Next: turtledemo,  Prev: urllib parse,  Up: New Improved and Deprecated Modules

1.5.9.48 mailbox
................

Thanks to a concerted effort by R. David Murray, the *note mailbox: ad.
module has been fixed for Python 3.2.  The challenge was that mailbox
had been originally designed with a text interface, but email messages
are best represented with *note bytes: 1db. because various parts of a
message may have different encodings.

The solution harnessed the *note email: 67. package’s binary support for
parsing arbitrary email messages.  In addition, the solution required a
number of API changes.

As expected, the *note add(): 840. method for *note mailbox.Mailbox:
841. objects now accepts binary input.

*note StringIO: 41e. and text file input are deprecated.  Also, string
input will fail early if non-ASCII characters are used.  Previously it
would fail when the email was processed in a later step.

There is also support for binary output.  The *note get_file(): 842.
method now returns a file in the binary mode (where it used to
incorrectly set the file to text-mode).  There is also a new *note
get_bytes(): 843. method that returns a *note bytes: 1db. representation
of a message corresponding to a given `key'.

It is still possible to get non-binary output using the old API’s *note
get_string(): 844. method, but that approach is not very useful.
Instead, it is best to extract messages from a *note Message: 845.
object or to load them from binary input.

(Contributed by R. David Murray, with efforts from Steffen Daode
Nurpmeso and an initial patch by Victor Stinner in issue 9124(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue9124


File: python.info,  Node: turtledemo,  Prev: mailbox,  Up: New Improved and Deprecated Modules

1.5.9.49 turtledemo
...................

The demonstration code for the *note turtle: 113. module was moved from
the `Demo' directory to main library.  It includes over a dozen sample
scripts with lively displays.  Being on *note sys.path: 16c, it can now
be run directly from the command-line:

     $ python -m turtledemo

(Moved from the Demo directory by Alexander Belopolsky in issue
10199(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue10199


File: python.info,  Node: Multi-threading,  Next: Optimizations<4>,  Prev: New Improved and Deprecated Modules,  Up: What's New In Python 3 2

1.5.10 Multi-threading
----------------------

   * The mechanism for serializing execution of concurrently running
     Python threads (generally known as the *note GIL: 848. or *note
     Global Interpreter Lock: 153.) has been rewritten.  Among the
     objectives were more predictable switching intervals and reduced
     overhead due to lock contention and the number of ensuing system
     calls.  The notion of a "check interval" to allow thread switches
     has been abandoned and replaced by an absolute duration expressed
     in seconds.  This parameter is tunable through *note
     sys.setswitchinterval(): 849.  It currently defaults to 5
     milliseconds.

     Additional details about the implementation can be read from a
     python-dev mailing-list message(1) (however, "priority requests" as
     exposed in this message have not been kept for inclusion).

     (Contributed by Antoine Pitrou.)

   * Regular and recursive locks now accept an optional `timeout'
     argument to their *note acquire(): 33d. method.  (Contributed by
     Antoine Pitrou; issue 7316(2).)

   * Similarly, *note threading.Semaphore.acquire(): 84a. also gained a
     `timeout' argument.  (Contributed by Torsten Landschoff; issue
     850728(3).)

   * Regular and recursive lock acquisitions can now be interrupted by
     signals on platforms using Pthreads.  This means that Python
     programs that deadlock while acquiring locks can be successfully
     killed by repeatedly sending SIGINT to the process (by pressing
     ‘Ctrl+C’ in most shells).  (Contributed by Reid Kleckner; issue
     8844(4).)

   ---------- Footnotes ----------

   (1) 
https://mail.python.org/pipermail/python-dev/2009-October/093321.html

   (2) https://bugs.python.org/issue7316

   (3) https://bugs.python.org/issue850728

   (4) https://bugs.python.org/issue8844


File: python.info,  Node: Optimizations<4>,  Next: Unicode,  Prev: Multi-threading,  Up: What's New In Python 3 2

1.5.11 Optimizations
--------------------

A number of small performance enhancements have been added:

   * Python’s peephole optimizer now recognizes patterns such ‘x in {1,
     2, 3}’ as being a test for membership in a set of constants.  The
     optimizer recasts the *note set: 7be. as a *note frozenset: 84c.
     and stores the pre-built constant.

     Now that the speed penalty is gone, it is practical to start
     writing membership tests using set-notation.  This style is both
     semantically clear and operationally fast:

          extension = name.rpartition('.')[2]
          if extension in {'xml', 'html', 'xhtml', 'css'}:
              handle(name)

     (Patch and additional tests contributed by Dave Malcolm; issue
     6690(1)).

   * Serializing and unserializing data using the *note pickle: c8.
     module is now several times faster.

     (Contributed by Alexandre Vassalotti, Antoine Pitrou and the
     Unladen Swallow team in issue 9410(2) and issue 3873(3).)

   * The Timsort algorithm(4) used in *note list.sort(): 84d. and *note
     sorted(): 84e. now runs faster and uses less memory when called
     with a *note key function: 293.  Previously, every element of a
     list was wrapped with a temporary object that remembered the key
     value associated with each element.  Now, two arrays of keys and
     values are sorted in parallel.  This saves the memory consumed by
     the sort wrappers, and it saves time lost to delegating
     comparisons.

     (Patch by Daniel Stutzbach in issue 9915(5).)

   * JSON decoding performance is improved and memory consumption is
     reduced whenever the same string is repeated for multiple keys.
     Also, JSON encoding now uses the C speedups when the ‘sort_keys’
     argument is true.

     (Contributed by Antoine Pitrou in issue 7451(6) and by Raymond
     Hettinger and Antoine Pitrou in issue 10314(7).)

   * Recursive locks (created with the *note threading.RLock(): 84f.
     API) now benefit from a C implementation which makes them as fast
     as regular locks, and between 10x and 15x faster than their
     previous pure Python implementation.

     (Contributed by Antoine Pitrou; issue 3001(8).)

   * The fast-search algorithm in stringlib is now used by the
     ‘split()’, ‘rsplit()’, ‘splitlines()’ and ‘replace()’ methods on
     *note bytes: 1db, *note bytearray: 1dc. and *note str: 25a.
     objects.  Likewise, the algorithm is also used by ‘rfind()’,
     ‘rindex()’, ‘rsplit()’ and ‘rpartition()’.

     (Patch by Florent Xicluna in issue 7622(9) and issue 7462(10).)

   * Integer to string conversions now work two "digits" at a time,
     reducing the number of division and modulo operations.

     (issue 6713(11) by Gawain Bolton, Mark Dickinson, and Victor
     Stinner.)

There were several other minor optimizations.  Set differencing now runs
faster when one operand is much larger than the other (patch by Andress
Bennetts in issue 8685(12)).  The ‘array.repeat()’ method has a faster
implementation (issue 1569291(13) by Alexander Belopolsky).  The
‘BaseHTTPRequestHandler’ has more efficient buffering (issue 3709(14) by
Andrew Schaaf).  The *note operator.attrgetter(): 2d7. function has been
sped-up (issue 10160(15) by Christos Georgiou).  And ‘ConfigParser’
loads multi-line arguments a bit faster (issue 7113(16) by Łukasz
Langa).

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue6690

   (2) https://bugs.python.org/issue9410

   (3) https://bugs.python.org/issue3873

   (4) https://en.wikipedia.org/wiki/Timsort

   (5) https://bugs.python.org/issue9915

   (6) https://bugs.python.org/issue7451

   (7) https://bugs.python.org/issue10314

   (8) https://bugs.python.org/issue3001

   (9) https://bugs.python.org/issue7622

   (10) https://bugs.python.org/issue7462

   (11) https://bugs.python.org/issue6713

   (12) https://bugs.python.org/issue8685

   (13) https://bugs.python.org/issue1569291

   (14) https://bugs.python.org/issue3709

   (15) https://bugs.python.org/issue10160

   (16) https://bugs.python.org/issue7113


File: python.info,  Node: Unicode,  Next: Codecs,  Prev: Optimizations<4>,  Up: What's New In Python 3 2

1.5.12 Unicode
--------------

Python has been updated to Unicode 6.0.0(1).  The update to the standard
adds over 2,000 new characters including emoji(2) symbols which are
important for mobile phones.

In addition, the updated standard has altered the character properties
for two Kannada characters (U+0CF1, U+0CF2) and one New Tai Lue numeric
character (U+19DA), making the former eligible for use in identifiers
while disqualifying the latter.  For more information, see Unicode
Character Database Changes(3).

   ---------- Footnotes ----------

   (1) http://unicode.org/versions/Unicode6.0.0/

   (2) https://en.wikipedia.org/wiki/Emoji

   (3) http://www.unicode.org/versions/Unicode6.0.0/#Database_Changes


File: python.info,  Node: Codecs,  Next: Documentation,  Prev: Unicode,  Up: What's New In Python 3 2

1.5.13 Codecs
-------------

Support was added for `cp720' Arabic DOS encoding (issue 1616979(1)).

MBCS encoding no longer ignores the error handler argument.  In the
default strict mode, it raises an *note UnicodeDecodeError: 571. when it
encounters an undecodable byte sequence and an *note UnicodeEncodeError:
852. for an unencodable character.

The MBCS codec supports ‘'strict'’ and ‘'ignore'’ error handlers for
decoding, and ‘'strict'’ and ‘'replace'’ for encoding.

To emulate Python3.1 MBCS encoding, select the ‘'ignore'’ handler for
decoding and the ‘'replace'’ handler for encoding.

On Mac OS X, Python decodes command line arguments with ‘'utf-8'’ rather
than the locale encoding.

By default, *note tarfile: ff. uses ‘'utf-8'’ encoding on Windows
(instead of ‘'mbcs'’) and the ‘'surrogateescape'’ error handler on all
operating systems.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue1616979


File: python.info,  Node: Documentation,  Next: IDLE,  Prev: Codecs,  Up: What's New In Python 3 2

1.5.14 Documentation
--------------------

The documentation continues to be improved.

   * A table of quick links has been added to the top of lengthy
     sections such as *note Built-in Functions: 854.  In the case of
     *note itertools: a1, the links are accompanied by tables of
     cheatsheet-style summaries to provide an overview and memory jog
     without having to read all of the docs.

   * In some cases, the pure Python source code can be a helpful adjunct
     to the documentation, so now many modules now feature quick links
     to the latest version of the source code.  For example, the *note
     functools: 84. module documentation has a quick link at the top
     labeled:

          `Source code' Lib/functools.py(1).

     (Contributed by Raymond Hettinger; see rationale(2).)

   * The docs now contain more examples and recipes.  In particular,
     *note re: db. module has an extensive section, *note Regular
     Expression Examples: 855.  Likewise, the *note itertools: a1.
     module continues to be updated with new *note Itertools Recipes:
     856.

   * The *note datetime: 2f. module now has an auxiliary implementation
     in pure Python.  No functionality was changed.  This just provides
     an easier-to-read alternate implementation.

     (Contributed by Alexander Belopolsky in issue 9528(3).)

   * The unmaintained ‘Demo’ directory has been removed.  Some demos
     were integrated into the documentation, some were moved to the
     ‘Tools/demo’ directory, and others were removed altogether.

     (Contributed by Georg Brandl in issue 7962(4).)

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/functools.py

   (2) 
https://rhettinger.wordpress.com/2011/01/28/open-your-source-more/

   (3) https://bugs.python.org/issue9528

   (4) https://bugs.python.org/issue7962


File: python.info,  Node: IDLE,  Next: Code Repository,  Prev: Documentation,  Up: What's New In Python 3 2

1.5.15 IDLE
-----------

   * The format menu now has an option to clean source files by
     stripping trailing whitespace.

     (Contributed by Raymond Hettinger; issue 5150(1).)

   * IDLE on Mac OS X now works with both Carbon AquaTk and Cocoa
     AquaTk.

     (Contributed by Kevin Walzer, Ned Deily, and Ronald Oussoren; issue
     6075(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue5150

   (2) https://bugs.python.org/issue6075


File: python.info,  Node: Code Repository,  Next: Build and C API Changes<4>,  Prev: IDLE,  Up: What's New In Python 3 2

1.5.16 Code Repository
----------------------

In addition to the existing Subversion code repository at
‘http://svn.python.org’ there is now a Mercurial(1) repository at
‘https://hg.python.org/’.

After the 3.2 release, there are plans to switch to Mercurial as the
primary repository.  This distributed version control system should make
it easier for members of the community to create and share external
changesets.  See PEP 385(2) for details.

To learn to use the new version control system, see the tutorial by Joel
Spolsky(3) or the Guide to Mercurial Workflows(4).

   ---------- Footnotes ----------

   (1) https://www.mercurial-scm.org/

   (2) https://www.python.org/dev/peps/pep-0385

   (3) http://hginit.com

   (4) https://www.mercurial-scm.org/guide


File: python.info,  Node: Build and C API Changes<4>,  Next: Porting to Python 3 2,  Prev: Code Repository,  Up: What's New In Python 3 2

1.5.17 Build and C API Changes
------------------------------

Changes to Python’s build process and to the C API include:

   * The `idle', `pydoc' and `2to3' scripts are now installed with a
     version-specific suffix on ‘make altinstall’ (issue 10679(1)).

   * The C functions that access the Unicode Database now accept and
     return characters from the full Unicode range, even on narrow
     unicode builds (Py_UNICODE_TOLOWER, Py_UNICODE_ISDECIMAL, and
     others).  A visible difference in Python is that *note
     unicodedata.numeric(): 85a. now returns the correct value for large
     code points, and *note repr(): 3bb. may consider more characters as
     printable.

     (Reported by Bupjoe Lee and fixed by Amaury Forgeot D’Arc; issue
     5127(2).)

   * Computed gotos are now enabled by default on supported compilers
     (which are detected by the configure script).  They can still be
     disabled selectively by specifying ‘--without-computed-gotos’.

     (Contributed by Antoine Pitrou; issue 9203(3).)

   * The option ‘--with-wctype-functions’ was removed.  The built-in
     unicode database is now used for all functions.

     (Contributed by Amaury Forgeot D’Arc; issue 9210(4).)

   * Hash values are now values of a new type, ‘Py_hash_t’, which is
     defined to be the same size as a pointer.  Previously they were of
     type long, which on some 64-bit operating systems is still only 32
     bits long.  As a result of this fix, *note set: 7be. and *note
     dict: 3b0. can now hold more than ‘2**32’ entries on builds with
     64-bit pointers (previously, they could grow to that size but their
     performance degraded catastrophically).

     (Suggested by Raymond Hettinger and implemented by Benjamin
     Peterson; issue 9778(5).)

   * A new macro ‘Py_VA_COPY’ copies the state of the variable argument
     list.  It is equivalent to C99 `va_copy' but available on all
     Python platforms (issue 2443(6)).

   * A new C API function *note PySys_SetArgvEx(): 85b. allows an
     embedded interpreter to set *note sys.argv: 85c. without also
     modifying *note sys.path: 16c. (issue 5753(7)).

   * ‘PyEval_CallObject’ is now only available in macro form.  The
     function declaration, which was kept for backwards compatibility
     reasons, is now removed – the macro was introduced in 1997 (issue
     8276(8)).

   * There is a new function *note PyLong_AsLongLongAndOverflow(): 85d.
     which is analogous to *note PyLong_AsLongAndOverflow(): 85e.  They
     both serve to convert Python *note int: 227. into a native
     fixed-width type while providing detection of cases where the
     conversion won’t fit (issue 7767(9)).

   * The *note PyUnicode_CompareWithASCIIString(): 85f. function now
     returns `not equal' if the Python string is `NUL' terminated.

   * There is a new function *note PyErr_NewExceptionWithDoc(): 860.
     that is like *note PyErr_NewException(): 861. but allows a
     docstring to be specified.  This lets C exceptions have the same
     self-documenting capabilities as their pure Python counterparts
     (issue 7033(10)).

   * When compiled with the ‘--with-valgrind’ option, the pymalloc
     allocator will be automatically disabled when running under
     Valgrind.  This gives improved memory leak detection when running
     under Valgrind, while taking advantage of pymalloc at other times
     (issue 2422(11)).

   * Removed the ‘O?’ format from the `PyArg_Parse' functions.  The
     format is no longer used and it had never been documented (issue
     8837(12)).

There were a number of other small changes to the C-API. See the
Misc/NEWS(13) file for a complete list.

Also, there were a number of updates to the Mac OS X build, see
Mac/BuildScript/README.txt(14) for details.  For users running a
32/64-bit build, there is a known problem with the default Tcl/Tk on Mac
OS X 10.6.  Accordingly, we recommend installing an updated alternative
such as ActiveState Tcl/Tk 8.5.9(15).  See
‘https://www.python.org/download/mac/tcltk/’ for additional details.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue10679

   (2) https://bugs.python.org/issue5127

   (3) https://bugs.python.org/issue9203

   (4) https://bugs.python.org/issue9210

   (5) https://bugs.python.org/issue9778

   (6) https://bugs.python.org/issue2443

   (7) https://bugs.python.org/issue5753

   (8) https://bugs.python.org/issue8276

   (9) https://bugs.python.org/issue7767

   (10) https://bugs.python.org/issue7033

   (11) https://bugs.python.org/issue2422

   (12) https://bugs.python.org/issue8837

   (13) https://hg.python.org/cpython/file/default/Misc/NEWS

   (14) 
https://hg.python.org/cpython/file/default/Mac/BuildScript/README.txt

   (15) http://www.activestate.com/activetcl/downloads


File: python.info,  Node: Porting to Python 3 2,  Prev: Build and C API Changes<4>,  Up: What's New In Python 3 2

1.5.18 Porting to Python 3.2
----------------------------

This section lists previously described changes and other bugfixes that
may require changes to your code:

   * The *note configparser: 23. module has a number of clean-ups.  The
     major change is to replace the old ‘ConfigParser’ class with
     long-standing preferred alternative ‘SafeConfigParser’.  In
     addition there are a number of smaller incompatibilities:

        * The interpolation syntax is now validated on *note get(): 863.
          and *note set(): 864. operations.  In the default
          interpolation scheme, only two tokens with percent signs are
          valid: ‘%(name)s’ and ‘%%’, the latter being an escaped
          percent sign.

        * The *note set(): 864. and *note add_section(): 865. methods
          now verify that values are actual strings.  Formerly,
          unsupported types could be introduced unintentionally.

        * Duplicate sections or options from a single source now raise
          either *note DuplicateSectionError: 866. or *note
          DuplicateOptionError: 867.  Formerly, duplicates would
          silently overwrite a previous entry.

        * Inline comments are now disabled by default so now the `;'
          character can be safely used in values.

        * Comments now can be indented.  Consequently, for `;' or `#' to
          appear at the start of a line in multiline values, it has to
          be interpolated.  This keeps comment prefix characters in
          values from being mistaken as comments.

        * ‘""’ is now a valid value and is no longer automatically
          converted to an empty string.  For empty strings, use ‘"option
          ="’ in a line.

   * The *note nntplib: be. module was reworked extensively, meaning
     that its APIs are often incompatible with the 3.1 APIs.

   * *note bytearray: 1dc. objects can no longer be used as filenames;
     instead, they should be converted to *note bytes: 1db.

   * The ‘array.tostring()’ and ‘array.fromstring()’ have been renamed
     to ‘array.tobytes()’ and ‘array.frombytes()’ for clarity.  The old
     names have been deprecated.  (See issue 8990(1).)

   * ‘PyArg_Parse*()’ functions:

        * "t#" format has been removed: use "s#" or "s*" instead

        * "w" and "w#" formats has been removed: use "w*" instead

   * The ‘PyCObject’ type, deprecated in 3.1, has been removed.  To wrap
     opaque C pointers in Python objects, the *note PyCapsule: 868. API
     should be used instead; the new type has a well-defined interface
     for passing typing safety information and a less complicated
     signature for calling a destructor.

   * The ‘sys.setfilesystemencoding()’ function was removed because it
     had a flawed design.

   * The *note random.seed(): 869. function and method now salt string
     seeds with an sha512 hash function.  To access the previous version
     of `seed' in order to reproduce Python 3.1 sequences, set the
     `version' argument to `1', ‘random.seed(s, version=1)’.

   * The previously deprecated ‘string.maketrans()’ function has been
     removed in favor of the static methods *note bytes.maketrans():
     86a. and *note bytearray.maketrans(): 86b.  This change solves the
     confusion around which types were supported by the *note string:
     f4. module.  Now, *note str: 25a, *note bytes: 1db, and *note
     bytearray: 1dc. each have their own `maketrans' and `translate'
     methods with intermediate translation tables of the appropriate
     type.

     (Contributed by Georg Brandl; issue 5675(2).)

   * The previously deprecated ‘contextlib.nested()’ function has been
     removed in favor of a plain *note with: 29d. statement which can
     accept multiple context managers.  The latter technique is faster
     (because it is built-in), and it does a better job finalizing
     multiple context managers when one of them raises an exception:

          with open('mylog.txt') as infile, open('a.out', 'w') as outfile:
              for line in infile:
                  if '<critical>' in line:
                      outfile.write(line)

     (Contributed by Georg Brandl and Mattias Brändström; appspot issue
     53094(3).)

   * *note struct.pack(): 86c. now only allows bytes for the ‘s’ string
     pack code.  Formerly, it would accept text arguments and implicitly
     encode them to bytes using UTF-8.  This was problematic because it
     made assumptions about the correct encoding and because a
     variable-length encoding can fail when writing to fixed length
     segment of a structure.

     Code such as ‘struct.pack('<6sHHBBB', 'GIF87a', x, y)’ should be
     rewritten with to use bytes instead of text,
     ‘struct.pack('<6sHHBBB', b'GIF87a', x, y)’.

     (Discovered by David Beazley and fixed by Victor Stinner; issue
     10783(4).)

   * The *note xml.etree.ElementTree: 134. class now raises an *note
     xml.etree.ElementTree.ParseError: 86d. when a parse fails.
     Previously it raised a *note xml.parsers.expat.ExpatError: 86e.

   * The new, longer *note str(): 25a. value on floats may break
     doctests which rely on the old output format.

   * In *note subprocess.Popen: 7d8, the default value for `close_fds'
     is now ‘True’ under Unix; under Windows, it is ‘True’ if the three
     standard streams are set to ‘None’, ‘False’ otherwise.  Previously,
     `close_fds' was always ‘False’ by default, which produced difficult
     to solve bugs or race conditions when open file descriptors would
     leak into the child process.

   * Support for legacy HTTP 0.9 has been removed from *note
     urllib.request: 11d. and *note http.client: 93.  Such support is
     still present on the server side (in *note http.server: 96.).

     (Contributed by Antoine Pitrou, issue 10711(5).)

   * SSL sockets in timeout mode now raise *note socket.timeout: 86f.
     when a timeout occurs, rather than a generic *note SSLError: 870.

     (Contributed by Antoine Pitrou, issue 10272(6).)

   * The misleading functions *note PyEval_AcquireLock(): 871. and *note
     PyEval_ReleaseLock(): 872. have been officially deprecated.  The
     thread-state aware APIs (such as *note PyEval_SaveThread(): 873.
     and *note PyEval_RestoreThread(): 874.) should be used instead.

   * Due to security risks, ‘asyncore.handle_accept()’ has been
     deprecated, and a new function, ‘asyncore.handle_accepted()’, was
     added to replace it.

     (Contributed by Giampaolo Rodola in issue 6706(7).)

   * Due to the new *note GIL: 848. implementation, *note
     PyEval_InitThreads(): 875. cannot be called before *note
     Py_Initialize(): 876. anymore.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue8990

   (2) https://bugs.python.org/issue5675

   (3) https://codereview.appspot.com/53094

   (4) https://bugs.python.org/issue10783

   (5) https://bugs.python.org/issue10711

   (6) https://bugs.python.org/issue10272

   (7) https://bugs.python.org/issue6706


File: python.info,  Node: What's New In Python 3 1,  Next: What's New In Python 3 0,  Prev: What's New In Python 3 2,  Up: What's New in Python

1.6 What’s New In Python 3.1
============================


Author: Raymond Hettinger

This article explains the new features in Python 3.1, compared to 3.0.

* Menu:

* PEP 372; Ordered Dictionaries: PEP 372 Ordered Dictionaries. 
* PEP 378; Format Specifier for Thousands Separator: PEP 378 Format Specifier for Thousands Separator. 
* Other Language Changes: Other Language Changes<6>. 
* New, Improved, and Deprecated Modules: New Improved and Deprecated Modules<2>. 
* Optimizations: Optimizations<5>. 
* IDLE: IDLE<2>. 
* Build and C API Changes: Build and C API Changes<5>. 
* Porting to Python 3.1: Porting to Python 3 1. 


File: python.info,  Node: PEP 372 Ordered Dictionaries,  Next: PEP 378 Format Specifier for Thousands Separator,  Up: What's New In Python 3 1

1.6.1 PEP 372: Ordered Dictionaries
-----------------------------------

Regular Python dictionaries iterate over key/value pairs in arbitrary
order.  Over the years, a number of authors have written alternative
implementations that remember the order that the keys were originally
inserted.  Based on the experiences from those implementations, a new
*note collections.OrderedDict: 1bd. class has been introduced.

The OrderedDict API is substantially the same as regular dictionaries
but will iterate over keys and values in a guaranteed order depending on
when a key was first inserted.  If a new entry overwrites an existing
entry, the original insertion position is left unchanged.  Deleting an
entry and reinserting it will move it to the end.

The standard library now supports use of ordered dictionaries in several
modules.  The *note configparser: 23. module uses them by default.  This
lets configuration files be read, modified, and then written back in
their original order.  The `_asdict()' method for *note
collections.namedtuple(): 229. now returns an ordered dictionary with
the values appearing in the same order as the underlying tuple indicies.
The *note json: a2. module is being built-out with an
`object_pairs_hook' to allow OrderedDicts to be built by the decoder.
Support was also added for third-party tools like PyYAML(1).

See also
........

PEP 372(2) - Ordered Dictionaries

     PEP written by Armin Ronacher and Raymond Hettinger.
     Implementation written by Raymond Hettinger.

   ---------- Footnotes ----------

   (1) http://pyyaml.org/

   (2) https://www.python.org/dev/peps/pep-0372


File: python.info,  Node: PEP 378 Format Specifier for Thousands Separator,  Next: Other Language Changes<6>,  Prev: PEP 372 Ordered Dictionaries,  Up: What's New In Python 3 1

1.6.2 PEP 378: Format Specifier for Thousands Separator
-------------------------------------------------------

The built-in *note format(): 14e. function and the *note str.format():
14d. method use a mini-language that now includes a simple, non-locale
aware way to format a number with a thousands separator.  That provides
a way to humanize a program’s output, improving its professional
appearance and readability:

     >>> format(1234567, ',d')
     '1,234,567'
     >>> format(1234567.89, ',.2f')
     '1,234,567.89'
     >>> format(12345.6 + 8901234.12j, ',f')
     '12,345.600000+8,901,234.120000j'
     >>> format(Decimal('1234567.89'), ',f')
     '1,234,567.89'

The supported types are *note int: 227, *note float: 57a, *note complex:
579. and *note decimal.Decimal: 618.

Discussions are underway about how to specify alternative separators
like dots, spaces, apostrophes, or underscores.  Locale-aware
applications should use the existing `n' format specifier which already
has some support for thousands separators.

See also
........

PEP 378(1) - Format Specifier for Thousands Separator

     PEP written by Raymond Hettinger and implemented by Eric Smith and
     Mark Dickinson.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0378


File: python.info,  Node: Other Language Changes<6>,  Next: New Improved and Deprecated Modules<2>,  Prev: PEP 378 Format Specifier for Thousands Separator,  Up: What's New In Python 3 1

1.6.3 Other Language Changes
----------------------------

Some smaller changes made to the core Python language are:

   * Directories and zip archives containing a ‘__main__.py’ file can
     now be executed directly by passing their name to the interpreter.
     The directory/zipfile is automatically inserted as the first entry
     in sys.path.  (Suggestion and initial patch by Andy Chu; revised
     patch by Phillip J. Eby and Nick Coghlan; issue 1739468(1).)

   * The *note int(): 227. type gained a ‘bit_length’ method that
     returns the number of bits necessary to represent its argument in
     binary:

          >>> n = 37
          >>> bin(37)
          '0b100101'
          >>> n.bit_length()
          6
          >>> n = 2**123-1
          >>> n.bit_length()
          123
          >>> (n+1).bit_length()
          124

     (Contributed by Fredrik Johansson, Victor Stinner, Raymond
     Hettinger, and Mark Dickinson; issue 3439(2).)

   * The fields in *note format(): 14e. strings can now be automatically
     numbered:

          >>> 'Sir {} of {}'.format('Gallahad', 'Camelot')
          'Sir Gallahad of Camelot'

     Formerly, the string would have required numbered fields such as:
     ‘'Sir {0} of {1}'’.

     (Contributed by Eric Smith; issue 5237(3).)

   * The ‘string.maketrans()’ function is deprecated and is replaced by
     new static methods, *note bytes.maketrans(): 86a. and *note
     bytearray.maketrans(): 86b.  This change solves the confusion
     around which types were supported by the *note string: f4. module.
     Now, *note str: 25a, *note bytes: 1db, and *note bytearray: 1dc.
     each have their own `maketrans' and `translate' methods with
     intermediate translation tables of the appropriate type.

     (Contributed by Georg Brandl; issue 5675(4).)

   * The syntax of the *note with: 29d. statement now allows multiple
     context managers in a single statement:

          >>> with open('mylog.txt') as infile, open('a.out', 'w') as outfile:
          ...     for line in infile:
          ...         if '<critical>' in line:
          ...             outfile.write(line)

     With the new syntax, the ‘contextlib.nested()’ function is no
     longer needed and is now deprecated.

     (Contributed by Georg Brandl and Mattias Brändström; appspot issue
     53094(5).)

   * ‘round(x, n)’ now returns an integer if `x' is an integer.
     Previously it returned a float:

          >>> round(1123, -2)
          1100

     (Contributed by Mark Dickinson; issue 4707(6).)

   * Python now uses David Gay’s algorithm for finding the shortest
     floating point representation that doesn’t change its value.  This
     should help mitigate some of the confusion surrounding binary
     floating point numbers.

     The significance is easily seen with a number like ‘1.1’ which does
     not have an exact equivalent in binary floating point.  Since there
     is no exact equivalent, an expression like ‘float('1.1')’ evaluates
     to the nearest representable value which is ‘0x1.199999999999ap+0’
     in hex or ‘1.100000000000000088817841970012523233890533447265625’
     in decimal.  That nearest value was and still is used in subsequent
     floating point calculations.

     What is new is how the number gets displayed.  Formerly, Python
     used a simple approach.  The value of ‘repr(1.1)’ was computed as
     ‘format(1.1, '.17g')’ which evaluated to ‘'1.1000000000000001'’.
     The advantage of using 17 digits was that it relied on IEEE-754
     guarantees to assure that ‘eval(repr(1.1))’ would round-trip
     exactly to its original value.  The disadvantage is that many
     people found the output to be confusing (mistaking intrinsic
     limitations of binary floating point representation as being a
     problem with Python itself).

     The new algorithm for ‘repr(1.1)’ is smarter and returns ‘'1.1'’.
     Effectively, it searches all equivalent string representations
     (ones that get stored with the same underlying float value) and
     returns the shortest representation.

     The new algorithm tends to emit cleaner representations when
     possible, but it does not change the underlying values.  So, it is
     still the case that ‘1.1 + 2.2 != 3.3’ even though the
     representations may suggest otherwise.

     The new algorithm depends on certain features in the underlying
     floating point implementation.  If the required features are not
     found, the old algorithm will continue to be used.  Also, the text
     pickle protocols assure cross-platform portability by using the old
     algorithm.

     (Contributed by Eric Smith and Mark Dickinson; issue 1580(7))

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue1739468

   (2) https://bugs.python.org/issue3439

   (3) https://bugs.python.org/issue5237

   (4) https://bugs.python.org/issue5675

   (5) https://codereview.appspot.com/53094

   (6) https://bugs.python.org/issue4707

   (7) https://bugs.python.org/issue1580


File: python.info,  Node: New Improved and Deprecated Modules<2>,  Next: Optimizations<5>,  Prev: Other Language Changes<6>,  Up: What's New In Python 3 1

1.6.4 New, Improved, and Deprecated Modules
-------------------------------------------

   * Added a *note collections.Counter: 602. class to support convenient
     counting of unique items in a sequence or iterable:

          >>> Counter(['red', 'blue', 'red', 'green', 'blue', 'blue'])
          Counter({'blue': 3, 'red': 2, 'green': 1})

     (Contributed by Raymond Hettinger; issue 1696199(1).)

   * Added a new module, *note tkinter.ttk: 10c. for access to the Tk
     themed widget set.  The basic idea of ttk is to separate, to the
     extent possible, the code implementing a widget’s behavior from the
     code implementing its appearance.

     (Contributed by Guilherme Polo; issue 2983(2).)

   * The *note gzip.GzipFile: 290. and *note bz2.BZ2File: 539. classes
     now support the context management protocol:

          >>> # Automatically close file after writing
          >>> with gzip.GzipFile(filename, "wb") as f:
          ...     f.write(b"xxx")

     (Contributed by Antoine Pitrou.)

   * The *note decimal: 34. module now supports methods for creating a
     decimal object from a binary *note float: 57a.  The conversion is
     exact but can sometimes be surprising:

          >>> Decimal.from_float(1.1)
          Decimal('1.100000000000000088817841970012523233890533447265625')

     The long decimal result shows the actual binary fraction being
     stored for `1.1'.  The fraction has many digits because `1.1'
     cannot be exactly represented in binary.

     (Contributed by Raymond Hettinger and Mark Dickinson.)

   * The *note itertools: a1. module grew two new functions.  The *note
     itertools.combinations_with_replacement(): 87d. function is one of
     four for generating combinatorics including permutations and
     Cartesian products.  The *note itertools.compress(): 87e. function
     mimics its namesake from APL. Also, the existing *note
     itertools.count(): 87f. function now has an optional `step'
     argument and can accept any type of counting sequence including
     *note fractions.Fraction: 378. and *note decimal.Decimal: 618.:

          >>> [p+q for p,q in combinations_with_replacement('LOVE', 2)]
          ['LL', 'LO', 'LV', 'LE', 'OO', 'OV', 'OE', 'VV', 'VE', 'EE']

          >>> list(compress(data=range(10), selectors=[0,0,1,1,0,1,0,1,0,0]))
          [2, 3, 5, 7]

          >>> c = count(start=Fraction(1,2), step=Fraction(1,6))
          >>> [next(c), next(c), next(c), next(c)]
          [Fraction(1, 2), Fraction(2, 3), Fraction(5, 6), Fraction(1, 1)]

     (Contributed by Raymond Hettinger.)

   * *note collections.namedtuple(): 229. now supports a keyword
     argument `rename' which lets invalid fieldnames be automatically
     converted to positional names in the form _0, _1, etc.  This is
     useful when the field names are being created by an external source
     such as a CSV header, SQL field list, or user input:

          >>> query = input()
          SELECT region, dept, count(*) FROM main GROUPBY region, dept

          >>> cursor.execute(query)
          >>> query_fields = [desc[0] for desc in cursor.description]
          >>> UserQuery = namedtuple('UserQuery', query_fields, rename=True)
          >>> pprint.pprint([UserQuery(*row) for row in cursor])
          [UserQuery(region='South', dept='Shipping', _2=185),
           UserQuery(region='North', dept='Accounting', _2=37),
           UserQuery(region='West', dept='Sales', _2=419)]

     (Contributed by Raymond Hettinger; issue 1818(3).)

   * The *note re.sub(): 2f5, *note re.subn(): 2f6. and *note
     re.split(): 3ae. functions now accept a flags parameter.

     (Contributed by Gregory Smith.)

   * The *note logging: a8. module now implements a simple *note
     logging.NullHandler: 880. class for applications that are not using
     logging but are calling library code that does.  Setting-up a null
     handler will suppress spurious warnings such as "No handlers could
     be found for logger foo":

          >>> h = logging.NullHandler()
          >>> logging.getLogger("foo").addHandler(h)

     (Contributed by Vinay Sajip; issue 4384(4)).

   * The *note runpy: e0. module which supports the ‘-m’ command line
     switch now supports the execution of packages by looking for and
     executing a ‘__main__’ submodule when a package name is supplied.

     (Contributed by Andi Vajda; issue 4195(5).)

   * The *note pdb: c7. module can now access and display source code
     loaded via *note zipimport: 140. (or any other conformant PEP
     302(6) loader).

     (Contributed by Alexander Belopolsky; issue 4201(7).)

   * *note functools.partial: 3b7. objects can now be pickled.

     (Suggested by Antoine Pitrou and Jesse Noller.  Implemented by Jack
     Diederich; issue 5228(8).)

   * Add *note pydoc: d7. help topics for symbols so that ‘help('@')’
     works as expected in the interactive environment.

     (Contributed by David Laban; issue 4739(9).)

   * The *note unittest: 118. module now supports skipping individual
     tests or classes of tests.  And it supports marking a test as an
     expected failure, a test that is known to be broken, but shouldn’t
     be counted as a failure on a TestResult:

          class TestGizmo(unittest.TestCase):

              @unittest.skipUnless(sys.platform.startswith("win"), "requires Windows")
              def test_gizmo_on_windows(self):
                  ...

              @unittest.expectedFailure
              def test_gimzo_without_required_library(self):
                  ...

     Also, tests for exceptions have been builtout to work with context
     managers using the *note with: 29d. statement:

          def test_division_by_zero(self):
              with self.assertRaises(ZeroDivisionError):
                  x / 0

     In addition, several new assertion methods were added including
     ‘assertSetEqual()’, ‘assertDictEqual()’,
     ‘assertDictContainsSubset()’, ‘assertListEqual()’,
     ‘assertTupleEqual()’, ‘assertSequenceEqual()’,
     ‘assertRaisesRegexp()’, ‘assertIsNone()’, and ‘assertIsNotNone()’.

     (Contributed by Benjamin Peterson and Antoine Pitrou.)

   * The *note io: 9f. module has three new constants for the ‘seek()’
     method ‘SEEK_SET’, ‘SEEK_CUR’, and ‘SEEK_END’.

   * The *note sys.version_info: 75c. tuple is now a named tuple:

          >>> sys.version_info
          sys.version_info(major=3, minor=1, micro=0, releaselevel='alpha', serial=2)

     (Contributed by Ross Light; issue 4285(10).)

   * The *note nntplib: be. and *note imaplib: 97. modules now support
     IPv6.

     (Contributed by Derek Morr; issue 1655(11) and issue 1664(12).)

   * The *note pickle: c8. module has been adapted for better
     interoperability with Python 2.x when used with protocol 2 or
     lower.  The reorganization of the standard library changed the
     formal reference for many objects.  For example, ‘__builtin__.set’
     in Python 2 is called ‘builtins.set’ in Python 3.  This change
     confounded efforts to share data between different versions of
     Python.  But now when protocol 2 or lower is selected, the pickler
     will automatically use the old Python 2 names for both loading and
     dumping.  This remapping is turned-on by default but can be
     disabled with the `fix_imports' option:

          >>> s = {1, 2, 3}
          >>> pickle.dumps(s, protocol=0)
          b'c__builtin__\nset\np0\n((lp1\nL1L\naL2L\naL3L\natp2\nRp3\n.'
          >>> pickle.dumps(s, protocol=0, fix_imports=False)
          b'cbuiltins\nset\np0\n((lp1\nL1L\naL2L\naL3L\natp2\nRp3\n.'

     An unfortunate but unavoidable side-effect of this change is that
     protocol 2 pickles produced by Python 3.1 won’t be readable with
     Python 3.0.  The latest pickle protocol, protocol 3, should be used
     when migrating data between Python 3.x implementations, as it
     doesn’t attempt to remain compatible with Python 2.x.

     (Contributed by Alexandre Vassalotti and Antoine Pitrou, issue
     6137(13).)

   * A new module, *note importlib: 9a. was added.  It provides a
     complete, portable, pure Python reference implementation of the
     *note import: 881. statement and its counterpart, the *note
     __import__(): 5cd. function.  It represents a substantial step
     forward in documenting and defining the actions that take place
     during imports.

     (Contributed by Brett Cannon.)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue1696199

   (2) https://bugs.python.org/issue2983

   (3) https://bugs.python.org/issue1818

   (4) https://bugs.python.org/issue4384

   (5) https://bugs.python.org/issue4195

   (6) https://www.python.org/dev/peps/pep-0302

   (7) https://bugs.python.org/issue4201

   (8) https://bugs.python.org/issue5228

   (9) https://bugs.python.org/issue4739

   (10) https://bugs.python.org/issue4285

   (11) https://bugs.python.org/issue1655

   (12) https://bugs.python.org/issue1664

   (13) https://bugs.python.org/issue6137


File: python.info,  Node: Optimizations<5>,  Next: IDLE<2>,  Prev: New Improved and Deprecated Modules<2>,  Up: What's New In Python 3 1

1.6.5 Optimizations
-------------------

Major performance enhancements have been added:

   * The new I/O library (as defined in PEP 3116(1)) was mostly written
     in Python and quickly proved to be a problematic bottleneck in
     Python 3.0.  In Python 3.1, the I/O library has been entirely
     rewritten in C and is 2 to 20 times faster depending on the task at
     hand.  The pure Python version is still available for
     experimentation purposes through the ‘_pyio’ module.

     (Contributed by Amaury Forgeot d’Arc and Antoine Pitrou.)

   * Added a heuristic so that tuples and dicts containing only
     untrackable objects are not tracked by the garbage collector.  This
     can reduce the size of collections and therefore the garbage
     collection overhead on long-running programs, depending on their
     particular use of datatypes.

     (Contributed by Antoine Pitrou, issue 4688(2).)

   * Enabling a configure option named ‘--with-computed-gotos’ on
     compilers that support it (notably: gcc, SunPro, icc), the bytecode
     evaluation loop is compiled with a new dispatch mechanism which
     gives speedups of up to 20%, depending on the system, the compiler,
     and the benchmark.

     (Contributed by Antoine Pitrou along with a number of other
     participants, issue 4753(3)).

   * The decoding of UTF-8, UTF-16 and LATIN-1 is now two to four times
     faster.

     (Contributed by Antoine Pitrou and Amaury Forgeot d’Arc, issue
     4868(4).)

   * The *note json: a2. module now has a C extension to substantially
     improve its performance.  In addition, the API was modified so that
     json works only with *note str: 25a, not with *note bytes: 1db.
     That change makes the module closely match the JSON
     specification(5) which is defined in terms of Unicode.

     (Contributed by Bob Ippolito and converted to Py3.1 by Antoine
     Pitrou and Benjamin Peterson; issue 4136(6).)

   * Unpickling now interns the attribute names of pickled objects.
     This saves memory and allows pickles to be smaller.

     (Contributed by Jake McGuire and Antoine Pitrou; issue 5084(7).)

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3116

   (2) https://bugs.python.org/issue4688

   (3) https://bugs.python.org/issue4753

   (4) https://bugs.python.org/issue4868

   (5) http://json.org/

   (6) https://bugs.python.org/issue4136

   (7) https://bugs.python.org/issue5084


File: python.info,  Node: IDLE<2>,  Next: Build and C API Changes<5>,  Prev: Optimizations<5>,  Up: What's New In Python 3 1

1.6.6 IDLE
----------

   * IDLE’s format menu now provides an option to strip trailing
     whitespace from a source file.

     (Contributed by Roger D. Serwy; issue 5150(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue5150


File: python.info,  Node: Build and C API Changes<5>,  Next: Porting to Python 3 1,  Prev: IDLE<2>,  Up: What's New In Python 3 1

1.6.7 Build and C API Changes
-----------------------------

Changes to Python’s build process and to the C API include:

   * Integers are now stored internally either in base 2**15 or in base
     2**30, the base being determined at build time.  Previously, they
     were always stored in base 2**15.  Using base 2**30 gives
     significant performance improvements on 64-bit machines, but
     benchmark results on 32-bit machines have been mixed.  Therefore,
     the default is to use base 2**30 on 64-bit machines and base 2**15
     on 32-bit machines; on Unix, there’s a new configure option
     ‘--enable-big-digits’ that can be used to override this default.

     Apart from the performance improvements this change should be
     invisible to end users, with one exception: for testing and
     debugging purposes there’s a new *note sys.int_info: 885. that
     provides information about the internal format, giving the number
     of bits per digit and the size in bytes of the C type used to store
     each digit:

          >>> import sys
          >>> sys.int_info
          sys.int_info(bits_per_digit=30, sizeof_digit=4)

     (Contributed by Mark Dickinson; issue 4258(1).)

   * The *note PyLong_AsUnsignedLongLong(): 886. function now handles a
     negative `pylong' by raising *note OverflowError: 578. instead of
     *note TypeError: 562.

     (Contributed by Mark Dickinson and Lisandro Dalcrin; issue
     5175(2).)

   * Deprecated ‘PyNumber_Int()’.  Use *note PyNumber_Long(): 887.
     instead.

     (Contributed by Mark Dickinson; issue 4910(3).)

   * Added a new *note PyOS_string_to_double(): 888. function to replace
     the deprecated functions ‘PyOS_ascii_strtod()’ and
     ‘PyOS_ascii_atof()’.

     (Contributed by Mark Dickinson; issue 5914(4).)

   * Added *note PyCapsule: 868. as a replacement for the ‘PyCObject’
     API. The principal difference is that the new type has a well
     defined interface for passing typing safety information and a less
     complicated signature for calling a destructor.  The old type had a
     problematic API and is now deprecated.

     (Contributed by Larry Hastings; issue 5630(5).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue4258

   (2) https://bugs.python.org/issue5175

   (3) https://bugs.python.org/issue4910

   (4) https://bugs.python.org/issue5914

   (5) https://bugs.python.org/issue5630


File: python.info,  Node: Porting to Python 3 1,  Prev: Build and C API Changes<5>,  Up: What's New In Python 3 1

1.6.8 Porting to Python 3.1
---------------------------

This section lists previously described changes and other bugfixes that
may require changes to your code:

   * The new floating point string representations can break existing
     doctests.  For example:

          def e():
              '''Compute the base of natural logarithms.

              >>> e()
              2.7182818284590451

              '''
              return sum(1/math.factorial(x) for x in reversed(range(30)))

          doctest.testmod()

          **********************************************************************
          Failed example:
              e()
          Expected:
              2.7182818284590451
          Got:
              2.718281828459045
          **********************************************************************

   * The automatic name remapping in the pickle module for protocol 2 or
     lower can make Python 3.1 pickles unreadable in Python 3.0.  One
     solution is to use protocol 3.  Another solution is to set the
     `fix_imports' option to `False'.  See the discussion above for more
     details.


File: python.info,  Node: What's New In Python 3 0,  Next: What's New in Python 2 7,  Prev: What's New In Python 3 1,  Up: What's New in Python

1.7 What’s New In Python 3.0
============================


Author: Guido van Rossum

This article explains the new features in Python 3.0, compared to 2.6.
Python 3.0, also known as "Python 3000" or "Py3K", is the first ever
`intentionally backwards incompatible' Python release.  There are more
changes than in a typical release, and more that are important for all
Python users.  Nevertheless, after digesting the changes, you’ll find
that Python really hasn’t changed all that much – by and large, we’re
mostly fixing well-known annoyances and warts, and removing a lot of old
cruft.

This article doesn’t attempt to provide a complete specification of all
new features, but instead tries to give a convenient overview.  For full
details, you should refer to the documentation for Python 3.0, and/or
the many PEPs referenced in the text.  If you want to understand the
complete implementation and design rationale for a particular feature,
PEPs usually have more details than the regular documentation; but note
that PEPs usually are not kept up-to-date once a feature has been fully
implemented.

Due to time constraints this document is not as complete as it should
have been.  As always for a new release, the ‘Misc/NEWS’ file in the
source distribution contains a wealth of detailed information about
every small thing that was changed.

* Menu:

* Common Stumbling Blocks:: 
* Overview Of Syntax Changes:: 
* Changes Already Present In Python 2.6: Changes Already Present In Python 2 6. 
* Library Changes:: 
* PEP 3101; A New Approach To String Formatting: PEP 3101 A New Approach To String Formatting. 
* Changes To Exceptions:: 
* Miscellaneous Other Changes:: 
* Build and C API Changes: Build and C API Changes<6>. 
* Performance:: 
* Porting To Python 3.0: Porting To Python 3 0. 


File: python.info,  Node: Common Stumbling Blocks,  Next: Overview Of Syntax Changes,  Up: What's New In Python 3 0

1.7.1 Common Stumbling Blocks
-----------------------------

This section lists those few changes that are most likely to trip you up
if you’re used to Python 2.5.

* Menu:

* Print Is A Function:: 
* Views And Iterators Instead Of Lists:: 
* Ordering Comparisons:: 
* Integers:: 
* Text Vs. Data Instead Of Unicode Vs. 8-bit: Text Vs Data Instead Of Unicode Vs 8-bit. 


File: python.info,  Node: Print Is A Function,  Next: Views And Iterators Instead Of Lists,  Up: Common Stumbling Blocks

1.7.1.1 Print Is A Function
...........................

The ‘print’ statement has been replaced with a *note print(): 481.
function, with keyword arguments to replace most of the special syntax
of the old ‘print’ statement ( PEP 3105(1)).  Examples:

     Old: print "The answer is", 2*2
     New: print("The answer is", 2*2)

     Old: print x,           # Trailing comma suppresses newline
     New: print(x, end=" ")  # Appends a space instead of a newline

     Old: print              # Prints a newline
     New: print()            # You must call the function!

     Old: print >>sys.stderr, "fatal error"
     New: print("fatal error", file=sys.stderr)

     Old: print (x, y)       # prints repr((x, y))
     New: print((x, y))      # Not the same as print(x, y)!

You can also customize the separator between items, e.g.:

     print("There are <", 2**32, "> possibilities!", sep="")

which produces:

     There are <4294967296> possibilities!

Note:

   * The *note print(): 481. function doesn’t support the "softspace"
     feature of the old ‘print’ statement.  For example, in Python 2.x,
     ‘print "A\n", "B"’ would write ‘"A\nB\n"’; but in Python 3.0,
     ‘print("A\n", "B")’ writes ‘"A\n B\n"’.

   * Initially, you’ll be finding yourself typing the old ‘print x’ a
     lot in interactive mode.  Time to retrain your fingers to type
     ‘print(x)’ instead!

   * When using the ‘2to3’ source-to-source conversion tool, all ‘print’
     statements are automatically converted to *note print(): 481.
     function calls, so this is mostly a non-issue for larger projects.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3105


File: python.info,  Node: Views And Iterators Instead Of Lists,  Next: Ordering Comparisons,  Prev: Print Is A Function,  Up: Common Stumbling Blocks

1.7.1.2 Views And Iterators Instead Of Lists
............................................

Some well-known APIs no longer return lists:

   * *note dict: 3b0. methods *note dict.keys(): 88f, *note
     dict.items(): 890. and *note dict.values(): 891. return "views"
     instead of lists.  For example, this no longer works: ‘k =
     d.keys(); k.sort()’.  Use ‘k = sorted(d)’ instead (this works in
     Python 2.5 too and is just as efficient).

   * Also, the ‘dict.iterkeys()’, ‘dict.iteritems()’ and
     ‘dict.itervalues()’ methods are no longer supported.

   * *note map(): 892. and *note filter(): 893. return iterators.  If
     you really need a list and the input sequences are all of equal
     length, a quick fix is to wrap *note map(): 892. in *note list():
     25d, e.g.  ‘list(map(...))’, but a better fix is often to use a
     list comprehension (especially when the original code uses *note
     lambda: 894.), or rewriting the code so it doesn’t need a list at
     all.  Particularly tricky is *note map(): 892. invoked for the side
     effects of the function; the correct transformation is to use a
     regular *note for: 895. loop (since creating a list would just be
     wasteful).

     If the input sequences are not of equal length, *note map(): 892.
     will stop at the termination of the shortest of the sequences.  For
     full compatibility with *note map(): 892. from Python 2.x, also
     wrap the sequences in *note itertools.zip_longest(): 896, e.g.
     ‘map(func, *sequences)’ becomes ‘list(map(func,
     itertools.zip_longest(*sequences)))’.

   * *note range(): 5e0. now behaves like ‘xrange()’ used to behave,
     except it works with values of arbitrary size.  The latter no
     longer exists.

   * *note zip(): 897. now returns an iterator.


File: python.info,  Node: Ordering Comparisons,  Next: Integers,  Prev: Views And Iterators Instead Of Lists,  Up: Common Stumbling Blocks

1.7.1.3 Ordering Comparisons
............................

Python 3.0 has simplified the rules for ordering comparisons:

   * The ordering comparison operators (‘<’, ‘<=’, ‘>=’, ‘>’) raise a
     TypeError exception when the operands don’t have a meaningful
     natural ordering.  Thus, expressions like ‘1 < ''’, ‘0 > None’ or
     ‘len <= len’ are no longer valid, and e.g.  ‘None < None’ raises
     *note TypeError: 562. instead of returning ‘False’.  A corollary is
     that sorting a heterogeneous list no longer makes sense – all the
     elements must be comparable to each other.  Note that this does not
     apply to the ‘==’ and ‘!=’ operators: objects of different
     incomparable types always compare unequal to each other.

   * ‘builtin.sorted()’ and *note list.sort(): 84d. no longer accept the
     `cmp' argument providing a comparison function.  Use the `key'
     argument instead.  N.B. the `key' and `reverse' arguments are now
     "keyword-only".

   * The ‘cmp()’ function should be treated as gone, and the ‘__cmp__()’
     special method is no longer supported.  Use *note __lt__(): 899.
     for sorting, *note __eq__(): 89a. with *note __hash__(): 5e7, and
     other rich comparisons as needed.  (If you really need the ‘cmp()’
     functionality, you could use the expression ‘(a > b) - (a < b)’ as
     the equivalent for ‘cmp(a, b)’.)


File: python.info,  Node: Integers,  Next: Text Vs Data Instead Of Unicode Vs 8-bit,  Prev: Ordering Comparisons,  Up: Common Stumbling Blocks

1.7.1.4 Integers
................

   * PEP 237(1): Essentially, ‘long’ renamed to *note int: 227.  That
     is, there is only one built-in integral type, named *note int:
     227.; but it behaves mostly like the old ‘long’ type.

   * PEP 238(2): An expression like ‘1/2’ returns a float.  Use ‘1//2’
     to get the truncating behavior.  (The latter syntax has existed for
     years, at least since Python 2.2.)

   * The ‘sys.maxint’ constant was removed, since there is no longer a
     limit to the value of integers.  However, *note sys.maxsize: 78c.
     can be used as an integer larger than any practical list or string
     index.  It conforms to the implementation’s "natural" integer size
     and is typically the same as ‘sys.maxint’ in previous releases on
     the same platform (assuming the same build options).

   * The *note repr(): 3bb. of a long integer doesn’t include the
     trailing ‘L’ anymore, so code that unconditionally strips that
     character will chop off the last digit instead.  (Use *note str():
     25a. instead.)

   * Octal literals are no longer of the form ‘0720’; use ‘0o720’
     instead.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0237

   (2) https://www.python.org/dev/peps/pep-0238


File: python.info,  Node: Text Vs Data Instead Of Unicode Vs 8-bit,  Prev: Integers,  Up: Common Stumbling Blocks

1.7.1.5 Text Vs. Data Instead Of Unicode Vs. 8-bit
..................................................

Everything you thought you knew about binary data and Unicode has
changed.

   * Python 3.0 uses the concepts of `text' and (binary) `data' instead
     of Unicode strings and 8-bit strings.  All text is Unicode; however
     `encoded' Unicode is represented as binary data.  The type used to
     hold text is *note str: 25a, the type used to hold data is *note
     bytes: 1db.  The biggest difference with the 2.x situation is that
     any attempt to mix text and data in Python 3.0 raises *note
     TypeError: 562, whereas if you were to mix Unicode and 8-bit
     strings in Python 2.x, it would work if the 8-bit string happened
     to contain only 7-bit (ASCII) bytes, but you would get *note
     UnicodeDecodeError: 571. if it contained non-ASCII values.  This
     value-specific behavior has caused numerous sad faces over the
     years.

   * As a consequence of this change in philosophy, pretty much all code
     that uses Unicode, encodings or binary data most likely has to
     change.  The change is for the better, as in the 2.x world there
     were numerous bugs having to do with mixing encoded and unencoded
     text.  To be prepared in Python 2.x, start using ‘unicode’ for all
     unencoded text, and *note str: 25a. for binary or encoded data
     only.  Then the ‘2to3’ tool will do most of the work for you.

   * You can no longer use ‘u"..."’ literals for Unicode text.  However,
     you must use ‘b"..."’ literals for binary data.

   * As the *note str: 25a. and *note bytes: 1db. types cannot be mixed,
     you must always explicitly convert between them.  Use *note
     str.encode(): 89d. to go from *note str: 25a. to *note bytes: 1db,
     and *note bytes.decode(): 89e. to go from *note bytes: 1db. to
     *note str: 25a.  You can also use ‘bytes(s, encoding=...)’ and
     ‘str(b, encoding=...)’, respectively.

   * Like *note str: 25a, the *note bytes: 1db. type is immutable.
     There is a separate `mutable' type to hold buffered binary data,
     *note bytearray: 1dc.  Nearly all APIs that accept *note bytes:
     1db. also accept *note bytearray: 1dc.  The mutable API is based on
     ‘collections.MutableSequence’.

   * All backslashes in raw string literals are interpreted literally.
     This means that ‘'\U'’ and ‘'\u'’ escapes in raw strings are not
     treated specially.  For example, ‘r'\u20ac'’ is a string of 6
     characters in Python 3.0, whereas in 2.6, ‘ur'\u20ac'’ was the
     single "euro" character.  (Of course, this change only affects raw
     string literals; the euro character is ‘'\u20ac'’ in Python 3.0.)

   * The built-in ‘basestring’ abstract type was removed.  Use *note
     str: 25a. instead.  The *note str: 25a. and *note bytes: 1db. types
     don’t have functionality enough in common to warrant a shared base
     class.  The ‘2to3’ tool (see below) replaces every occurrence of
     ‘basestring’ with *note str: 25a.

   * Files opened as text files (still the default mode for *note
     open(): 1e8.) always use an encoding to map between strings (in
     memory) and bytes (on disk).  Binary files (opened with a ‘b’ in
     the mode argument) always use bytes in memory.  This means that if
     a file is opened using an incorrect mode or encoding, I/O will
     likely fail loudly, instead of silently producing incorrect data.
     It also means that even Unix users will have to specify the correct
     mode (text or binary) when opening a file.  There is a
     platform-dependent default encoding, which on Unixy platforms can
     be set with the ‘LANG’ environment variable (and sometimes also
     with some other platform-specific locale-related environment
     variables).  In many cases, but not all, the system default is
     UTF-8; you should never count on this default.  Any application
     reading or writing more than pure ASCII text should probably have a
     way to override the encoding.  There is no longer any need for
     using the encoding-aware streams in the *note codecs: 1c. module.

   * The initial values of *note sys.stdin: 1b9, *note sys.stdout: 1ba.
     and *note sys.stderr: 270. are now unicode-only text files (i.e.,
     they are instances of *note io.TextIOBase: 89f.).  To read and
     write bytes data with these streams, you need to use their *note
     io.TextIOBase.buffer: 8a0. attribute.

   * Filenames are passed to and returned from APIs as (Unicode)
     strings.  This can present platform-specific problems because on
     some platforms filenames are arbitrary byte strings.  (On the other
     hand, on Windows filenames are natively stored as Unicode.)  As a
     work-around, most APIs (e.g.  *note open(): 1e8. and many functions
     in the *note os: c2. module) that take filenames accept *note
     bytes: 1db. objects as well as strings, and a few APIs have a way
     to ask for a *note bytes: 1db. return value.  Thus, *note
     os.listdir(): 675. returns a list of *note bytes: 1db. instances if
     the argument is a *note bytes: 1db. instance, and *note
     os.getcwdb(): 8a1. returns the current working directory as a *note
     bytes: 1db. instance.  Note that when *note os.listdir(): 675.
     returns a list of strings, filenames that cannot be decoded
     properly are omitted rather than raising *note UnicodeError: 8a2.

   * Some system APIs like *note os.environ: 77a. and *note sys.argv:
     85c. can also present problems when the bytes made available by the
     system is not interpretable using the default encoding.  Setting
     the ‘LANG’ variable and rerunning the program is probably the best
     approach.

   * PEP 3138(1): The *note repr(): 3bb. of a string no longer escapes
     non-ASCII characters.  It still escapes control characters and code
     points with non-printable status in the Unicode standard, however.

   * PEP 3120(2): The default source encoding is now UTF-8.

   * PEP 3131(3): Non-ASCII letters are now allowed in identifiers.
     (However, the standard library remains ASCII-only with the
     exception of contributor names in comments.)

   * The ‘StringIO’ and ‘cStringIO’ modules are gone.  Instead, import
     the *note io: 9f. module and use *note io.StringIO: 41e. or *note
     io.BytesIO: 371. for text and data respectively.

   * See also the *note Unicode HOWTO: 8a3, which was updated for Python
     3.0.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3138

   (2) https://www.python.org/dev/peps/pep-3120

   (3) https://www.python.org/dev/peps/pep-3131


File: python.info,  Node: Overview Of Syntax Changes,  Next: Changes Already Present In Python 2 6,  Prev: Common Stumbling Blocks,  Up: What's New In Python 3 0

1.7.2 Overview Of Syntax Changes
--------------------------------

This section gives a brief overview of every `syntactic' change in
Python 3.0.

* Menu:

* New Syntax:: 
* Changed Syntax:: 
* Removed Syntax:: 


File: python.info,  Node: New Syntax,  Next: Changed Syntax,  Up: Overview Of Syntax Changes

1.7.2.1 New Syntax
..................

   * PEP 3107(1): Function argument and return value annotations.  This
     provides a standardized way of annotating a function’s parameters
     and return value.  There are no semantics attached to such
     annotations except that they can be introspected at runtime using
     the ‘__annotations__’ attribute.  The intent is to encourage
     experimentation through metaclasses, decorators or frameworks.

   * PEP 3102(2): Keyword-only arguments.  Named parameters occurring
     after ‘*args’ in the parameter list `must' be specified using
     keyword syntax in the call.  You can also use a bare ‘*’ in the
     parameter list to indicate that you don’t accept a variable-length
     argument list, but you do have keyword-only arguments.

   * Keyword arguments are allowed after the list of base classes in a
     class definition.  This is used by the new convention for
     specifying a metaclass (see next section), but can be used for
     other purposes as well, as long as the metaclass supports it.

   * PEP 3104(3): *note nonlocal: 8a6. statement.  Using ‘nonlocal x’
     you can now assign directly to a variable in an outer (but
     non-global) scope.  *note nonlocal: 8a6. is a new reserved word.

   * PEP 3132(4): Extended Iterable Unpacking.  You can now write things
     like ‘a, b, *rest = some_sequence’.  And even ‘*rest, a = stuff’.
     The ‘rest’ object is always a (possibly empty) list; the right-hand
     side may be any iterable.  Example:

          (a, *rest, b) = range(5)

     This sets `a' to ‘0’, `b' to ‘4’, and `rest' to ‘[1, 2, 3]’.

   * Dictionary comprehensions: ‘{k: v for k, v in stuff}’ means the
     same thing as ‘dict(stuff)’ but is more flexible.  (This is PEP
     274(5) vindicated.  :-)

   * Set literals, e.g.  ‘{1, 2}’.  Note that ‘{}’ is an empty
     dictionary; use ‘set()’ for an empty set.  Set comprehensions are
     also supported; e.g., ‘{x for x in stuff}’ means the same thing as
     ‘set(stuff)’ but is more flexible.

   * New octal literals, e.g.  ‘0o720’ (already in 2.6).  The old octal
     literals (‘0720’) are gone.

   * New binary literals, e.g.  ‘0b1010’ (already in 2.6), and there is
     a new corresponding built-in function, *note bin(): 8a7.

   * Bytes literals are introduced with a leading ‘b’ or ‘B’, and there
     is a new corresponding built-in function, *note bytes(): 1db.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3107

   (2) https://www.python.org/dev/peps/pep-3102

   (3) https://www.python.org/dev/peps/pep-3104

   (4) https://www.python.org/dev/peps/pep-3132

   (5) https://www.python.org/dev/peps/pep-0274


File: python.info,  Node: Changed Syntax,  Next: Removed Syntax,  Prev: New Syntax,  Up: Overview Of Syntax Changes

1.7.2.2 Changed Syntax
......................

   * PEP 3109(1) and PEP 3134(2): new *note raise: 8a9. statement
     syntax: ‘raise [`expr' [from `expr']]’.  See below.

   * *note as: 8aa. and *note with: 29d. are now reserved words.  (Since
     2.6, actually.)

   * ‘True’, ‘False’, and ‘None’ are reserved words.  (2.6 partially
     enforced the restrictions on ‘None’ already.)

   * Change from *note except: 785. `exc', `var' to *note except: 785.
     `exc' *note as: 8aa. `var'.  See PEP 3110(3).

   * PEP 3115(4): New Metaclass Syntax.  Instead of:

          class C:
              __metaclass__ = M
              ...

     you must now use:

          class C(metaclass=M):
              ...

     The module-global ‘__metaclass__’ variable is no longer supported.
     (It was a crutch to make it easier to default to new-style classes
     without deriving every class from *note object: 5cb.)

   * List comprehensions no longer support the syntactic form ‘[... for
     `var' in `item1', `item2', ...]’.  Use ‘[... for `var' in (`item1',
     `item2', ...)]’ instead.  Also note that list comprehensions have
     different semantics: they are closer to syntactic sugar for a
     generator expression inside a *note list(): 25d. constructor, and
     in particular the loop control variables are no longer leaked into
     the surrounding scope.

   * The `ellipsis' (‘...’) can be used as an atomic expression
     anywhere.  (Previously it was only allowed in slices.)  Also, it
     `must' now be spelled as ‘...’.  (Previously it could also be
     spelled as ‘. . .’, by a mere accident of the grammar.)

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3109

   (2) https://www.python.org/dev/peps/pep-3134

   (3) https://www.python.org/dev/peps/pep-3110

   (4) https://www.python.org/dev/peps/pep-3115


File: python.info,  Node: Removed Syntax,  Prev: Changed Syntax,  Up: Overview Of Syntax Changes

1.7.2.3 Removed Syntax
......................

   * PEP 3113(1): Tuple parameter unpacking removed.  You can no longer
     write ‘def foo(a, (b, c)): ...’.  Use ‘def foo(a, b_c): b, c = b_c’
     instead.

   * Removed backticks (use *note repr(): 3bb. instead).

   * Removed ‘<>’ (use ‘!=’ instead).

   * Removed keyword: *note exec(): 8ac. is no longer a keyword; it
     remains as a function.  (Fortunately the function syntax was also
     accepted in 2.x.)  Also note that *note exec(): 8ac. no longer
     takes a stream argument; instead of ‘exec(f)’ you can use
     ‘exec(f.read())’.

   * Integer literals no longer support a trailing ‘l’ or ‘L’.

   * String literals no longer support a leading ‘u’ or ‘U’.

   * The *note from: 8ad. `module' *note import: 881. ‘*’ syntax is only
     allowed at the module level, no longer inside functions.

   * The only acceptable syntax for relative imports is ‘from
     .[`module'] import `name'’.  All *note import: 881. forms not
     starting with ‘.’ are interpreted as absolute imports.  ( PEP
     328(2))

   * Classic classes are gone.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3113

   (2) https://www.python.org/dev/peps/pep-0328


File: python.info,  Node: Changes Already Present In Python 2 6,  Next: Library Changes,  Prev: Overview Of Syntax Changes,  Up: What's New In Python 3 0

1.7.3 Changes Already Present In Python 2.6
-------------------------------------------

Since many users presumably make the jump straight from Python 2.5 to
Python 3.0, this section reminds the reader of new features that were
originally designed for Python 3.0 but that were back-ported to Python
2.6.  The corresponding sections in *note What’s New in Python 2.6: 8af.
should be consulted for longer descriptions.

   * *note PEP 343; The ’with’ statement: 8b0.  The *note with: 29d.
     statement is now a standard feature and no longer needs to be
     imported from the *note __future__: 0.  Also check out *note
     Writing Context Managers: 8b1. and *note The contextlib module:
     8b2.

   * *note PEP 366; Explicit Relative Imports From a Main Module: 8b3.
     This enhances the usefulness of the *note -m: 8b4. option when the
     referenced module lives in a package.

   * *note PEP 370; Per-user site-packages Directory: 8b5.

   * *note PEP 371; The multiprocessing Package: 8b6.

   * *note PEP 3101; Advanced String Formatting: 8b7.  Note: the 2.6
     description mentions the *note format(): 14e. method for both 8-bit
     and Unicode strings.  In 3.0, only the *note str: 25a. type (text
     strings with Unicode support) supports this method; the *note
     bytes: 1db. type does not.  The plan is to eventually make this the
     only API for string formatting, and to start deprecating the ‘%’
     operator in Python 3.1.

   * *note PEP 3105; print As a Function: 8b8.  This is now a standard
     feature and no longer needs to be imported from *note __future__:
     0.  More details were given above.

   * *note PEP 3110; Exception-Handling Changes: 8b9.  The *note except:
     785. `exc' *note as: 8aa. `var' syntax is now standard and *note
     except: 785. `exc', `var' is no longer supported.  (Of course, the
     *note as: 8aa. `var' part is still optional.)

   * *note PEP 3112; Byte Literals: 8ba.  The ‘b"..."’ string literal
     notation (and its variants like ‘b'...'’, ‘b"""..."""’, and
     ‘br"..."’) now produces a literal of type *note bytes: 1db.

   * *note PEP 3116; New I/O Library: 8bb.  The *note io: 9f. module is
     now the standard way of doing file I/O. The built-in *note open():
     1e8. function is now an alias for *note io.open(): 1e9. and has
     additional keyword arguments `encoding', `errors', `newline' and
     `closefd'.  Also note that an invalid `mode' argument now raises
     *note ValueError: 19c, not *note IOError: 5b0.  The binary file
     object underlying a text file object can be accessed as ‘f.buffer’
     (but beware that the text object maintains a buffer of itself in
     order to speed up the encoding and decoding operations).

   * *note PEP 3118; Revised Buffer Protocol: 8bc.  The old builtin
     ‘buffer()’ is now really gone; the new builtin *note memoryview():
     1b7. provides (mostly) similar functionality.

   * *note PEP 3119; Abstract Base Classes: 8bd.  The *note abc: 4.
     module and the ABCs defined in the *note collections: 1e. module
     plays a somewhat more prominent role in the language now, and
     built-in collection types like *note dict: 3b0. and *note list:
     25d. conform to the ‘collections.MutableMapping’ and
     ‘collections.MutableSequence’ ABCs, respectively.

   * *note PEP 3127; Integer Literal Support and Syntax: 8be.  As
     mentioned above, the new octal literal notation is the only one
     supported, and binary literals have been added.

   * *note PEP 3129; Class Decorators: 8bf.

   * *note PEP 3141; A Type Hierarchy for Numbers: 8c0.  The *note
     numbers: bf. module is another new use of ABCs, defining Python’s
     "numeric tower".  Also note the new *note fractions: 82. module
     which implements *note numbers.Rational: 8c1.


File: python.info,  Node: Library Changes,  Next: PEP 3101 A New Approach To String Formatting,  Prev: Changes Already Present In Python 2 6,  Up: What's New In Python 3 0

1.7.4 Library Changes
---------------------

Due to time constraints, this document does not exhaustively cover the
very extensive changes to the standard library.  PEP 3108(1) is the
reference for the major changes to the library.  Here’s a capsule
review:

   * Many old modules were removed.  Some, like ‘gopherlib’ (no longer
     used) and ‘md5’ (replaced by *note hashlib: 8c.), were already
     deprecated by PEP 4(2).  Others were removed as a result of the
     removal of support for various platforms such as Irix, BeOS and Mac
     OS 9 (see PEP 11(3)).  Some modules were also selected for removal
     in Python 3.0 due to lack of use or because a better replacement
     exists.  See PEP 3108(4) for an exhaustive list.

   * The ‘bsddb3’ package was removed because its presence in the core
     standard library has proved over time to be a particular burden for
     the core developers due to testing instability and Berkeley DB’s
     release schedule.  However, the package is alive and well,
     externally maintained at
     ‘https://www.jcea.es/programacion/pybsddb.htm’.

   * Some modules were renamed because their old name disobeyed PEP
     8(5), or for various other reasons.  Here’s the list:

     Old Name                    New Name
                                 
     --------------------------------------------------------
                                 
     _winreg                     winreg
                                 
                                 
     ConfigParser                configparser
                                 
                                 
     copy_reg                    copyreg
                                 
                                 
     Queue                       queue
                                 
                                 
     SocketServer                socketserver
                                 
                                 
     markupbase                  _markupbase
                                 
                                 
     repr                        reprlib
                                 
                                 
     test.test_support           test.support
                                 

   * A common pattern in Python 2.x is to have one version of a module
     implemented in pure Python, with an optional accelerated version
     implemented as a C extension; for example, *note pickle: c8. and
     ‘cPickle’.  This places the burden of importing the accelerated
     version and falling back on the pure Python version on each user of
     these modules.  In Python 3.0, the accelerated versions are
     considered implementation details of the pure Python versions.
     Users should always import the standard version, which attempts to
     import the accelerated version and falls back to the pure Python
     version.  The *note pickle: c8. / ‘cPickle’ pair received this
     treatment.  The *note profile: d1. module is on the list for 3.1.
     The ‘StringIO’ module has been turned into a class in the *note io:
     9f. module.

   * Some related modules have been grouped into packages, and usually
     the submodule names have been simplified.  The resulting new
     packages are:

        * *note dbm: 30. (‘anydbm’, ‘dbhash’, *note dbm: 30, ‘dumbdbm’,
          ‘gdbm’, ‘whichdb’).

        * *note html: 8f. (‘HTMLParser’, ‘htmlentitydefs’).

        * *note http: 92. (‘httplib’, ‘BaseHTTPServer’, ‘CGIHTTPServer’,
          ‘SimpleHTTPServer’, ‘Cookie’, ‘cookielib’).

        * *note tkinter: 109. (all ‘Tkinter’-related modules except
          *note turtle: 113.).  The target audience of *note turtle:
          113. doesn’t really care about *note tkinter: 109.  Also note
          that as of Python 2.6, the functionality of *note turtle: 113.
          has been greatly enhanced.

        * *note urllib: 11a. (*note urllib: 11a, ‘urllib2’, ‘urlparse’,
          ‘robotparse’).

        * ‘xmlrpc’ (‘xmlrpclib’, ‘DocXMLRPCServer’,
          ‘SimpleXMLRPCServer’).

Some other changes to standard library modules, not covered by PEP
3108(6):

   * Killed ‘sets’.  Use the built-in *note set(): 7be. class.

   * Cleanup of the *note sys: fb. module: removed ‘sys.exitfunc()’,
     ‘sys.exc_clear()’, ‘sys.exc_type’, ‘sys.exc_value’,
     ‘sys.exc_traceback’.  (Note that *note sys.last_type: 8c3. etc.
     remain.)

   * Cleanup of the *note array.array: 8c4. type: the ‘read()’ and
     ‘write()’ methods are gone; use ‘fromfile()’ and ‘tofile()’
     instead.  Also, the ‘'c'’ typecode for array is gone – use either
     ‘'b'’ for bytes or ‘'u'’ for Unicode characters.

   * Cleanup of the *note operator: c0. module: removed
     ‘sequenceIncludes()’ and ‘isCallable()’.

   * Cleanup of the ‘thread’ module: ‘acquire_lock()’ and
     ‘release_lock()’ are gone; use ‘acquire()’ and ‘release()’ instead.

   * Cleanup of the *note random: da. module: removed the ‘jumpahead()’
     API.

   * The ‘new’ module is gone.

   * The functions ‘os.tmpnam()’, ‘os.tempnam()’ and ‘os.tmpfile()’ have
     been removed in favor of the *note tempfile: 101. module.

   * The *note tokenize: 10e. module has been changed to work with
     bytes.  The main entry point is now *note tokenize.tokenize(): 8c5,
     instead of generate_tokens.

   * ‘string.letters’ and its friends (‘string.lowercase’ and
     ‘string.uppercase’) are gone.  Use *note string.ascii_letters: 8c6.
     etc.  instead.  (The reason for the removal is that
     ‘string.letters’ and friends had locale-specific behavior, which is
     a bad idea for such attractively-named global "constants".)

   * Renamed module ‘__builtin__’ to *note builtins: 13. (removing the
     underscores, adding an ’s’).  The ‘__builtins__’ variable found in
     most global namespaces is unchanged.  To modify a builtin, you
     should use *note builtins: 13, not ‘__builtins__’!

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3108

   (2) https://www.python.org/dev/peps/pep-0004

   (3) https://www.python.org/dev/peps/pep-0011

   (4) https://www.python.org/dev/peps/pep-3108

   (5) https://www.python.org/dev/peps/pep-0008

   (6) https://www.python.org/dev/peps/pep-3108


File: python.info,  Node: PEP 3101 A New Approach To String Formatting,  Next: Changes To Exceptions,  Prev: Library Changes,  Up: What's New In Python 3 0

`PEP 3101': A New Approach To String Formatting

   * A new system for built-in string formatting operations replaces the
     ‘%’ string formatting operator.  (However, the ‘%’ operator is
     still supported; it will be deprecated in Python 3.1 and removed
     from the language at some later time.)  Read PEP 3101(1) for the
     full scoop.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3101


File: python.info,  Node: Changes To Exceptions,  Next: Miscellaneous Other Changes,  Prev: PEP 3101 A New Approach To String Formatting,  Up: What's New In Python 3 0

1.7.6 Changes To Exceptions
---------------------------

The APIs for raising and catching exception have been cleaned up and new
powerful features added:

   * PEP 352(1): All exceptions must be derived (directly or indirectly)
     from *note BaseException: 8c9.  This is the root of the exception
     hierarchy.  This is not new as a recommendation, but the
     `requirement' to inherit from *note BaseException: 8c9. is new.
     (Python 2.6 still allowed classic classes to be raised, and placed
     no restriction on what you can catch.)  As a consequence, string
     exceptions are finally truly and utterly dead.

   * Almost all exceptions should actually derive from *note Exception:
     1a1.; *note BaseException: 8c9. should only be used as a base class
     for exceptions that should only be handled at the top level, such
     as *note SystemExit: 1a2. or *note KeyboardInterrupt: 1a3.  The
     recommended idiom for handling all exceptions except for this
     latter category is to use *note except: 785. *note Exception: 1a1.

   * ‘StandardError’ was removed.

   * Exceptions no longer behave as sequences.  Use the ‘args’ attribute
     instead.

   * PEP 3109(2): Raising exceptions.  You must now use ‘raise
     `Exception'(`args')’ instead of ‘raise `Exception', `args'’.
     Additionally, you can no longer explicitly specify a traceback;
     instead, if you `have' to do this, you can assign directly to the
     ‘__traceback__’ attribute (see below).

   * PEP 3110(3): Catching exceptions.  You must now use ‘except
     `SomeException' as `variable'’ instead of ‘except `SomeException',
     `variable'’.  Moreover, the `variable' is explicitly deleted when
     the *note except: 785. block is left.

   * PEP 3134(4): Exception chaining.  There are two cases: implicit
     chaining and explicit chaining.  Implicit chaining happens when an
     exception is raised in an *note except: 785. or *note finally: 526.
     handler block.  This usually happens due to a bug in the handler
     block; we call this a `secondary' exception.  In this case, the
     original exception (that was being handled) is saved as the
     ‘__context__’ attribute of the secondary exception.  Explicit
     chaining is invoked with this syntax:

          raise SecondaryException() from primary_exception

     (where `primary_exception' is any expression that produces an
     exception object, probably an exception that was previously
     caught).  In this case, the primary exception is stored on the
     ‘__cause__’ attribute of the secondary exception.  The traceback
     printed when an unhandled exception occurs walks the chain of
     ‘__cause__’ and ‘__context__’ attributes and prints a separate
     traceback for each component of the chain, with the primary
     exception at the top.  (Java users may recognize this behavior.)

   * PEP 3134(5): Exception objects now store their traceback as the
     ‘__traceback__’ attribute.  This means that an exception object now
     contains all the information pertaining to an exception, and there
     are fewer reasons to use *note sys.exc_info(): 8ca. (though the
     latter is not removed).

   * A few exception messages are improved when Windows fails to load an
     extension module.  For example, ‘error code 193’ is now ‘%1 is not
     a valid Win32 application’.  Strings now deal with non-English
     locales.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0352

   (2) https://www.python.org/dev/peps/pep-3109

   (3) https://www.python.org/dev/peps/pep-3110

   (4) https://www.python.org/dev/peps/pep-3134

   (5) https://www.python.org/dev/peps/pep-3134


File: python.info,  Node: Miscellaneous Other Changes,  Next: Build and C API Changes<6>,  Prev: Changes To Exceptions,  Up: What's New In Python 3 0

1.7.7 Miscellaneous Other Changes
---------------------------------

* Menu:

* Operators And Special Methods:: 
* Builtins:: 


File: python.info,  Node: Operators And Special Methods,  Next: Builtins,  Up: Miscellaneous Other Changes

1.7.7.1 Operators And Special Methods
.....................................

   * ‘!=’ now returns the opposite of ‘==’, unless ‘==’ returns *note
     NotImplemented: 441.

   * The concept of "unbound methods" has been removed from the
     language.  When referencing a method as a class attribute, you now
     get a plain function object.

   * ‘__getslice__()’, ‘__setslice__()’ and ‘__delslice__()’ were
     killed.  The syntax ‘a[i:j]’ now translates to
     ‘a.__getitem__(slice(i, j))’ (or *note __setitem__(): 8cd. or *note
     __delitem__(): 8ce, when used as an assignment or deletion target,
     respectively).

   * PEP 3114(1): the standard *note next(): 218. method has been
     renamed to *note __next__(): 8cf.

   * The ‘__oct__()’ and ‘__hex__()’ special methods are removed – *note
     oct(): 8d0. and *note hex(): 8d1. use *note __index__(): 8d2. now
     to convert the argument to an integer.

   * Removed support for ‘__members__’ and ‘__methods__’.

   * The function attributes named ‘func_X’ have been renamed to use the
     ‘__X__’ form, freeing up these names in the function attribute
     namespace for user-defined attributes.  To wit, ‘func_closure’,
     ‘func_code’, ‘func_defaults’, ‘func_dict’, ‘func_doc’,
     ‘func_globals’, ‘func_name’ were renamed to ‘__closure__’,
     ‘__code__’, ‘__defaults__’, ‘__dict__’, ‘__doc__’, ‘__globals__’,
     *note __name__: 8d3, respectively.

   * ‘__nonzero__()’ is now *note __bool__(): 8d4.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3114


File: python.info,  Node: Builtins,  Prev: Operators And Special Methods,  Up: Miscellaneous Other Changes

1.7.7.2 Builtins
................

   * PEP 3135(1): New *note super(): 56a.  You can now invoke *note
     super(): 56a. without arguments and (assuming this is in a regular
     instance method defined inside a *note class: 8d6. statement) the
     right class and instance will automatically be chosen.  With
     arguments, the behavior of *note super(): 56a. is unchanged.

   * PEP 3111(2): ‘raw_input()’ was renamed to *note input(): 8d7.  That
     is, the new *note input(): 8d7. function reads a line from *note
     sys.stdin: 1b9. and returns it with the trailing newline stripped.
     It raises *note EOFError: 8d8. if the input is terminated
     prematurely.  To get the old behavior of *note input(): 8d7, use
     ‘eval(input())’.

   * A new built-in function *note next(): 218. was added to call the
     *note __next__(): 8cf. method on an object.

   * The *note round(): 8d9. function rounding strategy and return type
     have changed.  Exact halfway cases are now rounded to the nearest
     even result instead of away from zero.  (For example, ‘round(2.5)’
     now returns ‘2’ rather than ‘3’.)  ‘round(x[, n])’ now delegates to
     ‘x.__round__([n])’ instead of always returning a float.  It
     generally returns an integer when called with a single argument and
     a value of the same type as ‘x’ when called with two arguments.

   * Moved ‘intern()’ to *note sys.intern(): 8da.

   * Removed: ‘apply()’.  Instead of ‘apply(f, args)’ use ‘f(*args)’.

   * Removed *note callable(): 78d.  Instead of ‘callable(f)’ you can
     use ‘isinstance(f, collections.Callable)’.  The
     ‘operator.isCallable()’ function is also gone.

   * Removed ‘coerce()’.  This function no longer serves a purpose now
     that classic classes are gone.

   * Removed ‘execfile()’.  Instead of ‘execfile(fn)’ use
     ‘exec(open(fn).read())’.

   * Removed the ‘file’ type.  Use *note open(): 1e8.  There are now
     several different kinds of streams that open can return in the
     *note io: 9f. module.

   * Removed ‘reduce()’.  Use *note functools.reduce(): 8db. if you
     really need it; however, 99 percent of the time an explicit *note
     for: 895. loop is more readable.

   * Removed ‘reload()’.  Use *note imp.reload(): 8dc.

   * Removed.  ‘dict.has_key()’ – use the *note in: 37d. operator
     instead.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3135

   (2) https://www.python.org/dev/peps/pep-3111


File: python.info,  Node: Build and C API Changes<6>,  Next: Performance,  Prev: Miscellaneous Other Changes,  Up: What's New In Python 3 0

1.7.8 Build and C API Changes
-----------------------------

Due to time constraints, here is a `very' incomplete list of changes to
the C API.

   * Support for several platforms was dropped, including but not
     limited to Mac OS 9, BeOS, RISCOS, Irix, and Tru64.

   * PEP 3118(1): New Buffer API.

   * PEP 3121(2): Extension Module Initialization & Finalization.

   * PEP 3123(3): Making *note PyObject_HEAD: 8de. conform to standard
     C.

   * No more C API support for restricted execution.

   * ‘PyNumber_Coerce()’, ‘PyNumber_CoerceEx()’, ‘PyMember_Get()’, and
     ‘PyMember_Set()’ C APIs are removed.

   * New C API *note PyImport_ImportModuleNoBlock(): 5e3, works like
     *note PyImport_ImportModule(): 8df. but won’t block on the import
     lock (returning an error instead).

   * Renamed the boolean conversion C-level slot and method:
     ‘nb_nonzero’ is now ‘nb_bool’.

   * Removed ‘METH_OLDARGS’ and ‘WITH_CYCLE_GC’ from the C API.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3118

   (2) https://www.python.org/dev/peps/pep-3121

   (3) https://www.python.org/dev/peps/pep-3123


File: python.info,  Node: Performance,  Next: Porting To Python 3 0,  Prev: Build and C API Changes<6>,  Up: What's New In Python 3 0

1.7.9 Performance
-----------------

The net result of the 3.0 generalizations is that Python 3.0 runs the
pystone benchmark around 10% slower than Python 2.5.  Most likely the
biggest cause is the removal of special-casing for small integers.
There’s room for improvement, but it will happen after 3.0 is released!


File: python.info,  Node: Porting To Python 3 0,  Prev: Performance,  Up: What's New In Python 3 0

1.7.10 Porting To Python 3.0
----------------------------

For porting existing Python 2.5 or 2.6 source code to Python 3.0, the
best strategy is the following:

  0. (Prerequisite:) Start with excellent test coverage.

  1. Port to Python 2.6.  This should be no more work than the average
     port from Python 2.x to Python 2.(x+1).  Make sure all your tests
     pass.

  2. (Still using 2.6:) Turn on the ‘-3’ command line switch.  This
     enables warnings about features that will be removed (or change) in
     3.0.  Run your test suite again, and fix code that you get warnings
     about until there are no warnings left, and all your tests still
     pass.

  3. Run the ‘2to3’ source-to-source translator over your source code
     tree.  (See *note 2to3 - Automated Python 2 to 3 code translation:
     8e2. for more on this tool.)  Run the result of the translation
     under Python 3.0.  Manually fix up any remaining issues, fixing
     problems until all tests pass again.

It is not recommended to try to write source code that runs unchanged
under both Python 2.6 and 3.0; you’d have to use a very contorted coding
style, e.g.  avoiding ‘print’ statements, metaclasses, and much more.
If you are maintaining a library that needs to support both Python 2.6
and Python 3.0, the best approach is to modify step 3 above by editing
the 2.6 version of the source code and running the ‘2to3’ translator
again, rather than editing the 3.0 version of the source code.

For porting C extensions to Python 3.0, please see *note Porting
Extension Modules to Python 3: 8e3.


File: python.info,  Node: What's New in Python 2 7,  Next: What's New in Python 2 6,  Prev: What's New In Python 3 0,  Up: What's New in Python

1.8 What’s New in Python 2.7
============================


Author: A.M. Kuchling (amk at amk.ca)

This article explains the new features in Python 2.7.  Python 2.7 was
released on July 3, 2010.

Numeric handling has been improved in many ways, for both floating-point
numbers and for the *note Decimal: 618. class.  There are some useful
additions to the standard library, such as a greatly enhanced *note
unittest: 118. module, the *note argparse: 6. module for parsing
command-line options, convenient *note OrderedDict: 1bd. and *note
Counter: 602. classes in the *note collections: 1e. module, and many
other improvements.

Python 2.7 is planned to be the last of the 2.x releases, so we worked
on making it a good release for the long term.  To help with porting to
Python 3, several new features from the Python 3.x series have been
included in 2.7.

This article doesn’t attempt to provide a complete specification of the
new features, but instead provides a convenient overview.  For full
details, you should refer to the documentation for Python 2.7 at
‘https://docs.python.org’.  If you want to understand the rationale for
the design and implementation, refer to the PEP for a particular new
feature or the issue on ‘https://bugs.python.org’ in which a change was
discussed.  Whenever possible, "What’s New in Python" links to the
bug/patch item for each change.

* Menu:

* The Future for Python 2.x: The Future for Python 2 x. 
* Changes to the Handling of Deprecation Warnings:: 
* Python 3.1 Features: Python 3 1 Features. 
* PEP 372; Adding an Ordered Dictionary to collections: PEP 372 Adding an Ordered Dictionary to collections. 
* PEP 378; Format Specifier for Thousands Separator: PEP 378 Format Specifier for Thousands Separator<2>. 
* PEP 389; The argparse Module for Parsing Command Lines: PEP 389 The argparse Module for Parsing Command Lines. 
* PEP 391; Dictionary-Based Configuration For Logging: PEP 391 Dictionary-Based Configuration For Logging. 
* PEP 3106; Dictionary Views: PEP 3106 Dictionary Views. 
* PEP 3137; The memoryview Object: PEP 3137 The memoryview Object. 
* Other Language Changes: Other Language Changes<7>. 
* New and Improved Modules:: 
* Build and C API Changes: Build and C API Changes<7>. 
* Other Changes and Fixes:: 
* Porting to Python 2.7: Porting to Python 2 7. 
* New Features Added to Python 2.7 Maintenance Releases: New Features Added to Python 2 7 Maintenance Releases. 
* Acknowledgements:: 


File: python.info,  Node: The Future for Python 2 x,  Next: Changes to the Handling of Deprecation Warnings,  Up: What's New in Python 2 7

1.8.1 The Future for Python 2.x
-------------------------------

Python 2.7 is the last major release in the 2.x series, as the Python
maintainers have shifted the focus of their new feature development
efforts to the Python 3.x series.  This means that while Python 2
continues to receive bug fixes, and to be updated to build correctly on
new hardware and versions of supported operated systems, there will be
no new full feature releases for the language or standard library.

However, while there is a large common subset between Python 2.7 and
Python 3, and many of the changes involved in migrating to that common
subset, or directly to Python 3, can be safely automated, some other
changes (notably those associated with Unicode handling) may require
careful consideration, and preferably robust automated regression test
suites, to migrate effectively.

This means that Python 2.7 will remain in place for a long time,
providing a stable and supported base platform for production systems
that have not yet been ported to Python 3.  The full expected lifecycle
of the Python 2.7 series is detailed in PEP 373(1).

Some key consequences of the long-term significance of 2.7 are:

   * As noted above, the 2.7 release has a much longer period of
     maintenance when compared to earlier 2.x versions.  Python 2.7 is
     currently expected to remain supported by the core development team
     (receiving security updates and other bug fixes) until at least
     2020 (10 years after its initial release, compared to the more
     typical support period of 18-24 months).

   * As the Python 2.7 standard library ages, making effective use of
     the Python Package Index (either directly or via a redistributor)
     becomes more important for Python 2 users.  In addition to a wide
     variety of third party packages for various tasks, the available
     packages include backports of new modules and features from the
     Python 3 standard library that are compatible with Python 2, as
     well as various tools and libraries that can make it easier to
     migrate to Python 3.  The Python Packaging User Guide(2) provides
     guidance on downloading and installing software from the Python
     Package Index.

   * While the preferred approach to enhancing Python 2 is now the
     publication of new packages on the Python Package Index, this
     approach doesn’t necessarily work in all cases, especially those
     related to network security.  In exceptional cases that cannot be
     handled adequately by publishing new or updated packages on PyPI,
     the Python Enhancement Proposal process may be used to make the
     case for adding new features directly to the Python 2 standard
     library.  Any such additions, and the maintenance releases where
     they were added, will be noted in the *note New Features Added to
     Python 2.7 Maintenance Releases: 8e8. section below.

For projects wishing to migrate from Python 2 to Python 3, or for
library and framework developers wishing to support users on both Python
2 and Python 3, there are a variety of tools and guides available to
help decide on a suitable approach and manage some of the technical
details involved.  The recommended starting point is the *note Porting
Python 2 Code to Python 3: 8e9. HOWTO guide.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0373

   (2) https://packaging.python.org


File: python.info,  Node: Changes to the Handling of Deprecation Warnings,  Next: Python 3 1 Features,  Prev: The Future for Python 2 x,  Up: What's New in Python 2 7

1.8.2 Changes to the Handling of Deprecation Warnings
-----------------------------------------------------

For Python 2.7, a policy decision was made to silence warnings only of
interest to developers by default.  *note DeprecationWarning: 192. and
its descendants are now ignored unless otherwise requested, preventing
users from seeing warnings triggered by an application.  This change was
also made in the branch that became Python 3.2.  (Discussed on
stdlib-sig and carried out in issue 7319(1).)

In previous releases, *note DeprecationWarning: 192. messages were
enabled by default, providing Python developers with a clear indication
of where their code may break in a future major version of Python.

However, there are increasingly many users of Python-based applications
who are not directly involved in the development of those applications.
*note DeprecationWarning: 192. messages are irrelevant to such users,
making them worry about an application that’s actually working correctly
and burdening application developers with responding to these concerns.

You can re-enable display of *note DeprecationWarning: 192. messages by
running Python with the *note -Wdefault: 8eb. (short form: *note -Wd:
8eb.) switch, or by setting the *note PYTHONWARNINGS: 788. environment
variable to ‘"default"’ (or ‘"d"’) before running Python.  Python code
can also re-enable them by calling ‘warnings.simplefilter('default')’.

The ‘unittest’ module also automatically reenables deprecation warnings
when running tests.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue7319


File: python.info,  Node: Python 3 1 Features,  Next: PEP 372 Adding an Ordered Dictionary to collections,  Prev: Changes to the Handling of Deprecation Warnings,  Up: What's New in Python 2 7

1.8.3 Python 3.1 Features
-------------------------

Much as Python 2.6 incorporated features from Python 3.0, version 2.7
incorporates some of the new features in Python 3.1.  The 2.x series
continues to provide tools for migrating to the 3.x series.

A partial list of 3.1 features that were backported to 2.7:

   * The syntax for set literals (‘{1,2,3}’ is a mutable set).

   * Dictionary and set comprehensions (‘{i: i*2 for i in range(3)}’).

   * Multiple context managers in a single *note with: 29d. statement.

   * A new version of the *note io: 9f. library, rewritten in C for
     performance.

   * The ordered-dictionary type described in *note PEP 372; Adding an
     Ordered Dictionary to collections: 8ed.

   * The new ‘","’ format specifier described in *note PEP 378; Format
     Specifier for Thousands Separator: 8ee.

   * The *note memoryview: 1b7. object.

   * A small subset of the *note importlib: 9a. module, *note described
     below: 8ef.

   * The *note repr(): 3bb. of a float ‘x’ is shorter in many cases:
     it’s now based on the shortest decimal string that’s guaranteed to
     round back to ‘x’.  As in previous versions of Python, it’s
     guaranteed that ‘float(repr(x))’ recovers ‘x’.

   * Float-to-string and string-to-float conversions are correctly
     rounded.  The *note round(): 8d9. function is also now correctly
     rounded.

   * The *note PyCapsule: 868. type, used to provide a C API for
     extension modules.

   * The *note PyLong_AsLongAndOverflow(): 85e. C API function.

Other new Python3-mode warnings include:

   * ‘operator.isCallable()’ and ‘operator.sequenceIncludes()’, which
     are not supported in 3.x, now trigger warnings.

   * The ‘-3’ switch now automatically enables the ‘-Qwarn’ switch that
     causes warnings about using classic division with integers and long
     integers.


File: python.info,  Node: PEP 372 Adding an Ordered Dictionary to collections,  Next: PEP 378 Format Specifier for Thousands Separator<2>,  Prev: Python 3 1 Features,  Up: What's New in Python 2 7

1.8.4 PEP 372: Adding an Ordered Dictionary to collections
----------------------------------------------------------

Regular Python dictionaries iterate over key/value pairs in arbitrary
order.  Over the years, a number of authors have written alternative
implementations that remember the order that the keys were originally
inserted.  Based on the experiences from those implementations, 2.7
introduces a new *note OrderedDict: 1bd. class in the *note collections:
1e. module.

The *note OrderedDict: 1bd. API provides the same interface as regular
dictionaries but iterates over keys and values in a guaranteed order
depending on when a key was first inserted:

     >>> from collections import OrderedDict
     >>> d = OrderedDict([('first', 1),
     ...                  ('second', 2),
     ...                  ('third', 3)])
     >>> d.items()
     [('first', 1), ('second', 2), ('third', 3)]

If a new entry overwrites an existing entry, the original insertion
position is left unchanged:

     >>> d['second'] = 4
     >>> d.items()
     [('first', 1), ('second', 4), ('third', 3)]

Deleting an entry and reinserting it will move it to the end:

     >>> del d['second']
     >>> d['second'] = 5
     >>> d.items()
     [('first', 1), ('third', 3), ('second', 5)]

The *note popitem(): 8f1. method has an optional `last' argument that
defaults to True.  If `last' is True, the most recently added key is
returned and removed; if it’s False, the oldest key is selected:

     >>> od = OrderedDict([(x,0) for x in range(20)])
     >>> od.popitem()
     (19, 0)
     >>> od.popitem()
     (18, 0)
     >>> od.popitem(last=False)
     (0, 0)
     >>> od.popitem(last=False)
     (1, 0)

Comparing two ordered dictionaries checks both the keys and values, and
requires that the insertion order was the same:

     >>> od1 = OrderedDict([('first', 1),
     ...                    ('second', 2),
     ...                    ('third', 3)])
     >>> od2 = OrderedDict([('third', 3),
     ...                    ('first', 1),
     ...                    ('second', 2)])
     >>> od1 == od2
     False
     >>> # Move 'third' key to the end
     >>> del od2['third']; od2['third'] = 3
     >>> od1 == od2
     True

Comparing an *note OrderedDict: 1bd. with a regular dictionary ignores
the insertion order and just compares the keys and values.

How does the *note OrderedDict: 1bd. work?  It maintains a doubly-linked
list of keys, appending new keys to the list as they’re inserted.  A
secondary dictionary maps keys to their corresponding list node, so
deletion doesn’t have to traverse the entire linked list and therefore
remains O(1).

The standard library now supports use of ordered dictionaries in several
modules.

   * The ‘ConfigParser’ module uses them by default, meaning that
     configuration files can now be read, modified, and then written
     back in their original order.

   * The *note _asdict(): 8f2. method for *note
     collections.namedtuple(): 229. now returns an ordered dictionary
     with the values appearing in the same order as the underlying tuple
     indices.

   * The *note json: a2. module’s *note JSONDecoder: 8f3. class
     constructor was extended with an `object_pairs_hook' parameter to
     allow ‘OrderedDict’ instances to be built by the decoder.  Support
     was also added for third-party tools like PyYAML(1).

See also
........

PEP 372(2) - Adding an ordered dictionary to collections

     PEP written by Armin Ronacher and Raymond Hettinger; implemented by
     Raymond Hettinger.

   ---------- Footnotes ----------

   (1) http://pyyaml.org/

   (2) https://www.python.org/dev/peps/pep-0372


File: python.info,  Node: PEP 378 Format Specifier for Thousands Separator<2>,  Next: PEP 389 The argparse Module for Parsing Command Lines,  Prev: PEP 372 Adding an Ordered Dictionary to collections,  Up: What's New in Python 2 7

1.8.5 PEP 378: Format Specifier for Thousands Separator
-------------------------------------------------------

To make program output more readable, it can be useful to add separators
to large numbers, rendering them as 18,446,744,073,709,551,616 instead
of 18446744073709551616.

The fully general solution for doing this is the *note locale: a7.
module, which can use different separators ("," in North America, "."
in Europe) and different grouping sizes, but *note locale: a7. is
complicated to use and unsuitable for multi-threaded applications where
different threads are producing output for different locales.

Therefore, a simple comma-grouping mechanism has been added to the
mini-language used by the *note str.format(): 14d. method.  When
formatting a floating-point number, simply include a comma between the
width and the precision:

     >>> '{:20,.2f}'.format(18446744073709551616.0)
     '18,446,744,073,709,551,616.00'

When formatting an integer, include the comma after the width:

     >>> '{:20,d}'.format(18446744073709551616)
     '18,446,744,073,709,551,616'

This mechanism is not adaptable at all; commas are always used as the
separator and the grouping is always into three-digit groups.  The
comma-formatting mechanism isn’t as general as the *note locale: a7.
module, but it’s easier to use.

See also
........

PEP 378(1) - Format Specifier for Thousands Separator

     PEP written by Raymond Hettinger; implemented by Eric Smith.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0378


File: python.info,  Node: PEP 389 The argparse Module for Parsing Command Lines,  Next: PEP 391 Dictionary-Based Configuration For Logging,  Prev: PEP 378 Format Specifier for Thousands Separator<2>,  Up: What's New in Python 2 7

1.8.6 PEP 389: The argparse Module for Parsing Command Lines
------------------------------------------------------------

The *note argparse: 6. module for parsing command-line arguments was
added as a more powerful replacement for the *note optparse: c1. module.

This means Python now supports three different modules for parsing
command-line arguments: *note getopt: 86, *note optparse: c1, and *note
argparse: 6.  The *note getopt: 86. module closely resembles the C
library’s ‘getopt()’ function, so it remains useful if you’re writing a
Python prototype that will eventually be rewritten in C. *note optparse:
c1. becomes redundant, but there are no plans to remove it because there
are many scripts still using it, and there’s no automated way to update
these scripts.  (Making the *note argparse: 6. API consistent with *note
optparse: c1.’s interface was discussed but rejected as too messy and
difficult.)

In short, if you’re writing a new script and don’t need to worry about
compatibility with earlier versions of Python, use *note argparse: 6.
instead of *note optparse: c1.

Here’s an example:

     import argparse

     parser = argparse.ArgumentParser(description='Command-line example.')

     # Add optional switches
     parser.add_argument('-v', action='store_true', dest='is_verbose',
                         help='produce verbose output')
     parser.add_argument('-o', action='store', dest='output',
                         metavar='FILE',
                         help='direct output to FILE instead of stdout')
     parser.add_argument('-C', action='store', type=int, dest='context',
                         metavar='NUM', default=0,
                         help='display NUM lines of added context')

     # Allow any number of additional arguments.
     parser.add_argument(nargs='*', action='store', dest='inputs',
                         help='input filenames (default is stdin)')

     args = parser.parse_args()
     print args.__dict__

Unless you override it, *note -h: 8f6. and *note –help: 8f7. switches
are automatically added, and produce neatly formatted output:

     -> ./python.exe argparse-example.py --help
     usage: argparse-example.py [-h] [-v] [-o FILE] [-C NUM] [inputs [inputs ...]]

     Command-line example.

     positional arguments:
       inputs      input filenames (default is stdin)

     optional arguments:
       -h, --help  show this help message and exit
       -v          produce verbose output
       -o FILE     direct output to FILE instead of stdout
       -C NUM      display NUM lines of added context

As with *note optparse: c1, the command-line switches and arguments are
returned as an object with attributes named by the `dest' parameters:

     -> ./python.exe argparse-example.py -v
     {'output': None,
      'is_verbose': True,
      'context': 0,
      'inputs': []}

     -> ./python.exe argparse-example.py -v -o /tmp/output -C 4 file1 file2
     {'output': '/tmp/output',
      'is_verbose': True,
      'context': 4,
      'inputs': ['file1', 'file2']}

*note argparse: 6. has much fancier validation than *note optparse: c1.;
you can specify an exact number of arguments as an integer, 0 or more
arguments by passing ‘'*'’, 1 or more by passing ‘'+'’, or an optional
argument with ‘'?'’.  A top-level parser can contain sub-parsers to
define subcommands that have different sets of switches, as in ‘svn
commit’, ‘svn checkout’, etc.  You can specify an argument’s type as
*note FileType: 411, which will automatically open files for you and
understands that ‘'-'’ means standard input or output.

See also
........

*note argparse: 6. documentation

     The documentation page of the argparse module.

*note Upgrading optparse code: 76b.

     Part of the Python documentation, describing how to convert code
     that uses *note optparse: c1.

PEP 389(1) - argparse - New Command Line Parsing Module

     PEP written and implemented by Steven Bethard.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0389


File: python.info,  Node: PEP 391 Dictionary-Based Configuration For Logging,  Next: PEP 3106 Dictionary Views,  Prev: PEP 389 The argparse Module for Parsing Command Lines,  Up: What's New in Python 2 7

1.8.7 PEP 391: Dictionary-Based Configuration For Logging
---------------------------------------------------------

The *note logging: a8. module is very flexible; applications can define
a tree of logging subsystems, and each logger in this tree can filter
out certain messages, format them differently, and direct messages to a
varying number of handlers.

All this flexibility can require a lot of configuration.  You can write
Python statements to create objects and set their properties, but a
complex set-up requires verbose but boring code.  *note logging: a8.
also supports a ‘fileConfig()’ function that parses a file, but the file
format doesn’t support configuring filters, and it’s messier to generate
programmatically.

Python 2.7 adds a ‘dictConfig()’ function that uses a dictionary to
configure logging.  There are many ways to produce a dictionary from
different sources: construct one with code; parse a file containing
JSON; or use a YAML parsing library if one is installed.  For more
information see *note Configuration functions: 8f9.

The following example configures two loggers, the root logger and a
logger named "network".  Messages sent to the root logger will be sent
to the system log using the syslog protocol, and messages to the
"network" logger will be written to a ‘network.log’ file that will be
rotated once the log reaches 1MB.

     import logging
     import logging.config

     configdict = {
      'version': 1,    # Configuration schema in use; must be 1 for now
      'formatters': {
          'standard': {
              'format': ('%(asctime)s %(name)-15s '
                         '%(levelname)-8s %(message)s')}},

      'handlers': {'netlog': {'backupCount': 10,
                          'class': 'logging.handlers.RotatingFileHandler',
                          'filename': '/logs/network.log',
                          'formatter': 'standard',
                          'level': 'INFO',
                          'maxBytes': 1000000},
                   'syslog': {'class': 'logging.handlers.SysLogHandler',
                              'formatter': 'standard',
                              'level': 'ERROR'}},

      # Specify all the subordinate loggers
      'loggers': {
                  'network': {
                              'handlers': ['netlog']
                  }
      },
      # Specify properties of the root logger
      'root': {
               'handlers': ['syslog']
      },
     }

     # Set up configuration
     logging.config.dictConfig(configdict)

     # As an example, log two error messages
     logger = logging.getLogger('/')
     logger.error('Database not found')

     netlogger = logging.getLogger('network')
     netlogger.error('Connection failed')

Three smaller enhancements to the *note logging: a8. module, all
implemented by Vinay Sajip, are:

   * The *note SysLogHandler: 64d. class now supports syslogging over
     TCP. The constructor has a `socktype' parameter giving the type of
     socket to use, either *note socket.SOCK_DGRAM: 8fa. for UDP or
     *note socket.SOCK_STREAM: 8fb. for TCP. The default protocol
     remains UDP.

   * *note Logger: 2c6. instances gained a *note getChild(): 8fc. method
     that retrieves a descendant logger using a relative path.  For
     example, once you retrieve a logger by doing ‘log =
     getLogger('app')’, calling ‘log.getChild('network.listen')’ is
     equivalent to ‘getLogger('app.network.listen')’.

   * The *note LoggerAdapter: 8fd. class gained a ‘isEnabledFor()’
     method that takes a `level' and returns whether the underlying
     logger would process a message of that level of importance.

See also
........

PEP 391(1) - Dictionary-Based Configuration For Logging

     PEP written and implemented by Vinay Sajip.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0391


File: python.info,  Node: PEP 3106 Dictionary Views,  Next: PEP 3137 The memoryview Object,  Prev: PEP 391 Dictionary-Based Configuration For Logging,  Up: What's New in Python 2 7

1.8.8 PEP 3106: Dictionary Views
--------------------------------

The dictionary methods *note keys(): 88f, *note values(): 891, and *note
items(): 890. are different in Python 3.x.  They return an object called
a `view' instead of a fully materialized list.

It’s not possible to change the return values of *note keys(): 88f,
*note values(): 891, and *note items(): 890. in Python 2.7 because too
much code would break.  Instead the 3.x versions were added under the
new names ‘viewkeys()’, ‘viewvalues()’, and ‘viewitems()’.

     >>> d = dict((i*10, chr(65+i)) for i in range(26))
     >>> d
     {0: 'A', 130: 'N', 10: 'B', 140: 'O', 20: ..., 250: 'Z'}
     >>> d.viewkeys()
     dict_keys([0, 130, 10, 140, 20, 150, 30, ..., 250])

Views can be iterated over, but the key and item views also behave like
sets.  The ‘&’ operator performs intersection, and ‘|’ performs a union:

     >>> d1 = dict((i*10, chr(65+i)) for i in range(26))
     >>> d2 = dict((i**.5, i) for i in range(1000))
     >>> d1.viewkeys() & d2.viewkeys()
     set([0.0, 10.0, 20.0, 30.0])
     >>> d1.viewkeys() | range(0, 30)
     set([0, 1, 130, 3, 4, 5, 6, ..., 120, 250])

The view keeps track of the dictionary and its contents change as the
dictionary is modified:

     >>> vk = d.viewkeys()
     >>> vk
     dict_keys([0, 130, 10, ..., 250])
     >>> d[260] = '&'
     >>> vk
     dict_keys([0, 130, 260, 10, ..., 250])

However, note that you can’t add or remove keys while you’re iterating
over the view:

     >>> for k in vk:
     ...     d[k*2] = k
     ...
     Traceback (most recent call last):
       File "<stdin>", line 1, in <module>
     RuntimeError: dictionary changed size during iteration

You can use the view methods in Python 2.x code, and the 2to3 converter
will change them to the standard *note keys(): 88f, *note values(): 891,
and *note items(): 890. methods.

See also
........

PEP 3106(1) - Revamping dict.keys(), .values() and .items()

     PEP written by Guido van Rossum.  Backported to 2.7 by Alexandre
     Vassalotti; issue 1967(2).

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3106

   (2) https://bugs.python.org/issue1967


File: python.info,  Node: PEP 3137 The memoryview Object,  Next: Other Language Changes<7>,  Prev: PEP 3106 Dictionary Views,  Up: What's New in Python 2 7

1.8.9 PEP 3137: The memoryview Object
-------------------------------------

The *note memoryview: 1b7. object provides a view of another object’s
memory content that matches the *note bytes: 1db. type’s interface.

     >>> import string
     >>> m = memoryview(string.letters)
     >>> m
     <memory at 0x37f850>
     >>> len(m)           # Returns length of underlying object
     52
     >>> m[0], m[25], m[26]   # Indexing returns one byte
     ('a', 'z', 'A')
     >>> m2 = m[0:26]         # Slicing returns another memoryview
     >>> m2
     <memory at 0x37f080>

The content of the view can be converted to a string of bytes or a list
of integers:

     >>> m2.tobytes()
     'abcdefghijklmnopqrstuvwxyz'
     >>> m2.tolist()
     [97, 98, 99, 100, 101, 102, 103, ... 121, 122]
     >>>

*note memoryview: 1b7. objects allow modifying the underlying object if
it’s a mutable object.

     >>> m2[0] = 75
     Traceback (most recent call last):
       File "<stdin>", line 1, in <module>
     TypeError: cannot modify read-only memory
     >>> b = bytearray(string.letters)  # Creating a mutable object
     >>> b
     bytearray(b'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')
     >>> mb = memoryview(b)
     >>> mb[0] = '*'         # Assign to view, changing the bytearray.
     >>> b[0:5]              # The bytearray has been changed.
     bytearray(b'*bcde')
     >>>

See also
........

PEP 3137(1) - Immutable Bytes and Mutable Buffer

     PEP written by Guido van Rossum.  Implemented by Travis Oliphant,
     Antoine Pitrou and others.  Backported to 2.7 by Antoine Pitrou;
     issue 2396(2).

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3137

   (2) https://bugs.python.org/issue2396


File: python.info,  Node: Other Language Changes<7>,  Next: New and Improved Modules,  Prev: PEP 3137 The memoryview Object,  Up: What's New in Python 2 7

1.8.10 Other Language Changes
-----------------------------

Some smaller changes made to the core Python language are:

   * The syntax for set literals has been backported from Python 3.x.
     Curly brackets are used to surround the contents of the resulting
     mutable set; set literals are distinguished from dictionaries by
     not containing colons and values.  ‘{}’ continues to represent an
     empty dictionary; use ‘set()’ for an empty set.

          >>> {1, 2, 3, 4, 5}
          set([1, 2, 3, 4, 5])
          >>> set() # empty set
          set([])
          >>> {}    # empty dict
          {}

     Backported by Alexandre Vassalotti; issue 2335(1).

   * Dictionary and set comprehensions are another feature backported
     from 3.x, generalizing list/generator comprehensions to use the
     literal syntax for sets and dictionaries.

          >>> {x: x*x for x in range(6)}
          {0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25}
          >>> {('a'*x) for x in range(6)}
          set(['', 'a', 'aa', 'aaa', 'aaaa', 'aaaaa'])

     Backported by Alexandre Vassalotti; issue 2333(2).

   * The *note with: 29d. statement can now use multiple context
     managers in one statement.  Context managers are processed from
     left to right and each one is treated as beginning a new *note
     with: 29d. statement.  This means that:

          with A() as a, B() as b:
              ... suite of statements ...

     is equivalent to:

          with A() as a:
              with B() as b:
                  ... suite of statements ...

     The ‘contextlib.nested()’ function provides a very similar
     function, so it’s no longer necessary and has been deprecated.

     (Proposed in ‘https://codereview.appspot.com/53094’; implemented by
     Georg Brandl.)

   * Conversions between floating-point numbers and strings are now
     correctly rounded on most platforms.  These conversions occur in
     many different places: *note str(): 25a. on floats and complex
     numbers; the *note float: 57a. and *note complex: 579.
     constructors; numeric formatting; serializing and deserializing
     floats and complex numbers using the *note marshal: af, *note
     pickle: c8. and *note json: a2. modules; parsing of float and
     imaginary literals in Python code; and *note Decimal: 618.-to-float
     conversion.

     Related to this, the *note repr(): 3bb. of a floating-point number
     `x' now returns a result based on the shortest decimal string
     that’s guaranteed to round back to `x' under correct rounding (with
     round-half-to-even rounding mode).  Previously it gave a string
     based on rounding x to 17 decimal digits.

     The rounding library responsible for this improvement works on
     Windows and on Unix platforms using the gcc, icc, or suncc
     compilers.  There may be a small number of platforms where correct
     operation of this code cannot be guaranteed, so the code is not
     used on such systems.  You can find out which code is being used by
     checking *note sys.float_repr_style: 901, which will be ‘short’ if
     the new code is in use and ‘legacy’ if it isn’t.

     Implemented by Eric Smith and Mark Dickinson, using David Gay’s
     ‘dtoa.c’ library; issue 7117(3).

   * Conversions from long integers and regular integers to floating
     point now round differently, returning the floating-point number
     closest to the number.  This doesn’t matter for small integers that
     can be converted exactly, but for large numbers that will
     unavoidably lose precision, Python 2.7 now approximates more
     closely.  For example, Python 2.6 computed the following:

          >>> n = 295147905179352891391
          >>> float(n)
          2.9514790517935283e+20
          >>> n - long(float(n))
          65535L

     Python 2.7’s floating-point result is larger, but much closer to
     the true value:

          >>> n = 295147905179352891391
          >>> float(n)
          2.9514790517935289e+20
          >>> n - long(float(n))
          -1L

     (Implemented by Mark Dickinson; issue 3166(4).)

     Integer division is also more accurate in its rounding behaviours.
     (Also implemented by Mark Dickinson; issue 1811(5).)

   * Implicit coercion for complex numbers has been removed; the
     interpreter will no longer ever attempt to call a ‘__coerce__()’
     method on complex objects.  (Removed by Meador Inge and Mark
     Dickinson; issue 5211(6).)

   * The *note str.format(): 14d. method now supports automatic
     numbering of the replacement fields.  This makes using *note
     str.format(): 14d. more closely resemble using ‘%s’ formatting:

          >>> '{}:{}:{}'.format(2009, 04, 'Sunday')
          '2009:4:Sunday'
          >>> '{}:{}:{day}'.format(2009, 4, day='Sunday')
          '2009:4:Sunday'

     The auto-numbering takes the fields from left to right, so the
     first ‘{...}’ specifier will use the first argument to *note
     str.format(): 14d, the next specifier will use the next argument,
     and so on.  You can’t mix auto-numbering and explicit numbering –
     either number all of your specifier fields or none of them – but
     you can mix auto-numbering and named fields, as in the second
     example above.  (Contributed by Eric Smith; issue 5237(7).)

     Complex numbers now correctly support usage with *note format():
     14e, and default to being right-aligned.  Specifying a precision or
     comma-separation applies to both the real and imaginary parts of
     the number, but a specified field width and alignment is applied to
     the whole of the resulting ‘1.5+3j’ output.  (Contributed by Eric
     Smith; issue 1588(8) and issue 7988(9).)

     The ’F’ format code now always formats its output using uppercase
     characters, so it will now produce ’INF’ and ’NAN’.  (Contributed
     by Eric Smith; issue 3382(10).)

     A low-level change: the *note object.__format__(): 561. method now
     triggers a *note PendingDeprecationWarning: 19e. if it’s passed a
     format string, because the *note __format__(): 561. method for
     *note object: 5cb. converts the object to a string representation
     and formats that.  Previously the method silently applied the
     format string to the string representation, but that could hide
     mistakes in Python code.  If you’re supplying formatting
     information such as an alignment or precision, presumably you’re
     expecting the formatting to be applied in some object-specific way.
     (Fixed by Eric Smith; issue 7994(11).)

   * The *note int(): 227. and ‘long()’ types gained a ‘bit_length’
     method that returns the number of bits necessary to represent its
     argument in binary:

          >>> n = 37
          >>> bin(n)
          '0b100101'
          >>> n.bit_length()
          6
          >>> n = 2**123-1
          >>> n.bit_length()
          123
          >>> (n+1).bit_length()
          124

     (Contributed by Fredrik Johansson and Victor Stinner; issue
     3439(12).)

   * The *note import: 881. statement will no longer try an absolute
     import if a relative import (e.g.  ‘from .os import sep’) fails.
     This fixes a bug, but could possibly break certain *note import:
     881. statements that were only working by accident.  (Fixed by
     Meador Inge; issue 7902(13).)

   * It’s now possible for a subclass of the built-in ‘unicode’ type to
     override the ‘__unicode__()’ method.  (Implemented by Victor
     Stinner; issue 1583863(14).)

   * The *note bytearray: 1dc. type’s *note translate(): 902. method now
     accepts ‘None’ as its first argument.  (Fixed by Georg Brandl;
     issue 4759(15).)

   * When using ‘@classmethod’ and ‘@staticmethod’ to wrap methods as
     class or static methods, the wrapper object now exposes the wrapped
     function as their ‘__func__’ attribute.  (Contributed by Amaury
     Forgeot d’Arc, after a suggestion by George Sakkis; issue
     5982(16).)

   * When a restricted set of attributes were set using ‘__slots__’,
     deleting an unset attribute would not raise *note AttributeError:
     356. as you would expect.  Fixed by Benjamin Peterson; issue
     7604(17).)

   * Two new encodings are now supported: "cp720", used primarily for
     Arabic text; and "cp858", a variant of CP 850 that adds the euro
     symbol.  (CP720 contributed by Alexander Belchenko and Amaury
     Forgeot d’Arc in issue 1616979(18); CP858 contributed by Tim Hatch
     in issue 8016(19).)

   * The ‘file’ object will now set the ‘filename’ attribute on the
     *note IOError: 5b0. exception when trying to open a directory on
     POSIX platforms (noted by Jan Kaliszewski; issue 4764(20)), and now
     explicitly checks for and forbids writing to read-only file objects
     instead of trusting the C library to catch and report the error
     (fixed by Stefan Krah; issue 5677(21)).

   * The Python tokenizer now translates line endings itself, so the
     *note compile(): 903. built-in function now accepts code using any
     line-ending convention.  Additionally, it no longer requires that
     the code end in a newline.

   * Extra parentheses in function definitions are illegal in Python
     3.x, meaning that you get a syntax error from ‘def f((x)): pass’.
     In Python3-warning mode, Python 2.7 will now warn about this odd
     usage.  (Noted by James Lingard; issue 7362(22).)

   * It’s now possible to create weak references to old-style class
     objects.  New-style classes were always weak-referenceable.  (Fixed
     by Antoine Pitrou; issue 8268(23).)

   * When a module object is garbage-collected, the module’s dictionary
     is now only cleared if no one else is holding a reference to the
     dictionary (issue 7140(24)).

* Menu:

* Interpreter Changes:: 
* Optimizations: Optimizations<6>. 

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue2335

   (2) https://bugs.python.org/issue2333

   (3) https://bugs.python.org/issue7117

   (4) https://bugs.python.org/issue3166

   (5) https://bugs.python.org/issue1811

   (6) https://bugs.python.org/issue5211

   (7) https://bugs.python.org/issue5237

   (8) https://bugs.python.org/issue1588

   (9) https://bugs.python.org/issue7988

   (10) https://bugs.python.org/issue3382

   (11) https://bugs.python.org/issue7994

   (12) https://bugs.python.org/issue3439

   (13) https://bugs.python.org/issue7902

   (14) https://bugs.python.org/issue1583863

   (15) https://bugs.python.org/issue4759

   (16) https://bugs.python.org/issue5982

   (17) https://bugs.python.org/issue7604

   (18) https://bugs.python.org/issue1616979

   (19) https://bugs.python.org/issue8016

   (20) https://bugs.python.org/issue4764

   (21) https://bugs.python.org/issue5677

   (22) https://bugs.python.org/issue7362

   (23) https://bugs.python.org/issue8268

   (24) https://bugs.python.org/issue7140


File: python.info,  Node: Interpreter Changes,  Next: Optimizations<6>,  Up: Other Language Changes<7>

1.8.10.1 Interpreter Changes
............................

A new environment variable, *note PYTHONWARNINGS: 788, allows
controlling warnings.  It should be set to a string containing warning
settings, equivalent to those used with the *note -W: 8eb. switch,
separated by commas.  (Contributed by Brian Curtin; issue 7301(1).)

For example, the following setting will print warnings every time they
occur, but turn warnings from the ‘Cookie’ module into an error.  (The
exact syntax for setting an environment variable varies across operating
systems and shells.)

     export PYTHONWARNINGS=all,error:::Cookie:0

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue7301


File: python.info,  Node: Optimizations<6>,  Prev: Interpreter Changes,  Up: Other Language Changes<7>

1.8.10.2 Optimizations
......................

Several performance enhancements have been added:

   * A new opcode was added to perform the initial setup for *note with:
     29d. statements, looking up the *note __enter__(): 907. and *note
     __exit__(): 908. methods.  (Contributed by Benjamin Peterson.)

   * The garbage collector now performs better for one common usage
     pattern: when many objects are being allocated without deallocating
     any of them.  This would previously take quadratic time for garbage
     collection, but now the number of full garbage collections is
     reduced as the number of objects on the heap grows.  The new logic
     only performs a full garbage collection pass when the middle
     generation has been collected 10 times and when the number of
     survivor objects from the middle generation exceeds 10% of the
     number of objects in the oldest generation.  (Suggested by Martin
     von Löwis and implemented by Antoine Pitrou; issue 4074(1).)

   * The garbage collector tries to avoid tracking simple containers
     which can’t be part of a cycle.  In Python 2.7, this is now true
     for tuples and dicts containing atomic types (such as ints,
     strings, etc.).  Transitively, a dict containing tuples of atomic
     types won’t be tracked either.  This helps reduce the cost of each
     garbage collection by decreasing the number of objects to be
     considered and traversed by the collector.  (Contributed by Antoine
     Pitrou; issue 4688(2).)

   * Long integers are now stored internally either in base 2**15 or in
     base 2**30, the base being determined at build time.  Previously,
     they were always stored in base 2**15.  Using base 2**30 gives
     significant performance improvements on 64-bit machines, but
     benchmark results on 32-bit machines have been mixed.  Therefore,
     the default is to use base 2**30 on 64-bit machines and base 2**15
     on 32-bit machines; on Unix, there’s a new configure option
     ‘--enable-big-digits’ that can be used to override this default.

     Apart from the performance improvements this change should be
     invisible to end users, with one exception: for testing and
     debugging purposes there’s a new structseq ‘sys.long_info’ that
     provides information about the internal format, giving the number
     of bits per digit and the size in bytes of the C type used to store
     each digit:

          >>> import sys
          >>> sys.long_info
          sys.long_info(bits_per_digit=30, sizeof_digit=4)

     (Contributed by Mark Dickinson; issue 4258(3).)

     Another set of changes made long objects a few bytes smaller: 2
     bytes smaller on 32-bit systems and 6 bytes on 64-bit.
     (Contributed by Mark Dickinson; issue 5260(4).)

   * The division algorithm for long integers has been made faster by
     tightening the inner loop, doing shifts instead of multiplications,
     and fixing an unnecessary extra iteration.  Various benchmarks show
     speedups of between 50% and 150% for long integer divisions and
     modulo operations.  (Contributed by Mark Dickinson; issue 5512(5).)
     Bitwise operations are also significantly faster (initial patch by
     Gregory Smith; issue 1087418(6)).

   * The implementation of ‘%’ checks for the left-side operand being a
     Python string and special-cases it; this results in a 1-3%
     performance increase for applications that frequently use ‘%’ with
     strings, such as templating libraries.  (Implemented by Collin
     Winter; issue 5176(7).)

   * List comprehensions with an ‘if’ condition are compiled into faster
     bytecode.  (Patch by Antoine Pitrou, back-ported to 2.7 by Jeffrey
     Yasskin; issue 4715(8).)

   * Converting an integer or long integer to a decimal string was made
     faster by special-casing base 10 instead of using a generalized
     conversion function that supports arbitrary bases.  (Patch by
     Gawain Bolton; issue 6713(9).)

   * The ‘split()’, ‘replace()’, ‘rindex()’, ‘rpartition()’, and
     ‘rsplit()’ methods of string-like types (strings, Unicode strings,
     and *note bytearray: 1dc. objects) now use a fast reverse-search
     algorithm instead of a character-by-character scan.  This is
     sometimes faster by a factor of 10.  (Added by Florent Xicluna;
     issue 7462(10) and issue 7622(11).)

   * The *note pickle: c8. and ‘cPickle’ modules now automatically
     intern the strings used for attribute names, reducing memory usage
     of the objects resulting from unpickling.  (Contributed by Jake
     McGuire; issue 5084(12).)

   * The ‘cPickle’ module now special-cases dictionaries, nearly halving
     the time required to pickle them.  (Contributed by Collin Winter;
     issue 5670(13).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue4074

   (2) https://bugs.python.org/issue4688

   (3) https://bugs.python.org/issue4258

   (4) https://bugs.python.org/issue5260

   (5) https://bugs.python.org/issue5512

   (6) https://bugs.python.org/issue1087418

   (7) https://bugs.python.org/issue5176

   (8) https://bugs.python.org/issue4715

   (9) https://bugs.python.org/issue6713

   (10) https://bugs.python.org/issue7462

   (11) https://bugs.python.org/issue7622

   (12) https://bugs.python.org/issue5084

   (13) https://bugs.python.org/issue5670


File: python.info,  Node: New and Improved Modules,  Next: Build and C API Changes<7>,  Prev: Other Language Changes<7>,  Up: What's New in Python 2 7

1.8.11 New and Improved Modules
-------------------------------

As in every release, Python’s standard library received a number of
enhancements and bug fixes.  Here’s a partial list of the most notable
changes, sorted alphabetically by module name.  Consult the ‘Misc/NEWS’
file in the source tree for a more complete list of changes, or look
through the Subversion logs for all the details.

   * The *note bdb: f. module’s base debugging class *note Bdb: 90a.
     gained a feature for skipping modules.  The constructor now takes
     an iterable containing glob-style patterns such as ‘django.*’; the
     debugger will not step into stack frames from a module that matches
     one of these patterns.  (Contributed by Maru Newby after a
     suggestion by Senthil Kumaran; issue 5142(1).)

   * The *note binascii: 10. module now supports the buffer API, so it
     can be used with *note memoryview: 1b7. instances and other similar
     buffer objects.  (Backported from 3.x by Florent Xicluna; issue
     7703(2).)

   * Updated module: the ‘bsddb’ module has been updated from
     4.7.2devel9 to version 4.8.4 of the pybsddb package(3).  The new
     version features better Python 3.x compatibility, various bug
     fixes, and adds several new BerkeleyDB flags and methods.  (Updated
     by Jesús Cea Avión; issue 8156(4).  The pybsddb changelog can be
     read at ‘http://hg.jcea.es/pybsddb/file/tip/ChangeLog’.)

   * The *note bz2: 14. module’s *note BZ2File: 539. now supports the
     context management protocol, so you can write ‘with
     bz2.BZ2File(...) as f:’.  (Contributed by Hagen Fürstenau; issue
     3860(5).)

   * New class: the *note Counter: 602. class in the *note collections:
     1e. module is useful for tallying data.  *note Counter: 602.
     instances behave mostly like dictionaries but return zero for
     missing keys instead of raising a *note KeyError: 1a7.:

          >>> from collections import Counter
          >>> c = Counter()
          >>> for letter in 'here is a sample of english text':
          ...   c[letter] += 1
          ...
          >>> c
          Counter({' ': 6, 'e': 5, 's': 3, 'a': 2, 'i': 2, 'h': 2,
          'l': 2, 't': 2, 'g': 1, 'f': 1, 'm': 1, 'o': 1, 'n': 1,
          'p': 1, 'r': 1, 'x': 1})
          >>> c['e']
          5
          >>> c['z']
          0

     There are three additional *note Counter: 602. methods.  *note
     most_common(): 90b. returns the N most common elements and their
     counts.  *note elements(): 90c. returns an iterator over the
     contained elements, repeating each element as many times as its
     count.  *note subtract(): 7a4. takes an iterable and subtracts one
     for each element instead of adding; if the argument is a dictionary
     or another ‘Counter’, the counts are subtracted.

          >>> c.most_common(5)
          [(' ', 6), ('e', 5), ('s', 3), ('a', 2), ('i', 2)]
          >>> c.elements() ->
             'a', 'a', ' ', ' ', ' ', ' ', ' ', ' ',
             'e', 'e', 'e', 'e', 'e', 'g', 'f', 'i', 'i',
             'h', 'h', 'm', 'l', 'l', 'o', 'n', 'p', 's',
             's', 's', 'r', 't', 't', 'x'
          >>> c['e']
          5
          >>> c.subtract('very heavy on the letter e')
          >>> c['e']    # Count is now lower
          -1

     Contributed by Raymond Hettinger; issue 1696199(6).

     New class: *note OrderedDict: 1bd. is described in the earlier
     section *note PEP 372; Adding an Ordered Dictionary to collections:
     8ed.

     New method: The *note deque: 24e. data type now has a *note
     count(): 7a6. method that returns the number of contained elements
     equal to the supplied argument `x', and a *note reverse(): 7a7.
     method that reverses the elements of the deque in-place.  *note
     deque: 24e. also exposes its maximum length as the read-only *note
     maxlen: 90d. attribute.  (Both features added by Raymond
     Hettinger.)

     The *note namedtuple: 229. class now has an optional `rename'
     parameter.  If `rename' is true, field names that are invalid
     because they’ve been repeated or aren’t legal Python identifiers
     will be renamed to legal names that are derived from the field’s
     position within the list of fields:

          >>> from collections import namedtuple
          >>> T = namedtuple('T', ['field1', '$illegal', 'for', 'field2'], rename=True)
          >>> T._fields
          ('field1', '_1', '_2', 'field2')

     (Added by Raymond Hettinger; issue 1818(7).)

     Finally, the ‘Mapping’ abstract base class now returns *note
     NotImplemented: 441. if a mapping is compared to another type that
     isn’t a ‘Mapping’.  (Fixed by Daniel Stutzbach; issue 8729(8).)

   * Constructors for the parsing classes in the ‘ConfigParser’ module
     now take an `allow_no_value' parameter, defaulting to false; if
     true, options without values will be allowed.  For example:

          >>> import ConfigParser, StringIO
          >>> sample_config = """
          ... [mysqld]
          ... user = mysql
          ... pid-file = /var/run/mysqld/mysqld.pid
          ... skip-bdb
          ... """
          >>> config = ConfigParser.RawConfigParser(allow_no_value=True)
          >>> config.readfp(StringIO.StringIO(sample_config))
          >>> config.get('mysqld', 'user')
          'mysql'
          >>> print config.get('mysqld', 'skip-bdb')
          None
          >>> print config.get('mysqld', 'unknown')
          Traceback (most recent call last):
            ...
          NoOptionError: No option 'unknown' in section: 'mysqld'

     (Contributed by Mats Kindahl; issue 7005(9).)

   * Deprecated function: ‘contextlib.nested()’, which allows handling
     more than one context manager with a single *note with: 29d.
     statement, has been deprecated, because the *note with: 29d.
     statement now supports multiple context managers.

   * The ‘cookielib’ module now ignores cookies that have an invalid
     version field, one that doesn’t contain an integer value.  (Fixed
     by John J. Lee; issue 3924(10).)

   * The *note copy: 25. module’s *note deepcopy(): 90e. function will
     now correctly copy bound instance methods.  (Implemented by Robert
     Collins; issue 1515(11).)

   * The *note ctypes: 2a. module now always converts ‘None’ to a C NULL
     pointer for arguments declared as pointers.  (Changed by Thomas
     Heller; issue 4606(12).)  The underlying libffi library(13) has
     been updated to version 3.0.9, containing various fixes for
     different platforms.  (Updated by Matthias Klose; issue 8142(14).)

   * New method: the *note datetime: 2f. module’s *note timedelta: 7ae.
     class gained a *note total_seconds(): 90f. method that returns the
     number of seconds in the duration.  (Contributed by Brian Quinlan;
     issue 5788(15).)

   * New method: the *note Decimal: 618. class gained a *note
     from_float(): 7d0. class method that performs an exact conversion
     of a floating-point number to a *note Decimal: 618.  This exact
     conversion strives for the closest decimal approximation to the
     floating-point representation’s value; the resulting decimal value
     will therefore still include the inaccuracy, if any.  For example,
     ‘Decimal.from_float(0.1)’ returns
     ‘Decimal('0.1000000000000000055511151231257827021181583404541015625')’.
     (Implemented by Raymond Hettinger; issue 4796(16).)

     Comparing instances of *note Decimal: 618. with floating-point
     numbers now produces sensible results based on the numeric values
     of the operands.  Previously such comparisons would fall back to
     Python’s default rules for comparing objects, which produced
     arbitrary results based on their type.  Note that you still cannot
     combine ‘Decimal’ and floating-point in other operations such as
     addition, since you should be explicitly choosing how to convert
     between float and *note Decimal: 618.  (Fixed by Mark Dickinson;
     issue 2531(17).)

     The constructor for *note Decimal: 618. now accepts floating-point
     numbers (added by Raymond Hettinger; issue 8257(18)) and
     non-European Unicode characters such as Arabic-Indic digits
     (contributed by Mark Dickinson; issue 6595(19)).

     Most of the methods of the *note Context: 61e. class now accept
     integers as well as *note Decimal: 618. instances; the only
     exceptions are the *note canonical(): 910. and *note
     is_canonical(): 911. methods.  (Patch by Juan José Conti; issue
     7633(20).)

     When using *note Decimal: 618. instances with a string’s *note
     format(): 14d. method, the default alignment was previously
     left-alignment.  This has been changed to right-alignment, which is
     more sensible for numeric types.  (Changed by Mark Dickinson; issue
     6857(21).)

     Comparisons involving a signaling NaN value (or ‘sNAN’) now signal
     ‘InvalidOperation’ instead of silently returning a true or false
     value depending on the comparison operator.  Quiet NaN values (or
     ‘NaN’) are now hashable.  (Fixed by Mark Dickinson; issue
     7279(22).)

   * The *note difflib: 35. module now produces output that is more
     compatible with modern ‘diff’/‘patch’ tools through one small
     change, using a tab character instead of spaces as a separator in
     the header giving the filename.  (Fixed by Anatoly Techtonik; issue
     7585(23).)

   * The Distutils ‘sdist’ command now always regenerates the ‘MANIFEST’
     file, since even if the ‘MANIFEST.in’ or ‘setup.py’ files haven’t
     been modified, the user might have created some new files that
     should be included.  (Fixed by Tarek Ziadé; issue 8688(24).)

   * The *note doctest: 65. module’s ‘IGNORE_EXCEPTION_DETAIL’ flag will
     now ignore the name of the module containing the exception being
     tested.  (Patch by Lennart Regebro; issue 7490(25).)

   * The *note email: 67. module’s *note Message: 3d2. class will now
     accept a Unicode-valued payload, automatically converting the
     payload to the encoding specified by ‘output_charset’.  (Added by
     R. David Murray; issue 1368247(26).)

   * The *note Fraction: 378. class now accepts a single float or *note
     Decimal: 618. instance, or two rational numbers, as arguments to
     its constructor.  (Implemented by Mark Dickinson; rationals added
     in issue 5812(27), and float/decimal in issue 8294(28).)

     Ordering comparisons (‘<’, ‘<=’, ‘>’, ‘>=’) between fractions and
     complex numbers now raise a *note TypeError: 562.  This fixes an
     oversight, making the *note Fraction: 378. match the other numeric
     types.

   * New class: *note FTP_TLS: 630. in the *note ftplib: 83. module
     provides secure FTP connections using TLS encapsulation of
     authentication as well as subsequent control and data transfers.
     (Contributed by Giampaolo Rodola; issue 2054(29).)

     The *note storbinary(): 912. method for binary uploads can now
     restart uploads thanks to an added `rest' parameter (patch by Pablo
     Mouzo; issue 6845(30).)

   * New class decorator: *note total_ordering(): 440. in the *note
     functools: 84. module takes a class that defines an *note __eq__():
     89a. method and one of *note __lt__(): 899, *note __le__(): 913,
     *note __gt__(): 914, or *note __ge__(): 915, and generates the
     missing comparison methods.  Since the ‘__cmp__()’ method is being
     deprecated in Python 3.x, this decorator makes it easier to define
     ordered classes.  (Added by Raymond Hettinger; issue 5479(31).)

     New function: *note cmp_to_key(): 7a0. will take an old-style
     comparison function that expects two arguments and return a new
     callable that can be used as the `key' parameter to functions such
     as *note sorted(): 84e, *note min(): 3f9. and *note max(): 3fa,
     etc.  The primary intended use is to help with making code
     compatible with Python 3.x.  (Added by Raymond Hettinger.)

   * New function: the *note gc: 85. module’s *note is_tracked(): 916.
     returns true if a given instance is tracked by the garbage
     collector, false otherwise.  (Contributed by Antoine Pitrou; issue
     4688(32).)

   * The *note gzip: 8b. module’s *note GzipFile: 290. now supports the
     context management protocol, so you can write ‘with
     gzip.GzipFile(...) as f:’ (contributed by Hagen Fürstenau; issue
     3860(33)), and it now implements the *note io.BufferedIOBase: 5fe.
     ABC, so you can wrap it with *note io.BufferedReader: 7df. for
     faster processing (contributed by Nir Aides; issue 7471(34)).  It’s
     also now possible to override the modification time recorded in a
     gzipped file by providing an optional timestamp to the constructor.
     (Contributed by Jacques Frechet; issue 4272(35).)

     Files in gzip format can be padded with trailing zero bytes; the
     *note gzip: 8b. module will now consume these trailing bytes.
     (Fixed by Tadek Pietraszek and Brian Curtin; issue 2846(36).)

   * New attribute: the *note hashlib: 8c. module now has an
     ‘algorithms’ attribute containing a tuple naming the supported
     algorithms.  In Python 2.7, ‘hashlib.algorithms’ contains ‘('md5',
     'sha1', 'sha224', 'sha256', 'sha384', 'sha512')’.  (Contributed by
     Carl Chenet; issue 7418(37).)

   * The default ‘HTTPResponse’ class used by the ‘httplib’ module now
     supports buffering, resulting in much faster reading of HTTP
     responses.  (Contributed by Kristján Valur Jónsson; issue
     4879(38).)

     The ‘HTTPConnection’ and ‘HTTPSConnection’ classes now support a
     `source_address' parameter, a ‘(host, port)’ 2-tuple giving the
     source address that will be used for the connection.  (Contributed
     by Eldon Ziegler; issue 3972(39).)

   * The ‘ihooks’ module now supports relative imports.  Note that
     ‘ihooks’ is an older module for customizing imports, superseded by
     the ‘imputil’ module added in Python 2.0.  (Relative import support
     added by Neil Schemenauer.)

   * The *note imaplib: 97. module now supports IPv6 addresses.
     (Contributed by Derek Morr; issue 1655(40).)

   * New function: the *note inspect: 9e. module’s *note getcallargs():
     39d. takes a callable and its positional and keyword arguments, and
     figures out which of the callable’s parameters will receive each
     argument, returning a dictionary mapping argument names to their
     values.  For example:

          >>> from inspect import getcallargs
          >>> def f(a, b=1, *pos, **named):
          ...     pass
          >>> getcallargs(f, 1, 2, 3)
          {'a': 1, 'b': 2, 'pos': (3,), 'named': {}}
          >>> getcallargs(f, a=2, x=4)
          {'a': 2, 'b': 1, 'pos': (), 'named': {'x': 4}}
          >>> getcallargs(f)
          Traceback (most recent call last):
          ...
          TypeError: f() takes at least 1 argument (0 given)

     Contributed by George Sakkis; issue 3135(41).

   * Updated module: The *note io: 9f. library has been upgraded to the
     version shipped with Python 3.1.  For 3.1, the I/O library was
     entirely rewritten in C and is 2 to 20 times faster depending on
     the task being performed.  The original Python version was renamed
     to the ‘_pyio’ module.

     One minor resulting change: the *note io.TextIOBase: 89f. class now
     has an ‘errors’ attribute giving the error setting used for
     encoding and decoding errors (one of ‘'strict'’, ‘'replace'’,
     ‘'ignore'’).

     The *note io.FileIO: 917. class now raises an *note OSError: 4b6.
     when passed an invalid file descriptor.  (Implemented by Benjamin
     Peterson; issue 4991(42).)  The *note truncate(): 918. method now
     preserves the file position; previously it would change the file
     position to the end of the new file.  (Fixed by Pascal Chambon;
     issue 6939(43).)

   * New function: ‘itertools.compress(data, selectors)’ takes two
     iterators.  Elements of `data' are returned if the corresponding
     value in `selectors' is true:

          itertools.compress('ABCDEF', [1,0,1,0,1,1]) =>
            A, C, E, F

     New function: ‘itertools.combinations_with_replacement(iter, r)’
     returns all the possible `r'-length combinations of elements from
     the iterable `iter'.  Unlike *note combinations(): 919, individual
     elements can be repeated in the generated combinations:

          itertools.combinations_with_replacement('abc', 2) =>
            ('a', 'a'), ('a', 'b'), ('a', 'c'),
            ('b', 'b'), ('b', 'c'), ('c', 'c')

     Note that elements are treated as unique depending on their
     position in the input, not their actual values.

     The *note itertools.count(): 87f. function now has a `step'
     argument that allows incrementing by values other than 1.  *note
     count(): 87f. also now allows keyword arguments, and using
     non-integer values such as floats or *note Decimal: 618. instances.
     (Implemented by Raymond Hettinger; issue 5032(44).)

     *note itertools.combinations(): 919. and *note itertools.product():
     91a. previously raised *note ValueError: 19c. for values of `r'
     larger than the input iterable.  This was deemed a specification
     error, so they now return an empty iterator.  (Fixed by Raymond
     Hettinger; issue 4816(45).)

   * Updated module: The *note json: a2. module was upgraded to version
     2.0.9 of the simplejson package, which includes a C extension that
     makes encoding and decoding faster.  (Contributed by Bob Ippolito;
     issue 4136(46).)

     To support the new *note collections.OrderedDict: 1bd. type, *note
     json.load(): 91b. now has an optional `object_pairs_hook' parameter
     that will be called with any object literal that decodes to a list
     of pairs.  (Contributed by Raymond Hettinger; issue 5381(47).)

   * The *note mailbox: ad. module’s *note Maildir: 91c. class now
     records the timestamp on the directories it reads, and only
     re-reads them if the modification time has subsequently changed.
     This improves performance by avoiding unneeded directory scans.
     (Fixed by A.M. Kuchling and Antoine Pitrou; issue 1607951(48),
     issue 6896(49).)

   * New functions: the *note math: b0. module gained *note erf(): 7b5.
     and *note erfc(): 7b6. for the error function and the complementary
     error function, *note expm1(): 7b4. which computes ‘e**x - 1’ with
     more precision than using *note exp(): 91d. and subtracting 1,
     *note gamma(): 7b7. for the Gamma function, and *note lgamma():
     7b8. for the natural log of the Gamma function.  (Contributed by
     Mark Dickinson and nirinA raseliarison; issue 3366(50).)

   * The *note multiprocessing: b6. module’s ‘Manager*’ classes can now
     be passed a callable that will be called whenever a subprocess is
     started, along with a set of arguments that will be passed to the
     callable.  (Contributed by lekma; issue 5585(51).)

     The ‘Pool’ class, which controls a pool of worker processes, now
     has an optional `maxtasksperchild' parameter.  Worker processes
     will perform the specified number of tasks and then exit, causing
     the ‘Pool’ to start a new worker.  This is useful if tasks may leak
     memory or other resources, or if some tasks will cause the worker
     to become very large.  (Contributed by Charles Cazabon; issue
     6963(52).)

   * The *note nntplib: be. module now supports IPv6 addresses.
     (Contributed by Derek Morr; issue 1664(53).)

   * New functions: the *note os: c2. module wraps the following POSIX
     system calls: *note getresgid(): 91e. and *note getresuid(): 91f,
     which return the real, effective, and saved GIDs and UIDs; *note
     setresgid(): 920. and *note setresuid(): 921, which set real,
     effective, and saved GIDs and UIDs to new values; *note
     initgroups(): 922, which initialize the group access list for the
     current process.  (GID/UID functions contributed by Travis H.;
     issue 6508(54).  Support for initgroups added by Jean-Paul
     Calderone; issue 7333(55).)

     The *note os.fork(): 57b. function now re-initializes the import
     lock in the child process; this fixes problems on Solaris when
     *note fork(): 57b. is called from a thread.  (Fixed by Zsolt
     Cserna; issue 7242(56).)

   * In the *note os.path: c3. module, the *note normpath(): 923. and
     *note abspath(): 924. functions now preserve Unicode; if their
     input path is a Unicode string, the return value is also a Unicode
     string.  (*note normpath(): 923. fixed by Matt Giuca in issue
     5827(57); *note abspath(): 924. fixed by Ezio Melotti in issue
     3426(58).)

   * The *note pydoc: d7. module now has help for the various symbols
     that Python uses.  You can now do ‘help('<<')’ or ‘help('@')’, for
     example.  (Contributed by David Laban; issue 4739(59).)

   * The *note re: db. module’s *note split(): 3ae, *note sub(): 2f5,
     and *note subn(): 2f6. now accept an optional `flags' argument, for
     consistency with the other functions in the module.  (Added by
     Gregory P. Smith.)

   * New function: *note run_path(): 925. in the *note runpy: e0. module
     will execute the code at a provided `path' argument.  `path' can be
     the path of a Python source file (‘example.py’), a compiled
     bytecode file (‘example.pyc’), a directory (‘./package/’), or a zip
     archive (‘example.zip’).  If a directory or zip path is provided,
     it will be added to the front of ‘sys.path’ and the module *note
     __main__: 1. will be imported.  It’s expected that the directory or
     zip contains a ‘__main__.py’; if it doesn’t, some other
     ‘__main__.py’ might be imported from a location later in
     ‘sys.path’.  This makes more of the machinery of *note runpy: e0.
     available to scripts that want to mimic the way Python’s command
     line processes an explicit path name.  (Added by Nick Coghlan;
     issue 6816(60).)

   * New function: in the *note shutil: e7. module, *note
     make_archive(): 305. takes a filename, archive type (zip or
     tar-format), and a directory path, and creates an archive
     containing the directory’s contents.  (Added by Tarek Ziadé.)

     *note shutil: e7.’s *note copyfile(): 4af. and *note copytree():
     7f0. functions now raise a ‘SpecialFileError’ exception when asked
     to copy a named pipe.  Previously the code would treat named pipes
     like a regular file by opening them for reading, and this would
     block indefinitely.  (Fixed by Antoine Pitrou; issue 3002(61).)

   * The *note signal: e8. module no longer re-installs the signal
     handler unless this is truly necessary, which fixes a bug that
     could make it impossible to catch the EINTR signal robustly.
     (Fixed by Charles-Francois Natali; issue 8354(62).)

   * New functions: in the *note site: e9. module, three new functions
     return various site- and user-specific paths.  *note
     getsitepackages(): 831. returns a list containing all global
     site-packages directories, *note getusersitepackages(): 833.
     returns the path of the user’s site-packages directory, and *note
     getuserbase(): 832. returns the value of the ‘USER_BASE’
     environment variable, giving the path to a directory that can be
     used to store data.  (Contributed by Tarek Ziadé; issue 6693(63).)

     The *note site: e9. module now reports exceptions occurring when
     the ‘sitecustomize’ module is imported, and will no longer catch
     and swallow the *note KeyboardInterrupt: 1a3. exception.  (Fixed by
     Victor Stinner; issue 3137(64).)

   * The *note create_connection(): 7f9. function gained a
     `source_address' parameter, a ‘(host, port)’ 2-tuple giving the
     source address that will be used for the connection.  (Contributed
     by Eldon Ziegler; issue 3972(65).)

     The *note recv_into(): 926. and *note recvfrom_into(): 927. methods
     will now write into objects that support the buffer API, most
     usefully the *note bytearray: 1dc. and *note memoryview: 1b7.
     objects.  (Implemented by Antoine Pitrou; issue 8104(66).)

   * The ‘SocketServer’ module’s ‘TCPServer’ class now supports socket
     timeouts and disabling the Nagle algorithm.  The
     ‘disable_nagle_algorithm’ class attribute defaults to False; if
     overridden to be True, new request connections will have the
     TCP_NODELAY option set to prevent buffering many small sends into a
     single TCP packet.  The ‘timeout’ class attribute can hold a
     timeout in seconds that will be applied to the request socket; if
     no request is received within that time, ‘handle_timeout()’ will be
     called and ‘handle_request()’ will return.  (Contributed by
     Kristján Valur Jónsson; issue 6192(67) and issue 6267(68).)

   * Updated module: the *note sqlite3: f0. module has been updated to
     version 2.6.0 of the pysqlite package(69).  Version 2.6.0 includes
     a number of bugfixes, and adds the ability to load SQLite
     extensions from shared libraries.  Call the
     ‘enable_load_extension(True)’ method to enable extensions, and then
     call *note load_extension(): 7f5. to load a particular shared
     library.  (Updated by Gerhard Häring.)

   * The *note ssl: f1. module’s *note SSLSocket: 31b. objects now
     support the buffer API, which fixed a test suite failure (fix by
     Antoine Pitrou; issue 7133(70)) and automatically set OpenSSL’s
     ‘SSL_MODE_AUTO_RETRY’, which will prevent an error code being
     returned from ‘recv()’ operations that trigger an SSL renegotiation
     (fix by Antoine Pitrou; issue 8222(71)).

     The *note ssl.wrap_socket(): 7fc. constructor function now takes a
     `ciphers' argument that’s a string listing the encryption
     algorithms to be allowed; the format of the string is described in
     the OpenSSL documentation(72).  (Added by Antoine Pitrou; issue
     8322(73).)

     Another change makes the extension load all of OpenSSL’s ciphers
     and digest algorithms so that they’re all available.  Some SSL
     certificates couldn’t be verified, reporting an "unknown algorithm"
     error.  (Reported by Beda Kosata, and fixed by Antoine Pitrou;
     issue 8484(74).)

     The version of OpenSSL being used is now available as the module
     attributes *note ssl.OPENSSL_VERSION: 7fe. (a string), *note
     ssl.OPENSSL_VERSION_INFO: 7ff. (a 5-tuple), and *note
     ssl.OPENSSL_VERSION_NUMBER: 800. (an integer).  (Added by Antoine
     Pitrou; issue 8321(75).)

   * The *note struct: f6. module will no longer silently ignore
     overflow errors when a value is too large for a particular integer
     format code (one of ‘bBhHiIlLqQ’); it now always raises a *note
     struct.error: 928. exception.  (Changed by Mark Dickinson; issue
     1523(76).)  The *note pack(): 86c. function will also attempt to
     use *note __index__(): 8d2. to convert and pack non-integers before
     trying the *note __int__(): 929. method or reporting an error.
     (Changed by Mark Dickinson; issue 8300(77).)

   * New function: the *note subprocess: f7. module’s *note
     check_output(): 4db. runs a command with a specified set of
     arguments and returns the command’s output as a string when the
     command runs without error, or raises a *note CalledProcessError:
     92a. exception otherwise.

          >>> subprocess.check_output(['df', '-h', '.'])
          'Filesystem     Size   Used  Avail Capacity  Mounted on\n
          /dev/disk0s2    52G    49G   3.0G    94%    /\n'

          >>> subprocess.check_output(['df', '-h', '/bogus'])
            ...
          subprocess.CalledProcessError: Command '['df', '-h', '/bogus']' returned non-zero exit status 1

     (Contributed by Gregory P. Smith.)

     The *note subprocess: f7. module will now retry its internal system
     calls on receiving an ‘EINTR’ signal.  (Reported by several people;
     final patch by Gregory P. Smith in issue 1068268(78).)

   * New function: *note is_declared_global(): 92b. in the *note
     symtable: fa. module returns true for variables that are explicitly
     declared to be global, false for ones that are implicitly global.
     (Contributed by Jeremy Hylton.)

   * The *note syslog: fd. module will now use the value of
     ‘sys.argv[0]’ as the identifier instead of the previous default
     value of ‘'python'’.  (Changed by Sean Reifschneider; issue
     8451(79).)

   * The ‘sys.version_info’ value is now a named tuple, with attributes
     named ‘major’, ‘minor’, ‘micro’, ‘releaselevel’, and ‘serial’.
     (Contributed by Ross Light; issue 4285(80).)

     *note sys.getwindowsversion(): 92c. also returns a named tuple,
     with attributes named ‘major’, ‘minor’, ‘build’, *note platform:
     cc, ‘service_pack’, ‘service_pack_major’, ‘service_pack_minor’,
     ‘suite_mask’, and ‘product_type’.  (Contributed by Brian Curtin;
     issue 7766(81).)

   * The *note tarfile: ff. module’s default error handling has changed,
     to no longer suppress fatal errors.  The default error level was
     previously 0, which meant that errors would only result in a
     message being written to the debug log, but because the debug log
     is not activated by default, these errors go unnoticed.  The
     default error level is now 1, which raises an exception if there’s
     an error.  (Changed by Lars Gustäbel; issue 7357(82).)

     *note tarfile: ff. now supports filtering the *note TarInfo: 7e4.
     objects being added to a tar file.  When you call *note add(): 7e2,
     you may supply an optional `filter' argument that’s a callable.
     The `filter' callable will be passed the *note TarInfo: 7e4. for
     every file being added, and can modify and return it.  If the
     callable returns ‘None’, the file will be excluded from the
     resulting archive.  This is more powerful than the existing
     `exclude' argument, which has therefore been deprecated.  (Added by
     Lars Gustäbel; issue 6856(83).)  The *note TarFile: 7e1. class also
     now supports the context management protocol.  (Added by Lars
     Gustäbel; issue 7232(84).)

   * The *note wait(): 92d. method of the *note threading.Event: 6e7.
     class now returns the internal flag on exit.  This means the method
     will usually return true because *note wait(): 92d. is supposed to
     block until the internal flag becomes true.  The return value will
     only be false if a timeout was provided and the operation timed
     out.  (Contributed by Tim Lesher; issue 1674032(85).)

   * The Unicode database provided by the *note unicodedata: 117. module
     is now used internally to determine which characters are numeric,
     whitespace, or represent line breaks.  The database also includes
     information from the ‘Unihan.txt’ data file (patch by Anders
     Chrigström and Amaury Forgeot d’Arc; issue 1571184(86)) and has
     been updated to version 5.2.0 (updated by Florent Xicluna; issue
     8024(87)).

   * The ‘urlparse’ module’s ‘urlsplit()’ now handles unknown URL
     schemes in a fashion compliant with RFC 3986(88): if the URL is of
     the form ‘"<something>://..."’, the text before the ‘://’ is
     treated as the scheme, even if it’s a made-up scheme that the
     module doesn’t know about.  This change may break code that worked
     around the old behaviour.  For example, Python 2.6.4 or 2.5 will
     return the following:

          >>> import urlparse
          >>> urlparse.urlsplit('invented://host/filename?query')
          ('invented', '', '//host/filename?query', '', '')

     Python 2.7 (and Python 2.6.5) will return:

          >>> import urlparse
          >>> urlparse.urlsplit('invented://host/filename?query')
          ('invented', 'host', '/filename?query', '', '')

     (Python 2.7 actually produces slightly different output, since it
     returns a named tuple instead of a standard tuple.)

     The ‘urlparse’ module also supports IPv6 literal addresses as
     defined by RFC 2732(89) (contributed by Senthil Kumaran; issue
     2987(90)).

          >>> urlparse.urlparse('http://[1080::8:800:200C:417A]/foo')
          ParseResult(scheme='http', netloc='[1080::8:800:200C:417A]',
                      path='/foo', params='', query='', fragment='')

   * New class: the *note WeakSet: 92e. class in the *note weakref: 125.
     module is a set that only holds weak references to its elements;
     elements will be removed once there are no references pointing to
     them.  (Originally implemented in Python 3.x by Raymond Hettinger,
     and backported to 2.7 by Michael Foord.)

   * The ElementTree library, ‘xml.etree’, no longer escapes ampersands
     and angle brackets when outputting an XML processing instruction
     (which looks like ‘<?xml-stylesheet href="#style1"?>’) or comment
     (which looks like ‘<!-- comment -->’).  (Patch by Neil Muller;
     issue 2746(91).)

   * The XML-RPC client and server, provided by the ‘xmlrpclib’ and
     ‘SimpleXMLRPCServer’ modules, have improved performance by
     supporting HTTP/1.1 keep-alive and by optionally using gzip
     encoding to compress the XML being exchanged.  The gzip compression
     is controlled by the ‘encode_threshold’ attribute of
     ‘SimpleXMLRPCRequestHandler’, which contains a size in bytes;
     responses larger than this will be compressed.  (Contributed by
     Kristján Valur Jónsson; issue 6267(92).)

   * The *note zipfile: 13f. module’s *note ZipFile: 521. now supports
     the context management protocol, so you can write ‘with
     zipfile.ZipFile(...) as f:’.  (Contributed by Brian Curtin; issue
     5511(93).)

     *note zipfile: 13f. now also supports archiving empty directories
     and extracts them correctly.  (Fixed by Kuba Wieczorek; issue
     4710(94).)  Reading files out of an archive is faster, and
     interleaving *note read(): 92f. and ‘readline()’ now works
     correctly.  (Contributed by Nir Aides; issue 7610(95).)

     The *note is_zipfile(): 930. function now accepts a file object, in
     addition to the path names accepted in earlier versions.
     (Contributed by Gabriel Genellina; issue 4756(96).)

     The *note writestr(): 931. method now has an optional
     `compress_type' parameter that lets you override the default
     compression method specified in the *note ZipFile: 521.
     constructor.  (Contributed by Ronald Oussoren; issue 6003(97).)

* Menu:

* New module; importlib: New module importlib. 
* New module; sysconfig: New module sysconfig. 
* ttk; Themed Widgets for Tk: ttk Themed Widgets for Tk. 
* Updated module; unittest: Updated module unittest. 
* Updated module; ElementTree 1.3: Updated module ElementTree 1 3. 

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue5142

   (2) https://bugs.python.org/issue7703

   (3) https://www.jcea.es/programacion/pybsddb.htm

   (4) https://bugs.python.org/issue8156

   (5) https://bugs.python.org/issue3860

   (6) https://bugs.python.org/issue1696199

   (7) https://bugs.python.org/issue1818

   (8) https://bugs.python.org/issue8729

   (9) https://bugs.python.org/issue7005

   (10) https://bugs.python.org/issue3924

   (11) https://bugs.python.org/issue1515

   (12) https://bugs.python.org/issue4606

   (13) http://sourceware.org/libffi/

   (14) https://bugs.python.org/issue8142

   (15) https://bugs.python.org/issue5788

   (16) https://bugs.python.org/issue4796

   (17) https://bugs.python.org/issue2531

   (18) https://bugs.python.org/issue8257

   (19) https://bugs.python.org/issue6595

   (20) https://bugs.python.org/issue7633

   (21) https://bugs.python.org/issue6857

   (22) https://bugs.python.org/issue7279

   (23) https://bugs.python.org/issue7585

   (24) https://bugs.python.org/issue8688

   (25) https://bugs.python.org/issue7490

   (26) https://bugs.python.org/issue1368247

   (27) https://bugs.python.org/issue5812

   (28) https://bugs.python.org/issue8294

   (29) https://bugs.python.org/issue2054

   (30) https://bugs.python.org/issue6845

   (31) https://bugs.python.org/issue5479

   (32) https://bugs.python.org/issue4688

   (33) https://bugs.python.org/issue3860

   (34) https://bugs.python.org/issue7471

   (35) https://bugs.python.org/issue4272

   (36) https://bugs.python.org/issue2846

   (37) https://bugs.python.org/issue7418

   (38) https://bugs.python.org/issue4879

   (39) https://bugs.python.org/issue3972

   (40) https://bugs.python.org/issue1655

   (41) https://bugs.python.org/issue3135

   (42) https://bugs.python.org/issue4991

   (43) https://bugs.python.org/issue6939

   (44) https://bugs.python.org/issue5032

   (45) https://bugs.python.org/issue4816

   (46) https://bugs.python.org/issue4136

   (47) https://bugs.python.org/issue5381

   (48) https://bugs.python.org/issue1607951

   (49) https://bugs.python.org/issue6896

   (50) https://bugs.python.org/issue3366

   (51) https://bugs.python.org/issue5585

   (52) https://bugs.python.org/issue6963

   (53) https://bugs.python.org/issue1664

   (54) https://bugs.python.org/issue6508

   (55) https://bugs.python.org/issue7333

   (56) https://bugs.python.org/issue7242

   (57) https://bugs.python.org/issue5827

   (58) https://bugs.python.org/issue3426

   (59) https://bugs.python.org/issue4739

   (60) https://bugs.python.org/issue6816

   (61) https://bugs.python.org/issue3002

   (62) https://bugs.python.org/issue8354

   (63) https://bugs.python.org/issue6693

   (64) https://bugs.python.org/issue3137

   (65) https://bugs.python.org/issue3972

   (66) https://bugs.python.org/issue8104

   (67) https://bugs.python.org/issue6192

   (68) https://bugs.python.org/issue6267

   (69) https://github.com/ghaering/pysqlite

   (70) https://bugs.python.org/issue7133

   (71) https://bugs.python.org/issue8222

   (72) http://www.openssl.org/docs/apps/ciphers.html#CIPHER-LIST-FORMAT

   (73) https://bugs.python.org/issue8322

   (74) https://bugs.python.org/issue8484

   (75) https://bugs.python.org/issue8321

   (76) https://bugs.python.org/issue1523

   (77) https://bugs.python.org/issue8300

   (78) https://bugs.python.org/issue1068268

   (79) https://bugs.python.org/issue8451

   (80) https://bugs.python.org/issue4285

   (81) https://bugs.python.org/issue7766

   (82) https://bugs.python.org/issue7357

   (83) https://bugs.python.org/issue6856

   (84) https://bugs.python.org/issue7232

   (85) https://bugs.python.org/issue1674032

   (86) https://bugs.python.org/issue1571184

   (87) https://bugs.python.org/issue8024

   (88) https://tools.ietf.org/html/rfc3986.html

   (89) https://tools.ietf.org/html/rfc2732.html

   (90) https://bugs.python.org/issue2987

   (91) https://bugs.python.org/issue2746

   (92) https://bugs.python.org/issue6267

   (93) https://bugs.python.org/issue5511

   (94) https://bugs.python.org/issue4710

   (95) https://bugs.python.org/issue7610

   (96) https://bugs.python.org/issue4756

   (97) https://bugs.python.org/issue6003


File: python.info,  Node: New module importlib,  Next: New module sysconfig,  Up: New and Improved Modules

1.8.11.1 New module: importlib
..............................

Python 3.1 includes the *note importlib: 9a. package, a
re-implementation of the logic underlying Python’s *note import: 881.
statement.  *note importlib: 9a. is useful for implementors of Python
interpreters and to users who wish to write new importers that can
participate in the import process.  Python 2.7 doesn’t contain the
complete *note importlib: 9a. package, but instead has a tiny subset
that contains a single function, *note import_module(): 754.

‘import_module(name, package=None)’ imports a module.  `name' is a
string containing the module or package’s name.  It’s possible to do
relative imports by providing a string that begins with a ‘.’ character,
such as ‘..utils.errors’.  For relative imports, the `package' argument
must be provided and is the name of the package that will be used as the
anchor for the relative import.  *note import_module(): 754. both
inserts the imported module into ‘sys.modules’ and returns the module
object.

Here are some examples:

     >>> from importlib import import_module
     >>> anydbm = import_module('anydbm')  # Standard absolute import
     >>> anydbm
     <module 'anydbm' from '/p/python/Lib/anydbm.py'>
     >>> # Relative import
     >>> file_util = import_module('..file_util', 'distutils.command')
     >>> file_util
     <module 'distutils.file_util' from '/python/Lib/distutils/file_util.pyc'>

*note importlib: 9a. was implemented by Brett Cannon and introduced in
Python 3.1.


File: python.info,  Node: New module sysconfig,  Next: ttk Themed Widgets for Tk,  Prev: New module importlib,  Up: New and Improved Modules

1.8.11.2 New module: sysconfig
..............................

The *note sysconfig: fc. module has been pulled out of the Distutils
package, becoming a new top-level module in its own right.  *note
sysconfig: fc. provides functions for getting information about Python’s
build process: compiler switches, installation paths, the platform name,
and whether Python is running from its source directory.

Some of the functions in the module are:

   * *note get_config_var(): 580. returns variables from Python’s
     Makefile and the ‘pyconfig.h’ file.

   * *note get_config_vars(): 581. returns a dictionary containing all
     of the configuration variables.

   * *note get_path(): 934. returns the configured path for a particular
     type of module: the standard library, site-specific modules,
     platform-specific modules, etc.

   * *note is_python_build(): 935. returns true if you’re running a
     binary from a Python source tree, and false otherwise.

Consult the *note sysconfig: fc. documentation for more details and for
a complete list of functions.

The Distutils package and *note sysconfig: fc. are now maintained by
Tarek Ziadé, who has also started a Distutils2 package (source
repository at ‘https://hg.python.org/distutils2/’) for developing a
next-generation version of Distutils.


File: python.info,  Node: ttk Themed Widgets for Tk,  Next: Updated module unittest,  Prev: New module sysconfig,  Up: New and Improved Modules

1.8.11.3 ttk: Themed Widgets for Tk
...................................

Tcl/Tk 8.5 includes a set of themed widgets that re-implement basic Tk
widgets but have a more customizable appearance and can therefore more
closely resemble the native platform’s widgets.  This widget set was
originally called Tile, but was renamed to Ttk (for "themed Tk") on
being added to Tcl/Tck release 8.5.

To learn more, read the ‘ttk’ module documentation.  You may also wish
to read the Tcl/Tk manual page describing the Ttk theme engine,
available at ‘http://www.tcl.tk/man/tcl8.5/TkCmd/ttk_intro.htm’.  Some
screenshots of the Python/Ttk code in use are at
‘http://code.google.com/p/python-ttk/wiki/Screenshots’.

The ‘ttk’ module was written by Guilherme Polo and added in issue
2983(1).  An alternate version called ‘Tile.py’, written by Martin
Franklin and maintained by Kevin Walzer, was proposed for inclusion in
issue 2618(2), but the authors argued that Guilherme Polo’s work was
more comprehensive.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue2983

   (2) https://bugs.python.org/issue2618


File: python.info,  Node: Updated module unittest,  Next: Updated module ElementTree 1 3,  Prev: ttk Themed Widgets for Tk,  Up: New and Improved Modules

1.8.11.4 Updated module: unittest
.................................

The *note unittest: 118. module was greatly enhanced; many new features
were added.  Most of these features were implemented by Michael Foord,
unless otherwise noted.  The enhanced version of the module is
downloadable separately for use with Python versions 2.4 to 2.6,
packaged as the ‘unittest2’ package, from
‘https://pypi.python.org/pypi/unittest2’.

When used from the command line, the module can automatically discover
tests.  It’s not as fancy as py.test(1) or nose(2), but provides a
simple way to run tests kept within a set of package directories.  For
example, the following command will search the ‘test/’ subdirectory for
any importable test files named ‘test*.py’:

     python -m unittest discover -s test

Consult the *note unittest: 118. module documentation for more details.
(Developed in issue 6001(3).)

The *note main(): 504. function supports some other new options:

   * *note -b: 939. or ‘--buffer’ will buffer the standard output and
     standard error streams during each test.  If the test passes, any
     resulting output will be discarded; on failure, the buffered output
     will be displayed.

   * *note -c: 93a. or ‘--catch’ will cause the control-C interrupt to
     be handled more gracefully.  Instead of interrupting the test
     process immediately, the currently running test will be completed
     and then the partial results up to the interruption will be
     reported.  If you’re impatient, a second press of control-C will
     cause an immediate interruption.

     This control-C handler tries to avoid causing problems when the
     code being tested or the tests being run have defined a signal
     handler of their own, by noticing that a signal handler was already
     set and calling it.  If this doesn’t work for you, there’s a *note
     removeHandler(): 93b. decorator that can be used to mark tests that
     should have the control-C handling disabled.

   * *note -f: 93c. or ‘--failfast’ makes test execution stop
     immediately when a test fails instead of continuing to execute
     further tests.  (Suggested by Cliff Dyer and implemented by Michael
     Foord; issue 8074(4).)

The progress messages now show ’x’ for expected failures and ’u’ for
unexpected successes when run in verbose mode.  (Contributed by Benjamin
Peterson.)

Test cases can raise the *note SkipTest: 505. exception to skip a test
(issue 1034053(5)).

The error messages for *note assertEqual(): 813, *note assertTrue():
812, and *note assertFalse(): 93d. failures now provide more
information.  If you set the *note longMessage: 93e. attribute of your
*note TestCase: 501. classes to True, both the standard error message
and any additional message you provide will be printed for failures.
(Added by Michael Foord; issue 5663(6).)

The *note assertRaises(): 6f6. method now returns a context handler when
called without providing a callable object to run.  For example, you can
write this:

     with self.assertRaises(KeyError):
         {}['foo']

(Implemented by Antoine Pitrou; issue 4444(7).)

Module- and class-level setup and teardown fixtures are now supported.
Modules can contain ‘setUpModule()’ and ‘tearDownModule()’ functions.
Classes can have *note setUpClass(): 93f. and *note tearDownClass():
940. methods that must be defined as class methods (using ‘@classmethod’
or equivalent).  These functions and methods are invoked when the test
runner switches to a test case in a different module or class.

The methods *note addCleanup(): 941. and *note doCleanups(): 942. were
added.  *note addCleanup(): 941. lets you add cleanup functions that
will be called unconditionally (after *note setUp(): 943. if *note
setUp(): 943. fails, otherwise after *note tearDown(): 944.).  This
allows for much simpler resource allocation and deallocation during
tests (issue 5679(8)).

A number of new methods were added that provide more specialized tests.
Many of these methods were written by Google engineers for use in their
test suites; Gregory P. Smith, Michael Foord, and GvR worked on merging
them into Python’s version of *note unittest: 118.

   * *note assertIsNone(): 945. and *note assertIsNotNone(): 946. take
     one expression and verify that the result is or is not ‘None’.

   * *note assertIs(): 947. and *note assertIsNot(): 948. take two
     values and check whether the two values evaluate to the same object
     or not.  (Added by Michael Foord; issue 2578(9).)

   * *note assertIsInstance(): 949. and *note assertNotIsInstance():
     94a. check whether the resulting object is an instance of a
     particular class, or of one of a tuple of classes.  (Added by Georg
     Brandl; issue 7031(10).)

   * *note assertGreater(): 94b, *note assertGreaterEqual(): 94c, *note
     assertLess(): 94d, and *note assertLessEqual(): 94e. compare two
     quantities.

   * *note assertMultiLineEqual(): 94f. compares two strings, and if
     they’re not equal, displays a helpful comparison that highlights
     the differences in the two strings.  This comparison is now used by
     default when Unicode strings are compared with *note assertEqual():
     813.

   * ‘assertRegexpMatches()’ and ‘assertNotRegexpMatches()’ checks
     whether the first argument is a string matching or not matching the
     regular expression provided as the second argument (issue
     8038(11)).

   * ‘assertRaisesRegexp()’ checks whether a particular exception is
     raised, and then also checks that the string representation of the
     exception matches the provided regular expression.

   * *note assertIn(): 950. and *note assertNotIn(): 951. tests whether
     `first' is or is not in `second'.

   * ‘assertItemsEqual()’ tests whether two provided sequences contain
     the same elements.

   * *note assertSetEqual(): 952. compares whether two sets are equal,
     and only reports the differences between the sets in case of error.

   * Similarly, *note assertListEqual(): 953. and *note
     assertTupleEqual(): 954. compare the specified types and explain
     any differences without necessarily printing their full values;
     these methods are now used by default when comparing lists and
     tuples using *note assertEqual(): 813.  More generally, *note
     assertSequenceEqual(): 955. compares two sequences and can
     optionally check whether both sequences are of a particular type.

   * *note assertDictEqual(): 956. compares two dictionaries and reports
     the differences; it’s now used by default when you compare two
     dictionaries using *note assertEqual(): 813.
     ‘assertDictContainsSubset()’ checks whether all of the key/value
     pairs in `first' are found in `second'.

   * *note assertAlmostEqual(): 815. and *note assertNotAlmostEqual():
     816. test whether `first' and `second' are approximately equal.
     This method can either round their difference to an
     optionally-specified number of `places' (the default is 7) and
     compare it to zero, or require the difference to be smaller than a
     supplied `delta' value.

   * *note loadTestsFromName(): 957. properly honors the *note
     suiteClass: 958. attribute of the *note TestLoader: 354.  (Fixed by
     Mark Roddy; issue 6866(12).)

   * A new hook lets you extend the *note assertEqual(): 813. method to
     handle new data types.  The *note addTypeEqualityFunc(): 959.
     method takes a type object and a function.  The function will be
     used when both of the objects being compared are of the specified
     type.  This function should compare the two objects and raise an
     exception if they don’t match; it’s a good idea for the function to
     provide additional information about why the two objects aren’t
     matching, much as the new sequence comparison methods do.

*note unittest.main(): 504. now takes an optional ‘exit’ argument.  If
False, *note main(): 504. doesn’t call *note sys.exit(): 95a, allowing
*note main(): 504. to be used from the interactive interpreter.
(Contributed by J. Pablo Fernández; issue 3379(13).)

*note TestResult: 6fb. has new *note startTestRun(): 95b. and *note
stopTestRun(): 95c. methods that are called immediately before and after
a test run.  (Contributed by Robert Collins; issue 5728(14).)

With all these changes, the ‘unittest.py’ was becoming awkwardly large,
so the module was turned into a package and the code split into several
files (by Benjamin Peterson).  This doesn’t affect how the module is
imported or used.

See also
........

‘http://www.voidspace.org.uk/python/articles/unittest2.shtml’

     Describes the new features, how to use them, and the rationale for
     various design decisions.  (By Michael Foord.)

   ---------- Footnotes ----------

   (1) http://pytest.org

   (2) http://code.google.com/p/python-nose/

   (3) https://bugs.python.org/issue6001

   (4) https://bugs.python.org/issue8074

   (5) https://bugs.python.org/issue1034053

   (6) https://bugs.python.org/issue5663

   (7) https://bugs.python.org/issue4444

   (8) https://bugs.python.org/issue5679

   (9) https://bugs.python.org/issue2578

   (10) https://bugs.python.org/issue7031

   (11) https://bugs.python.org/issue8038

   (12) https://bugs.python.org/issue6866

   (13) https://bugs.python.org/issue3379

   (14) https://bugs.python.org/issue5728


File: python.info,  Node: Updated module ElementTree 1 3,  Prev: Updated module unittest,  Up: New and Improved Modules

1.8.11.5 Updated module: ElementTree 1.3
........................................

The version of the ElementTree library included with Python was updated
to version 1.3.  Some of the new features are:

   * The various parsing functions now take a `parser' keyword argument
     giving an *note XMLParser: 559. instance that will be used.  This
     makes it possible to override the file’s internal encoding:

          p = ET.XMLParser(encoding='utf-8')
          t = ET.XML("""<root/>""", parser=p)

     Errors in parsing XML now raise a ‘ParseError’ exception, whose
     instances have a ‘position’ attribute containing a (`line',
     `column') tuple giving the location of the problem.

   * ElementTree’s code for converting trees to a string has been
     significantly reworked, making it roughly twice as fast in many
     cases.  The *note ElementTree.write(): 51c. and ‘Element.write()’
     methods now have a `method' parameter that can be "xml" (the
     default), "html", or "text".  HTML mode will output empty elements
     as ‘<empty></empty>’ instead of ‘<empty/>’, and text mode will skip
     over elements and only output the text chunks.  If you set the
     ‘tag’ attribute of an element to ‘None’ but leave its children in
     place, the element will be omitted when the tree is written out, so
     you don’t need to do more extensive rearrangement to remove a
     single element.

     Namespace handling has also been improved.  All ‘xmlns:<whatever>’
     declarations are now output on the root element, not scattered
     throughout the resulting XML. You can set the default namespace for
     a tree by setting the ‘default_namespace’ attribute and can
     register new prefixes with *note register_namespace(): 799.  In XML
     mode, you can use the true/false `xml_declaration' parameter to
     suppress the XML declaration.

   * New *note Element: 700. method: *note extend(): 79a. appends the
     items from a sequence to the element’s children.  Elements
     themselves behave like sequences, so it’s easy to move children
     from one element to another:

          from xml.etree import ElementTree as ET

          t = ET.XML("""<list>
            <item>1</item> <item>2</item>  <item>3</item>
          </list>""")
          new = ET.XML('<root/>')
          new.extend(t)

          # Outputs <root><item>1</item>...</root>
          print ET.tostring(new)

   * New ‘Element’ method: *note iter(): 95f. yields the children of the
     element as a generator.  It’s also possible to write ‘for child in
     elem:’ to loop over an element’s children.  The existing method
     ‘getiterator()’ is now deprecated, as is ‘getchildren()’ which
     constructs and returns a list of children.

   * New ‘Element’ method: *note itertext(): 79c. yields all chunks of
     text that are descendants of the element.  For example:

          t = ET.XML("""<list>
            <item>1</item> <item>2</item>  <item>3</item>
          </list>""")

          # Outputs ['\n  ', '1', ' ', '2', '  ', '3', '\n']
          print list(t.itertext())

   * Deprecated: using an element as a Boolean (i.e., ‘if elem:’) would
     return true if the element had any children, or false if there were
     no children.  This behaviour is confusing – ‘None’ is false, but so
     is a childless element?  – so it will now trigger a *note
     FutureWarning: 960.  In your code, you should be explicit: write
     ‘len(elem) != 0’ if you’re interested in the number of children, or
     ‘elem is not None’.

Fredrik Lundh develops ElementTree and produced the 1.3 version; you can
read his article describing 1.3 at
‘http://effbot.org/zone/elementtree-13-intro.htm’.  Florent Xicluna
updated the version included with Python, after discussions on
python-dev and in issue 6472(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue6472


File: python.info,  Node: Build and C API Changes<7>,  Next: Other Changes and Fixes,  Prev: New and Improved Modules,  Up: What's New in Python 2 7

1.8.12 Build and C API Changes
------------------------------

Changes to Python’s build process and to the C API include:

   * The latest release of the GNU Debugger, GDB 7, can be scripted
     using Python(1).  When you begin debugging an executable program P,
     GDB will look for a file named ‘P-gdb.py’ and automatically read
     it.  Dave Malcolm contributed a ‘python-gdb.py’ that adds a number
     of commands useful when debugging Python itself.  For example,
     ‘py-up’ and ‘py-down’ go up or down one Python stack frame, which
     usually corresponds to several C stack frames.  ‘py-print’ prints
     the value of a Python variable, and ‘py-bt’ prints the Python stack
     trace.  (Added as a result of issue 8032(2).)

   * If you use the ‘.gdbinit’ file provided with Python, the "pyo"
     macro in the 2.7 version now works correctly when the thread being
     debugged doesn’t hold the GIL; the macro now acquires it before
     printing.  (Contributed by Victor Stinner; issue 3632(3).)

   * *note Py_AddPendingCall(): 962. is now thread-safe, letting any
     worker thread submit notifications to the main Python thread.  This
     is particularly useful for asynchronous IO operations.
     (Contributed by Kristján Valur Jónsson; issue 4293(4).)

   * New function: *note PyCode_NewEmpty(): 963. creates an empty code
     object; only the filename, function name, and first line number are
     required.  This is useful for extension modules that are attempting
     to construct a more useful traceback stack.  Previously such
     extensions needed to call *note PyCode_New(): 964, which had many
     more arguments.  (Added by Jeffrey Yasskin.)

   * New function: *note PyErr_NewExceptionWithDoc(): 860. creates a new
     exception class, just as the existing *note PyErr_NewException():
     861. does, but takes an extra ‘char *’ argument containing the
     docstring for the new exception class.  (Added by ’lekma’ on the
     Python bug tracker; issue 7033(5).)

   * New function: *note PyFrame_GetLineNumber(): 965. takes a frame
     object and returns the line number that the frame is currently
     executing.  Previously code would need to get the index of the
     bytecode instruction currently executing, and then look up the line
     number corresponding to that address.  (Added by Jeffrey Yasskin.)

   * New functions: *note PyLong_AsLongAndOverflow(): 85e. and *note
     PyLong_AsLongLongAndOverflow(): 85d. approximates a Python long
     integer as a C ‘long’ or ‘long long’.  If the number is too large
     to fit into the output type, an `overflow' flag is set and returned
     to the caller.  (Contributed by Case Van Horsen; issue 7528(6) and
     issue 7767(7).)

   * New function: stemming from the rewrite of string-to-float
     conversion, a new *note PyOS_string_to_double(): 888. function was
     added.  The old ‘PyOS_ascii_strtod()’ and ‘PyOS_ascii_atof()’
     functions are now deprecated.

   * New function: *note PySys_SetArgvEx(): 85b. sets the value of
     ‘sys.argv’ and can optionally update ‘sys.path’ to include the
     directory containing the script named by ‘sys.argv[0]’ depending on
     the value of an `updatepath' parameter.

     This function was added to close a security hole for applications
     that embed Python.  The old function, *note PySys_SetArgv(): 966,
     would always update ‘sys.path’, and sometimes it would add the
     current directory.  This meant that, if you ran an application
     embedding Python in a directory controlled by someone else,
     attackers could put a Trojan-horse module in the directory (say, a
     file named ‘os.py’) that your application would then import and
     run.

     If you maintain a C/C++ application that embeds Python, check
     whether you’re calling *note PySys_SetArgv(): 966. and carefully
     consider whether the application should be using *note
     PySys_SetArgvEx(): 85b. with `updatepath' set to false.

     Security issue reported as CVE-2008-5983(8); discussed in issue
     5753(9), and fixed by Antoine Pitrou.

   * New macros: the Python header files now define the following
     macros: ‘Py_ISALNUM’, ‘Py_ISALPHA’, ‘Py_ISDIGIT’, ‘Py_ISLOWER’,
     ‘Py_ISSPACE’, ‘Py_ISUPPER’, ‘Py_ISXDIGIT’, ‘Py_TOLOWER’, and
     ‘Py_TOUPPER’.  All of these functions are analogous to the C
     standard macros for classifying characters, but ignore the current
     locale setting, because in several places Python needs to analyze
     characters in a locale-independent way.  (Added by Eric Smith;
     issue 5793(10).)

   * Removed function: ‘PyEval_CallObject’ is now only available as a
     macro.  A function version was being kept around to preserve ABI
     linking compatibility, but that was in 1997; it can certainly be
     deleted by now.  (Removed by Antoine Pitrou; issue 8276(11).)

   * New format codes: the ‘PyFormat_FromString()’,
     ‘PyFormat_FromStringV()’, and *note PyErr_Format(): 385. functions
     now accept ‘%lld’ and ‘%llu’ format codes for displaying C’s ‘long
     long’ types.  (Contributed by Mark Dickinson; issue 7228(12).)

   * The complicated interaction between threads and process forking has
     been changed.  Previously, the child process created by *note
     os.fork(): 57b. might fail because the child is created with only a
     single thread running, the thread performing the *note os.fork():
     57b.  If other threads were holding a lock, such as Python’s import
     lock, when the fork was performed, the lock would still be marked
     as "held" in the new process.  But in the child process nothing
     would ever release the lock, since the other threads weren’t
     replicated, and the child process would no longer be able to
     perform imports.

     Python 2.7 acquires the import lock before performing an *note
     os.fork(): 57b, and will also clean up any locks created using the
     *note threading: 106. module.  C extension modules that have
     internal locks, or that call ‘fork()’ themselves, will not benefit
     from this clean-up.

     (Fixed by Thomas Wouters; issue 1590864(13).)

   * The *note Py_Finalize(): 967. function now calls the internal
     ‘threading._shutdown()’ function; this prevents some exceptions
     from being raised when an interpreter shuts down.  (Patch by Adam
     Olsen; issue 1722344(14).)

   * When using the *note PyMemberDef: 968. structure to define
     attributes of a type, Python will no longer let you try to delete
     or set a ‘T_STRING_INPLACE’ attribute.

   * Global symbols defined by the *note ctypes: 2a. module are now
     prefixed with ‘Py’, or with ‘_ctypes’.  (Implemented by Thomas
     Heller; issue 3102(15).)

   * New configure option: the ‘--with-system-expat’ switch allows
     building the ‘pyexpat’ module to use the system Expat library.
     (Contributed by Arfrever Frehtes Taifersar Arahesis; issue
     7609(16).)

   * New configure option: the ‘--with-valgrind’ option will now disable
     the pymalloc allocator, which is difficult for the Valgrind
     memory-error detector to analyze correctly.  Valgrind will
     therefore be better at detecting memory leaks and overruns.
     (Contributed by James Henstridge; issue 2422(17).)

   * New configure option: you can now supply an empty string to
     ‘--with-dbmliborder=’ in order to disable all of the various DBM
     modules.  (Added by Arfrever Frehtes Taifersar Arahesis; issue
     6491(18).)

   * The ‘configure’ script now checks for floating-point rounding bugs
     on certain 32-bit Intel chips and defines a ‘X87_DOUBLE_ROUNDING’
     preprocessor definition.  No code currently uses this definition,
     but it’s available if anyone wishes to use it.  (Added by Mark
     Dickinson; issue 2937(19).)

     ‘configure’ also now sets a ‘LDCXXSHARED’ Makefile variable for
     supporting C++ linking.  (Contributed by Arfrever Frehtes Taifersar
     Arahesis; issue 1222585(20).)

   * The build process now creates the necessary files for pkg-config
     support.  (Contributed by Clinton Roy; issue 3585(21).)

   * The build process now supports Subversion 1.7.  (Contributed by
     Arfrever Frehtes Taifersar Arahesis; issue 6094(22).)

* Menu:

* Capsules:: 
* Port-Specific Changes; Windows: Port-Specific Changes Windows. 
* Port-Specific Changes; Mac OS X: Port-Specific Changes Mac OS X. 
* Port-Specific Changes; FreeBSD: Port-Specific Changes FreeBSD. 

   ---------- Footnotes ----------

   (1) http://sourceware.org/gdb/current/onlinedocs/gdb/Python.html

   (2) https://bugs.python.org/issue8032

   (3) https://bugs.python.org/issue3632

   (4) https://bugs.python.org/issue4293

   (5) https://bugs.python.org/issue7033

   (6) https://bugs.python.org/issue7528

   (7) https://bugs.python.org/issue7767

   (8) http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5983

   (9) https://bugs.python.org/issue5753

   (10) https://bugs.python.org/issue5793

   (11) https://bugs.python.org/issue8276

   (12) https://bugs.python.org/issue7228

   (13) https://bugs.python.org/issue1590864

   (14) https://bugs.python.org/issue1722344

   (15) https://bugs.python.org/issue3102

   (16) https://bugs.python.org/issue7609

   (17) https://bugs.python.org/issue2422

   (18) https://bugs.python.org/issue6491

   (19) https://bugs.python.org/issue2937

   (20) https://bugs.python.org/issue1222585

   (21) https://bugs.python.org/issue3585

   (22) https://bugs.python.org/issue6094

