This is python.info, produced by makeinfo version 6.0 from python.texi.

     Python 3.6.0a0, May 06, 2016

     Georg Brandl

     Copyright © 2001-2016, Python Software Foundation

INFO-DIR-SECTION Documentation tools
START-INFO-DIR-ENTRY
* Python: (python.info). The Python Programming Language
END-INFO-DIR-ENTRY


   Generated by Sphinx 1.4.1.


File: python.info,  Node: PyZipFile Objects,  Next: ZipInfo Objects,  Prev: ZipFile Objects,  Up: zipfile --- Work with ZIP archives

5.13.5.2 PyZipFile Objects
..........................

The *note PyZipFile: 520. constructor takes the same parameters as the
*note ZipFile: 521. constructor, and one additional parameter,
`optimize'.

 -- Class: zipfile.PyZipFile (file, mode='r', compression=ZIP_STORED,
          allowZip64=True, optimize=-1)

     New in version 3.2: The `optimize' parameter.

     Changed in version 3.4: ZIP64 extensions are enabled by default.

     Instances have one method in addition to those of *note ZipFile:
     521. objects:

      -- Method: writepy (pathname, basename='', filterfunc=None)

          Search for files ‘*.py’ and add the corresponding file to the
          archive.

          If the `optimize' parameter to *note PyZipFile: 520. was not
          given or ‘-1’, the corresponding file is a ‘*.pyc’ file,
          compiling if necessary.

          If the `optimize' parameter to *note PyZipFile: 520. was ‘0’,
          ‘1’ or ‘2’, only files with that optimization level (see *note
          compile(): 903.) are added to the archive, compiling if
          necessary.

          If `pathname' is a file, the filename must end with ‘.py’, and
          just the (corresponding ‘*.py[co]’) file is added at the top
          level (no path information).  If `pathname' is a file that
          does not end with ‘.py’, a *note RuntimeError: 193. will be
          raised.  If it is a directory, and the directory is not a
          package directory, then all the files ‘*.py[co]’ are added at
          the top level.  If the directory is a package directory, then
          all ‘*.py[co]’ are added under the package name as a file
          path, and if any subdirectories are package directories, all
          of these are added recursively.

          `basename' is intended for internal use only.

          `filterfunc', if given, must be a function taking a single
          string argument.  It will be passed each path (including each
          individual full file path) before it is added to the archive.
          If `filterfunc' returns a false value, the path will not be
          added, and if it is a directory its contents will be ignored.
          For example, if our test files are all either in ‘test’
          directories or start with the string ‘test_’, we can use a
          `filterfunc' to exclude them:

               >>> zf = PyZipFile('myprog.zip')
               >>> def notests(s):
               ...     fn = os.path.basename(s)
               ...     return (not (fn == 'test' or fn.startswith('test_')))
               >>> zf.writepy('myprog', filterfunc=notests)

          The *note writepy(): 51f. method makes archives with file
          names like this:

               string.pyc                   # Top level name
               test/__init__.pyc            # Package directory
               test/testall.pyc             # Module test.testall
               test/bogus/__init__.pyc      # Subpackage directory
               test/bogus/myfile.pyc        # Submodule test.bogus.myfile

          New in version 3.4: The `filterfunc' parameter.


File: python.info,  Node: ZipInfo Objects,  Prev: PyZipFile Objects,  Up: zipfile --- Work with ZIP archives

5.13.5.3 ZipInfo Objects
........................

Instances of the *note ZipInfo: 17b. class are returned by the *note
getinfo(): 1724. and *note infolist(): 1725. methods of *note ZipFile:
521. objects.  Each object stores information about a single member of
the ZIP archive.

There is one classmethod to make a *note ZipInfo: 17b. instance for a
filesystem file:

 -- Class Method: ZipInfo.from_file (filename, arcname=None)

     Construct a *note ZipInfo: 17b. instance for a file on the
     filesystem, in preparation for adding it to a zip file.

     `filename' should be the path to a file or directory on the
     filesystem.

     If `arcname' is specified, it is used as the name within the
     archive.  If `arcname' is not specified, the name will be the same
     as `filename', but with any drive letter and leading path
     separators removed.

     New in version 3.6.

Instances have the following attributes:

 -- Attribute: ZipInfo.filename

     Name of the file in the archive.

 -- Attribute: ZipInfo.date_time

     The time and date of the last modification to the archive member.
     This is a tuple of six values:

     Index       Value
                 
     -------------------------------------------
                 
     ‘0’         Year (>= 1980)
                 
                 
     ‘1’         Month (one-based)
                 
                 
     ‘2’         Day of month (one-based)
                 
                 
     ‘3’         Hours (zero-based)
                 
                 
     ‘4’         Minutes (zero-based)
                 
                 
     ‘5’         Seconds (zero-based)
                 

          Note: The ZIP file format does not support timestamps before
          1980.

 -- Attribute: ZipInfo.compress_type

     Type of compression for the archive member.

 -- Attribute: ZipInfo.comment

     Comment for the individual archive member.

 -- Attribute: ZipInfo.extra

     Expansion field data.  The PKZIP Application Note(1) contains some
     comments on the internal structure of the data contained in this
     string.

 -- Attribute: ZipInfo.create_system

     System which created ZIP archive.

 -- Attribute: ZipInfo.create_version

     PKZIP version which created ZIP archive.

 -- Attribute: ZipInfo.extract_version

     PKZIP version needed to extract archive.

 -- Attribute: ZipInfo.reserved

     Must be zero.

 -- Attribute: ZipInfo.flag_bits

     ZIP flag bits.

 -- Attribute: ZipInfo.volume

     Volume number of file header.

 -- Attribute: ZipInfo.internal_attr

     Internal attributes.

 -- Attribute: ZipInfo.external_attr

     External file attributes.

 -- Attribute: ZipInfo.header_offset

     Byte offset to the file header.

 -- Attribute: ZipInfo.CRC

     CRC-32 of the uncompressed file.

 -- Attribute: ZipInfo.compress_size

     Size of the compressed data.

 -- Attribute: ZipInfo.file_size

     Size of the uncompressed file.

   ---------- Footnotes ----------

   (1) https://pkware.cachefly.net/webdocs/casestudies/APPNOTE.TXT


File: python.info,  Node: tarfile --- Read and write tar archive files,  Prev: zipfile --- Work with ZIP archives,  Up: Data Compression and Archiving

5.13.6 ‘tarfile’ — Read and write tar archive files
---------------------------------------------------

`Source code:' Lib/tarfile.py(1)

__________________________________________________________________

The *note tarfile: ff. module makes it possible to read and write tar
archives, including those using gzip, bz2 and lzma compression.  Use the
*note zipfile: 13f. module to read or write ‘.zip’ files, or the
higher-level functions in *note shutil: 7f1.

Some facts and figures:

   * reads and writes *note gzip: 8b, *note bz2: 14. and *note lzma: ab.
     compressed archives if the respective modules are available.

   * read/write support for the POSIX.1-1988 (ustar) format.

   * read/write support for the GNU tar format including `longname' and
     `longlink' extensions, read-only support for all variants of the
     `sparse' extension including restoration of sparse files.

   * read/write support for the POSIX.1-2001 (pax) format.

   * handles directories, regular files, hardlinks, symbolic links,
     fifos, character devices and block devices and is able to acquire
     and restore file information like timestamp, access permissions and
     owner.

Changed in version 3.3: Added support for *note lzma: ab. compression.

 -- Function: tarfile.open (name=None, mode='r', fileobj=None,
          bufsize=10240, **kwargs)

     Return a *note TarFile: 7e1. object for the pathname `name'.  For
     detailed information on *note TarFile: 7e1. objects and the keyword
     arguments that are allowed, see *note TarFile Objects: 174d.

     `mode' has to be a string of the form ‘'filemode[:compression]'’,
     it defaults to ‘'r'’.  Here is a full list of mode combinations:

     mode                   action
                            
     -------------------------------------------------------------------------
                            
     ‘'r' or 'r:*'’         Open for reading with transparent compression
                            (recommended).
                            
                            
     ‘'r:'’                 Open for reading exclusively without
                            compression.
                            
                            
     ‘'r:gz'’               Open for reading with gzip compression.
                            
                            
     ‘'r:bz2'’              Open for reading with bzip2 compression.
                            
                            
     ‘'r:xz'’               Open for reading with lzma compression.
                            
                            
     ‘'x'’ or ‘'x:'’        Create a tarfile exclusively without
                            compression.  Raise an
                            *note FileExistsError: 56f. exception if it is
                            already exists.
                            
                            
     ‘'x:gz'’               Create a tarfile with gzip compression.  Raise
                            an *note FileExistsError: 56f. exception if it
                            is already exists.
                            
                            
     ‘'x:bz2'’              Create a tarfile with bzip2 compression.  Raise
                            an *note FileExistsError: 56f. exception if it
                            is already exists.
                            
                            
     ‘'x:xz'’               Create a tarfile with lzma compression.  Raise
                            an *note FileExistsError: 56f. exception if it
                            is already exists.
                            
                            
     ‘'a' or 'a:'’          Open for appending with no compression.  The
                            file is created if it does not exist.
                            
                            
     ‘'w' or 'w:'’          Open for uncompressed writing.
                            
                            
     ‘'w:gz'’               Open for gzip compressed writing.
                            
                            
     ‘'w:bz2'’              Open for bzip2 compressed writing.
                            
                            
     ‘'w:xz'’               Open for lzma compressed writing.
                            

     Note that ‘'a:gz'’, ‘'a:bz2'’ or ‘'a:xz'’ is not possible.  If
     `mode' is not suitable to open a certain (compressed) file for
     reading, *note ReadError: 174e. is raised.  Use `mode' ‘'r'’ to
     avoid this.  If a compression method is not supported, *note
     CompressionError: 174f. is raised.

     If `fileobj' is specified, it is used as an alternative to a *note
     file object: 78b. opened in binary mode for `name'.  It is supposed
     to be at position 0.

     For modes ‘'w:gz'’, ‘'r:gz'’, ‘'w:bz2'’, ‘'r:bz2'’, ‘'x:gz'’,
     ‘'x:bz2'’, *note tarfile.open(): 337. accepts the keyword argument
     `compresslevel' (default ‘9’) to specify the compression level of
     the file.

     For special purposes, there is a second format for `mode':
     ‘'filemode|[compression]'’.  *note tarfile.open(): 337. will return
     a *note TarFile: 7e1. object that processes its data as a stream of
     blocks.  No random seeking will be done on the file.  If given,
     `fileobj' may be any object that has a ‘read()’ or ‘write()’ method
     (depending on the `mode').  `bufsize' specifies the blocksize and
     defaults to ‘20 * 512’ bytes.  Use this variant in combination with
     e.g.  ‘sys.stdin’, a socket *note file object: 78b. or a tape
     device.  However, such a *note TarFile: 7e1. object is limited in
     that it does not allow random access, see *note Examples: 1750.
     The currently possible modes:

     Mode              Action
                       
     -------------------------------------------------------------------
                       
     ‘'r|*'’           Open a `stream' of tar blocks for reading with
                       transparent compression.
                       
                       
     ‘'r|'’            Open a `stream' of uncompressed tar blocks for
                       reading.
                       
                       
     ‘'r|gz'’          Open a gzip compressed `stream' for reading.
                       
                       
     ‘'r|bz2'’         Open a bzip2 compressed `stream' for reading.
                       
                       
     ‘'r|xz'’          Open an lzma compressed `stream' for reading.
                       
                       
     ‘'w|'’            Open an uncompressed `stream' for writing.
                       
                       
     ‘'w|gz'’          Open a gzip compressed `stream' for writing.
                       
                       
     ‘'w|bz2'’         Open a bzip2 compressed `stream' for writing.
                       
                       
     ‘'w|xz'’          Open an lzma compressed `stream' for writing.
                       

     Changed in version 3.5: The ‘'x'’ (exclusive creation) mode was
     added.

 -- Class: tarfile.TarFile

     Class for reading and writing tar archives.  Do not use this class
     directly, better use *note tarfile.open(): 337. instead.  See *note
     TarFile Objects: 174d.

 -- Function: tarfile.is_tarfile (name)

     Return *note True: 9ff. if `name' is a tar archive file, that the
     *note tarfile: ff. module can read.

The *note tarfile: ff. module defines the following exceptions:

 -- Exception: tarfile.TarError

     Base class for all *note tarfile: ff. exceptions.

 -- Exception: tarfile.ReadError

     Is raised when a tar archive is opened, that either cannot be
     handled by the *note tarfile: ff. module or is somehow invalid.

 -- Exception: tarfile.CompressionError

     Is raised when a compression method is not supported or when the
     data cannot be decoded properly.

 -- Exception: tarfile.StreamError

     Is raised for the limitations that are typical for stream-like
     *note TarFile: 7e1. objects.

 -- Exception: tarfile.ExtractError

     Is raised for `non-fatal' errors when using *note
     TarFile.extract(): 339, but only if ‘TarFile.errorlevel’‘== 2’.

 -- Exception: tarfile.HeaderError

     Is raised by *note TarInfo.frombuf(): 1756. if the buffer it gets
     is invalid.

The following constants are available at the module level:

 -- Data: tarfile.ENCODING

     The default character encoding: ‘'utf-8'’ on Windows, the value
     returned by *note sys.getfilesystemencoding(): 1758. otherwise.

Each of the following constants defines a tar archive format that the
*note tarfile: ff. module is able to create.  See section *note
Supported tar formats: 1759. for details.

 -- Data: tarfile.USTAR_FORMAT

     POSIX.1-1988 (ustar) format.

 -- Data: tarfile.GNU_FORMAT

     GNU tar format.

 -- Data: tarfile.PAX_FORMAT

     POSIX.1-2001 (pax) format.

 -- Data: tarfile.DEFAULT_FORMAT

     The default format for creating archives.  This is currently *note
     GNU_FORMAT: 175b.

See also
........

Module *note zipfile: 13f.

     Documentation of the *note zipfile: 13f. standard module.

*note Archiving operations: 7f1.

     Documentation of the higher-level archiving facilities provided by
     the standard *note shutil: e7. module.

GNU tar manual, Basic Tar Format(2)

     Documentation for tar archive files, including GNU tar extensions.

* Menu:

* TarFile Objects:: 
* TarInfo Objects:: 
* Command Line Interface:: 
* Examples: Examples<6>. 
* Supported tar formats:: 
* Unicode issues:: 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/tarfile.py

   (2) http://www.gnu.org/software/tar/manual/html_node/Standard.html


File: python.info,  Node: TarFile Objects,  Next: TarInfo Objects,  Up: tarfile --- Read and write tar archive files

5.13.6.1 TarFile Objects
........................

The *note TarFile: 7e1. object provides an interface to a tar archive.
A tar archive is a sequence of blocks.  An archive member (a stored
file) is made up of a header block followed by data blocks.  It is
possible to store a file in a tar archive several times.  Each archive
member is represented by a *note TarInfo: 7e4. object, see *note TarInfo
Objects: 175f. for details.

A *note TarFile: 7e1. object can be used as a context manager in a *note
with: 29d. statement.  It will automatically be closed when the block is
completed.  Please note that in the event of an exception an archive
opened for writing will not be finalized; only the internally used file
object will be closed.  See the *note Examples: 1750. section for a use
case.

New in version 3.2: Added support for the context management protocol.

 -- Class: tarfile.TarFile (name=None, mode='r', fileobj=None,
          format=DEFAULT_FORMAT, tarinfo=TarInfo, dereference=False,
          ignore_zeros=False, encoding=ENCODING,
          errors='surrogateescape', pax_headers=None, debug=0,
          errorlevel=0)

     All following arguments are optional and can be accessed as
     instance attributes as well.

     `name' is the pathname of the archive.  It can be omitted if
     `fileobj' is given.  In this case, the file object’s ‘name’
     attribute is used if it exists.

     `mode' is either ‘'r'’ to read from an existing archive, ‘'a'’ to
     append data to an existing file, ‘'w'’ to create a new file
     overwriting an existing one or ‘'x'’ to create a new file only if
     it’s not exists.

     If `fileobj' is given, it is used for reading or writing data.  If
     it can be determined, `mode' is overridden by `fileobj'’s mode.
     `fileobj' will be used from position 0.

          Note: `fileobj' is not closed, when *note TarFile: 7e1. is
          closed.

     `format' controls the archive format.  It must be one of the
     constants *note USTAR_FORMAT: 175a, *note GNU_FORMAT: 175b. or
     *note PAX_FORMAT: 175c. that are defined at module level.

     The `tarinfo' argument can be used to replace the default *note
     TarInfo: 7e4. class with a different one.

     If `dereference' is *note False: 60d, add symbolic and hard links
     to the archive.  If it is *note True: 9ff, add the content of the
     target files to the archive.  This has no effect on systems that do
     not support symbolic links.

     If `ignore_zeros' is *note False: 60d, treat an empty block as the
     end of the archive.  If it is *note True: 9ff, skip empty (and
     invalid) blocks and try to get as many members as possible.  This
     is only useful for reading concatenated or damaged archives.

     `debug' can be set from ‘0’ (no debug messages) up to ‘3’ (all
     debug messages).  The messages are written to ‘sys.stderr’.

     If `errorlevel' is ‘0’, all errors are ignored when using *note
     TarFile.extract(): 339.  Nevertheless, they appear as error
     messages in the debug output, when debugging is enabled.  If ‘1’,
     all `fatal' errors are raised as *note OSError: 4b6. exceptions.
     If ‘2’, all `non-fatal' errors are raised as *note TarError: 1752.
     exceptions as well.

     The `encoding' and `errors' arguments define the character encoding
     to be used for reading or writing the archive and how conversion
     errors are going to be handled.  The default settings will work for
     most users.  See section *note Unicode issues: 1760. for in-depth
     information.

     The `pax_headers' argument is an optional dictionary of strings
     which will be added as a pax global header if `format' is *note
     PAX_FORMAT: 175c.

     Changed in version 3.2: Use ‘'surrogateescape'’ as the default for
     the `errors' argument.

     Changed in version 3.5: The ‘'x'’ (exclusive creation) mode was
     added.

 -- Class Method: TarFile.open (...)

     Alternative constructor.  The *note tarfile.open(): 337. function
     is actually a shortcut to this classmethod.

 -- Method: TarFile.getmember (name)

     Return a *note TarInfo: 7e4. object for member `name'.  If `name'
     can not be found in the archive, *note KeyError: 1a7. is raised.

          Note: If a member occurs more than once in the archive, its
          last occurrence is assumed to be the most up-to-date version.

 -- Method: TarFile.getmembers ()

     Return the members of the archive as a list of *note TarInfo: 7e4.
     objects.  The list has the same order as the members in the
     archive.

 -- Method: TarFile.getnames ()

     Return the members as a list of their names.  It has the same order
     as the list returned by *note getmembers(): 33b.

 -- Method: TarFile.list (verbose=True, *, members=None)

     Print a table of contents to ‘sys.stdout’.  If `verbose' is *note
     False: 60d, only the names of the members are printed.  If it is
     *note True: 9ff, output similar to that of ‘ls -l’ is produced.  If
     optional `members' is given, it must be a subset of the list
     returned by *note getmembers(): 33b.

     Changed in version 3.5: Added the `members' parameter.

 -- Method: TarFile.next ()

     Return the next member of the archive as a *note TarInfo: 7e4.
     object, when *note TarFile: 7e1. is opened for reading.  Return
     *note None: 19d. if there is no more available.

 -- Method: TarFile.extractall (path=".", members=None, *,
          numeric_owner=False)

     Extract all members from the archive to the current working
     directory or directory `path'.  If optional `members' is given, it
     must be a subset of the list returned by *note getmembers(): 33b.
     Directory information like owner, modification time and permissions
     are set after all members have been extracted.  This is done to
     work around two problems: A directory’s modification time is reset
     each time a file is created in it.  And, if a directory’s
     permissions do not allow writing, extracting files to it will fail.

     If `numeric_owner' is *note True: 9ff, the uid and gid numbers from
     the tarfile are used to set the owner/group for the extracted
     files.  Otherwise, the named values from the tarfile are used.

          Warning: Never extract archives from untrusted sources without
          prior inspection.  It is possible that files are created
          outside of `path', e.g.  members that have absolute filenames
          starting with ‘"/"’ or filenames with two dots ‘".."’.

     Changed in version 3.5: Added the `numeric_only' parameter.

 -- Method: TarFile.extract (member, path="", set_attrs=True, *,
          numeric_owner=False)

     Extract a member from the archive to the current working directory,
     using its full name.  Its file information is extracted as
     accurately as possible.  `member' may be a filename or a *note
     TarInfo: 7e4. object.  You can specify a different directory using
     `path'.  File attributes (owner, mtime, mode) are set unless
     `set_attrs' is false.

     If `numeric_owner' is *note True: 9ff, the uid and gid numbers from
     the tarfile are used to set the owner/group for the extracted
     files.  Otherwise, the named values from the tarfile are used.

          Note: The *note extract(): 339. method does not take care of
          several extraction issues.  In most cases you should consider
          using the *note extractall(): 338. method.

          Warning: See the warning for *note extractall(): 338.

     Changed in version 3.2: Added the `set_attrs' parameter.

     Changed in version 3.5: Added the `numeric_only' parameter.

 -- Method: TarFile.extractfile (member)

     Extract a member from the archive as a file object.  `member' may
     be a filename or a *note TarInfo: 7e4. object.  If `member' is a
     regular file or a link, an *note io.BufferedReader: 7df. object is
     returned.  Otherwise, *note None: 19d. is returned.

     Changed in version 3.3: Return an *note io.BufferedReader: 7df.
     object.

 -- Method: TarFile.add (name, arcname=None, recursive=True,
          exclude=None, *, filter=None)

     Add the file `name' to the archive.  `name' may be any type of file
     (directory, fifo, symbolic link, etc.).  If given, `arcname'
     specifies an alternative name for the file in the archive.
     Directories are added recursively by default.  This can be avoided
     by setting `recursive' to *note False: 60d.  If `exclude' is given,
     it must be a function that takes one filename argument and returns
     a boolean value.  Depending on this value the respective file is
     either excluded (*note True: 9ff.) or added (*note False: 60d.).
     If `filter' is specified it must be a keyword argument.  It should
     be a function that takes a *note TarInfo: 7e4. object argument and
     returns the changed *note TarInfo: 7e4. object.  If it instead
     returns *note None: 19d. the *note TarInfo: 7e4. object will be
     excluded from the archive.  See *note Examples: 1750. for an
     example.

     Changed in version 3.2: Added the `filter' parameter.

     Deprecated since version 3.2: The `exclude' parameter is
     deprecated, please use the `filter' parameter instead.

 -- Method: TarFile.addfile (tarinfo, fileobj=None)

     Add the *note TarInfo: 7e4. object `tarinfo' to the archive.  If
     `fileobj' is given, it should be a *note binary file: 164a, and
     ‘tarinfo.size’ bytes are read from it and added to the archive.
     You can create *note TarInfo: 7e4. objects directly, or by using
     *note gettarinfo(): 1767.

 -- Method: TarFile.gettarinfo (name=None, arcname=None, fileobj=None)

     Create a *note TarInfo: 7e4. object from the result of *note
     os.stat(): 1e2. or equivalent on an existing file.  The file is
     either named by `name', or specified as a *note file object: 78b.
     `fileobj' with a file descriptor.  If given, `arcname' specifies an
     alternative name for the file in the archive, otherwise, the name
     is taken from `fileobj'’s *note name: 1768. attribute, or the
     `name' argument.  The name should be a text string.

     You can modify some of the *note TarInfo: 7e4.’s attributes before
     you add it using *note addfile(): 1766.  If the file object is not
     an ordinary file object positioned at the beginning of the file,
     attributes such as *note size: 1769. may need modifying.  This is
     the case for objects such as *note GzipFile: 290.  The *note name:
     176a. may also be modified, in which case `arcname' could be a
     dummy string.

 -- Method: TarFile.close ()

     Close the *note TarFile: 7e1.  In write mode, two finishing zero
     blocks are appended to the archive.

 -- Attribute: TarFile.pax_headers

     A dictionary containing key-value pairs of pax global headers.


File: python.info,  Node: TarInfo Objects,  Next: Command Line Interface,  Prev: TarFile Objects,  Up: tarfile --- Read and write tar archive files

5.13.6.2 TarInfo Objects
........................

A *note TarInfo: 7e4. object represents one member in a *note TarFile:
7e1.  Aside from storing all required attributes of a file (like file
type, size, time, permissions, owner etc.), it provides some useful
methods to determine its type.  It does `not' contain the file’s data
itself.

*note TarInfo: 7e4. objects are returned by *note TarFile: 7e1.’s
methods ‘getmember()’, ‘getmembers()’ and ‘gettarinfo()’.

 -- Class: tarfile.TarInfo (name="")

     Create a *note TarInfo: 7e4. object.

 -- Class Method: TarInfo.frombuf (buf, encoding, errors)

     Create and return a *note TarInfo: 7e4. object from string buffer
     `buf'.

     Raises *note HeaderError: 1755. if the buffer is invalid.

 -- Class Method: TarInfo.fromtarfile (tarfile)

     Read the next member from the *note TarFile: 7e1. object `tarfile'
     and return it as a *note TarInfo: 7e4. object.

 -- Method: TarInfo.tobuf (format=DEFAULT_FORMAT, encoding=ENCODING,
          errors='surrogateescape')

     Create a string buffer from a *note TarInfo: 7e4. object.  For
     information on the arguments see the constructor of the *note
     TarFile: 7e1. class.

     Changed in version 3.2: Use ‘'surrogateescape'’ as the default for
     the `errors' argument.

A ‘TarInfo’ object has the following public data attributes:

 -- Attribute: TarInfo.name

     Name of the archive member.

 -- Attribute: TarInfo.size

     Size in bytes.

 -- Attribute: TarInfo.mtime

     Time of last modification.

 -- Attribute: TarInfo.mode

     Permission bits.

 -- Attribute: TarInfo.type

     File type.  `type' is usually one of these constants: ‘REGTYPE’,
     ‘AREGTYPE’, ‘LNKTYPE’, ‘SYMTYPE’, ‘DIRTYPE’, ‘FIFOTYPE’,
     ‘CONTTYPE’, ‘CHRTYPE’, ‘BLKTYPE’, ‘GNUTYPE_SPARSE’.  To determine
     the type of a *note TarInfo: 7e4. object more conveniently, use the
     ‘is*()’ methods below.

 -- Attribute: TarInfo.linkname

     Name of the target file name, which is only present in *note
     TarInfo: 7e4. objects of type ‘LNKTYPE’ and ‘SYMTYPE’.

 -- Attribute: TarInfo.uid

     User ID of the user who originally stored this member.

 -- Attribute: TarInfo.gid

     Group ID of the user who originally stored this member.

 -- Attribute: TarInfo.uname

     User name.

 -- Attribute: TarInfo.gname

     Group name.

 -- Attribute: TarInfo.pax_headers

     A dictionary containing key-value pairs of an associated pax
     extended header.

A *note TarInfo: 7e4. object also provides some convenient query
methods:

 -- Method: TarInfo.isfile ()

     Return *note True: 9ff. if the ‘Tarinfo’ object is a regular file.

 -- Method: TarInfo.isreg ()

     Same as *note isfile(): 1779.

 -- Method: TarInfo.isdir ()

     Return *note True: 9ff. if it is a directory.

 -- Method: TarInfo.issym ()

     Return *note True: 9ff. if it is a symbolic link.

 -- Method: TarInfo.islnk ()

     Return *note True: 9ff. if it is a hard link.

 -- Method: TarInfo.ischr ()

     Return *note True: 9ff. if it is a character device.

 -- Method: TarInfo.isblk ()

     Return *note True: 9ff. if it is a block device.

 -- Method: TarInfo.isfifo ()

     Return *note True: 9ff. if it is a FIFO.

 -- Method: TarInfo.isdev ()

     Return *note True: 9ff. if it is one of character device, block
     device or FIFO.


File: python.info,  Node: Command Line Interface,  Next: Examples<6>,  Prev: TarInfo Objects,  Up: tarfile --- Read and write tar archive files

5.13.6.3 Command Line Interface
...............................

New in version 3.4.

The *note tarfile: ff. module provides a simple command line interface
to interact with tar archives.

If you want to create a new tar archive, specify its name after the
*note -c: bd2. option and then list the filename(s) that should be
included:

     $ python -m tarfile -c monty.tar  spam.txt eggs.txt

Passing a directory is also acceptable:

     $ python -m tarfile -c monty.tar life-of-brian_1979/

If you want to extract a tar archive into the current directory, use the
*note -e: 1783. option:

     $ python -m tarfile -e monty.tar

You can also extract a tar archive into a different directory by passing
the directory’s name:

     $ python -m tarfile -e monty.tar  other-dir/

For a list of the files in a tar archive, use the *note -l: 1784.
option:

     $ python -m tarfile -l monty.tar

* Menu:

* Command line options:: 


File: python.info,  Node: Command line options,  Up: Command Line Interface

5.13.6.4 Command line options
.............................

 -- Program Option: -l <tarfile>
 -- Program Option: --list <tarfile>

     List files in a tarfile.

 -- Program Option: -c <tarfile> <source1> <sourceN>
 -- Program Option: --create <tarfile> <source1> <sourceN>

     Create tarfile from source files.

 -- Program Option: -e <tarfile> [<output_dir>]
 -- Program Option: --extract <tarfile> [<output_dir>]

     Extract tarfile into the current directory if `output_dir' is not
     specified.

 -- Program Option: -t <tarfile>
 -- Program Option: --test <tarfile>

     Test whether the tarfile is valid or not.

 -- Program Option: -v, --verbose

     Verbose output


File: python.info,  Node: Examples<6>,  Next: Supported tar formats,  Prev: Command Line Interface,  Up: tarfile --- Read and write tar archive files

5.13.6.5 Examples
.................

How to extract an entire tar archive to the current working directory:

     import tarfile
     tar = tarfile.open("sample.tar.gz")
     tar.extractall()
     tar.close()

How to extract a subset of a tar archive with *note
TarFile.extractall(): 338. using a generator function instead of a list:

     import os
     import tarfile

     def py_files(members):
         for tarinfo in members:
             if os.path.splitext(tarinfo.name)[1] == ".py":
                 yield tarinfo

     tar = tarfile.open("sample.tar.gz")
     tar.extractall(members=py_files(tar))
     tar.close()

How to create an uncompressed tar archive from a list of filenames:

     import tarfile
     tar = tarfile.open("sample.tar", "w")
     for name in ["foo", "bar", "quux"]:
         tar.add(name)
     tar.close()

The same example using the *note with: 29d. statement:

     import tarfile
     with tarfile.open("sample.tar", "w") as tar:
         for name in ["foo", "bar", "quux"]:
             tar.add(name)

How to read a gzip compressed tar archive and display some member
information:

     import tarfile
     tar = tarfile.open("sample.tar.gz", "r:gz")
     for tarinfo in tar:
         print(tarinfo.name, "is", tarinfo.size, "bytes in size and is", end="")
         if tarinfo.isreg():
             print("a regular file.")
         elif tarinfo.isdir():
             print("a directory.")
         else:
             print("something else.")
     tar.close()

How to create an archive and reset the user information using the
`filter' parameter in *note TarFile.add(): 7e2.:

     import tarfile
     def reset(tarinfo):
         tarinfo.uid = tarinfo.gid = 0
         tarinfo.uname = tarinfo.gname = "root"
         return tarinfo
     tar = tarfile.open("sample.tar.gz", "w:gz")
     tar.add("foo", filter=reset)
     tar.close()


File: python.info,  Node: Supported tar formats,  Next: Unicode issues,  Prev: Examples<6>,  Up: tarfile --- Read and write tar archive files

5.13.6.6 Supported tar formats
..............................

There are three tar formats that can be created with the *note tarfile:
ff. module:

   * The POSIX.1-1988 ustar format (*note USTAR_FORMAT: 175a.).  It
     supports filenames up to a length of at best 256 characters and
     linknames up to 100 characters.  The maximum file size is 8 GiB.
     This is an old and limited but widely supported format.

   * The GNU tar format (*note GNU_FORMAT: 175b.).  It supports long
     filenames and linknames, files bigger than 8 GiB and sparse files.
     It is the de facto standard on GNU/Linux systems.  *note tarfile:
     ff. fully supports the GNU tar extensions for long names, sparse
     file support is read-only.

   * The POSIX.1-2001 pax format (*note PAX_FORMAT: 175c.).  It is the
     most flexible format with virtually no limits.  It supports long
     filenames and linknames, large files and stores pathnames in a
     portable way.  However, not all tar implementations today are able
     to handle pax archives properly.

     The `pax' format is an extension to the existing `ustar' format.
     It uses extra headers for information that cannot be stored
     otherwise.  There are two flavours of pax headers: Extended headers
     only affect the subsequent file header, global headers are valid
     for the complete archive and affect all following files.  All the
     data in a pax header is encoded in `UTF-8' for portability reasons.

There are some more variants of the tar format which can be read, but
not created:

   * The ancient V7 format.  This is the first tar format from Unix
     Seventh Edition, storing only regular files and directories.  Names
     must not be longer than 100 characters, there is no user/group name
     information.  Some archives have miscalculated header checksums in
     case of fields with non-ASCII characters.

   * The SunOS tar extended format.  This format is a variant of the
     POSIX.1-2001 pax format, but is not compatible.


File: python.info,  Node: Unicode issues,  Prev: Supported tar formats,  Up: tarfile --- Read and write tar archive files

5.13.6.7 Unicode issues
.......................

The tar format was originally conceived to make backups on tape drives
with the main focus on preserving file system information.  Nowadays tar
archives are commonly used for file distribution and exchanging archives
over networks.  One problem of the original format (which is the basis
of all other formats) is that there is no concept of supporting
different character encodings.  For example, an ordinary tar archive
created on a `UTF-8' system cannot be read correctly on a `Latin-1'
system if it contains non-`ASCII' characters.  Textual metadata (like
filenames, linknames, user/group names) will appear damaged.
Unfortunately, there is no way to autodetect the encoding of an archive.
The pax format was designed to solve this problem.  It stores non-ASCII
metadata using the universal character encoding `UTF-8'.

The details of character conversion in *note tarfile: ff. are controlled
by the `encoding' and `errors' keyword arguments of the *note TarFile:
7e1. class.

`encoding' defines the character encoding to use for the metadata in the
archive.  The default value is *note sys.getfilesystemencoding(): 1758.
or ‘'ascii'’ as a fallback.  Depending on whether the archive is read or
written, the metadata must be either decoded or encoded.  If `encoding'
is not set appropriately, this conversion may fail.

The `errors' argument defines how characters are treated that cannot be
converted.  Possible values are listed in section *note Error Handlers:
fb2.  The default scheme is ‘'surrogateescape'’ which Python also uses
for its file system calls, see *note File Names, Command Line Arguments,
and Environment Variables: 1791.

In case of *note PAX_FORMAT: 175c. archives, `encoding' is generally not
needed because all the metadata is stored using `UTF-8'.  `encoding' is
only used in the rare cases when binary pax headers are decoded or when
strings with surrogate characters are stored.


File: python.info,  Node: File Formats,  Next: Cryptographic Services,  Prev: Data Compression and Archiving,  Up: The Python Standard Library

5.14 File Formats
=================

The modules described in this chapter parse various miscellaneous file
formats that aren’t markup languages and are not related to e-mail.

* Menu:

* csv: csv --- CSV File Reading and Writing. CSV File Reading and Writing
* configparser: configparser --- Configuration file parser. Configuration file parser
* netrc: netrc --- netrc file processing. netrc file processing
* xdrlib: xdrlib --- Encode and decode XDR data. Encode and decode XDR data
* plistlib: plistlib --- Generate and parse Mac OS X plist files. Generate and parse Mac OS X .plist files


File: python.info,  Node: csv --- CSV File Reading and Writing,  Next: configparser --- Configuration file parser,  Up: File Formats

5.14.1 ‘csv’ — CSV File Reading and Writing
-------------------------------------------

`Source code:' Lib/csv.py(1)

The so-called CSV (Comma Separated Values) format is the most common
import and export format for spreadsheets and databases.  CSV format was
used for many years prior to attempts to describe the format in a
standardized way in RFC 4180(2).  The lack of a well-defined standard
means that subtle differences often exist in the data produced and
consumed by different applications.  These differences can make it
annoying to process CSV files from multiple sources.  Still, while the
delimiters and quoting characters vary, the overall format is similar
enough that it is possible to write a single module which can
efficiently manipulate such data, hiding the details of reading and
writing the data from the programmer.

The *note csv: 29. module implements classes to read and write tabular
data in CSV format.  It allows programmers to say, "write this data in
the format preferred by Excel," or "read data from this file which was
generated by Excel," without knowing the precise details of the CSV
format used by Excel.  Programmers can also describe the CSV formats
understood by other applications or define their own special-purpose CSV
formats.

The *note csv: 29. module’s *note reader: 1797. and *note writer: a7b.
objects read and write sequences.  Programmers can also read and write
data in dictionary form using the *note DictReader: 1798. and *note
DictWriter: 7ca. classes.

See also
........

PEP 305(3) - CSV File API

     The Python Enhancement Proposal which proposed this addition to
     Python.

* Menu:

* Module Contents: Module Contents<3>. 
* Dialects and Formatting Parameters:: 
* Reader Objects:: 
* Writer Objects:: 
* Examples: Examples<7>. 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/csv.py

   (2) https://tools.ietf.org/html/rfc4180.html

   (3) https://www.python.org/dev/peps/pep-0305


File: python.info,  Node: Module Contents<3>,  Next: Dialects and Formatting Parameters,  Up: csv --- CSV File Reading and Writing

5.14.1.1 Module Contents
........................

The *note csv: 29. module defines the following functions:

 -- Function: csv.reader (csvfile, dialect='excel', **fmtparams)

     Return a reader object which will iterate over lines in the given
     `csvfile'.  `csvfile' can be any object which supports the *note
     iterator: e4f. protocol and returns a string each time its
     ‘__next__()’ method is called — *note file objects: 78b. and list
     objects are both suitable.  If `csvfile' is a file object, it
     should be opened with ‘newline=''’.  (1) An optional `dialect'
     parameter can be given which is used to define a set of parameters
     specific to a particular CSV dialect.  It may be an instance of a
     subclass of the *note Dialect: 179b. class or one of the strings
     returned by the *note list_dialects(): 179c. function.  The other
     optional `fmtparams' keyword arguments can be given to override
     individual formatting parameters in the current dialect.  For full
     details about the dialect and formatting parameters, see section
     *note Dialects and Formatting Parameters: 179d.

     Each row read from the csv file is returned as a list of strings.
     No automatic data type conversion is performed unless the
     ‘QUOTE_NONNUMERIC’ format option is specified (in which case
     unquoted fields are transformed into floats).

     A short usage example:

          >>> import csv
          >>> with open('eggs.csv', newline='') as csvfile:
          ...     spamreader = csv.reader(csvfile, delimiter=' ', quotechar='|')
          ...     for row in spamreader:
          ...         print(', '.join(row))
          Spam, Spam, Spam, Spam, Spam, Baked Beans
          Spam, Lovely Spam, Wonderful Spam

 -- Function: csv.writer (csvfile, dialect='excel', **fmtparams)

     Return a writer object responsible for converting the user’s data
     into delimited strings on the given file-like object.  `csvfile'
     can be any object with a ‘write()’ method.  If `csvfile' is a file
     object, it should be opened with ‘newline=''’ (2).  An optional
     `dialect' parameter can be given which is used to define a set of
     parameters specific to a particular CSV dialect.  It may be an
     instance of a subclass of the *note Dialect: 179b. class or one of
     the strings returned by the *note list_dialects(): 179c. function.
     The other optional `fmtparams' keyword arguments can be given to
     override individual formatting parameters in the current dialect.
     For full details about the dialect and formatting parameters, see
     section *note Dialects and Formatting Parameters: 179d.  To make it
     as easy as possible to interface with modules which implement the
     DB API, the value *note None: 19d. is written as the empty string.
     While this isn’t a reversible transformation, it makes it easier to
     dump SQL NULL data values to CSV files without preprocessing the
     data returned from a ‘cursor.fetch*’ call.  All other non-string
     data are stringified with *note str(): 25a. before being written.

     A short usage example:

          import csv
          with open('eggs.csv', 'w', newline='') as csvfile:
              spamwriter = csv.writer(csvfile, delimiter=' ',
                                      quotechar='|', quoting=csv.QUOTE_MINIMAL)
              spamwriter.writerow(['Spam'] * 5 + ['Baked Beans'])
              spamwriter.writerow(['Spam', 'Lovely Spam', 'Wonderful Spam'])

 -- Function: csv.register_dialect (name[, dialect[, **fmtparams]])

     Associate `dialect' with `name'.  `name' must be a string.  The
     dialect can be specified either by passing a sub-class of *note
     Dialect: 179b, or by `fmtparams' keyword arguments, or both, with
     keyword arguments overriding parameters of the dialect.  For full
     details about the dialect and formatting parameters, see section
     *note Dialects and Formatting Parameters: 179d.

 -- Function: csv.unregister_dialect (name)

     Delete the dialect associated with `name' from the dialect
     registry.  An *note Error: 17a0. is raised if `name' is not a
     registered dialect name.

 -- Function: csv.get_dialect (name)

     Return the dialect associated with `name'.  An *note Error: 17a0.
     is raised if `name' is not a registered dialect name.  This
     function returns an immutable *note Dialect: 179b.

 -- Function: csv.list_dialects ()

     Return the names of all registered dialects.

 -- Function: csv.field_size_limit ([new_limit])

     Returns the current maximum field size allowed by the parser.  If
     `new_limit' is given, this becomes the new limit.

The *note csv: 29. module defines the following classes:

 -- Class: csv.DictReader (csvfile, fieldnames=None, restkey=None,
          restval=None, dialect='excel', *args, **kwds)

     Create an object which operates like a regular reader but maps the
     information read into a dict whose keys are given by the optional
     `fieldnames' parameter.  The `fieldnames' parameter is a *note
     sequence: 1f. whose elements are associated with the fields of the
     input data in order.  These elements become the keys of the
     resulting dictionary.  If the `fieldnames' parameter is omitted,
     the values in the first row of the `csvfile' will be used as the
     fieldnames.  If the row read has more fields than the fieldnames
     sequence, the remaining data is added as a sequence keyed by the
     value of `restkey'.  If the row read has fewer fields than the
     fieldnames sequence, the remaining keys take the value of the
     optional `restval' parameter.  Any other optional or keyword
     arguments are passed to the underlying *note reader: 1797.
     instance.

     A short usage example:

          >>> import csv
          >>> with open('names.csv') as csvfile:
          ...     reader = csv.DictReader(csvfile)
          ...     for row in reader:
          ...         print(row['first_name'], row['last_name'])
          ...
          Baked Beans
          Lovely Spam
          Wonderful Spam

 -- Class: csv.DictWriter (csvfile, fieldnames, restval='',
          extrasaction='raise', dialect='excel', *args, **kwds)

     Create an object which operates like a regular writer but maps
     dictionaries onto output rows.  The `fieldnames' parameter is a
     *note sequence: 1f. of keys that identify the order in which values
     in the dictionary passed to the ‘writerow()’ method are written to
     the `csvfile'.  The optional `restval' parameter specifies the
     value to be written if the dictionary is missing a key in
     `fieldnames'.  If the dictionary passed to the ‘writerow()’ method
     contains a key not found in `fieldnames', the optional
     `extrasaction' parameter indicates what action to take.  If it is
     set to ‘'raise'’ a *note ValueError: 19c. is raised.  If it is set
     to ‘'ignore'’, extra values in the dictionary are ignored.  Any
     other optional or keyword arguments are passed to the underlying
     *note writer: a7b. instance.

     Note that unlike the *note DictReader: 1798. class, the
     `fieldnames' parameter of the *note DictWriter: 7ca. is not
     optional.  Since Python’s *note dict: 3b0. objects are not ordered,
     there is not enough information available to deduce the order in
     which the row should be written to the `csvfile'.

     A short usage example:

          import csv

          with open('names.csv', 'w') as csvfile:
              fieldnames = ['first_name', 'last_name']
              writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

              writer.writeheader()
              writer.writerow({'first_name': 'Baked', 'last_name': 'Beans'})
              writer.writerow({'first_name': 'Lovely', 'last_name': 'Spam'})
              writer.writerow({'first_name': 'Wonderful', 'last_name': 'Spam'})

 -- Class: csv.Dialect

     The *note Dialect: 179b. class is a container class relied on
     primarily for its attributes, which are used to define the
     parameters for a specific *note reader: 1797. or *note writer: a7b.
     instance.

 -- Class: csv.excel

     The *note excel: 17a3. class defines the usual properties of an
     Excel-generated CSV file.  It is registered with the dialect name
     ‘'excel'’.

 -- Class: csv.excel_tab

     The *note excel_tab: 17a4. class defines the usual properties of an
     Excel-generated TAB-delimited file.  It is registered with the
     dialect name ‘'excel-tab'’.

 -- Class: csv.unix_dialect

     The *note unix_dialect: 7c9. class defines the usual properties of
     a CSV file generated on UNIX systems, i.e.  using ‘'\n'’ as line
     terminator and quoting all fields.  It is registered with the
     dialect name ‘'unix'’.

     New in version 3.2.

 -- Class: csv.Sniffer

     The *note Sniffer: 17a5. class is used to deduce the format of a
     CSV file.

     The *note Sniffer: 17a5. class provides two methods:

      -- Method: sniff (sample, delimiters=None)

          Analyze the given `sample' and return a *note Dialect: 179b.
          subclass reflecting the parameters found.  If the optional
          `delimiters' parameter is given, it is interpreted as a string
          containing possible valid delimiter characters.

      -- Method: has_header (sample)

          Analyze the sample text (presumed to be in CSV format) and
          return *note True: 9ff. if the first row appears to be a
          series of column headers.

An example for *note Sniffer: 17a5. use:

     with open('example.csv') as csvfile:
         dialect = csv.Sniffer().sniff(csvfile.read(1024))
         csvfile.seek(0)
         reader = csv.reader(csvfile, dialect)
         # ... process CSV file contents here ...

The *note csv: 29. module defines the following constants:

 -- Data: csv.QUOTE_ALL

     Instructs *note writer: a7b. objects to quote all fields.

 -- Data: csv.QUOTE_MINIMAL

     Instructs *note writer: a7b. objects to only quote those fields
     which contain special characters such as `delimiter', `quotechar'
     or any of the characters in `lineterminator'.

 -- Data: csv.QUOTE_NONNUMERIC

     Instructs *note writer: a7b. objects to quote all non-numeric
     fields.

     Instructs the reader to convert all non-quoted fields to type
     `float'.

 -- Data: csv.QUOTE_NONE

     Instructs *note writer: a7b. objects to never quote fields.  When
     the current `delimiter' occurs in output data it is preceded by the
     current `escapechar' character.  If `escapechar' is not set, the
     writer will raise *note Error: 17a0. if any characters that require
     escaping are encountered.

     Instructs *note reader: 1797. to perform no special processing of
     quote characters.

The *note csv: 29. module defines the following exception:

 -- Exception: csv.Error

     Raised by any of the functions when an error is detected.

   ---------- Footnotes ----------

   (1) If ‘newline=''’ is not specified, newlines embedded inside quoted
fields will not be interpreted correctly, and on platforms that use
‘\r\n’ linendings on write an extra ‘\r’ will be added.  It should
always be safe to specify ‘newline=''’, since the csv module does its
own (*note universal: 994.) newline handling.

   (2) If ‘newline=''’ is not specified, newlines embedded inside quoted
fields will not be interpreted correctly, and on platforms that use
‘\r\n’ linendings on write an extra ‘\r’ will be added.  It should
always be safe to specify ‘newline=''’, since the csv module does its
own (*note universal: 994.) newline handling.


File: python.info,  Node: Dialects and Formatting Parameters,  Next: Reader Objects,  Prev: Module Contents<3>,  Up: csv --- CSV File Reading and Writing

5.14.1.2 Dialects and Formatting Parameters
...........................................

To make it easier to specify the format of input and output records,
specific formatting parameters are grouped together into dialects.  A
dialect is a subclass of the *note Dialect: 179b. class having a set of
specific methods and a single ‘validate()’ method.  When creating *note
reader: 1797. or *note writer: a7b. objects, the programmer can specify
a string or a subclass of the *note Dialect: 179b. class as the dialect
parameter.  In addition to, or instead of, the `dialect' parameter, the
programmer can also specify individual formatting parameters, which have
the same names as the attributes defined below for the *note Dialect:
179b. class.

Dialects support the following attributes:

 -- Attribute: Dialect.delimiter

     A one-character string used to separate fields.  It defaults to
     ‘','’.

 -- Attribute: Dialect.doublequote

     Controls how instances of `quotechar' appearing inside a field
     should themselves be quoted.  When *note True: 9ff, the character
     is doubled.  When *note False: 60d, the `escapechar' is used as a
     prefix to the `quotechar'.  It defaults to *note True: 9ff.

     On output, if `doublequote' is *note False: 60d. and no
     `escapechar' is set, *note Error: 17a0. is raised if a `quotechar'
     is found in a field.

 -- Attribute: Dialect.escapechar

     A one-character string used by the writer to escape the `delimiter'
     if `quoting' is set to *note QUOTE_NONE: 17ab. and the `quotechar'
     if `doublequote' is *note False: 60d.  On reading, the `escapechar'
     removes any special meaning from the following character.  It
     defaults to *note None: 19d, which disables escaping.

 -- Attribute: Dialect.lineterminator

     The string used to terminate lines produced by the *note writer:
     a7b.  It defaults to ‘'\r\n'’.

          Note: The *note reader: 1797. is hard-coded to recognise
          either ‘'\r'’ or ‘'\n'’ as end-of-line, and ignores
          `lineterminator'.  This behavior may change in the future.

 -- Attribute: Dialect.quotechar

     A one-character string used to quote fields containing special
     characters, such as the `delimiter' or `quotechar', or which
     contain new-line characters.  It defaults to ‘'"'’.

 -- Attribute: Dialect.quoting

     Controls when quotes should be generated by the writer and
     recognised by the reader.  It can take on any of the ‘QUOTE_*’
     constants (see section *note Module Contents: 1799.) and defaults
     to *note QUOTE_MINIMAL: 17a9.

 -- Attribute: Dialect.skipinitialspace

     When *note True: 9ff, whitespace immediately following the
     `delimiter' is ignored.  The default is *note False: 60d.

 -- Attribute: Dialect.strict

     When ‘True’, raise exception *note Error: 17a0. on bad CSV input.
     The default is ‘False’.


File: python.info,  Node: Reader Objects,  Next: Writer Objects,  Prev: Dialects and Formatting Parameters,  Up: csv --- CSV File Reading and Writing

5.14.1.3 Reader Objects
.......................

Reader objects (*note DictReader: 1798. instances and objects returned
by the *note reader(): 1797. function) have the following public
methods:

 -- Method: csvreader.__next__ ()

     Return the next row of the reader’s iterable object as a list,
     parsed according to the current dialect.  Usually you should call
     this as ‘next(reader)’.

Reader objects have the following public attributes:

 -- Attribute: csvreader.dialect

     A read-only description of the dialect in use by the parser.

 -- Attribute: csvreader.line_num

     The number of lines read from the source iterator.  This is not the
     same as the number of records returned, as records can span
     multiple lines.

DictReader objects have the following public attribute:

 -- Attribute: csvreader.fieldnames

     If not passed as a parameter when creating the object, this
     attribute is initialized upon first access or when the first record
     is read from the file.


File: python.info,  Node: Writer Objects,  Next: Examples<7>,  Prev: Reader Objects,  Up: csv --- CSV File Reading and Writing

5.14.1.4 Writer Objects
.......................

‘Writer’ objects (*note DictWriter: 7ca. instances and objects returned
by the *note writer(): a7b. function) have the following public methods.
A `row' must be an iterable of strings or numbers for ‘Writer’ objects
and a dictionary mapping fieldnames to strings or numbers (by passing
them through *note str(): 25a. first) for *note DictWriter: 7ca.
objects.  Note that complex numbers are written out surrounded by
parens.  This may cause some problems for other programs which read CSV
files (assuming they support complex numbers at all).

 -- Method: csvwriter.writerow (row)

     Write the `row' parameter to the writer’s file object, formatted
     according to the current dialect.

     Changed in version 3.5: Added support of arbitrary iterables.

 -- Method: csvwriter.writerows (rows)

     Write all the `rows' parameters (a list of `row' objects as
     described above) to the writer’s file object, formatted according
     to the current dialect.

Writer objects have the following public attribute:

 -- Attribute: csvwriter.dialect

     A read-only description of the dialect in use by the writer.

DictWriter objects have the following public method:

 -- Method: DictWriter.writeheader ()

     Write a row with the field names (as specified in the constructor).

     New in version 3.2.


File: python.info,  Node: Examples<7>,  Prev: Writer Objects,  Up: csv --- CSV File Reading and Writing

5.14.1.5 Examples
.................

The simplest example of reading a CSV file:

     import csv
     with open('some.csv', newline='') as f:
         reader = csv.reader(f)
         for row in reader:
             print(row)

Reading a file with an alternate format:

     import csv
     with open('passwd', newline='') as f:
         reader = csv.reader(f, delimiter=':', quoting=csv.QUOTE_NONE)
         for row in reader:
             print(row)

The corresponding simplest possible writing example is:

     import csv
     with open('some.csv', 'w', newline='') as f:
         writer = csv.writer(f)
         writer.writerows(someiterable)

Since *note open(): 1e8. is used to open a CSV file for reading, the
file will by default be decoded into unicode using the system default
encoding (see *note locale.getpreferredencoding(): fb0.).  To decode a
file using a different encoding, use the ‘encoding’ argument of open:

     import csv
     with open('some.csv', newline='', encoding='utf-8') as f:
         reader = csv.reader(f)
         for row in reader:
             print(row)

The same applies to writing in something other than the system default
encoding: specify the encoding argument when opening the output file.

Registering a new dialect:

     import csv
     csv.register_dialect('unixpwd', delimiter=':', quoting=csv.QUOTE_NONE)
     with open('passwd', newline='') as f:
         reader = csv.reader(f, 'unixpwd')

A slightly more advanced use of the reader — catching and reporting
errors:

     import csv, sys
     filename = 'some.csv'
     with open(filename, newline='') as f:
         reader = csv.reader(f)
         try:
             for row in reader:
                 print(row)
         except csv.Error as e:
             sys.exit('file {}, line {}: {}'.format(filename, reader.line_num, e))

And while the module doesn’t directly support parsing strings, it can
easily be done:

     import csv
     for row in csv.reader(['one,two,three']):
         print(row)


File: python.info,  Node: configparser --- Configuration file parser,  Next: netrc --- netrc file processing,  Prev: csv --- CSV File Reading and Writing,  Up: File Formats

5.14.2 ‘configparser’ — Configuration file parser
-------------------------------------------------

`Source code:' Lib/configparser.py(1)

This module provides the *note ConfigParser: 26c. class which implements
a basic configuration language which provides a structure similar to
what’s found in Microsoft Windows INI files.  You can use this to write
Python programs which can be customized by end users easily.

     Note: This library does `not' interpret or write the value-type
     prefixes used in the Windows Registry extended version of INI
     syntax.

See also
........

Module *note shlex: e6.

     Support for a creating Unix shell-like mini-languages which can be
     used as an alternate format for application configuration files.

Module *note json: a2.

     The json module implements a subset of JavaScript syntax which can
     also be used for this purpose.

* Menu:

* Quick Start:: 
* Supported Datatypes:: 
* Fallback Values:: 
* Supported INI File Structure:: 
* Interpolation of values:: 
* Mapping Protocol Access:: 
* Customizing Parser Behaviour:: 
* Legacy API Examples:: 
* ConfigParser Objects:: 
* RawConfigParser Objects:: 
* Exceptions: Exceptions<4>. 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/configparser.py


File: python.info,  Node: Quick Start,  Next: Supported Datatypes,  Up: configparser --- Configuration file parser

5.14.2.1 Quick Start
....................

Let’s take a very basic configuration file that looks like this:

     [DEFAULT]
     ServerAliveInterval = 45
     Compression = yes
     CompressionLevel = 9
     ForwardX11 = yes

     [bitbucket.org]
     User = hg

     [topsecret.server.com]
     Port = 50022
     ForwardX11 = no

The structure of INI files is described *note in the following section:
17c2.  Essentially, the file consists of sections, each of which
contains keys with values.  *note configparser: 23. classes can read and
write such files.  Let’s start by creating the above configuration file
programatically.

     >>> import configparser
     >>> config = configparser.ConfigParser()
     >>> config['DEFAULT'] = {'ServerAliveInterval': '45',
     ...                      'Compression': 'yes',
     ...                      'CompressionLevel': '9'}
     >>> config['bitbucket.org'] = {}
     >>> config['bitbucket.org']['User'] = 'hg'
     >>> config['topsecret.server.com'] = {}
     >>> topsecret = config['topsecret.server.com']
     >>> topsecret['Port'] = '50022'     # mutates the parser
     >>> topsecret['ForwardX11'] = 'no'  # same here
     >>> config['DEFAULT']['ForwardX11'] = 'yes'
     >>> with open('example.ini', 'w') as configfile:
     ...   config.write(configfile)
     ...

As you can see, we can treat a config parser much like a dictionary.
There are differences, *note outlined later: 17c3, but the behavior is
very close to what you would expect from a dictionary.

Now that we have created and saved a configuration file, let’s read it
back and explore the data it holds.

     >>> import configparser
     >>> config = configparser.ConfigParser()
     >>> config.sections()
     []
     >>> config.read('example.ini')
     ['example.ini']
     >>> config.sections()
     ['bitbucket.org', 'topsecret.server.com']
     >>> 'bitbucket.org' in config
     True
     >>> 'bytebong.com' in config
     False
     >>> config['bitbucket.org']['User']
     'hg'
     >>> config['DEFAULT']['Compression']
     'yes'
     >>> topsecret = config['topsecret.server.com']
     >>> topsecret['ForwardX11']
     'no'
     >>> topsecret['Port']
     '50022'
     >>> for key in config['bitbucket.org']: print(key)
     ...
     user
     compressionlevel
     serveraliveinterval
     compression
     forwardx11
     >>> config['bitbucket.org']['ForwardX11']
     'yes'

As we can see above, the API is pretty straightforward.  The only bit of
magic involves the ‘DEFAULT’ section which provides default values for
all other sections (1).  Note also that keys in sections are
case-insensitive and stored in lowercase (2).

   ---------- Footnotes ----------

   (1) Config parsers allow for heavy customization.  If you are
interested in changing the behaviour outlined by the footnote reference,
consult the *note Customizing Parser Behaviour: 17c4. section.

   (2) Config parsers allow for heavy customization.  If you are
interested in changing the behaviour outlined by the footnote reference,
consult the *note Customizing Parser Behaviour: 17c4. section.


File: python.info,  Node: Supported Datatypes,  Next: Fallback Values,  Prev: Quick Start,  Up: configparser --- Configuration file parser

5.14.2.2 Supported Datatypes
............................

Config parsers do not guess datatypes of values in configuration files,
always storing them internally as strings.  This means that if you need
other datatypes, you should convert on your own:

     >>> int(topsecret['Port'])
     50022
     >>> float(topsecret['CompressionLevel'])
     9.0

Since this task is so common, config parsers provide a range of handy
getter methods to handle integers, floats and booleans.  The last one is
the most interesting because simply passing the value to ‘bool()’ would
do no good since ‘bool('False')’ is still ‘True’.  This is why config
parsers also provide ‘getboolean()’.  This method is case-insensitive
and recognizes Boolean values from ‘'yes'’/‘'no'’, ‘'on'’/‘'off'’,
‘'true'’/‘'false'’ and ‘'1'’/‘'0'’ (1).  For example:

     >>> topsecret.getboolean('ForwardX11')
     False
     >>> config['bitbucket.org'].getboolean('ForwardX11')
     True
     >>> config.getboolean('bitbucket.org', 'Compression')
     True

Apart from ‘getboolean()’, config parsers also provide equivalent
‘getint()’ and ‘getfloat()’ methods.  You can register your own
converters and customize the provided ones.  (2)

   ---------- Footnotes ----------

   (1) Config parsers allow for heavy customization.  If you are
interested in changing the behaviour outlined by the footnote reference,
consult the *note Customizing Parser Behaviour: 17c4. section.

   (2) Config parsers allow for heavy customization.  If you are
interested in changing the behaviour outlined by the footnote reference,
consult the *note Customizing Parser Behaviour: 17c4. section.


File: python.info,  Node: Fallback Values,  Next: Supported INI File Structure,  Prev: Supported Datatypes,  Up: configparser --- Configuration file parser

5.14.2.3 Fallback Values
........................

As with a dictionary, you can use a section’s ‘get()’ method to provide
fallback values:

     >>> topsecret.get('Port')
     '50022'
     >>> topsecret.get('CompressionLevel')
     '9'
     >>> topsecret.get('Cipher')
     >>> topsecret.get('Cipher', '3des-cbc')
     '3des-cbc'

Please note that default values have precedence over fallback values.
For instance, in our example the ‘'CompressionLevel'’ key was specified
only in the ‘'DEFAULT'’ section.  If we try to get it from the section
‘'topsecret.server.com'’, we will always get the default, even if we
specify a fallback:

     >>> topsecret.get('CompressionLevel', '3')
     '9'

One more thing to be aware of is that the parser-level ‘get()’ method
provides a custom, more complex interface, maintained for backwards
compatibility.  When using this method, a fallback value can be provided
via the ‘fallback’ keyword-only argument:

     >>> config.get('bitbucket.org', 'monster',
     ...            fallback='No such things as monsters')
     'No such things as monsters'

The same ‘fallback’ argument can be used with the ‘getint()’,
‘getfloat()’ and ‘getboolean()’ methods, for example:

     >>> 'BatchMode' in topsecret
     False
     >>> topsecret.getboolean('BatchMode', fallback=True)
     True
     >>> config['DEFAULT']['BatchMode'] = 'no'
     >>> topsecret.getboolean('BatchMode', fallback=True)
     False


File: python.info,  Node: Supported INI File Structure,  Next: Interpolation of values,  Prev: Fallback Values,  Up: configparser --- Configuration file parser

5.14.2.4 Supported INI File Structure
.....................................

A configuration file consists of sections, each led by a ‘[section]’
header, followed by key/value entries separated by a specific string
(‘=’ or ‘:’ by default (1)).  By default, section names are case
sensitive but keys are not (2).  Leading and trailing whitespace is
removed from keys and values.  Values can be omitted, in which case the
key/value delimiter may also be left out.  Values can also span multiple
lines, as long as they are indented deeper than the first line of the
value.  Depending on the parser’s mode, blank lines may be treated as
parts of multiline values or ignored.

Configuration files may include comments, prefixed by specific
characters (‘#’ and ‘;’ by default (3)).  Comments may appear on their
own on an otherwise empty line, possibly indented.  (4)

For example:

     [Simple Values]
     key=value
     spaces in keys=allowed
     spaces in values=allowed as well
     spaces around the delimiter = obviously
     you can also use : to delimit keys from values

     [All Values Are Strings]
     values like this: 1000000
     or this: 3.14159265359
     are they treated as numbers? : no
     integers, floats and booleans are held as: strings
     can use the API to get converted values directly: true

     [Multiline Values]
     chorus: I'm a lumberjack, and I'm okay
         I sleep all night and I work all day

     [No Values]
     key_without_value
     empty string value here =

     [You can use comments]
     # like this
     ; or this

     # By default only in an empty line.
     # Inline comments can be harmful because they prevent users
     # from using the delimiting characters as parts of values.
     # That being said, this can be customized.

         [Sections Can Be Indented]
             can_values_be_as_well = True
             does_that_mean_anything_special = False
             purpose = formatting for readability
             multiline_values = are
                 handled just fine as
                 long as they are indented
                 deeper than the first line
                 of a value
             # Did I mention we can indent comments, too?

   ---------- Footnotes ----------

   (1) Config parsers allow for heavy customization.  If you are
interested in changing the behaviour outlined by the footnote reference,
consult the *note Customizing Parser Behaviour: 17c4. section.

   (2) Config parsers allow for heavy customization.  If you are
interested in changing the behaviour outlined by the footnote reference,
consult the *note Customizing Parser Behaviour: 17c4. section.

   (3) Config parsers allow for heavy customization.  If you are
interested in changing the behaviour outlined by the footnote reference,
consult the *note Customizing Parser Behaviour: 17c4. section.

   (4) Config parsers allow for heavy customization.  If you are
interested in changing the behaviour outlined by the footnote reference,
consult the *note Customizing Parser Behaviour: 17c4. section.


File: python.info,  Node: Interpolation of values,  Next: Mapping Protocol Access,  Prev: Supported INI File Structure,  Up: configparser --- Configuration file parser

5.14.2.5 Interpolation of values
................................

On top of the core functionality, *note ConfigParser: 26c. supports
interpolation.  This means values can be preprocessed before returning
them from ‘get()’ calls.

 -- Class: configparser.BasicInterpolation

     The default implementation used by *note ConfigParser: 26c.  It
     enables values to contain format strings which refer to other
     values in the same section, or values in the special default
     section (1).  Additional default values can be provided on
     initialization.

     For example:

          [Paths]
          home_dir: /Users
          my_dir: %(home_dir)s/lumberjack
          my_pictures: %(my_dir)s/Pictures

     In the example above, *note ConfigParser: 26c. with `interpolation'
     set to ‘BasicInterpolation()’ would resolve ‘%(home_dir)s’ to the
     value of ‘home_dir’ (‘/Users’ in this case).  ‘%(my_dir)s’ in
     effect would resolve to ‘/Users/lumberjack’.  All interpolations
     are done on demand so keys used in the chain of references do not
     have to be specified in any specific order in the configuration
     file.

     With ‘interpolation’ set to ‘None’, the parser would simply return
     ‘%(my_dir)s/Pictures’ as the value of ‘my_pictures’ and
     ‘%(home_dir)s/lumberjack’ as the value of ‘my_dir’.

 -- Class: configparser.ExtendedInterpolation

     An alternative handler for interpolation which implements a more
     advanced syntax, used for instance in ‘zc.buildout’.  Extended
     interpolation is using ‘${section:option}’ to denote a value from a
     foreign section.  Interpolation can span multiple levels.  For
     convenience, if the ‘section:’ part is omitted, interpolation
     defaults to the current section (and possibly the default values
     from the special section).

     For example, the configuration specified above with basic
     interpolation, would look like this with extended interpolation:

          [Paths]
          home_dir: /Users
          my_dir: ${home_dir}/lumberjack
          my_pictures: ${my_dir}/Pictures

     Values from other sections can be fetched as well:

          [Common]
          home_dir: /Users
          library_dir: /Library
          system_dir: /System
          macports_dir: /opt/local

          [Frameworks]
          Python: 3.2
          path: ${Common:system_dir}/Library/Frameworks/

          [Arthur]
          nickname: Two Sheds
          last_name: Jackson
          my_dir: ${Common:home_dir}/twosheds
          my_pictures: ${my_dir}/Pictures
          python_dir: ${Frameworks:path}/Python/Versions/${Frameworks:Python}

   ---------- Footnotes ----------

   (1) Config parsers allow for heavy customization.  If you are
interested in changing the behaviour outlined by the footnote reference,
consult the *note Customizing Parser Behaviour: 17c4. section.


File: python.info,  Node: Mapping Protocol Access,  Next: Customizing Parser Behaviour,  Prev: Interpolation of values,  Up: configparser --- Configuration file parser

5.14.2.6 Mapping Protocol Access
................................

New in version 3.2.

Mapping protocol access is a generic name for functionality that enables
using custom objects as if they were dictionaries.  In case of *note
configparser: 23, the mapping interface implementation is using the
‘parser['section']['option']’ notation.

‘parser['section']’ in particular returns a proxy for the section’s data
in the parser.  This means that the values are not copied but they are
taken from the original parser on demand.  What’s even more important is
that when values are changed on a section proxy, they are actually
mutated in the original parser.

*note configparser: 23. objects behave as close to actual dictionaries
as possible.  The mapping interface is complete and adheres to the *note
MutableMapping: 61d. ABC. However, there are a few differences that
should be taken into account:

   * By default, all keys in sections are accessible in a
     case-insensitive manner (1).  E.g.  ‘for option in
     parser["section"]’ yields only ‘optionxform’’ed option key names.
     This means lowercased keys by default.  At the same time, for a
     section that holds the key ‘'a'’, both expressions return ‘True’:

          "a" in parser["section"]
          "A" in parser["section"]

   * All sections include ‘DEFAULTSECT’ values as well which means that
     ‘.clear()’ on a section may not leave the section visibly empty.
     This is because default values cannot be deleted from the section
     (because technically they are not there).  If they are overridden
     in the section, deleting causes the default value to be visible
     again.  Trying to delete a default value causes a ‘KeyError’.

   * ‘DEFAULTSECT’ cannot be removed from the parser:

        * trying to delete it raises ‘ValueError’,

        * ‘parser.clear()’ leaves it intact,

        * ‘parser.popitem()’ never returns it.

   * ‘parser.get(section, option, **kwargs)’ - the second argument is
     `not' a fallback value.  Note however that the section-level
     ‘get()’ methods are compatible both with the mapping protocol and
     the classic configparser API.

   * ‘parser.items()’ is compatible with the mapping protocol (returns a
     list of `section_name', `section_proxy' pairs including the
     DEFAULTSECT). However, this method can also be invoked with
     arguments: ‘parser.items(section, raw, vars)’.  The latter call
     returns a list of `option', `value' pairs for a specified
     ‘section’, with all interpolations expanded (unless ‘raw=True’ is
     provided).

The mapping protocol is implemented on top of the existing legacy API so
that subclasses overriding the original interface still should have
mappings working as expected.

   ---------- Footnotes ----------

   (1) Config parsers allow for heavy customization.  If you are
interested in changing the behaviour outlined by the footnote reference,
consult the *note Customizing Parser Behaviour: 17c4. section.


File: python.info,  Node: Customizing Parser Behaviour,  Next: Legacy API Examples,  Prev: Mapping Protocol Access,  Up: configparser --- Configuration file parser

5.14.2.7 Customizing Parser Behaviour
.....................................

There are nearly as many INI format variants as there are applications
using it.  *note configparser: 23. goes a long way to provide support
for the largest sensible set of INI styles available.  The default
functionality is mainly dictated by historical background and it’s very
likely that you will want to customize some of the features.

The most common way to change the way a specific config parser works is
to use the *note __init__(): 9d5. options:

   * `defaults', default value: ‘None’

     This option accepts a dictionary of key-value pairs which will be
     initially put in the ‘DEFAULT’ section.  This makes for an elegant
     way to support concise configuration files that don’t specify
     values which are the same as the documented default.

     Hint: if you want to specify default values for a specific section,
     use ‘read_dict()’ before you read the actual file.

   * `dict_type', default value: *note collections.OrderedDict: 1bd.

     This option has a major impact on how the mapping protocol will
     behave and how the written configuration files look.  With the
     default ordered dictionary, every section is stored in the order
     they were added to the parser.  Same goes for options within
     sections.

     An alternative dictionary type can be used for example to sort
     sections and options on write-back.  You can also use a regular
     dictionary for performance reasons.

     Please note: there are ways to add a set of key-value pairs in a
     single operation.  When you use a regular dictionary in those
     operations, the order of the keys may be random.  For example:

          >>> parser = configparser.ConfigParser()
          >>> parser.read_dict({'section1': {'key1': 'value1',
          ...                                'key2': 'value2',
          ...                                'key3': 'value3'},
          ...                   'section2': {'keyA': 'valueA',
          ...                                'keyB': 'valueB',
          ...                                'keyC': 'valueC'},
          ...                   'section3': {'foo': 'x',
          ...                                'bar': 'y',
          ...                                'baz': 'z'}
          ... })
          >>> parser.sections()
          ['section3', 'section2', 'section1']
          >>> [option for option in parser['section3']]
          ['baz', 'foo', 'bar']

     In these operations you need to use an ordered dictionary as well:

          >>> from collections import OrderedDict
          >>> parser = configparser.ConfigParser()
          >>> parser.read_dict(
          ...   OrderedDict((
          ...     ('s1',
          ...      OrderedDict((
          ...        ('1', '2'),
          ...        ('3', '4'),
          ...        ('5', '6'),
          ...      ))
          ...     ),
          ...     ('s2',
          ...      OrderedDict((
          ...        ('a', 'b'),
          ...        ('c', 'd'),
          ...        ('e', 'f'),
          ...      ))
          ...     ),
          ...   ))
          ... )
          >>> parser.sections()
          ['s1', 's2']
          >>> [option for option in parser['s1']]
          ['1', '3', '5']
          >>> [option for option in parser['s2'].values()]
          ['b', 'd', 'f']

   * `allow_no_value', default value: ‘False’

     Some configuration files are known to include settings without
     values, but which otherwise conform to the syntax supported by
     *note configparser: 23.  The `allow_no_value' parameter to the
     constructor can be used to indicate that such values should be
     accepted:

          >>> import configparser

          >>> sample_config = """
          ... [mysqld]
          ...   user = mysql
          ...   pid-file = /var/run/mysqld/mysqld.pid
          ...   skip-external-locking
          ...   old_passwords = 1
          ...   skip-bdb
          ...   # we don't need ACID today
          ...   skip-innodb
          ... """
          >>> config = configparser.ConfigParser(allow_no_value=True)
          >>> config.read_string(sample_config)

          >>> # Settings with values are treated as before:
          >>> config["mysqld"]["user"]
          'mysql'

          >>> # Settings without values provide None:
          >>> config["mysqld"]["skip-bdb"]

          >>> # Settings which aren't specified still raise an error:
          >>> config["mysqld"]["does-not-exist"]
          Traceback (most recent call last):
            ...
          KeyError: 'does-not-exist'

   * `delimiters', default value: ‘('=', ':')’

     Delimiters are substrings that delimit keys from values within a
     section.  The first occurrence of a delimiting substring on a line
     is considered a delimiter.  This means values (but not keys) can
     contain the delimiters.

     See also the `space_around_delimiters' argument to *note
     ConfigParser.write(): 17c9.

   * `comment_prefixes', default value: ‘('#', ';')’

   * `inline_comment_prefixes', default value: ‘None’

     Comment prefixes are strings that indicate the start of a valid
     comment within a config file.  `comment_prefixes' are used only on
     otherwise empty lines (optionally indented) whereas
     `inline_comment_prefixes' can be used after every valid value (e.g.
     section names, options and empty lines as well).  By default inline
     comments are disabled and ‘'#'’ and ‘';'’ are used as prefixes for
     whole line comments.

     Changed in version 3.2: In previous versions of *note configparser:
     23. behaviour matched ‘comment_prefixes=('#',';')’ and
     ‘inline_comment_prefixes=(';',)’.

     Please note that config parsers don’t support escaping of comment
     prefixes so using `inline_comment_prefixes' may prevent users from
     specifying option values with characters used as comment prefixes.
     When in doubt, avoid setting `inline_comment_prefixes'.  In any
     circumstances, the only way of storing comment prefix characters at
     the beginning of a line in multiline values is to interpolate the
     prefix, for example:

          >>> from configparser import ConfigParser, ExtendedInterpolation
          >>> parser = ConfigParser(interpolation=ExtendedInterpolation())
          >>> # the default BasicInterpolation could be used as well
          >>> parser.read_string("""
          ... [DEFAULT]
          ... hash = #
          ...
          ... [hashes]
          ... shebang =
          ...   ${hash}!/usr/bin/env python
          ...   ${hash} -*- coding: utf-8 -*-
          ...
          ... extensions =
          ...   enabled_extension
          ...   another_extension
          ...   #disabled_by_comment
          ...   yet_another_extension
          ...
          ... interpolation not necessary = if # is not at line start
          ... even in multiline values = line #1
          ...   line #2
          ...   line #3
          ... """)
          >>> print(parser['hashes']['shebang'])

          #!/usr/bin/env python
          # -*- coding: utf-8 -*-
          >>> print(parser['hashes']['extensions'])

          enabled_extension
          another_extension
          yet_another_extension
          >>> print(parser['hashes']['interpolation not necessary'])
          if # is not at line start
          >>> print(parser['hashes']['even in multiline values'])
          line #1
          line #2
          line #3

   * `strict', default value: ‘True’

     When set to ‘True’, the parser will not allow for any section or
     option duplicates while reading from a single source (using
     ‘read_file()’, ‘read_string()’ or ‘read_dict()’).  It is
     recommended to use strict parsers in new applications.

     Changed in version 3.2: In previous versions of *note configparser:
     23. behaviour matched ‘strict=False’.

   * `empty_lines_in_values', default value: ‘True’

     In config parsers, values can span multiple lines as long as they
     are indented more than the key that holds them.  By default parsers
     also let empty lines to be parts of values.  At the same time, keys
     can be arbitrarily indented themselves to improve readability.  In
     consequence, when configuration files get big and complex, it is
     easy for the user to lose track of the file structure.  Take for
     instance:

          [Section]
          key = multiline
            value with a gotcha

           this = is still a part of the multiline value of 'key'

     This can be especially problematic for the user to see if she’s
     using a proportional font to edit the file.  That is why when your
     application does not need values with empty lines, you should
     consider disallowing them.  This will make empty lines split keys
     every time.  In the example above, it would produce two keys, ‘key’
     and ‘this’.

   * `default_section', default value: ‘configparser.DEFAULTSECT’ (that
     is: ‘"DEFAULT"’)

     The convention of allowing a special section of default values for
     other sections or interpolation purposes is a powerful concept of
     this library, letting users create complex declarative
     configurations.  This section is normally called ‘"DEFAULT"’ but
     this can be customized to point to any other valid section name.
     Some typical values include: ‘"general"’ or ‘"common"’.  The name
     provided is used for recognizing default sections when reading from
     any source and is used when writing configuration back to a file.
     Its current value can be retrieved using the
     ‘parser_instance.default_section’ attribute and may be modified at
     runtime (i.e.  to convert files from one format to another).

   * `interpolation', default value: ‘configparser.BasicInterpolation’

     Interpolation behaviour may be customized by providing a custom
     handler through the `interpolation' argument.  ‘None’ can be used
     to turn off interpolation completely, ‘ExtendedInterpolation()’
     provides a more advanced variant inspired by ‘zc.buildout’.  More
     on the subject in the *note dedicated documentation section: 17c7.
     *note RawConfigParser: 46a. has a default value of ‘None’.

   * `converters', default value: not set

     Config parsers provide option value getters that perform type
     conversion.  By default ‘getint()’, ‘getfloat()’, and
     ‘getboolean()’ are implemented.  Should other getters be desirable,
     users may define them in a subclass or pass a dictionary where each
     key is a name of the converter and each value is a callable
     implementing said conversion.  For instance, passing ‘{'decimal':
     decimal.Decimal}’ would add ‘getdecimal()’ on both the parser
     object and all section proxies.  In other words, it will be
     possible to write both ‘parser_instance.getdecimal('section',
     'key', fallback=0)’ and
     ‘parser_instance['section'].getdecimal('key', 0)’.

     If the converter needs to access the state of the parser, it can be
     implemented as a method on a config parser subclass.  If the name
     of this method starts with ‘get’, it will be available on all
     section proxies, in the dict-compatible form (see the
     ‘getdecimal()’ example above).

More advanced customization may be achieved by overriding default values
of these parser attributes.  The defaults are defined on the classes, so
they may be overridden by subclasses or by attribute assignment.

 -- Attribute: configparser.BOOLEAN_STATES

     By default when using ‘getboolean()’, config parsers consider the
     following values ‘True’: ‘'1'’, ‘'yes'’, ‘'true'’, ‘'on'’ and the
     following values ‘False’: ‘'0'’, ‘'no'’, ‘'false'’, ‘'off'’.  You
     can override this by specifying a custom dictionary of strings and
     their Boolean outcomes.  For example:

          >>> custom = configparser.ConfigParser()
          >>> custom['section1'] = {'funky': 'nope'}
          >>> custom['section1'].getboolean('funky')
          Traceback (most recent call last):
          ...
          ValueError: Not a boolean: nope
          >>> custom.BOOLEAN_STATES = {'sure': True, 'nope': False}
          >>> custom['section1'].getboolean('funky')
          False

     Other typical Boolean pairs include ‘accept’/‘reject’ or
     ‘enabled’/‘disabled’.

 -- Method: configparser.optionxform (option)

     This method transforms option names on every read, get, or set
     operation.  The default converts the name to lowercase.  This also
     means that when a configuration file gets written, all keys will be
     lowercase.  Override this method if that’s unsuitable.  For
     example:

          >>> config = """
          ... [Section1]
          ... Key = Value
          ...
          ... [Section2]
          ... AnotherKey = Value
          ... """
          >>> typical = configparser.ConfigParser()
          >>> typical.read_string(config)
          >>> list(typical['Section1'].keys())
          ['key']
          >>> list(typical['Section2'].keys())
          ['anotherkey']
          >>> custom = configparser.RawConfigParser()
          >>> custom.optionxform = lambda option: option
          >>> custom.read_string(config)
          >>> list(custom['Section1'].keys())
          ['Key']
          >>> list(custom['Section2'].keys())
          ['AnotherKey']

 -- Attribute: configparser.SECTCRE

     A compiled regular expression used to parse section headers.  The
     default matches ‘[section]’ to the name ‘"section"’.  Whitespace is
     considered part of the section name, thus ‘[ larch ]’ will be read
     as a section of name ‘" larch "’.  Override this attribute if
     that’s unsuitable.  For example:

          >>> config = """
          ... [Section 1]
          ... option = value
          ...
          ... [  Section 2  ]
          ... another = val
          ... """
          >>> typical = ConfigParser()
          >>> typical.read_string(config)
          >>> typical.sections()
          ['Section 1', '  Section 2  ']
          >>> custom = ConfigParser()
          >>> custom.SECTCRE = re.compile(r"\[ *(?P<header>[^]]+?) *\]")
          >>> custom.read_string(config)
          >>> custom.sections()
          ['Section 1', 'Section 2']

          Note: While ConfigParser objects also use an ‘OPTCRE’
          attribute for recognizing option lines, it’s not recommended
          to override it because that would interfere with constructor
          options `allow_no_value' and `delimiters'.


File: python.info,  Node: Legacy API Examples,  Next: ConfigParser Objects,  Prev: Customizing Parser Behaviour,  Up: configparser --- Configuration file parser

5.14.2.8 Legacy API Examples
............................

Mainly because of backwards compatibility concerns, *note configparser:
23. provides also a legacy API with explicit ‘get’/‘set’ methods.  While
there are valid use cases for the methods outlined below, mapping
protocol access is preferred for new projects.  The legacy API is at
times more advanced, low-level and downright counterintuitive.

An example of writing to a configuration file:

     import configparser

     config = configparser.RawConfigParser()

     # Please note that using RawConfigParser's set functions, you can assign
     # non-string values to keys internally, but will receive an error when
     # attempting to write to a file or when you get it in non-raw mode. Setting
     # values using the mapping protocol or ConfigParser's set() does not allow
     # such assignments to take place.
     config.add_section('Section1')
     config.set('Section1', 'an_int', '15')
     config.set('Section1', 'a_bool', 'true')
     config.set('Section1', 'a_float', '3.1415')
     config.set('Section1', 'baz', 'fun')
     config.set('Section1', 'bar', 'Python')
     config.set('Section1', 'foo', '%(bar)s is %(baz)s!')

     # Writing our configuration file to 'example.cfg'
     with open('example.cfg', 'w') as configfile:
         config.write(configfile)

An example of reading the configuration file again:

     import configparser

     config = configparser.RawConfigParser()
     config.read('example.cfg')

     # getfloat() raises an exception if the value is not a float
     # getint() and getboolean() also do this for their respective types
     a_float = config.getfloat('Section1', 'a_float')
     an_int = config.getint('Section1', 'an_int')
     print(a_float + an_int)

     # Notice that the next output does not interpolate '%(bar)s' or '%(baz)s'.
     # This is because we are using a RawConfigParser().
     if config.getboolean('Section1', 'a_bool'):
         print(config.get('Section1', 'foo'))

To get interpolation, use *note ConfigParser: 26c.:

     import configparser

     cfg = configparser.ConfigParser()
     cfg.read('example.cfg')

     # Set the optional *raw* argument of get() to True if you wish to disable
     # interpolation in a single get operation.
     print(cfg.get('Section1', 'foo', raw=False)) # -> "Python is fun!"
     print(cfg.get('Section1', 'foo', raw=True))  # -> "%(bar)s is %(baz)s!"

     # The optional *vars* argument is a dict with members that will take
     # precedence in interpolation.
     print(cfg.get('Section1', 'foo', vars={'bar': 'Documentation',
                                               'baz': 'evil'}))

     # The optional *fallback* argument can be used to provide a fallback value
     print(cfg.get('Section1', 'foo'))
           # -> "Python is fun!"

     print(cfg.get('Section1', 'foo', fallback='Monty is not.'))
           # -> "Python is fun!"

     print(cfg.get('Section1', 'monster', fallback='No such things as monsters.'))
           # -> "No such things as monsters."

     # A bare print(cfg.get('Section1', 'monster')) would raise NoOptionError
     # but we can also use:

     print(cfg.get('Section1', 'monster', fallback=None))
           # -> None

Default values are available in both types of ConfigParsers.  They are
used in interpolation if an option used is not defined elsewhere.

     import configparser

     # New instance with 'bar' and 'baz' defaulting to 'Life' and 'hard' each
     config = configparser.ConfigParser({'bar': 'Life', 'baz': 'hard'})
     config.read('example.cfg')

     print(config.get('Section1', 'foo')) # -> "Python is fun!"
     config.remove_option('Section1', 'bar')
     config.remove_option('Section1', 'baz')
     print(config.get('Section1', 'foo')) # -> "Life is hard!"


File: python.info,  Node: ConfigParser Objects,  Next: RawConfigParser Objects,  Prev: Legacy API Examples,  Up: configparser --- Configuration file parser

5.14.2.9 ConfigParser Objects
.............................

 -- Class: configparser.ConfigParser (defaults=None,
          dict_type=collections.OrderedDict, allow_no_value=False,
          delimiters=('=', ':'), comment_prefixes=('#', ';'),
          inline_comment_prefixes=None, strict=True,
          empty_lines_in_values=True,
          default_section=configparser.DEFAULTSECT,
          interpolation=BasicInterpolation(), converters={})

     The main configuration parser.  When `defaults' is given, it is
     initialized into the dictionary of intrinsic defaults.  When
     `dict_type' is given, it will be used to create the dictionary
     objects for the list of sections, for the options within a section,
     and for the default values.

     When `delimiters' is given, it is used as the set of substrings
     that divide keys from values.  When `comment_prefixes' is given, it
     will be used as the set of substrings that prefix comments in
     otherwise empty lines.  Comments can be indented.  When
     `inline_comment_prefixes' is given, it will be used as the set of
     substrings that prefix comments in non-empty lines.

     When `strict' is ‘True’ (the default), the parser won’t allow for
     any section or option duplicates while reading from a single source
     (file, string or dictionary), raising *note DuplicateSectionError:
     866. or *note DuplicateOptionError: 867.  When
     `empty_lines_in_values' is ‘False’ (default: ‘True’), each empty
     line marks the end of an option.  Otherwise, internal empty lines
     of a multiline option are kept as part of the value.  When
     `allow_no_value' is ‘True’ (default: ‘False’), options without
     values are accepted; the value held for these is ‘None’ and they
     are serialized without the trailing delimiter.

     When `default_section' is given, it specifies the name for the
     special section holding default values for other sections and
     interpolation purposes (normally named ‘"DEFAULT"’).  This value
     can be retrieved and changed on runtime using the ‘default_section’
     instance attribute.

     Interpolation behaviour may be customized by providing a custom
     handler through the `interpolation' argument.  ‘None’ can be used
     to turn off interpolation completely, ‘ExtendedInterpolation()’
     provides a more advanced variant inspired by ‘zc.buildout’.  More
     on the subject in the *note dedicated documentation section: 17c7.

     All option names used in interpolation will be passed through the
     *note optionxform(): 17cb. method just like any other option name
     reference.  For example, using the default implementation of *note
     optionxform(): 17cb. (which converts option names to lower case),
     the values ‘foo %(bar)s’ and ‘foo %(BAR)s’ are equivalent.

     When `converters' is given, it should be a dictionary where each
     key represents the name of a type converter and each value is a
     callable implementing the conversion from string to the desired
     datatype.  Every converter gets its own corresponding ‘get*()’
     method on the parser object and section proxies.

     Changed in version 3.1: The default `dict_type' is *note
     collections.OrderedDict: 1bd.

     Changed in version 3.2: `allow_no_value', `delimiters',
     `comment_prefixes', `strict', `empty_lines_in_values',
     `default_section' and `interpolation' were added.

     Changed in version 3.5: The `converters' argument was added.

      -- Method: defaults ()

          Return a dictionary containing the instance-wide defaults.

      -- Method: sections ()

          Return a list of the sections available; the `default section'
          is not included in the list.

      -- Method: add_section (section)

          Add a section named `section' to the instance.  If a section
          by the given name already exists, *note DuplicateSectionError:
          866. is raised.  If the `default section' name is passed,
          *note ValueError: 19c. is raised.  The name of the section
          must be a string; if not, *note TypeError: 562. is raised.

          Changed in version 3.2: Non-string section names raise *note
          TypeError: 562.

      -- Method: has_section (section)

          Indicates whether the named `section' is present in the
          configuration.  The `default section' is not acknowledged.

      -- Method: options (section)

          Return a list of options available in the specified `section'.

      -- Method: has_option (section, option)

          If the given `section' exists, and contains the given
          `option', return *note True: 9ff.; otherwise return *note
          False: 60d.  If the specified `section' is *note None: 19d. or
          an empty string, DEFAULT is assumed.

      -- Method: read (filenames, encoding=None)

          Attempt to read and parse a list of filenames, returning a
          list of filenames which were successfully parsed.  If
          `filenames' is a string, it is treated as a single filename.
          If a file named in `filenames' cannot be opened, that file
          will be ignored.  This is designed so that you can specify a
          list of potential configuration file locations (for example,
          the current directory, the user’s home directory, and some
          system-wide directory), and all existing configuration files
          in the list will be read.  If none of the named files exist,
          the *note ConfigParser: 26c. instance will contain an empty
          dataset.  An application which requires initial values to be
          loaded from a file should load the required file or files
          using *note read_file(): 17d6. before calling *note read():
          17d5. for any optional files:

               import configparser, os

               config = configparser.ConfigParser()
               config.read_file(open('defaults.cfg'))
               config.read(['site.cfg', os.path.expanduser('~/.myapp.cfg')],
                           encoding='cp1250')

          New in version 3.2: The `encoding' parameter.  Previously, all
          files were read using the default encoding for *note open():
          1e8.

      -- Method: read_file (f, source=None)

          Read and parse configuration data from `f' which must be an
          iterable yielding Unicode strings (for example files opened in
          text mode).

          Optional argument `source' specifies the name of the file
          being read.  If not given and `f' has a ‘name’ attribute, that
          is used for `source'; the default is ‘'<???>'’.

          New in version 3.2: Replaces *note readfp(): 17d7.

      -- Method: read_string (string, source='<string>')

          Parse configuration data from a string.

          Optional argument `source' specifies a context-specific name
          of the string passed.  If not given, ‘'<string>'’ is used.
          This should commonly be a filesystem path or a URL.

          New in version 3.2.

      -- Method: read_dict (dictionary, source='<dict>')

          Load configuration from any object that provides a dict-like
          ‘items()’ method.  Keys are section names, values are
          dictionaries with keys and values that should be present in
          the section.  If the used dictionary type preserves order,
          sections and their keys will be added in order.  Values are
          automatically converted to strings.

          Optional argument `source' specifies a context-specific name
          of the dictionary passed.  If not given, ‘<dict>’ is used.

          This method can be used to copy state between parsers.

          New in version 3.2.

      -- Method: get (section, option, *, raw=False, vars=None[,
               fallback])

          Get an `option' value for the named `section'.  If `vars' is
          provided, it must be a dictionary.  The `option' is looked up
          in `vars' (if provided), `section', and in `DEFAULTSECT' in
          that order.  If the key is not found and `fallback' is
          provided, it is used as a fallback value.  ‘None’ can be
          provided as a `fallback' value.

          All the ‘'%'’ interpolations are expanded in the return
          values, unless the `raw' argument is true.  Values for
          interpolation keys are looked up in the same manner as the
          option.

          Changed in version 3.2: Arguments `raw', `vars' and `fallback'
          are keyword only to protect users from trying to use the third
          argument as the `fallback' fallback (especially when using the
          mapping protocol).

      -- Method: getint (section, option, *, raw=False, vars=None[,
               fallback])

          A convenience method which coerces the `option' in the
          specified `section' to an integer.  See *note get(): 863. for
          explanation of `raw', `vars' and `fallback'.

      -- Method: getfloat (section, option, *, raw=False, vars=None[,
               fallback])

          A convenience method which coerces the `option' in the
          specified `section' to a floating point number.  See *note
          get(): 863. for explanation of `raw', `vars' and `fallback'.

      -- Method: getboolean (section, option, *, raw=False, vars=None[,
               fallback])

          A convenience method which coerces the `option' in the
          specified `section' to a Boolean value.  Note that the
          accepted values for the option are ‘'1'’, ‘'yes'’, ‘'true'’,
          and ‘'on'’, which cause this method to return ‘True’, and
          ‘'0'’, ‘'no'’, ‘'false'’, and ‘'off'’, which cause it to
          return ‘False’.  These string values are checked in a
          case-insensitive manner.  Any other value will cause it to
          raise *note ValueError: 19c.  See *note get(): 863. for
          explanation of `raw', `vars' and `fallback'.

      -- Method: items (raw=False, vars=None)

      -- Method: items (section, raw=False, vars=None)

          When `section' is not given, return a list of `section_name',
          `section_proxy' pairs, including DEFAULTSECT.

          Otherwise, return a list of `name', `value' pairs for the
          options in the given `section'.  Optional arguments have the
          same meaning as for the *note get(): 863. method.

          Changed in version 3.2: Items present in `vars' no longer
          appear in the result.  The previous behaviour mixed actual
          parser options with variables provided for interpolation.

      -- Method: set (section, option, value)

          If the given section exists, set the given option to the
          specified value; otherwise raise *note NoSectionError: 17de.
          `option' and `value' must be strings; if not, *note TypeError:
          562. is raised.

      -- Method: write (fileobject, space_around_delimiters=True)

          Write a representation of the configuration to the specified
          *note file object: 78b, which must be opened in text mode
          (accepting strings).  This representation can be parsed by a
          future *note read(): 17d5. call.  If `space_around_delimiters'
          is true, delimiters between keys and values are surrounded by
          spaces.

      -- Method: remove_option (section, option)

          Remove the specified `option' from the specified `section'.
          If the section does not exist, raise *note NoSectionError:
          17de.  If the option existed to be removed, return *note True:
          9ff.; otherwise return *note False: 60d.

      -- Method: remove_section (section)

          Remove the specified `section' from the configuration.  If the
          section in fact existed, return ‘True’.  Otherwise return
          ‘False’.

      -- Method: optionxform (option)

          Transforms the option name `option' as found in an input file
          or as passed in by client code to the form that should be used
          in the internal structures.  The default implementation
          returns a lower-case version of `option'; subclasses may
          override this or client code can set an attribute of this name
          on instances to affect this behavior.

          You don’t need to subclass the parser to use this method, you
          can also set it on an instance, to a function that takes a
          string argument and returns a string.  Setting it to ‘str’,
          for example, would make option names case sensitive:

               cfgparser = ConfigParser()
               cfgparser.optionxform = str

          Note that when reading configuration files, whitespace around
          the option names is stripped before *note optionxform(): 17cb.
          is called.

      -- Method: readfp (fp, filename=None)

          Deprecated since version 3.2: Use *note read_file(): 17d6.
          instead.

          Changed in version 3.2: *note readfp(): 17d7. now iterates on
          `f' instead of calling ‘f.readline()’.

          For existing code calling *note readfp(): 17d7. with arguments
          which don’t support iteration, the following generator may be
          used as a wrapper around the file-like object:

               def readline_generator(f):
                   line = f.readline()
                   while line:
                       yield line
                       line = f.readline()

          Instead of ‘parser.readfp(f)’ use
          ‘parser.read_file(readline_generator(f))’.

 -- Data: configparser.MAX_INTERPOLATION_DEPTH

     The maximum depth for recursive interpolation for ‘get()’ when the
     `raw' parameter is false.  This is relevant only when the default
     `interpolation' is used.


File: python.info,  Node: RawConfigParser Objects,  Next: Exceptions<4>,  Prev: ConfigParser Objects,  Up: configparser --- Configuration file parser

5.14.2.10 RawConfigParser Objects
.................................

 -- Class: configparser.RawConfigParser (defaults=None,
          dict_type=collections.OrderedDict, allow_no_value=False, *,
          delimiters=('=', ':'), comment_prefixes=('#', ';'),
          inline_comment_prefixes=None, strict=True,
          empty_lines_in_values=True,
          default_section=configparser.DEFAULTSECT[, interpolation])

     Legacy variant of the *note ConfigParser: 26c. with interpolation
     disabled by default and unsafe ‘add_section’ and ‘set’ methods.

          Note: Consider using *note ConfigParser: 26c. instead which
          checks types of the values to be stored internally.  If you
          don’t want interpolation, you can use
          ‘ConfigParser(interpolation=None)’.

      -- Method: add_section (section)

          Add a section named `section' to the instance.  If a section
          by the given name already exists, *note DuplicateSectionError:
          866. is raised.  If the `default section' name is passed,
          *note ValueError: 19c. is raised.

          Type of `section' is not checked which lets users create
          non-string named sections.  This behaviour is unsupported and
          may cause internal errors.

      -- Method: set (section, option, value)

          If the given section exists, set the given option to the
          specified value; otherwise raise *note NoSectionError: 17de.
          While it is possible to use *note RawConfigParser: 46a. (or
          *note ConfigParser: 26c. with `raw' parameters set to true)
          for `internal' storage of non-string values, full
          functionality (including interpolation and output to files)
          can only be achieved using string values.

          This method lets users assign non-string values to keys
          internally.  This behaviour is unsupported and will cause
          errors when attempting to write to a file or get it in non-raw
          mode.  `Use the mapping protocol API' which does not allow
          such assignments to take place.


File: python.info,  Node: Exceptions<4>,  Prev: RawConfigParser Objects,  Up: configparser --- Configuration file parser

5.14.2.11 Exceptions
....................

 -- Exception: configparser.Error

     Base class for all other *note configparser: 23. exceptions.

 -- Exception: configparser.NoSectionError

     Exception raised when a specified section is not found.

 -- Exception: configparser.DuplicateSectionError

     Exception raised if ‘add_section()’ is called with the name of a
     section that is already present or in strict parsers when a section
     if found more than once in a single input file, string or
     dictionary.

     New in version 3.2: Optional ‘source’ and ‘lineno’ attributes and
     arguments to *note __init__(): 9d5. were added.

 -- Exception: configparser.DuplicateOptionError

     Exception raised by strict parsers if a single option appears twice
     during reading from a single file, string or dictionary.  This
     catches misspellings and case sensitivity-related errors, e.g.  a
     dictionary may have two keys representing the same case-insensitive
     configuration key.

 -- Exception: configparser.NoOptionError

     Exception raised when a specified option is not found in the
     specified section.

 -- Exception: configparser.InterpolationError

     Base class for exceptions raised when problems occur performing
     string interpolation.

 -- Exception: configparser.InterpolationDepthError

     Exception raised when string interpolation cannot be completed
     because the number of iterations exceeds *note
     MAX_INTERPOLATION_DEPTH: 17e2.  Subclass of *note
     InterpolationError: 17ea.

 -- Exception: configparser.InterpolationMissingOptionError

     Exception raised when an option referenced from a value does not
     exist.  Subclass of *note InterpolationError: 17ea.

 -- Exception: configparser.InterpolationSyntaxError

     Exception raised when the source text into which substitutions are
     made does not conform to the required syntax.  Subclass of *note
     InterpolationError: 17ea.

 -- Exception: configparser.MissingSectionHeaderError

     Exception raised when attempting to parse a file which has no
     section headers.

 -- Exception: configparser.ParsingError

     Exception raised when errors occur attempting to parse a file.

     Changed in version 3.2: The ‘filename’ attribute and *note
     __init__(): 9d5. argument were renamed to ‘source’ for consistency.


File: python.info,  Node: netrc --- netrc file processing,  Next: xdrlib --- Encode and decode XDR data,  Prev: configparser --- Configuration file parser,  Up: File Formats

5.14.3 ‘netrc’ — netrc file processing
--------------------------------------

`Source code:' Lib/netrc.py(1)

__________________________________________________________________

The *note netrc: bc. class parses and encapsulates the netrc file format
used by the Unix ‘ftp’ program and other FTP clients.

 -- Class: netrc.netrc ([file])

     A *note netrc: bc. instance or subclass instance encapsulates data
     from a netrc file.  The initialization argument, if present,
     specifies the file to parse.  If no argument is given, the file
     ‘.netrc’ in the user’s home directory will be read.  Parse errors
     will raise *note NetrcParseError: 17f3. with diagnostic information
     including the file name, line number, and terminating token.  If no
     argument is specified on a POSIX system, the presence of passwords
     in the ‘.netrc’ file will raise a *note NetrcParseError: 17f3. if
     the file ownership or permissions are insecure (owned by a user
     other than the user running the process, or accessible for read or
     write by any other user).  This implements security behavior
     equivalent to that of ftp and other programs that use ‘.netrc’.

     Changed in version 3.4: Added the POSIX permission check.

 -- Exception: netrc.NetrcParseError

     Exception raised by the *note netrc: bc. class when syntactical
     errors are encountered in source text.  Instances of this exception
     provide three interesting attributes: ‘msg’ is a textual
     explanation of the error, ‘filename’ is the name of the source
     file, and ‘lineno’ gives the line number on which the error was
     found.

* Menu:

* netrc Objects:: 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/netrc.py


File: python.info,  Node: netrc Objects,  Up: netrc --- netrc file processing

5.14.3.1 netrc Objects
......................

A *note netrc: bc. instance has the following methods:

 -- Method: netrc.authenticators (host)

     Return a 3-tuple ‘(login, account, password)’ of authenticators for
     `host'.  If the netrc file did not contain an entry for the given
     host, return the tuple associated with the ’default’ entry.  If
     neither matching host nor default entry is available, return
     ‘None’.

 -- Method: netrc.__repr__ ()

     Dump the class data as a string in the format of a netrc file.
     (This discards comments and may reorder the entries.)

Instances of *note netrc: bc. have public instance variables:

 -- Attribute: netrc.hosts

     Dictionary mapping host names to ‘(login, account, password)’
     tuples.  The ’default’ entry, if any, is represented as a
     pseudo-host by that name.

 -- Attribute: netrc.macros

     Dictionary mapping macro names to string lists.

     Note: Passwords are limited to a subset of the ASCII character set.
     All ASCII punctuation is allowed in passwords, however, note that
     whitespace and non-printable characters are not allowed in
     passwords.  This is a limitation of the way the .netrc file is
     parsed and may be removed in the future.


File: python.info,  Node: xdrlib --- Encode and decode XDR data,  Next: plistlib --- Generate and parse Mac OS X plist files,  Prev: netrc --- netrc file processing,  Up: File Formats

5.14.4 ‘xdrlib’ — Encode and decode XDR data
--------------------------------------------

`Source code:' Lib/xdrlib.py(1)

__________________________________________________________________

The *note xdrlib: 12f. module supports the External Data Representation
Standard as described in RFC 1014(2), written by Sun Microsystems, Inc.
June 1987.  It supports most of the data types described in the RFC.

The *note xdrlib: 12f. module defines two classes, one for packing
variables into XDR representation, and another for unpacking from XDR
representation.  There are also two exception classes.

 -- Class: xdrlib.Packer

     *note Packer: 17fc. is the class for packing data into XDR
     representation.  The *note Packer: 17fc. class is instantiated with
     no arguments.

 -- Class: xdrlib.Unpacker (data)

     ‘Unpacker’ is the complementary class which unpacks XDR data values
     from a string buffer.  The input buffer is given as `data'.

See also
........

RFC 1014(3) - XDR: External Data Representation Standard

     This RFC defined the encoding of data which was XDR at the time
     this module was originally written.  It has apparently been
     obsoleted by RFC 1832(4).

RFC 1832(5) - XDR: External Data Representation Standard

     Newer RFC that provides a revised definition of XDR.

* Menu:

* Packer Objects:: 
* Unpacker Objects:: 
* Exceptions: Exceptions<5>. 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/xdrlib.py

   (2) https://tools.ietf.org/html/rfc1014.html

   (3) https://tools.ietf.org/html/rfc1014.html

   (4) https://tools.ietf.org/html/rfc1832.html

   (5) https://tools.ietf.org/html/rfc1832.html


File: python.info,  Node: Packer Objects,  Next: Unpacker Objects,  Up: xdrlib --- Encode and decode XDR data

5.14.4.1 Packer Objects
.......................

*note Packer: 17fc. instances have the following methods:

 -- Method: Packer.get_buffer ()

     Returns the current pack buffer as a string.

 -- Method: Packer.reset ()

     Resets the pack buffer to the empty string.

In general, you can pack any of the most common XDR data types by
calling the appropriate ‘pack_type()’ method.  Each method takes a
single argument, the value to pack.  The following simple data type
packing methods are supported: ‘pack_uint()’, ‘pack_int()’,
‘pack_enum()’, ‘pack_bool()’, ‘pack_uhyper()’, and ‘pack_hyper()’.

 -- Method: Packer.pack_float (value)

     Packs the single-precision floating point number `value'.

 -- Method: Packer.pack_double (value)

     Packs the double-precision floating point number `value'.

The following methods support packing strings, bytes, and opaque data:

 -- Method: Packer.pack_fstring (n, s)

     Packs a fixed length string, `s'.  `n' is the length of the string
     but it is `not' packed into the data buffer.  The string is padded
     with null bytes if necessary to guaranteed 4 byte alignment.

 -- Method: Packer.pack_fopaque (n, data)

     Packs a fixed length opaque data stream, similarly to *note
     pack_fstring(): 1804.

 -- Method: Packer.pack_string (s)

     Packs a variable length string, `s'.  The length of the string is
     first packed as an unsigned integer, then the string data is packed
     with *note pack_fstring(): 1804.

 -- Method: Packer.pack_opaque (data)

     Packs a variable length opaque data string, similarly to *note
     pack_string(): 1806.

 -- Method: Packer.pack_bytes (bytes)

     Packs a variable length byte stream, similarly to *note
     pack_string(): 1806.

The following methods support packing arrays and lists:

 -- Method: Packer.pack_list (list, pack_item)

     Packs a `list' of homogeneous items.  This method is useful for
     lists with an indeterminate size; i.e.  the size is not available
     until the entire list has been walked.  For each item in the list,
     an unsigned integer ‘1’ is packed first, followed by the data value
     from the list.  `pack_item' is the function that is called to pack
     the individual item.  At the end of the list, an unsigned integer
     ‘0’ is packed.

     For example, to pack a list of integers, the code might appear like
     this:

          import xdrlib
          p = xdrlib.Packer()
          p.pack_list([1, 2, 3], p.pack_int)

 -- Method: Packer.pack_farray (n, array, pack_item)

     Packs a fixed length list (`array') of homogeneous items.  `n' is
     the length of the list; it is `not' packed into the buffer, but a
     *note ValueError: 19c. exception is raised if ‘len(array)’ is not
     equal to `n'.  As above, `pack_item' is the function used to pack
     each element.

 -- Method: Packer.pack_array (list, pack_item)

     Packs a variable length `list' of homogeneous items.  First, the
     length of the list is packed as an unsigned integer, then each
     element is packed as in *note pack_farray(): 180a. above.


File: python.info,  Node: Unpacker Objects,  Next: Exceptions<5>,  Prev: Packer Objects,  Up: xdrlib --- Encode and decode XDR data

5.14.4.2 Unpacker Objects
.........................

The *note Unpacker: 17fd. class offers the following methods:

 -- Method: Unpacker.reset (data)

     Resets the string buffer with the given `data'.

 -- Method: Unpacker.get_position ()

     Returns the current unpack position in the data buffer.

 -- Method: Unpacker.set_position (position)

     Sets the data buffer unpack position to `position'.  You should be
     careful about using *note get_position(): 180f. and *note
     set_position(): 1810.

 -- Method: Unpacker.get_buffer ()

     Returns the current unpack data buffer as a string.

 -- Method: Unpacker.done ()

     Indicates unpack completion.  Raises an *note Error: 1813.
     exception if all of the data has not been unpacked.

In addition, every data type that can be packed with a *note Packer:
17fc, can be unpacked with an *note Unpacker: 17fd.  Unpacking methods
are of the form ‘unpack_type()’, and take no arguments.  They return the
unpacked object.

 -- Method: Unpacker.unpack_float ()

     Unpacks a single-precision floating point number.

 -- Method: Unpacker.unpack_double ()

     Unpacks a double-precision floating point number, similarly to
     *note unpack_float(): 1814.

In addition, the following methods unpack strings, bytes, and opaque
data:

 -- Method: Unpacker.unpack_fstring (n)

     Unpacks and returns a fixed length string.  `n' is the number of
     characters expected.  Padding with null bytes to guaranteed 4 byte
     alignment is assumed.

 -- Method: Unpacker.unpack_fopaque (n)

     Unpacks and returns a fixed length opaque data stream, similarly to
     *note unpack_fstring(): 1816.

 -- Method: Unpacker.unpack_string ()

     Unpacks and returns a variable length string.  The length of the
     string is first unpacked as an unsigned integer, then the string
     data is unpacked with *note unpack_fstring(): 1816.

 -- Method: Unpacker.unpack_opaque ()

     Unpacks and returns a variable length opaque data string, similarly
     to *note unpack_string(): 1818.

 -- Method: Unpacker.unpack_bytes ()

     Unpacks and returns a variable length byte stream, similarly to
     *note unpack_string(): 1818.

The following methods support unpacking arrays and lists:

 -- Method: Unpacker.unpack_list (unpack_item)

     Unpacks and returns a list of homogeneous items.  The list is
     unpacked one element at a time by first unpacking an unsigned
     integer flag.  If the flag is ‘1’, then the item is unpacked and
     appended to the list.  A flag of ‘0’ indicates the end of the list.
     `unpack_item' is the function that is called to unpack the items.

 -- Method: Unpacker.unpack_farray (n, unpack_item)

     Unpacks and returns (as a list) a fixed length array of homogeneous
     items.  `n' is number of list elements to expect in the buffer.  As
     above, `unpack_item' is the function used to unpack each element.

 -- Method: Unpacker.unpack_array (unpack_item)

     Unpacks and returns a variable length `list' of homogeneous items.
     First, the length of the list is unpacked as an unsigned integer,
     then each element is unpacked as in *note unpack_farray(): 181c.
     above.


File: python.info,  Node: Exceptions<5>,  Prev: Unpacker Objects,  Up: xdrlib --- Encode and decode XDR data

5.14.4.3 Exceptions
...................

Exceptions in this module are coded as class instances:

 -- Exception: xdrlib.Error

     The base exception class.  *note Error: 1813. has a single public
     attribute ‘msg’ containing the description of the error.

 -- Exception: xdrlib.ConversionError

     Class derived from *note Error: 1813.  Contains no additional
     instance variables.

Here is an example of how you would catch one of these exceptions:

     import xdrlib
     p = xdrlib.Packer()
     try:
         p.pack_double(8.01)
     except xdrlib.ConversionError as instance:
         print('packing the double failed:', instance.msg)


File: python.info,  Node: plistlib --- Generate and parse Mac OS X plist files,  Prev: xdrlib --- Encode and decode XDR data,  Up: File Formats

5.14.5 ‘plistlib’ — Generate and parse Mac OS X ‘.plist’ files
--------------------------------------------------------------

`Source code:' Lib/plistlib.py(1)

__________________________________________________________________

This module provides an interface for reading and writing the "property
list" files used mainly by Mac OS X and supports both binary and XML
plist files.

The property list (‘.plist’) file format is a simple serialization
supporting basic object types, like dictionaries, lists, numbers and
strings.  Usually the top level object is a dictionary.

To write out and to parse a plist file, use the *note dump(): 487. and
*note load(): 486. functions.

To work with plist data in bytes objects, use *note dumps(): 489. and
*note loads(): 488.

Values can be strings, integers, floats, booleans, tuples, lists,
dictionaries (but only with string keys), *note Data: 556, *note bytes:
1db, ‘bytesarray’ or *note datetime.datetime: 60c. objects.

Changed in version 3.4: New API, old API deprecated.  Support for binary
format plists added.

See also
........

PList manual page(2)

     Apple’s documentation of the file format.

This module defines the following functions:

 -- Function: plistlib.load (fp, *, fmt=None, use_builtin_types=True,
          dict_type=dict)

     Read a plist file.  `fp' should be a readable and binary file
     object.  Return the unpacked root object (which usually is a
     dictionary).

     The `fmt' is the format of the file and the following values are
     valid:

        * *note None: 19d.: Autodetect the file format

        * *note FMT_XML: 48a.: XML file format

        * *note FMT_BINARY: 48b.: Binary plist format

     If `use_builtin_types' is true (the default) binary data will be
     returned as instances of *note bytes: 1db, otherwise it is returned
     as instances of *note Data: 556.

     The `dict_type' is the type used for dictionaries that are read
     from the plist file.  The exact structure of the plist can be
     recovered by using *note collections.OrderedDict: 1bd. (although
     the order of keys shouldn’t be important in plist files).

     XML data for the *note FMT_XML: 48a. format is parsed using the
     Expat parser from *note xml.parsers.expat: 135. – see its
     documentation for possible exceptions on ill-formed XML. Unknown
     elements will simply be ignored by the plist parser.

     The parser for the binary format raises ‘InvalidFileException’ when
     the file cannot be parsed.

     New in version 3.4.

 -- Function: plistlib.loads (data, *, fmt=None, use_builtin_types=True,
          dict_type=dict)

     Load a plist from a bytes object.  See *note load(): 486. for an
     explanation of the keyword arguments.

     New in version 3.4.

 -- Function: plistlib.dump (value, fp, *, fmt=FMT_XML, sort_keys=True,
          skipkeys=False)

     Write `value' to a plist file.  `Fp' should be a writable, binary
     file object.

     The `fmt' argument specifies the format of the plist file and can
     be one of the following values:

        * *note FMT_XML: 48a.: XML formatted plist file

        * *note FMT_BINARY: 48b.: Binary formatted plist file

     When `sort_keys' is true (the default) the keys for dictionaries
     will be written to the plist in sorted order, otherwise they will
     be written in the iteration order of the dictionary.

     When `skipkeys' is false (the default) the function raises *note
     TypeError: 562. when a key of a dictionary is not a string,
     otherwise such keys are skipped.

     A *note TypeError: 562. will be raised if the object is of an
     unsupported type or a container that contains objects of
     unsupported types.

     An *note OverflowError: 578. will be raised for integer values that
     cannot be represented in (binary) plist files.

     New in version 3.4.

 -- Function: plistlib.dumps (value, *, fmt=FMT_XML, sort_keys=True,
          skipkeys=False)

     Return `value' as a plist-formatted bytes object.  See the
     documentation for *note dump(): 487. for an explanation of the
     keyword arguments of this function.

     New in version 3.4.

The following functions are deprecated:

 -- Function: plistlib.readPlist (pathOrFile)

     Read a plist file.  `pathOrFile' may be either a file name or a
     (readable and binary) file object.  Returns the unpacked root
     object (which usually is a dictionary).

     This function calls *note load(): 486. to do the actual work, see
     the documentation of *note that function: 486. for an explanation
     of the keyword arguments.

          Note: Dict values in the result have a ‘__getattr__’ method
          that defers to ‘__getitem_’.  This means that you can use
          attribute access to access items of these dictionaries.

     Deprecated since version 3.4: Use *note load(): 486. instead.

 -- Function: plistlib.writePlist (rootObject, pathOrFile)

     Write `rootObject' to an XML plist file.  `pathOrFile' may be
     either a file name or a (writable and binary) file object

     Deprecated since version 3.4: Use *note dump(): 487. instead.

 -- Function: plistlib.readPlistFromBytes (data)

     Read a plist data from a bytes object.  Return the root object.

     See *note load(): 486. for a description of the keyword arguments.

          Note: Dict values in the result have a ‘__getattr__’ method
          that defers to ‘__getitem_’.  This means that you can use
          attribute access to access items of these dictionaries.

     Deprecated since version 3.4: Use *note loads(): 488. instead.

 -- Function: plistlib.writePlistToBytes (rootObject)

     Return `rootObject' as an XML plist-formatted bytes object.

     Deprecated since version 3.4: Use *note dumps(): 489. instead.

The following classes are available:

 -- Class: Dict([dict]):

     Return an extended mapping object with the same value as dictionary
     `dict'.

     This class is a subclass of *note dict: 3b0. where attribute access
     can be used to access items.  That is, ‘aDict.key’ is the same as
     ‘aDict['key']’ for getting, setting and deleting items in the
     mapping.

     Deprecated since version 3.0.

 -- Class: plistlib.Data (data)

     Return a "data" wrapper object around the bytes object `data'.
     This is used in functions converting from/to plists to represent
     the ‘<data>’ type available in plists.

     It has one attribute, ‘data’, that can be used to retrieve the
     Python bytes object stored in it.

     Deprecated since version 3.4: Use a *note bytes: 1db. object
     instead.

The following constants are available:

 -- Data: plistlib.FMT_XML

     The XML format for plist files.

     New in version 3.4.

 -- Data: plistlib.FMT_BINARY

     The binary format for plist files

     New in version 3.4.

* Menu:

* Examples: Examples<8>. 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/plistlib.py

   (2) 
https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man5/plist.5.html


File: python.info,  Node: Examples<8>,  Up: plistlib --- Generate and parse Mac OS X plist files

5.14.5.1 Examples
.................

Generating a plist:

     pl = dict(
         aString = "Doodah",
         aList = ["A", "B", 12, 32.1, [1, 2, 3]],
         aFloat = 0.1,
         anInt = 728,
         aDict = dict(
             anotherString = "<hello & hi there!>",
             aThirdString = "M\xe4ssig, Ma\xdf",
             aTrueValue = True,
             aFalseValue = False,
         ),
         someData = b"<binary gunk>",
         someMoreData = b"<lots of binary gunk>" * 10,
         aDate = datetime.datetime.fromtimestamp(time.mktime(time.gmtime())),
     )
     with open(fileName, 'wb') as fp:
         dump(pl, fp)

Parsing a plist:

     with open(fileName, 'rb') as fp:
         pl = load(fp)
     print(pl["aKey"])


File: python.info,  Node: Cryptographic Services,  Next: Generic Operating System Services,  Prev: File Formats,  Up: The Python Standard Library

5.15 Cryptographic Services
===========================

The modules described in this chapter implement various algorithms of a
cryptographic nature.  They are available at the discretion of the
installation.  On Unix systems, the *note crypt: 28. module may also be
available.  Here’s an overview:

* Menu:

* hashlib: hashlib --- Secure hashes and message digests. Secure hashes and message digests
* hmac: hmac --- Keyed-Hashing for Message Authentication. Keyed-Hashing for Message Authentication
* secrets: secrets --- Generate secure random numbers for managing secrets. Generate secure random numbers for managing secrets


File: python.info,  Node: hashlib --- Secure hashes and message digests,  Next: hmac --- Keyed-Hashing for Message Authentication,  Up: Cryptographic Services

5.15.1 ‘hashlib’ — Secure hashes and message digests
----------------------------------------------------

`Source code:' Lib/hashlib.py(1)

__________________________________________________________________

This module implements a common interface to many different secure hash
and message digest algorithms.  Included are the FIPS secure hash
algorithms SHA1, SHA224, SHA256, SHA384, and SHA512 (defined in FIPS
180-2) as well as RSA’s MD5 algorithm (defined in Internet RFC 1321(2)).
The terms "secure hash" and "message digest" are interchangeable.  Older
algorithms were called message digests.  The modern term is secure hash.

     Note: If you want the adler32 or crc32 hash functions, they are
     available in the *note zlib: 141. module.

     Warning: Some algorithms have known hash collision weaknesses,
     refer to the "See also" section at the end.

* Menu:

* Hash algorithms:: 
* Key derivation:: 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/hashlib.py

   (2) https://tools.ietf.org/html/rfc1321.html


File: python.info,  Node: Hash algorithms,  Next: Key derivation,  Up: hashlib --- Secure hashes and message digests

5.15.1.1 Hash algorithms
........................

There is one constructor method named for each type of `hash'.  All
return a hash object with the same simple interface.  For example: use
‘sha1()’ to create a SHA1 hash object.  You can now feed this object
with *note bytes-like object: 36b.s (normally *note bytes: 1db.) using
the ‘update()’ method.  At any point you can ask it for the `digest' of
the concatenation of the data fed to it so far using the ‘digest()’ or
‘hexdigest()’ methods.

     Note: For better multithreading performance, the Python *note GIL:
     848. is released for data larger than 2047 bytes at object creation
     or on update.

     Note: Feeding string objects into ‘update()’ is not supported, as
     hashes work on bytes, not on characters.

Constructors for hash algorithms that are always present in this module
are ‘md5()’, ‘sha1()’, ‘sha224()’, ‘sha256()’, ‘sha384()’, and
‘sha512()’.  Additional algorithms may also be available depending upon
the OpenSSL library that Python uses on your platform.

For example, to obtain the digest of the byte string ‘b'Nobody inspects
the spammish repetition'’:

     >>> import hashlib
     >>> m = hashlib.md5()
     >>> m.update(b"Nobody inspects")
     >>> m.update(b" the spammish repetition")
     >>> m.digest()
     b'\xbbd\x9c\x83\xdd\x1e\xa5\xc9\xd9\xde\xc9\xa1\x8d\xf0\xff\xe9'
     >>> m.digest_size
     16
     >>> m.block_size
     64

More condensed:

     >>> hashlib.sha224(b"Nobody inspects the spammish repetition").hexdigest()
     'a4337bc45a8fc544c03f52dc550cd6e1e87021bc896588bd79e901e2'

 -- Function: hashlib.new (name[, data])

     Is a generic constructor that takes the string name of the desired
     algorithm as its first parameter.  It also exists to allow access
     to the above listed hashes as well as any other algorithms that
     your OpenSSL library may offer.  The named constructors are much
     faster than *note new(): 182b. and should be preferred.

Using *note new(): 182b. with an algorithm provided by OpenSSL:

     >>> h = hashlib.new('ripemd160')
     >>> h.update(b"Nobody inspects the spammish repetition")
     >>> h.hexdigest()
     'cc4a5ce1b3df48aec5d22d1f16b894a0b894eccc'

Hashlib provides the following constant attributes:

 -- Data: hashlib.algorithms_guaranteed

     A set containing the names of the hash algorithms guaranteed to be
     supported by this module on all platforms.

     New in version 3.2.

 -- Data: hashlib.algorithms_available

     A set containing the names of the hash algorithms that are
     available in the running Python interpreter.  These names will be
     recognized when passed to *note new(): 182b.  *note
     algorithms_guaranteed: 182c. will always be a subset.  The same
     algorithm may appear multiple times in this set under different
     names (thanks to OpenSSL).

     New in version 3.2.

The following values are provided as constant attributes of the hash
objects returned by the constructors:

 -- Data: hash.digest_size

     The size of the resulting hash in bytes.

 -- Data: hash.block_size

     The internal block size of the hash algorithm in bytes.

A hash object has the following attributes:

 -- Attribute: hash.name

     The canonical name of this hash, always lowercase and always
     suitable as a parameter to *note new(): 182b. to create another
     hash of this type.

     Changed in version 3.4: The name attribute has been present in
     CPython since its inception, but until Python 3.4 was not formally
     specified, so may not exist on some platforms.

A hash object has the following methods:

 -- Method: hash.update (arg)

     Update the hash object with the object `arg', which must be
     interpretable as a buffer of bytes.  Repeated calls are equivalent
     to a single call with the concatenation of all the arguments:
     ‘m.update(a); m.update(b)’ is equivalent to ‘m.update(a+b)’.

     Changed in version 3.1: The Python GIL is released to allow other
     threads to run while hash updates on data larger than 2047 bytes is
     taking place when using hash algorithms supplied by OpenSSL.

 -- Method: hash.digest ()

     Return the digest of the data passed to the *note update(): 1830.
     method so far.  This is a bytes object of size *note digest_size:
     182e. which may contain bytes in the whole range from 0 to 255.

 -- Method: hash.hexdigest ()

     Like *note digest(): 1831. except the digest is returned as a
     string object of double length, containing only hexadecimal digits.
     This may be used to exchange the value safely in email or other
     non-binary environments.

 -- Method: hash.copy ()

     Return a copy ("clone") of the hash object.  This can be used to
     efficiently compute the digests of data sharing a common initial
     substring.


File: python.info,  Node: Key derivation,  Prev: Hash algorithms,  Up: hashlib --- Secure hashes and message digests

5.15.1.2 Key derivation
.......................

Key derivation and key stretching algorithms are designed for secure
password hashing.  Naive algorithms such as ‘sha1(password)’ are not
resistant against brute-force attacks.  A good password hashing function
must be tunable, slow, and include a salt(1).

 -- Function: hashlib.pbkdf2_hmac (hash_name, password, salt,
          iterations, dklen=None)

     The function provides PKCS#5 password-based key derivation function
     2.  It uses HMAC as pseudorandom function.

     The string `hash_name' is the desired name of the hash digest
     algorithm for HMAC, e.g.  ’sha1’ or ’sha256’.  `password' and
     `salt' are interpreted as buffers of bytes.  Applications and
     libraries should limit `password' to a sensible length (e.g.
     1024).  `salt' should be about 16 or more bytes from a proper
     source, e.g.  *note os.urandom(): 2df.

     The number of `iterations' should be chosen based on the hash
     algorithm and computing power.  As of 2013, at least 100,000
     iterations of SHA-256 are suggested.

     `dklen' is the length of the derived key.  If `dklen' is ‘None’
     then the digest size of the hash algorithm `hash_name' is used,
     e.g.  64 for SHA-512.

          >>> import hashlib, binascii
          >>> dk = hashlib.pbkdf2_hmac('sha256', b'password', b'salt', 100000)
          >>> binascii.hexlify(dk)
          b'0394a2ede332c9a13eb82e9b24631604c31df978b4e2f0fbd2c549944f9d79a5'

     New in version 3.4.

          Note: A fast implementation of `pbkdf2_hmac' is available with
          OpenSSL. The Python implementation uses an inline version of
          *note hmac: 8e.  It is about three times slower and doesn’t
          release the GIL.

See also
........

Module *note hmac: 8e.

     A module to generate message authentication codes using hashes.

Module *note base64: e.

     Another way to encode binary hashes for non-binary environments.

‘http://csrc.nist.gov/publications/fips/fips180-2/fips180-2.pdf’

     The FIPS 180-2 publication on Secure Hash Algorithms.

‘https://en.wikipedia.org/wiki/Cryptographic_hash_function#Cryptographic_hash_algorithms’

     Wikipedia article with information on which algorithms have known
     issues and what that means regarding their use.

‘http://www.ietf.org/rfc/rfc2898.txt’

     PKCS #5: Password-Based Cryptography Specification Version 2.0

   ---------- Footnotes ----------

   (1) https://en.wikipedia.org/wiki/Salt_%28cryptography%29


File: python.info,  Node: hmac --- Keyed-Hashing for Message Authentication,  Next: secrets --- Generate secure random numbers for managing secrets,  Prev: hashlib --- Secure hashes and message digests,  Up: Cryptographic Services

5.15.2 ‘hmac’ — Keyed-Hashing for Message Authentication
--------------------------------------------------------

`Source code:' Lib/hmac.py(1)

__________________________________________________________________

This module implements the HMAC algorithm as described by RFC 2104(2).

 -- Function: hmac.new (key, msg=None, digestmod=None)

     Return a new hmac object.  `key' is a bytes or bytearray object
     giving the secret key.  If `msg' is present, the method call
     ‘update(msg)’ is made.  `digestmod' is the digest name, digest
     constructor or module for the HMAC object to use.  It supports any
     name suitable to *note hashlib.new(): 182b. and defaults to the
     ‘hashlib.md5’ constructor.

     Changed in version 3.4: Parameter `key' can be a bytes or bytearray
     object.  Parameter `msg' can be of any type supported by *note
     hashlib: 8c.  Parameter `digestmod' can be the name of a hash
     algorithm.

     Deprecated since version 3.4: MD5 as implicit default digest for
     `digestmod' is deprecated.

An HMAC object has the following methods:

 -- Method: HMAC.update (msg)

     Update the hmac object with `msg'.  Repeated calls are equivalent
     to a single call with the concatenation of all the arguments:
     ‘m.update(a); m.update(b)’ is equivalent to ‘m.update(a + b)’.

     Changed in version 3.4: Parameter `msg' can be of any type
     supported by *note hashlib: 8c.

 -- Method: HMAC.digest ()

     Return the digest of the bytes passed to the *note update(): 44a.
     method so far.  This bytes object will be the same length as the
     `digest_size' of the digest given to the constructor.  It may
     contain non-ASCII bytes, including NUL bytes.

          Warning: When comparing the output of *note digest(): 1837. to
          an externally-supplied digest during a verification routine,
          it is recommended to use the *note compare_digest(): 639.
          function instead of the ‘==’ operator to reduce the
          vulnerability to timing attacks.

 -- Method: HMAC.hexdigest ()

     Like *note digest(): 1837. except the digest is returned as a
     string twice the length containing only hexadecimal digits.  This
     may be used to exchange the value safely in email or other
     non-binary environments.

          Warning: When comparing the output of *note hexdigest(): 1838.
          to an externally-supplied digest during a verification
          routine, it is recommended to use the *note compare_digest():
          639. function instead of the ‘==’ operator to reduce the
          vulnerability to timing attacks.

 -- Method: HMAC.copy ()

     Return a copy ("clone") of the hmac object.  This can be used to
     efficiently compute the digests of strings that share a common
     initial substring.

A hash object has the following attributes:

 -- Attribute: HMAC.digest_size

     The size of the resulting HMAC digest in bytes.

 -- Attribute: HMAC.block_size

     The internal block size of the hash algorithm in bytes.

     New in version 3.4.

 -- Attribute: HMAC.name

     The canonical name of this HMAC, always lowercase, e.g.
     ‘hmac-md5’.

     New in version 3.4.

This module also provides the following helper function:

 -- Function: hmac.compare_digest (a, b)

     Return ‘a == b’.  This function uses an approach designed to
     prevent timing analysis by avoiding content-based short circuiting
     behaviour, making it appropriate for cryptography.  `a' and `b'
     must both be of the same type: either *note str: 25a. (ASCII only,
     as e.g.  returned by *note HMAC.hexdigest(): 1838.), or a *note
     bytes-like object: 36b.

          Note: If `a' and `b' are of different lengths, or if an error
          occurs, a timing attack could theoretically reveal information
          about the types and lengths of `a' and `b'–but not their
          values.

     New in version 3.3.

See also
........

Module *note hashlib: 8c.

     The Python module providing secure hash functions.

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/hmac.py

   (2) https://tools.ietf.org/html/rfc2104.html


File: python.info,  Node: secrets --- Generate secure random numbers for managing secrets,  Prev: hmac --- Keyed-Hashing for Message Authentication,  Up: Cryptographic Services

5.15.3 ‘secrets’ — Generate secure random numbers for managing secrets
----------------------------------------------------------------------

New in version 3.6.

`Source code:' Lib/secrets.py(1)

__________________________________________________________________

The *note secrets: e2. module is used for generating cryptographically
strong random numbers suitable for managing data such as passwords,
account authentication, security tokens, and related secrets.

In particularly, *note secrets: e2. should be used in preference to the
default pseudo-random number generator in the *note random: da. module,
which is designed for modelling and simulation, not security or
cryptography.

See also
........

PEP 506(2)

* Menu:

* Random numbers:: 
* Generating tokens:: 
* Other functions:: 
* Recipes and best practices:: 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/secrets.py

   (2) https://www.python.org/dev/peps/pep-0506


File: python.info,  Node: Random numbers,  Next: Generating tokens,  Up: secrets --- Generate secure random numbers for managing secrets

5.15.3.1 Random numbers
.......................

The *note secrets: e2. module provides access to the most secure source
of randomness that your operating system provides.

 -- Class: secrets.SystemRandom

     A class for generating random numbers using the highest-quality
     sources provided by the operating system.  See *note
     random.SystemRandom: 14a1. for additional details.

 -- Function: secrets.choice (sequence)

     Return a randomly-chosen element from a non-empty sequence.

 -- Function: secrets.randbelow (n)

     Return a random int in the range [0, `n').

 -- Function: secrets.randbits (k)

     Return an int with `k' random bits.


File: python.info,  Node: Generating tokens,  Next: Other functions,  Prev: Random numbers,  Up: secrets --- Generate secure random numbers for managing secrets

5.15.3.2 Generating tokens
..........................

The *note secrets: e2. module provides functions for generating secure
tokens, suitable for applications such as password resets, hard-to-guess
URLs, and similar.

 -- Function: secrets.token_bytes ([nbytes=None])

     Return a random byte string containing `nbytes' number of bytes.
     If `nbytes' is ‘None’ or not supplied, a reasonable default is
     used.

          >>> token_bytes(16)
          b'\xebr\x17D*t\xae\xd4\xe3S\xb6\xe2\xebP1\x8b'

 -- Function: secrets.token_hex ([nbytes=None])

     Return a random text string, in hexadecimal.  The string has
     `nbytes' random bytes, each byte converted to two hex digits.  If
     `nbytes' is ‘None’ or not supplied, a reasonable default is used.

          >>> token_hex(16)
          'f9bf78b9a18ce6d46a0cd2b0b86df9da'

 -- Function: secrets.token_urlsafe ([nbytes=None])

     Return a random URL-safe text string, containing `nbytes' random
     bytes.  The text is Base64 encoded, so on average each byte results
     in approximately 1.3 characters.  If `nbytes' is ‘None’ or not
     supplied, a reasonable default is used.

          >>> token_urlsafe(16)
          'Drmhze6EPcv0fN_81Bj-nA'

* Menu:

* How many bytes should tokens use?:: 


File: python.info,  Node: How many bytes should tokens use?,  Up: Generating tokens

5.15.3.3 How many bytes should tokens use?
..........................................

To be secure against brute-force attacks(1), tokens need to have
sufficient randomness.  Unfortunately, what is considered sufficient
will necessarily increase as computers get more powerful and able to
make more guesses in a shorter period.  As of 2015, it is believed that
32 bytes (256 bits) of randomness is sufficient for the typical use-case
expected for the *note secrets: e2. module.

For those who want to manage their own token length, you can explicitly
specify how much randomness is used for tokens by giving an *note int:
227. argument to the various ‘token_*’ functions.  That argument is
taken as the number of bytes of randomness to use.

Otherwise, if no argument is provided, or if the argument is ‘None’, the
‘token_*’ functions will use a reasonable default instead.

     Note: That default is subject to change at any time, including
     during maintenance releases.

   ---------- Footnotes ----------

   (1) https://en.wikipedia.org/wiki/Brute-force_attack


File: python.info,  Node: Other functions,  Next: Recipes and best practices,  Prev: Generating tokens,  Up: secrets --- Generate secure random numbers for managing secrets

5.15.3.4 Other functions
........................

 -- Function: secrets.compare_digest (a, b)

     Return ‘True’ if strings `a' and `b' are equal, otherwise ‘False’,
     in such a way as to reduce the risk of timing attacks(1).  See
     *note hmac.compare_digest(): 639. for additional details.

   ---------- Footnotes ----------

   (1) http://codahale.com/a-lesson-in-timing-attacks/


File: python.info,  Node: Recipes and best practices,  Prev: Other functions,  Up: secrets --- Generate secure random numbers for managing secrets

5.15.3.5 Recipes and best practices
...................................

This section shows recipes and best practices for using *note secrets:
e2. to manage a basic level of security.

Generate an eight-character alphanumeric password:

     import string
     alphabet = string.ascii_letters + string.digits
     password = ''.join(choice(alphabet) for i in range(8))

     Note: Applications should not store passwords in a recoverable
     format(1), whether plain text or encrypted.  They should be salted
     and hashed using a cryptographically-strong one-way (irreversible)
     hash function.

Generate a ten-character alphanumeric password with at least one
lowercase character, at least one uppercase character, and at least
three digits:

     import string
     alphabet = string.ascii_letters + string.digits
     while True:
         password = ''.join(choice(alphabet) for i in range(10))
         if (any(c.islower() for c in password)
                 and any(c.isupper() for c in password)
                 and sum(c.isdigit() for c in password) >= 3):
             break

Generate an XKCD-style passphrase(2):

     # On standard Linux systems, use a convenient dictionary file.
     # Other platforms may need to provide their own word-list.
     with open('/usr/share/dict/words') as f:
         words = [word.strip() for word in f]
         password = ' '.join(choice(words) for i in range(4))

Generate a hard-to-guess temporary URL containing a security token
suitable for password recovery applications:

     url = 'https://mydomain.com/reset=' + token_urlsafe()

   ---------- Footnotes ----------

   (1) http://cwe.mitre.org/data/definitions/257.html

   (2) http://xkcd.com/936/


File: python.info,  Node: Generic Operating System Services,  Next: Concurrent Execution,  Prev: Cryptographic Services,  Up: The Python Standard Library

5.16 Generic Operating System Services
======================================

The modules described in this chapter provide interfaces to operating
system features that are available on (almost) all operating systems,
such as files and a clock.  The interfaces are generally modeled after
the Unix or C interfaces, but they are available on most other systems
as well.  Here’s an overview:

* Menu:

* os: os --- Miscellaneous operating system interfaces. Miscellaneous operating system interfaces
* io: io --- Core tools for working with streams. Core tools for working with streams
* time: time --- Time access and conversions. Time access and conversions
* argparse: argparse --- Parser for command-line options arguments and sub-commands. Parser for command-line options, arguments and sub-
                        commands
* getopt: getopt --- C-style parser for command line options. C-style parser for command line options
* logging: logging --- Logging facility for Python. Logging facility for Python
* logging.config: logging config --- Logging configuration. Logging configuration
* logging.handlers: logging handlers --- Logging handlers. Logging handlers
* getpass: getpass --- Portable password input. Portable password input
* curses: curses --- Terminal handling for character-cell displays. Terminal handling for character-cell displays
* curses.textpad: curses textpad --- Text input widget for curses programs. Text input widget for curses programs
* curses.ascii: curses ascii --- Utilities for ASCII characters. Utilities for ASCII characters
* curses.panel: curses panel --- A panel stack extension for curses. A panel stack extension for curses
* platform: platform --- Access to underlying platform's identifying data. Access to underlying platform’s identifying data
* errno: errno --- Standard errno system symbols. Standard errno system symbols
* ctypes: ctypes --- A foreign function library for Python. A foreign function library for Python


File: python.info,  Node: os --- Miscellaneous operating system interfaces,  Next: io --- Core tools for working with streams,  Up: Generic Operating System Services

5.16.1 ‘os’ — Miscellaneous operating system interfaces
-------------------------------------------------------

This module provides a portable way of using operating system dependent
functionality.  If you just want to read or write a file see *note
open(): 1e8, if you want to manipulate paths, see the *note os.path: c3.
module, and if you want to read all the lines in all the files on the
command line see the *note fileinput: 7e. module.  For creating
temporary files and directories see the *note tempfile: 101. module, and
for high-level file and directory handling see the *note shutil: e7.
module.

Notes on the availability of these functions:

   * The design of all built-in operating system dependent modules of
     Python is such that as long as the same functionality is available,
     it uses the same interface; for example, the function
     ‘os.stat(path)’ returns stat information about `path' in the same
     format (which happens to have originated with the POSIX interface).

   * Extensions peculiar to a particular operating system are also
     available through the *note os: c2. module, but using them is of
     course a threat to portability.

   * All functions accepting path or file names accept both bytes and
     string objects, and result in an object of the same type, if a path
     or file name is returned.

   * An "Availability: Unix" note means that this function is commonly
     found on Unix systems.  It does not make any claims about its
     existence on a specific operating system.

   * If not separately noted, all functions that claim "Availability:
     Unix" are supported on Mac OS X, which builds on a Unix core.

     Note: All functions in this module raise *note OSError: 4b6. in the
     case of invalid or inaccessible file names and paths, or other
     arguments that have the correct type, but are not accepted by the
     operating system.

 -- Exception: os.error

     An alias for the built-in *note OSError: 4b6. exception.

 -- Data: os.name

     The name of the operating system dependent module imported.  The
     following names have currently been registered: ‘'posix'’, ‘'nt'’,
     ‘'ce'’, ‘'java'’.

     See also
     ........

     *note sys.platform: 1850. has a finer granularity.  *note
     os.uname(): 692. gives system-dependent version information.

     The *note platform: cc. module provides detailed checks for the
     system’s identity.

* Menu:

* File Names, Command Line Arguments, and Environment Variables: File Names Command Line Arguments and Environment Variables. 
* Process Parameters:: 
* File Object Creation:: 
* File Descriptor Operations:: 
* Files and Directories:: 
* Process Management:: 
* Interface to the scheduler:: 
* Miscellaneous System Information:: 
* Miscellaneous Functions:: 


File: python.info,  Node: File Names Command Line Arguments and Environment Variables,  Next: Process Parameters,  Up: os --- Miscellaneous operating system interfaces

5.16.1.1 File Names, Command Line Arguments, and Environment Variables
......................................................................

In Python, file names, command line arguments, and environment variables
are represented using the string type.  On some systems, decoding these
strings to and from bytes is necessary before passing them to the
operating system.  Python uses the file system encoding to perform this
conversion (see *note sys.getfilesystemencoding(): 1758.).

Changed in version 3.1: On some systems, conversion using the file
system encoding may fail.  In this case, Python uses the *note
surrogateescape encoding error handler: 11f9, which means that
undecodable bytes are replaced by a Unicode character U+DCxx on
decoding, and these are again translated to the original byte on
encoding.

The file system encoding must guarantee to successfully decode all bytes
below 128.  If the file system encoding fails to provide this guarantee,
API functions may raise UnicodeErrors.


File: python.info,  Node: Process Parameters,  Next: File Object Creation,  Prev: File Names Command Line Arguments and Environment Variables,  Up: os --- Miscellaneous operating system interfaces

5.16.1.2 Process Parameters
...........................

These functions and data items provide information and operate on the
current process and user.

 -- Function: os.ctermid ()

     Return the filename corresponding to the controlling terminal of
     the process.

     Availability: Unix.

 -- Data: os.environ

     A *note mapping: 77c. object representing the string environment.
     For example, ‘environ['HOME']’ is the pathname of your home
     directory (on some platforms), and is equivalent to
     ‘getenv("HOME")’ in C.

     This mapping is captured the first time the *note os: c2. module is
     imported, typically during Python startup as part of processing
     ‘site.py’.  Changes to the environment made after this time are not
     reflected in ‘os.environ’, except for changes made by modifying
     ‘os.environ’ directly.

     If the platform supports the *note putenv(): 1856. function, this
     mapping may be used to modify the environment as well as query the
     environment.  *note putenv(): 1856. will be called automatically
     when the mapping is modified.

     On Unix, keys and values use *note sys.getfilesystemencoding():
     1758. and ‘'surrogateescape'’ error handler.  Use *note environb:
     7ee. if you would like to use a different encoding.

          Note: Calling *note putenv(): 1856. directly does not change
          ‘os.environ’, so it’s better to modify ‘os.environ’.

          Note: On some platforms, including FreeBSD and Mac OS X,
          setting ‘environ’ may cause memory leaks.  Refer to the system
          documentation for ‘putenv()’.

     If *note putenv(): 1856. is not provided, a modified copy of this
     mapping may be passed to the appropriate process-creation functions
     to cause child processes to use a modified environment.

     If the platform supports the *note unsetenv(): 9b9. function, you
     can delete items in this mapping to unset environment variables.
     *note unsetenv(): 9b9. will be called automatically when an item is
     deleted from ‘os.environ’, and when one of the ‘pop()’ or ‘clear()’
     methods is called.

 -- Data: os.environb

     Bytes version of *note environ: 77a.: a *note mapping: 77c. object
     representing the environment as byte strings.  *note environ: 77a.
     and *note environb: 7ee. are synchronized (modify *note environb:
     7ee. updates *note environ: 77a, and vice versa).

     *note environb: 7ee. is only available if *note
     supports_bytes_environ: 7ec. is True.

     New in version 3.2.

 -- Function: os.chdir (path)

 -- Function: os.fchdir (fd)

 -- Function: os.getcwd ()

     These functions are described in *note Files and Directories: 1857.

 -- Function: os.fsencode (filename)

     Encode `filename' to the filesystem encoding with
     ‘'surrogateescape'’ error handler, or ‘'strict'’ on Windows; return
     *note bytes: 1db. unchanged.

     *note fsdecode(): 7eb. is the reverse function.

     New in version 3.2.

 -- Function: os.fsdecode (filename)

     Decode `filename' from the filesystem encoding with
     ‘'surrogateescape'’ error handler, or ‘'strict'’ on Windows; return
     *note str: 25a. unchanged.

     *note fsencode(): 7ea. is the reverse function.

     New in version 3.2.

 -- Function: os.getenv (key, default=None)

     Return the value of the environment variable `key' if it exists, or
     `default' if it doesn’t.  `key', `default' and the result are str.

     On Unix, keys and values are decoded with *note
     sys.getfilesystemencoding(): 1758. and ‘'surrogateescape'’ error
     handler.  Use *note os.getenvb(): 7ed. if you would like to use a
     different encoding.

     Availability: most flavors of Unix, Windows.

 -- Function: os.getenvb (key, default=None)

     Return the value of the environment variable `key' if it exists, or
     `default' if it doesn’t.  `key', `default' and the result are
     bytes.

     Availability: most flavors of Unix.

     New in version 3.2.

 -- Function: os.get_exec_path (env=None)

     Returns the list of directories that will be searched for a named
     executable, similar to a shell, when launching a process.  `env',
     when specified, should be an environment variable dictionary to
     lookup the PATH in.  By default, when `env' is None, *note environ:
     77a. is used.

     New in version 3.2.

 -- Function: os.getegid ()

     Return the effective group id of the current process.  This
     corresponds to the "set id" bit on the file being executed in the
     current process.

     Availability: Unix.

 -- Function: os.geteuid ()

     Return the current process’s effective user id.

     Availability: Unix.

 -- Function: os.getgid ()

     Return the real group id of the current process.

     Availability: Unix.

 -- Function: os.getgrouplist (user, group)

     Return list of group ids that `user' belongs to.  If `group' is not
     in the list, it is included; typically, `group' is specified as the
     group ID field from the password record for `user'.

     Availability: Unix.

     New in version 3.3.

 -- Function: os.getgroups ()

     Return list of supplemental group ids associated with the current
     process.

     Availability: Unix.

          Note: On Mac OS X, *note getgroups(): 185d. behavior differs
          somewhat from other Unix platforms.  If the Python interpreter
          was built with a deployment target of ‘10.5’ or earlier, *note
          getgroups(): 185d. returns the list of effective group ids
          associated with the current user process; this list is limited
          to a system-defined number of entries, typically 16, and may
          be modified by calls to *note setgroups(): 185e. if suitably
          privileged.  If built with a deployment target greater than
          ‘10.5’, *note getgroups(): 185d. returns the current group
          access list for the user associated with the effective user id
          of the process; the group access list may change over the
          lifetime of the process, it is not affected by calls to *note
          setgroups(): 185e, and its length is not limited to 16.  The
          deployment target value, ‘MACOSX_DEPLOYMENT_TARGET’, can be
          obtained with *note sysconfig.get_config_var(): 580.

 -- Function: os.getlogin ()

     Return the name of the user logged in on the controlling terminal
     of the process.  For most purposes, it is more useful to use the
     environment variables ‘LOGNAME’ or ‘USERNAME’ to find out who the
     user is, or ‘pwd.getpwuid(os.getuid())[0]’ to get the login name of
     the current real user id.

     Availability: Unix, Windows.

 -- Function: os.getpgid (pid)

     Return the process group id of the process with process id `pid'.
     If `pid' is 0, the process group id of the current process is
     returned.

     Availability: Unix.

 -- Function: os.getpgrp ()

     Return the id of the current process group.

     Availability: Unix.

 -- Function: os.getpid ()

     Return the current process id.

 -- Function: os.getppid ()

     Return the parent’s process id.  When the parent process has
     exited, on Unix the id returned is the one of the init process (1),
     on Windows it is still the same id, which may be already reused by
     another process.

     Availability: Unix, Windows.

     Changed in version 3.2: Added support for Windows.

 -- Function: os.getpriority (which, who)

     Get program scheduling priority.  The value `which' is one of *note
     PRIO_PROCESS: 1864, *note PRIO_PGRP: 1865, or *note PRIO_USER:
     1866, and `who' is interpreted relative to `which' (a process
     identifier for *note PRIO_PROCESS: 1864, process group identifier
     for *note PRIO_PGRP: 1865, and a user ID for *note PRIO_USER:
     1866.).  A zero value for `who' denotes (respectively) the calling
     process, the process group of the calling process, or the real user
     ID of the calling process.

     Availability: Unix.

     New in version 3.3.

 -- Data: os.PRIO_PROCESS
 -- Data: os.PRIO_PGRP
 -- Data: os.PRIO_USER

     Parameters for the *note getpriority(): 67b. and *note
     setpriority(): 67c. functions.

     Availability: Unix.

     New in version 3.3.

 -- Function: os.getresuid ()

     Return a tuple (ruid, euid, suid) denoting the current process’s
     real, effective, and saved user ids.

     Availability: Unix.

     New in version 3.2.

 -- Function: os.getresgid ()

     Return a tuple (rgid, egid, sgid) denoting the current process’s
     real, effective, and saved group ids.

     Availability: Unix.

     New in version 3.2.

 -- Function: os.getuid ()

     Return the current process’s real user id.

     Availability: Unix.

 -- Function: os.initgroups (username, gid)

     Call the system initgroups() to initialize the group access list
     with all of the groups of which the specified username is a member,
     plus the specified group id.

     Availability: Unix.

     New in version 3.2.

 -- Function: os.putenv (key, value)

     Set the environment variable named `key' to the string `value'.
     Such changes to the environment affect subprocesses started with
     *note os.system(): a3d, *note popen(): 7d7. or *note fork(): 57b.
     and *note execv(): 1868.

     Availability: most flavors of Unix, Windows.

          Note: On some platforms, including FreeBSD and Mac OS X,
          setting ‘environ’ may cause memory leaks.  Refer to the system
          documentation for putenv.

     When *note putenv(): 1856. is supported, assignments to items in
     ‘os.environ’ are automatically translated into corresponding calls
     to *note putenv(): 1856.; however, calls to *note putenv(): 1856.
     don’t update ‘os.environ’, so it is actually preferable to assign
     to items of ‘os.environ’.

 -- Function: os.setegid (egid)

     Set the current process’s effective group id.

     Availability: Unix.

 -- Function: os.seteuid (euid)

     Set the current process’s effective user id.

     Availability: Unix.

 -- Function: os.setgid (gid)

     Set the current process’ group id.

     Availability: Unix.

 -- Function: os.setgroups (groups)

     Set the list of supplemental group ids associated with the current
     process to `groups'.  `groups' must be a sequence, and each element
     must be an integer identifying a group.  This operation is
     typically available only to the superuser.

     Availability: Unix.

          Note: On Mac OS X, the length of `groups' may not exceed the
          system-defined maximum number of effective group ids,
          typically 16.  See the documentation for *note getgroups():
          185d. for cases where it may not return the same group list
          set by calling setgroups().

 -- Function: os.setpgrp ()

     Call the system call ‘setpgrp()’ or ‘setpgrp(0, 0)’ depending on
     which version is implemented (if any).  See the Unix manual for the
     semantics.

     Availability: Unix.

 -- Function: os.setpgid (pid, pgrp)

     Call the system call ‘setpgid()’ to set the process group id of the
     process with id `pid' to the process group with id `pgrp'.  See the
     Unix manual for the semantics.

     Availability: Unix.

 -- Function: os.setpriority (which, who, priority)

     Set program scheduling priority.  The value `which' is one of *note
     PRIO_PROCESS: 1864, *note PRIO_PGRP: 1865, or *note PRIO_USER:
     1866, and `who' is interpreted relative to `which' (a process
     identifier for *note PRIO_PROCESS: 1864, process group identifier
     for *note PRIO_PGRP: 1865, and a user ID for *note PRIO_USER:
     1866.).  A zero value for `who' denotes (respectively) the calling
     process, the process group of the calling process, or the real user
     ID of the calling process.  `priority' is a value in the range -20
     to 19.  The default priority is 0; lower priorities cause more
     favorable scheduling.

     Availability: Unix

     New in version 3.3.

 -- Function: os.setregid (rgid, egid)

     Set the current process’s real and effective group ids.

     Availability: Unix.

 -- Function: os.setresgid (rgid, egid, sgid)

     Set the current process’s real, effective, and saved group ids.

     Availability: Unix.

     New in version 3.2.

 -- Function: os.setresuid (ruid, euid, suid)

     Set the current process’s real, effective, and saved user ids.

     Availability: Unix.

     New in version 3.2.

 -- Function: os.setreuid (ruid, euid)

     Set the current process’s real and effective user ids.

     Availability: Unix.

 -- Function: os.getsid (pid)

     Call the system call ‘getsid()’.  See the Unix manual for the
     semantics.

     Availability: Unix.

 -- Function: os.setsid ()

     Call the system call ‘setsid()’.  See the Unix manual for the
     semantics.

     Availability: Unix.

 -- Function: os.setuid (uid)

     Set the current process’s user id.

     Availability: Unix.

 -- Function: os.strerror (code)

     Return the error message corresponding to the error code in `code'.
     On platforms where ‘strerror()’ returns ‘NULL’ when given an
     unknown error number, *note ValueError: 19c. is raised.

 -- Data: os.supports_bytes_environ

     ‘True’ if the native OS type of the environment is bytes (eg.
     ‘False’ on Windows).

     New in version 3.2.

 -- Function: os.umask (mask)

     Set the current numeric umask and return the previous umask.

 -- Function: os.uname ()

     Returns information identifying the current operating system.  The
     return value is an object with five attributes:

        * ‘sysname’ - operating system name

        * ‘nodename’ - name of machine on network
          (implementation-defined)

        * ‘release’ - operating system release

        * ‘version’ - operating system version

        * ‘machine’ - hardware identifier

     For backwards compatibility, this object is also iterable, behaving
     like a five-tuple containing ‘sysname’, ‘nodename’, ‘release’,
     ‘version’, and ‘machine’ in that order.

     Some systems truncate ‘nodename’ to 8 characters or to the leading
     component; a better way to get the hostname is *note
     socket.gethostname(): 1875. or even
     ‘socket.gethostbyaddr(socket.gethostname())’.

     Availability: recent flavors of Unix.

     Changed in version 3.3: Return type changed from a tuple to a
     tuple-like object with named attributes.

 -- Function: os.unsetenv (key)

     Unset (delete) the environment variable named `key'.  Such changes
     to the environment affect subprocesses started with *note
     os.system(): a3d, *note popen(): 7d7. or *note fork(): 57b. and
     *note execv(): 1868.

     When *note unsetenv(): 9b9. is supported, deletion of items in
     ‘os.environ’ is automatically translated into a corresponding call
     to *note unsetenv(): 9b9.; however, calls to *note unsetenv(): 9b9.
     don’t update ‘os.environ’, so it is actually preferable to delete
     items of ‘os.environ’.

     Availability: most flavors of Unix, Windows.


File: python.info,  Node: File Object Creation,  Next: File Descriptor Operations,  Prev: Process Parameters,  Up: os --- Miscellaneous operating system interfaces

5.16.1.3 File Object Creation
.............................

This function creates new *note file objects: 78b.  (See also *note
open(): 1f4. for opening file descriptors.)

 -- Function: os.fdopen (fd, *args, **kwargs)

     Return an open file object connected to the file descriptor `fd'.
     This is an alias of the *note open(): 1e8. built-in function and
     accepts the same arguments.  The only difference is that the first
     argument of *note fdopen(): df6. must always be an integer.


File: python.info,  Node: File Descriptor Operations,  Next: Files and Directories,  Prev: File Object Creation,  Up: os --- Miscellaneous operating system interfaces

5.16.1.4 File Descriptor Operations
...................................

These functions operate on I/O streams referenced using file
descriptors.

File descriptors are small integers corresponding to a file that has
been opened by the current process.  For example, standard input is
usually file descriptor 0, standard output is 1, and standard error is
2.  Further files opened by a process will then be assigned 3, 4, 5, and
so forth.  The name "file descriptor" is slightly deceptive; on Unix
platforms, sockets and pipes are also referenced by file descriptors.

The *note fileno(): 187a. method can be used to obtain the file
descriptor associated with a *note file object: 78b. when required.
Note that using the file descriptor directly will bypass the file object
methods, ignoring aspects such as internal buffering of data.

 -- Function: os.close (fd)

     Close file descriptor `fd'.

          Note: This function is intended for low-level I/O and must be
          applied to a file descriptor as returned by *note os.open():
          1f4. or *note pipe(): 187b.  To close a "file object" returned
          by the built-in function *note open(): 1e8. or by *note
          popen(): 7d7. or *note fdopen(): df6, use its *note close():
          187c. method.

 -- Function: os.closerange (fd_low, fd_high)

     Close all file descriptors from `fd_low' (inclusive) to `fd_high'
     (exclusive), ignoring errors.  Equivalent to (but much faster
     than):

          for fd in range(fd_low, fd_high):
              try:
                  os.close(fd)
              except OSError:
                  pass

 -- Function: os.device_encoding (fd)

     Return a string describing the encoding of the device associated
     with `fd' if it is connected to a terminal; else return *note None:
     19d.

 -- Function: os.dup (fd)

     Return a duplicate of file descriptor `fd'.  The new file
     descriptor is *note non-inheritable: 3ea.

     On Windows, when duplicating a standard stream (0: stdin, 1:
     stdout, 2: stderr), the new file descriptor is *note inheritable:
     3ea.

     Changed in version 3.4: The new file descriptor is now
     non-inheritable.

 -- Function: os.dup2 (fd, fd2, inheritable=True)

     Duplicate file descriptor `fd' to `fd2', closing the latter first
     if necessary.  The file descriptor `fd2' is *note inheritable: 3ea.
     by default, or non-inheritable if `inheritable' is ‘False’.

     Changed in version 3.4: Add the optional `inheritable' parameter.

 -- Function: os.fchmod (fd, mode)

     Change the mode of the file given by `fd' to the numeric `mode'.
     See the docs for *note chmod(): 665. for possible values of `mode'.
     As of Python 3.3, this is equivalent to ‘os.chmod(fd, mode)’.

     Availability: Unix.

 -- Function: os.fchown (fd, uid, gid)

     Change the owner and group id of the file given by `fd' to the
     numeric `uid' and `gid'.  To leave one of the ids unchanged, set it
     to -1.  See *note chown(): 666.  As of Python 3.3, this is
     equivalent to ‘os.chown(fd, uid, gid)’.

     Availability: Unix.

 -- Function: os.fdatasync (fd)

     Force write of file with filedescriptor `fd' to disk.  Does not
     force update of metadata.

     Availability: Unix.

          Note: This function is not available on MacOS.

 -- Function: os.fpathconf (fd, name)

     Return system configuration information relevant to an open file.
     `name' specifies the configuration value to retrieve; it may be a
     string which is the name of a defined system value; these names are
     specified in a number of standards (POSIX.1, Unix 95, Unix 98, and
     others).  Some platforms define additional names as well.  The
     names known to the host operating system are given in the
     ‘pathconf_names’ dictionary.  For configuration variables not
     included in that mapping, passing an integer for `name' is also
     accepted.

     If `name' is a string and is not known, *note ValueError: 19c. is
     raised.  If a specific value for `name' is not supported by the
     host system, even if it is included in ‘pathconf_names’, an *note
     OSError: 4b6. is raised with *note errno.EINVAL: 1881. for the
     error number.

     As of Python 3.3, this is equivalent to ‘os.pathconf(fd, name)’.

     Availability: Unix.

 -- Function: os.fstat (fd)

     Get the status of the file descriptor `fd'.  Return a *note
     stat_result: 1882. object.

     As of Python 3.3, this is equivalent to ‘os.stat(fd)’.

     See also
     ........

     The *note stat(): 1e2. function.

 -- Function: os.fstatvfs (fd)

     Return information about the filesystem containing the file
     associated with file descriptor `fd', like *note statvfs(): 678.
     As of Python 3.3, this is equivalent to ‘os.statvfs(fd)’.

     Availability: Unix.

 -- Function: os.fsync (fd)

     Force write of file with filedescriptor `fd' to disk.  On Unix,
     this calls the native ‘fsync()’ function; on Windows, the MS
     ‘_commit()’ function.

     If you’re starting with a buffered Python *note file object: 78b.
     `f', first do ‘f.flush()’, and then do ‘os.fsync(f.fileno())’, to
     ensure that all internal buffers associated with `f' are written to
     disk.

     Availability: Unix, Windows.

 -- Function: os.ftruncate (fd, length)

     Truncate the file corresponding to file descriptor `fd', so that it
     is at most `length' bytes in size.  As of Python 3.3, this is
     equivalent to ‘os.truncate(fd, length)’.

     Availability: Unix, Windows.

     Changed in version 3.5: Added support for Windows

 -- Function: os.get_blocking (fd)

     Get the blocking mode of the file descriptor: ‘False’ if the *note
     O_NONBLOCK: 2e2. flag is set, ‘True’ if the flag is cleared.

     See also *note set_blocking(): 2e1. and *note
     socket.socket.setblocking(): 1883.

     Availability: Unix.

     New in version 3.5.

 -- Function: os.isatty (fd)

     Return ‘True’ if the file descriptor `fd' is open and connected to
     a tty(-like) device, else ‘False’.

 -- Function: os.lockf (fd, cmd, len)

     Apply, test or remove a POSIX lock on an open file descriptor.
     `fd' is an open file descriptor.  `cmd' specifies the command to
     use - one of *note F_LOCK: 1885, *note F_TLOCK: 1886, *note
     F_ULOCK: 1887. or *note F_TEST: 1888.  `len' specifies the section
     of the file to lock.

     Availability: Unix.

     New in version 3.3.

 -- Data: os.F_LOCK
 -- Data: os.F_TLOCK
 -- Data: os.F_ULOCK
 -- Data: os.F_TEST

     Flags that specify what action *note lockf(): 68f. will take.

     Availability: Unix.

     New in version 3.3.

 -- Function: os.lseek (fd, pos, how)

     Set the current position of file descriptor `fd' to position `pos',
     modified by `how': *note SEEK_SET: a10. or ‘0’ to set the position
     relative to the beginning of the file; *note SEEK_CUR: a11. or ‘1’
     to set it relative to the current position; *note SEEK_END: a12. or
     ‘2’ to set it relative to the end of the file.  Return the new
     cursor position in bytes, starting from the beginning.

 -- Data: os.SEEK_SET
 -- Data: os.SEEK_CUR
 -- Data: os.SEEK_END

     Parameters to the *note lseek(): 693. function.  Their values are
     0, 1, and 2, respectively.

     New in version 3.3: Some operating systems could support additional
     values, like ‘os.SEEK_HOLE’ or ‘os.SEEK_DATA’.

 -- Function: os.open (path, flags, mode=0o777, *, dir_fd=None)

     Open the file `path' and set various flags according to `flags' and
     possibly its mode according to `mode'.  When computing `mode', the
     current umask value is first masked out.  Return the file
     descriptor for the newly opened file.  The new file descriptor is
     *note non-inheritable: 3ea.

     For a description of the flag and mode values, see the C run-time
     documentation; flag constants (like *note O_RDONLY: 1889. and *note
     O_WRONLY: 188a.) are defined in the *note os: c2. module.  In
     particular, on Windows adding *note O_BINARY: 188b. is needed to
     open files in binary mode.

     This function can support *note paths relative to directory
     descriptors: 661. with the `dir_fd' parameter.

     Changed in version 3.4: The new file descriptor is now
     non-inheritable.

          Note: This function is intended for low-level I/O. For normal
          usage, use the built-in function *note open(): 1e8, which
          returns a *note file object: 78b. with ‘read()’ and ‘write()’
          methods (and many more).  To wrap a file descriptor in a file
          object, use *note fdopen(): df6.

     New in version 3.3: The `dir_fd' argument.

     Changed in version 3.5: If the system call is interrupted and the
     signal handler does not raise an exception, the function now
     retries the system call instead of raising an *note
     InterruptedError: 1e7. exception (see PEP 475(1) for the
     rationale).

The following constants are options for the `flags' parameter to the
*note open(): 1f4. function.  They can be combined using the bitwise OR
operator ‘|’.  Some of them are not available on all platforms.  For
descriptions of their availability and use, consult the ‘open(2)’ manual
page on Unix or the MSDN(2) on Windows.

 -- Data: os.O_RDONLY
 -- Data: os.O_WRONLY
 -- Data: os.O_RDWR
 -- Data: os.O_APPEND
 -- Data: os.O_CREAT
 -- Data: os.O_EXCL
 -- Data: os.O_TRUNC

     These constants are available on Unix and Windows.

 -- Data: os.O_DSYNC
 -- Data: os.O_RSYNC
 -- Data: os.O_SYNC
 -- Data: os.O_NDELAY
 -- Data: os.O_NONBLOCK
 -- Data: os.O_NOCTTY
 -- Data: os.O_SHLOCK
 -- Data: os.O_EXLOCK
 -- Data: os.O_CLOEXEC

     These constants are only available on Unix.

     Changed in version 3.3: Add *note O_CLOEXEC: 5e5. constant.

 -- Data: os.O_BINARY
 -- Data: os.O_NOINHERIT
 -- Data: os.O_SHORT_LIVED
 -- Data: os.O_TEMPORARY
 -- Data: os.O_RANDOM
 -- Data: os.O_SEQUENTIAL
 -- Data: os.O_TEXT

     These constants are only available on Windows.

 -- Data: os.O_ASYNC
 -- Data: os.O_DIRECT
 -- Data: os.O_DIRECTORY
 -- Data: os.O_NOFOLLOW
 -- Data: os.O_NOATIME
 -- Data: os.O_PATH
 -- Data: os.O_TMPFILE

     These constants are GNU extensions and not present if they are not
     defined by the C library.

     Changed in version 3.4: Add *note O_PATH: 47d. on systems that
     support it.  Add *note O_TMPFILE: 47e, only available on Linux
     Kernel 3.11 or newer.

 -- Function: os.openpty ()

     Open a new pseudo-terminal pair.  Return a pair of file descriptors
     ‘(master, slave)’ for the pty and the tty, respectively.  The new
     file descriptors are *note non-inheritable: 3ea.  For a (slightly)
     more portable approach, use the *note pty: d3. module.

     Availability: some flavors of Unix.

     Changed in version 3.4: The new file descriptors are now
     non-inheritable.

 -- Function: os.pipe ()

     Create a pipe.  Return a pair of file descriptors ‘(r, w)’ usable
     for reading and writing, respectively.  The new file descriptor is
     *note non-inheritable: 3ea.

     Availability: Unix, Windows.

     Changed in version 3.4: The new file descriptors are now
     non-inheritable.

 -- Function: os.pipe2 (flags)

     Create a pipe with `flags' set atomically.  `flags' can be
     constructed by ORing together one or more of these values: *note
     O_NONBLOCK: 2e2, *note O_CLOEXEC: 5e5.  Return a pair of file
     descriptors ‘(r, w)’ usable for reading and writing, respectively.

     Availability: some flavors of Unix.

     New in version 3.3.

 -- Function: os.posix_fallocate (fd, offset, len)

     Ensures that enough disk space is allocated for the file specified
     by `fd' starting from `offset' and continuing for `len' bytes.

     Availability: Unix.

     New in version 3.3.

 -- Function: os.posix_fadvise (fd, offset, len, advice)

     Announces an intention to access data in a specific pattern thus
     allowing the kernel to make optimizations.  The advice applies to
     the region of the file specified by `fd' starting at `offset' and
     continuing for `len' bytes.  `advice' is one of *note
     POSIX_FADV_NORMAL: 18a1, *note POSIX_FADV_SEQUENTIAL: 18a2, *note
     POSIX_FADV_RANDOM: 18a3, *note POSIX_FADV_NOREUSE: 18a4, *note
     POSIX_FADV_WILLNEED: 18a5. or *note POSIX_FADV_DONTNEED: 18a6.

     Availability: Unix.

     New in version 3.3.

 -- Data: os.POSIX_FADV_NORMAL
 -- Data: os.POSIX_FADV_SEQUENTIAL
 -- Data: os.POSIX_FADV_RANDOM
 -- Data: os.POSIX_FADV_NOREUSE
 -- Data: os.POSIX_FADV_WILLNEED
 -- Data: os.POSIX_FADV_DONTNEED

     Flags that can be used in `advice' in *note posix_fadvise(): 1f5.
     that specify the access pattern that is likely to be used.

     Availability: Unix.

     New in version 3.3.

 -- Function: os.pread (fd, buffersize, offset)

     Read from a file descriptor, `fd', at a position of `offset'.  It
     will read up to `buffersize' number of bytes.  The file offset
     remains unchanged.

     Availability: Unix.

     New in version 3.3.

 -- Function: os.pwrite (fd, str, offset)

     Write `bytestring' to a file descriptor, `fd', from `offset',
     leaving the file offset unchanged.

     Availability: Unix.

     New in version 3.3.

 -- Function: os.read (fd, n)

     Read at most `n' bytes from file descriptor `fd'.  Return a
     bytestring containing the bytes read.  If the end of the file
     referred to by `fd' has been reached, an empty bytes object is
     returned.

          Note: This function is intended for low-level I/O and must be
          applied to a file descriptor as returned by *note os.open():
          1f4. or *note pipe(): 187b.  To read a "file object" returned
          by the built-in function *note open(): 1e8. or by *note
          popen(): 7d7. or *note fdopen(): df6, or *note sys.stdin: 1b9,
          use its ‘read()’ or ‘readline()’ methods.

     Changed in version 3.5: If the system call is interrupted and the
     signal handler does not raise an exception, the function now
     retries the system call instead of raising an *note
     InterruptedError: 1e7. exception (see PEP 475(3) for the
     rationale).

 -- Function: os.sendfile (out, in, offset, count)

 -- Function: os.sendfile (out, in, offset, count[, headers][,
          trailers], flags=0)

     Copy `count' bytes from file descriptor `in' to file descriptor
     `out' starting at `offset'.  Return the number of bytes sent.  When
     EOF is reached return 0.

     The first function notation is supported by all platforms that
     define *note sendfile(): 1fb.

     On Linux, if `offset' is given as ‘None’, the bytes are read from
     the current position of `in' and the position of `in' is updated.

     The second case may be used on Mac OS X and FreeBSD where `headers'
     and `trailers' are arbitrary sequences of buffers that are written
     before and after the data from `in' is written.  It returns the
     same as the first case.

     On Mac OS X and FreeBSD, a value of 0 for `count' specifies to send
     until the end of `in' is reached.

     All platforms support sockets as `out' file descriptor, and some
     platforms allow other types (e.g.  regular file, pipe) as well.

     Cross-platform applications should not use `headers', `trailers'
     and `flags' arguments.

     Availability: Unix.

          Note: For a higher-level wrapper of *note sendfile(): 1fb, see
          *note socket.socket.sendfile(): 315.

     New in version 3.3.

 -- Function: os.set_blocking (fd, blocking)

     Set the blocking mode of the specified file descriptor.  Set the
     *note O_NONBLOCK: 2e2. flag if blocking is ‘False’, clear the flag
     otherwise.

     See also *note get_blocking(): 2e0. and *note
     socket.socket.setblocking(): 1883.

     Availability: Unix.

     New in version 3.5.

 -- Data: os.SF_NODISKIO
 -- Data: os.SF_MNOWAIT
 -- Data: os.SF_SYNC

     Parameters to the *note sendfile(): 1fb. function, if the
     implementation supports them.

     Availability: Unix.

     New in version 3.3.

 -- Function: os.readv (fd, buffers)

     Read from a file descriptor `fd' into a number of mutable *note
     bytes-like objects: 36b. `buffers'.  *note readv(): 1fa. will
     transfer data into each buffer until it is full and then move on to
     the next buffer in the sequence to hold the rest of the data.
     *note readv(): 1fa. returns the total number of bytes read (which
     may be less than the total capacity of all the objects).

     Availability: Unix.

     New in version 3.3.

 -- Function: os.tcgetpgrp (fd)

     Return the process group associated with the terminal given by `fd'
     (an open file descriptor as returned by *note os.open(): 1f4.).

     Availability: Unix.

 -- Function: os.tcsetpgrp (fd, pg)

     Set the process group associated with the terminal given by `fd'
     (an open file descriptor as returned by *note os.open(): 1f4.) to
     `pg'.

     Availability: Unix.

 -- Function: os.ttyname (fd)

     Return a string which specifies the terminal device associated with
     file descriptor `fd'.  If `fd' is not associated with a terminal
     device, an exception is raised.

     Availability: Unix.

 -- Function: os.write (fd, str)

     Write the bytestring in `str' to file descriptor `fd'.  Return the
     number of bytes actually written.

          Note: This function is intended for low-level I/O and must be
          applied to a file descriptor as returned by *note os.open():
          1f4. or *note pipe(): 187b.  To write a "file object" returned
          by the built-in function *note open(): 1e8. or by *note
          popen(): 7d7. or *note fdopen(): df6, or *note sys.stdout:
          1ba. or *note sys.stderr: 270, use its ‘write()’ method.

     Changed in version 3.5: If the system call is interrupted and the
     signal handler does not raise an exception, the function now
     retries the system call instead of raising an *note
     InterruptedError: 1e7. exception (see PEP 475(4) for the
     rationale).

 -- Function: os.writev (fd, buffers)

     Write the contents of `buffers' to file descriptor `fd'.  `buffers'
     must be a sequence of *note bytes-like objects: 36b.  *note
     writev(): 202. writes the contents of each object to the file
     descriptor and returns the total number of bytes written.

     Availability: Unix.

     New in version 3.3.

* Menu:

* Querying the size of a terminal:: 
* Inheritance of File Descriptors:: 

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0475

   (2) https://msdn.microsoft.com/en-us/library/z0kc8e3z.aspx

   (3) https://www.python.org/dev/peps/pep-0475

   (4) https://www.python.org/dev/peps/pep-0475


File: python.info,  Node: Querying the size of a terminal,  Next: Inheritance of File Descriptors,  Up: File Descriptor Operations

5.16.1.5 Querying the size of a terminal
........................................

New in version 3.3.

 -- Function: os.get_terminal_size (fd=STDOUT_FILENO)

     Return the size of the terminal window as ‘(columns, lines)’, tuple
     of type *note terminal_size: 1641.

     The optional argument ‘fd’ (default ‘STDOUT_FILENO’, or standard
     output) specifies which file descriptor should be queried.

     If the file descriptor is not connected to a terminal, an *note
     OSError: 4b6. is raised.

     *note shutil.get_terminal_size(): 67f. is the high-level function
     which should normally be used, ‘os.get_terminal_size’ is the
     low-level implementation.

     Availability: Unix, Windows.

 -- Class: os.terminal_size

     A subclass of tuple, holding ‘(columns, lines)’ of the terminal
     window size.

      -- Attribute: columns

          Width of the terminal window in characters.

      -- Attribute: lines

          Height of the terminal window in characters.


File: python.info,  Node: Inheritance of File Descriptors,  Prev: Querying the size of a terminal,  Up: File Descriptor Operations

5.16.1.6 Inheritance of File Descriptors
........................................

New in version 3.4.

A file descriptor has an "inheritable" flag which indicates if the file
descriptor can be inherited by child processes.  Since Python 3.4, file
descriptors created by Python are non-inheritable by default.

On UNIX, non-inheritable file descriptors are closed in child processes
at the execution of a new program, other file descriptors are inherited.

On Windows, non-inheritable handles and file descriptors are closed in
child processes, except for standard streams (file descriptors 0, 1 and
2: stdin, stdout and stderr), which are always inherited.  Using *note
spawn*: 18b2. functions, all inheritable handles and all inheritable
file descriptors are inherited.  Using the *note subprocess: f7. module,
all file descriptors except standard streams are closed, and inheritable
handles are only inherited if the `close_fds' parameter is ‘False’.

 -- Function: os.get_inheritable (fd)

     Get the "inheritable" flag of the specified file descriptor (a
     boolean).

 -- Function: os.set_inheritable (fd, inheritable)

     Set the "inheritable" flag of the specified file descriptor.

 -- Function: os.get_handle_inheritable (handle)

     Get the "inheritable" flag of the specified handle (a boolean).

     Availability: Windows.

 -- Function: os.set_handle_inheritable (handle, inheritable)

     Set the "inheritable" flag of the specified handle.

     Availability: Windows.


File: python.info,  Node: Files and Directories,  Next: Process Management,  Prev: File Descriptor Operations,  Up: os --- Miscellaneous operating system interfaces

5.16.1.7 Files and Directories
..............................

On some Unix platforms, many of these functions support one or more of
these features:

   * `specifying a file descriptor:' For some functions, the `path'
     argument can be not only a string giving a path name, but also a
     file descriptor.  The function will then operate on the file
     referred to by the descriptor.  (For POSIX systems, Python will
     call the ‘f...’ version of the function.)

     You can check whether or not `path' can be specified as a file
     descriptor on your platform using *note os.supports_fd: 679.  If it
     is unavailable, using it will raise a *note NotImplementedError:
     569.

     If the function also supports `dir_fd' or `follow_symlinks'
     arguments, it is an error to specify one of those when supplying
     `path' as a file descriptor.

   * `paths relative to directory descriptors:' If `dir_fd' is not
     ‘None’, it should be a file descriptor referring to a directory,
     and the path to operate on should be relative; path will then be
     relative to that directory.  If the path is absolute, `dir_fd' is
     ignored.  (For POSIX systems, Python will call the ‘...at’ or
     ‘f...at’ version of the function.)

     You can check whether or not `dir_fd' is supported on your platform
     using *note os.supports_dir_fd: 672.  If it is unavailable, using
     it will raise a *note NotImplementedError: 569.

   * `not following symlinks:' If `follow_symlinks' is ‘False’, and the
     last element of the path to operate on is a symbolic link, the
     function will operate on the symbolic link itself instead of the
     file the link points to.  (For POSIX systems, Python will call the
     ‘l...’ version of the function.)

     You can check whether or not `follow_symlinks' is supported on your
     platform using *note os.supports_follow_symlinks: 162d.  If it is
     unavailable, using it will raise a *note NotImplementedError: 569.

 -- Function: os.access (path, mode, *, dir_fd=None,
          effective_ids=False, follow_symlinks=True)

     Use the real uid/gid to test for access to `path'.  Note that most
     operations will use the effective uid/gid, therefore this routine
     can be used in a suid/sgid environment to test if the invoking user
     has the specified access to `path'.  `mode' should be *note F_OK:
     18b5. to test the existence of `path', or it can be the inclusive
     OR of one or more of *note R_OK: 18b6, *note W_OK: 18b7, and *note
     X_OK: 18b8. to test permissions.  Return *note True: 9ff. if access
     is allowed, *note False: 60d. if not.  See the Unix man page
     ‘access(2)’ for more information.

     This function can support specifying *note paths relative to
     directory descriptors: 661. and *note not following symlinks: 662.

     If `effective_ids' is ‘True’, *note access(): 663. will perform its
     access checks using the effective uid/gid instead of the real
     uid/gid.  `effective_ids' may not be supported on your platform;
     you can check whether or not it is available using *note
     os.supports_effective_ids: 67a.  If it is unavailable, using it
     will raise a *note NotImplementedError: 569.

          Note: Using *note access(): 663. to check if a user is
          authorized to e.g.  open a file before actually doing so using
          *note open(): 1e8. creates a security hole, because the user
          might exploit the short time interval between checking and
          opening the file to manipulate it.  It’s preferable to use
          *note EAFP: 18b9. techniques.  For example:

               if os.access("myfile", os.R_OK):
                   with open("myfile") as fp:
                       return fp.read()
               return "some default data"

          is better written as:

               try:
                   fp = open("myfile")
               except PermissionError:
                   return "some default data"
               else:
                   with fp:
                       return fp.read()

          Note: I/O operations may fail even when *note access(): 663.
          indicates that they would succeed, particularly for operations
          on network filesystems which may have permissions semantics
          beyond the usual POSIX permission-bit model.

     Changed in version 3.3: Added the `dir_fd', `effective_ids', and
     `follow_symlinks' parameters.

 -- Data: os.F_OK
 -- Data: os.R_OK
 -- Data: os.W_OK
 -- Data: os.X_OK

     Values to pass as the `mode' parameter of *note access(): 663. to
     test the existence, readability, writability and executability of
     `path', respectively.

 -- Function: os.chdir (path)

     Change the current working directory to `path'.

     This function can support *note specifying a file descriptor: 18b4.
     The descriptor must refer to an opened directory, not an open file.

     New in version 3.3: Added support for specifying `path' as a file
     descriptor on some platforms.

 -- Function: os.chflags (path, flags, *, follow_symlinks=True)

     Set the flags of `path' to the numeric `flags'.  `flags' may take a
     combination (bitwise OR) of the following values (as defined in the
     *note stat: f2. module):

        * *note stat.UF_NODUMP: 15d5.

        * *note stat.UF_IMMUTABLE: 15d6.

        * *note stat.UF_APPEND: 15d7.

        * *note stat.UF_OPAQUE: 15d8.

        * *note stat.UF_NOUNLINK: 15d9.

        * *note stat.UF_COMPRESSED: 15da.

        * *note stat.UF_HIDDEN: 15db.

        * *note stat.SF_ARCHIVED: 15dc.

        * *note stat.SF_IMMUTABLE: 15dd.

        * *note stat.SF_APPEND: 15de.

        * *note stat.SF_NOUNLINK: 15df.

        * *note stat.SF_SNAPSHOT: 15e0.

     This function can support *note not following symlinks: 662.

     Availability: Unix.

     New in version 3.3: The `follow_symlinks' argument.

 -- Function: os.chmod (path, mode, *, dir_fd=None,
          follow_symlinks=True)

     Change the mode of `path' to the numeric `mode'.  `mode' may take
     one of the following values (as defined in the *note stat: f2.
     module) or bitwise ORed combinations of them:

        * *note stat.S_ISUID: 15c2.

        * *note stat.S_ISGID: 15c3.

        * *note stat.S_ENFMT: 15c5.

        * *note stat.S_ISVTX: 15c6.

        * *note stat.S_IREAD: 15d2.

        * *note stat.S_IWRITE: 15d3.

        * *note stat.S_IEXEC: 15d4.

        * *note stat.S_IRWXU: 15c7.

        * *note stat.S_IRUSR: 15c8.

        * *note stat.S_IWUSR: 15c9.

        * *note stat.S_IXUSR: 15ca.

        * *note stat.S_IRWXG: 15cb.

        * *note stat.S_IRGRP: 15cc.

        * *note stat.S_IWGRP: 15cd.

        * *note stat.S_IXGRP: 15c4.

        * *note stat.S_IRWXO: 15ce.

        * *note stat.S_IROTH: 15cf.

        * *note stat.S_IWOTH: 15d0.

        * *note stat.S_IXOTH: 15d1.

     This function can support *note specifying a file descriptor: 18b4,
     *note paths relative to directory descriptors: 661. and *note not
     following symlinks: 662.

          Note: Although Windows supports *note chmod(): 665, you can
          only set the file’s read-only flag with it (via the
          ‘stat.S_IWRITE’ and ‘stat.S_IREAD’ constants or a
          corresponding integer value).  All other bits are ignored.

     New in version 3.3: Added support for specifying `path' as an open
     file descriptor, and the `dir_fd' and `follow_symlinks' arguments.

 -- Function: os.chown (path, uid, gid, *, dir_fd=None,
          follow_symlinks=True)

     Change the owner and group id of `path' to the numeric `uid' and
     `gid'.  To leave one of the ids unchanged, set it to -1.

     This function can support *note specifying a file descriptor: 18b4,
     *note paths relative to directory descriptors: 661. and *note not
     following symlinks: 662.

     See *note shutil.chown(): 6ad. for a higher-level function that
     accepts names in addition to numeric ids.

     Availability: Unix.

     New in version 3.3: Added support for specifying an open file
     descriptor for `path', and the `dir_fd' and `follow_symlinks'
     arguments.

 -- Function: os.chroot (path)

     Change the root directory of the current process to `path'.

     Availability: Unix.

 -- Function: os.fchdir (fd)

     Change the current working directory to the directory represented
     by the file descriptor `fd'.  The descriptor must refer to an
     opened directory, not an open file.  As of Python 3.3, this is
     equivalent to ‘os.chdir(fd)’.

     Availability: Unix.

 -- Function: os.getcwd ()

     Return a string representing the current working directory.

 -- Function: os.getcwdb ()

     Return a bytestring representing the current working directory.

 -- Function: os.lchflags (path, flags)

     Set the flags of `path' to the numeric `flags', like *note
     chflags(): 664, but do not follow symbolic links.  As of Python
     3.3, this is equivalent to ‘os.chflags(path, flags,
     follow_symlinks=False)’.

     Availability: Unix.

 -- Function: os.lchmod (path, mode)

     Change the mode of `path' to the numeric `mode'.  If path is a
     symlink, this affects the symlink rather than the target.  See the
     docs for *note chmod(): 665. for possible values of `mode'.  As of
     Python 3.3, this is equivalent to ‘os.chmod(path, mode,
     follow_symlinks=False)’.

     Availability: Unix.

 -- Function: os.lchown (path, uid, gid)

     Change the owner and group id of `path' to the numeric `uid' and
     `gid'.  This function will not follow symbolic links.  As of Python
     3.3, this is equivalent to ‘os.chown(path, uid, gid,
     follow_symlinks=False)’.

     Availability: Unix.

 -- Function: os.link (src, dst, *, src_dir_fd=None, dst_dir_fd=None,
          follow_symlinks=True)

     Create a hard link pointing to `src' named `dst'.

     This function can support specifying `src_dir_fd' and/or
     `dst_dir_fd' to supply *note paths relative to directory
     descriptors: 661, and *note not following symlinks: 662.

     Availability: Unix, Windows.

     Changed in version 3.2: Added Windows support.

     New in version 3.3: Added the `src_dir_fd', `dst_dir_fd', and
     `follow_symlinks' arguments.

 -- Function: os.listdir (path='.')

     Return a list containing the names of the entries in the directory
     given by `path'.  The list is in arbitrary order, and does not
     include the special entries ‘'.'’ and ‘'..'’ even if they are
     present in the directory.

     `path' may be either of type ‘str’ or of type ‘bytes’.  If `path'
     is of type ‘bytes’, the filenames returned will also be of type
     ‘bytes’; in all other circumstances, they will be of type ‘str’.

     This function can also support *note specifying a file descriptor:
     18b4.; the file descriptor must refer to a directory.

          Note: To encode ‘str’ filenames to ‘bytes’, use *note
          fsencode(): 7ea.

     See also
     ........

     The *note scandir(): 164. function returns directory entries along
     with file attribute information, giving better performance for many
     common use cases.

     Changed in version 3.2: The `path' parameter became optional.

     New in version 3.3: Added support for specifying an open file
     descriptor for `path'.

 -- Function: os.lstat (path, *, dir_fd=None)

     Perform the equivalent of an ‘lstat()’ system call on the given
     path.  Similar to *note stat(): 1e2, but does not follow symbolic
     links.  Return a *note stat_result: 1882. object.

     On platforms that do not support symbolic links, this is an alias
     for *note stat(): 1e2.

     As of Python 3.3, this is equivalent to ‘os.stat(path,
     dir_fd=dir_fd, follow_symlinks=False)’.

     This function can also support *note paths relative to directory
     descriptors: 661.

     See also
     ........

     The *note stat(): 1e2. function.

     Changed in version 3.2: Added support for Windows 6.0 (Vista)
     symbolic links.

     Changed in version 3.3: Added the `dir_fd' parameter.

 -- Function: os.mkdir (path, mode=0o777, *, dir_fd=None)

     Create a directory named `path' with numeric mode `mode'.

     On some systems, `mode' is ignored.  Where it is used, the current
     umask value is first masked out.  If the directory already exists,
     *note FileExistsError: 56f. is raised.

     This function can also support *note paths relative to directory
     descriptors: 661.

     It is also possible to create temporary directories; see the *note
     tempfile: 101. module’s *note tempfile.mkdtemp(): 160d. function.

     New in version 3.3: The `dir_fd' argument.

 -- Function: os.makedirs (name, mode=0o777, exist_ok=False)

     Recursive directory creation function.  Like *note mkdir(): 669,
     but makes all intermediate-level directories needed to contain the
     leaf directory.

     The default `mode' is ‘0o777’ (octal).  On some systems, `mode' is
     ignored.  Where it is used, the current umask value is first masked
     out.

     If `exist_ok' is ‘False’ (the default), an *note OSError: 4b6. is
     raised if the target directory already exists.

          Note: *note makedirs(): 2ea. will become confused if the path
          elements to create include *note pardir: 18be. (eg.  ".."  on
          UNIX systems).

     This function handles UNC paths correctly.

     New in version 3.2: The `exist_ok' parameter.

     Changed in version 3.4.1: Before Python 3.4.1, if `exist_ok' was
     ‘True’ and the directory existed, *note makedirs(): 2ea. would
     still raise an error if `mode' did not match the mode of the
     existing directory.  Since this behavior was impossible to
     implement safely, it was removed in Python 3.4.1.  See issue
     21082(1).

 -- Function: os.mkfifo (path, mode=0o666, *, dir_fd=None)

     Create a FIFO (a named pipe) named `path' with numeric mode `mode'.
     The current umask value is first masked out from the mode.

     This function can also support *note paths relative to directory
     descriptors: 661.

     FIFOs are pipes that can be accessed like regular files.  FIFOs
     exist until they are deleted (for example with *note os.unlink():
     670.).  Generally, FIFOs are used as rendezvous between "client"
     and "server" type processes: the server opens the FIFO for reading,
     and the client opens it for writing.  Note that *note mkfifo():
     1f2. doesn’t open the FIFO — it just creates the rendezvous point.

     Availability: Unix.

     New in version 3.3: The `dir_fd' argument.

 -- Function: os.mknod (path, mode=0o600, device=0, *, dir_fd=None)

     Create a filesystem node (file, device special file or named pipe)
     named `path'.  `mode' specifies both the permissions to use and the
     type of node to be created, being combined (bitwise OR) with one of
     ‘stat.S_IFREG’, ‘stat.S_IFCHR’, ‘stat.S_IFBLK’, and ‘stat.S_IFIFO’
     (those constants are available in *note stat: f2.).  For
     ‘stat.S_IFCHR’ and ‘stat.S_IFBLK’, `device' defines the newly
     created device special file (probably using *note os.makedev():
     18bf.), otherwise it is ignored.

     This function can also support *note paths relative to directory
     descriptors: 661.

     New in version 3.3: The `dir_fd' argument.

 -- Function: os.major (device)

     Extract the device major number from a raw device number (usually
     the ‘st_dev’ or ‘st_rdev’ field from ‘stat’).

 -- Function: os.minor (device)

     Extract the device minor number from a raw device number (usually
     the ‘st_dev’ or ‘st_rdev’ field from ‘stat’).

 -- Function: os.makedev (major, minor)

     Compose a raw device number from the major and minor device
     numbers.

 -- Function: os.pathconf (path, name)

     Return system configuration information relevant to a named file.
     `name' specifies the configuration value to retrieve; it may be a
     string which is the name of a defined system value; these names are
     specified in a number of standards (POSIX.1, Unix 95, Unix 98, and
     others).  Some platforms define additional names as well.  The
     names known to the host operating system are given in the
     ‘pathconf_names’ dictionary.  For configuration variables not
     included in that mapping, passing an integer for `name' is also
     accepted.

     If `name' is a string and is not known, *note ValueError: 19c. is
     raised.  If a specific value for `name' is not supported by the
     host system, even if it is included in ‘pathconf_names’, an *note
     OSError: 4b6. is raised with *note errno.EINVAL: 1881. for the
     error number.

     This function can support *note specifying a file descriptor: 18b4.

     Availability: Unix.

 -- Data: os.pathconf_names

     Dictionary mapping names accepted by *note pathconf(): 676. and
     *note fpathconf(): 1880. to the integer values defined for those
     names by the host operating system.  This can be used to determine
     the set of names known to the system.

     Availability: Unix.

 -- Function: os.readlink (path, *, dir_fd=None)

     Return a string representing the path to which the symbolic link
     points.  The result may be either an absolute or relative pathname;
     if it is relative, it may be converted to an absolute pathname
     using ‘os.path.join(os.path.dirname(path), result)’.

     If the `path' is a string object, the result will also be a string
     object, and the call may raise a UnicodeDecodeError.  If the `path'
     is a bytes object, the result will be a bytes object.

     This function can also support *note paths relative to directory
     descriptors: 661.

     Availability: Unix, Windows

     Changed in version 3.2: Added support for Windows 6.0 (Vista)
     symbolic links.

     New in version 3.3: The `dir_fd' argument.

 -- Function: os.remove (path, *, dir_fd=None)

     Remove (delete) the file `path'.  If `path' is a directory, *note
     OSError: 4b6. is raised.  Use *note rmdir(): 66e. to remove
     directories.

     This function can support *note paths relative to directory
     descriptors: 661.

     On Windows, attempting to remove a file that is in use causes an
     exception to be raised; on Unix, the directory entry is removed but
     the storage allocated to the file is not made available until the
     original file is no longer in use.

     This function is semantically identical to *note unlink(): 670.

     New in version 3.3: The `dir_fd' argument.

 -- Function: os.removedirs (name)

     Remove directories recursively.  Works like *note rmdir(): 66e.
     except that, if the leaf directory is successfully removed, *note
     removedirs(): 18c3. tries to successively remove every parent
     directory mentioned in `path' until an error is raised (which is
     ignored, because it generally means that a parent directory is not
     empty).  For example, ‘os.removedirs('foo/bar/baz')’ will first
     remove the directory ‘'foo/bar/baz'’, and then remove ‘'foo/bar'’
     and ‘'foo'’ if they are empty.  Raises *note OSError: 4b6. if the
     leaf directory could not be successfully removed.

 -- Function: os.rename (src, dst, *, src_dir_fd=None, dst_dir_fd=None)

     Rename the file or directory `src' to `dst'.  If `dst' is a
     directory, *note OSError: 4b6. will be raised.  On Unix, if `dst'
     exists and is a file, it will be replaced silently if the user has
     permission.  The operation may fail on some Unix flavors if `src'
     and `dst' are on different filesystems.  If successful, the
     renaming will be an atomic operation (this is a POSIX requirement).
     On Windows, if `dst' already exists, *note OSError: 4b6. will be
     raised even if it is a file.

     This function can support specifying `src_dir_fd' and/or
     `dst_dir_fd' to supply *note paths relative to directory
     descriptors: 661.

     If you want cross-platform overwriting of the destination, use
     *note replace(): 66d.

     New in version 3.3: The `src_dir_fd' and `dst_dir_fd' arguments.

 -- Function: os.renames (old, new)

     Recursive directory or file renaming function.  Works like *note
     rename(): 66c, except creation of any intermediate directories
     needed to make the new pathname good is attempted first.  After the
     rename, directories corresponding to rightmost path segments of the
     old name will be pruned away using *note removedirs(): 18c3.

          Note: This function can fail with the new directory structure
          made if you lack permissions needed to remove the leaf
          directory or file.

 -- Function: os.replace (src, dst, *, src_dir_fd=None, dst_dir_fd=None)

     Rename the file or directory `src' to `dst'.  If `dst' is a
     directory, *note OSError: 4b6. will be raised.  If `dst' exists and
     is a file, it will be replaced silently if the user has permission.
     The operation may fail if `src' and `dst' are on different
     filesystems.  If successful, the renaming will be an atomic
     operation (this is a POSIX requirement).

     This function can support specifying `src_dir_fd' and/or
     `dst_dir_fd' to supply *note paths relative to directory
     descriptors: 661.

     New in version 3.3.

 -- Function: os.rmdir (path, *, dir_fd=None)

     Remove (delete) the directory `path'.  Only works when the
     directory is empty, otherwise, *note OSError: 4b6. is raised.  In
     order to remove whole directory trees, *note shutil.rmtree(): 6af.
     can be used.

     This function can support *note paths relative to directory
     descriptors: 661.

     New in version 3.3: The `dir_fd' parameter.

 -- Function: os.scandir (path='.')

     Return an iterator of *note DirEntry: 2dd. objects corresponding to
     the entries in the directory given by `path'.  The entries are
     yielded in arbitrary order, and the special entries ‘'.'’ and
     ‘'..'’ are not included.

     Using *note scandir(): 164. instead of *note listdir(): 675. can
     significantly increase the performance of code that also needs file
     type or file attribute information, because *note DirEntry: 2dd.
     objects expose this information if the operating system provides it
     when scanning a directory.  All *note DirEntry: 2dd. methods may
     perform a system call, but *note is_dir(): 18c5. and *note
     is_file(): 1e3. usually only require a system call for symbolic
     links; *note DirEntry.stat(): 18c6. always requires a system call
     on Unix but only requires one for symbolic links on Windows.

     On Unix, `path' can be of type *note str: 25a. or *note bytes: 1db.
     (use *note fsencode(): 7ea. and *note fsdecode(): 7eb. to encode
     and decode *note bytes: 1db. paths).  On Windows, `path' must be of
     type *note str: 25a.  On both sytems, the type of the *note name:
     18c7. and *note path: 18c8. attributes of each *note DirEntry: 2dd.
     will be of the same type as `path'.

     The *note scandir(): 164. iterator supports the *note context
     manager: 165. protocol and has the following method:

      -- Method: scandir.close ()

          Close the iterator and free acquired resources.

          This is called automatically when the iterator is exhausted or
          garbage collected, or when an error happens during iterating.
          However it is advisable to call it explicitly or use the *note
          with: 29d. statement.

          New in version 3.6.

     The following example shows a simple use of *note scandir(): 164.
     to display all the files (excluding directories) in the given
     `path' that don’t start with ‘'.'’.  The ‘entry.is_file()’ call
     will generally not make an additional system call:

          with os.scandir(path) as it:
              for entry in it:
                  if not entry.name.startswith('.') and entry.is_file():
                      print(entry.name)

          Note: On Unix-based systems, *note scandir(): 164. uses the
          system’s opendir()(2) and readdir()(3) functions.  On Windows,
          it uses the Win32 FindFirstFileW(4) and FindNextFileW(5)
          functions.

     New in version 3.5.

     New in version 3.6: Added support for the *note context manager:
     165. protocol and the *note close(): 163. method.  If a *note
     scandir(): 164. iterator is neither exhausted nor explicitly closed
     a *note ResourceWarning: 166. will be emitted in its destructor.

 -- Class: os.DirEntry

     Object yielded by *note scandir(): 164. to expose the file path and
     other file attributes of a directory entry.

     *note scandir(): 164. will provide as much of this information as
     possible without making additional system calls.  When a ‘stat()’
     or ‘lstat()’ system call is made, the ‘DirEntry’ object will cache
     the result.

     ‘DirEntry’ instances are not intended to be stored in long-lived
     data structures; if you know the file metadata has changed or if a
     long time has elapsed since calling *note scandir(): 164, call
     ‘os.stat(entry.path)’ to fetch up-to-date information.

     Because the ‘DirEntry’ methods can make operating system calls,
     they may also raise *note OSError: 4b6.  If you need very
     fine-grained control over errors, you can catch *note OSError: 4b6.
     when calling one of the ‘DirEntry’ methods and handle as
     appropriate.

     Attributes and methods on a ‘DirEntry’ instance are as follows:

      -- Attribute: name

          The entry’s base filename, relative to the *note scandir():
          164. `path' argument.

          The *note name: 184f. attribute will be of the same type
          (‘str’ or ‘bytes’) as the *note scandir(): 164. `path'
          argument.  Use *note fsdecode(): 7eb. to decode byte
          filenames.

      -- Attribute: path

          The entry’s full path name: equivalent to
          ‘os.path.join(scandir_path, entry.name)’ where `scandir_path'
          is the *note scandir(): 164. `path' argument.  The path is
          only absolute if the *note scandir(): 164. `path' argument was
          absolute.

          The *note path: c3. attribute will be of the same type (‘str’
          or ‘bytes’) as the *note scandir(): 164. `path' argument.  Use
          *note fsdecode(): 7eb. to decode byte filenames.

      -- Method: inode ()

          Return the inode number of the entry.

          The result is cached on the ‘DirEntry’ object.  Use
          ‘os.stat(entry.path, follow_symlinks=False).st_ino’ to fetch
          up-to-date information.

          On the first, uncached call, a system call is required on
          Windows but not on Unix.

      -- Method: is_dir (*, follow_symlinks=True)

          Return ‘True’ if this entry is a directory or a symbolic link
          pointing to a directory; return ‘False’ if the entry is or
          points to any other kind of file, or if it doesn’t exist
          anymore.

          If `follow_symlinks' is ‘False’, return ‘True’ only if this
          entry is a directory (without following symlinks); return
          ‘False’ if the entry is any other kind of file or if it
          doesn’t exist anymore.

          The result is cached on the ‘DirEntry’ object, with a separate
          cache for `follow_symlinks' ‘True’ and ‘False’.  Call *note
          os.stat(): 1e2. along with *note stat.S_ISDIR(): 15a6. to
          fetch up-to-date information.

          On the first, uncached call, no system call is required in
          most cases.  Specifically, for non-symlinks, neither Windows
          or Unix require a system call, except on certain Unix file
          systems, such as network file systems, that return
          ‘dirent.d_type == DT_UNKNOWN’.  If the entry is a symlink, a
          system call will be required to follow the symlink unless
          `follow_symlinks' is ‘False’.

          This method can raise *note OSError: 4b6, such as *note
          PermissionError: 1a6, but *note FileNotFoundError: 3aa. is
          caught and not raised.

      -- Method: is_file (*, follow_symlinks=True)

          Return ‘True’ if this entry is a file or a symbolic link
          pointing to a file; return ‘False’ if the entry is or points
          to a directory or other non-file entry, or if it doesn’t exist
          anymore.

          If `follow_symlinks' is ‘False’, return ‘True’ only if this
          entry is a file (without following symlinks); return ‘False’
          if the entry is a directory or other non-file entry, or if it
          doesn’t exist anymore.

          The result is cached on the ‘DirEntry’ object.  Caching,
          system calls made, and exceptions raised are as per *note
          is_dir(): 18c5.

      -- Method: is_symlink ()

          Return ‘True’ if this entry is a symbolic link (even if
          broken); return ‘False’ if the entry points to a directory or
          any kind of file, or if it doesn’t exist anymore.

          The result is cached on the ‘DirEntry’ object.  Call *note
          os.path.islink(): 158e. to fetch up-to-date information.

          On the first, uncached call, no system call is required in
          most cases.  Specifically, neither Windows or Unix require a
          system call, except on certain Unix file systems, such as
          network file systems, that return ‘dirent.d_type ==
          DT_UNKNOWN’.

          This method can raise *note OSError: 4b6, such as *note
          PermissionError: 1a6, but *note FileNotFoundError: 3aa. is
          caught and not raised.

      -- Method: stat (*, follow_symlinks=True)

          Return a *note stat_result: 1882. object for this entry.  This
          method follows symbolic links by default; to stat a symbolic
          link add the ‘follow_symlinks=False’ argument.

          On Unix, this method always requires a system call.  On
          Windows, it only requires a system call if `follow_symlinks'
          is ‘True’ and the entry is a symbolic link.

          On Windows, the ‘st_ino’, ‘st_dev’ and ‘st_nlink’ attributes
          of the *note stat_result: 1882. are always set to zero.  Call
          *note os.stat(): 1e2. to get these attributes.

          The result is cached on the ‘DirEntry’ object, with a separate
          cache for `follow_symlinks' ‘True’ and ‘False’.  Call *note
          os.stat(): 1e2. to fetch up-to-date information.

     Note that there is a nice correspondence between several attributes
     and methods of ‘DirEntry’ and of *note pathlib.Path: 2e8.  In
     particular, the ‘name’ and ‘path’ attributes have the same meaning,
     as do the ‘is_dir()’, ‘is_file()’, ‘is_symlink()’ and ‘stat()’
     methods.

     New in version 3.5.

 -- Function: os.stat (path, *, dir_fd=None, follow_symlinks=True)

     Get the status of a file or a file descriptor.  Perform the
     equivalent of a ‘stat()’ system call on the given path.  `path' may
     be specified as either a string or as an open file descriptor.
     Return a *note stat_result: 1882. object.

     This function normally follows symlinks; to stat a symlink add the
     argument ‘follow_symlinks=False’, or use *note lstat(): 668.

     This function can support *note specifying a file descriptor: 18b4.
     and *note not following symlinks: 662.

     Example:

          >>> import os
          >>> statinfo = os.stat('somefile.txt')
          >>> statinfo
          os.stat_result(st_mode=33188, st_ino=7876932, st_dev=234881026,
          st_nlink=1, st_uid=501, st_gid=501, st_size=264, st_atime=1297230295,
          st_mtime=1297230027, st_ctime=1297230027)
          >>> statinfo.st_size
          264

     See also
     ........

     *note fstat(): 1ee. and *note lstat(): 668. functions.

     New in version 3.3: Added the `dir_fd' and `follow_symlinks'
     arguments, specifying a file descriptor instead of a path.

 -- Class: os.stat_result

     Object whose attributes correspond roughly to the members of the
     ‘stat’ structure.  It is used for the result of *note os.stat():
     1e2, *note os.fstat(): 1ee. and *note os.lstat(): 668.

     Attributes:

      -- Attribute: st_mode

          File mode: file type and file mode bits (permissions).

      -- Attribute: st_ino

          Inode number.

      -- Attribute: st_dev

          Identifier of the device on which this file resides.

      -- Attribute: st_nlink

          Number of hard links.

      -- Attribute: st_uid

          User identifier of the file owner.

      -- Attribute: st_gid

          Group identifier of the file owner.

      -- Attribute: st_size

          Size of the file in bytes, if it is a regular file or a
          symbolic link.  The size of a symbolic link is the length of
          the pathname it contains, without a terminating null byte.

     Timestamps:

      -- Attribute: st_atime

          Time of most recent access expressed in seconds.

      -- Attribute: st_mtime

          Time of most recent content modification expressed in seconds.

      -- Attribute: st_ctime

          Platform dependent:

             * the time of most recent metadata change on Unix,

             * the time of creation on Windows, expressed in seconds.

      -- Attribute: st_atime_ns

          Time of most recent access expressed in nanoseconds as an
          integer.

      -- Attribute: st_mtime_ns

          Time of most recent content modification expressed in
          nanoseconds as an integer.

      -- Attribute: st_ctime_ns

          Platform dependent:

             * the time of most recent metadata change on Unix,

             * the time of creation on Windows, expressed in nanoseconds
               as an integer.

     See also the *note stat_float_times(): 72b. function.

          Note: The exact meaning and resolution of the *note st_atime:
          18d2, *note st_mtime: 16f6, and *note st_ctime: 18d3.
          attributes depend on the operating system and the file system.
          For example, on Windows systems using the FAT or FAT32 file
          systems, *note st_mtime: 16f6. has 2-second resolution, and
          *note st_atime: 18d2. has only 1-day resolution.  See your
          operating system documentation for details.

          Similarly, although *note st_atime_ns: 18d4, *note
          st_mtime_ns: 18d5, and *note st_ctime_ns: 18d6. are always
          expressed in nanoseconds, many systems do not provide
          nanosecond precision.  On systems that do provide nanosecond
          precision, the floating-point object used to store *note
          st_atime: 18d2, *note st_mtime: 16f6, and *note st_ctime:
          18d3. cannot preserve all of it, and as such will be slightly
          inexact.  If you need the exact timestamps you should always
          use *note st_atime_ns: 18d4, *note st_mtime_ns: 18d5, and
          *note st_ctime_ns: 18d6.

     On some Unix systems (such as Linux), the following attributes may
     also be available:

      -- Attribute: st_blocks

          Number of 512-byte blocks allocated for file.  This may be
          smaller than *note st_size: 18d1./512 when the file has holes.

      -- Attribute: st_blksize

          "Preferred" blocksize for efficient file system I/O. Writing
          to a file in smaller chunks may cause an inefficient
          read-modify-rewrite.

      -- Attribute: st_rdev

          Type of device if an inode device.

      -- Attribute: st_flags

          User defined flags for file.

     On other Unix systems (such as FreeBSD), the following attributes
     may be available (but may be only filled out if root tries to use
     them):

      -- Attribute: st_gen

          File generation number.

      -- Attribute: st_birthtime

          Time of file creation.

     On Mac OS systems, the following attributes may also be available:

      -- Attribute: st_rsize

          Real size of the file.

      -- Attribute: st_creator

          Creator of the file.

      -- Attribute: st_type

          File type.

     On Windows systems, the following attribute is also available:

      -- Attribute: st_file_attributes

          Windows file attributes: ‘dwFileAttributes’ member of the
          ‘BY_HANDLE_FILE_INFORMATION’ structure returned by
          ‘GetFileInformationByHandle()’.  See the ‘FILE_ATTRIBUTE_*’
          constants in the *note stat: f2. module.

     The standard module *note stat: f2. defines functions and constants
     that are useful for extracting information from a ‘stat’ structure.
     (On Windows, some items are filled with dummy values.)

     For backward compatibility, a *note stat_result: 1882. instance is
     also accessible as a tuple of at least 10 integers giving the most
     important (and portable) members of the ‘stat’ structure, in the
     order *note st_mode: 18cb, *note st_ino: 18cc, *note st_dev: 18cd,
     *note st_nlink: 18ce, *note st_uid: 18cf, *note st_gid: 18d0, *note
     st_size: 18d1, *note st_atime: 18d2, *note st_mtime: 16f6, *note
     st_ctime: 18d3.  More items may be added at the end by some
     implementations.  For compatibility with older Python versions,
     accessing *note stat_result: 1882. as a tuple always returns
     integers.

     New in version 3.3: Added the *note st_atime_ns: 18d4, *note
     st_mtime_ns: 18d5, and *note st_ctime_ns: 18d6. members.

     New in version 3.5: Added the *note st_file_attributes: 2de. member
     on Windows.

 -- Function: os.stat_float_times ([newvalue])

     Determine whether *note stat_result: 1882. represents time stamps
     as float objects.  If `newvalue' is ‘True’, future calls to *note
     stat(): 1e2. return floats, if it is ‘False’, future calls return
     ints.  If `newvalue' is omitted, return the current setting.

     For compatibility with older Python versions, accessing *note
     stat_result: 1882. as a tuple always returns integers.

     Python now returns float values by default.  Applications which do
     not work correctly with floating point time stamps can use this
     function to restore the old behaviour.

     The resolution of the timestamps (that is the smallest possible
     fraction) depends on the system.  Some systems only support second
     resolution; on these systems, the fraction will always be zero.

     It is recommended that this setting is only changed at program
     startup time in the `__main__' module; libraries should never
     change this setting.  If an application uses a library that works
     incorrectly if floating point time stamps are processed, this
     application should turn the feature off until the library has been
     corrected.

     Deprecated since version 3.3.

 -- Function: os.statvfs (path)

     Perform a ‘statvfs()’ system call on the given path.  The return
     value is an object whose attributes describe the filesystem on the
     given path, and correspond to the members of the ‘statvfs’
     structure, namely: ‘f_bsize’, ‘f_frsize’, ‘f_blocks’, ‘f_bfree’,
     ‘f_bavail’, ‘f_files’, ‘f_ffree’, ‘f_favail’, ‘f_flag’,
     ‘f_namemax’.

     Two module-level constants are defined for the ‘f_flag’ attribute’s
     bit-flags: if ‘ST_RDONLY’ is set, the filesystem is mounted
     read-only, and if ‘ST_NOSUID’ is set, the semantics of
     setuid/setgid bits are disabled or not supported.

     Additional module-level constants are defined for GNU/glibc based
     systems.  These are ‘ST_NODEV’ (disallow access to device special
     files), ‘ST_NOEXEC’ (disallow program execution), ‘ST_SYNCHRONOUS’
     (writes are synced at once), ‘ST_MANDLOCK’ (allow mandatory locks
     on an FS), ‘ST_WRITE’ (write on file/directory/symlink),
     ‘ST_APPEND’ (append-only file), ‘ST_IMMUTABLE’ (immutable file),
     ‘ST_NOATIME’ (do not update access times), ‘ST_NODIRATIME’ (do not
     update directory access times), ‘ST_RELATIME’ (update atime
     relative to mtime/ctime).

     This function can support *note specifying a file descriptor: 18b4.

     Changed in version 3.2: The ‘ST_RDONLY’ and ‘ST_NOSUID’ constants
     were added.

     Changed in version 3.4: The ‘ST_NODEV’, ‘ST_NOEXEC’,
     ‘ST_SYNCHRONOUS’, ‘ST_MANDLOCK’, ‘ST_WRITE’, ‘ST_APPEND’,
     ‘ST_IMMUTABLE’, ‘ST_NOATIME’, ‘ST_NODIRATIME’, and ‘ST_RELATIME’
     constants were added.

     Availability: Unix.

     New in version 3.3: Added support for specifying an open file
     descriptor for `path'.

 -- Data: os.supports_dir_fd

     A *note Set: 108e. object indicating which functions in the *note
     os: c2. module permit use of their `dir_fd' parameter.  Different
     platforms provide different functionality, and an option that might
     work on one might be unsupported on another.  For consistency’s
     sakes, functions that support `dir_fd' always allow specifying the
     parameter, but will raise an exception if the functionality is not
     actually available.

     To check whether a particular function permits use of its `dir_fd'
     parameter, use the ‘in’ operator on ‘supports_dir_fd’.  As an
     example, this expression determines whether the `dir_fd' parameter
     of *note os.stat(): 1e2. is locally available:

          os.stat in os.supports_dir_fd

     Currently `dir_fd' parameters only work on Unix platforms; none of
     them work on Windows.

     New in version 3.3.

 -- Data: os.supports_effective_ids

     A *note Set: 108e. object indicating which functions in the *note
     os: c2. module permit use of the `effective_ids' parameter for
     *note os.access(): 663.  If the local platform supports it, the
     collection will contain *note os.access(): 663, otherwise it will
     be empty.

     To check whether you can use the `effective_ids' parameter for
     *note os.access(): 663, use the ‘in’ operator on
     ‘supports_effective_ids’, like so:

          os.access in os.supports_effective_ids

     Currently `effective_ids' only works on Unix platforms; it does not
     work on Windows.

     New in version 3.3.

 -- Data: os.supports_fd

     A *note Set: 108e. object indicating which functions in the *note
     os: c2. module permit specifying their `path' parameter as an open
     file descriptor.  Different platforms provide different
     functionality, and an option that might work on one might be
     unsupported on another.  For consistency’s sakes, functions that
     support `fd' always allow specifying the parameter, but will raise
     an exception if the functionality is not actually available.

     To check whether a particular function permits specifying an open
     file descriptor for its `path' parameter, use the ‘in’ operator on
     ‘supports_fd’.  As an example, this expression determines whether
     *note os.chdir(): 673. accepts open file descriptors when called on
     your local platform:

          os.chdir in os.supports_fd

     New in version 3.3.

 -- Data: os.supports_follow_symlinks

     A *note Set: 108e. object indicating which functions in the *note
     os: c2. module permit use of their `follow_symlinks' parameter.
     Different platforms provide different functionality, and an option
     that might work on one might be unsupported on another.  For
     consistency’s sakes, functions that support `follow_symlinks'
     always allow specifying the parameter, but will raise an exception
     if the functionality is not actually available.

     To check whether a particular function permits use of its
     `follow_symlinks' parameter, use the ‘in’ operator on
     ‘supports_follow_symlinks’.  As an example, this expression
     determines whether the `follow_symlinks' parameter of *note
     os.stat(): 1e2. is locally available:

          os.stat in os.supports_follow_symlinks

     New in version 3.3.

 -- Function: os.symlink (src, dst, target_is_directory=False, *,
          dir_fd=None)

     Create a symbolic link pointing to `src' named `dst'.

     On Windows, a symlink represents either a file or a directory, and
     does not morph to the target dynamically.  If the target is
     present, the type of the symlink will be created to match.
     Otherwise, the symlink will be created as a directory if
     `target_is_directory' is ‘True’ or a file symlink (the default)
     otherwise.  On non-Window platforms, `target_is_directory' is
     ignored.

     Symbolic link support was introduced in Windows 6.0 (Vista).  *note
     symlink(): 66f. will raise a *note NotImplementedError: 569. on
     Windows versions earlier than 6.0.

     This function can support *note paths relative to directory
     descriptors: 661.

          Note: On Windows, the `SeCreateSymbolicLinkPrivilege' is
          required in order to successfully create symlinks.  This
          privilege is not typically granted to regular users but is
          available to accounts which can escalate privileges to the
          administrator level.  Either obtaining the privilege or
          running your application as an administrator are ways to
          successfully create symlinks.

          *note OSError: 4b6. is raised when the function is called by
          an unprivileged user.

     Availability: Unix, Windows.

     Changed in version 3.2: Added support for Windows 6.0 (Vista)
     symbolic links.

     New in version 3.3: Added the `dir_fd' argument, and now allow
     `target_is_directory' on non-Windows platforms.

 -- Function: os.sync ()

     Force write of everything to disk.

     Availability: Unix.

     New in version 3.3.

 -- Function: os.truncate (path, length)

     Truncate the file corresponding to `path', so that it is at most
     `length' bytes in size.

     This function can support *note specifying a file descriptor: 18b4.

     Availability: Unix, Windows.

     New in version 3.3.

     Changed in version 3.5: Added support for Windows

 -- Function: os.unlink (path, *, dir_fd=None)

     Remove (delete) the file `path'.  This function is semantically
     identical to *note remove(): 66b.; the ‘unlink’ name is its
     traditional Unix name.  Please see the documentation for *note
     remove(): 66b. for further information.

     New in version 3.3: The `dir_fd' parameter.

 -- Function: os.utime (path, times=None, *[, ns], dir_fd=None,
          follow_symlinks=True)

     Set the access and modified times of the file specified by `path'.

     *note utime(): 671. takes two optional parameters, `times' and
     `ns'.  These specify the times set on `path' and are used as
     follows:

        - If `ns' is specified, it must be a 2-tuple of the form
          ‘(atime_ns, mtime_ns)’ where each member is an int expressing
          nanoseconds.

        - If `times' is not ‘None’, it must be a 2-tuple of the form
          ‘(atime, mtime)’ where each member is an int or float
          expressing seconds.

        - If `times' is ‘None’ and `ns' is unspecified, this is
          equivalent to specifying ‘ns=(atime_ns, mtime_ns)’ where both
          times are the current time.

     It is an error to specify tuples for both `times' and `ns'.

     Whether a directory can be given for `path' depends on whether the
     operating system implements directories as files (for example,
     Windows does not).  Note that the exact times you set here may not
     be returned by a subsequent *note stat(): 1e2. call, depending on
     the resolution with which your operating system records access and
     modification times; see *note stat(): 1e2.  The best way to
     preserve exact times is to use the `st_atime_ns' and `st_mtime_ns'
     fields from the *note os.stat(): 1e2. result object with the `ns'
     parameter to ‘utime’.

     This function can support *note specifying a file descriptor: 18b4,
     *note paths relative to directory descriptors: 661. and *note not
     following symlinks: 662.

     New in version 3.3: Added support for specifying an open file
     descriptor for `path', and the `dir_fd', `follow_symlinks', and
     `ns' parameters.

 -- Function: os.walk (top, topdown=True, onerror=None,
          followlinks=False)

     Generate the file names in a directory tree by walking the tree
     either top-down or bottom-up.  For each directory in the tree
     rooted at directory `top' (including `top' itself), it yields a
     3-tuple ‘(dirpath, dirnames, filenames)’.

     `dirpath' is a string, the path to the directory.  `dirnames' is a
     list of the names of the subdirectories in `dirpath' (excluding
     ‘'.'’ and ‘'..'’).  `filenames' is a list of the names of the
     non-directory files in `dirpath'.  Note that the names in the lists
     contain no path components.  To get a full path (which begins with
     `top') to a file or directory in `dirpath', do
     ‘os.path.join(dirpath, name)’.

     If optional argument `topdown' is ‘True’ or not specified, the
     triple for a directory is generated before the triples for any of
     its subdirectories (directories are generated top-down).  If
     `topdown' is ‘False’, the triple for a directory is generated after
     the triples for all of its subdirectories (directories are
     generated bottom-up).  No matter the value of `topdown', the list
     of subdirectories is retrieved before the tuples for the directory
     and its subdirectories are generated.

     When `topdown' is ‘True’, the caller can modify the `dirnames' list
     in-place (perhaps using *note del: c30. or slice assignment), and
     *note walk(): 1e1. will only recurse into the subdirectories whose
     names remain in `dirnames'; this can be used to prune the search,
     impose a specific order of visiting, or even to inform *note
     walk(): 1e1. about directories the caller creates or renames before
     it resumes *note walk(): 1e1. again.  Modifying `dirnames' when
     `topdown' is ‘False’ has no effect on the behavior of the walk,
     because in bottom-up mode the directories in `dirnames' are
     generated before `dirpath' itself is generated.

     By default, errors from the *note listdir(): 675. call are ignored.
     If optional argument `onerror' is specified, it should be a
     function; it will be called with one argument, an *note OSError:
     4b6. instance.  It can report the error to continue with the walk,
     or raise the exception to abort the walk.  Note that the filename
     is available as the ‘filename’ attribute of the exception object.

     By default, *note walk(): 1e1. will not walk down into symbolic
     links that resolve to directories.  Set `followlinks' to ‘True’ to
     visit directories pointed to by symlinks, on systems that support
     them.

          Note: Be aware that setting `followlinks' to ‘True’ can lead
          to infinite recursion if a link points to a parent directory
          of itself.  *note walk(): 1e1. does not keep track of the
          directories it visited already.

          Note: If you pass a relative pathname, don’t change the
          current working directory between resumptions of *note walk():
          1e1.  *note walk(): 1e1. never changes the current directory,
          and assumes that its caller doesn’t either.

     This example displays the number of bytes taken by non-directory
     files in each directory under the starting directory, except that
     it doesn’t look under any CVS subdirectory:

          import os
          from os.path import join, getsize
          for root, dirs, files in os.walk('python/Lib/email'):
              print(root, "consumes", end=" ")
              print(sum(getsize(join(root, name)) for name in files), end=" ")
              print("bytes in", len(files), "non-directory files")
              if 'CVS' in dirs:
                  dirs.remove('CVS')  # don't visit CVS directories

     In the next example (simple implementation of *note
     shutil.rmtree(): 6af.), walking the tree bottom-up is essential,
     *note rmdir(): 66e. doesn’t allow deleting a directory before the
     directory is empty:

          # Delete everything reachable from the directory named in "top",
          # assuming there are no symbolic links.
          # CAUTION:  This is dangerous!  For example, if top == '/', it
          # could delete all your disk files.
          import os
          for root, dirs, files in os.walk(top, topdown=False):
              for name in files:
                  os.remove(os.path.join(root, name))
              for name in dirs:
                  os.rmdir(os.path.join(root, name))

     Changed in version 3.5: This function now calls *note os.scandir():
     164. instead of *note os.listdir(): 675, making it faster by
     reducing the number of calls to *note os.stat(): 1e2.

 -- Function: os.fwalk (top='.', topdown=True, onerror=None, *,
          follow_symlinks=False, dir_fd=None)

     This behaves exactly like *note walk(): 1e1, except that it yields
     a 4-tuple ‘(dirpath, dirnames, filenames, dirfd)’, and it supports
     ‘dir_fd’.

     `dirpath', `dirnames' and `filenames' are identical to *note
     walk(): 1e1. output, and `dirfd' is a file descriptor referring to
     the directory `dirpath'.

     This function always supports *note paths relative to directory
     descriptors: 661. and *note not following symlinks: 662.  Note
     however that, unlike other functions, the *note fwalk(): 660.
     default value for `follow_symlinks' is ‘False’.

          Note: Since *note fwalk(): 660. yields file descriptors, those
          are only valid until the next iteration step, so you should
          duplicate them (e.g.  with *note dup(): 187f.) if you want to
          keep them longer.

     This example displays the number of bytes taken by non-directory
     files in each directory under the starting directory, except that
     it doesn’t look under any CVS subdirectory:

          import os
          for root, dirs, files, rootfd in os.fwalk('python/Lib/email'):
              print(root, "consumes", end="")
              print(sum([os.stat(name, dir_fd=rootfd).st_size for name in files]),
                    end="")
              print("bytes in", len(files), "non-directory files")
              if 'CVS' in dirs:
                  dirs.remove('CVS')  # don't visit CVS directories

     In the next example, walking the tree bottom-up is essential: *note
     rmdir(): 66e. doesn’t allow deleting a directory before the
     directory is empty:

          # Delete everything reachable from the directory named in "top",
          # assuming there are no symbolic links.
          # CAUTION:  This is dangerous!  For example, if top == '/', it
          # could delete all your disk files.
          import os
          for root, dirs, files, rootfd in os.fwalk(top, topdown=False):
              for name in files:
                  os.unlink(name, dir_fd=rootfd)
              for name in dirs:
                  os.rmdir(name, dir_fd=rootfd)

     Availability: Unix.

     New in version 3.3.

* Menu:

* Linux extended attributes:: 

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue21082

   (2) 
http://pubs.opengroup.org/onlinepubs/009695399/functions/opendir.html

   (3) 
http://pubs.opengroup.org/onlinepubs/009695399/functions/readdir_r.html

   (4) 
https://msdn.microsoft.com/en-us/library/windows/desktop/aa364418(v=vs.85).aspx

   (5) 
https://msdn.microsoft.com/en-us/library/windows/desktop/aa364428(v=vs.85).aspx


File: python.info,  Node: Linux extended attributes,  Up: Files and Directories

5.16.1.8 Linux extended attributes
..................................

New in version 3.3.

These functions are all available on Linux only.

 -- Function: os.getxattr (path, attribute, *, follow_symlinks=True)

     Return the value of the extended filesystem attribute `attribute'
     for `path'.  `attribute' can be bytes or str.  If it is str, it is
     encoded with the filesystem encoding.

     This function can support *note specifying a file descriptor: 18b4.
     and *note not following symlinks: 662.

 -- Function: os.listxattr (path=None, *, follow_symlinks=True)

     Return a list of the extended filesystem attributes on `path'.  The
     attributes in the list are represented as strings decoded with the
     filesystem encoding.  If `path' is ‘None’, *note listxattr(): 681.
     will examine the current directory.

     This function can support *note specifying a file descriptor: 18b4.
     and *note not following symlinks: 662.

 -- Function: os.removexattr (path, attribute, *, follow_symlinks=True)

     Removes the extended filesystem attribute `attribute' from `path'.
     `attribute' should be bytes or str.  If it is a string, it is
     encoded with the filesystem encoding.

     This function can support *note specifying a file descriptor: 18b4.
     and *note not following symlinks: 662.

 -- Function: os.setxattr (path, attribute, value, flags=0, *,
          follow_symlinks=True)

     Set the extended filesystem attribute `attribute' on `path' to
     `value'.  `attribute' must be a bytes or str with no embedded NULs.
     If it is a str, it is encoded with the filesystem encoding.
     `flags' may be *note XATTR_REPLACE: 18e1. or *note XATTR_CREATE:
     18e2.  If *note XATTR_REPLACE: 18e1. is given and the attribute
     does not exist, ‘EEXISTS’ will be raised.  If *note XATTR_CREATE:
     18e2. is given and the attribute already exists, the attribute will
     not be created and ‘ENODATA’ will be raised.

     This function can support *note specifying a file descriptor: 18b4.
     and *note not following symlinks: 662.

          Note: A bug in Linux kernel versions less than 2.6.39 caused
          the flags argument to be ignored on some filesystems.

 -- Data: os.XATTR_SIZE_MAX

     The maximum size the value of an extended attribute can be.
     Currently, this is 64 KiB on Linux.

 -- Data: os.XATTR_CREATE

     This is a possible value for the flags argument in *note
     setxattr(): 683.  It indicates the operation must create an
     attribute.

 -- Data: os.XATTR_REPLACE

     This is a possible value for the flags argument in *note
     setxattr(): 683.  It indicates the operation must replace an
     existing attribute.


File: python.info,  Node: Process Management,  Next: Interface to the scheduler,  Prev: Files and Directories,  Up: os --- Miscellaneous operating system interfaces

5.16.1.9 Process Management
...........................

These functions may be used to create and manage processes.

The various *note exec*: 18e6. functions take a list of arguments for
the new program loaded into the process.  In each case, the first of
these arguments is passed to the new program as its own name rather than
as an argument a user may have typed on a command line.  For the C
programmer, this is the ‘argv[0]’ passed to a program’s ‘main()’.  For
example, ‘os.execv('/bin/echo', ['foo', 'bar'])’ will only print ‘bar’
on standard output; ‘foo’ will seem to be ignored.

 -- Function: os.abort ()

     Generate a ‘SIGABRT’ signal to the current process.  On Unix, the
     default behavior is to produce a core dump; on Windows, the process
     immediately returns an exit code of ‘3’.  Be aware that calling
     this function will not call the Python signal handler registered
     for ‘SIGABRT’ with *note signal.signal(): 6b5.

 -- Function: os.execl (path, arg0, arg1, ...)
 -- Function: os.execle (path, arg0, arg1, ..., env)
 -- Function: os.execlp (file, arg0, arg1, ...)
 -- Function: os.execlpe (file, arg0, arg1, ..., env)
 -- Function: os.execv (path, args)
 -- Function: os.execve (path, args, env)
 -- Function: os.execvp (file, args)
 -- Function: os.execvpe (file, args, env)

     These functions all execute a new program, replacing the current
     process; they do not return.  On Unix, the new executable is loaded
     into the current process, and will have the same process id as the
     caller.  Errors will be reported as *note OSError: 4b6. exceptions.

     The current process is replaced immediately.  Open file objects and
     descriptors are not flushed, so if there may be data buffered on
     these open files, you should flush them using ‘sys.stdout.flush()’
     or *note os.fsync(): 1f0. before calling an *note exec*: 18e6.
     function.

     The "l" and "v" variants of the *note exec*: 18e6. functions differ
     in how command-line arguments are passed.  The "l" variants are
     perhaps the easiest to work with if the number of parameters is
     fixed when the code is written; the individual parameters simply
     become additional parameters to the ‘execl*()’ functions.  The "v"
     variants are good when the number of parameters is variable, with
     the arguments being passed in a list or tuple as the `args'
     parameter.  In either case, the arguments to the child process
     should start with the name of the command being run, but this is
     not enforced.

     The variants which include a "p" near the end (*note execlp():
     18e9, *note execlpe(): 18ea, *note execvp(): 18eb, and *note
     execvpe(): 18ec.) will use the ‘PATH’ environment variable to
     locate the program `file'.  When the environment is being replaced
     (using one of the *note exec*e: 18e6. variants, discussed in the
     next paragraph), the new environment is used as the source of the
     ‘PATH’ variable.  The other variants, *note execl(): 18e6, *note
     execle(): 18e8, *note execv(): 1868, and *note execve(): 674, will
     not use the ‘PATH’ variable to locate the executable; `path' must
     contain an appropriate absolute or relative path.

     For *note execle(): 18e8, *note execlpe(): 18ea, *note execve():
     674, and *note execvpe(): 18ec. (note that these all end in "e"),
     the `env' parameter must be a mapping which is used to define the
     environment variables for the new process (these are used instead
     of the current process’ environment); the functions *note execl():
     18e6, *note execlp(): 18e9, *note execv(): 1868, and *note
     execvp(): 18eb. all cause the new process to inherit the
     environment of the current process.

     For *note execve(): 674. on some platforms, `path' may also be
     specified as an open file descriptor.  This functionality may not
     be supported on your platform; you can check whether or not it is
     available using *note os.supports_fd: 679.  If it is unavailable,
     using it will raise a *note NotImplementedError: 569.

     Availability: Unix, Windows.

     New in version 3.3: Added support for specifying an open file
     descriptor for `path' for *note execve(): 674.

 -- Function: os._exit (n)

     Exit the process with status `n', without calling cleanup handlers,
     flushing stdio buffers, etc.

          Note: The standard way to exit is ‘sys.exit(n)’.  *note
          _exit(): 10c1. should normally only be used in the child
          process after a *note fork(): 57b.

The following exit codes are defined and can be used with *note _exit():
10c1, although they are not required.  These are typically used for
system programs written in Python, such as a mail server’s external
command delivery program.

     Note: Some of these may not be available on all Unix platforms,
     since there is some variation.  These constants are defined where
     they are defined by the underlying platform.

 -- Data: os.EX_OK

     Exit code that means no error occurred.

     Availability: Unix.

 -- Data: os.EX_USAGE

     Exit code that means the command was used incorrectly, such as when
     the wrong number of arguments are given.

     Availability: Unix.

 -- Data: os.EX_DATAERR

     Exit code that means the input data was incorrect.

     Availability: Unix.

 -- Data: os.EX_NOINPUT

     Exit code that means an input file did not exist or was not
     readable.

     Availability: Unix.

 -- Data: os.EX_NOUSER

     Exit code that means a specified user did not exist.

     Availability: Unix.

 -- Data: os.EX_NOHOST

     Exit code that means a specified host did not exist.

     Availability: Unix.

 -- Data: os.EX_UNAVAILABLE

     Exit code that means that a required service is unavailable.

     Availability: Unix.

 -- Data: os.EX_SOFTWARE

     Exit code that means an internal software error was detected.

     Availability: Unix.

 -- Data: os.EX_OSERR

     Exit code that means an operating system error was detected, such
     as the inability to fork or create a pipe.

     Availability: Unix.

 -- Data: os.EX_OSFILE

     Exit code that means some system file did not exist, could not be
     opened, or had some other kind of error.

     Availability: Unix.

 -- Data: os.EX_CANTCREAT

     Exit code that means a user specified output file could not be
     created.

     Availability: Unix.

 -- Data: os.EX_IOERR

     Exit code that means that an error occurred while doing I/O on some
     file.

     Availability: Unix.

 -- Data: os.EX_TEMPFAIL

     Exit code that means a temporary failure occurred.  This indicates
     something that may not really be an error, such as a network
     connection that couldn’t be made during a retryable operation.

     Availability: Unix.

 -- Data: os.EX_PROTOCOL

     Exit code that means that a protocol exchange was illegal, invalid,
     or not understood.

     Availability: Unix.

 -- Data: os.EX_NOPERM

     Exit code that means that there were insufficient permissions to
     perform the operation (but not intended for file system problems).

     Availability: Unix.

 -- Data: os.EX_CONFIG

     Exit code that means that some kind of configuration error
     occurred.

     Availability: Unix.

 -- Data: os.EX_NOTFOUND

     Exit code that means something like "an entry was not found".

     Availability: Unix.

 -- Function: os.fork ()

     Fork a child process.  Return ‘0’ in the child and the child’s
     process id in the parent.  If an error occurs *note OSError: 4b6.
     is raised.

     Note that some platforms including FreeBSD <= 6.3 and Cygwin have
     known issues when using fork() from a thread.

          Warning: See *note ssl: f1. for applications that use the SSL
          module with fork().

     Availability: Unix.

 -- Function: os.forkpty ()

     Fork a child process, using a new pseudo-terminal as the child’s
     controlling terminal.  Return a pair of ‘(pid, fd)’, where `pid' is
     ‘0’ in the child, the new child’s process id in the parent, and
     `fd' is the file descriptor of the master end of the
     pseudo-terminal.  For a more portable approach, use the *note pty:
     d3. module.  If an error occurs *note OSError: 4b6. is raised.

     Availability: some flavors of Unix.

 -- Function: os.kill (pid, sig)

     Send signal `sig' to the process `pid'.  Constants for the specific
     signals available on the host platform are defined in the *note
     signal: e8. module.

     Windows: The *note signal.CTRL_C_EVENT: 18ff. and *note
     signal.CTRL_BREAK_EVENT: 1900. signals are special signals which
     can only be sent to console processes which share a common console
     window, e.g., some subprocesses.  Any other value for `sig' will
     cause the process to be unconditionally killed by the
     TerminateProcess API, and the exit code will be set to `sig'.  The
     Windows version of *note kill(): 96e. additionally takes process
     handles to be killed.

     See also *note signal.pthread_kill(): 6b2.

     New in version 3.2: Windows support.

 -- Function: os.killpg (pgid, sig)

     Send the signal `sig' to the process group `pgid'.

     Availability: Unix.

 -- Function: os.nice (increment)

     Add `increment' to the process’s "niceness".  Return the new
     niceness.

     Availability: Unix.

 -- Function: os.plock (op)

     Lock program segments into memory.  The value of `op' (defined in
     ‘<sys/lock.h>’) determines which segments are locked.

     Availability: Unix.

 -- Function: os.popen (cmd, mode='r', buffering=-1)

     Open a pipe to or from command `cmd'.  The return value is an open
     file object connected to the pipe, which can be read or written
     depending on whether `mode' is ‘'r'’ (default) or ‘'w'’.  The
     `buffering' argument has the same meaning as the corresponding
     argument to the built-in *note open(): 1e8. function.  The returned
     file object reads or writes text strings rather than bytes.

     The ‘close’ method returns *note None: 19d. if the subprocess
     exited successfully, or the subprocess’s return code if there was
     an error.  On POSIX systems, if the return code is positive it
     represents the return value of the process left-shifted by one
     byte.  If the return code is negative, the process was terminated
     by the signal given by the negated value of the return code.  (For
     example, the return value might be ‘- signal.SIGKILL’ if the
     subprocess was killed.)  On Windows systems, the return value
     contains the signed integer return code from the child process.

     This is implemented using *note subprocess.Popen: 7d8.; see that
     class’s documentation for more powerful ways to manage and
     communicate with subprocesses.

 -- Function: os.spawnl (mode, path, ...)
 -- Function: os.spawnle (mode, path, ..., env)
 -- Function: os.spawnlp (mode, file, ...)
 -- Function: os.spawnlpe (mode, file, ..., env)
 -- Function: os.spawnv (mode, path, args)
 -- Function: os.spawnve (mode, path, args, env)
 -- Function: os.spawnvp (mode, file, args)
 -- Function: os.spawnvpe (mode, file, args, env)

     Execute the program `path' in a new process.

     (Note that the *note subprocess: f7. module provides more powerful
     facilities for spawning new processes and retrieving their results;
     using that module is preferable to using these functions.  Check
     especially the *note Replacing Older Functions with the subprocess
     Module: 729. section.)

     If `mode' is *note P_NOWAIT: 190a, this function returns the
     process id of the new process; if `mode' is *note P_WAIT: 190b,
     returns the process’s exit code if it exits normally, or ‘-signal’,
     where `signal' is the signal that killed the process.  On Windows,
     the process id will actually be the process handle, so can be used
     with the *note waitpid(): 200. function.

     The "l" and "v" variants of the *note spawn*: 18b2. functions
     differ in how command-line arguments are passed.  The "l" variants
     are perhaps the easiest to work with if the number of parameters is
     fixed when the code is written; the individual parameters simply
     become additional parameters to the ‘spawnl*()’ functions.  The "v"
     variants are good when the number of parameters is variable, with
     the arguments being passed in a list or tuple as the `args'
     parameter.  In either case, the arguments to the child process must
     start with the name of the command being run.

     The variants which include a second "p" near the end (*note
     spawnlp(): 1904, *note spawnlpe(): 1905, *note spawnvp(): 1908, and
     *note spawnvpe(): 1909.) will use the ‘PATH’ environment variable
     to locate the program `file'.  When the environment is being
     replaced (using one of the *note spawn*e: 18b2. variants, discussed
     in the next paragraph), the new environment is used as the source
     of the ‘PATH’ variable.  The other variants, *note spawnl(): 18b2,
     *note spawnle(): 1903, *note spawnv(): 1906, and *note spawnve():
     1907, will not use the ‘PATH’ variable to locate the executable;
     `path' must contain an appropriate absolute or relative path.

     For *note spawnle(): 1903, *note spawnlpe(): 1905, *note spawnve():
     1907, and *note spawnvpe(): 1909. (note that these all end in "e"),
     the `env' parameter must be a mapping which is used to define the
     environment variables for the new process (they are used instead of
     the current process’ environment); the functions *note spawnl():
     18b2, *note spawnlp(): 1904, *note spawnv(): 1906, and *note
     spawnvp(): 1908. all cause the new process to inherit the
     environment of the current process.  Note that keys and values in
     the `env' dictionary must be strings; invalid keys or values will
     cause the function to fail, with a return value of ‘127’.

     As an example, the following calls to *note spawnlp(): 1904. and
     *note spawnvpe(): 1909. are equivalent:

          import os
          os.spawnlp(os.P_WAIT, 'cp', 'cp', 'index.html', '/dev/null')

          L = ['cp', 'index.html', '/dev/null']
          os.spawnvpe(os.P_WAIT, 'cp', L, os.environ)

     Availability: Unix, Windows.  *note spawnlp(): 1904, *note
     spawnlpe(): 1905, *note spawnvp(): 1908. and *note spawnvpe():
     1909. are not available on Windows.  *note spawnle(): 1903. and
     *note spawnve(): 1907. are not thread-safe on Windows; we advise
     you to use the *note subprocess: f7. module instead.

 -- Data: os.P_NOWAIT
 -- Data: os.P_NOWAITO

     Possible values for the `mode' parameter to the *note spawn*: 18b2.
     family of functions.  If either of these values is given, the
     ‘spawn*()’ functions will return as soon as the new process has
     been created, with the process id as the return value.

     Availability: Unix, Windows.

 -- Data: os.P_WAIT

     Possible value for the `mode' parameter to the *note spawn*: 18b2.
     family of functions.  If this is given as `mode', the ‘spawn*()’
     functions will not return until the new process has run to
     completion and will return the exit code of the process the run is
     successful, or ‘-signal’ if a signal kills the process.

     Availability: Unix, Windows.

 -- Data: os.P_DETACH
 -- Data: os.P_OVERLAY

     Possible values for the `mode' parameter to the *note spawn*: 18b2.
     family of functions.  These are less portable than those listed
     above.  *note P_DETACH: 190d. is similar to *note P_NOWAIT: 190a,
     but the new process is detached from the console of the calling
     process.  If *note P_OVERLAY: 190e. is used, the current process
     will be replaced; the *note spawn*: 18b2. function will not return.

     Availability: Windows.

 -- Function: os.startfile (path[, operation])

     Start a file with its associated application.

     When `operation' is not specified or ‘'open'’, this acts like
     double-clicking the file in Windows Explorer, or giving the file
     name as an argument to the ‘start’ command from the interactive
     command shell: the file is opened with whatever application (if
     any) its extension is associated.

     When another `operation' is given, it must be a "command verb" that
     specifies what should be done with the file.  Common verbs
     documented by Microsoft are ‘'print'’ and ‘'edit'’ (to be used on
     files) as well as ‘'explore'’ and ‘'find'’ (to be used on
     directories).

     *note startfile(): 190f. returns as soon as the associated
     application is launched.  There is no option to wait for the
     application to close, and no way to retrieve the application’s exit
     status.  The `path' parameter is relative to the current directory.
     If you want to use an absolute path, make sure the first character
     is not a slash (‘'/'’); the underlying Win32 ‘ShellExecute()’
     function doesn’t work if it is.  Use the *note os.path.normpath():
     923. function to ensure that the path is properly encoded for
     Win32.

     To reduce interpreter startup overhead, the Win32 ‘ShellExecute()’
     function is not resolved until this function is first called.  If
     the function cannot be resolved, *note NotImplementedError: 569.
     will be raised.

     Availability: Windows.

 -- Function: os.system (command)

     Execute the command (a string) in a subshell.  This is implemented
     by calling the Standard C function ‘system()’, and has the same
     limitations.  Changes to *note sys.stdin: 1b9, etc.  are not
     reflected in the environment of the executed command.  If `command'
     generates any output, it will be sent to the interpreter standard
     output stream.

     On Unix, the return value is the exit status of the process encoded
     in the format specified for *note wait(): 1fe.  Note that POSIX
     does not specify the meaning of the return value of the C
     ‘system()’ function, so the return value of the Python function is
     system-dependent.

     On Windows, the return value is that returned by the system shell
     after running `command'.  The shell is given by the Windows
     environment variable ‘COMSPEC’: it is usually ‘cmd.exe’, which
     returns the exit status of the command run; on systems using a
     non-native shell, consult your shell documentation.

     The *note subprocess: f7. module provides more powerful facilities
     for spawning new processes and retrieving their results; using that
     module is preferable to using this function.  See the *note
     Replacing Older Functions with the subprocess Module: 729. section
     in the *note subprocess: f7. documentation for some helpful
     recipes.

     Availability: Unix, Windows.

 -- Function: os.times ()

     Returns the current global process times.  The return value is an
     object with five attributes:

        * ‘user’ - user time

        * *note system: a3d. - system time

        * ‘children_user’ - user time of all child processes

        * ‘children_system’ - system time of all child processes

        * ‘elapsed’ - elapsed real time since a fixed point in the past

     For backwards compatibility, this object also behaves like a
     five-tuple containing ‘user’, *note system: a3d, ‘children_user’,
     ‘children_system’, and ‘elapsed’ in that order.

     See the Unix manual page ‘times(2)’ or the corresponding Windows
     Platform API documentation.  On Windows, only ‘user’ and *note
     system: a3d. are known; the other attributes are zero.

     Availability: Unix, Windows.

     Changed in version 3.3: Return type changed from a tuple to a
     tuple-like object with named attributes.

 -- Function: os.wait ()

     Wait for completion of a child process, and return a tuple
     containing its pid and exit status indication: a 16-bit number,
     whose low byte is the signal number that killed the process, and
     whose high byte is the exit status (if the signal number is zero);
     the high bit of the low byte is set if a core file was produced.

     Availability: Unix.

 -- Function: os.waitid (idtype, id, options)

     Wait for the completion of one or more child processes.  `idtype'
     can be *note P_PID: 1910, *note P_PGID: 1911. or *note P_ALL: 1912.
     `id' specifies the pid to wait on.  `options' is constructed from
     the ORing of one or more of *note WEXITED: 1913, *note WSTOPPED:
     1914. or *note WCONTINUED: 1915. and additionally may be ORed with
     *note WNOHANG: 1916. or *note WNOWAIT: 1917.  The return value is
     an object representing the data contained in the ‘siginfo_t’
     structure, namely: ‘si_pid’, ‘si_uid’, ‘si_signo’, ‘si_status’,
     ‘si_code’ or ‘None’ if *note WNOHANG: 1916. is specified and there
     are no children in a waitable state.

     Availability: Unix.

     New in version 3.3.

 -- Data: os.P_PID
 -- Data: os.P_PGID
 -- Data: os.P_ALL

     These are the possible values for `idtype' in *note waitid(): 1ff.
     They affect how `id' is interpreted.

     Availability: Unix.

     New in version 3.3.

 -- Data: os.WEXITED
 -- Data: os.WSTOPPED
 -- Data: os.WNOWAIT

     Flags that can be used in `options' in *note waitid(): 1ff. that
     specify what child signal to wait for.

     Availability: Unix.

     New in version 3.3.

 -- Data: os.CLD_EXITED
 -- Data: os.CLD_DUMPED
 -- Data: os.CLD_TRAPPED
 -- Data: os.CLD_CONTINUED

     These are the possible values for ‘si_code’ in the result returned
     by *note waitid(): 1ff.

     Availability: Unix.

     New in version 3.3.

 -- Function: os.waitpid (pid, options)

     The details of this function differ on Unix and Windows.

     On Unix: Wait for completion of a child process given by process id
     `pid', and return a tuple containing its process id and exit status
     indication (encoded as for *note wait(): 1fe.).  The semantics of
     the call are affected by the value of the integer `options', which
     should be ‘0’ for normal operation.

     If `pid' is greater than ‘0’, *note waitpid(): 200. requests status
     information for that specific process.  If `pid' is ‘0’, the
     request is for the status of any child in the process group of the
     current process.  If `pid' is ‘-1’, the request pertains to any
     child of the current process.  If `pid' is less than ‘-1’, status
     is requested for any process in the process group ‘-pid’ (the
     absolute value of `pid').

     An *note OSError: 4b6. is raised with the value of errno when the
     syscall returns -1.

     On Windows: Wait for completion of a process given by process
     handle `pid', and return a tuple containing `pid', and its exit
     status shifted left by 8 bits (shifting makes cross-platform use of
     the function easier).  A `pid' less than or equal to ‘0’ has no
     special meaning on Windows, and raises an exception.  The value of
     integer `options' has no effect.  `pid' can refer to any process
     whose id is known, not necessarily a child process.  The *note
     spawn*: 18b2. functions called with *note P_NOWAIT: 190a. return
     suitable process handles.

     Changed in version 3.5: If the system call is interrupted and the
     signal handler does not raise an exception, the function now
     retries the system call instead of raising an *note
     InterruptedError: 1e7. exception (see PEP 475(1) for the
     rationale).

 -- Function: os.wait3 (options)

     Similar to *note waitpid(): 200, except no process id argument is
     given and a 3-element tuple containing the child’s process id, exit
     status indication, and resource usage information is returned.
     Refer to *note resource: de.*note getrusage(): a15. for details on
     resource usage information.  The option argument is the same as
     that provided to *note waitpid(): 200. and *note wait4(): 1fd.

     Availability: Unix.

 -- Function: os.wait4 (pid, options)

     Similar to *note waitpid(): 200, except a 3-element tuple,
     containing the child’s process id, exit status indication, and
     resource usage information is returned.  Refer to *note resource:
     de.*note getrusage(): a15. for details on resource usage
     information.  The arguments to *note wait4(): 1fd. are the same as
     those provided to *note waitpid(): 200.

     Availability: Unix.

 -- Data: os.WNOHANG

     The option for *note waitpid(): 200. to return immediately if no
     child process status is available immediately.  The function
     returns ‘(0, 0)’ in this case.

     Availability: Unix.

 -- Data: os.WCONTINUED

     This option causes child processes to be reported if they have been
     continued from a job control stop since their status was last
     reported.

     Availability: some Unix systems.

 -- Data: os.WUNTRACED

     This option causes child processes to be reported if they have been
     stopped but their current state has not been reported since they
     were stopped.

     Availability: Unix.

The following functions take a process status code as returned by *note
system(): a3d, *note wait(): 1fe, or *note waitpid(): 200. as a
parameter.  They may be used to determine the disposition of a process.

 -- Function: os.WCOREDUMP (status)

     Return ‘True’ if a core dump was generated for the process,
     otherwise return ‘False’.

     Availability: Unix.

 -- Function: os.WIFCONTINUED (status)

     Return ‘True’ if the process has been continued from a job control
     stop, otherwise return ‘False’.

     Availability: Unix.

 -- Function: os.WIFSTOPPED (status)

     Return ‘True’ if the process has been stopped, otherwise return
     ‘False’.

     Availability: Unix.

 -- Function: os.WIFSIGNALED (status)

     Return ‘True’ if the process exited due to a signal, otherwise
     return ‘False’.

     Availability: Unix.

 -- Function: os.WIFEXITED (status)

     Return ‘True’ if the process exited using the ‘exit(2)’ system
     call, otherwise return ‘False’.

     Availability: Unix.

 -- Function: os.WEXITSTATUS (status)

     If ‘WIFEXITED(status)’ is true, return the integer parameter to the
     ‘exit(2)’ system call.  Otherwise, the return value is meaningless.

     Availability: Unix.

 -- Function: os.WSTOPSIG (status)

     Return the signal which caused the process to stop.

     Availability: Unix.

 -- Function: os.WTERMSIG (status)

     Return the signal which caused the process to exit.

     Availability: Unix.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0475


File: python.info,  Node: Interface to the scheduler,  Next: Miscellaneous System Information,  Prev: Process Management,  Up: os --- Miscellaneous operating system interfaces

5.16.1.10 Interface to the scheduler
....................................

These functions control how a process is allocated CPU time by the
operating system.  They are only available on some Unix platforms.  For
more detailed information, consult your Unix manpages.

New in version 3.3.

The following scheduling policies are exposed if they are supported by
the operating system.

 -- Data: os.SCHED_OTHER

     The default scheduling policy.

 -- Data: os.SCHED_BATCH

     Scheduling policy for CPU-intensive processes that tries to
     preserve interactivity on the rest of the computer.

 -- Data: os.SCHED_IDLE

     Scheduling policy for extremely low priority background tasks.

 -- Data: os.SCHED_SPORADIC

     Scheduling policy for sporadic server programs.

 -- Data: os.SCHED_FIFO

     A First In First Out scheduling policy.

 -- Data: os.SCHED_RR

     A round-robin scheduling policy.

 -- Data: os.SCHED_RESET_ON_FORK

     This flag can OR’ed with any other scheduling policy.  When a
     process with this flag set forks, its child’s scheduling policy and
     priority are reset to the default.

 -- Class: os.sched_param (sched_priority)

     This class represents tunable scheduling parameters used in *note
     sched_setparam(): 68b, *note sched_setscheduler(): 68c, and *note
     sched_getparam(): 687.  It is immutable.

     At the moment, there is only one possible parameter:

      -- Attribute: sched_priority

          The scheduling priority for a scheduling policy.

 -- Function: os.sched_get_priority_min (policy)

     Get the minimum priority value for `policy'.  `policy' is one of
     the scheduling policy constants above.

 -- Function: os.sched_get_priority_max (policy)

     Get the maximum priority value for `policy'.  `policy' is one of
     the scheduling policy constants above.

 -- Function: os.sched_setscheduler (pid, policy, param)

     Set the scheduling policy for the process with PID `pid'.  A `pid'
     of 0 means the calling process.  `policy' is one of the scheduling
     policy constants above.  `param' is a *note sched_param: 192d.
     instance.

 -- Function: os.sched_getscheduler (pid)

     Return the scheduling policy for the process with PID `pid'.  A
     `pid' of 0 means the calling process.  The result is one of the
     scheduling policy constants above.

 -- Function: os.sched_setparam (pid, param)

     Set a scheduling parameters for the process with PID `pid'.  A
     `pid' of 0 means the calling process.  `param' is a *note
     sched_param: 192d. instance.

 -- Function: os.sched_getparam (pid)

     Return the scheduling parameters as a *note sched_param: 192d.
     instance for the process with PID `pid'.  A `pid' of 0 means the
     calling process.

 -- Function: os.sched_rr_get_interval (pid)

     Return the round-robin quantum in seconds for the process with PID
     `pid'.  A `pid' of 0 means the calling process.

 -- Function: os.sched_yield ()

     Voluntarily relinquish the CPU.

 -- Function: os.sched_setaffinity (pid, mask)

     Restrict the process with PID `pid' (or the current process if
     zero) to a set of CPUs.  `mask' is an iterable of integers
     representing the set of CPUs to which the process should be
     restricted.

 -- Function: os.sched_getaffinity (pid)

     Return the set of CPUs the process with PID `pid' (or the current
     process if zero) is restricted to.


File: python.info,  Node: Miscellaneous System Information,  Next: Miscellaneous Functions,  Prev: Interface to the scheduler,  Up: os --- Miscellaneous operating system interfaces

5.16.1.11 Miscellaneous System Information
..........................................

 -- Function: os.confstr (name)

     Return string-valued system configuration values.  `name' specifies
     the configuration value to retrieve; it may be a string which is
     the name of a defined system value; these names are specified in a
     number of standards (POSIX, Unix 95, Unix 98, and others).  Some
     platforms define additional names as well.  The names known to the
     host operating system are given as the keys of the ‘confstr_names’
     dictionary.  For configuration variables not included in that
     mapping, passing an integer for `name' is also accepted.

     If the configuration value specified by `name' isn’t defined,
     ‘None’ is returned.

     If `name' is a string and is not known, *note ValueError: 19c. is
     raised.  If a specific value for `name' is not supported by the
     host system, even if it is included in ‘confstr_names’, an *note
     OSError: 4b6. is raised with *note errno.EINVAL: 1881. for the
     error number.

     Availability: Unix.

 -- Data: os.confstr_names

     Dictionary mapping names accepted by *note confstr(): 1931. to the
     integer values defined for those names by the host operating
     system.  This can be used to determine the set of names known to
     the system.

     Availability: Unix.

 -- Function: os.cpu_count ()

     Return the number of CPUs in the system.  Returns None if
     undetermined.

     This number is not equivalent to the number of CPUs the current
     process can use.  The number of usable CPUs can be obtained with
     ‘len(os.sched_getaffinity(0))’

     New in version 3.4.

 -- Function: os.getloadavg ()

     Return the number of processes in the system run queue averaged
     over the last 1, 5, and 15 minutes or raises *note OSError: 4b6. if
     the load average was unobtainable.

     Availability: Unix.

 -- Function: os.sysconf (name)

     Return integer-valued system configuration values.  If the
     configuration value specified by `name' isn’t defined, ‘-1’ is
     returned.  The comments regarding the `name' parameter for *note
     confstr(): 1931. apply here as well; the dictionary that provides
     information on the known names is given by ‘sysconf_names’.

     Availability: Unix.

 -- Data: os.sysconf_names

     Dictionary mapping names accepted by *note sysconf(): 1934. to the
     integer values defined for those names by the host operating
     system.  This can be used to determine the set of names known to
     the system.

     Availability: Unix.

The following data values are used to support path manipulation
operations.  These are defined for all platforms.

Higher-level operations on pathnames are defined in the *note os.path:
c3. module.

 -- Data: os.curdir

     The constant string used by the operating system to refer to the
     current directory.  This is ‘'.'’ for Windows and POSIX. Also
     available via *note os.path: c3.

 -- Data: os.pardir

     The constant string used by the operating system to refer to the
     parent directory.  This is ‘'..'’ for Windows and POSIX. Also
     available via *note os.path: c3.

 -- Data: os.sep

     The character used by the operating system to separate pathname
     components.  This is ‘'/'’ for POSIX and ‘'\\'’ for Windows.  Note
     that knowing this is not sufficient to be able to parse or
     concatenate pathnames — use *note os.path.split(): 1585. and *note
     os.path.join(): 154a. — but it is occasionally useful.  Also
     available via *note os.path: c3.

 -- Data: os.altsep

     An alternative character used by the operating system to separate
     pathname components, or ‘None’ if only one separator character
     exists.  This is set to ‘'/'’ on Windows systems where ‘sep’ is a
     backslash.  Also available via *note os.path: c3.

 -- Data: os.extsep

     The character which separates the base filename from the extension;
     for example, the ‘'.'’ in ‘os.py’.  Also available via *note
     os.path: c3.

 -- Data: os.pathsep

     The character conventionally used by the operating system to
     separate search path components (as in ‘PATH’), such as ‘':'’ for
     POSIX or ‘';'’ for Windows.  Also available via *note os.path: c3.

 -- Data: os.defpath

     The default search path used by *note exec*p*: 18e6. and *note
     spawn*p*: 18b2. if the environment doesn’t have a ‘'PATH'’ key.
     Also available via *note os.path: c3.

 -- Data: os.linesep

     The string used to separate (or, rather, terminate) lines on the
     current platform.  This may be a single character, such as ‘'\n'’
     for POSIX, or multiple characters, for example, ‘'\r\n'’ for
     Windows.  Do not use `os.linesep' as a line terminator when writing
     files opened in text mode (the default); use a single ‘'\n'’
     instead, on all platforms.

 -- Data: os.devnull

     The file path of the null device.  For example: ‘'/dev/null'’ for
     POSIX, ‘'nul'’ for Windows.  Also available via *note os.path: c3.

 -- Data: os.RTLD_LAZY
 -- Data: os.RTLD_NOW
 -- Data: os.RTLD_GLOBAL
 -- Data: os.RTLD_LOCAL
 -- Data: os.RTLD_NODELETE
 -- Data: os.RTLD_NOLOAD
 -- Data: os.RTLD_DEEPBIND

     Flags for use with the *note setdlopenflags(): 69b. and *note
     getdlopenflags(): ad2. functions.  See the Unix manual page
     ‘dlopen(3)’ for what the different flags mean.

     New in version 3.3.

