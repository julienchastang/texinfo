This is python.info, produced by makeinfo version 6.0 from python.texi.

     Python 3.6.0a0, May 06, 2016

     Georg Brandl

     Copyright © 2001-2016, Python Software Foundation

INFO-DIR-SECTION Documentation tools
START-INFO-DIR-ENTRY
* Python: (python.info). The Python Programming Language
END-INFO-DIR-ENTRY


   Generated by Sphinx 1.4.1.


File: python.info,  Node: sysconfig --- Provide access to Python's configuration information,  Next: builtins --- Built-in objects,  Prev: sys --- System-specific parameters and functions,  Up: Python Runtime Services

5.29.2 ‘sysconfig’ — Provide access to Python’s configuration information
-------------------------------------------------------------------------

New in version 3.2.

`Source code:' Lib/sysconfig.py(1)

__________________________________________________________________

The *note sysconfig: fc. module provides access to Python’s
configuration information like the list of installation paths and the
configuration variables relevant for the current platform.

* Menu:

* Configuration variables:: 
* Installation paths:: 
* Other functions: Other functions<3>. 
* Using sysconfig as a script:: 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/sysconfig.py


File: python.info,  Node: Configuration variables,  Next: Installation paths,  Up: sysconfig --- Provide access to Python's configuration information

5.29.2.1 Configuration variables
................................

A Python distribution contains a ‘Makefile’ and a ‘pyconfig.h’ header
file that are necessary to build both the Python binary itself and
third-party C extensions compiled using *note distutils: 37.

*note sysconfig: fc. puts all variables found in these files in a
dictionary that can be accessed using *note get_config_vars(): 581. or
*note get_config_var(): 580.

Notice that on Windows, it’s a much smaller set.

 -- Function: sysconfig.get_config_vars (*args)

     With no arguments, return a dictionary of all configuration
     variables relevant for the current platform.

     With arguments, return a list of values that result from looking up
     each argument in the configuration variable dictionary.

     For each argument, if the value is not found, return ‘None’.

 -- Function: sysconfig.get_config_var (name)

     Return the value of a single variable `name'.  Equivalent to
     ‘get_config_vars().get(name)’.

     If `name' is not found, return ‘None’.

Example of usage:

     >>> import sysconfig
     >>> sysconfig.get_config_var('Py_ENABLE_SHARED')
     0
     >>> sysconfig.get_config_var('LIBDIR')
     '/usr/local/lib'
     >>> sysconfig.get_config_vars('AR', 'CXX')
     ['ar', 'g++']


File: python.info,  Node: Installation paths,  Next: Other functions<3>,  Prev: Configuration variables,  Up: sysconfig --- Provide access to Python's configuration information

5.29.2.2 Installation paths
...........................

Python uses an installation scheme that differs depending on the
platform and on the installation options.  These schemes are stored in
*note sysconfig: fc. under unique identifiers based on the value
returned by *note os.name: 184f.

Every new component that is installed using *note distutils: 37. or a
Distutils-based system will follow the same scheme to copy its file in
the right places.

Python currently supports seven schemes:

   - `posix_prefix': scheme for Posix platforms like Linux or Mac OS X.
     This is the default scheme used when Python or a component is
     installed.

   - `posix_home': scheme for Posix platforms used when a `home' option
     is used upon installation.  This scheme is used when a component is
     installed through Distutils with a specific home prefix.

   - `posix_user': scheme for Posix platforms used when a component is
     installed through Distutils and the `user' option is used.  This
     scheme defines paths located under the user home directory.

   - `nt': scheme for NT platforms like Windows.

   - `nt_user': scheme for NT platforms, when the `user' option is used.

Each scheme is itself composed of a series of paths and each path has a
unique identifier.  Python currently uses eight paths:

   - `stdlib': directory containing the standard Python library files
     that are not platform-specific.

   - `platstdlib': directory containing the standard Python library
     files that are platform-specific.

   - `platlib': directory for site-specific, platform-specific files.

   - `purelib': directory for site-specific, non-platform-specific
     files.

   - `include': directory for non-platform-specific header files.

   - `platinclude': directory for platform-specific header files.

   - `scripts': directory for script files.

   - `data': directory for data files.

*note sysconfig: fc. provides some functions to determine these paths.

 -- Function: sysconfig.get_scheme_names ()

     Return a tuple containing all schemes currently supported in *note
     sysconfig: fc.

 -- Function: sysconfig.get_path_names ()

     Return a tuple containing all path names currently supported in
     *note sysconfig: fc.

 -- Function: sysconfig.get_path (name[, scheme[, vars[, expand]]])

     Return an installation path corresponding to the path `name', from
     the install scheme named `scheme'.

     `name' has to be a value from the list returned by *note
     get_path_names(): 2e45.

     *note sysconfig: fc. stores installation paths corresponding to
     each path name, for each platform, with variables to be expanded.
     For instance the `stdlib' path for the `nt' scheme is:
     ‘{base}/Lib’.

     *note get_path(): 934. will use the variables returned by *note
     get_config_vars(): 581. to expand the path.  All variables have
     default values for each platform so one may call this function and
     get the default value.

     If `scheme' is provided, it must be a value from the list returned
     by *note get_scheme_names(): 2e44.  Otherwise, the default scheme
     for the current platform is used.

     If `vars' is provided, it must be a dictionary of variables that
     will update the dictionary return by *note get_config_vars(): 581.

     If `expand' is set to ‘False’, the path will not be expanded using
     the variables.

     If `name' is not found, return ‘None’.

 -- Function: sysconfig.get_paths ([scheme[, vars[, expand]]])

     Return a dictionary containing all installation paths corresponding
     to an installation scheme.  See *note get_path(): 934. for more
     information.

     If `scheme' is not provided, will use the default scheme for the
     current platform.

     If `vars' is provided, it must be a dictionary of variables that
     will update the dictionary used to expand the paths.

     If `expand' is set to False, the paths will not be expanded.

     If `scheme' is not an existing scheme, *note get_paths(): 837. will
     raise a *note KeyError: 1a7.


File: python.info,  Node: Other functions<3>,  Next: Using sysconfig as a script,  Prev: Installation paths,  Up: sysconfig --- Provide access to Python's configuration information

5.29.2.3 Other functions
........................

 -- Function: sysconfig.get_python_version ()

     Return the ‘MAJOR.MINOR’ Python version number as a string.
     Similar to ‘'%d.%d' % sys.version_info[:2]’.

 -- Function: sysconfig.get_platform ()

     Return a string that identifies the current platform.

     This is used mainly to distinguish platform-specific build
     directories and platform-specific built distributions.  Typically
     includes the OS name and version and the architecture (as supplied
     by *note os.uname(): 692.), although the exact information included
     depends on the OS; e.g.  for IRIX the architecture isn’t
     particularly important (IRIX only runs on SGI hardware), but for
     Linux the kernel version isn’t particularly important.

     Examples of returned values:

        - linux-i586

        - linux-alpha (?)

        - solaris-2.6-sun4u

        - irix-5.3

        - irix64-6.2

     Windows will return one of:

        - win-amd64 (64bit Windows on AMD64 (aka x86_64, Intel64, EM64T,
          etc)

        - win-ia64 (64bit Windows on Itanium)

        - win32 (all others - specifically, sys.platform is returned)

     Mac OS X can return:

        - macosx-10.6-ppc

        - macosx-10.4-ppc64

        - macosx-10.3-i386

        - macosx-10.4-fat

     For other non-POSIX platforms, currently just returns *note
     sys.platform: 1850.

 -- Function: sysconfig.is_python_build ()

     Return ‘True’ if the current Python installation was built from
     source.

 -- Function: sysconfig.parse_config_h (fp[, vars])

     Parse a ‘config.h’-style file.

     `fp' is a file-like object pointing to the ‘config.h’-like file.

     A dictionary containing name/value pairs is returned.  If an
     optional dictionary is passed in as the second argument, it is used
     instead of a new dictionary, and updated with the values read in
     the file.

 -- Function: sysconfig.get_config_h_filename ()

     Return the path of ‘pyconfig.h’.

 -- Function: sysconfig.get_makefile_filename ()

     Return the path of ‘Makefile’.


File: python.info,  Node: Using sysconfig as a script,  Prev: Other functions<3>,  Up: sysconfig --- Provide access to Python's configuration information

5.29.2.4 Using ‘sysconfig’ as a script
......................................

You can use *note sysconfig: fc. as a script with Python’s `-m' option:

     $ python -m sysconfig
     Platform: "macosx-10.4-i386"
     Python version: "3.2"
     Current installation scheme: "posix_prefix"

     Paths:
             data = "/usr/local"
             include = "/Users/tarek/Dev/svn.python.org/py3k/Include"
             platinclude = "."
             platlib = "/usr/local/lib/python3.2/site-packages"
             platstdlib = "/usr/local/lib/python3.2"
             purelib = "/usr/local/lib/python3.2/site-packages"
             scripts = "/usr/local/bin"
             stdlib = "/usr/local/lib/python3.2"

     Variables:
             AC_APPLE_UNIVERSAL_BUILD = "0"
             AIX_GENUINE_CPLUSPLUS = "0"
             AR = "ar"
             ARFLAGS = "rc"
             ASDLGEN = "./Parser/asdl_c.py"
             ...

This call will print in the standard output the information returned by
*note get_platform(): 835, *note get_python_version(): 836, *note
get_path(): 934. and *note get_config_vars(): 581.


File: python.info,  Node: builtins --- Built-in objects,  Next: __main__ --- Top-level script environment,  Prev: sysconfig --- Provide access to Python's configuration information,  Up: Python Runtime Services

5.29.3 ‘builtins’ — Built-in objects
------------------------------------

This module provides direct access to all ’built-in’ identifiers of
Python; for example, ‘builtins.open’ is the full name for the built-in
function *note open(): 1e8.  See *note Built-in Functions: 854. and
*note Built-in Constants: fc1. for documentation.

This module is not normally accessed explicitly by most applications,
but can be useful in modules that provide objects with the same name as
a built-in value, but in which the built-in of that name is also needed.
For example, in a module that wants to implement an *note open(): 1e8.
function that wraps the built-in *note open(): 1e8, this module can be
used directly:

     import builtins

     def open(path):
         f = builtins.open(path, 'r')
         return UpperCaser(f)

     class UpperCaser:
         '''Wrapper around a file that converts output to upper-case.'''

         def __init__(self, f):
             self._f = f

         def read(self, count=-1):
             return self._f.read(count).upper()

         # ...

As an implementation detail, most modules have the name ‘__builtins__’
made available as part of their globals.  The value of ‘__builtins__’ is
normally either this module or the value of this module’s ‘__dict__’
attribute.  Since this is an implementation detail, it may not be used
by alternate implementations of Python.


File: python.info,  Node: __main__ --- Top-level script environment,  Next: warnings --- Warning control,  Prev: builtins --- Built-in objects,  Up: Python Runtime Services

5.29.4 ‘__main__’ — Top-level script environment
------------------------------------------------

‘'__main__'’ is the name of the scope in which top-level code executes.
A module’s __name__ is set equal to ‘'__main__'’ when read from standard
input, a script, or from an interactive prompt.

A module can discover whether or not it is running in the main scope by
checking its own ‘__name__’, which allows a common idiom for
conditionally executing code in a module when it is run as a script or
with ‘python -m’ but not when it is imported:

     if __name__ == "__main__":
         # execute only if run as a script
         main()

For a package, the same effect can be achieved by including a
‘__main__.py’ module, the contents of which will be executed when the
module is run with ‘-m’.


File: python.info,  Node: warnings --- Warning control,  Next: contextlib --- Utilities for with-statement contexts,  Prev: __main__ --- Top-level script environment,  Up: Python Runtime Services

5.29.5 ‘warnings’ — Warning control
-----------------------------------

`Source code:' Lib/warnings.py(1)

__________________________________________________________________

Warning messages are typically issued in situations where it is useful
to alert the user of some condition in a program, where that condition
(normally) doesn’t warrant raising an exception and terminating the
program.  For example, one might want to issue a warning when a program
uses an obsolete module.

Python programmers issue warnings by calling the *note warn(): add.
function defined in this module.  (C programmers use *note
PyErr_WarnEx(): a2d.; see *note Exception Handling: 2e51. for details).

Warning messages are normally written to ‘sys.stderr’, but their
disposition can be changed flexibly, from ignoring all warnings to
turning them into exceptions.  The disposition of warnings can vary
based on the warning category (see below), the text of the warning
message, and the source location where it is issued.  Repetitions of a
particular warning for the same source location are typically
suppressed.

There are two stages in warning control: first, each time a warning is
issued, a determination is made whether a message should be issued or
not; next, if a message is to be issued, it is formatted and printed
using a user-settable hook.

The determination whether to issue a warning message is controlled by
the warning filter, which is a sequence of matching rules and actions.
Rules can be added to the filter by calling *note filterwarnings(): a88.
and reset to its default state by calling *note resetwarnings(): 2e52.

The printing of warning messages is done by calling *note showwarning():
2e53, which may be overridden; the default implementation of this
function formats the message by calling *note formatwarning(): b15,
which is also available for use by custom implementations.

See also
........

*note logging.captureWarnings(): 1a24. allows you to handle all warnings
with the standard logging infrastructure.

* Menu:

* Warning Categories:: 
* The Warnings Filter:: 
* Temporarily Suppressing Warnings:: 
* Testing Warnings:: 
* Updating Code For New Versions of Python:: 
* Available Functions:: 
* Available Context Managers:: 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/warnings.py


File: python.info,  Node: Warning Categories,  Next: The Warnings Filter,  Up: warnings --- Warning control

5.29.5.1 Warning Categories
...........................

There are a number of built-in exceptions that represent warning
categories.  This categorization is useful to be able to filter out
groups of warnings.  The following warnings category classes are
currently defined:

Class                                  Description
                                       
-------------------------------------------------------------------------------------------
                                       
*note Warning: 10cb.                   This is the base class of all warning category
                                       classes.  It is a subclass of
                                       *note Exception: 1a1.
                                       
                                       
*note UserWarning: 10cc.               The default category for *note warn(): add.
                                       
                                       
*note DeprecationWarning: 192.         Base category for warnings about deprecated
                                       features (ignored by default).
                                       
                                       
*note SyntaxWarning: a89.              Base category for warnings about dubious
                                       syntactic features.
                                       
                                       
*note RuntimeWarning: 10cd.            Base category for warnings about dubious runtime
                                       features.
                                       
                                       
*note FutureWarning: 960.              Base category for warnings about constructs that
                                       will change semantically in the future.
                                       
                                       
*note PendingDeprecationWarning: 19e.  Base category for warnings about features that
                                       will be deprecated in the future (ignored by
                                       default).
                                       
                                       
*note ImportWarning: 18f.              Base category for warnings triggered during the
                                       process of importing a module (ignored by
                                       default).
                                       
                                       
*note UnicodeWarning: a01.             Base category for warnings related to Unicode.
                                       
                                       
*note BytesWarning: 10ce.              Base category for warnings related to
                                       *note bytes: 1db. and *note bytearray: 1dc.
                                       
                                       
*note ResourceWarning: 166.            Base category for warnings related to resource
                                       usage.
                                       

While these are technically built-in exceptions, they are documented
here, because conceptually they belong to the warnings mechanism.

User code can define additional warning categories by subclassing one of
the standard warning categories.  A warning category must always be a
subclass of the *note Warning: 10cb. class.


File: python.info,  Node: The Warnings Filter,  Next: Temporarily Suppressing Warnings,  Prev: Warning Categories,  Up: warnings --- Warning control

5.29.5.2 The Warnings Filter
............................

The warnings filter controls whether warnings are ignored, displayed, or
turned into errors (raising an exception).

Conceptually, the warnings filter maintains an ordered list of filter
specifications; any specific warning is matched against each filter
specification in the list in turn until a match is found; the match
determines the disposition of the match.  Each entry is a tuple of the
form (`action', `message', `category', `module', `lineno'), where:

   * `action' is one of the following strings:

     Value               Disposition
                         
     -----------------------------------------------------------------------
                         
     ‘"error"’           turn matching warnings into exceptions
                         
                         
     ‘"ignore"’          never print matching warnings
                         
                         
     ‘"always"’          always print matching warnings
                         
                         
     ‘"default"’         print the first occurrence of matching warnings
                         for each location where the warning is issued
                         
                         
     ‘"module"’          print the first occurrence of matching warnings
                         for each module where the warning is issued
                         
                         
     ‘"once"’            print only the first occurrence of matching
                         warnings, regardless of location
                         

   * `message' is a string containing a regular expression that the
     warning message must match (the match is compiled to always be
     case-insensitive).

   * `category' is a class (a subclass of *note Warning: 10cb.) of which
     the warning category must be a subclass in order to match.

   * `module' is a string containing a regular expression that the
     module name must match (the match is compiled to be
     case-sensitive).

   * `lineno' is an integer that the line number where the warning
     occurred must match, or ‘0’ to match all line numbers.

Since the *note Warning: 10cb. class is derived from the built-in *note
Exception: 1a1. class, to turn a warning into an error we simply raise
‘category(message)’.

The warnings filter is initialized by *note -W: 8eb. options passed to
the Python interpreter command line.  The interpreter saves the
arguments for all *note -W: 8eb. options without interpretation in
‘sys.warnoptions’; the *note warnings: 123. module parses these when it
is first imported (invalid options are ignored, after printing a message
to ‘sys.stderr’).

* Menu:

* Default Warning Filters:: 


File: python.info,  Node: Default Warning Filters,  Up: The Warnings Filter

5.29.5.3 Default Warning Filters
................................

By default, Python installs several warning filters, which can be
overridden by the command-line options passed to *note -W: 8eb. and
calls to *note filterwarnings(): a88.

   * *note DeprecationWarning: 192. and *note PendingDeprecationWarning:
     19e, and *note ImportWarning: 18f. are ignored.

   * *note BytesWarning: 10ce. is ignored unless the *note -b: 226.
     option is given once or twice; in this case this warning is either
     printed (‘-b’) or turned into an exception (‘-bb’).

   * *note ResourceWarning: 166. is ignored unless Python was built in
     debug mode.

Changed in version 3.2: *note DeprecationWarning: 192. is now ignored by
default in addition to *note PendingDeprecationWarning: 19e.


File: python.info,  Node: Temporarily Suppressing Warnings,  Next: Testing Warnings,  Prev: The Warnings Filter,  Up: warnings --- Warning control

5.29.5.4 Temporarily Suppressing Warnings
.........................................

If you are using code that you know will raise a warning, such as a
deprecated function, but do not want to see the warning, then it is
possible to suppress the warning using the *note catch_warnings: 2cb4.
context manager:

     import warnings

     def fxn():
         warnings.warn("deprecated", DeprecationWarning)

     with warnings.catch_warnings():
         warnings.simplefilter("ignore")
         fxn()

While within the context manager all warnings will simply be ignored.
This allows you to use known-deprecated code without having to see the
warning while not suppressing the warning for other code that might not
be aware of its use of deprecated code.  Note: this can only be
guaranteed in a single-threaded application.  If two or more threads use
the *note catch_warnings: 2cb4. context manager at the same time, the
behavior is undefined.


File: python.info,  Node: Testing Warnings,  Next: Updating Code For New Versions of Python,  Prev: Temporarily Suppressing Warnings,  Up: warnings --- Warning control

5.29.5.5 Testing Warnings
.........................

To test warnings raised by code, use the *note catch_warnings: 2cb4.
context manager.  With it you can temporarily mutate the warnings filter
to facilitate your testing.  For instance, do the following to capture
all raised warnings to check:

     import warnings

     def fxn():
         warnings.warn("deprecated", DeprecationWarning)

     with warnings.catch_warnings(record=True) as w:
         # Cause all warnings to always be triggered.
         warnings.simplefilter("always")
         # Trigger a warning.
         fxn()
         # Verify some things
         assert len(w) == 1
         assert issubclass(w[-1].category, DeprecationWarning)
         assert "deprecated" in str(w[-1].message)

One can also cause all warnings to be exceptions by using ‘error’
instead of ‘always’.  One thing to be aware of is that if a warning has
already been raised because of a ‘once’/‘default’ rule, then no matter
what filters are set the warning will not be seen again unless the
warnings registry related to the warning has been cleared.

Once the context manager exits, the warnings filter is restored to its
state when the context was entered.  This prevents tests from changing
the warnings filter in unexpected ways between tests and leading to
indeterminate test results.  The *note showwarning(): 2e53. function in
the module is also restored to its original value.  Note: this can only
be guaranteed in a single-threaded application.  If two or more threads
use the *note catch_warnings: 2cb4. context manager at the same time,
the behavior is undefined.

When testing multiple operations that raise the same kind of warning, it
is important to test them in a manner that confirms each operation is
raising a new warning (e.g.  set warnings to be raised as exceptions and
check the operations raise exceptions, check that the length of the
warning list continues to increase after each operation, or else delete
the previous entries from the warnings list before each new operation).


File: python.info,  Node: Updating Code For New Versions of Python,  Next: Available Functions,  Prev: Testing Warnings,  Up: warnings --- Warning control

5.29.5.6 Updating Code For New Versions of Python
.................................................

Warnings that are only of interest to the developer are ignored by
default.  As such you should make sure to test your code with typically
ignored warnings made visible.  You can do this from the command-line by
passing *note -Wd: 8eb. to the interpreter (this is shorthand for ‘-W
default’).  This enables default handling for all warnings, including
those that are ignored by default.  To change what action is taken for
encountered warnings you simply change what argument is passed to *note
-W: 8eb, e.g.  ‘-W error’.  See the *note -W: 8eb. flag for more details
on what is possible.

To programmatically do the same as ‘-Wd’, use:

     warnings.simplefilter('default')

Make sure to execute this code as soon as possible.  This prevents the
registering of what warnings have been raised from unexpectedly
influencing how future warnings are treated.

Having certain warnings ignored by default is done to prevent a user
from seeing warnings that are only of interest to the developer.  As you
do not necessarily have control over what interpreter a user uses to run
their code, it is possible that a new version of Python will be released
between your release cycles.  The new interpreter release could trigger
new warnings in your code that were not there in an older interpreter,
e.g.  *note DeprecationWarning: 192. for a module that you are using.
While you as a developer want to be notified that your code is using a
deprecated module, to a user this information is essentially noise and
provides no benefit to them.

The *note unittest: 118. module has been also updated to use the
‘'default'’ filter while running tests.


File: python.info,  Node: Available Functions,  Next: Available Context Managers,  Prev: Updating Code For New Versions of Python,  Up: warnings --- Warning control

5.29.5.7 Available Functions
............................

 -- Function: warnings.warn (message, category=None, stacklevel=1,
          source=None)

     Issue a warning, or maybe ignore it or raise an exception.  The
     `category' argument, if given, must be a warning category class
     (see above); it defaults to *note UserWarning: 10cc.  Alternatively
     `message' can be a *note Warning: 10cb. instance, in which case
     `category' will be ignored and ‘message.__class__’ will be used.
     In this case the message text will be ‘str(message)’.  This
     function raises an exception if the particular warning issued is
     changed into an error by the warnings filter see above.  The
     `stacklevel' argument can be used by wrapper functions written in
     Python, like this:

          def deprecation(message):
              warnings.warn(message, DeprecationWarning, stacklevel=2)

     This makes the warning refer to ‘deprecation()’’s caller, rather
     than to the source of ‘deprecation()’ itself (since the latter
     would defeat the purpose of the warning message).

     `source', if supplied, is the destroyed object which emitted a
     *note ResourceWarning: 166.

     Changed in version 3.6: Added `source' parameter.

 -- Function: warnings.warn_explicit (message, category, filename,
          lineno, module=None, registry=None, module_globals=None,
          source=None)

     This is a low-level interface to the functionality of *note warn():
     add, passing in explicitly the message, category, filename and line
     number, and optionally the module name and the registry (which
     should be the ‘__warningregistry__’ dictionary of the module).  The
     module name defaults to the filename with ‘.py’ stripped; if no
     registry is passed, the warning is never suppressed.  `message'
     must be a string and `category' a subclass of *note Warning: 10cb.
     or `message' may be a *note Warning: 10cb. instance, in which case
     `category' will be ignored.

     `module_globals', if supplied, should be the global namespace in
     use by the code for which the warning is issued.  (This argument is
     used to support displaying source for modules found in zipfiles or
     other non-filesystem import sources).

     `source', if supplied, is the destroyed object which emitted a
     *note ResourceWarning: 166.

     Changed in version 3.6: Add the `source' parameter.

 -- Function: warnings.showwarning (message, category, filename, lineno,
          file=None, line=None)

     Write a warning to a file.  The default implementation calls
     ‘formatwarning(message, category, filename, lineno, line)’ and
     writes the resulting string to `file', which defaults to
     ‘sys.stderr’.  You may replace this function with any callable by
     assigning to ‘warnings.showwarning’.  `line' is a line of source
     code to be included in the warning message; if `line' is not
     supplied, *note showwarning(): 2e53. will try to read the line
     specified by `filename' and `lineno'.

 -- Function: warnings.formatwarning (message, category, filename,
          lineno, line=None)

     Format a warning the standard way.  This returns a string which may
     contain embedded newlines and ends in a newline.  `line' is a line
     of source code to be included in the warning message; if `line' is
     not supplied, *note formatwarning(): b15. will try to read the line
     specified by `filename' and `lineno'.

 -- Function: warnings.filterwarnings (action, message='',
          category=Warning, module='', lineno=0, append=False)

     Insert an entry into the list of *note warnings filter
     specifications: 2bfc.  The entry is inserted at the front by
     default; if `append' is true, it is inserted at the end.  This
     checks the types of the arguments, compiles the `message' and
     `module' regular expressions, and inserts them as a tuple in the
     list of warnings filters.  Entries closer to the front of the list
     override entries later in the list, if both match a particular
     warning.  Omitted arguments default to a value that matches
     everything.

 -- Function: warnings.simplefilter (action, category=Warning, lineno=0,
          append=False)

     Insert a simple entry into the list of *note warnings filter
     specifications: 2bfc.  The meaning of the function parameters is as
     for *note filterwarnings(): a88, but regular expressions are not
     needed as the filter inserted always matches any message in any
     module as long as the category and line number match.

 -- Function: warnings.resetwarnings ()

     Reset the warnings filter.  This discards the effect of all
     previous calls to *note filterwarnings(): a88, including that of
     the *note -W: 8eb. command line options and calls to *note
     simplefilter(): 2cb5.


File: python.info,  Node: Available Context Managers,  Prev: Available Functions,  Up: warnings --- Warning control

5.29.5.8 Available Context Managers
...................................

 -- Class: warnings.catch_warnings (*, record=False, module=None)

     A context manager that copies and, upon exit, restores the warnings
     filter and the *note showwarning(): 2e53. function.  If the
     `record' argument is *note False: 60d. (the default) the context
     manager returns *note None: 19d. on entry.  If `record' is *note
     True: 9ff, a list is returned that is progressively populated with
     objects as seen by a custom *note showwarning(): 2e53. function
     (which also suppresses output to ‘sys.stdout’).  Each object in the
     list has attributes with the same names as the arguments to *note
     showwarning(): 2e53.

     The `module' argument takes a module that will be used instead of
     the module returned when you import *note warnings: 123. whose
     filter will be protected.  This argument exists primarily for
     testing the *note warnings: 123. module itself.

          Note: The *note catch_warnings: 2cb4. manager works by
          replacing and then later restoring the module’s *note
          showwarning(): 2e53. function and internal list of filter
          specifications.  This means the context manager is modifying
          global state and therefore is not thread-safe.


File: python.info,  Node: contextlib --- Utilities for with-statement contexts,  Next: abc --- Abstract Base Classes,  Prev: warnings --- Warning control,  Up: Python Runtime Services

5.29.6 ‘contextlib’ — Utilities for ‘with’-statement contexts
-------------------------------------------------------------

`Source code:' Lib/contextlib.py(1)

__________________________________________________________________

This module provides utilities for common tasks involving the *note
with: 29d. statement.  For more information see also *note Context
Manager Types: e4a. and *note With Statement Context Managers: e48.

* Menu:

* Utilities:: 
* Examples and Recipes: Examples and Recipes<2>. 
* Single use, reusable and reentrant context managers: Single use reusable and reentrant context managers. 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/contextlib.py


File: python.info,  Node: Utilities,  Next: Examples and Recipes<2>,  Up: contextlib --- Utilities for with-statement contexts

5.29.6.1 Utilities
..................

Functions and classes provided:

 -- Class: contextlib.AbstractContextManager

     An abstract base class for classes that implement *note
     object.__enter__(): 907. and *note object.__exit__(): 908.  A
     default implementation for *note object.__enter__(): 907. is
     provided which returns ‘self’ while *note object.__exit__(): 908.
     is an abstract method which by default returns ‘None’.  See also
     the definition of *note Context Manager Types: e4a.

     New in version 3.6.

 -- Function: @contextlib.contextmanager

     This function is a *note decorator: f6c. that can be used to define
     a factory function for *note with: 29d. statement context managers,
     without needing to create a class or separate *note __enter__():
     907. and *note __exit__(): 908. methods.

     A simple example (this is not recommended as a real way of
     generating HTML!):

          from contextlib import contextmanager

          @contextmanager
          def tag(name):
              print("<%s>" % name)
              yield
              print("</%s>" % name)

          >>> with tag("h1"):
          ...    print("foo")
          ...
          <h1>
          foo
          </h1>

     The function being decorated must return a *note generator:
     5c0.-iterator when called.  This iterator must yield exactly one
     value, which will be bound to the targets in the *note with: 29d.
     statement’s *note as: 8aa. clause, if any.

     At the point where the generator yields, the block nested in the
     *note with: 29d. statement is executed.  The generator is then
     resumed after the block is exited.  If an unhandled exception
     occurs in the block, it is reraised inside the generator at the
     point where the yield occurred.  Thus, you can use a *note try:
     9e9...*note except: 785...*note finally: 526. statement to trap the
     error (if any), or ensure that some cleanup takes place.  If an
     exception is trapped merely in order to log it or to perform some
     action (rather than to suppress it entirely), the generator must
     reraise that exception.  Otherwise the generator context manager
     will indicate to the *note with: 29d. statement that the exception
     has been handled, and execution will resume with the statement
     immediately following the *note with: 29d. statement.

     *note contextmanager(): 7ce. uses *note ContextDecorator: 7cd. so
     the context managers it creates can be used as decorators as well
     as in *note with: 29d. statements.  When used as a decorator, a new
     generator instance is implicitly created on each function call
     (this allows the otherwise "one-shot" context managers created by
     *note contextmanager(): 7ce. to meet the requirement that context
     managers support multiple invocations in order to be used as
     decorators).

     Changed in version 3.2: Use of *note ContextDecorator: 7cd.

 -- Function: contextlib.closing (thing)

     Return a context manager that closes `thing' upon completion of the
     block.  This is basically equivalent to:

          from contextlib import contextmanager

          @contextmanager
          def closing(thing):
              try:
                  yield thing
              finally:
                  thing.close()

     And lets you write code like this:

          from contextlib import closing
          from urllib.request import urlopen

          with closing(urlopen('http://www.python.org')) as page:
              for line in page:
                  print(line)

     without needing to explicitly close ‘page’.  Even if an error
     occurs, ‘page.close()’ will be called when the *note with: 29d.
     block is exited.

 -- Function: contextlib.suppress (*exceptions)

     Return a context manager that suppresses any of the specified
     exceptions if they occur in the body of a with statement and then
     resumes execution with the first statement following the end of the
     with statement.

     As with any other mechanism that completely suppresses exceptions,
     this context manager should be used only to cover very specific
     errors where silently continuing with program execution is known to
     be the right thing to do.

     For example:

          from contextlib import suppress

          with suppress(FileNotFoundError):
              os.remove('somefile.tmp')

          with suppress(FileNotFoundError):
              os.remove('someotherfile.tmp')

     This code is equivalent to:

          try:
              os.remove('somefile.tmp')
          except FileNotFoundError:
              pass

          try:
              os.remove('someotherfile.tmp')
          except FileNotFoundError:
              pass

     This context manager is *note reentrant: 2e64.

     New in version 3.4.

 -- Function: contextlib.redirect_stdout (new_target)

     Context manager for temporarily redirecting *note sys.stdout: 1ba.
     to another file or file-like object.

     This tool adds flexibility to existing functions or classes whose
     output is hardwired to stdout.

     For example, the output of *note help(): 3b6. normally is sent to
     `sys.stdout'.  You can capture that output in a string by
     redirecting the output to an *note io.StringIO: 41e. object:

          f = io.StringIO()
          with redirect_stdout(f):
              help(pow)
          s = f.getvalue()

     To send the output of *note help(): 3b6. to a file on disk,
     redirect the output to a regular file:

          with open('help.txt', 'w') as f:
              with redirect_stdout(f):
                  help(pow)

     To send the output of *note help(): 3b6. to `sys.stderr':

          with redirect_stdout(sys.stderr):
              help(pow)

     Note that the global side effect on *note sys.stdout: 1ba. means
     that this context manager is not suitable for use in library code
     and most threaded applications.  It also has no effect on the
     output of subprocesses.  However, it is still a useful approach for
     many utility scripts.

     This context manager is *note reentrant: 2e64.

     New in version 3.4.

 -- Function: contextlib.redirect_stderr (new_target)

     Similar to *note redirect_stdout(): 26f. but redirecting *note
     sys.stderr: 270. to another file or file-like object.

     This context manager is *note reentrant: 2e64.

     New in version 3.5.

 -- Class: contextlib.ContextDecorator

     A base class that enables a context manager to also be used as a
     decorator.

     Context managers inheriting from ‘ContextDecorator’ have to
     implement ‘__enter__’ and ‘__exit__’ as normal.  ‘__exit__’ retains
     its optional exception handling even when used as a decorator.

     ‘ContextDecorator’ is used by *note contextmanager(): 7ce, so you
     get this functionality automatically.

     Example of ‘ContextDecorator’:

          from contextlib import ContextDecorator

          class mycontext(ContextDecorator):
              def __enter__(self):
                  print('Starting')
                  return self

              def __exit__(self, *exc):
                  print('Finishing')
                  return False

          >>> @mycontext()
          ... def function():
          ...     print('The bit in the middle')
          ...
          >>> function()
          Starting
          The bit in the middle
          Finishing

          >>> with mycontext():
          ...     print('The bit in the middle')
          ...
          Starting
          The bit in the middle
          Finishing

     This change is just syntactic sugar for any construct of the
     following form:

          def f():
              with cm():
                  # Do stuff

     ‘ContextDecorator’ lets you instead write:

          @cm()
          def f():
              # Do stuff

     It makes it clear that the ‘cm’ applies to the whole function,
     rather than just a piece of it (and saving an indentation level is
     nice, too).

     Existing context managers that already have a base class can be
     extended by using ‘ContextDecorator’ as a mixin class:

          from contextlib import ContextDecorator

          class mycontext(ContextBaseClass, ContextDecorator):
              def __enter__(self):
                  return self

              def __exit__(self, *exc):
                  return False

          Note: As the decorated function must be able to be called
          multiple times, the underlying context manager must support
          use in multiple *note with: 29d. statements.  If this is not
          the case, then the original construct with the explicit *note
          with: 29d. statement inside the function should be used.

     New in version 3.2.

 -- Class: contextlib.ExitStack

     A context manager that is designed to make it easy to
     programmatically combine other context managers and cleanup
     functions, especially those that are optional or otherwise driven
     by input data.

     For example, a set of files may easily be handled in a single with
     statement as follows:

          with ExitStack() as stack:
              files = [stack.enter_context(open(fname)) for fname in filenames]
              # All opened files will automatically be closed at the end of
              # the with statement, even if attempts to open files later
              # in the list raise an exception

     Each instance maintains a stack of registered callbacks that are
     called in reverse order when the instance is closed (either
     explicitly or implicitly at the end of a *note with: 29d.
     statement).  Note that callbacks are `not' invoked implicitly when
     the context stack instance is garbage collected.

     This stack model is used so that context managers that acquire
     their resources in their ‘__init__’ method (such as file objects)
     can be handled correctly.

     Since registered callbacks are invoked in the reverse order of
     registration, this ends up behaving as if multiple nested *note
     with: 29d. statements had been used with the registered set of
     callbacks.  This even extends to exception handling - if an inner
     callback suppresses or replaces an exception, then outer callbacks
     will be passed arguments based on that updated state.

     This is a relatively low level API that takes care of the details
     of correctly unwinding the stack of exit callbacks.  It provides a
     suitable foundation for higher level context managers that
     manipulate the exit stack in application specific ways.

     New in version 3.3.

      -- Method: enter_context (cm)

          Enters a new context manager and adds its *note __exit__():
          908. method to the callback stack.  The return value is the
          result of the context manager’s own *note __enter__(): 907.
          method.

          These context managers may suppress exceptions just as they
          normally would if used directly as part of a *note with: 29d.
          statement.

      -- Method: push (exit)

          Adds a context manager’s *note __exit__(): 908. method to the
          callback stack.

          As ‘__enter__’ is `not' invoked, this method can be used to
          cover part of an *note __enter__(): 907. implementation with a
          context manager’s own *note __exit__(): 908. method.

          If passed an object that is not a context manager, this method
          assumes it is a callback with the same signature as a context
          manager’s *note __exit__(): 908. method and adds it directly
          to the callback stack.

          By returning true values, these callbacks can suppress
          exceptions the same way context manager *note __exit__(): 908.
          methods can.

          The passed in object is returned from the function, allowing
          this method to be used as a function decorator.

      -- Method: callback (callback, *args, **kwds)

          Accepts an arbitrary callback function and arguments and adds
          it to the callback stack.

          Unlike the other methods, callbacks added this way cannot
          suppress exceptions (as they are never passed the exception
          details).

          The passed in callback is returned from the function, allowing
          this method to be used as a function decorator.

      -- Method: pop_all ()

          Transfers the callback stack to a fresh *note ExitStack: 604.
          instance and returns it.  No callbacks are invoked by this
          operation - instead, they will now be invoked when the new
          stack is closed (either explicitly or implicitly at the end of
          a *note with: 29d. statement).

          For example, a group of files can be opened as an "all or
          nothing" operation as follows:

               with ExitStack() as stack:
                   files = [stack.enter_context(open(fname)) for fname in filenames]
                   # Hold onto the close method, but don't call it yet.
                   close_files = stack.pop_all().close
                   # If opening any file fails, all previously opened files will be
                   # closed automatically. If all files are opened successfully,
                   # they will remain open even after the with statement ends.
                   # close_files() can then be invoked explicitly to close them all.

      -- Method: close ()

          Immediately unwinds the callback stack, invoking callbacks in
          the reverse order of registration.  For any context managers
          and exit callbacks registered, the arguments passed in will
          indicate that no exception occurred.


File: python.info,  Node: Examples and Recipes<2>,  Next: Single use reusable and reentrant context managers,  Prev: Utilities,  Up: contextlib --- Utilities for with-statement contexts

5.29.6.2 Examples and Recipes
.............................

This section describes some examples and recipes for making effective
use of the tools provided by *note contextlib: 24.

* Menu:

* Supporting a variable number of context managers:: 
* Simplifying support for single optional context managers:: 
* Catching exceptions from __enter__ methods:: 
* Cleaning up in an __enter__ implementation:: 
* Replacing any use of try-finally and flag variables:: 
* Using a context manager as a function decorator:: 


File: python.info,  Node: Supporting a variable number of context managers,  Next: Simplifying support for single optional context managers,  Up: Examples and Recipes<2>

5.29.6.3 Supporting a variable number of context managers
.........................................................

The primary use case for *note ExitStack: 604. is the one given in the
class documentation: supporting a variable number of context managers
and other cleanup operations in a single *note with: 29d. statement.
The variability may come from the number of context managers needed
being driven by user input (such as opening a user specified collection
of files), or from some of the context managers being optional:

     with ExitStack() as stack:
         for resource in resources:
             stack.enter_context(resource)
         if need_special_resource():
             special = acquire_special_resource()
             stack.callback(release_special_resource, special)
         # Perform operations that use the acquired resources

As shown, *note ExitStack: 604. also makes it quite easy to use *note
with: 29d. statements to manage arbitrary resources that don’t natively
support the context management protocol.


File: python.info,  Node: Simplifying support for single optional context managers,  Next: Catching exceptions from __enter__ methods,  Prev: Supporting a variable number of context managers,  Up: Examples and Recipes<2>

5.29.6.4 Simplifying support for single optional context managers
.................................................................

In the specific case of a single optional context manager, *note
ExitStack: 604. instances can be used as a "do nothing" context manager,
allowing a context manager to easily be omitted without affecting the
overall structure of the source code:

     def debug_trace(details):
         if __debug__:
             return TraceContext(details)
         # Don't do anything special with the context in release mode
         return ExitStack()

     with debug_trace():
         # Suite is traced in debug mode, but runs normally otherwise


File: python.info,  Node: Catching exceptions from __enter__ methods,  Next: Cleaning up in an __enter__ implementation,  Prev: Simplifying support for single optional context managers,  Up: Examples and Recipes<2>

5.29.6.5 Catching exceptions from ‘__enter__’ methods
.....................................................

It is occasionally desirable to catch exceptions from an ‘__enter__’
method implementation, `without' inadvertently catching exceptions from
the *note with: 29d. statement body or the context manager’s ‘__exit__’
method.  By using *note ExitStack: 604. the steps in the context
management protocol can be separated slightly in order to allow this:

     stack = ExitStack()
     try:
         x = stack.enter_context(cm)
     except Exception:
         # handle __enter__ exception
     else:
         with stack:
             # Handle normal case

Actually needing to do this is likely to indicate that the underlying
API should be providing a direct resource management interface for use
with *note try: 9e9./*note except: 785./*note finally: 526. statements,
but not all APIs are well designed in that regard.  When a context
manager is the only resource management API provided, then *note
ExitStack: 604. can make it easier to handle various situations that
can’t be handled directly in a *note with: 29d. statement.


File: python.info,  Node: Cleaning up in an __enter__ implementation,  Next: Replacing any use of try-finally and flag variables,  Prev: Catching exceptions from __enter__ methods,  Up: Examples and Recipes<2>

5.29.6.6 Cleaning up in an ‘__enter__’ implementation
.....................................................

As noted in the documentation of *note ExitStack.push(): 2e66, this
method can be useful in cleaning up an already allocated resource if
later steps in the *note __enter__(): 907. implementation fail.

Here’s an example of doing this for a context manager that accepts
resource acquisition and release functions, along with an optional
validation function, and maps them to the context management protocol:

     from contextlib import contextmanager, AbstractContextManager, ExitStack

     class ResourceManager(AbstractContextManager):

         def __init__(self, acquire_resource, release_resource, check_resource_ok=None):
             self.acquire_resource = acquire_resource
             self.release_resource = release_resource
             if check_resource_ok is None:
                 def check_resource_ok(resource):
                     return True
             self.check_resource_ok = check_resource_ok

         @contextmanager
         def _cleanup_on_error(self):
             with ExitStack() as stack:
                 stack.push(self)
                 yield
                 # The validation check passed and didn't raise an exception
                 # Accordingly, we want to keep the resource, and pass it
                 # back to our caller
                 stack.pop_all()

         def __enter__(self):
             resource = self.acquire_resource()
             with self._cleanup_on_error():
                 if not self.check_resource_ok(resource):
                     msg = "Failed validation for {!r}"
                     raise RuntimeError(msg.format(resource))
             return resource

         def __exit__(self, *exc_details):
             # We don't need to duplicate any of our resource release logic
             self.release_resource()


File: python.info,  Node: Replacing any use of try-finally and flag variables,  Next: Using a context manager as a function decorator,  Prev: Cleaning up in an __enter__ implementation,  Up: Examples and Recipes<2>

5.29.6.7 Replacing any use of ‘try-finally’ and flag variables
..............................................................

A pattern you will sometimes see is a ‘try-finally’ statement with a
flag variable to indicate whether or not the body of the ‘finally’
clause should be executed.  In its simplest form (that can’t already be
handled just by using an ‘except’ clause instead), it looks something
like this:

     cleanup_needed = True
     try:
         result = perform_operation()
         if result:
             cleanup_needed = False
     finally:
         if cleanup_needed:
             cleanup_resources()

As with any ‘try’ statement based code, this can cause problems for
development and review, because the setup code and the cleanup code can
end up being separated by arbitrarily long sections of code.

*note ExitStack: 604. makes it possible to instead register a callback
for execution at the end of a ‘with’ statement, and then later decide to
skip executing that callback:

     from contextlib import ExitStack

     with ExitStack() as stack:
         stack.callback(cleanup_resources)
         result = perform_operation()
         if result:
             stack.pop_all()

This allows the intended cleanup up behaviour to be made explicit up
front, rather than requiring a separate flag variable.

If a particular application uses this pattern a lot, it can be
simplified even further by means of a small helper class:

     from contextlib import ExitStack

     class Callback(ExitStack):
         def __init__(self, callback, *args, **kwds):
             super(Callback, self).__init__()
             self.callback(callback, *args, **kwds)

         def cancel(self):
             self.pop_all()

     with Callback(cleanup_resources) as cb:
         result = perform_operation()
         if result:
             cb.cancel()

If the resource cleanup isn’t already neatly bundled into a standalone
function, then it is still possible to use the decorator form of *note
ExitStack.callback(): 2e67. to declare the resource cleanup in advance:

     from contextlib import ExitStack

     with ExitStack() as stack:
         @stack.callback
         def cleanup_resources():
             ...
         result = perform_operation()
         if result:
             stack.pop_all()

Due to the way the decorator protocol works, a callback function
declared this way cannot take any parameters.  Instead, any resources to
be released must be accessed as closure variables.


File: python.info,  Node: Using a context manager as a function decorator,  Prev: Replacing any use of try-finally and flag variables,  Up: Examples and Recipes<2>

5.29.6.8 Using a context manager as a function decorator
........................................................

*note ContextDecorator: 7cd. makes it possible to use a context manager
in both an ordinary ‘with’ statement and also as a function decorator.

For example, it is sometimes useful to wrap functions or groups of
statements with a logger that can track the time of entry and time of
exit.  Rather than writing both a function decorator and a context
manager for the task, inheriting from *note ContextDecorator: 7cd.
provides both capabilities in a single definition:

     from contextlib import ContextDecorator
     import logging

     logging.basicConfig(level=logging.INFO)

     class track_entry_and_exit(ContextDecorator):
         def __init__(self, name):
             self.name = name

         def __enter__(self):
             logging.info('Entering: {}'.format(self.name))

         def __exit__(self, exc_type, exc, exc_tb):
             logging.info('Exiting: {}'.format(self.name))

Instances of this class can be used as both a context manager:

     with track_entry_and_exit('widget loader'):
         print('Some time consuming activity goes here')
         load_widget()

And also as a function decorator:

     @track_entry_and_exit('widget loader')
     def activity():
         print('Some time consuming activity goes here')
         load_widget()

Note that there is one additional limitation when using context managers
as function decorators: there’s no way to access the return value of
*note __enter__(): 907.  If that value is needed, then it is still
necessary to use an explicit ‘with’ statement.

See also
........

PEP 343(1) - The "with" statement

     The specification, background, and examples for the Python *note
     with: 29d. statement.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0343


File: python.info,  Node: Single use reusable and reentrant context managers,  Prev: Examples and Recipes<2>,  Up: contextlib --- Utilities for with-statement contexts

5.29.6.9 Single use, reusable and reentrant context managers
............................................................

Most context managers are written in a way that means they can only be
used effectively in a *note with: 29d. statement once.  These single use
context managers must be created afresh each time they’re used -
attempting to use them a second time will trigger an exception or
otherwise not work correctly.

This common limitation means that it is generally advisable to create
context managers directly in the header of the *note with: 29d.
statement where they are used (as shown in all of the usage examples
above).

Files are an example of effectively single use context managers, since
the first *note with: 29d. statement will close the file, preventing any
further IO operations using that file object.

Context managers created using *note contextmanager(): 7ce. are also
single use context managers, and will complain about the underlying
generator failing to yield if an attempt is made to use them a second
time:

     >>> from contextlib import contextmanager
     >>> @contextmanager
     ... def singleuse():
     ...     print("Before")
     ...     yield
     ...     print("After")
     ...
     >>> cm = singleuse()
     >>> with cm:
     ...     pass
     ...
     Before
     After
     >>> with cm:
     ...    pass
     ...
     Traceback (most recent call last):
         ...
     RuntimeError: generator didn't yield

* Menu:

* Reentrant context managers:: 
* Reusable context managers:: 


File: python.info,  Node: Reentrant context managers,  Next: Reusable context managers,  Up: Single use reusable and reentrant context managers

5.29.6.10 Reentrant context managers
....................................

More sophisticated context managers may be "reentrant".  These context
managers can not only be used in multiple *note with: 29d. statements,
but may also be used `inside' a *note with: 29d. statement that is
already using the same context manager.

*note threading.RLock: 84f. is an example of a reentrant context
manager, as are *note suppress(): 41d. and *note redirect_stdout(): 26f.
Here’s a very simple example of reentrant use:

     >>> from contextlib import redirect_stdout
     >>> from io import StringIO
     >>> stream = StringIO()
     >>> write_to_stream = redirect_stdout(stream)
     >>> with write_to_stream:
     ...     print("This is written to the stream rather than stdout")
     ...     with write_to_stream:
     ...         print("This is also written to the stream")
     ...
     >>> print("This is written directly to stdout")
     This is written directly to stdout
     >>> print(stream.getvalue())
     This is written to the stream rather than stdout
     This is also written to the stream

Real world examples of reentrancy are more likely to involve multiple
functions calling each other and hence be far more complicated than this
example.

Note also that being reentrant is `not' the same thing as being thread
safe.  *note redirect_stdout(): 26f, for example, is definitely not
thread safe, as it makes a global modification to the system state by
binding *note sys.stdout: 1ba. to a different stream.


File: python.info,  Node: Reusable context managers,  Prev: Reentrant context managers,  Up: Single use reusable and reentrant context managers

5.29.6.11 Reusable context managers
...................................

Distinct from both single use and reentrant context managers are
"reusable" context managers (or, to be completely explicit, "reusable,
but not reentrant" context managers, since reentrant context managers
are also reusable).  These context managers support being used multiple
times, but will fail (or otherwise not work correctly) if the specific
context manager instance has already been used in a containing with
statement.

*note threading.Lock: 1ccd. is an example of a reusable, but not
reentrant, context manager (for a reentrant lock, it is necessary to use
*note threading.RLock: 84f. instead).

Another example of a reusable, but not reentrant, context manager is
*note ExitStack: 604, as it invokes `all' currently registered callbacks
when leaving any with statement, regardless of where those callbacks
were added:

     >>> from contextlib import ExitStack
     >>> stack = ExitStack()
     >>> with stack:
     ...     stack.callback(print, "Callback: from first context")
     ...     print("Leaving first context")
     ...
     Leaving first context
     Callback: from first context
     >>> with stack:
     ...     stack.callback(print, "Callback: from second context")
     ...     print("Leaving second context")
     ...
     Leaving second context
     Callback: from second context
     >>> with stack:
     ...     stack.callback(print, "Callback: from outer context")
     ...     with stack:
     ...         stack.callback(print, "Callback: from inner context")
     ...         print("Leaving inner context")
     ...     print("Leaving outer context")
     ...
     Leaving inner context
     Callback: from inner context
     Callback: from outer context
     Leaving outer context

As the output from the example shows, reusing a single stack object
across multiple with statements works correctly, but attempting to nest
them will cause the stack to be cleared at the end of the innermost with
statement, which is unlikely to be desirable behaviour.

Using separate *note ExitStack: 604. instances instead of reusing a
single instance avoids that problem:

     >>> from contextlib import ExitStack
     >>> with ExitStack() as outer_stack:
     ...     outer_stack.callback(print, "Callback: from outer context")
     ...     with ExitStack() as inner_stack:
     ...         inner_stack.callback(print, "Callback: from inner context")
     ...         print("Leaving inner context")
     ...     print("Leaving outer context")
     ...
     Leaving inner context
     Callback: from inner context
     Leaving outer context
     Callback: from outer context


File: python.info,  Node: abc --- Abstract Base Classes,  Next: atexit --- Exit handlers,  Prev: contextlib --- Utilities for with-statement contexts,  Up: Python Runtime Services

5.29.7 ‘abc’ — Abstract Base Classes
------------------------------------

`Source code:' Lib/abc.py(1)

__________________________________________________________________

This module provides the infrastructure for defining *note abstract base
classes: 776. (ABCs) in Python, as outlined in PEP 3119(2); see the PEP
for why this was added to Python.  (See also PEP 3141(3) and the *note
numbers: bf. module regarding a type hierarchy for numbers based on
ABCs.)

The *note collections: 1e. module has some concrete classes that derive
from ABCs; these can, of course, be further derived.  In addition the
*note collections.abc: 1f. submodule has some ABCs that can be used to
test whether a class or instance provides a particular interface, for
example, is it hashable or a mapping.

This module provides the following classes:

 -- Class: abc.ABCMeta

     Metaclass for defining Abstract Base Classes (ABCs).

     Use this metaclass to create an ABC. An ABC can be subclassed
     directly, and then acts as a mix-in class.  You can also register
     unrelated concrete classes (even built-in classes) and unrelated
     ABCs as "virtual subclasses" – these and their descendants will be
     considered subclasses of the registering ABC by the built-in *note
     issubclass(): 999. function, but the registering ABC won’t show up
     in their MRO (Method Resolution Order) nor will method
     implementations defined by the registering ABC be callable (not
     even via *note super(): 56a.).  (4)

     Classes created with a metaclass of *note ABCMeta: 409. have the
     following method:

      -- Method: register (subclass)

          Register `subclass' as a "virtual subclass" of this ABC. For
          example:

               from abc import ABCMeta

               class MyABC(metaclass=ABCMeta):
                   pass

               MyABC.register(tuple)

               assert issubclass(tuple, MyABC)
               assert isinstance((), MyABC)

          Changed in version 3.3: Returns the registered subclass, to
          allow usage as a class decorator.

          Changed in version 3.4: To detect calls to *note register():
          5f7, you can use the *note get_cache_token(): 407. function.

     You can also override this method in an abstract base class:

      -- Method: __subclasshook__ (subclass)

          (Must be defined as a class method.)

          Check whether `subclass' is considered a subclass of this ABC.
          This means that you can customize the behavior of ‘issubclass’
          further without the need to call *note register(): 5f7. on
          every class you want to consider a subclass of the ABC. (This
          class method is called from the ‘__subclasscheck__()’ method
          of the ABC.)

          This method should return ‘True’, ‘False’ or ‘NotImplemented’.
          If it returns ‘True’, the `subclass' is considered a subclass
          of this ABC. If it returns ‘False’, the `subclass' is not
          considered a subclass of this ABC, even if it would normally
          be one.  If it returns ‘NotImplemented’, the subclass check is
          continued with the usual mechanism.

     For a demonstration of these concepts, look at this example ABC
     definition:

          class Foo:
              def __getitem__(self, index):
                  ...
              def __len__(self):
                  ...
              def get_iterator(self):
                  return iter(self)

          class MyIterable(metaclass=ABCMeta):

              @abstractmethod
              def __iter__(self):
                  while False:
                      yield None

              def get_iterator(self):
                  return self.__iter__()

              @classmethod
              def __subclasshook__(cls, C):
                  if cls is MyIterable:
                      if any("__iter__" in B.__dict__ for B in C.__mro__):
                          return True
                  return NotImplemented

          MyIterable.register(Foo)

     The ABC ‘MyIterable’ defines the standard iterable method, *note
     __iter__(): fe1, as an abstract method.  The implementation given
     here can still be called from subclasses.  The ‘get_iterator()’
     method is also part of the ‘MyIterable’ abstract base class, but it
     does not have to be overridden in non-abstract derived classes.

     The *note __subclasshook__(): 2e77. class method defined here says
     that any class that has an *note __iter__(): fe1. method in its
     *note __dict__: df4. (or in that of one of its base classes,
     accessed via the *note __mro__: fbb. list) is considered a
     ‘MyIterable’ too.

     Finally, the last line makes ‘Foo’ a virtual subclass of
     ‘MyIterable’, even though it does not define an *note __iter__():
     fe1. method (it uses the old-style iterable protocol, defined in
     terms of *note __len__(): a47. and *note __getitem__(): a84.).
     Note that this will not make ‘get_iterator’ available as a method
     of ‘Foo’, so it is provided separately.

 -- Class: abc.ABC

     A helper class that has *note ABCMeta: 409. as its metaclass.  With
     this class, an abstract base class can be created by simply
     deriving from *note ABC: 408, avoiding sometimes confusing
     metaclass usage.

     Note that the type of *note ABC: 408. is still *note ABCMeta: 409,
     therefore inheriting from *note ABC: 408. requires the usual
     precautions regarding metaclass usage, as multiple inheritance may
     lead to metaclass conflicts.

     New in version 3.4.

The *note abc: 4. module also provides the following decorators:

 -- Function: @abc.abstractmethod

     A decorator indicating abstract methods.

     Using this decorator requires that the class’s metaclass is *note
     ABCMeta: 409. or is derived from it.  A class that has a metaclass
     derived from *note ABCMeta: 409. cannot be instantiated unless all
     of its abstract methods and properties are overridden.  The
     abstract methods can be called using any of the normal ’super’ call
     mechanisms.  *note abstractmethod(): 5f2. may be used to declare
     abstract methods for properties and descriptors.

     Dynamically adding abstract methods to a class, or attempting to
     modify the abstraction status of a method or class once it is
     created, are not supported.  The *note abstractmethod(): 5f2. only
     affects subclasses derived using regular inheritance; "virtual
     subclasses" registered with the ABC’s ‘register()’ method are not
     affected.

     When *note abstractmethod(): 5f2. is applied in combination with
     other method descriptors, it should be applied as the innermost
     decorator, as shown in the following usage examples:

          class C(metaclass=ABCMeta):
              @abstractmethod
              def my_abstract_method(self, ...):
                  ...
              @classmethod
              @abstractmethod
              def my_abstract_classmethod(cls, ...):
                  ...
              @staticmethod
              @abstractmethod
              def my_abstract_staticmethod(...):
                  ...

              @property
              @abstractmethod
              def my_abstract_property(self):
                  ...
              @my_abstract_property.setter
              @abstractmethod
              def my_abstract_property(self, val):
                  ...

              @abstractmethod
              def _get_x(self):
                  ...
              @abstractmethod
              def _set_x(self, val):
                  ...
              x = property(_get_x, _set_x)

     In order to correctly interoperate with the abstract base class
     machinery, the descriptor must identify itself as abstract using
     ‘__isabstractmethod__’.  In general, this attribute should be
     ‘True’ if any of the methods used to compose the descriptor are
     abstract.  For example, Python’s built-in property does the
     equivalent of:

          class Descriptor:
              ...
              @property
              def __isabstractmethod__(self):
                  return any(getattr(f, '__isabstractmethod__', False) for
                             f in (self._fget, self._fset, self._fdel))

          Note: Unlike Java abstract methods, these abstract methods may
          have an implementation.  This implementation can be called via
          the *note super(): 56a. mechanism from the class that
          overrides it.  This could be useful as an end-point for a
          super-call in a framework that uses cooperative
          multiple-inheritance.

 -- Function: @abc.abstractclassmethod

     A subclass of the built-in *note classmethod(): 5f4, indicating an
     abstract classmethod.  Otherwise it is similar to *note
     abstractmethod(): 5f2.

     This special case is deprecated, as the *note classmethod(): 5f4.
     decorator is now correctly identified as abstract when applied to
     an abstract method:

          class C(metaclass=ABCMeta):
              @classmethod
              @abstractmethod
              def my_abstract_classmethod(cls, ...):
                  ...

     New in version 3.2.

     Deprecated since version 3.3: It is now possible to use *note
     classmethod: 5f4. with *note abstractmethod(): 5f2, making this
     decorator redundant.

 -- Function: @abc.abstractstaticmethod

     A subclass of the built-in *note staticmethod(): 5f6, indicating an
     abstract staticmethod.  Otherwise it is similar to *note
     abstractmethod(): 5f2.

     This special case is deprecated, as the *note staticmethod(): 5f6.
     decorator is now correctly identified as abstract when applied to
     an abstract method:

          class C(metaclass=ABCMeta):
              @staticmethod
              @abstractmethod
              def my_abstract_staticmethod(...):
                  ...

     New in version 3.2.

     Deprecated since version 3.3: It is now possible to use *note
     staticmethod: 5f6. with *note abstractmethod(): 5f2, making this
     decorator redundant.

 -- Function: @abc.abstractproperty (fget=None, fset=None, fdel=None,
          doc=None)

     A subclass of the built-in *note property(): 377, indicating an
     abstract property.

     Using this function requires that the class’s metaclass is *note
     ABCMeta: 409. or is derived from it.  A class that has a metaclass
     derived from *note ABCMeta: 409. cannot be instantiated unless all
     of its abstract methods and properties are overridden.  The
     abstract properties can be called using any of the normal ’super’
     call mechanisms.

     This special case is deprecated, as the *note property(): 377.
     decorator is now correctly identified as abstract when applied to
     an abstract method:

          class C(metaclass=ABCMeta):
              @property
              @abstractmethod
              def my_abstract_property(self):
                  ...

     The above example defines a read-only property; you can also define
     a read-write abstract property by appropriately marking one or more
     of the underlying methods as abstract:

          class C(metaclass=ABCMeta):
              @property
              def x(self):
                  ...

              @x.setter
              @abstractmethod
              def x(self, val):
                  ...

     If only some components are abstract, only those components need to
     be updated to create a concrete property in a subclass:

          class D(C):
              @C.x.setter
              def x(self, val):
                  ...

     Deprecated since version 3.3: It is now possible to use *note
     property: 377, ‘property.getter()’, ‘property.setter()’ and
     ‘property.deleter()’ with *note abstractmethod(): 5f2, making this
     decorator redundant.

The *note abc: 4. module also provides the following functions:

 -- Function: abc.get_cache_token ()

     Returns the current abstract base class cache token.

     The token is an opaque object (that supports equality testing)
     identifying the current version of the abstract base class cache
     for virtual subclasses.  The token changes with every call to *note
     ABCMeta.register(): 5f7. on any ABC.

     New in version 3.4.

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/abc.py

   (2) https://www.python.org/dev/peps/pep-3119

   (3) https://www.python.org/dev/peps/pep-3141

   (4) C++ programmers should note that Python’s virtual base class
concept is not the same as C++’s.


File: python.info,  Node: atexit --- Exit handlers,  Next: traceback --- Print or retrieve a stack traceback,  Prev: abc --- Abstract Base Classes,  Up: Python Runtime Services

5.29.8 ‘atexit’ — Exit handlers
-------------------------------

The *note atexit: c. module defines functions to register and unregister
cleanup functions.  Functions thus registered are automatically executed
upon normal interpreter termination.  *note atexit: c. runs these
functions in the `reverse' order in which they were registered; if you
register ‘A’, ‘B’, and ‘C’, at interpreter termination time they will be
run in the order ‘C’, ‘B’, ‘A’.

`Note:' The functions registered via this module are not called when the
program is killed by a signal not handled by Python, when a Python fatal
internal error is detected, or when *note os._exit(): 10c1. is called.

 -- Function: atexit.register (func, *args, **kargs)

     Register `func' as a function to be executed at termination.  Any
     optional arguments that are to be passed to `func' must be passed
     as arguments to *note register(): b0b.  It is possible to register
     the same function and arguments more than once.

     At normal program termination (for instance, if *note sys.exit():
     95a. is called or the main module’s execution completes), all
     functions registered are called in last in, first out order.  The
     assumption is that lower level modules will normally be imported
     before higher level modules and thus must be cleaned up later.

     If an exception is raised during execution of the exit handlers, a
     traceback is printed (unless *note SystemExit: 1a2. is raised) and
     the exception information is saved.  After all exit handlers have
     had a chance to run the last exception to be raised is re-raised.

     This function returns `func', which makes it possible to use it as
     a decorator.

 -- Function: atexit.unregister (func)

     Remove `func' from the list of functions to be run at interpreter
     shutdown.  After calling *note unregister(): 2e7a, `func' is
     guaranteed not to be called when the interpreter shuts down, even
     if it was registered more than once.  *note unregister(): 2e7a.
     silently does nothing if `func' was not previously registered.

See also
........

Module *note readline: dc.

     Useful example of *note atexit: c. to read and write *note
     readline: dc. history files.

* Menu:

* atexit Example:: 


File: python.info,  Node: atexit Example,  Up: atexit --- Exit handlers

5.29.8.1 ‘atexit’ Example
.........................

The following simple example demonstrates how a module can initialize a
counter from a file when it is imported and save the counter’s updated
value automatically when the program terminates without relying on the
application making an explicit call into this module at termination.

     try:
         with open("counterfile") as infile:
             _count = int(infile.read())
     except FileNotFoundError:
         _count = 0

     def incrcounter(n):
         global _count
         _count = _count + n

     def savecounter():
         with open("counterfile", "w") as outfile:
             outfile.write("%d" % _count)

     import atexit
     atexit.register(savecounter)

Positional and keyword arguments may also be passed to *note register():
b0b. to be passed along to the registered function when it is called:

     def goodbye(name, adjective):
         print('Goodbye, %s, it was %s to meet you.' % (name, adjective))

     import atexit
     atexit.register(goodbye, 'Donny', 'nice')

     # or:
     atexit.register(goodbye, adjective='nice', name='Donny')

Usage as a *note decorator: f6c.:

     import atexit

     @atexit.register
     def goodbye():
         print("You are now leaving the Python sector.")

This only works with functions that can be called without arguments.


File: python.info,  Node: traceback --- Print or retrieve a stack traceback,  Next: __future__ --- Future statement definitions,  Prev: atexit --- Exit handlers,  Up: Python Runtime Services

5.29.9 ‘traceback’ — Print or retrieve a stack traceback
--------------------------------------------------------

This module provides a standard interface to extract, format and print
stack traces of Python programs.  It exactly mimics the behavior of the
Python interpreter when it prints a stack trace.  This is useful when
you want to print stack traces under program control, such as in a
"wrapper" around the interpreter.

The module uses traceback objects — this is the object type that is
stored in the *note sys.last_traceback: 2d1b. variable and returned as
the third item from *note sys.exc_info(): 8ca.

The module defines the following functions:

 -- Function: traceback.print_tb (tb, limit=None, file=None)

     Print up to `limit' stack trace entries from traceback object `tb'
     (starting from the caller’s frame) if `limit' is positive.
     Otherwise, print the last ‘abs(limit)’ entries.  If `limit' is
     omitted or ‘None’, all entries are printed.  If `file' is omitted
     or ‘None’, the output goes to ‘sys.stderr’; otherwise it should be
     an open file or file-like object to receive the output.

     Changed in version 3.5: Added negative `limit' support.

 -- Function: traceback.print_exception (etype, value, tb, limit=None,
          file=None, chain=True)

     Print exception information and stack trace entries from traceback
     object `tb' to `file'.  This differs from *note print_tb(): 34a. in
     the following ways:

        * if `tb' is not ‘None’, it prints a header ‘Traceback (most
          recent call last):’

        * it prints the exception `etype' and `value' after the stack
          trace

        * if `etype' is *note SyntaxError: 3a6. and `value' has the
          appropriate format, it prints the line where the syntax error
          occurred with a caret indicating the approximate position of
          the error.

     The optional `limit' argument has the same meaning as for *note
     print_tb(): 34a.  If `chain' is true (the default), then chained
     exceptions (the ‘__cause__’ or ‘__context__’ attributes of the
     exception) will be printed as well, like the interpreter itself
     does when printing an unhandled exception.

 -- Function: traceback.print_exc (limit=None, file=None, chain=True)

     This is a shorthand for ‘print_exception(*sys.exc_info(), limit,
     file, chain)’.

 -- Function: traceback.print_last (limit=None, file=None, chain=True)

     This is a shorthand for ‘print_exception(sys.last_type,
     sys.last_value, sys.last_traceback, limit, file, chain)’.  In
     general it will work only after an exception has reached an
     interactive prompt (see *note sys.last_type: 8c3.).

 -- Function: traceback.print_stack (f=None, limit=None, file=None)

     Print up to `limit' stack trace entries (starting from the
     invocation point) if `limit' is positive.  Otherwise, print the
     last ‘abs(limit)’ entries.  If `limit' is omitted or ‘None’, all
     entries are printed.  The optional `f' argument can be used to
     specify an alternate stack frame to start.  The optional `file'
     argument has the same meaning as for *note print_tb(): 34a.

     Changed in version 3.5: Added negative `limit' support.

 -- Function: traceback.extract_tb (tb, limit=None)

     Return a list of "pre-processed" stack trace entries extracted from
     the traceback object `tb'.  It is useful for alternate formatting
     of stack traces.  The optional `limit' argument has the same
     meaning as for *note print_tb(): 34a.  A "pre-processed" stack
     trace entry is a 4-tuple (`filename', `line number', `function
     name', `text') representing the information that is usually printed
     for a stack trace.  The `text' is a string with leading and
     trailing whitespace stripped; if the source is not available it is
     ‘None’.

 -- Function: traceback.extract_stack (f=None, limit=None)

     Extract the raw traceback from the current stack frame.  The return
     value has the same format as for *note extract_tb(): 2e81.  The
     optional `f' and `limit' arguments have the same meaning as for
     *note print_stack(): 34b.

 -- Function: traceback.format_list (extracted_list)

     Given a list of tuples as returned by *note extract_tb(): 2e81. or
     *note extract_stack(): 2e82, return a list of strings ready for
     printing.  Each string in the resulting list corresponds to the
     item with the same index in the argument list.  Each string ends in
     a newline; the strings may contain internal newlines as well, for
     those items whose source text line is not ‘None’.

 -- Function: traceback.format_exception_only (etype, value)

     Format the exception part of a traceback.  The arguments are the
     exception type and value such as given by ‘sys.last_type’ and
     ‘sys.last_value’.  The return value is a list of strings, each
     ending in a newline.  Normally, the list contains a single string;
     however, for *note SyntaxError: 3a6. exceptions, it contains
     several lines that (when printed) display detailed information
     about where the syntax error occurred.  The message indicating
     which exception occurred is the always last string in the list.

 -- Function: traceback.format_exception (etype, value, tb, limit=None,
          chain=True)

     Format a stack trace and the exception information.  The arguments
     have the same meaning as the corresponding arguments to *note
     print_exception(): 1a03.  The return value is a list of strings,
     each ending in a newline and some containing internal newlines.
     When these lines are concatenated and printed, exactly the same
     text is printed as does *note print_exception(): 1a03.

 -- Function: traceback.format_exc (limit=None, chain=True)

     This is like ‘print_exc(limit)’ but returns a string instead of
     printing to a file.

 -- Function: traceback.format_tb (tb, limit=None)

     A shorthand for ‘format_list(extract_tb(tb, limit))’.

 -- Function: traceback.format_stack (f=None, limit=None)

     A shorthand for ‘format_list(extract_stack(f, limit))’.

 -- Function: traceback.clear_frames (tb)

     Clears the local variables of all the stack frames in a traceback
     `tb' by calling the ‘clear()’ method of each frame object.

     New in version 3.4.

 -- Function: traceback.walk_stack (f)

     Walk a stack following ‘f.f_back’ from the given frame, yielding
     the frame and line number for each frame.  If `f' is ‘None’, the
     current stack is used.  This helper is used with *note
     StackSummary.extract(): 2e87.

     New in version 3.5.

 -- Function: traceback.walk_tb (tb)

     Walk a traceback following ‘tb_next’ yielding the frame and line
     number for each frame.  This helper is used with *note
     StackSummary.extract(): 2e87.

     New in version 3.5.

The module also defines the following classes:

* Menu:

* TracebackException Objects:: 
* StackSummary Objects:: 
* FrameSummary Objects:: 
* Traceback Examples:: 


File: python.info,  Node: TracebackException Objects,  Next: StackSummary Objects,  Up: traceback --- Print or retrieve a stack traceback

5.29.9.1 ‘TracebackException’ Objects
.....................................

New in version 3.5.

*note TracebackException: 347. objects are created from actual
exceptions to capture data for later printing in a lightweight fashion.

 -- Class: traceback.TracebackException (exc_type, exc_value,
          exc_traceback, *, limit=None, lookup_lines=True,
          capture_locals=False)

     Capture an exception for later rendering.  `limit', `lookup_lines'
     and `capture_locals' are as for the *note StackSummary: 348. class.

     Note that when locals are captured, they are also shown in the
     traceback.

      -- Attribute: __cause__

          A *note TracebackException: 347. of the original ‘__cause__’.

      -- Attribute: __context__

          A *note TracebackException: 347. of the original
          ‘__context__’.

      -- Attribute: __suppress_context__

          The ‘__suppress_context__’ value from the original exception.

      -- Attribute: stack

          A *note StackSummary: 348. representing the traceback.

      -- Attribute: exc_type

          The class of the original traceback.

      -- Attribute: filename

          For syntax errors - the file name where the error occurred.

      -- Attribute: lineno

          For syntax errors - the line number where the error occurred.

      -- Attribute: text

          For syntax errors - the text where the error occurred.

      -- Attribute: offset

          For syntax errors - the offset into the text where the error
          occurred.

      -- Attribute: msg

          For syntax errors - the compiler error message.

      -- Class Method: from_exception (exc, *, limit=None,
               lookup_lines=True, capture_locals=False)

          Capture an exception for later rendering.  `limit',
          `lookup_lines' and `capture_locals' are as for the *note
          StackSummary: 348. class.

          Note that when locals are captured, they are also shown in the
          traceback.

      -- Method: format (*, chain=True)

          Format the exception.

          If `chain' is not ‘True’, ‘__cause__’ and ‘__context__’ will
          not be formatted.

          The return value is a generator of strings, each ending in a
          newline and some containing internal newlines.  *note
          print_exception(): 1a03. is a wrapper around this method which
          just prints the lines to a file.

          The message indicating which exception occurred is always the
          last string in the output.

      -- Method: format_exception_only ()

          Format the exception part of the traceback.

          The return value is a generator of strings, each ending in a
          newline.

          Normally, the generator emits a single string; however, for
          *note SyntaxError: 3a6. exceptions, it emits several lines
          that (when printed) display detailed information about where
          the syntax error occurred.

          The message indicating which exception occurred is always the
          last string in the output.


File: python.info,  Node: StackSummary Objects,  Next: FrameSummary Objects,  Prev: TracebackException Objects,  Up: traceback --- Print or retrieve a stack traceback

5.29.9.2 ‘StackSummary’ Objects
...............................

New in version 3.5.

*note StackSummary: 348. objects represent a call stack ready for
formatting.

 -- Class: traceback.StackSummary

      -- Class Method: extract (frame_gen, *, limit=None,
               lookup_lines=True, capture_locals=False)

          Construct a *note StackSummary: 348. object from a frame
          generator (such as is returned by *note walk_stack(): 345. or
          *note walk_tb(): 346.).

          If `limit' is supplied, only this many frames are taken from
          `frame_gen'.  If `lookup_lines' is ‘False’, the returned *note
          FrameSummary: 349. objects will not have read their lines in
          yet, making the cost of creating the *note StackSummary: 348.
          cheaper (which may be valuable if it may not actually get
          formatted).  If `capture_locals' is ‘True’ the local variables
          in each *note FrameSummary: 349. are captured as object
          representations.

      -- Class Method: from_list (a_list)

          Construct a *note StackSummary: 348. object from a supplied
          old-style list of tuples.  Each tuple should be a 4-tuple with
          filename, lineno, name, line as the elements.


File: python.info,  Node: FrameSummary Objects,  Next: Traceback Examples,  Prev: StackSummary Objects,  Up: traceback --- Print or retrieve a stack traceback

5.29.9.3 ‘FrameSummary’ Objects
...............................

New in version 3.5.

*note FrameSummary: 349. objects represent a single frame in a
traceback.

 -- Class: traceback.FrameSummary (filename, lineno, name,
          lookup_line=True, locals=None, line=None)

     Represent a single frame in the traceback or stack that is being
     formatted or printed.  It may optionally have a stringified version
     of the frames locals included in it.  If `lookup_line' is ‘False’,
     the source code is not looked up until the *note FrameSummary: 349.
     has the ‘line’ attribute accessed (which also happens when casting
     it to a tuple).  ‘line’ may be directly provided, and will prevent
     line lookups happening at all.  `locals' is an optional local
     variable dictionary, and if supplied the variable representations
     are stored in the summary for later display.


File: python.info,  Node: Traceback Examples,  Prev: FrameSummary Objects,  Up: traceback --- Print or retrieve a stack traceback

5.29.9.4 Traceback Examples
...........................

This simple example implements a basic read-eval-print loop, similar to
(but less useful than) the standard Python interactive interpreter loop.
For a more complete implementation of the interpreter loop, refer to the
*note code: 1b. module.

     import sys, traceback

     def run_user_code(envdir):
         source = input(">>> ")
         try:
             exec(source, envdir)
         except Exception:
             print("Exception in user code:")
             print("-"*60)
             traceback.print_exc(file=sys.stdout)
             print("-"*60)

     envdir = {}
     while True:
         run_user_code(envdir)

The following example demonstrates the different ways to print and
format the exception and traceback:

     import sys, traceback

     def lumberjack():
         bright_side_of_death()

     def bright_side_of_death():
         return tuple()[0]

     try:
         lumberjack()
     except IndexError:
         exc_type, exc_value, exc_traceback = sys.exc_info()
         print("*** print_tb:")
         traceback.print_tb(exc_traceback, limit=1, file=sys.stdout)
         print("*** print_exception:")
         traceback.print_exception(exc_type, exc_value, exc_traceback,
                                   limit=2, file=sys.stdout)
         print("*** print_exc:")
         traceback.print_exc()
         print("*** format_exc, first and last line:")
         formatted_lines = traceback.format_exc().splitlines()
         print(formatted_lines[0])
         print(formatted_lines[-1])
         print("*** format_exception:")
         print(repr(traceback.format_exception(exc_type, exc_value,
                                               exc_traceback)))
         print("*** extract_tb:")
         print(repr(traceback.extract_tb(exc_traceback)))
         print("*** format_tb:")
         print(repr(traceback.format_tb(exc_traceback)))
         print("*** tb_lineno:", exc_traceback.tb_lineno)

The output for the example would look similar to this:

     *** print_tb:
       File "<doctest...>", line 10, in <module>
         lumberjack()
     *** print_exception:
     Traceback (most recent call last):
       File "<doctest...>", line 10, in <module>
         lumberjack()
       File "<doctest...>", line 4, in lumberjack
         bright_side_of_death()
     IndexError: tuple index out of range
     *** print_exc:
     Traceback (most recent call last):
       File "<doctest...>", line 10, in <module>
         lumberjack()
       File "<doctest...>", line 4, in lumberjack
         bright_side_of_death()
     IndexError: tuple index out of range
     *** format_exc, first and last line:
     Traceback (most recent call last):
     IndexError: tuple index out of range
     *** format_exception:
     ['Traceback (most recent call last):\n',
      '  File "<doctest...>", line 10, in <module>\n    lumberjack()\n',
      '  File "<doctest...>", line 4, in lumberjack\n    bright_side_of_death()\n',
      '  File "<doctest...>", line 7, in bright_side_of_death\n    return tuple()[0]\n',
      'IndexError: tuple index out of range\n']
     *** extract_tb:
     [('<doctest...>', 10, '<module>', 'lumberjack()'),
      ('<doctest...>', 4, 'lumberjack', 'bright_side_of_death()'),
      ('<doctest...>', 7, 'bright_side_of_death', 'return tuple()[0]')]
     *** format_tb:
     ['  File "<doctest...>", line 10, in <module>\n    lumberjack()\n',
      '  File "<doctest...>", line 4, in lumberjack\n    bright_side_of_death()\n',
      '  File "<doctest...>", line 7, in bright_side_of_death\n    return tuple()[0]\n']
     *** tb_lineno: 10

The following example shows the different ways to print and format the
stack:

     >>> import traceback
     >>> def another_function():
     ...     lumberstack()
     ...
     >>> def lumberstack():
     ...     traceback.print_stack()
     ...     print(repr(traceback.extract_stack()))
     ...     print(repr(traceback.format_stack()))
     ...
     >>> another_function()
       File "<doctest>", line 10, in <module>
         another_function()
       File "<doctest>", line 3, in another_function
         lumberstack()
       File "<doctest>", line 6, in lumberstack
         traceback.print_stack()
     [('<doctest>', 10, '<module>', 'another_function()'),
      ('<doctest>', 3, 'another_function', 'lumberstack()'),
      ('<doctest>', 7, 'lumberstack', 'print(repr(traceback.extract_stack()))')]
     ['  File "<doctest>", line 10, in <module>\n    another_function()\n',
      '  File "<doctest>", line 3, in another_function\n    lumberstack()\n',
      '  File "<doctest>", line 8, in lumberstack\n    print(repr(traceback.format_stack()))\n']

This last example demonstrates the final few formatting functions:

     >>> import traceback
     >>> traceback.format_list([('spam.py', 3, '<module>', 'spam.eggs()'),
     ...                        ('eggs.py', 42, 'eggs', 'return "bacon"')])
     ['  File "spam.py", line 3, in <module>\n    spam.eggs()\n',
      '  File "eggs.py", line 42, in eggs\n    return "bacon"\n']
     >>> an_error = IndexError('tuple index out of range')
     >>> traceback.format_exception_only(type(an_error), an_error)
     ['IndexError: tuple index out of range\n']


File: python.info,  Node: __future__ --- Future statement definitions,  Next: gc --- Garbage Collector interface,  Prev: traceback --- Print or retrieve a stack traceback,  Up: Python Runtime Services

5.29.10 ‘__future__’ — Future statement definitions
---------------------------------------------------

`Source code:' Lib/__future__.py(1)

__________________________________________________________________

*note __future__: 0. is a real module, and serves three purposes:

   * To avoid confusing existing tools that analyze import statements
     and expect to find the modules they’re importing.

   * To ensure that *note future statements: f45. run under releases
     prior to 2.1 at least yield runtime exceptions (the import of *note
     __future__: 0. will fail, because there was no module of that name
     prior to 2.1).

   * To document when incompatible changes were introduced, and when
     they will be — or were — made mandatory.  This is a form of
     executable documentation, and can be inspected programmatically via
     importing *note __future__: 0. and examining its contents.

Each statement in ‘__future__.py’ is of the form:

     FeatureName = _Feature(OptionalRelease, MandatoryRelease,
                            CompilerFlag)

where, normally, `OptionalRelease' is less than `MandatoryRelease', and
both are 5-tuples of the same form as *note sys.version_info: 75c.:

     (PY_MAJOR_VERSION, # the 2 in 2.1.0a3; an int
      PY_MINOR_VERSION, # the 1; an int
      PY_MICRO_VERSION, # the 0; an int
      PY_RELEASE_LEVEL, # "alpha", "beta", "candidate" or "final"; string
      PY_RELEASE_SERIAL # the 3; an int
     )

`OptionalRelease' records the first release in which the feature was
accepted.

In the case of a `MandatoryRelease' that has not yet occurred,
`MandatoryRelease' predicts the release in which the feature will become
part of the language.

Else `MandatoryRelease' records when the feature became part of the
language; in releases at or after that, modules no longer need a future
statement to use the feature in question, but may continue to use such
imports.

`MandatoryRelease' may also be ‘None’, meaning that a planned feature
got dropped.

Instances of class ‘_Feature’ have two corresponding methods,
‘getOptionalRelease()’ and ‘getMandatoryRelease()’.

`CompilerFlag' is the (bitfield) flag that should be passed in the
fourth argument to the built-in function *note compile(): 903. to enable
the feature in dynamically compiled code.  This flag is stored in the
‘compiler_flag’ attribute on ‘_Feature’ instances.

No feature description will ever be deleted from *note __future__: 0.
Since its introduction in Python 2.1 the following features have found
their way into the language using this mechanism:

feature                optional in       mandatory in       effect
                                                            
--------------------------------------------------------------------------------------------------------------
                                                            
nested_scopes          2.1.0b1           2.2                PEP 227(2): `Statically Nested Scopes'
                                                            
                                                            
generators             2.2.0a1           2.3                PEP 255(3): `Simple Generators'
                                                            
                                                            
division               2.2.0a2           3.0                PEP 238(4): `Changing the Division Operator'
                                                            
                                                            
absolute_import        2.5.0a1           3.0                PEP 328(5): `Imports: Multi-Line and
                                                            Absolute/Relative'
                                                            
                                                            
with_statement         2.5.0a1           2.6                PEP 343(6): `The "with" Statement'
                                                            
                                                            
print_function         2.6.0a2           3.0                PEP 3105(7): `Make print a function'
                                                            
                                                            
unicode_literals       2.6.0a2           3.0                PEP 3112(8): `Bytes literals in Python 3000'
                                                            
                                                            
generator_stop         3.5.0b1           3.7                PEP 479(9): `StopIteration handling inside
                                                            generators'
                                                            

See also
........

*note Future statements: f45.

     How the compiler treats future imports.

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/__future__.py

   (2) https://www.python.org/dev/peps/pep-0227

   (3) https://www.python.org/dev/peps/pep-0255

   (4) https://www.python.org/dev/peps/pep-0238

   (5) https://www.python.org/dev/peps/pep-0328

   (6) https://www.python.org/dev/peps/pep-0343

   (7) https://www.python.org/dev/peps/pep-3105

   (8) https://www.python.org/dev/peps/pep-3112

   (9) https://www.python.org/dev/peps/pep-0479


File: python.info,  Node: gc --- Garbage Collector interface,  Next: inspect --- Inspect live objects,  Prev: __future__ --- Future statement definitions,  Up: Python Runtime Services

5.29.11 ‘gc’ — Garbage Collector interface
------------------------------------------

This module provides an interface to the optional garbage collector.  It
provides the ability to disable the collector, tune the collection
frequency, and set debugging options.  It also provides access to
unreachable objects that the collector found but cannot free.  Since the
collector supplements the reference counting already used in Python, you
can disable the collector if you are sure your program does not create
reference cycles.  Automatic collection can be disabled by calling
‘gc.disable()’.  To debug a leaking program call
‘gc.set_debug(gc.DEBUG_LEAK)’.  Notice that this includes
‘gc.DEBUG_SAVEALL’, causing garbage-collected objects to be saved in
gc.garbage for inspection.

The *note gc: 85. module provides the following functions:

 -- Function: gc.enable ()

     Enable automatic garbage collection.

 -- Function: gc.disable ()

     Disable automatic garbage collection.

 -- Function: gc.isenabled ()

     Returns true if automatic collection is enabled.

 -- Function: gc.collect (generations=2)

     With no arguments, run a full collection.  The optional argument
     `generation' may be an integer specifying which generation to
     collect (from 0 to 2).  A *note ValueError: 19c. is raised if the
     generation number is invalid.  The number of unreachable objects
     found is returned.

     The free lists maintained for a number of built-in types are
     cleared whenever a full collection or collection of the highest
     generation (2) is run.  Not all items in some free lists may be
     freed due to the particular implementation, in particular *note
     float: 57a.

 -- Function: gc.set_debug (flags)

     Set the garbage collection debugging flags.  Debugging information
     will be written to ‘sys.stderr’.  See below for a list of debugging
     flags which can be combined using bit operations to control
     debugging.

 -- Function: gc.get_debug ()

     Return the debugging flags currently set.

 -- Function: gc.get_objects ()

     Returns a list of all objects tracked by the collector, excluding
     the list returned.

 -- Function: gc.get_stats ()

     Return a list of three per-generation dictionaries containing
     collection statistics since interpreter start.  The number of keys
     may change in the future, but currently each dictionary will
     contain the following items:

        * ‘collections’ is the number of times this generation was
          collected;

        * ‘collected’ is the total number of objects collected inside
          this generation;

        * ‘uncollectable’ is the total number of objects which were
          found to be uncollectable (and were therefore moved to the
          *note garbage: 789. list) inside this generation.

     New in version 3.4.

 -- Function: gc.set_threshold (threshold0[, threshold1[, threshold2]])

     Set the garbage collection thresholds (the collection frequency).
     Setting `threshold0' to zero disables collection.

     The GC classifies objects into three generations depending on how
     many collection sweeps they have survived.  New objects are placed
     in the youngest generation (generation ‘0’).  If an object survives
     a collection it is moved into the next older generation.  Since
     generation ‘2’ is the oldest generation, objects in that generation
     remain there after a collection.  In order to decide when to run,
     the collector keeps track of the number object allocations and
     deallocations since the last collection.  When the number of
     allocations minus the number of deallocations exceeds `threshold0',
     collection starts.  Initially only generation ‘0’ is examined.  If
     generation ‘0’ has been examined more than `threshold1' times since
     generation ‘1’ has been examined, then generation ‘1’ is examined
     as well.  Similarly, `threshold2' controls the number of
     collections of generation ‘1’ before collecting generation ‘2’.

 -- Function: gc.get_count ()

     Return the current collection counts as a tuple of ‘(count0,
     count1, count2)’.

 -- Function: gc.get_threshold ()

     Return the current collection thresholds as a tuple of
     ‘(threshold0, threshold1, threshold2)’.

 -- Function: gc.get_referrers (*objs)

     Return the list of objects that directly refer to any of objs.
     This function will only locate those containers which support
     garbage collection; extension types which do refer to other objects
     but do not support garbage collection will not be found.

     Note that objects which have already been dereferenced, but which
     live in cycles and have not yet been collected by the garbage
     collector can be listed among the resulting referrers.  To get only
     currently live objects, call *note collect(): a0c. before calling
     *note get_referrers(): 2dc1.

     Care must be taken when using objects returned by *note
     get_referrers(): 2dc1. because some of them could still be under
     construction and hence in a temporarily invalid state.  Avoid using
     *note get_referrers(): 2dc1. for any purpose other than debugging.

 -- Function: gc.get_referents (*objs)

     Return a list of objects directly referred to by any of the
     arguments.  The referents returned are those objects visited by the
     arguments’ C-level *note tp_traverse: 2ea9. methods (if any), and
     may not be all objects actually directly reachable.  *note
     tp_traverse: 2ea9. methods are supported only by objects that
     support garbage collection, and are only required to visit objects
     that may be involved in a cycle.  So, for example, if an integer is
     directly reachable from an argument, that integer object may or may
     not appear in the result list.

 -- Function: gc.is_tracked (obj)

     Returns ‘True’ if the object is currently tracked by the garbage
     collector, ‘False’ otherwise.  As a general rule, instances of
     atomic types aren’t tracked and instances of non-atomic types
     (containers, user-defined objects...)  are.  However, some
     type-specific optimizations can be present in order to suppress the
     garbage collector footprint of simple instances (e.g.  dicts
     containing only atomic keys and values):

          >>> gc.is_tracked(0)
          False
          >>> gc.is_tracked("a")
          False
          >>> gc.is_tracked([])
          True
          >>> gc.is_tracked({})
          False
          >>> gc.is_tracked({"a": 1})
          False
          >>> gc.is_tracked({"a": []})
          True

     New in version 3.1.

The following variables are provided for read-only access (you can
mutate the values but should not rebind them):

 -- Data: gc.garbage

     A list of objects which the collector found to be unreachable but
     could not be freed (uncollectable objects).  Starting with Python
     3.4, this list should be empty most of the time, except when using
     instances of C extension types with a non-NULL ‘tp_del’ slot.

     If *note DEBUG_SAVEALL: 2eaa. is set, then all unreachable objects
     will be added to this list rather than freed.

     Changed in version 3.2: If this list is non-empty at *note
     interpreter shutdown: 334, a *note ResourceWarning: 166. is
     emitted, which is silent by default.  If *note DEBUG_UNCOLLECTABLE:
     78a. is set, in addition all uncollectable objects are printed.

     Changed in version 3.4: Following PEP 442(1), objects with a *note
     __del__(): 525. method don’t end up in *note gc.garbage: 789.
     anymore.

 -- Data: gc.callbacks

     A list of callbacks that will be invoked by the garbage collector
     before and after collection.  The callbacks will be called with two
     arguments, `phase' and `info'.

     `phase' can be one of two values:

          "start": The garbage collection is about to start.

          "stop": The garbage collection has finished.

     `info' is a dict providing more information for the callback.  The
     following keys are currently defined:

          "generation": The oldest generation being collected.

          "collected": When `phase' is "stop", the number of objects
          successfully collected.

          "uncollectable": When `phase' is "stop", the number of objects
          that could not be collected and were put in *note garbage:
          789.

     Applications can add their own callbacks to this list.  The primary
     use cases are:

          Gathering statistics about garbage collection, such as how
          often various generations are collected, and how long the
          collection takes.

          Allowing applications to identify and clear their own
          uncollectable types when they appear in *note garbage: 789.

     New in version 3.3.

The following constants are provided for use with *note set_debug():
2ea2.:

 -- Data: gc.DEBUG_STATS

     Print statistics during collection.  This information can be useful
     when tuning the collection frequency.

 -- Data: gc.DEBUG_COLLECTABLE

     Print information on collectable objects found.

 -- Data: gc.DEBUG_UNCOLLECTABLE

     Print information of uncollectable objects found (objects which are
     not reachable but cannot be freed by the collector).  These objects
     will be added to the ‘garbage’ list.

     Changed in version 3.2: Also print the contents of the *note
     garbage: 789. list at *note interpreter shutdown: 334, if it isn’t
     empty.

 -- Data: gc.DEBUG_SAVEALL

     When set, all unreachable objects found will be appended to
     `garbage' rather than being freed.  This can be useful for
     debugging a leaking program.

 -- Data: gc.DEBUG_LEAK

     The debugging flags necessary for the collector to print
     information about a leaking program (equal to ‘DEBUG_COLLECTABLE |
     DEBUG_UNCOLLECTABLE | DEBUG_SAVEALL’).

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0442


File: python.info,  Node: inspect --- Inspect live objects,  Next: site --- Site-specific configuration hook,  Prev: gc --- Garbage Collector interface,  Up: Python Runtime Services

5.29.12 ‘inspect’ — Inspect live objects
----------------------------------------

`Source code:' Lib/inspect.py(1)

__________________________________________________________________

The *note inspect: 9e. module provides several useful functions to help
get information about live objects such as modules, classes, methods,
functions, tracebacks, frame objects, and code objects.  For example, it
can help you examine the contents of a class, retrieve the source code
of a method, extract and format the argument list for a function, or get
all the information you need to display a detailed traceback.

There are four main kinds of services provided by this module: type
checking, getting source code, inspecting classes and functions, and
examining the interpreter stack.

* Menu:

* Types and members:: 
* Retrieving source code:: 
* Introspecting callables with the Signature object:: 
* Classes and functions: Classes and functions<2>. 
* The interpreter stack:: 
* Fetching attributes statically:: 
* Current State of Generators and Coroutines:: 
* Command Line Interface: Command Line Interface<3>. 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/inspect.py


File: python.info,  Node: Types and members,  Next: Retrieving source code,  Up: inspect --- Inspect live objects

5.29.12.1 Types and members
...........................

The *note getmembers(): b9d. function retrieves the members of an object
such as a class or module.  The functions whose names begin with "is"
are mainly provided as convenient choices for the second argument to
*note getmembers(): b9d.  They also help you determine when you can
expect to find the following special attributes:

Type            Attribute             Description
                                      
----------------------------------------------------------------------
                                      
module          __doc__               documentation string
                                      
                                      
                __file__              filename (missing for
                                      built-in modules)
                                      
                                      
class           __doc__               documentation string
                                      
                                      
                __name__              name with which this class
                                      was defined
                                      
                                      
                __qualname__          qualified name
                                      
                                      
                __module__            name of module in which this
                                      class was defined
                                      
                                      
method          __doc__               documentation string
                                      
                                      
                __name__              name with which this method
                                      was defined
                                      
                                      
                __qualname__          qualified name
                                      
                                      
                __func__              function object containing
                                      implementation of method
                                      
                                      
                __self__              instance to which this method
                                      is bound, or ‘None’
                                      
                                      
function        __doc__               documentation string
                                      
                                      
                __name__              name with which this function
                                      was defined
                                      
                                      
                __qualname__          qualified name
                                      
                                      
                __code__              code object containing
                                      compiled function
                                      *note bytecode: d06.
                                      
                                      
                __defaults__          tuple of any default values
                                      for positional or keyword
                                      parameters
                                      
                                      
                __kwdefaults__        mapping of any default values
                                      for keyword-only parameters
                                      
                                      
                __globals__           global namespace in which
                                      this function was defined
                                      
                                      
                __annotations__       mapping of parameters names
                                      to annotations; ‘"return"’
                                      key is reserved for return
                                      annotations.
                                      
                                      
traceback       tb_frame              frame object at this level
                                      
                                      
                tb_lasti              index of last attempted
                                      instruction in bytecode
                                      
                                      
                tb_lineno             current line number in Python
                                      source code
                                      
                                      
                tb_next               next inner traceback object
                                      (called by this level)
                                      
                                      
frame           f_back                next outer frame object (this
                                      frame’s caller)
                                      
                                      
                f_builtins            builtins namespace seen by
                                      this frame
                                      
                                      
                f_code                code object being executed in
                                      this frame
                                      
                                      
                f_globals             global namespace seen by this
                                      frame
                                      
                                      
                f_lasti               index of last attempted
                                      instruction in bytecode
                                      
                                      
                f_lineno              current line number in Python
                                      source code
                                      
                                      
                f_locals              local namespace seen by this
                                      frame
                                      
                                      
                f_restricted          0 or 1 if frame is in
                                      restricted execution mode
                                      
                                      
                f_trace               tracing function for this
                                      frame, or ‘None’
                                      
                                      
code            co_argcount           number of arguments (not
                                      including * or ** args)
                                      
                                      
                co_code               string of raw compiled
                                      bytecode
                                      
                                      
                co_consts             tuple of constants used in
                                      the bytecode
                                      
                                      
                co_filename           name of file in which this
                                      code object was created
                                      
                                      
                co_firstlineno        number of first line in
                                      Python source code
                                      
                                      
                co_flags              bitmap: 1=optimized ‘|’
                                      2=newlocals ‘|’ 4=*arg ‘|’
                                      8=**arg
                                      
                                      
                co_lnotab             encoded mapping of line
                                      numbers to bytecode indices
                                      
                                      
                co_name               name with which this code
                                      object was defined
                                      
                                      
                co_names              tuple of names of local
                                      variables
                                      
                                      
                co_nlocals            number of local variables
                                      
                                      
                co_stacksize          virtual machine stack space
                                      required
                                      
                                      
                co_varnames           tuple of names of arguments
                                      and local variables
                                      
                                      
generator       __name__              name
                                      
                                      
                __qualname__          qualified name
                                      
                                      
                gi_frame              frame
                                      
                                      
                gi_running            is the generator running?
                                      
                                      
                gi_code               code
                                      
                                      
                gi_yieldfrom          object being iterated by
                                      ‘yield from’, or ‘None’
                                      
                                      
coroutine       __name__              name
                                      
                                      
                __qualname__          qualified name
                                      
                                      
                cr_await              object being awaited on, or
                                      ‘None’
                                      
                                      
                cr_frame              frame
                                      
                                      
                cr_running            is the coroutine running?
                                      
                                      
                cr_code               code
                                      
                                      
builtin         __doc__               documentation string
                                      
                                      
                __name__              original name of this
                                      function or method
                                      
                                      
                __qualname__          qualified name
                                      
                                      
                __self__              instance to which a method is
                                      bound, or ‘None’
                                      

Changed in version 3.5: Add ‘__qualname__’ and ‘gi_yieldfrom’ attributes
to generators.

The ‘__name__’ attribute of generators is now set from the function
name, instead of the code name, and it can now be modified.

 -- Function: inspect.getmembers (object[, predicate])

     Return all the members of an object in a list of (name, value)
     pairs sorted by name.  If the optional `predicate' argument is
     supplied, only members for which the predicate returns a true value
     are included.

          Note: *note getmembers(): b9d. will only return class
          attributes defined in the metaclass when the argument is a
          class and those attributes have been listed in the metaclass’
          custom *note __dir__(): 9a7.

 -- Function: inspect.getmodulename (path)

     Return the name of the module named by the file `path', without
     including the names of enclosing packages.  The file extension is
     checked against all of the entries in *note
     importlib.machinery.all_suffixes(): 2eb2.  If it matches, the final
     path component is returned with the extension removed.  Otherwise,
     ‘None’ is returned.

     Note that this function `only' returns a meaningful name for actual
     Python modules - paths that potentially refer to Python packages
     will still return ‘None’.

     Changed in version 3.3: The function is based directly on *note
     importlib: 9a.

 -- Function: inspect.ismodule (object)

     Return true if the object is a module.

 -- Function: inspect.isclass (object)

     Return true if the object is a class, whether built-in or created
     in Python code.

 -- Function: inspect.ismethod (object)

     Return true if the object is a bound method written in Python.

 -- Function: inspect.isfunction (object)

     Return true if the object is a Python function, which includes
     functions created by a *note lambda: 2eb7. expression.

 -- Function: inspect.isgeneratorfunction (object)

     Return true if the object is a Python generator function.

 -- Function: inspect.isgenerator (object)

     Return true if the object is a generator.

 -- Function: inspect.iscoroutinefunction (object)

     Return true if the object is a *note coroutine function: 1cb. (a
     function defined with an *note async def: 1ce. syntax).

     New in version 3.5.

 -- Function: inspect.iscoroutine (object)

     Return true if the object is a *note coroutine: 2ad. created by an
     *note async def: 1ce. function.

     New in version 3.5.

 -- Function: inspect.isawaitable (object)

     Return true if the object can be used in *note await: 1cf.
     expression.

     Can also be used to distinguish generator-based coroutines from
     regular generators:

          def gen():
              yield
          @types.coroutine
          def gen_coro():
              yield

          assert not isawaitable(gen())
          assert isawaitable(gen_coro())

     New in version 3.5.

 -- Function: inspect.istraceback (object)

     Return true if the object is a traceback.

 -- Function: inspect.isframe (object)

     Return true if the object is a frame.

 -- Function: inspect.iscode (object)

     Return true if the object is a code.

 -- Function: inspect.isbuiltin (object)

     Return true if the object is a built-in function or a bound
     built-in method.

 -- Function: inspect.isroutine (object)

     Return true if the object is a user-defined or built-in function or
     method.

 -- Function: inspect.isabstract (object)

     Return true if the object is an abstract base class.

 -- Function: inspect.ismethoddescriptor (object)

     Return true if the object is a method descriptor, but not if *note
     ismethod(): 2eb5, *note isclass(): 2eb4, *note isfunction(): 2eb6.
     or *note isbuiltin(): 2ebd. are true.

     This, for example, is true of ‘int.__add__’.  An object passing
     this test has a ‘__get__’ attribute but not a ‘__set__’ attribute,
     but beyond that the set of attributes varies.  *note __name__: 8d3.
     is usually sensible, and ‘__doc__’ often is.

     Methods implemented via descriptors that also pass one of the other
     tests return false from the *note ismethoddescriptor(): 2ec0. test,
     simply because the other tests promise more – you can, e.g., count
     on having the ‘__func__’ attribute (etc) when an object passes
     *note ismethod(): 2eb5.

 -- Function: inspect.isdatadescriptor (object)

     Return true if the object is a data descriptor.

     Data descriptors have both a ‘__get__’ and a ‘__set__’ attribute.
     Examples are properties (defined in Python), getsets, and members.
     The latter two are defined in C and there are more specific tests
     available for those types, which is robust across Python
     implementations.  Typically, data descriptors will also have *note
     __name__: 8d3. and ‘__doc__’ attributes (properties, getsets, and
     members have both of these attributes), but this is not guaranteed.

 -- Function: inspect.isgetsetdescriptor (object)

     Return true if the object is a getset descriptor.

     `CPython implementation detail:' getsets are attributes defined in
     extension modules via ‘PyGetSetDef’ structures.  For Python
     implementations without such types, this method will always return
     ‘False’.

 -- Function: inspect.ismemberdescriptor (object)

     Return true if the object is a member descriptor.

     `CPython implementation detail:' Member descriptors are attributes
     defined in extension modules via *note PyMemberDef: 968.
     structures.  For Python implementations without such types, this
     method will always return ‘False’.


File: python.info,  Node: Retrieving source code,  Next: Introspecting callables with the Signature object,  Prev: Types and members,  Up: inspect --- Inspect live objects

5.29.12.2 Retrieving source code
................................

 -- Function: inspect.getdoc (object)

     Get the documentation string for an object, cleaned up with *note
     cleandoc(): 2ec6.  If the documentation string for an object is not
     provided and the object is a class, a method, a property or a
     descriptor, retrieve the documentation string from the inheritance
     hierarchy.

     Changed in version 3.5: Documentation strings are now inherited if
     not overridden.

 -- Function: inspect.getcomments (object)

     Return in a single string any lines of comments immediately
     preceding the object’s source code (for a class, function, or
     method), or at the top of the Python source file (if the object is
     a module).

 -- Function: inspect.getfile (object)

     Return the name of the (text or binary) file in which an object was
     defined.  This will fail with a *note TypeError: 562. if the object
     is a built-in module, class, or function.

 -- Function: inspect.getmodule (object)

     Try to guess which module an object was defined in.

 -- Function: inspect.getsourcefile (object)

     Return the name of the Python source file in which an object was
     defined.  This will fail with a *note TypeError: 562. if the object
     is a built-in module, class, or function.

 -- Function: inspect.getsourcelines (object)

     Return a list of source lines and starting line number for an
     object.  The argument may be a module, class, method, function,
     traceback, frame, or code object.  The source code is returned as a
     list of the lines corresponding to the object and the line number
     indicates where in the original source file the first line of code
     was found.  An *note OSError: 4b6. is raised if the source code
     cannot be retrieved.

     Changed in version 3.3: *note OSError: 4b6. is raised instead of
     *note IOError: 5b0, now an alias of the former.

 -- Function: inspect.getsource (object)

     Return the text of the source code for an object.  The argument may
     be a module, class, method, function, traceback, frame, or code
     object.  The source code is returned as a single string.  An *note
     OSError: 4b6. is raised if the source code cannot be retrieved.

     Changed in version 3.3: *note OSError: 4b6. is raised instead of
     *note IOError: 5b0, now an alias of the former.

 -- Function: inspect.cleandoc (doc)

     Clean up indentation from docstrings that are indented to line up
     with blocks of code.  Any whitespace that can be uniformly removed
     from the second line onwards is removed.  Also, all tabs are
     expanded to spaces.


File: python.info,  Node: Introspecting callables with the Signature object,  Next: Classes and functions<2>,  Prev: Retrieving source code,  Up: inspect --- Inspect live objects

5.29.12.3 Introspecting callables with the Signature object
...........................................................

New in version 3.3.

The Signature object represents the call signature of a callable object
and its return annotation.  To retrieve a Signature object, use the
*note signature(): 2ac. function.

 -- Function: inspect.signature (callable, *, follow_wrapped=True)

     Return a *note Signature: 2a8. object for the given ‘callable’:

          >>> from inspect import signature
          >>> def foo(a, *, b:int, **kwargs):
          ...     pass

          >>> sig = signature(foo)

          >>> str(sig)
          '(a, *, b:int, **kwargs)'

          >>> str(sig.parameters['b'])
          'b:int'

          >>> sig.parameters['b'].annotation
          <class 'int'>

     Accepts a wide range of python callables, from plain functions and
     classes to *note functools.partial(): 3b7. objects.

     Raises *note ValueError: 19c. if no signature can be provided, and
     *note TypeError: 562. if that type of object is not supported.

     New in version 3.5: ‘follow_wrapped’ parameter.  Pass ‘False’ to
     get a signature of ‘callable’ specifically (‘callable.__wrapped__’
     will not be used to unwrap decorated callables.)

          Note: Some callables may not be introspectable in certain
          implementations of Python.  For example, in CPython, some
          built-in functions defined in C provide no metadata about
          their arguments.

 -- Class: inspect.Signature (parameters=None, *,
          return_annotation=Signature.empty)

     A Signature object represents the call signature of a function and
     its return annotation.  For each parameter accepted by the function
     it stores a *note Parameter: 2a9. object in its *note parameters:
     2ecd. collection.

     The optional `parameters' argument is a sequence of *note
     Parameter: 2a9. objects, which is validated to check that there are
     no parameters with duplicate names, and that the parameters are in
     the right order, i.e.  positional-only first, then
     positional-or-keyword, and that parameters with defaults follow
     parameters without defaults.

     The optional `return_annotation' argument, can be an arbitrary
     Python object, is the "return" annotation of the callable.

     Signature objects are `immutable'.  Use *note Signature.replace():
     2ece. to make a modified copy.

     Changed in version 3.5: Signature objects are picklable and
     hashable.

      -- Attribute: empty

          A special class-level marker to specify absence of a return
          annotation.

      -- Attribute: parameters

          An ordered mapping of parameters’ names to the corresponding
          *note Parameter: 2a9. objects.

      -- Attribute: return_annotation

          The "return" annotation for the callable.  If the callable has
          no "return" annotation, this attribute is set to *note
          Signature.empty: 2ecf.

      -- Method: bind (*args, **kwargs)

          Create a mapping from positional and keyword arguments to
          parameters.  Returns *note BoundArguments: 5c6. if ‘*args’ and
          ‘**kwargs’ match the signature, or raises a *note TypeError:
          562.

      -- Method: bind_partial (*args, **kwargs)

          Works the same way as *note Signature.bind(): 2ed1, but allows
          the omission of some required arguments (mimics *note
          functools.partial(): 3b7. behavior.)  Returns *note
          BoundArguments: 5c6, or raises a *note TypeError: 562. if the
          passed arguments do not match the signature.

      -- Method: replace (*[, parameters][, return_annotation])

          Create a new Signature instance based on the instance replace
          was invoked on.  It is possible to pass different ‘parameters’
          and/or ‘return_annotation’ to override the corresponding
          properties of the base signature.  To remove return_annotation
          from the copied Signature, pass in *note Signature.empty:
          2ecf.

               >>> def test(a, b):
               ...     pass
               >>> sig = signature(test)
               >>> new_sig = sig.replace(return_annotation="new return anno")
               >>> str(new_sig)
               "(a, b) -> 'new return anno'"

      -- Class Method: from_callable (obj, *, follow_wrapped=True)

          Return a *note Signature: 2a8. (or its subclass) object for a
          given callable ‘obj’.  Pass ‘follow_wrapped=False’ to get a
          signature of ‘obj’ without unwrapping its ‘__wrapped__’ chain.

          This method simplifies subclassing of *note Signature: 2a8.:

               class MySignature(Signature):
                   pass
               sig = MySignature.from_callable(min)
               assert isinstance(sig, MySignature)

          New in version 3.5.

 -- Class: inspect.Parameter (name, kind, *, default=Parameter.empty,
          annotation=Parameter.empty)

     Parameter objects are `immutable'.  Instead of modifying a
     Parameter object, you can use *note Parameter.replace(): 2ed3. to
     create a modified copy.

     Changed in version 3.5: Parameter objects are picklable and
     hashable.

      -- Attribute: empty

          A special class-level marker to specify absence of default
          values and annotations.

      -- Attribute: name

          The name of the parameter as a string.  The name must be a
          valid Python identifier.

      -- Attribute: default

          The default value for the parameter.  If the parameter has no
          default value, this attribute is set to *note Parameter.empty:
          2ed4.

      -- Attribute: annotation

          The annotation for the parameter.  If the parameter has no
          annotation, this attribute is set to *note Parameter.empty:
          2ed4.

      -- Attribute: kind

          Describes how argument values are bound to the parameter.
          Possible values (accessible via *note Parameter: 2a9, like
          ‘Parameter.KEYWORD_ONLY’):

          Name                         Meaning
                                       
          --------------------------------------------------------------------------------
                                       
          `POSITIONAL_ONLY'            Value must be supplied as a positional argument.
                                       
                                       Python has no explicit syntax for defining
                                       positional-only parameters, but many built-in
                                       and extension module functions (especially those
                                       that accept only one or two parameters) accept
                                       them.
                                       
                                       
          `POSITIONAL_OR_KEYWORD'      Value may be supplied as either a keyword or
                                       positional argument (this is the standard
                                       binding behaviour for functions implemented in
                                       Python.)
                                       
                                       
          `VAR_POSITIONAL'             A tuple of positional arguments that aren’t
                                       bound to any other parameter.  This corresponds
                                       to a ‘*args’ parameter in a Python function
                                       definition.
                                       
                                       
          `KEYWORD_ONLY'               Value must be supplied as a keyword argument.
                                       Keyword only parameters are those which appear
                                       after a ‘*’ or ‘*args’ entry in a Python
                                       function definition.
                                       
                                       
          `VAR_KEYWORD'                A dict of keyword arguments that aren’t bound to
                                       any other parameter.  This corresponds to a
                                       ‘**kwargs’ parameter in a Python function
                                       definition.
                                       

          Example: print all keyword-only arguments without default
          values:

               >>> def foo(a, b, *, c, d=10):
               ...     pass

               >>> sig = signature(foo)
               >>> for param in sig.parameters.values():
               ...     if (param.kind == param.KEYWORD_ONLY and
               ...                        param.default is param.empty):
               ...         print('Parameter:', param)
               Parameter: c

      -- Method: replace (*[, name][, kind][, default][, annotation])

               Create a new Parameter instance based on the instance
               replaced was invoked on.  To override a *note Parameter:
               2a9. attribute, pass the corresponding argument.  To
               remove a default value or/and an annotation from a
               Parameter, pass *note Parameter.empty: 2ed4.

                    >>> from inspect import Parameter
                    >>> param = Parameter('foo', Parameter.KEYWORD_ONLY, default=42)
                    >>> str(param)
                    'foo=42'

                    >>> str(param.replace()) # Will create a shallow copy of 'param'
                    'foo=42'

                    >>> str(param.replace(default=Parameter.empty, annotation='spam'))
                    "foo:'spam'"

          Changed in version 3.4: In Python 3.3 Parameter objects were
          allowed to have ‘name’ set to ‘None’ if their ‘kind’ was set
          to ‘POSITIONAL_ONLY’.  This is no longer permitted.

 -- Class: inspect.BoundArguments

     Result of a *note Signature.bind(): 2ed1. or *note
     Signature.bind_partial(): 2ed2. call.  Holds the mapping of
     arguments to the function’s parameters.

      -- Attribute: arguments

          An ordered, mutable mapping (*note collections.OrderedDict:
          1bd.) of parameters’ names to arguments’ values.  Contains
          only explicitly bound arguments.  Changes in *note arguments:
          2ed9. will reflect in *note args: 2eda. and *note kwargs:
          2edb.

          Should be used in conjunction with *note Signature.parameters:
          2ecd. for any argument processing purposes.

               Note: Arguments for which *note Signature.bind(): 2ed1.
               or *note Signature.bind_partial(): 2ed2. relied on a
               default value are skipped.  However, if needed, use *note
               BoundArguments.apply_defaults(): 2aa. to add them.

      -- Attribute: args

          A tuple of positional arguments values.  Dynamically computed
          from the *note arguments: 2ed9. attribute.

      -- Attribute: kwargs

          A dict of keyword arguments values.  Dynamically computed from
          the *note arguments: 2ed9. attribute.

      -- Attribute: signature

          A reference to the parent *note Signature: 2a8. object.

      -- Method: apply_defaults ()

          Set default values for missing arguments.

          For variable-positional arguments (‘*args’) the default is an
          empty tuple.

          For variable-keyword arguments (‘**kwargs’) the default is an
          empty dict.

               >>> def foo(a, b='ham', *args): pass
               >>> ba = inspect.signature(foo).bind('spam')
               >>> ba.apply_defaults()
               >>> ba.arguments
               OrderedDict([('a', 'spam'), ('b', 'ham'), ('args', ())])

          New in version 3.5.

     The *note args: 2eda. and *note kwargs: 2edb. properties can be
     used to invoke functions:

          def test(a, *, b):
             ...

          sig = signature(test)
          ba = sig.bind(10, b=20)
          test(*ba.args, **ba.kwargs)

See also
........

PEP 362(1) - Function Signature Object.

     The detailed specification, implementation details and examples.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0362


File: python.info,  Node: Classes and functions<2>,  Next: The interpreter stack,  Prev: Introspecting callables with the Signature object,  Up: inspect --- Inspect live objects

5.29.12.4 Classes and functions
...............................

 -- Function: inspect.getclasstree (classes, unique=False)

     Arrange the given list of classes into a hierarchy of nested lists.
     Where a nested list appears, it contains classes derived from the
     class whose entry immediately precedes the list.  Each entry is a
     2-tuple containing a class and a tuple of its base classes.  If the
     `unique' argument is true, exactly one entry appears in the
     returned structure for each class in the given list.  Otherwise,
     classes using multiple inheritance and their descendants will
     appear multiple times.

 -- Function: inspect.getargspec (func)

     Get the names and default values of a Python function’s arguments.
     A *note named tuple: 787. ‘ArgSpec(args, varargs, keywords,
     defaults)’ is returned.  `args' is a list of the argument names.
     `varargs' and `keywords' are the names of the ‘*’ and ‘**’
     arguments or ‘None’.  `defaults' is a tuple of default argument
     values or ‘None’ if there are no default arguments; if this tuple
     has `n' elements, they correspond to the last `n' elements listed
     in `args'.

     Deprecated since version 3.0: Use *note signature(): 2ac. and *note
     Signature Object: 2ecb, which provide a better introspecting API
     for callables.

 -- Function: inspect.getfullargspec (func)

     Get the names and default values of a Python function’s arguments.
     A *note named tuple: 787. is returned:

     ‘FullArgSpec(args, varargs, varkw, defaults, kwonlyargs,
     kwonlydefaults, annotations)’

     `args' is a list of the argument names.  `varargs' and `varkw' are
     the names of the ‘*’ and ‘**’ arguments or ‘None’.  `defaults' is
     an `n'-tuple of the default values of the last `n' arguments, or
     ‘None’ if there are no default arguments.  `kwonlyargs' is a list
     of keyword-only argument names.  `kwonlydefaults' is a dictionary
     mapping names from kwonlyargs to defaults.  `annotations' is a
     dictionary mapping argument names to annotations.

     Changed in version 3.4: This function is now based on *note
     signature(): 2ac, but still ignores ‘__wrapped__’ attributes and
     includes the already bound first parameter in the signature output
     for bound methods.

     Deprecated since version 3.5: Use *note signature(): 2ac. and *note
     Signature Object: 2ecb, which provide a better introspecting API
     for callables.

 -- Function: inspect.getargvalues (frame)

     Get information about arguments passed into a particular frame.  A
     *note named tuple: 787. ‘ArgInfo(args, varargs, keywords, locals)’
     is returned.  `args' is a list of the argument names.  `varargs'
     and `keywords' are the names of the ‘*’ and ‘**’ arguments or
     ‘None’.  `locals' is the locals dictionary of the given frame.

     Deprecated since version 3.5: Use *note signature(): 2ac. and *note
     Signature Object: 2ecb, which provide a better introspecting API
     for callables.

 -- Function: inspect.formatargspec (args[, varargs, varkw, defaults,
          kwonlyargs, kwonlydefaults, annotations[, formatarg,
          formatvarargs, formatvarkw, formatvalue, formatreturns,
          formatannotations]])

     Format a pretty argument spec from the values returned by *note
     getfullargspec(): 39b.

     The first seven arguments are (‘args’, ‘varargs’, ‘varkw’,
     ‘defaults’, ‘kwonlyargs’, ‘kwonlydefaults’, ‘annotations’).

     The other six arguments are functions that are called to turn
     argument names, ‘*’ argument name, ‘**’ argument name, default
     values, return annotation and individual annotations into strings,
     respectively.

     For example:

          >>> from inspect import formatargspec, getfullargspec
          >>> def f(a: int, b: float):
          ...     pass
          ...
          >>> formatargspec(*getfullargspec(f))
          '(a: int, b: float)'

     Deprecated since version 3.5: Use *note signature(): 2ac. and *note
     Signature Object: 2ecb, which provide a better introspecting API
     for callables.

 -- Function: inspect.formatargvalues (args[, varargs, varkw, locals,
          formatarg, formatvarargs, formatvarkw, formatvalue])

     Format a pretty argument spec from the four values returned by
     *note getargvalues(): 39c.  The format* arguments are the
     corresponding optional formatting functions that are called to turn
     names and values into strings.

     Deprecated since version 3.5: Use *note signature(): 2ac. and *note
     Signature Object: 2ecb, which provide a better introspecting API
     for callables.

 -- Function: inspect.getmro (cls)

     Return a tuple of class cls’s base classes, including cls, in
     method resolution order.  No class appears more than once in this
     tuple.  Note that the method resolution order depends on cls’s
     type.  Unless a very peculiar user-defined metatype is in use, cls
     will be the first element of the tuple.

 -- Function: inspect.getcallargs (func, *args, **kwds)

     Bind the `args' and `kwds' to the argument names of the Python
     function or method `func', as if it was called with them.  For
     bound methods, bind also the first argument (typically named
     ‘self’) to the associated instance.  A dict is returned, mapping
     the argument names (including the names of the ‘*’ and ‘**’
     arguments, if any) to their values from `args' and `kwds'.  In case
     of invoking `func' incorrectly, i.e.  whenever ‘func(*args,
     **kwds)’ would raise an exception because of incompatible
     signature, an exception of the same type and the same or similar
     message is raised.  For example:

          >>> from inspect import getcallargs
          >>> def f(a, b=1, *pos, **named):
          ...     pass
          >>> getcallargs(f, 1, 2, 3) == {'a': 1, 'named': {}, 'b': 2, 'pos': (3,)}
          True
          >>> getcallargs(f, a=2, x=4) == {'a': 2, 'named': {'x': 4}, 'b': 1, 'pos': ()}
          True
          >>> getcallargs(f)
          Traceback (most recent call last):
          ...
          TypeError: f() missing 1 required positional argument: 'a'

     New in version 3.2.

     Deprecated since version 3.5: Use *note Signature.bind(): 2ed1. and
     *note Signature.bind_partial(): 2ed2. instead.

 -- Function: inspect.getclosurevars (func)

     Get the mapping of external name references in a Python function or
     method `func' to their current values.  A *note named tuple: 787.
     ‘ClosureVars(nonlocals, globals, builtins, unbound)’ is returned.
     `nonlocals' maps referenced names to lexical closure variables,
     `globals' to the function’s module globals and `builtins' to the
     builtins visible from the function body.  `unbound' is the set of
     names referenced in the function that could not be resolved at all
     given the current module globals and builtins.

     *note TypeError: 562. is raised if `func' is not a Python function
     or method.

     New in version 3.3.

 -- Function: inspect.unwrap (func, *, stop=None)

     Get the object wrapped by `func'.  It follows the chain of
     ‘__wrapped__’ attributes returning the last object in the chain.

     `stop' is an optional callback accepting an object in the wrapper
     chain as its sole argument that allows the unwrapping to be
     terminated early if the callback returns a true value.  If the
     callback never returns a true value, the last object in the chain
     is returned as usual.  For example, *note signature(): 2ac. uses
     this to stop unwrapping if any object in the chain has a
     ‘__signature__’ attribute defined.

     *note ValueError: 19c. is raised if a cycle is encountered.

     New in version 3.4.


File: python.info,  Node: The interpreter stack,  Next: Fetching attributes statically,  Prev: Classes and functions<2>,  Up: inspect --- Inspect live objects

5.29.12.5 The interpreter stack
...............................

When the following functions return "frame records," each record is a
*note named tuple: 787. ‘FrameInfo(frame, filename, lineno, function,
code_context, index)’.  The tuple contains the frame object, the
filename, the line number of the current line, the function name, a list
of lines of context from the source code, and the index of the current
line within that list.

Changed in version 3.5: Return a named tuple instead of a tuple.

     Note: Keeping references to frame objects, as found in the first
     element of the frame records these functions return, can cause your
     program to create reference cycles.  Once a reference cycle has
     been created, the lifespan of all objects which can be accessed
     from the objects which form the cycle can become much longer even
     if Python’s optional cycle detector is enabled.  If such cycles
     must be created, it is important to ensure they are explicitly
     broken to avoid the delayed destruction of objects and increased
     memory consumption which occurs.

     Though the cycle detector will catch these, destruction of the
     frames (and local variables) can be made deterministic by removing
     the cycle in a *note finally: 526. clause.  This is also important
     if the cycle detector was disabled when Python was compiled or
     using *note gc.disable(): 2ea0.  For example:

          def handle_stackframe_without_leak():
              frame = inspect.currentframe()
              try:
                  # do something with the frame
              finally:
                  del frame

     If you want to keep the frame around (for example to print a
     traceback later), you can also break reference cycles by using the
     *note frame.clear(): 3fb. method.

The optional `context' argument supported by most of these functions
specifies the number of lines of context to return, which are centered
around the current line.

 -- Function: inspect.getframeinfo (frame, context=1)

     Get information about a frame or traceback object.  A *note named
     tuple: 787. ‘Traceback(filename, lineno, function, code_context,
     index)’ is returned.

 -- Function: inspect.getouterframes (frame, context=1)

     Get a list of frame records for a frame and all outer frames.
     These frames represent the calls that lead to the creation of
     `frame'.  The first entry in the returned list represents `frame';
     the last entry represents the outermost call on `frame'’s stack.

     Changed in version 3.5: A list of *note named tuples: 787.
     ‘FrameInfo(frame, filename, lineno, function, code_context, index)’
     is returned.

 -- Function: inspect.getinnerframes (traceback, context=1)

     Get a list of frame records for a traceback’s frame and all inner
     frames.  These frames represent calls made as a consequence of
     `frame'.  The first entry in the list represents `traceback'; the
     last entry represents where the exception was raised.

     Changed in version 3.5: A list of *note named tuples: 787.
     ‘FrameInfo(frame, filename, lineno, function, code_context, index)’
     is returned.

 -- Function: inspect.currentframe ()

     Return the frame object for the caller’s stack frame.

     `CPython implementation detail:' This function relies on Python
     stack frame support in the interpreter, which isn’t guaranteed to
     exist in all implementations of Python.  If running in an
     implementation without Python stack frame support this function
     returns ‘None’.

 -- Function: inspect.stack (context=1)

     Return a list of frame records for the caller’s stack.  The first
     entry in the returned list represents the caller; the last entry
     represents the outermost call on the stack.

     Changed in version 3.5: A list of *note named tuples: 787.
     ‘FrameInfo(frame, filename, lineno, function, code_context, index)’
     is returned.

 -- Function: inspect.trace (context=1)

     Return a list of frame records for the stack between the current
     frame and the frame in which an exception currently being handled
     was raised in.  The first entry in the list represents the caller;
     the last entry represents where the exception was raised.

     Changed in version 3.5: A list of *note named tuples: 787.
     ‘FrameInfo(frame, filename, lineno, function, code_context, index)’
     is returned.


File: python.info,  Node: Fetching attributes statically,  Next: Current State of Generators and Coroutines,  Prev: The interpreter stack,  Up: inspect --- Inspect live objects

5.29.12.6 Fetching attributes statically
........................................

Both *note getattr(): 781. and *note hasattr(): 780. can trigger code
execution when fetching or checking for the existence of attributes.
Descriptors, like properties, will be invoked and *note __getattr__():
782. and *note __getattribute__(): 783. may be called.

For cases where you want passive introspection, like documentation
tools, this can be inconvenient.  *note getattr_static(): 829. has the
same signature as *note getattr(): 781. but avoids executing code when
it fetches attributes.

 -- Function: inspect.getattr_static (obj, attr, default=None)

     Retrieve attributes without triggering dynamic lookup via the
     descriptor protocol, *note __getattr__(): 782. or *note
     __getattribute__(): 783.

     Note: this function may not be able to retrieve all attributes that
     getattr can fetch (like dynamically created attributes) and may
     find attributes that getattr can’t (like descriptors that raise
     AttributeError).  It can also return descriptors objects instead of
     instance members.

     If the instance *note __dict__: df4. is shadowed by another member
     (for example a property) then this function will be unable to find
     instance members.

     New in version 3.2.

*note getattr_static(): 829. does not resolve descriptors, for example
slot descriptors or getset descriptors on objects implemented in C. The
descriptor object is returned instead of the underlying attribute.

You can handle these with code like the following.  Note that for
arbitrary getset descriptors invoking these may trigger code execution:

     # example code for resolving the builtin descriptor types
     class _foo:
         __slots__ = ['foo']

     slot_descriptor = type(_foo.foo)
     getset_descriptor = type(type(open(__file__)).name)
     wrapper_descriptor = type(str.__dict__['__add__'])
     descriptor_types = (slot_descriptor, getset_descriptor, wrapper_descriptor)

     result = getattr_static(some_object, 'foo')
     if type(result) in descriptor_types:
         try:
             result = result.__get__()
         except AttributeError:
             # descriptors can raise AttributeError to
             # indicate there is no underlying value
             # in which case the descriptor itself will
             # have to do
             pass


File: python.info,  Node: Current State of Generators and Coroutines,  Next: Command Line Interface<3>,  Prev: Fetching attributes statically,  Up: inspect --- Inspect live objects

5.29.12.7 Current State of Generators and Coroutines
....................................................

When implementing coroutine schedulers and for other advanced uses of
generators, it is useful to determine whether a generator is currently
executing, is waiting to start or resume or execution, or has already
terminated.  *note getgeneratorstate(): 828. allows the current state of
a generator to be determined easily.

 -- Function: inspect.getgeneratorstate (generator)

     Get current state of a generator-iterator.

     Possible states are:

             * GEN_CREATED: Waiting to start execution.

             * GEN_RUNNING: Currently being executed by the interpreter.

             * GEN_SUSPENDED: Currently suspended at a yield expression.

             * GEN_CLOSED: Execution has completed.

     New in version 3.2.

 -- Function: inspect.getcoroutinestate (coroutine)

     Get current state of a coroutine object.  The function is intended
     to be used with coroutine objects created by *note async def: 1ce.
     functions, but will accept any coroutine-like object that has
     ‘cr_running’ and ‘cr_frame’ attributes.

     Possible states are:

             * CORO_CREATED: Waiting to start execution.

             * CORO_RUNNING: Currently being executed by the
               interpreter.

             * CORO_SUSPENDED: Currently suspended at an await
               expression.

             * CORO_CLOSED: Execution has completed.

     New in version 3.5.

The current internal state of the generator can also be queried.  This
is mostly useful for testing purposes, to ensure that internal state is
being updated as expected:

 -- Function: inspect.getgeneratorlocals (generator)

     Get the mapping of live local variables in `generator' to their
     current values.  A dictionary is returned that maps from variable
     names to values.  This is the equivalent of calling *note locals():
     9a8. in the body of the generator, and all the same caveats apply.

     If `generator' is a *note generator: 5c0. with no currently
     associated frame, then an empty dictionary is returned.  *note
     TypeError: 562. is raised if `generator' is not a Python generator
     object.

     `CPython implementation detail:' This function relies on the
     generator exposing a Python stack frame for introspection, which
     isn’t guaranteed to be the case in all implementations of Python.
     In such cases, this function will always return an empty
     dictionary.

     New in version 3.3.

 -- Function: inspect.getcoroutinelocals (coroutine)

     This function is analogous to *note getgeneratorlocals(): 647, but
     works for coroutine objects created by *note async def: 1ce.
     functions.

     New in version 3.5.


File: python.info,  Node: Command Line Interface<3>,  Prev: Current State of Generators and Coroutines,  Up: inspect --- Inspect live objects

5.29.12.8 Command Line Interface
................................

The *note inspect: 9e. module also provides a basic introspection
capability from the command line.

By default, accepts the name of a module and prints the source of that
module.  A class or function within the module can be printed instead by
appended a colon and the qualified name of the target object.

 -- Program Option: --details

     Print information about the specified object rather than the source
     code


File: python.info,  Node: site --- Site-specific configuration hook,  Next: fpectl --- Floating point exception control,  Prev: inspect --- Inspect live objects,  Up: Python Runtime Services

5.29.13 ‘site’ — Site-specific configuration hook
-------------------------------------------------

`Source code:' Lib/site.py(1)

__________________________________________________________________

`This module is automatically imported during initialization.'  The
automatic import can be suppressed using the interpreter’s *note -S:
766. option.

Importing this module will append site-specific paths to the module
search path and add a few builtins, unless *note -S: 766. was used.  In
that case, this module can be safely imported with no automatic
modifications to the module search path or additions to the builtins.
To explicitly trigger the usual site-specific additions, call the *note
site.main(): d0b. function.

Changed in version 3.3: Importing the module used to trigger paths
manipulation even when using *note -S: 766.

It starts by constructing up to four directories from a head and a tail
part.  For the head part, it uses ‘sys.prefix’ and ‘sys.exec_prefix’;
empty heads are skipped.  For the tail part, it uses the empty string
and then ‘lib/site-packages’ (on Windows) or
‘lib/python`X.Y'/site-packages’ (on Unix and Macintosh).  For each of
the distinct head-tail combinations, it sees if it refers to an existing
directory, and if so, adds it to ‘sys.path’ and also inspects the newly
added path for configuration files.

Changed in version 3.5: Support for the "site-python" directory has been
removed.

If a file named "pyvenv.cfg" exists one directory above sys.executable,
sys.prefix and sys.exec_prefix are set to that directory and it is also
checked for site-packages (sys.base_prefix and sys.base_exec_prefix will
always be the "real" prefixes of the Python installation).  If
"pyvenv.cfg" (a bootstrap configuration file) contains the key
"include-system-site-packages" set to anything other than "false"
(case-insensitive), the system-level prefixes will still also be
searched for site-packages; otherwise they won’t.

A path configuration file is a file whose name has the form ‘`name'.pth’
and exists in one of the four directories mentioned above; its contents
are additional items (one per line) to be added to ‘sys.path’.
Non-existing items are never added to ‘sys.path’, and no check is made
that the item refers to a directory rather than a file.  No item is
added to ‘sys.path’ more than once.  Blank lines and lines beginning
with ‘#’ are skipped.  Lines starting with ‘import’ (followed by space
or tab) are executed.

For example, suppose ‘sys.prefix’ and ‘sys.exec_prefix’ are set to
‘/usr/local’.  The Python X.Y library is then installed in
‘/usr/local/lib/python`X.Y'’.  Suppose this has a subdirectory
‘/usr/local/lib/python`X.Y'/site-packages’ with three subsubdirectories,
‘foo’, ‘bar’ and ‘spam’, and two path configuration files, ‘foo.pth’ and
‘bar.pth’.  Assume ‘foo.pth’ contains the following:

     # foo package configuration

     foo
     bar
     bletch

and ‘bar.pth’ contains:

     # bar package configuration

     bar

Then the following version-specific directories are added to ‘sys.path’,
in this order:

     /usr/local/lib/pythonX.Y/site-packages/bar
     /usr/local/lib/pythonX.Y/site-packages/foo

Note that ‘bletch’ is omitted because it doesn’t exist; the ‘bar’
directory precedes the ‘foo’ directory because ‘bar.pth’ comes
alphabetically before ‘foo.pth’; and ‘spam’ is omitted because it is not
mentioned in either path configuration file.

After these path manipulations, an attempt is made to import a module
named ‘sitecustomize’, which can perform arbitrary site-specific
customizations.  It is typically created by a system administrator in
the site-packages directory.  If this import fails with an *note
ImportError: 19f. exception, it is silently ignored.  If Python is
started without output streams available, as with ‘pythonw.exe’ on
Windows (which is used by default to start IDLE), attempted output from
‘sitecustomize’ is ignored.  Any exception other than *note ImportError:
19f. causes a silent and perhaps mysterious failure of the process.

After this, an attempt is made to import a module named ‘usercustomize’,
which can perform arbitrary user-specific customizations, if *note
ENABLE_USER_SITE: 2eeb. is true.  This file is intended to be created in
the user site-packages directory (see below), which is part of
‘sys.path’ unless disabled by *note -s: 986.  An *note ImportError: 19f.
will be silently ignored.

Note that for some non-Unix systems, ‘sys.prefix’ and ‘sys.exec_prefix’
are empty, and the path manipulations are skipped; however the import of
‘sitecustomize’ and ‘usercustomize’ is still attempted.

* Menu:

* Readline configuration:: 
* Module contents: Module contents<3>. 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/site.py


File: python.info,  Node: Readline configuration,  Next: Module contents<3>,  Up: site --- Site-specific configuration hook

5.29.13.1 Readline configuration
................................

On systems that support *note readline: dc, this module will also import
and configure the *note rlcompleter: df. module, if Python is started in
*note interactive mode: 4e4. and without the *note -S: 766. option.  The
default behavior is enable tab-completion and to use ‘~/.python_history’
as the history save file.  To disable it, delete (or override) the *note
sys.__interactivehook__: 4e5. attribute in your ‘sitecustomize’ or
‘usercustomize’ module or your *note PYTHONSTARTUP: 4e6. file.

Changed in version 3.4: Activation of rlcompleter and history was made
automatic.


File: python.info,  Node: Module contents<3>,  Prev: Readline configuration,  Up: site --- Site-specific configuration hook

5.29.13.2 Module contents
.........................

 -- Data: site.PREFIXES

     A list of prefixes for site-packages directories.

 -- Data: site.ENABLE_USER_SITE

     Flag showing the status of the user site-packages directory.
     ‘True’ means that it is enabled and was added to ‘sys.path’.
     ‘False’ means that it was disabled by user request (with *note -s:
     986. or *note PYTHONNOUSERSITE: 987.).  ‘None’ means it was
     disabled for security reasons (mismatch between user or group id
     and effective id) or by an administrator.

 -- Data: site.USER_SITE

     Path to the user site-packages for the running Python.  Can be
     ‘None’ if *note getusersitepackages(): 833. hasn’t been called yet.
     Default value is ‘~/.local/lib/python`X.Y'/site-packages’ for UNIX
     and non-framework Mac OS X builds,
     ‘~/Library/Python/`X.Y'/lib/python/site-packages’ for Mac framework
     builds, and ‘`%APPDATA%'\Python\Python`XY'\site-packages’ on
     Windows.  This directory is a site directory, which means that
     ‘.pth’ files in it will be processed.

 -- Data: site.USER_BASE

     Path to the base directory for the user site-packages.  Can be
     ‘None’ if *note getuserbase(): 832. hasn’t been called yet.
     Default value is ‘~/.local’ for UNIX and Mac OS X non-framework
     builds, ‘~/Library/Python/`X.Y'’ for Mac framework builds, and
     ‘`%APPDATA%'\Python’ for Windows.  This value is used by Distutils
     to compute the installation directories for scripts, data files,
     Python modules, etc.  for the *note user installation scheme: d19.
     See also *note PYTHONUSERBASE: 985.

 -- Function: site.main ()

     Adds all the standard site-specific directories to the module
     search path.  This function is called automatically when this
     module is imported, unless the Python interpreter was started with
     the *note -S: 766. flag.

     Changed in version 3.3: This function used to be called
     unconditionally.

 -- Function: site.addsitedir (sitedir, known_paths=None)

     Add a directory to sys.path and process its ‘.pth’ files.
     Typically used in ‘sitecustomize’ or ‘usercustomize’ (see above).

 -- Function: site.getsitepackages ()

     Return a list containing all global site-packages directories.

     New in version 3.2.

 -- Function: site.getuserbase ()

     Return the path of the user base directory, *note USER_BASE: d18.
     If it is not initialized yet, this function will also set it,
     respecting *note PYTHONUSERBASE: 985.

     New in version 3.2.

 -- Function: site.getusersitepackages ()

     Return the path of the user-specific site-packages directory, *note
     USER_SITE: d0a.  If it is not initialized yet, this function will
     also set it, respecting *note PYTHONNOUSERSITE: 987. and *note
     USER_BASE: d18.

     New in version 3.2.

The *note site: e9. module also provides a way to get the user
directories from the command line:

     $ python3 -m site --user-site
     /home/user/.local/lib/python3.3/site-packages

If it is called without arguments, it will print the contents of *note
sys.path: 16c. on the standard output, followed by the value of *note
USER_BASE: d18. and whether the directory exists, then the same thing
for *note USER_SITE: d0a, and finally the value of *note
ENABLE_USER_SITE: 2eeb.

 -- Program Option: --user-base

     Print the path to the user base directory.

 -- Program Option: --user-site

     Print the path to the user site-packages directory.

If both options are given, user base and user site will be printed
(always in this order), separated by *note os.pathsep: d15.

If any option is given, the script will exit with one of these values:
‘O’ if the user site-packages directory is enabled, ‘1’ if it was
disabled by the user, ‘2’ if it is disabled for security reasons or by
an administrator, and a value greater than 2 if there is an error.

See also
........

PEP 370(1) – Per user site-packages directory

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0370


File: python.info,  Node: fpectl --- Floating point exception control,  Prev: site --- Site-specific configuration hook,  Up: Python Runtime Services

5.29.14 ‘fpectl’ — Floating point exception control
---------------------------------------------------

     Note: The *note fpectl: 81. module is not built by default, and its
     usage is discouraged and may be dangerous except in the hands of
     experts.  See also the section *note Limitations and other
     considerations: 2ef4. on limitations for more details.

Most computers carry out floating point operations in conformance with
the so-called IEEE-754 standard.  On any real computer, some floating
point operations produce results that cannot be expressed as a normal
floating point value.  For example, try

     >>> import math
     >>> math.exp(1000)
     inf
     >>> math.exp(1000) / math.exp(1000)
     nan

(The example above will work on many platforms.  DEC Alpha may be one
exception.)  "Inf" is a special, non-numeric value in IEEE-754 that
stands for "infinity", and "nan" means "not a number."  Note that, other
than the non-numeric results, nothing special happened when you asked
Python to carry out those calculations.  That is in fact the default
behaviour prescribed in the IEEE-754 standard, and if it works for you,
stop reading now.

In some circumstances, it would be better to raise an exception and stop
processing at the point where the faulty operation was attempted.  The
*note fpectl: 81. module is for use in that situation.  It provides
control over floating point units from several hardware manufacturers,
allowing the user to turn on the generation of ‘SIGFPE’ whenever any of
the IEEE-754 exceptions Division by Zero, Overflow, or Invalid Operation
occurs.  In tandem with a pair of wrapper macros that are inserted into
the C code comprising your python system, ‘SIGFPE’ is trapped and
converted into the Python *note FloatingPointError: 10b4. exception.

The *note fpectl: 81. module defines the following functions and may
raise the given exception:

 -- Function: fpectl.turnon_sigfpe ()

     Turn on the generation of ‘SIGFPE’, and set up an appropriate
     signal handler.

 -- Function: fpectl.turnoff_sigfpe ()

     Reset default handling of floating point exceptions.

 -- Exception: fpectl.FloatingPointError

     After *note turnon_sigfpe(): 2ef5. has been executed, a floating
     point operation that raises one of the IEEE-754 exceptions Division
     by Zero, Overflow, or Invalid operation will in turn raise this
     standard Python exception.

* Menu:

* Example: Example<14>. 
* Limitations and other considerations:: 


File: python.info,  Node: Example<14>,  Next: Limitations and other considerations,  Up: fpectl --- Floating point exception control

5.29.14.1 Example
.................

The following example demonstrates how to start up and test operation of
the *note fpectl: 81. module.

     >>> import fpectl
     >>> import fpetest
     >>> fpectl.turnon_sigfpe()
     >>> fpetest.test()
     overflow        PASS
     FloatingPointError: Overflow

     div by 0        PASS
     FloatingPointError: Division by zero
       [ more output from test elided ]
     >>> import math
     >>> math.exp(1000)
     Traceback (most recent call last):
       File "<stdin>", line 1, in ?
     FloatingPointError: in math_1


File: python.info,  Node: Limitations and other considerations,  Prev: Example<14>,  Up: fpectl --- Floating point exception control

5.29.14.2 Limitations and other considerations
..............................................

Setting up a given processor to trap IEEE-754 floating point errors
currently requires custom code on a per-architecture basis.  You may
have to modify *note fpectl: 81. to control your particular hardware.

Conversion of an IEEE-754 exception to a Python exception requires that
the wrapper macros ‘PyFPE_START_PROTECT’ and ‘PyFPE_END_PROTECT’ be
inserted into your code in an appropriate fashion.  Python itself has
been modified to support the *note fpectl: 81. module, but many other
codes of interest to numerical analysts have not.

The *note fpectl: 81. module is not thread-safe.

See also
........

Some files in the source distribution may be interesting in learning
more about how this module operates.  The include file ‘Include/pyfpe.h’
discusses the implementation of this module at some length.
‘Modules/fpetestmodule.c’ gives several examples of use.  Many
additional examples can be found in ‘Objects/floatobject.c’.


File: python.info,  Node: Custom Python Interpreters,  Next: Importing Modules,  Prev: Python Runtime Services,  Up: The Python Standard Library

5.30 Custom Python Interpreters
===============================

The modules described in this chapter allow writing interfaces similar
to Python’s interactive interpreter.  If you want a Python interpreter
that supports some special feature in addition to the Python language,
you should look at the *note code: 1b. module.  (The *note codeop: 1d.
module is lower-level, used to support compiling a possibly-incomplete
chunk of Python code.)

The full list of modules described in this chapter is:

* Menu:

* code: code --- Interpreter base classes. Interpreter base classes
* codeop: codeop --- Compile Python code. Compile Python code


File: python.info,  Node: code --- Interpreter base classes,  Next: codeop --- Compile Python code,  Up: Custom Python Interpreters

5.30.1 ‘code’ — Interpreter base classes
----------------------------------------

`Source code:' Lib/code.py(1)

The ‘code’ module provides facilities to implement read-eval-print loops
in Python.  Two classes and convenience functions are included which can
be used to build applications which provide an interactive interpreter
prompt.

 -- Class: code.InteractiveInterpreter (locals=None)

     This class deals with parsing and interpreter state (the user’s
     namespace); it does not deal with input buffering or prompting or
     input file naming (the filename is always passed in explicitly).
     The optional `locals' argument specifies the dictionary in which
     code will be executed; it defaults to a newly created dictionary
     with key ‘'__name__'’ set to ‘'__console__'’ and key ‘'__doc__'’
     set to ‘None’.

 -- Class: code.InteractiveConsole (locals=None, filename="<console>")

     Closely emulate the behavior of the interactive Python interpreter.
     This class builds on *note InteractiveInterpreter: 2f00. and adds
     prompting using the familiar ‘sys.ps1’ and ‘sys.ps2’, and input
     buffering.

 -- Function: code.interact (banner=None, readfunc=None, local=None)

     Convenience function to run a read-eval-print loop.  This creates a
     new instance of *note InteractiveConsole: 11b0. and sets `readfunc'
     to be used as the *note InteractiveConsole.raw_input(): 2f02.
     method, if provided.  If `local' is provided, it is passed to the
     *note InteractiveConsole: 11b0. constructor for use as the default
     namespace for the interpreter loop.  The *note interact(): 2f01.
     method of the instance is then run with `banner' passed as the
     banner to use, if provided.  The console object is discarded after
     use.

 -- Function: code.compile_command (source, filename="<input>",
          symbol="single")

     This function is useful for programs that want to emulate Python’s
     interpreter main loop (a.k.a.  the read-eval-print loop).  The
     tricky part is to determine when the user has entered an incomplete
     command that can be completed by entering more text (as opposed to
     a complete command or a syntax error).  This function `almost'
     always makes the same decision as the real interpreter main loop.

     `source' is the source string; `filename' is the optional filename
     from which source was read, defaulting to ‘'<input>'’; and `symbol'
     is the optional grammar start symbol, which should be either
     ‘'single'’ (the default) or ‘'eval'’.

     Returns a code object (the same as ‘compile(source, filename,
     symbol)’) if the command is complete and valid; ‘None’ if the
     command is incomplete; raises *note SyntaxError: 3a6. if the
     command is complete and contains a syntax error, or raises *note
     OverflowError: 578. or *note ValueError: 19c. if the command
     contains an invalid literal.

* Menu:

* Interactive Interpreter Objects:: 
* Interactive Console Objects:: 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/code.py


File: python.info,  Node: Interactive Interpreter Objects,  Next: Interactive Console Objects,  Up: code --- Interpreter base classes

5.30.1.1 Interactive Interpreter Objects
........................................

 -- Method: InteractiveInterpreter.runsource (source,
          filename="<input>", symbol="single")

     Compile and run some source in the interpreter.  Arguments are the
     same as for *note compile_command(): 2f03.; the default for
     `filename' is ‘'<input>'’, and for `symbol' is ‘'single'’.  One
     several things can happen:

        * The input is incorrect; *note compile_command(): 2f03. raised
          an exception (*note SyntaxError: 3a6. or *note OverflowError:
          578.).  A syntax traceback will be printed by calling the
          *note showsyntaxerror(): 2f07. method.  *note runsource():
          2f06. returns ‘False’.

        * The input is incomplete, and more input is required; *note
          compile_command(): 2f03. returned ‘None’.  *note runsource():
          2f06. returns ‘True’.

        * The input is complete; *note compile_command(): 2f03. returned
          a code object.  The code is executed by calling the *note
          runcode(): 2f08. (which also handles run-time exceptions,
          except for *note SystemExit: 1a2.).  *note runsource(): 2f06.
          returns ‘False’.

     The return value can be used to decide whether to use ‘sys.ps1’ or
     ‘sys.ps2’ to prompt the next line.

 -- Method: InteractiveInterpreter.runcode (code)

     Execute a code object.  When an exception occurs, *note
     showtraceback(): 24b. is called to display a traceback.  All
     exceptions are caught except *note SystemExit: 1a2, which is
     allowed to propagate.

     A note about *note KeyboardInterrupt: 1a3.: this exception may
     occur elsewhere in this code, and may not always be caught.  The
     caller should be prepared to deal with it.

 -- Method: InteractiveInterpreter.showsyntaxerror (filename=None)

     Display the syntax error that just occurred.  This does not display
     a stack trace because there isn’t one for syntax errors.  If
     `filename' is given, it is stuffed into the exception instead of
     the default filename provided by Python’s parser, because it always
     uses ‘'<string>'’ when reading from a string.  The output is
     written by the *note write(): 2f09. method.

 -- Method: InteractiveInterpreter.showtraceback ()

     Display the exception that just occurred.  We remove the first
     stack item because it is within the interpreter object
     implementation.  The output is written by the *note write(): 2f09.
     method.

     Changed in version 3.5: The full chained traceback is displayed
     instead of just the primary traceback.

 -- Method: InteractiveInterpreter.write (data)

     Write a string to the standard error stream (‘sys.stderr’).
     Derived classes should override this to provide the appropriate
     output handling as needed.


File: python.info,  Node: Interactive Console Objects,  Prev: Interactive Interpreter Objects,  Up: code --- Interpreter base classes

5.30.1.2 Interactive Console Objects
....................................

The *note InteractiveConsole: 11b0. class is a subclass of *note
InteractiveInterpreter: 2f00, and so offers all the methods of the
interpreter objects as well as the following additions.

 -- Method: InteractiveConsole.interact (banner=None)

     Closely emulate the interactive Python console.  The optional
     `banner' argument specify the banner to print before the first
     interaction; by default it prints a banner similar to the one
     printed by the standard Python interpreter, followed by the class
     name of the console object in parentheses (so as not to confuse
     this with the real interpreter – since it’s so close!).

     Changed in version 3.4: To suppress printing any banner, pass an
     empty string.

 -- Method: InteractiveConsole.push (line)

     Push a line of source text to the interpreter.  The line should not
     have a trailing newline; it may have internal newlines.  The line
     is appended to a buffer and the interpreter’s ‘runsource()’ method
     is called with the concatenated contents of the buffer as source.
     If this indicates that the command was executed or invalid, the
     buffer is reset; otherwise, the command is incomplete, and the
     buffer is left as it was after the line was appended.  The return
     value is ‘True’ if more input is required, ‘False’ if the line was
     dealt with in some way (this is the same as ‘runsource()’).

 -- Method: InteractiveConsole.resetbuffer ()

     Remove any unhandled source text from the input buffer.

 -- Method: InteractiveConsole.raw_input (prompt="")

     Write a prompt and read a line.  The returned line does not include
     the trailing newline.  When the user enters the EOF key sequence,
     *note EOFError: 8d8. is raised.  The base implementation reads from
     ‘sys.stdin’; a subclass may replace this with a different
     implementation.


File: python.info,  Node: codeop --- Compile Python code,  Prev: code --- Interpreter base classes,  Up: Custom Python Interpreters

5.30.2 ‘codeop’ — Compile Python code
-------------------------------------

The *note codeop: 1d. module provides utilities upon which the Python
read-eval-print loop can be emulated, as is done in the *note code: 1b.
module.  As a result, you probably don’t want to use the module
directly; if you want to include such a loop in your program you
probably want to use the *note code: 1b. module instead.

There are two parts to this job:

  1. Being able to tell if a line of input completes a Python statement:
     in short, telling whether to print ’‘>>>’’ or ’‘...’’ next.

  2. Remembering which future statements the user has entered, so
     subsequent input can be compiled with these in effect.

The *note codeop: 1d. module provides a way of doing each of these
things, and a way of doing them both.

To do just the former:

 -- Function: codeop.compile_command (source, filename="<input>",
          symbol="single")

     Tries to compile `source', which should be a string of Python code
     and return a code object if `source' is valid Python code.  In that
     case, the filename attribute of the code object will be `filename',
     which defaults to ‘'<input>'’.  Returns ‘None’ if `source' is `not'
     valid Python code, but is a prefix of valid Python code.

     If there is a problem with `source', an exception will be raised.
     *note SyntaxError: 3a6. is raised if there is invalid Python
     syntax, and *note OverflowError: 578. or *note ValueError: 19c. if
     there is an invalid literal.

     The `symbol' argument determines whether `source' is compiled as a
     statement (‘'single'’, the default) or as an *note expression:
     2e2b. (‘'eval'’).  Any other value will cause *note ValueError:
     19c. to be raised.

          Note: It is possible (but not likely) that the parser stops
          parsing with a successful outcome before reaching the end of
          the source; in this case, trailing symbols may be ignored
          instead of causing an error.  For example, a backslash
          followed by two newlines may be followed by arbitrary garbage.
          This will be fixed once the API for the parser is better.

 -- Class: codeop.Compile

     Instances of this class have *note __call__(): dee. methods
     identical in signature to the built-in function *note compile():
     903, but with the difference that if the instance compiles program
     text containing a *note __future__: 0. statement, the instance
     ’remembers’ and compiles all subsequent program texts with the
     statement in force.

 -- Class: codeop.CommandCompiler

     Instances of this class have *note __call__(): dee. methods
     identical in signature to *note compile_command(): 2f11.; the
     difference is that if the instance compiles program text containing
     a ‘__future__’ statement, the instance ’remembers’ and compiles all
     subsequent program texts with the statement in force.


File: python.info,  Node: Importing Modules,  Next: Python Language Services,  Prev: Custom Python Interpreters,  Up: The Python Standard Library

5.31 Importing Modules
======================

The modules described in this chapter provide new ways to import other
Python modules and hooks for customizing the import process.

The full list of modules described in this chapter is:

* Menu:

* zipimport: zipimport --- Import modules from Zip archives. Import modules from Zip archives
* pkgutil: pkgutil --- Package extension utility. Package extension utility
* modulefinder: modulefinder --- Find modules used by a script. Find modules used by a script
* runpy: runpy --- Locating and executing Python modules. Locating and executing Python modules
* importlib: importlib -- The implementation of import. The implementation of import


File: python.info,  Node: zipimport --- Import modules from Zip archives,  Next: pkgutil --- Package extension utility,  Up: Importing Modules

5.31.1 ‘zipimport’ — Import modules from Zip archives
-----------------------------------------------------

This module adds the ability to import Python modules (‘*.py’,
‘*.py[co]’) and packages from ZIP-format archives.  It is usually not
needed to use the *note zipimport: 140. module explicitly; it is
automatically used by the built-in *note import: 881. mechanism for
*note sys.path: 16c. items that are paths to ZIP archives.

Typically, *note sys.path: 16c. is a list of directory names as strings.
This module also allows an item of *note sys.path: 16c. to be a string
naming a ZIP file archive.  The ZIP archive can contain a subdirectory
structure to support package imports, and a path within the archive can
be specified to only import from a subdirectory.  For example, the path
‘example.zip/lib/’ would only import from the ‘lib/’ subdirectory within
the archive.

Any files may be present in the ZIP archive, but only files ‘.py’ and
‘.pyc’ are available for import.  ZIP import of dynamic modules (‘.pyd’,
‘.so’) is disallowed.  Note that if an archive only contains ‘.py’
files, Python will not attempt to modify the archive by adding the
corresponding ‘.pyc’ file, meaning that if a ZIP archive doesn’t contain
‘.pyc’ files, importing may be rather slow.

ZIP archives with an archive comment are currently not supported.

See also
........

PKZIP Application Note(1)

     Documentation on the ZIP file format by Phil Katz, the creator of
     the format and algorithms used.

PEP 273(2) - Import Modules from Zip Archives

     Written by James C. Ahlstrom, who also provided an implementation.
     Python 2.3 follows the specification in PEP 273, but uses an
     implementation written by Just van Rossum that uses the import
     hooks described in PEP 302.

PEP 302(3) - New Import Hooks

     The PEP to add the import hooks that help this module work.

This module defines an exception:

 -- Exception: zipimport.ZipImportError

     Exception raised by zipimporter objects.  It’s a subclass of *note
     ImportError: 19f, so it can be caught as *note ImportError: 19f,
     too.

* Menu:

* zipimporter Objects:: 
* Examples: Examples<22>. 

   ---------- Footnotes ----------

   (1) https://pkware.cachefly.net/webdocs/casestudies/APPNOTE.TXT

   (2) https://www.python.org/dev/peps/pep-0273

   (3) https://www.python.org/dev/peps/pep-0302


File: python.info,  Node: zipimporter Objects,  Next: Examples<22>,  Up: zipimport --- Import modules from Zip archives

5.31.1.1 zipimporter Objects
............................

*note zipimporter: 2f1c. is the class for importing ZIP files.

 -- Class: zipimport.zipimporter (archivepath)

     Create a new zipimporter instance.  `archivepath' must be a path to
     a ZIP file, or to a specific path within a ZIP file.  For example,
     an `archivepath' of ‘foo/bar.zip/lib’ will look for modules in the
     ‘lib’ directory inside the ZIP file ‘foo/bar.zip’ (provided that it
     exists).

     *note ZipImportError: 2f19. is raised if `archivepath' doesn’t
     point to a valid ZIP archive.

      -- Method: find_module (fullname[, path])

          Search for a module specified by `fullname'.  `fullname' must
          be the fully qualified (dotted) module name.  It returns the
          zipimporter instance itself if the module was found, or *note
          None: 19d. if it wasn’t.  The optional `path' argument is
          ignored—it’s there for compatibility with the importer
          protocol.

      -- Method: get_code (fullname)

          Return the code object for the specified module.  Raise *note
          ZipImportError: 2f19. if the module couldn’t be found.

      -- Method: get_data (pathname)

          Return the data associated with `pathname'.  Raise *note
          OSError: 4b6. if the file wasn’t found.

          Changed in version 3.3: *note IOError: 5b0. used to be raised
          instead of *note OSError: 4b6.

      -- Method: get_filename (fullname)

          Return the value ‘__file__’ would be set to if the specified
          module was imported.  Raise *note ZipImportError: 2f19. if the
          module couldn’t be found.

          New in version 3.1.

      -- Method: get_source (fullname)

          Return the source code for the specified module.  Raise *note
          ZipImportError: 2f19. if the module couldn’t be found, return
          *note None: 19d. if the archive does contain the module, but
          has no source for it.

      -- Method: is_package (fullname)

          Return ‘True’ if the module specified by `fullname' is a
          package.  Raise *note ZipImportError: 2f19. if the module
          couldn’t be found.

      -- Method: load_module (fullname)

          Load the module specified by `fullname'.  `fullname' must be
          the fully qualified (dotted) module name.  It returns the
          imported module, or raises *note ZipImportError: 2f19. if it
          wasn’t found.

      -- Attribute: archive

          The file name of the importer’s associated ZIP file, without a
          possible subpath.

      -- Attribute: prefix

          The subpath within the ZIP file where modules are searched.
          This is the empty string for zipimporter objects which point
          to the root of the ZIP file.

     The *note archive: 2f24. and *note prefix: 2f25. attributes, when
     combined with a slash, equal the original `archivepath' argument
     given to the *note zipimporter: 2f1c. constructor.


File: python.info,  Node: Examples<22>,  Prev: zipimporter Objects,  Up: zipimport --- Import modules from Zip archives

5.31.1.2 Examples
.................

Here is an example that imports a module from a ZIP archive - note that
the *note zipimport: 140. module is not explicitly used.

     $ unzip -l example.zip
     Archive:  example.zip
       Length     Date   Time    Name
      --------    ----   ----    ----
          8467  11-26-02 22:30   jwzthreading.py
      --------                   -------
          8467                   1 file
     $ ./python
     Python 2.3 (#1, Aug 1 2003, 19:54:32)
     >>> import sys
     >>> sys.path.insert(0, 'example.zip')  # Add .zip file to front of path
     >>> import jwzthreading
     >>> jwzthreading.__file__
     'example.zip/jwzthreading.py'


File: python.info,  Node: pkgutil --- Package extension utility,  Next: modulefinder --- Find modules used by a script,  Prev: zipimport --- Import modules from Zip archives,  Up: Importing Modules

5.31.2 ‘pkgutil’ — Package extension utility
--------------------------------------------

`Source code:' Lib/pkgutil.py(1)

__________________________________________________________________

This module provides utilities for the import system, in particular
package support.

 -- Function: pkgutil.extend_path (path, name)

     Extend the search path for the modules which comprise a package.
     Intended use is to place the following code in a package’s
     ‘__init__.py’:

          from pkgutil import extend_path
          __path__ = extend_path(__path__, __name__)

     This will add to the package’s ‘__path__’ all subdirectories of
     directories on ‘sys.path’ named after the package.  This is useful
     if one wants to distribute different parts of a single logical
     package as multiple directories.

     It also looks for ‘*.pkg’ files beginning where ‘*’ matches the
     `name' argument.  This feature is similar to ‘*.pth’ files (see the
     *note site: e9. module for more information), except that it
     doesn’t special-case lines starting with ‘import’.  A ‘*.pkg’ file
     is trusted at face value: apart from checking for duplicates, all
     entries found in a ‘*.pkg’ file are added to the path, regardless
     of whether they exist on the filesystem.  (This is a feature.)

     If the input path is not a list (as is the case for frozen
     packages) it is returned unchanged.  The input path is not
     modified; an extended copy is returned.  Items are only appended to
     the copy at the end.

     It is assumed that *note sys.path: 16c. is a sequence.  Items of
     *note sys.path: 16c. that are not strings referring to existing
     directories are ignored.  Unicode items on *note sys.path: 16c.
     that cause errors when used as filenames may cause this function to
     raise an exception (in line with *note os.path.isdir(): 158f.
     behavior).

 -- Class: pkgutil.ImpImporter (dirname=None)

     PEP 302(2) Importer that wraps Python’s "classic" import algorithm.

     If `dirname' is a string, a PEP 302(3) importer is created that
     searches that directory.  If `dirname' is ‘None’, a PEP 302(4)
     importer is created that searches the current *note sys.path: 16c,
     plus any modules that are frozen or built-in.

     Note that *note ImpImporter: 2f2b. does not currently support being
     used by placement on *note sys.meta_path: 5dc.

     Deprecated since version 3.3: This emulation is no longer needed,
     as the standard import mechanism is now fully PEP 302 compliant and
     available in *note importlib: 9a.

 -- Class: pkgutil.ImpLoader (fullname, file, filename, etc)

     PEP 302(5) Loader that wraps Python’s "classic" import algorithm.

     Deprecated since version 3.3: This emulation is no longer needed,
     as the standard import mechanism is now fully PEP 302 compliant and
     available in *note importlib: 9a.

 -- Function: pkgutil.find_loader (fullname)

     Retrieve a PEP 302(6) module loader for the given `fullname'.

     This is a backwards compatibility wrapper around *note
     importlib.util.find_spec(): 540. that converts most failures to
     *note ImportError: 19f. and only returns the loader rather than the
     full ‘ModuleSpec’.

     Changed in version 3.3: Updated to be based directly on *note
     importlib: 9a. rather than relying on the package internal PEP 302
     import emulation.

     Changed in version 3.4: Updated to be based on PEP 451(7)

 -- Function: pkgutil.get_importer (path_item)

     Retrieve a PEP 302(8) importer for the given `path_item'.

     The returned importer is cached in *note sys.path_importer_cache:
     3ac. if it was newly created by a path hook.

     The cache (or part of it) can be cleared manually if a rescan of
     *note sys.path_hooks: 574. is necessary.

     Changed in version 3.3: Updated to be based directly on *note
     importlib: 9a. rather than relying on the package internal PEP 302
     import emulation.

 -- Function: pkgutil.get_loader (module_or_name)

     Get a PEP 302(9) "loader" object for `module_or_name'.

     If the module or package is accessible via the normal import
     mechanism, a wrapper around the relevant part of that machinery is
     returned.  Returns ‘None’ if the module cannot be found or
     imported.  If the named module is not already imported, its
     containing package (if any) is imported, in order to establish the
     package ‘__path__’.

     Changed in version 3.3: Updated to be based directly on *note
     importlib: 9a. rather than relying on the package internal PEP 302
     import emulation.

     Changed in version 3.4: Updated to be based on PEP 451(10)

 -- Function: pkgutil.iter_importers (fullname='')

     Yield PEP 302(11) importers for the given module name.

     If fullname contains a ’.’, the importers will be for the package
     containing fullname, otherwise they will be all registered top
     level importers (i.e.  those on both sys.meta_path and
     sys.path_hooks).

     If the named module is in a package, that package is imported as a
     side effect of invoking this function.

     If no module name is specified, all top level importers are
     produced.

     Changed in version 3.3: Updated to be based directly on *note
     importlib: 9a. rather than relying on the package internal PEP 302
     import emulation.

 -- Function: pkgutil.iter_modules (path=None, prefix='')

     Yields ‘(module_finder, name, ispkg)’ for all submodules on `path',
     or, if path is ‘None’, all top-level modules on ‘sys.path’.

     `path' should be either ‘None’ or a list of paths to look for
     modules in.

     `prefix' is a string to output on the front of every module name on
     output.

          Note: Only works for a *note finder: e81. which defines an
          ‘iter_modules()’ method.  This interface is non-standard, so
          the module also provides implementations for *note
          importlib.machinery.FileFinder: 5d6. and *note
          zipimport.zipimporter: 2f1c.

     Changed in version 3.3: Updated to be based directly on *note
     importlib: 9a. rather than relying on the package internal PEP 302
     import emulation.

 -- Function: pkgutil.walk_packages (path=None, prefix='', onerror=None)

     Yields ‘(module_finder, name, ispkg)’ for all modules recursively
     on `path', or, if path is ‘None’, all accessible modules.

     `path' should be either ‘None’ or a list of paths to look for
     modules in.

     `prefix' is a string to output on the front of every module name on
     output.

     Note that this function must import all `packages' (`not' all
     modules!)  on the given `path', in order to access the ‘__path__’
     attribute to find submodules.

     `onerror' is a function which gets called with one argument (the
     name of the package which was being imported) if any exception
     occurs while trying to import a package.  If no `onerror' function
     is supplied, *note ImportError: 19f.s are caught and ignored, while
     all other exceptions are propagated, terminating the search.

     Examples:

          # list all modules python can access
          walk_packages()

          # list all submodules of ctypes
          walk_packages(ctypes.__path__, ctypes.__name__ + '.')

          Note: Only works for a *note finder: e81. which defines an
          ‘iter_modules()’ method.  This interface is non-standard, so
          the module also provides implementations for *note
          importlib.machinery.FileFinder: 5d6. and *note
          zipimport.zipimporter: 2f1c.

     Changed in version 3.3: Updated to be based directly on *note
     importlib: 9a. rather than relying on the package internal PEP 302
     import emulation.

 -- Function: pkgutil.get_data (package, resource)

     Get a resource from a package.

     This is a wrapper for the PEP 302(12) loader *note get_data():
     2f31. API. The `package' argument should be the name of a package,
     in standard module format (‘foo.bar’).  The `resource' argument
     should be in the form of a relative filename, using ‘/’ as the path
     separator.  The parent directory name ‘..’ is not allowed, and nor
     is a rooted name (starting with a ‘/’).

     The function returns a binary string that is the contents of the
     specified resource.

     For packages located in the filesystem, which have already been
     imported, this is the rough equivalent of:

          d = os.path.dirname(sys.modules[package].__file__)
          data = open(os.path.join(d, resource), 'rb').read()

     If the package cannot be located or loaded, or it uses a PEP
     302(13) loader which does not support *note get_data(): 2f31, then
     ‘None’ is returned.

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/pkgutil.py

   (2) https://www.python.org/dev/peps/pep-0302

   (3) https://www.python.org/dev/peps/pep-0302

   (4) https://www.python.org/dev/peps/pep-0302

   (5) https://www.python.org/dev/peps/pep-0302

   (6) https://www.python.org/dev/peps/pep-0302

   (7) https://www.python.org/dev/peps/pep-0451

   (8) https://www.python.org/dev/peps/pep-0302

   (9) https://www.python.org/dev/peps/pep-0302

   (10) https://www.python.org/dev/peps/pep-0451

   (11) https://www.python.org/dev/peps/pep-0302

   (12) https://www.python.org/dev/peps/pep-0302

   (13) https://www.python.org/dev/peps/pep-0302


File: python.info,  Node: modulefinder --- Find modules used by a script,  Next: runpy --- Locating and executing Python modules,  Prev: pkgutil --- Package extension utility,  Up: Importing Modules

5.31.3 ‘modulefinder’ — Find modules used by a script
-----------------------------------------------------

`Source code:' Lib/modulefinder.py(1)

__________________________________________________________________

This module provides a *note ModuleFinder: 2f34. class that can be used
to determine the set of modules imported by a script.  ‘modulefinder.py’
can also be run as a script, giving the filename of a Python script as
its argument, after which a report of the imported modules will be
printed.

 -- Function: modulefinder.AddPackagePath (pkg_name, path)

     Record that the package named `pkg_name' can be found in the
     specified `path'.

 -- Function: modulefinder.ReplacePackage (oldname, newname)

     Allows specifying that the module named `oldname' is in fact the
     package named `newname'.

 -- Class: modulefinder.ModuleFinder (path=None, debug=0, excludes=[],
          replace_paths=[])

     This class provides *note run_script(): 2f37. and *note report():
     2f38. methods to determine the set of modules imported by a script.
     `path' can be a list of directories to search for modules; if not
     specified, ‘sys.path’ is used.  `debug' sets the debugging level;
     higher values make the class print debugging messages about what
     it’s doing.  `excludes' is a list of module names to exclude from
     the analysis.  `replace_paths' is a list of ‘(oldpath, newpath)’
     tuples that will be replaced in module paths.

      -- Method: report ()

          Print a report to standard output that lists the modules
          imported by the script and their paths, as well as modules
          that are missing or seem to be missing.

      -- Method: run_script (pathname)

          Analyze the contents of the `pathname' file, which must
          contain Python code.

      -- Attribute: modules

          A dictionary mapping module names to modules.  See *note
          Example usage of ModuleFinder: 2f3a.

* Menu:

* Example usage of ModuleFinder:: 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/modulefinder.py


File: python.info,  Node: Example usage of ModuleFinder,  Up: modulefinder --- Find modules used by a script

5.31.3.1 Example usage of ‘ModuleFinder’
........................................

The script that is going to get analyzed later on (bacon.py):

     import re, itertools

     try:
         import baconhameggs
     except ImportError:
         pass

     try:
         import guido.python.ham
     except ImportError:
         pass

The script that will output the report of bacon.py:

     from modulefinder import ModuleFinder

     finder = ModuleFinder()
     finder.run_script('bacon.py')

     print('Loaded modules:')
     for name, mod in finder.modules.items():
         print('%s: ' % name, end='')
         print(','.join(list(mod.globalnames.keys())[:3]))

     print('-'*50)
     print('Modules not imported:')
     print('\n'.join(finder.badmodules.keys()))

Sample output (may vary depending on the architecture):

     Loaded modules:
     _types:
     copyreg:  _inverted_registry,_slotnames,__all__
     sre_compile:  isstring,_sre,_optimize_unicode
     _sre:
     sre_constants:  REPEAT_ONE,makedict,AT_END_LINE
     sys:
     re:  __module__,finditer,_expand
     itertools:
     __main__:  re,itertools,baconhameggs
     sre_parse:  _PATTERNENDERS,SRE_FLAG_UNICODE
     array:
     types:  __module__,IntType,TypeType
     ---------------------------------------------------
     Modules not imported:
     guido.python.ham
     baconhameggs


File: python.info,  Node: runpy --- Locating and executing Python modules,  Next: importlib -- The implementation of import,  Prev: modulefinder --- Find modules used by a script,  Up: Importing Modules

5.31.4 ‘runpy’ — Locating and executing Python modules
------------------------------------------------------

`Source code:' Lib/runpy.py(1)

__________________________________________________________________

The *note runpy: e0. module is used to locate and run Python modules
without importing them first.  Its main use is to implement the *note
-m: 8b4. command line switch that allows scripts to be located using the
Python module namespace rather than the filesystem.

Note that this is `not' a sandbox module - all code is executed in the
current process, and any side effects (such as cached imports of other
modules) will remain in place after the functions have returned.

Furthermore, any functions and classes defined by the executed code are
not guaranteed to work correctly after a *note runpy: e0. function has
returned.  If that limitation is not acceptable for a given use case,
*note importlib: 9a. is likely to be a more suitable choice than this
module.

The *note runpy: e0. module provides two functions:

 -- Function: runpy.run_module (mod_name, init_globals=None,
          run_name=None, alter_sys=False)

     Execute the code of the specified module and return the resulting
     module globals dictionary.  The module’s code is first located
     using the standard import mechanism (refer to PEP 302(2) for
     details) and then executed in a fresh module namespace.

     The `mod_name' argument should be an absolute module name.  If the
     module name refers to a package rather than a normal module, then
     that package is imported and the ‘__main__’ submodule within that
     package is then executed and the resulting module globals
     dictionary returned.

     The optional dictionary argument `init_globals' may be used to
     pre-populate the module’s globals dictionary before the code is
     executed.  The supplied dictionary will not be modified.  If any of
     the special global variables below are defined in the supplied
     dictionary, those definitions are overridden by *note run_module():
     cfd.

     The special global variables ‘__name__’, ‘__spec__’, ‘__file__’,
     ‘__cached__’, ‘__loader__’ and ‘__package__’ are set in the globals
     dictionary before the module code is executed (Note that this is a
     minimal set of variables - other variables may be set implicitly as
     an interpreter implementation detail).

     ‘__name__’ is set to `run_name' if this optional argument is not
     *note None: 19d, to ‘mod_name + '.__main__'’ if the named module is
     a package and to the `mod_name' argument otherwise.

     ‘__spec__’ will be set appropriately for the `actually' imported
     module (that is, ‘__spec__.name’ will always be `mod_name' or
     ‘mod_name + '.__main__’, never `run_name').

     ‘__file__’, ‘__cached__’, ‘__loader__’ and ‘__package__’ are *note
     set as normal: e89. based on the module spec.

     If the argument `alter_sys' is supplied and evaluates to *note
     True: 9ff, then ‘sys.argv[0]’ is updated with the value of
     ‘__file__’ and ‘sys.modules[__name__]’ is updated with a temporary
     module object for the module being executed.  Both ‘sys.argv[0]’
     and ‘sys.modules[__name__]’ are restored to their original values
     before the function returns.

     Note that this manipulation of *note sys: fb. is not thread-safe.
     Other threads may see the partially initialised module, as well as
     the altered list of arguments.  It is recommended that the *note
     sys: fb. module be left alone when invoking this function from
     threaded code.

     See also
     ........

     The *note -m: 8b4. option offering equivalent functionality from
     the command line.

     Changed in version 3.1: Added ability to execute packages by
     looking for a ‘__main__’ submodule.

     Changed in version 3.2: Added ‘__cached__’ global variable (see PEP
     3147(3)).

     Changed in version 3.4: Updated to take advantage of the module
     spec feature added by PEP 451(4).  This allows ‘__cached__’ to be
     set correctly for modules run this way, as well as ensuring the
     real module name is always accessible as ‘__spec__.name’.

 -- Function: runpy.run_path (file_path, init_globals=None,
          run_name=None)

     Execute the code at the named filesystem location and return the
     resulting module globals dictionary.  As with a script name
     supplied to the CPython command line, the supplied path may refer
     to a Python source file, a compiled bytecode file or a valid
     sys.path entry containing a ‘__main__’ module (e.g.  a zipfile
     containing a top-level ‘__main__.py’ file).

     For a simple script, the specified code is simply executed in a
     fresh module namespace.  For a valid sys.path entry (typically a
     zipfile or directory), the entry is first added to the beginning of
     ‘sys.path’.  The function then looks for and executes a *note
     __main__: 1. module using the updated path.  Note that there is no
     special protection against invoking an existing *note __main__: 1.
     entry located elsewhere on ‘sys.path’ if there is no such module at
     the specified location.

     The optional dictionary argument `init_globals' may be used to
     pre-populate the module’s globals dictionary before the code is
     executed.  The supplied dictionary will not be modified.  If any of
     the special global variables below are defined in the supplied
     dictionary, those definitions are overridden by *note run_path():
     925.

     The special global variables ‘__name__’, ‘__spec__’, ‘__file__’,
     ‘__cached__’, ‘__loader__’ and ‘__package__’ are set in the globals
     dictionary before the module code is executed (Note that this is a
     minimal set of variables - other variables may be set implicitly as
     an interpreter implementation detail).

     ‘__name__’ is set to `run_name' if this optional argument is not
     *note None: 19d. and to ‘'<run_path>'’ otherwise.

     If the supplied path directly references a script file (whether as
     source or as precompiled byte code), then ‘__file__’ will be set to
     the supplied path, and ‘__spec__’, ‘__cached__’, ‘__loader__’ and
     ‘__package__’ will all be set to *note None: 19d.

     If the supplied path is a reference to a valid sys.path entry, then
     ‘__spec__’ will be set appropriately for the imported ‘__main__’
     module (that is, ‘__spec__.name’ will always be ‘__main__’).
     ‘__file__’, ‘__cached__’, ‘__loader__’ and ‘__package__’ will be
     *note set as normal: e89. based on the module spec.

     A number of alterations are also made to the *note sys: fb. module.
     Firstly, ‘sys.path’ may be altered as described above.
     ‘sys.argv[0]’ is updated with the value of ‘file_path’ and
     ‘sys.modules[__name__]’ is updated with a temporary module object
     for the module being executed.  All modifications to items in *note
     sys: fb. are reverted before the function returns.

     Note that, unlike *note run_module(): cfd, the alterations made to
     *note sys: fb. are not optional in this function as these
     adjustments are essential to allowing the execution of sys.path
     entries.  As the thread-safety limitations still apply, use of this
     function in threaded code should be either serialised with the
     import lock or delegated to a separate process.

     See also
     ........

     *note Interface options: cfc. for equivalent functionality on the
     command line (‘python path/to/script’).

     New in version 3.2.

     Changed in version 3.4: Updated to take advantage of the module
     spec feature added by PEP 451(5).  This allows ‘__cached__’ to be
     set correctly in the case where ‘__main__’ is imported from a valid
     sys.path entry rather than being executed directly.

See also
........

PEP 338(6) – Executing modules as scripts

     PEP written and implemented by Nick Coghlan.

PEP 366(7) – Main module explicit relative imports

     PEP written and implemented by Nick Coghlan.

PEP 451(8) – A ModuleSpec Type for the Import System

     PEP written and implemented by Eric Snow

*note Command line and environment: bd3. - CPython command line details

The *note importlib.import_module(): 754. function

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/runpy.py

   (2) https://www.python.org/dev/peps/pep-0302

   (3) https://www.python.org/dev/peps/pep-3147

   (4) https://www.python.org/dev/peps/pep-0451

   (5) https://www.python.org/dev/peps/pep-0451

   (6) https://www.python.org/dev/peps/pep-0338

   (7) https://www.python.org/dev/peps/pep-0366

   (8) https://www.python.org/dev/peps/pep-0451


File: python.info,  Node: importlib -- The implementation of import,  Prev: runpy --- Locating and executing Python modules,  Up: Importing Modules

5.31.5 ‘importlib’ – The implementation of ‘import’
---------------------------------------------------

New in version 3.1.

* Menu:

* Introduction: Introduction<12>. 
* Functions: Functions<8>. 
* importlib.abc: importlib abc -- Abstract base classes related to import. Abstract base classes related to import
* importlib.machinery: importlib machinery -- Importers and path hooks. Importers and path hooks
* importlib.util: importlib util -- Utility code for importers. Utility code for importers
* Examples: Examples<23>. 


File: python.info,  Node: Introduction<12>,  Next: Functions<8>,  Up: importlib -- The implementation of import

5.31.5.1 Introduction
.....................

The purpose of the *note importlib: 9a. package is two-fold.  One is to
provide the implementation of the *note import: 881. statement (and
thus, by extension, the *note __import__(): 5cd. function) in Python
source code.  This provides an implementation of *note import: 881.
which is portable to any Python interpreter.  This also provides an
implementation which is easier to comprehend than one implemented in a
programming language other than Python.

Two, the components to implement *note import: 881. are exposed in this
package, making it easier for users to create their own custom objects
(known generically as an *note importer: e83.) to participate in the
import process.

See also
........

*note The import statement: 881.

     The language reference for the *note import: 881. statement.

Packages specification(1)

     Original specification of packages.  Some semantics have changed
     since the writing of this document (e.g.  redirecting based on
     ‘None’ in *note sys.modules: e75.).

The *note __import__(): 5ce. function

     The *note import: 881. statement is syntactic sugar for this
     function.

PEP 235(2)

     Import on Case-Insensitive Platforms

PEP 263(3)

     Defining Python Source Code Encodings

PEP 302(4)

     New Import Hooks

PEP 328(5)

     Imports: Multi-Line and Absolute/Relative

PEP 366(6)

     Main module explicit relative imports

PEP 451(7)

     A ModuleSpec Type for the Import System

PEP 488(8)

     Elimination of PYO files

PEP 489(9)

     Multi-phase extension module initialization

PEP 3120(10)

     Using UTF-8 as the Default Source Encoding

PEP 3147(11)

     PYC Repository Directories

   ---------- Footnotes ----------

   (1) http://legacy.python.org/doc/essays/packages.html

   (2) https://www.python.org/dev/peps/pep-0235

   (3) https://www.python.org/dev/peps/pep-0263

   (4) https://www.python.org/dev/peps/pep-0302

   (5) https://www.python.org/dev/peps/pep-0328

   (6) https://www.python.org/dev/peps/pep-0366

   (7) https://www.python.org/dev/peps/pep-0451

   (8) https://www.python.org/dev/peps/pep-0488

   (9) https://www.python.org/dev/peps/pep-0489

   (10) https://www.python.org/dev/peps/pep-3120

   (11) https://www.python.org/dev/peps/pep-3147


File: python.info,  Node: Functions<8>,  Next: importlib abc -- Abstract base classes related to import,  Prev: Introduction<12>,  Up: importlib -- The implementation of import

5.31.5.2 Functions
..................

 -- Function: importlib.__import__ (name, globals=None, locals=None,
          fromlist=(), level=0)

     An implementation of the built-in *note __import__(): 5cd.
     function.

          Note: Programmatic importing of modules should use *note
          import_module(): 754. instead of this function.

 -- Function: importlib.import_module (name, package=None)

     Import a module.  The `name' argument specifies what module to
     import in absolute or relative terms (e.g.  either ‘pkg.mod’ or
     ‘..mod’).  If the name is specified in relative terms, then the
     `package' argument must be set to the name of the package which is
     to act as the anchor for resolving the package name (e.g.
     ‘import_module('..mod', 'pkg.subpkg')’ will import ‘pkg.mod’).

     The *note import_module(): 754. function acts as a simplifying
     wrapper around *note importlib.__import__(): 5ce.  This means all
     semantics of the function are derived from *note
     importlib.__import__(): 5ce.  The most important difference between
     these two functions is that *note import_module(): 754. returns the
     specified package or module (e.g.  ‘pkg.mod’), while *note
     __import__(): 5cd. returns the top-level package or module (e.g.
     ‘pkg’).

     If you are dynamically importing a module that was created since
     the interpreter began execution (e.g., created a Python source
     file), you may need to call *note invalidate_caches(): 5da. in
     order for the new module to be noticed by the import system.

     Changed in version 3.3: Parent packages are automatically imported.

 -- Function: importlib.find_loader (name, path=None)

     Find the loader for a module, optionally within the specified
     `path'.  If the module is in *note sys.modules: e75, then
     ‘sys.modules[name].__loader__’ is returned (unless the loader would
     be ‘None’ or is not set, in which case *note ValueError: 19c. is
     raised).  Otherwise a search using *note sys.meta_path: 5dc. is
     done.  ‘None’ is returned if no loader is found.

     A dotted name does not have its parent’s implicitly imported as
     that requires loading them and that may not be desired.  To
     properly import a submodule you will need to import all parent
     packages of the submodule and use the correct argument to `path'.

     New in version 3.3.

     Changed in version 3.4: If ‘__loader__’ is not set, raise *note
     ValueError: 19c, just like when the attribute is set to ‘None’.

     Deprecated since version 3.4: Use *note importlib.util.find_spec():
     540. instead.

 -- Function: importlib.invalidate_caches ()

     Invalidate the internal caches of finders stored at *note
     sys.meta_path: 5dc.  If a finder implements ‘invalidate_caches()’
     then it will be called to perform the invalidation.  This function
     should be called if any modules are created/installed while your
     program is running to guarantee all finders will notice the new
     module’s existence.

     New in version 3.3.

 -- Function: importlib.reload (module)

     Reload a previously imported `module'.  The argument must be a
     module object, so it must have been successfully imported before.
     This is useful if you have edited the module source file using an
     external editor and want to try out the new version without leaving
     the Python interpreter.  The return value is the module object
     (which can be different if re-importing causes a different object
     to be placed in *note sys.modules: e75.).

     When *note reload(): 457. is executed:

        * Python module’s code is recompiled and the module-level code
          re-executed, defining a new set of objects which are bound to
          names in the module’s dictionary by reusing the *note loader:
          e82. which originally loaded the module.  The ‘init’ function
          of extension modules is not called a second time.

        * As with all other objects in Python the old objects are only
          reclaimed after their reference counts drop to zero.

        * The names in the module namespace are updated to point to any
          new or changed objects.

        * Other references to the old objects (such as names external to
          the module) are not rebound to refer to the new objects and
          must be updated in each namespace where they occur if that is
          desired.

     There are a number of other caveats:

     When a module is reloaded, its dictionary (containing the module’s
     global variables) is retained.  Redefinitions of names will
     override the old definitions, so this is generally not a problem.
     If the new version of a module does not define a name that was
     defined by the old version, the old definition remains.  This
     feature can be used to the module’s advantage if it maintains a
     global table or cache of objects — with a *note try: 9e9. statement
     it can test for the table’s presence and skip its initialization if
     desired:

          try:
              cache
          except NameError:
              cache = {}

     It is generally not very useful to reload built-in or dynamically
     loaded modules.  Reloading *note sys: fb, *note __main__: 1, *note
     builtins: 13. and other key modules is not recommended.  In many
     cases extension modules are not designed to be initialized more
     than once, and may fail in arbitrary ways when reloaded.

     If a module imports objects from another module using *note from:
     8ad. ...  *note import: 881. ..., calling *note reload(): 457. for
     the other module does not redefine the objects imported from it —
     one way around this is to re-execute the *note from: 8ad.
     statement, another is to use *note import: 881. and qualified names
     (`module.name') instead.

     If a module instantiates instances of a class, reloading the module
     that defines the class does not affect the method definitions of
     the instances — they continue to use the old class definition.  The
     same is true for derived classes.

     New in version 3.4.


File: python.info,  Node: importlib abc -- Abstract base classes related to import,  Next: importlib machinery -- Importers and path hooks,  Prev: Functions<8>,  Up: importlib -- The implementation of import

5.31.5.3 ‘importlib.abc’ – Abstract base classes related to import
..................................................................

The *note importlib.abc: 9b. module contains all of the core abstract
base classes used by *note import: 881.  Some subclasses of the core
abstract base classes are also provided to help in implementing the core
ABCs.

ABC hierarchy:

     object
      +-- Finder (deprecated)
      |    +-- MetaPathFinder
      |    +-- PathEntryFinder
      +-- Loader
           +-- ResourceLoader --------+
           +-- InspectLoader          |
                +-- ExecutionLoader --+
                                      +-- FileLoader
                                      +-- SourceLoader

 -- Class: importlib.abc.Finder

     An abstract base class representing a *note finder: e81.

     Deprecated since version 3.3: Use *note MetaPathFinder: 5d3. or
     *note PathEntryFinder: 5d4. instead.

      -- Method: abstractmethod find_module (fullname, path=None)

          An abstact method for finding a *note loader: e82. for the
          specified module.  Originally specified in PEP 302(1), this
          method was meant for use in *note sys.meta_path: 5dc. and in
          the path-based import subsystem.

          Changed in version 3.4: Returns ‘None’ when called instead of
          raising *note NotImplementedError: 569.

 -- Class: importlib.abc.MetaPathFinder

     An abstract base class representing a *note meta path finder: 5d1.
     For compatibility, this is a subclass of *note Finder: 5d5.

     New in version 3.3.

      -- Method: find_spec (fullname, path, target=None)

          An abstract method for finding a *note spec: 2e37. for the
          specified module.  If this is a top-level import, `path' will
          be ‘None’.  Otherwise, this is a search for a subpackage or
          module and `path' will be the value of *note __path__: c50.
          from the parent package.  If a spec cannot be found, ‘None’ is
          returned.  When passed in, ‘target’ is a module object that
          the finder may use to make a more educated guess about what
          spec to return.

          New in version 3.4.

      -- Method: find_module (fullname, path)

          A legacy method for finding a *note loader: e82. for the
          specified module.  If this is a top-level import, `path' will
          be ‘None’.  Otherwise, this is a search for a subpackage or
          module and `path' will be the value of *note __path__: c50.
          from the parent package.  If a loader cannot be found, ‘None’
          is returned.

          If *note find_spec(): 544. is defined, backwards-compatible
          functionality is provided.

          Changed in version 3.4: Returns ‘None’ when called instead of
          raising *note NotImplementedError: 569.  Can use *note
          find_spec(): 544. to provide functionality.

          Deprecated since version 3.4: Use *note find_spec(): 544.
          instead.

      -- Method: invalidate_caches ()

          An optional method which, when called, should invalidate any
          internal cache used by the finder.  Used by *note
          importlib.invalidate_caches(): 5da. when invalidating the
          caches of all finders on *note sys.meta_path: 5dc.

          Changed in version 3.4: Returns ‘None’ when called instead of
          ‘NotImplemented’.

 -- Class: importlib.abc.PathEntryFinder

     An abstract base class representing a *note path entry finder: 5d2.
     Though it bears some similarities to *note MetaPathFinder: 5d3,
     ‘PathEntryFinder’ is meant for use only within the path-based
     import subsystem provided by ‘PathFinder’.  This ABC is a subclass
     of *note Finder: 5d5. for compatibility reasons only.

     New in version 3.3.

      -- Method: find_spec (fullname, target=None)

          An abstract method for finding a *note spec: 2e37. for the
          specified module.  The finder will search for the module only
          within the *note path entry: e97. to which it is assigned.  If
          a spec cannot be found, ‘None’ is returned.  When passed in,
          ‘target’ is a module object that the finder may use to make a
          more educated guess about what spec to return.

          New in version 3.4.

      -- Method: find_loader (fullname)

          A legacy method for finding a *note loader: e82. for the
          specified module.  Returns a 2-tuple of ‘(loader, portion)’
          where ‘portion’ is a sequence of file system locations
          contributing to part of a namespace package.  The loader may
          be ‘None’ while specifying ‘portion’ to signify the
          contribution of the file system locations to a namespace
          package.  An empty list can be used for ‘portion’ to signify
          the loader is not part of a namespace package.  If ‘loader’ is
          ‘None’ and ‘portion’ is the empty list then no loader or
          location for a namespace package were found (i.e.  failure to
          find anything for the module).

          If *note find_spec(): 547. is defined then
          backwards-compatible functionality is provided.

          Changed in version 3.4: Returns ‘(None, [])’ instead of
          raising *note NotImplementedError: 569.  Uses *note
          find_spec(): 547. when available to provide functionality.

          Deprecated since version 3.4: Use *note find_spec(): 547.
          instead.

      -- Method: find_module (fullname)

          A concrete implementation of *note Finder.find_module(): 2f43.
          which is equivalent to ‘self.find_loader(fullname)[0]’.

          Deprecated since version 3.4: Use *note find_spec(): 547.
          instead.

      -- Method: invalidate_caches ()

          An optional method which, when called, should invalidate any
          internal cache used by the finder.  Used by
          ‘PathFinder.invalidate_caches()’ when invalidating the caches
          of all cached finders.

 -- Class: importlib.abc.Loader

     An abstract base class for a *note loader: e82.  See PEP 302(2) for
     the exact definition for a loader.

      -- Method: create_module (spec)

          A method that returns the module object to use when importing
          a module.  This method may return ‘None’, indicating that
          default module creation semantics should take place.

          New in version 3.4.

          Changed in version 3.5: Starting in Python 3.6, this method
          will not be optional when *note exec_module(): 18c. is
          defined.

      -- Method: exec_module (module)

          An abstract method that executes the module in its own
          namespace when a module is imported or reloaded.  The module
          should already be initialized when exec_module() is called.

          New in version 3.4.

      -- Method: load_module (fullname)

          A legacy method for loading a module.  If the module cannot be
          loaded, *note ImportError: 19f. is raised, otherwise the
          loaded module is returned.

          If the requested module already exists in *note sys.modules:
          e75, that module should be used and reloaded.  Otherwise the
          loader should create a new module and insert it into *note
          sys.modules: e75. before any loading begins, to prevent
          recursion from the import.  If the loader inserted a module
          and the load fails, it must be removed by the loader from
          *note sys.modules: e75.; modules already in *note sys.modules:
          e75. before the loader began execution should be left alone
          (see *note importlib.util.module_for_loader(): 54e.).

          The loader should set several attributes on the module.  (Note
          that some of these attributes can change when a module is
          reloaded):

             - 
               *note __name__: 8d3.

                    The name of the module.

             - 
               *note __file__: df0.

                    The path to where the module data is stored (not set
                    for built-in modules).

             - 
               *note __cached__: 775.

                    The path to where a compiled version of the module
                    is/should be stored (not set when the attribute
                    would be inappropriate).

             - 
               *note __path__: c50.

                    A list of strings specifying the search path within
                    a package.  This attribute is not set on modules.

             - 
               *note __package__: 56b.

                    The parent package for the module/package.  If the
                    module is top-level then it has a value of the empty
                    string.  The *note
                    importlib.util.module_for_loader(): 54e. decorator
                    can handle the details for *note __package__: 56b.

             - 
               *note __loader__: 56c.

                    The loader used to load the module.  The *note
                    importlib.util.module_for_loader(): 54e. decorator
                    can handle the details for *note __package__: 56b.

          When *note exec_module(): 18c. is available then
          backwards-compatible functionality is provided.

          Changed in version 3.4: Raise *note ImportError: 19f. when
          called instead of *note NotImplementedError: 569.
          Functionality provided when *note exec_module(): 18c. is
          available.

          Deprecated since version 3.4: The recommended API for loading
          a module is *note exec_module(): 18c. (and *note
          create_module(): e8b.).  Loaders should implement it instead
          of load_module().  The import machinery takes care of all the
          other responsibilities of load_module() when exec_module() is
          implemented.

      -- Method: module_repr (module)

          A legacy method which when implemented calculates and returns
          the given module’s repr, as a string.  The module type’s
          default repr() will use the result of this method as
          appropriate.

          New in version 3.3.

          Changed in version 3.4: Made optional instead of an
          abstractmethod.

          Deprecated since version 3.4: The import machinery now takes
          care of this automatically.

 -- Class: importlib.abc.ResourceLoader

     An abstract base class for a *note loader: e82. which implements
     the optional PEP 302(3) protocol for loading arbitrary resources
     from the storage back-end.

      -- Method: abstractmethod get_data (path)

          An abstract method to return the bytes for the data located at
          `path'.  Loaders that have a file-like storage back-end that
          allows storing arbitrary data can implement this abstract
          method to give direct access to the data stored.  *note
          OSError: 4b6. is to be raised if the `path' cannot be found.
          The `path' is expected to be constructed using a module’s
          *note __file__: df0. attribute or an item from a package’s
          *note __path__: c50.

          Changed in version 3.4: Raises *note OSError: 4b6. instead of
          *note NotImplementedError: 569.

 -- Class: importlib.abc.InspectLoader

     An abstract base class for a *note loader: e82. which implements
     the optional PEP 302(4) protocol for loaders that inspect modules.

      -- Method: get_code (fullname)

          Return the code object for a module, or ‘None’ if the module
          does not have a code object (as would be the case, for
          example, for a built-in module).  Raise an *note ImportError:
          19f. if loader cannot find the requested module.

               Note: While the method has a default implementation, it
               is suggested that it be overridden if possible for
               performance.

          Changed in version 3.4: No longer abstract and a concrete
          implementation is provided.

      -- Method: abstractmethod get_source (fullname)

          An abstract method to return the source of a module.  It is
          returned as a text string using *note universal newlines: 994,
          translating all recognized line separators into ‘'\n'’
          characters.  Returns ‘None’ if no source is available (e.g.  a
          built-in module).  Raises *note ImportError: 19f. if the
          loader cannot find the module specified.

          Changed in version 3.4: Raises *note ImportError: 19f. instead
          of *note NotImplementedError: 569.

      -- Method: is_package (fullname)

          An abstract method to return a true value if the module is a
          package, a false value otherwise.  *note ImportError: 19f. is
          raised if the *note loader: e82. cannot find the module.

          Changed in version 3.4: Raises *note ImportError: 19f. instead
          of *note NotImplementedError: 569.

      -- Static Method: source_to_code (data, path='<string>')

          Create a code object from Python source.

          The `data' argument can be whatever the *note compile(): 903.
          function supports (i.e.  string or bytes).  The `path'
          argument should be the "path" to where the source code
          originated from, which can be an abstract concept (e.g.
          location in a zip file).

          With the subsequent code object one can execute it in a module
          by running ‘exec(code, module.__dict__)’.

          New in version 3.4.

          Changed in version 3.5: Made the method static.

      -- Method: exec_module (module)

          Implementation of *note Loader.exec_module(): 18c.

          New in version 3.4.

      -- Method: load_module (fullname)

          Implementation of *note Loader.load_module(): 18b.

          Deprecated since version 3.4: use *note exec_module(): 54b.
          instead.

 -- Class: importlib.abc.ExecutionLoader

     An abstract base class which inherits from *note InspectLoader:
     455. that, when implemented, helps a module to be executed as a
     script.  The ABC represents an optional PEP 302(5) protocol.

      -- Method: abstractmethod get_filename (fullname)

          An abstract method that is to return the value of *note
          __file__: df0. for the specified module.  If no path is
          available, *note ImportError: 19f. is raised.

          If source code is available, then the method should return the
          path to the source file, regardless of whether a bytecode was
          used to load the module.

          Changed in version 3.4: Raises *note ImportError: 19f. instead
          of *note NotImplementedError: 569.

 -- Class: importlib.abc.FileLoader (fullname, path)

     An abstract base class which inherits from *note ResourceLoader:
     2f46. and *note ExecutionLoader: 2f49, providing concrete
     implementations of *note ResourceLoader.get_data(): 2f47. and *note
     ExecutionLoader.get_filename(): 2f4a.

     The `fullname' argument is a fully resolved name of the module the
     loader is to handle.  The `path' argument is the path to the file
     for the module.

     New in version 3.3.

      -- Attribute: name

          The name of the module the loader can handle.

      -- Attribute: path

          Path to the file of the module.

      -- Method: load_module (fullname)

          Calls super’s ‘load_module()’.

          Deprecated since version 3.4: Use *note Loader.exec_module():
          18c. instead.

      -- Method: abstractmethod get_filename (fullname)

          Returns *note path: 2f4c.

      -- Method: abstractmethod get_data (path)

          Reads `path' as a binary file and returns the bytes from it.

 -- Class: importlib.abc.SourceLoader

     An abstract base class for implementing source (and optionally
     bytecode) file loading.  The class inherits from both *note
     ResourceLoader: 2f46. and *note ExecutionLoader: 2f49, requiring
     the implementation of:

        * *note ResourceLoader.get_data(): 2f47.

        * 
          *note ExecutionLoader.get_filename(): 2f4a.

               Should only return the path to the source file;
               sourceless loading is not supported.

     The abstract methods defined by this class are to add optional
     bytecode file support.  Not implementing these optional methods (or
     causing them to raise *note NotImplementedError: 569.) causes the
     loader to only work with source code.  Implementing the methods
     allows the loader to work with source `and' bytecode files; it does
     not allow for `sourceless' loading where only bytecode is provided.
     Bytecode files are an optimization to speed up loading by removing
     the parsing step of Python’s compiler, and so no bytecode-specific
     API is exposed.

      -- Method: path_stats (path)

          Optional abstract method which returns a *note dict: 3b0.
          containing metadata about the specifed path.  Supported
          dictionary keys are:

             - ‘'mtime'’ (mandatory): an integer or floating-point
               number representing the modification time of the source
               code;

             - ‘'size'’ (optional): the size in bytes of the source
               code.

          Any other keys in the dictionary are ignored, to allow for
          future extensions.  If the path cannot be handled, *note
          OSError: 4b6. is raised.

          New in version 3.3.

          Changed in version 3.4: Raise *note OSError: 4b6. instead of
          *note NotImplementedError: 569.

      -- Method: path_mtime (path)

          Optional abstract method which returns the modification time
          for the specified path.

          Deprecated since version 3.3: This method is deprecated in
          favour of *note path_stats(): 72d.  You don’t have to
          implement it, but it is still available for compatibility
          purposes.  Raise *note OSError: 4b6. if the path cannot be
          handled.

          Changed in version 3.4: Raise *note OSError: 4b6. instead of
          *note NotImplementedError: 569.

      -- Method: set_data (path, data)

          Optional abstract method which writes the specified bytes to a
          file path.  Any intermediate directories which do not exist
          are to be created automatically.

          When writing to the path fails because the path is read-only
          (*note errno.EACCES: 1ba1./*note PermissionError: 1a6.), do
          not propagate the exception.

          Changed in version 3.4: No longer raises *note
          NotImplementedError: 569. when called.

      -- Method: get_code (fullname)

          Concrete implementation of *note InspectLoader.get_code():
          456.

      -- Method: exec_module (module)

               Concrete implementation of *note Loader.exec_module():
               18c.

          New in version 3.4.

      -- Method: load_module (fullname)

          Concrete implementation of *note Loader.load_module(): 18b.

          Deprecated since version 3.4: Use *note exec_module(): 54c.
          instead.

      -- Method: get_source (fullname)

          Concrete implementation of *note InspectLoader.get_source():
          45c.

      -- Method: is_package (fullname)

          Concrete implementation of *note InspectLoader.is_package():
          2f48.  A module is determined to be a package if its file path
          (as provided by *note ExecutionLoader.get_filename(): 2f4a.)
          is a file named ‘__init__’ when the file extension is removed
          `and' the module name itself does not end in ‘__init__’.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0302

   (2) https://www.python.org/dev/peps/pep-0302

   (3) https://www.python.org/dev/peps/pep-0302

   (4) https://www.python.org/dev/peps/pep-0302

   (5) https://www.python.org/dev/peps/pep-0302


File: python.info,  Node: importlib machinery -- Importers and path hooks,  Next: importlib util -- Utility code for importers,  Prev: importlib abc -- Abstract base classes related to import,  Up: importlib -- The implementation of import

5.31.5.4 ‘importlib.machinery’ – Importers and path hooks
.........................................................

This module contains the various objects that help *note import: 881.
find and load modules.

 -- Attribute: importlib.machinery.SOURCE_SUFFIXES

     A list of strings representing the recognized file suffixes for
     source modules.

     New in version 3.3.

 -- Attribute: importlib.machinery.DEBUG_BYTECODE_SUFFIXES

     A list of strings representing the file suffixes for non-optimized
     bytecode modules.

     New in version 3.3.

     Deprecated since version 3.5: Use *note BYTECODE_SUFFIXES: 2f56.
     instead.

 -- Attribute: importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES

     A list of strings representing the file suffixes for optimized
     bytecode modules.

     New in version 3.3.

     Deprecated since version 3.5: Use *note BYTECODE_SUFFIXES: 2f56.
     instead.

 -- Attribute: importlib.machinery.BYTECODE_SUFFIXES

     A list of strings representing the recognized file suffixes for
     bytecode modules (including the leading dot).

     New in version 3.3.

     Changed in version 3.5: The value is no longer dependent on
     ‘__debug__’.

 -- Attribute: importlib.machinery.EXTENSION_SUFFIXES

     A list of strings representing the recognized file suffixes for
     extension modules.

     New in version 3.3.

 -- Function: importlib.machinery.all_suffixes ()

     Returns a combined list of strings representing all file suffixes
     for modules recognized by the standard import machinery.  This is a
     helper for code which simply needs to know if a filesystem path
     potentially refers to a module without needing any details on the
     kind of module (for example, *note inspect.getmodulename(): 197.).

     New in version 3.3.

 -- Class: importlib.machinery.BuiltinImporter

     An *note importer: e83. for built-in modules.  All known built-in
     modules are listed in *note sys.builtin_module_names: 2e25.  This
     class implements the *note importlib.abc.MetaPathFinder: 5d3. and
     *note importlib.abc.InspectLoader: 455. ABCs.

     Only class methods are defined by this class to alleviate the need
     for instantiation.

     Changed in version 3.5: As part of PEP 489(1), the builtin importer
     now implements ‘Loader.create_module()’ and ‘Loader.exec_module()’

 -- Class: importlib.machinery.FrozenImporter

     An *note importer: e83. for frozen modules.  This class implements
     the *note importlib.abc.MetaPathFinder: 5d3. and *note
     importlib.abc.InspectLoader: 455. ABCs.

     Only class methods are defined by this class to alleviate the need
     for instantiation.

 -- Class: importlib.machinery.WindowsRegistryFinder

     *note Finder: e81. for modules declared in the Windows registry.
     This class implements the *note importlib.abc.Finder: 5d5. ABC.

     Only class methods are defined by this class to alleviate the need
     for instantiation.

     New in version 3.3.

 -- Class: importlib.machinery.PathFinder

     A *note Finder: e81. for *note sys.path: 16c. and package
     ‘__path__’ attributes.  This class implements the *note
     importlib.abc.MetaPathFinder: 5d3. ABC.

     Only class methods are defined by this class to alleviate the need
     for instantiation.

      -- Class Method: find_spec (fullname, path=None, target=None)

          Class method that attempts to find a *note spec: 2e37. for the
          module specified by `fullname' on *note sys.path: 16c. or, if
          defined, on `path'.  For each path entry that is searched,
          *note sys.path_importer_cache: 3ac. is checked.  If a
          non-false object is found then it is used as the *note path
          entry finder: 5d2. to look for the module being searched for.
          If no entry is found in *note sys.path_importer_cache: 3ac,
          then *note sys.path_hooks: 574. is searched for a finder for
          the path entry and, if found, is stored in *note
          sys.path_importer_cache: 3ac. along with being queried about
          the module.  If no finder is ever found then ‘None’ is both
          stored in the cache and returned.

          New in version 3.4.

          Changed in version 3.5: If the current working directory –
          represented by an empty string – is no longer valid then
          ‘None’ is returned but no value is cached in *note
          sys.path_importer_cache: 3ac.

      -- Class Method: find_module (fullname, path=None)

          A legacy wrapper around *note find_spec(): 542.

          Deprecated since version 3.4: Use *note find_spec(): 542.
          instead.

      -- Class Method: invalidate_caches ()

          Calls *note importlib.abc.PathEntryFinder.invalidate_caches():
          2f45. on all finders stored in *note sys.path_importer_cache:
          3ac.

     Changed in version 3.4: Calls objects in *note sys.path_hooks: 574.
     with the current working directory for ‘''’ (i.e.  the empty
     string).

 -- Class: importlib.machinery.FileFinder (path, *loader_details)

     A concrete implementation of *note importlib.abc.PathEntryFinder:
     5d4. which caches results from the file system.

     The `path' argument is the directory for which the finder is in
     charge of searching.

     The `loader_details' argument is a variable number of 2-item tuples
     each containing a loader and a sequence of file suffixes the loader
     recognizes.  The loaders are expected to be callables which accept
     two arguments of the module’s name and the path to the file found.

     The finder will cache the directory contents as necessary, making
     stat calls for each module search to verify the cache is not
     outdated.  Because cache staleness relies upon the granularity of
     the operating system’s state information of the file system, there
     is a potential race condition of searching for a module, creating a
     new file, and then searching for the module the new file
     represents.  If the operations happen fast enough to fit within the
     granularity of stat calls, then the module search will fail.  To
     prevent this from happening, when you create a module dynamically,
     make sure to call *note importlib.invalidate_caches(): 5da.

     New in version 3.3.

      -- Attribute: path

          The path the finder will search in.

      -- Method: find_spec (fullname, target=None)

          Attempt to find the spec to handle `fullname' within *note
          path: 2f5c.

          New in version 3.4.

      -- Method: find_loader (fullname)

          Attempt to find the loader to handle `fullname' within *note
          path: 2f5c.

      -- Method: invalidate_caches ()

          Clear out the internal cache.

      -- Class Method: path_hook (*loader_details)

          A class method which returns a closure for use on *note
          sys.path_hooks: 574.  An instance of *note FileFinder: 5d6. is
          returned by the closure using the path argument given to the
          closure directly and `loader_details' indirectly.

          If the argument to the closure is not an existing directory,
          *note ImportError: 19f. is raised.

 -- Class: importlib.machinery.SourceFileLoader (fullname, path)

     A concrete implementation of *note importlib.abc.SourceLoader:
     2f4f. by subclassing *note importlib.abc.FileLoader: 5d7. and
     providing some concrete implementations of other methods.

     New in version 3.3.

      -- Attribute: name

          The name of the module that this loader will handle.

      -- Attribute: path

          The path to the source file.

      -- Method: is_package (fullname)

          Return true if *note path: 2f61. appears to be for a package.

      -- Method: path_stats (path)

          Concrete implementation of *note
          importlib.abc.SourceLoader.path_stats(): 72d.

      -- Method: set_data (path, data)

          Concrete implementation of *note
          importlib.abc.SourceLoader.set_data(): 2f50.

      -- Method: load_module (name=None)

          Concrete implementation of *note
          importlib.abc.Loader.load_module(): 18b. where specifying the
          name of the module to load is optional.

          Deprecated since version 3.6: Use *note
          importlib.abc.Loader.exec_module(): 18c. instead.

 -- Class: importlib.machinery.SourcelessFileLoader (fullname, path)

     A concrete implementation of *note importlib.abc.FileLoader: 5d7.
     which can import bytecode files (i.e.  no source code files exist).

     Please note that direct use of bytecode files (and thus not source
     code files) inhibits your modules from being usable by all Python
     implementations or new versions of Python which change the bytecode
     format.

     New in version 3.3.

      -- Attribute: name

          The name of the module the loader will handle.

      -- Attribute: path

          The path to the bytecode file.

      -- Method: is_package (fullname)

          Determines if the module is a package based on *note path:
          2f66.

      -- Method: get_code (fullname)

          Returns the code object for *note name: 2f65. created from
          *note path: 2f66.

      -- Method: get_source (fullname)

          Returns ‘None’ as bytecode files have no source when this
          loader is used.

      -- Method: load_module (name=None)

     Concrete implementation of *note
     importlib.abc.Loader.load_module(): 18b. where specifying the name
     of the module to load is optional.

     Deprecated since version 3.6: Use *note
     importlib.abc.Loader.exec_module(): 18c. instead.

 -- Class: importlib.machinery.ExtensionFileLoader (fullname, path)

     A concrete implementation of *note importlib.abc.ExecutionLoader:
     2f49. for extension modules.

     The `fullname' argument specifies the name of the module the loader
     is to support.  The `path' argument is the path to the extension
     module’s file.

     New in version 3.3.

      -- Attribute: name

          Name of the module the loader supports.

      -- Attribute: path

          Path to the extension module.

      -- Method: create_module (spec)

          Creates the module object from the given specification in
          accordance with PEP 489(2).

          New in version 3.5.

      -- Method: exec_module (module)

          Initializes the given module object in accordance with PEP
          489(3).

          New in version 3.5.

      -- Method: is_package (fullname)

          Returns ‘True’ if the file path points to a package’s
          ‘__init__’ module based on *note EXTENSION_SUFFIXES: 2f58.

      -- Method: get_code (fullname)

          Returns ‘None’ as extension modules lack a code object.

      -- Method: get_source (fullname)

          Returns ‘None’ as extension modules do not have source code.

      -- Method: get_filename (fullname)

          Returns *note path: 2f6b.

          New in version 3.4.

 -- Class: importlib.machinery.ModuleSpec (name, loader, *, origin=None,
          loader_state=None, is_package=None)

     A specification for a module’s import-system-related state.

     New in version 3.4.

      -- Attribute: name

     (‘__name__’)

     A string for the fully-qualified name of the module.

      -- Attribute: loader

     (‘__loader__’)

     The loader to use for loading.  For namespace packages this should
     be set to None.

      -- Attribute: origin

     (‘__file__’)

     Name of the place from which the module is loaded, e.g.  "builtin"
     for built-in modules and the filename for modules loaded from
     source.  Normally "origin" should be set, but it may be None (the
     default) which indicates it is unspecified.

      -- Attribute: submodule_search_locations

     (‘__path__’)

     List of strings for where to find submodules, if a package (None
     otherwise).

      -- Attribute: loader_state

     Container of extra module-specific data for use during loading (or
     None).

      -- Attribute: cached

     (‘__cached__’)

     String for where the compiled module should be stored (or None).

      -- Attribute: parent

     (‘__package__’)

     (Read-only) Fully-qualified name of the package to which the module
     belongs as a submodule (or None).

      -- Attribute: has_location

     Boolean indicating whether or not the module’s "origin" attribute
     refers to a loadable location.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0489

   (2) https://www.python.org/dev/peps/pep-0489

   (3) https://www.python.org/dev/peps/pep-0489


File: python.info,  Node: importlib util -- Utility code for importers,  Next: Examples<23>,  Prev: importlib machinery -- Importers and path hooks,  Up: importlib -- The implementation of import

5.31.5.5 ‘importlib.util’ – Utility code for importers
......................................................

This module contains the various objects that help in the construction
of an *note importer: e83.

 -- Attribute: importlib.util.MAGIC_NUMBER

     The bytes which represent the bytecode version number.  If you need
     help with loading/writing bytecode then consider *note
     importlib.abc.SourceLoader: 2f4f.

     New in version 3.4.

 -- Function: importlib.util.cache_from_source (path,
          debug_override=None, *, optimization=None)

     Return the PEP 3147(1)/ PEP 488(2) path to the byte-compiled file
     associated with the source `path'.  For example, if `path' is
     ‘/foo/bar/baz.py’ the return value would be
     ‘/foo/bar/__pycache__/baz.cpython-32.pyc’ for Python 3.2.  The
     ‘cpython-32’ string comes from the current magic tag (see
     ‘get_tag()’; if ‘sys.implementation.cache_tag’ is not defined then
     *note NotImplementedError: 569. will be raised).

     The `optimization' parameter is used to specify the optimization
     level of the bytecode file.  An empty string represents no
     optimization, so ‘/foo/bar/baz.py’ with an `optimization' of ‘''’
     will result in a bytecode path of
     ‘/foo/bar/__pycache__/baz.cpython-32.pyc’.  ‘None’ causes the
     interpter’s optimization level to be used.  Any other value’s
     string representation being used, so ‘/foo/bar/baz.py’ with an
     `optimization' of ‘2’ will lead to the bytecode path of
     ‘/foo/bar/__pycache__/baz.cpython-32.opt-2.pyc’.  The string
     representation of `optimization' can only be alphanumeric, else
     *note ValueError: 19c. is raised.

     The `debug_override' parameter is deprecated and can be used to
     override the system’s value for ‘__debug__’.  A ‘True’ value is the
     equivalent of setting `optimization' to the empty string.  A
     ‘False’ value is the same as setting `optimization' to ‘1’.  If
     both `debug_override' an `optimization' are not ‘None’ then *note
     TypeError: 562. is raised.

     New in version 3.4.

     Changed in version 3.5: The `optimization' parameter was added and
     the `debug_override' parameter was deprecated.

 -- Function: importlib.util.source_from_cache (path)

     Given the `path' to a PEP 3147(3) file name, return the associated
     source code file path.  For example, if `path' is
     ‘/foo/bar/__pycache__/baz.cpython-32.pyc’ the returned path would
     be ‘/foo/bar/baz.py’.  `path' need not exist, however if it does
     not conform to PEP 3147(4) or PEP 488(5) format, a ‘ValueError’ is
     raised.  If ‘sys.implementation.cache_tag’ is not defined, *note
     NotImplementedError: 569. is raised.

     New in version 3.4.

 -- Function: importlib.util.decode_source (source_bytes)

     Decode the given bytes representing source code and return it as a
     string with universal newlines (as required by *note
     importlib.abc.InspectLoader.get_source(): 45c.).

     New in version 3.4.

 -- Function: importlib.util.resolve_name (name, package)

     Resolve a relative module name to an absolute one.

     If `name' has no leading dots, then `name' is simply returned.
     This allows for usage such as ‘importlib.util.resolve_name('sys',
     __package__)’ without doing a check to see if the `package'
     argument is needed.

     *note ValueError: 19c. is raised if `name' is a relative module
     name but package is a false value (e.g.  ‘None’ or the empty
     string).  *note ValueError: 19c. is also raised a relative name
     would escape its containing package (e.g.  requesting ‘..bacon’
     from within the ‘spam’ package).

     New in version 3.3.

 -- Function: importlib.util.find_spec (name, package=None)

     Find the *note spec: 2e37. for a module, optionally relative to the
     specified `package' name.  If the module is in *note sys.modules:
     e75, then ‘sys.modules[name].__spec__’ is returned (unless the spec
     would be ‘None’ or is not set, in which case *note ValueError: 19c.
     is raised).  Otherwise a search using *note sys.meta_path: 5dc. is
     done.  ‘None’ is returned if no spec is found.

     If `name' is for a submodule (contains a dot), the parent module is
     automatically imported.

     `name' and `package' work the same as for ‘import_module()’.

     New in version 3.4.

 -- Function: importlib.util.module_from_spec (spec)

     Create a new module based on `spec' and
     ‘spec.loader.create_module()’.

     If ‘spec.loader.create_module()’ does not return ‘None’, then any
     pre-existing attributes will not be reset.  Also, no *note
     AttributeError: 356. will be raised if triggered while accessing
     `spec' or setting an attribute on the module.

     This function is preferred over using *note types.ModuleType: 2a6.
     to create a new module as `spec' is used to set as many
     import-controlled attributes on the module as possible.

     New in version 3.5.

 -- Function: @importlib.util.module_for_loader

     A *note decorator: f6c. for *note
     importlib.abc.Loader.load_module(): 18b. to handle selecting the
     proper module object to load with.  The decorated method is
     expected to have a call signature taking two positional arguments
     (e.g.  ‘load_module(self, module)’) for which the second argument
     will be the module `object' to be used by the loader.  Note that
     the decorator will not work on static methods because of the
     assumption of two arguments.

     The decorated method will take in the `name' of the module to be
     loaded as expected for a *note loader: e82.  If the module is not
     found in *note sys.modules: e75. then a new one is constructed.
     Regardless of where the module came from, *note __loader__: 56c.
     set to `self' and *note __package__: 56b. is set based on what
     *note importlib.abc.InspectLoader.is_package(): 2f48. returns (if
     available).  These attributes are set unconditionally to support
     reloading.

     If an exception is raised by the decorated method and a module was
     added to *note sys.modules: e75, then the module will be removed to
     prevent a partially initialized module from being in left in *note
     sys.modules: e75.  If the module was already in *note sys.modules:
     e75. then it is left alone.

     Changed in version 3.3: *note __loader__: 56c. and *note
     __package__: 56b. are automatically set (when possible).

     Changed in version 3.4: Set *note __name__: 8d3, *note __loader__:
     56c. *note __package__: 56b. unconditionally to support reloading.

     Deprecated since version 3.4: The import machinery now directly
     performs all the functionality provided by this function.

 -- Function: @importlib.util.set_loader

     A *note decorator: f6c. for *note
     importlib.abc.Loader.load_module(): 18b. to set the *note
     __loader__: 56c. attribute on the returned module.  If the
     attribute is already set the decorator does nothing.  It is assumed
     that the first positional argument to the wrapped method (i.e.
     ‘self’) is what *note __loader__: 56c. should be set to.

     Changed in version 3.4: Set ‘__loader__’ if set to ‘None’, as if
     the attribute does not exist.

     Deprecated since version 3.4: The import machinery takes care of
     this automatically.

 -- Function: @importlib.util.set_package

     A *note decorator: f6c. for *note
     importlib.abc.Loader.load_module(): 18b. to set the *note
     __package__: 56b. attribute on the returned module.  If *note
     __package__: 56b. is set and has a value other than ‘None’ it will
     not be changed.

     Deprecated since version 3.4: The import machinery takes care of
     this automatically.

 -- Function: importlib.util.spec_from_loader (name, loader, *,
          origin=None, is_package=None)

     A factory function for creating a ‘ModuleSpec’ instance based on a
     loader.  The parameters have the same meaning as they do for
     ModuleSpec.  The function uses available *note loader: e82. APIs,
     such as ‘InspectLoader.is_package()’, to fill in any missing
     information on the spec.

     New in version 3.4.

 -- Function: importlib.util.spec_from_file_location (name, location, *,
          loader=None, submodule_search_locations=None)

     A factory function for creating a ‘ModuleSpec’ instance based on
     the path to a file.  Missing information will be filled in on the
     spec by making use of loader APIs and by the implication that the
     module will be file-based.

     New in version 3.4.

 -- Class: importlib.util.LazyLoader (loader)

     A class which postpones the execution of the loader of a module
     until the module has an attribute accessed.

     This class `only' works with loaders that define *note
     exec_module(): 18c. as control over what module type is used for
     the module is required.  For those same reasons, the loader’s *note
     create_module(): e8b. method will be ignored (i.e., the loader’s
     method should only return ‘None’; this excludes ‘BuiltinImporter’
     and ‘ExtensionFileLoader’).  Finally, modules which substitute the
     object placed into *note sys.modules: e75. will not work as there
     is no way to properly replace the module references throughout the
     interpreter safely; *note ValueError: 19c. is raised if such a
     substitution is detected.

          Note: For projects where startup time is critical, this class
          allows for potentially minimizing the cost of loading a module
          if it is never used.  For projects where startup time is not
          essential then use of this class is `heavily' discouraged due
          to error messages created during loading being postponed and
          thus occurring out of context.

     New in version 3.5.

      -- Class Method: factory (loader)

          A static method which returns a callable that creates a lazy
          loader.  This is meant to be used in situations where the
          loader is passed by class instead of by instance.

               suffixes = importlib.machinery.SOURCE_SUFFIXES
               loader = importlib.machinery.SourceFileLoader
               lazy_loader = importlib.util.LazyLoader.factory(loader)
               finder = importlib.machinery.FileFinder(path, (lazy_loader, suffixes))

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3147

   (2) https://www.python.org/dev/peps/pep-0488

   (3) https://www.python.org/dev/peps/pep-3147

   (4) https://www.python.org/dev/peps/pep-3147

   (5) https://www.python.org/dev/peps/pep-0488


File: python.info,  Node: Examples<23>,  Prev: importlib util -- Utility code for importers,  Up: importlib -- The implementation of import

5.31.5.6 Examples
.................

To programmatically import a module, use *note
importlib.import_module(): 754.

     import importlib

     itertools = importlib.import_module('itertools')

If you need to find out if a module can be imported without actually
doing the import, then you should use *note importlib.util.find_spec():
540.

     import importlib.util
     import sys

     # For illustrative purposes.
     name = 'itertools'

     spec = importlib.util.find_spec(name)
     if spec is None:
         print("can't find the itertools module")
     else:
         # If you chose to perform the actual import ...
         module = importlib.util.module_from_spec(spec)
         spec.loader.exec_module(module)
         # Adding the module to sys.modules is optional.
         sys.modules[name] = module

To import a Python source file directly, use the following recipe
(Python 3.4 and newer only):

     import importlib.util
     import sys

     # For illustrative purposes.
     import tokenize
     file_path = tokenize.__file__
     module_name = tokenize.__name__

     spec = importlib.util.spec_from_file_location(module_name, file_path)
     module = importlib.util.module_from_spec(spec)
     spec.loader.exec_module(module)
     # Optional; only necessary if you want to be able to import the module
     # by name later.
     sys.modules[module_name] = module

For deep customizations of import, you typically want to implement an
*note importer: e83.  This means managing both the *note finder: e81.
and *note loader: e82. side of things.  For finders there are two
flavours to choose from depending on your needs: a *note meta path
finder: 5d1. or a *note path entry finder: 5d2.  The former is what you
would put on *note sys.meta_path: 5dc. while the latter is what you
create using a *note path entry hook: e99. on *note sys.path_hooks: 574.
which works with *note sys.path: 16c. entries to potentially create a
finder.  This example will show you how to register your own importers
so that import will use them (for creating an importer for yourself,
read the documentation for the appropriate classes defined within this
package):

     import importlib.machinery
     import sys

     # For illustrative purposes only.
     SpamMetaPathFinder = importlib.machinery.PathFinder
     SpamPathEntryFinder = importlib.machinery.FileFinder
     loader_details = (importlib.machinery.SourceFileLoader,
                       importlib.machinery.SOURCE_SUFFIXES)

     # Setting up a meta path finder.
     # Make sure to put the finder in the proper location in the list in terms of
     # priority.
     sys.meta_path.append(SpamMetaPathFinder)

     # Setting up a path entry finder.
     # Make sure to put the path hook in the proper location in the list in terms
     # of priority.
     sys.path_hooks.append(SpamPathEntryFinder.path_hook(loader_details))

Import itself is implemented in Python code, making it possible to
expose most of the import machinery through importlib.  The following
helps illustrate the various APIs that importlib exposes by providing an
approximate implementation of *note importlib.import_module(): 754.
(Python 3.4 and newer for the importlib usage, Python 3.6 and newer for
other parts of the code).

     import importlib.util
     import sys

     def import_module(name, package=None):
         """An approximate implementation of import."""
         absolute_name = importlib.util.resolve_name(name, package)
         try:
             return sys.modules[absolute_name]
         except KeyError:
             pass

         path = None
         if '.' in absolute_name:
             parent_name, _, child_name = absolute_name.rpartition('.')
             parent_module = import_module(parent_name)
             path = parent_module.spec.submodule_search_locations
         for finder in sys.meta_path:
             spec = finder.find_spec(absolute_name, path)
             if spec is not None:
                 break
         else:
             raise ImportError(f'No module named {absolute_name!r}')
         module = importlib.util.module_from_spec(spec)
         spec.loader.exec_module(module)
         sys.modules[absolute_name] = module
         if path is not None:
             setattr(parent_module, child_name, module)
         return module


File: python.info,  Node: Python Language Services,  Next: Miscellaneous Services,  Prev: Importing Modules,  Up: The Python Standard Library

5.32 Python Language Services
=============================

Python provides a number of modules to assist in working with the Python
language.  These modules support tokenizing, parsing, syntax analysis,
bytecode disassembly, and various other facilities.

These modules include:

* Menu:

* parser: parser --- Access Python parse trees. Access Python parse trees
* ast: ast --- Abstract Syntax Trees. Abstract Syntax Trees
* symtable: symtable --- Access to the compiler's symbol tables. Access to the compiler’s symbol tables
* symbol: symbol --- Constants used with Python parse trees. Constants used with Python parse trees
* token: token --- Constants used with Python parse trees. Constants used with Python parse trees
* keyword: keyword --- Testing for Python keywords. Testing for Python keywords
* tokenize: tokenize --- Tokenizer for Python source. Tokenizer for Python source
* tabnanny: tabnanny --- Detection of ambiguous indentation. Detection of ambiguous indentation
* pyclbr: pyclbr --- Python class browser support. Python class browser support
* py_compile: py_compile --- Compile Python source files. Compile Python source files
* compileall: compileall --- Byte-compile Python libraries. Byte-compile Python libraries
* dis: dis --- Disassembler for Python bytecode. Disassembler for Python bytecode
* pickletools: pickletools --- Tools for pickle developers. Tools for pickle developers


File: python.info,  Node: parser --- Access Python parse trees,  Next: ast --- Abstract Syntax Trees,  Up: Python Language Services

5.32.1 ‘parser’ — Access Python parse trees
-------------------------------------------

The *note parser: c5. module provides an interface to Python’s internal
parser and byte-code compiler.  The primary purpose for this interface
is to allow Python code to edit the parse tree of a Python expression
and create executable code from this.  This is better than trying to
parse and modify an arbitrary Python code fragment as a string because
parsing is performed in a manner identical to the code forming the
application.  It is also faster.

     Note: From Python 2.5 onward, it’s much more convenient to cut in
     at the Abstract Syntax Tree (AST) generation and compilation stage,
     using the *note ast: 8. module.

There are a few things to note about this module which are important to
making use of the data structures created.  This is not a tutorial on
editing the parse trees for Python code, but some examples of using the
*note parser: c5. module are presented.

Most importantly, a good understanding of the Python grammar processed
by the internal parser is required.  For full information on the
language syntax, refer to *note The Python Language Reference: bc6.  The
parser itself is created from a grammar specification defined in the
file ‘Grammar/Grammar’ in the standard Python distribution.  The parse
trees stored in the ST objects created by this module are the actual
output from the internal parser when created by the *note expr(): 2f85.
or *note suite(): 2f86. functions, described below.  The ST objects
created by *note sequence2st(): 2f87. faithfully simulate those
structures.  Be aware that the values of the sequences which are
considered "correct" will vary from one version of Python to another as
the formal grammar for the language is revised.  However, transporting
code from one Python version to another as source text will always allow
correct parse trees to be created in the target version, with the only
restriction being that migrating to an older version of the interpreter
will not support more recent language constructs.  The parse trees are
not typically compatible from one version to another, whereas source
code has always been forward-compatible.

Each element of the sequences returned by *note st2list(): 2f88. or
*note st2tuple(): 2f89. has a simple form.  Sequences representing
non-terminal elements in the grammar always have a length greater than
one.  The first element is an integer which identifies a production in
the grammar.  These integers are given symbolic names in the C header
file ‘Include/graminit.h’ and the Python module *note symbol: f9.  Each
additional element of the sequence represents a component of the
production as recognized in the input string: these are always sequences
which have the same form as the parent.  An important aspect of this
structure which should be noted is that keywords used to identify the
parent node type, such as the keyword *note if: a65. in an ‘if_stmt’,
are included in the node tree without any special treatment.  For
example, the *note if: a65. keyword is represented by the tuple ‘(1,
'if')’, where ‘1’ is the numeric value associated with all ‘NAME’
tokens, including variable and function names defined by the user.  In
an alternate form returned when line number information is requested,
the same token might be represented as ‘(1, 'if', 12)’, where the ‘12’
represents the line number at which the terminal symbol was found.

Terminal elements are represented in much the same way, but without any
child elements and the addition of the source text which was identified.
The example of the *note if: a65. keyword above is representative.  The
various types of terminal symbols are defined in the C header file
‘Include/token.h’ and the Python module *note token: 10d.

The ST objects are not required to support the functionality of this
module, but are provided for three purposes: to allow an application to
amortize the cost of processing complex parse trees, to provide a parse
tree representation which conserves memory space when compared to the
Python list or tuple representation, and to ease the creation of
additional modules in C which manipulate parse trees.  A simple
"wrapper" class may be created in Python to hide the use of ST objects.

The *note parser: c5. module defines functions for a few distinct
purposes.  The most important purposes are to create ST objects and to
convert ST objects to other representations such as parse trees and
compiled code objects, but there are also functions which serve to query
the type of parse tree represented by an ST object.

See also
........

Module *note symbol: f9.

     Useful constants representing internal nodes of the parse tree.

Module *note token: 10d.

     Useful constants representing leaf nodes of the parse tree and
     functions for testing node values.

* Menu:

* Creating ST Objects:: 
* Converting ST Objects:: 
* Queries on ST Objects:: 
* Exceptions and Error Handling:: 
* ST Objects:: 
* Example; Emulation of compile(): Example Emulation of compile. 


File: python.info,  Node: Creating ST Objects,  Next: Converting ST Objects,  Up: parser --- Access Python parse trees

5.32.1.1 Creating ST Objects
............................

ST objects may be created from source code or from a parse tree.  When
creating an ST object from source, different functions are used to
create the ‘'eval'’ and ‘'exec'’ forms.

 -- Function: parser.expr (source)

     The *note expr(): 2f85. function parses the parameter `source' as
     if it were an input to ‘compile(source, 'file.py', 'eval')’.  If
     the parse succeeds, an ST object is created to hold the internal
     parse tree representation, otherwise an appropriate exception is
     raised.

 -- Function: parser.suite (source)

     The *note suite(): 2f86. function parses the parameter `source' as
     if it were an input to ‘compile(source, 'file.py', 'exec')’.  If
     the parse succeeds, an ST object is created to hold the internal
     parse tree representation, otherwise an appropriate exception is
     raised.

 -- Function: parser.sequence2st (sequence)

     This function accepts a parse tree represented as a sequence and
     builds an internal representation if possible.  If it can validate
     that the tree conforms to the Python grammar and all nodes are
     valid node types in the host version of Python, an ST object is
     created from the internal representation and returned to the
     called.  If there is a problem creating the internal
     representation, or if the tree cannot be validated, a *note
     ParserError: 2f8c. exception is raised.  An ST object created this
     way should not be assumed to compile correctly; normal exceptions
     raised by compilation may still be initiated when the ST object is
     passed to *note compilest(): 2f8d.  This may indicate problems not
     related to syntax (such as a *note MemoryError: 10b9. exception),
     but may also be due to constructs such as the result of parsing
     ‘del f(0)’, which escapes the Python parser but is checked by the
     bytecode compiler.

     Sequences representing terminal tokens may be represented as either
     two-element lists of the form ‘(1, 'name')’ or as three-element
     lists of the form ‘(1, 'name', 56)’.  If the third element is
     present, it is assumed to be a valid line number.  The line number
     may be specified for any subset of the terminal symbols in the
     input tree.

 -- Function: parser.tuple2st (sequence)

     This is the same function as *note sequence2st(): 2f87.  This entry
     point is maintained for backward compatibility.


File: python.info,  Node: Converting ST Objects,  Next: Queries on ST Objects,  Prev: Creating ST Objects,  Up: parser --- Access Python parse trees

5.32.1.2 Converting ST Objects
..............................

ST objects, regardless of the input used to create them, may be
converted to parse trees represented as list- or tuple- trees, or may be
compiled into executable code objects.  Parse trees may be extracted
with or without line numbering information.

 -- Function: parser.st2list (st, line_info=False, col_info=False)

     This function accepts an ST object from the caller in `st' and
     returns a Python list representing the equivalent parse tree.  The
     resulting list representation can be used for inspection or the
     creation of a new parse tree in list form.  This function does not
     fail so long as memory is available to build the list
     representation.  If the parse tree will only be used for
     inspection, *note st2tuple(): 2f89. should be used instead to
     reduce memory consumption and fragmentation.  When the list
     representation is required, this function is significantly faster
     than retrieving a tuple representation and converting that to
     nested lists.

     If `line_info' is true, line number information will be included
     for all terminal tokens as a third element of the list representing
     the token.  Note that the line number provided specifies the line
     on which the token `ends'.  This information is omitted if the flag
     is false or omitted.

 -- Function: parser.st2tuple (st, line_info=False, col_info=False)

     This function accepts an ST object from the caller in `st' and
     returns a Python tuple representing the equivalent parse tree.
     Other than returning a tuple instead of a list, this function is
     identical to *note st2list(): 2f88.

     If `line_info' is true, line number information will be included
     for all terminal tokens as a third element of the list representing
     the token.  This information is omitted if the flag is false or
     omitted.

 -- Function: parser.compilest (st, filename='<syntax-tree>')

     The Python byte compiler can be invoked on an ST object to produce
     code objects which can be used as part of a call to the built-in
     *note exec(): 8ac. or *note eval(): 7e8. functions.  This function
     provides the interface to the compiler, passing the internal parse
     tree from `st' to the parser, using the source file name specified
     by the `filename' parameter.  The default value supplied for
     `filename' indicates that the source was an ST object.

     Compiling an ST object may result in exceptions related to
     compilation; an example would be a *note SyntaxError: 3a6. caused
     by the parse tree for ‘del f(0)’: this statement is considered
     legal within the formal grammar for Python but is not a legal
     language construct.  The *note SyntaxError: 3a6. raised for this
     condition is actually generated by the Python byte-compiler
     normally, which is why it can be raised at this point by the *note
     parser: c5. module.  Most causes of compilation failure can be
     diagnosed programmatically by inspection of the parse tree.

