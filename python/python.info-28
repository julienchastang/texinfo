This is python.info, produced by makeinfo version 6.0 from python.texi.

     Python 3.6.0a0, May 06, 2016

     Georg Brandl

     Copyright © 2001-2016, Python Software Foundation

INFO-DIR-SECTION Documentation tools
START-INFO-DIR-ENTRY
* Python: (python.info). The Python Programming Language
END-INFO-DIR-ENTRY


   Generated by Sphinx 1.4.1.


File: python.info,  Node: Queries on ST Objects,  Next: Exceptions and Error Handling,  Prev: Converting ST Objects,  Up: parser --- Access Python parse trees

5.32.1.3 Queries on ST Objects
..............................

Two functions are provided which allow an application to determine if an
ST was created as an expression or a suite.  Neither of these functions
can be used to determine if an ST was created from source code via *note
expr(): 2f85. or *note suite(): 2f86. or from a parse tree via *note
sequence2st(): 2f87.

 -- Function: parser.isexpr (st)

     When `st' represents an ‘'eval'’ form, this function returns true,
     otherwise it returns false.  This is useful, since code objects
     normally cannot be queried for this information using existing
     built-in functions.  Note that the code objects created by *note
     compilest(): 2f8d. cannot be queried like this either, and are
     identical to those created by the built-in *note compile(): 903.
     function.

 -- Function: parser.issuite (st)

     This function mirrors *note isexpr(): 2f93. in that it reports
     whether an ST object represents an ‘'exec'’ form, commonly known as
     a "suite."  It is not safe to assume that this function is
     equivalent to ‘not isexpr(st)’, as additional syntactic fragments
     may be supported in the future.


File: python.info,  Node: Exceptions and Error Handling,  Next: ST Objects,  Prev: Queries on ST Objects,  Up: parser --- Access Python parse trees

5.32.1.4 Exceptions and Error Handling
......................................

The parser module defines a single exception, but may also pass other
built-in exceptions from other portions of the Python runtime
environment.  See each function for information about the exceptions it
can raise.

 -- Exception: parser.ParserError

     Exception raised when a failure occurs within the parser module.
     This is generally produced for validation failures rather than the
     built-in *note SyntaxError: 3a6. raised during normal parsing.  The
     exception argument is either a string describing the reason of the
     failure or a tuple containing a sequence causing the failure from a
     parse tree passed to *note sequence2st(): 2f87. and an explanatory
     string.  Calls to *note sequence2st(): 2f87. need to be able to
     handle either type of exception, while calls to other functions in
     the module will only need to be aware of the simple string values.

Note that the functions *note compilest(): 2f8d, *note expr(): 2f85, and
*note suite(): 2f86. may raise exceptions which are normally raised by
the parsing and compilation process.  These include the built in
exceptions *note MemoryError: 10b9, *note OverflowError: 578, *note
SyntaxError: 3a6, and *note SystemError: 1a0.  In these cases, these
exceptions carry all the meaning normally associated with them.  Refer
to the descriptions of each function for detailed information.


File: python.info,  Node: ST Objects,  Next: Example Emulation of compile,  Prev: Exceptions and Error Handling,  Up: parser --- Access Python parse trees

5.32.1.5 ST Objects
...................

Ordered and equality comparisons are supported between ST objects.
Pickling of ST objects (using the *note pickle: c8. module) is also
supported.

 -- Data: parser.STType

     The type of the objects returned by *note expr(): 2f85, *note
     suite(): 2f86. and *note sequence2st(): 2f87.

ST objects have the following methods:

 -- Method: ST.compile (filename='<syntax-tree>')

     Same as ‘compilest(st, filename)’.

 -- Method: ST.isexpr ()

     Same as ‘isexpr(st)’.

 -- Method: ST.issuite ()

     Same as ‘issuite(st)’.

 -- Method: ST.tolist (line_info=False, col_info=False)

     Same as ‘st2list(st, line_info, col_info)’.

 -- Method: ST.totuple (line_info=False, col_info=False)

     Same as ‘st2tuple(st, line_info, col_info)’.


File: python.info,  Node: Example Emulation of compile,  Prev: ST Objects,  Up: parser --- Access Python parse trees

5.32.1.6 Example: Emulation of ‘compile()’
..........................................

While many useful operations may take place between parsing and bytecode
generation, the simplest operation is to do nothing.  For this purpose,
using the *note parser: c5. module to produce an intermediate data
structure is equivalent to the code

     >>> code = compile('a + 5', 'file.py', 'eval')
     >>> a = 5
     >>> eval(code)
     10

The equivalent operation using the *note parser: c5. module is somewhat
longer, and allows the intermediate internal parse tree to be retained
as an ST object:

     >>> import parser
     >>> st = parser.expr('a + 5')
     >>> code = st.compile('file.py')
     >>> a = 5
     >>> eval(code)
     10

An application which needs both ST and code objects can package this
code into readily available functions:

     import parser

     def load_suite(source_string):
         st = parser.suite(source_string)
         return st, st.compile()

     def load_expression(source_string):
         st = parser.expr(source_string)
         return st, st.compile()


File: python.info,  Node: ast --- Abstract Syntax Trees,  Next: symtable --- Access to the compiler's symbol tables,  Prev: parser --- Access Python parse trees,  Up: Python Language Services

5.32.2 ‘ast’ — Abstract Syntax Trees
------------------------------------

`Source code:' Lib/ast.py(1)

__________________________________________________________________

The *note ast: 8. module helps Python applications to process trees of
the Python abstract syntax grammar.  The abstract syntax itself might
change with each Python release; this module helps to find out
programmatically what the current grammar looks like.

An abstract syntax tree can be generated by passing ‘ast.PyCF_ONLY_AST’
as a flag to the *note compile(): 903. built-in function, or using the
*note parse(): bb4. helper provided in this module.  The result will be
a tree of objects whose classes all inherit from *note ast.AST: 2fa2.
An abstract syntax tree can be compiled into a Python code object using
the built-in *note compile(): 903. function.

* Menu:

* Node classes:: 
* Abstract Grammar:: 
* ast Helpers:: 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/ast.py


File: python.info,  Node: Node classes,  Next: Abstract Grammar,  Up: ast --- Abstract Syntax Trees

5.32.2.1 Node classes
.....................

 -- Class: ast.AST

     This is the base of all AST node classes.  The actual node classes
     are derived from the ‘Parser/Python.asdl’ file, which is reproduced
     *note below: 2fa4.  They are defined in the ‘_ast’ C module and
     re-exported in *note ast: 8.

     There is one class defined for each left-hand side symbol in the
     abstract grammar (for example, ‘ast.stmt’ or ‘ast.expr’).  In
     addition, there is one class defined for each constructor on the
     right-hand side; these classes inherit from the classes for the
     left-hand side trees.  For example, ‘ast.BinOp’ inherits from
     ‘ast.expr’.  For production rules with alternatives (aka "sums"),
     the left-hand side class is abstract: only instances of specific
     constructor nodes are ever created.

      -- Attribute: _fields

          Each concrete class has an attribute *note _fields: 2fa5.
          which gives the names of all child nodes.

          Each instance of a concrete class has one attribute for each
          child node, of the type as defined in the grammar.  For
          example, ‘ast.BinOp’ instances have an attribute ‘left’ of
          type ‘ast.expr’.

          If these attributes are marked as optional in the grammar
          (using a question mark), the value might be ‘None’.  If the
          attributes can have zero-or-more values (marked with an
          asterisk), the values are represented as Python lists.  All
          possible attributes must be present and have valid values when
          compiling an AST with *note compile(): 903.

      -- Attribute: lineno
      -- Attribute: col_offset

          Instances of ‘ast.expr’ and ‘ast.stmt’ subclasses have *note
          lineno: 2fa6. and *note col_offset: 2fa7. attributes.  The
          *note lineno: 2fa6. is the line number of source text
          (1-indexed so the first line is line 1) and the *note
          col_offset: 2fa7. is the UTF-8 byte offset of the first token
          that generated the node.  The UTF-8 offset is recorded because
          the parser uses UTF-8 internally.

     The constructor of a class ‘ast.T’ parses its arguments as follows:

        * If there are positional arguments, there must be as many as
          there are items in ‘T._fields’; they will be assigned as
          attributes of these names.

        * If there are keyword arguments, they will set the attributes
          of the same names to the given values.

     For example, to create and populate an ‘ast.UnaryOp’ node, you
     could use

          node = ast.UnaryOp()
          node.op = ast.USub()
          node.operand = ast.Num()
          node.operand.n = 5
          node.operand.lineno = 0
          node.operand.col_offset = 0
          node.lineno = 0
          node.col_offset = 0

     or the more compact

          node = ast.UnaryOp(ast.USub(), ast.Num(5, lineno=0, col_offset=0),
                             lineno=0, col_offset=0)


File: python.info,  Node: Abstract Grammar,  Next: ast Helpers,  Prev: Node classes,  Up: ast --- Abstract Syntax Trees

5.32.2.2 Abstract Grammar
.........................

The abstract grammar is currently defined as follows:

     -- ASDL's 7 builtin types are:
     -- identifier, int, string, bytes, object, singleton, constant
     --
     -- singleton: None, True or False
     -- constant can be None, whereas None means "no value" for object.

     module Python
     {
         mod = Module(stmt* body)
             | Interactive(stmt* body)
             | Expression(expr body)

             -- not really an actual node but useful in Jython's typesystem.
             | Suite(stmt* body)

         stmt = FunctionDef(identifier name, arguments args,
                            stmt* body, expr* decorator_list, expr? returns)
               | AsyncFunctionDef(identifier name, arguments args,
                                  stmt* body, expr* decorator_list, expr? returns)

               | ClassDef(identifier name,
                  expr* bases,
                  keyword* keywords,
                  stmt* body,
                  expr* decorator_list)
               | Return(expr? value)

               | Delete(expr* targets)
               | Assign(expr* targets, expr value)
               | AugAssign(expr target, operator op, expr value)

               -- use 'orelse' because else is a keyword in target languages
               | For(expr target, expr iter, stmt* body, stmt* orelse)
               | AsyncFor(expr target, expr iter, stmt* body, stmt* orelse)
               | While(expr test, stmt* body, stmt* orelse)
               | If(expr test, stmt* body, stmt* orelse)
               | With(withitem* items, stmt* body)
               | AsyncWith(withitem* items, stmt* body)

               | Raise(expr? exc, expr? cause)
               | Try(stmt* body, excepthandler* handlers, stmt* orelse, stmt* finalbody)
               | Assert(expr test, expr? msg)

               | Import(alias* names)
               | ImportFrom(identifier? module, alias* names, int? level)

               | Global(identifier* names)
               | Nonlocal(identifier* names)
               | Expr(expr value)
               | Pass | Break | Continue

               -- XXX Jython will be different
               -- col_offset is the byte offset in the utf8 string the parser uses
               attributes (int lineno, int col_offset)

               -- BoolOp() can use left & right?
         expr = BoolOp(boolop op, expr* values)
              | BinOp(expr left, operator op, expr right)
              | UnaryOp(unaryop op, expr operand)
              | Lambda(arguments args, expr body)
              | IfExp(expr test, expr body, expr orelse)
              | Dict(expr* keys, expr* values)
              | Set(expr* elts)
              | ListComp(expr elt, comprehension* generators)
              | SetComp(expr elt, comprehension* generators)
              | DictComp(expr key, expr value, comprehension* generators)
              | GeneratorExp(expr elt, comprehension* generators)
              -- the grammar constrains where yield expressions can occur
              | Await(expr value)
              | Yield(expr? value)
              | YieldFrom(expr value)
              -- need sequences for compare to distinguish between
              -- x < 4 < 3 and (x < 4) < 3
              | Compare(expr left, cmpop* ops, expr* comparators)
              | Call(expr func, expr* args, keyword* keywords)
              | Num(object n) -- a number as a PyObject.
              | Str(string s) -- need to specify raw, unicode, etc?
              | FormattedValue(expr value, int? conversion, expr? format_spec)
              | JoinedStr(expr* values)
              | Bytes(bytes s)
              | NameConstant(singleton value)
              | Ellipsis
              | Constant(constant value)

              -- the following expression can appear in assignment context
              | Attribute(expr value, identifier attr, expr_context ctx)
              | Subscript(expr value, slice slice, expr_context ctx)
              | Starred(expr value, expr_context ctx)
              | Name(identifier id, expr_context ctx)
              | List(expr* elts, expr_context ctx)
              | Tuple(expr* elts, expr_context ctx)

               -- col_offset is the byte offset in the utf8 string the parser uses
               attributes (int lineno, int col_offset)

         expr_context = Load | Store | Del | AugLoad | AugStore | Param

         slice = Slice(expr? lower, expr? upper, expr? step)
               | ExtSlice(slice* dims)
               | Index(expr value)

         boolop = And | Or

         operator = Add | Sub | Mult | MatMult | Div | Mod | Pow | LShift
                      | RShift | BitOr | BitXor | BitAnd | FloorDiv

         unaryop = Invert | Not | UAdd | USub

         cmpop = Eq | NotEq | Lt | LtE | Gt | GtE | Is | IsNot | In | NotIn

         comprehension = (expr target, expr iter, expr* ifs)

         excepthandler = ExceptHandler(expr? type, identifier? name, stmt* body)
                         attributes (int lineno, int col_offset)

         arguments = (arg* args, arg? vararg, arg* kwonlyargs, expr* kw_defaults,
                      arg? kwarg, expr* defaults)

         arg = (identifier arg, expr? annotation)
                attributes (int lineno, int col_offset)

         -- keyword arguments supplied to call (NULL identifier for **kwargs)
         keyword = (identifier? arg, expr value)

         -- import name with optional 'as' alias.
         alias = (identifier name, identifier? asname)

         withitem = (expr context_expr, expr? optional_vars)
     }



File: python.info,  Node: ast Helpers,  Prev: Abstract Grammar,  Up: ast --- Abstract Syntax Trees

5.32.2.3 ‘ast’ Helpers
......................

Apart from the node classes, the *note ast: 8. module defines these
utility functions and classes for traversing abstract syntax trees:

 -- Function: ast.parse (source, filename='<unknown>', mode='exec')

     Parse the source into an AST node.  Equivalent to ‘compile(source,
     filename, mode, ast.PyCF_ONLY_AST)’.

 -- Function: ast.literal_eval (node_or_string)

     Safely evaluate an expression node or a string containing a Python
     literal or container display.  The string or node provided may only
     consist of the following Python literal structures: strings, bytes,
     numbers, tuples, lists, dicts, sets, booleans, and ‘None’.

     This can be used for safely evaluating strings containing Python
     values from untrusted sources without the need to parse the values
     oneself.  It is not capable of evaluating arbitrarily complex
     expressions, for example involving operators or indexing.

     Changed in version 3.2: Now allows bytes and set literals.

 -- Function: ast.get_docstring (node, clean=True)

     Return the docstring of the given `node' (which must be a
     ‘FunctionDef’, ‘ClassDef’ or ‘Module’ node), or ‘None’ if it has no
     docstring.  If `clean' is true, clean up the docstring’s
     indentation with *note inspect.cleandoc(): 2ec6.

 -- Function: ast.fix_missing_locations (node)

     When you compile a node tree with *note compile(): 903, the
     compiler expects ‘lineno’ and ‘col_offset’ attributes for every
     node that supports them.  This is rather tedious to fill in for
     generated nodes, so this helper adds these attributes recursively
     where not already set, by setting them to the values of the parent
     node.  It works recursively starting at `node'.

 -- Function: ast.increment_lineno (node, n=1)

     Increment the line number of each node in the tree starting at
     `node' by `n'.  This is useful to "move code" to a different
     location in a file.

 -- Function: ast.copy_location (new_node, old_node)

     Copy source location (‘lineno’ and ‘col_offset’) from `old_node' to
     `new_node' if possible, and return `new_node'.

 -- Function: ast.iter_fields (node)

     Yield a tuple of ‘(fieldname, value)’ for each field in
     ‘node._fields’ that is present on `node'.

 -- Function: ast.iter_child_nodes (node)

     Yield all direct child nodes of `node', that is, all fields that
     are nodes and all items of fields that are lists of nodes.

 -- Function: ast.walk (node)

     Recursively yield all descendant nodes in the tree starting at
     `node' (including `node' itself), in no specified order.  This is
     useful if you only want to modify nodes in place and don’t care
     about the context.

 -- Class: ast.NodeVisitor

     A node visitor base class that walks the abstract syntax tree and
     calls a visitor function for every node found.  This function may
     return a value which is forwarded by the *note visit(): 2fb2.
     method.

     This class is meant to be subclassed, with the subclass adding
     visitor methods.

      -- Method: visit (node)

          Visit a node.  The default implementation calls the method
          called ‘self.visit_`classname'’ where `classname' is the name
          of the node class, or *note generic_visit(): 2fb3. if that
          method doesn’t exist.

      -- Method: generic_visit (node)

          This visitor calls *note visit(): 2fb2. on all children of the
          node.

          Note that child nodes of nodes that have a custom visitor
          method won’t be visited unless the visitor calls *note
          generic_visit(): 2fb3. or visits them itself.

     Don’t use the *note NodeVisitor: 2fb1. if you want to apply changes
     to nodes during traversal.  For this a special visitor exists
     (*note NodeTransformer: 2fb4.) that allows modifications.

 -- Class: ast.NodeTransformer

     A *note NodeVisitor: 2fb1. subclass that walks the abstract syntax
     tree and allows modification of nodes.

     The *note NodeTransformer: 2fb4. will walk the AST and use the
     return value of the visitor methods to replace or remove the old
     node.  If the return value of the visitor method is ‘None’, the
     node will be removed from its location, otherwise it is replaced
     with the return value.  The return value may be the original node
     in which case no replacement takes place.

     Here is an example transformer that rewrites all occurrences of
     name lookups (‘foo’) to ‘data['foo']’:

          class RewriteName(NodeTransformer):

              def visit_Name(self, node):
                  return copy_location(Subscript(
                      value=Name(id='data', ctx=Load()),
                      slice=Index(value=Str(s=node.id)),
                      ctx=node.ctx
                  ), node)

     Keep in mind that if the node you’re operating on has child nodes
     you must either transform the child nodes yourself or call the
     ‘generic_visit()’ method for the node first.

     For nodes that were part of a collection of statements (that
     applies to all statement nodes), the visitor may also return a list
     of nodes rather than just a single node.

     Usually you use the transformer like this:

          node = YourTransformer().visit(node)

 -- Function: ast.dump (node, annotate_fields=True,
          include_attributes=False)

     Return a formatted dump of the tree in `node'.  This is mainly
     useful for debugging purposes.  The returned string will show the
     names and the values for fields.  This makes the code impossible to
     evaluate, so if evaluation is wanted `annotate_fields' must be set
     to ‘False’.  Attributes such as line numbers and column offsets are
     not dumped by default.  If this is wanted, `include_attributes' can
     be set to ‘True’.

See also
........

Green Tree Snakes(1), an external documentation resource, has good
details on working with Python ASTs.

   ---------- Footnotes ----------

   (1) https://greentreesnakes.readthedocs.org/


File: python.info,  Node: symtable --- Access to the compiler's symbol tables,  Next: symbol --- Constants used with Python parse trees,  Prev: ast --- Abstract Syntax Trees,  Up: Python Language Services

5.32.3 ‘symtable’ — Access to the compiler’s symbol tables
----------------------------------------------------------

`Source code:' Lib/symtable.py(1)

__________________________________________________________________

Symbol tables are generated by the compiler from AST just before
bytecode is generated.  The symbol table is responsible for calculating
the scope of every identifier in the code.  *note symtable: fa. provides
an interface to examine these tables.

* Menu:

* Generating Symbol Tables:: 
* Examining Symbol Tables:: 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/symtable.py


File: python.info,  Node: Generating Symbol Tables,  Next: Examining Symbol Tables,  Up: symtable --- Access to the compiler's symbol tables

5.32.3.1 Generating Symbol Tables
.................................

 -- Function: symtable.symtable (code, filename, compile_type)

     Return the toplevel *note SymbolTable: 2fba. for the Python source
     `code'.  `filename' is the name of the file containing the code.
     `compile_type' is like the `mode' argument to *note compile(): 903.


File: python.info,  Node: Examining Symbol Tables,  Prev: Generating Symbol Tables,  Up: symtable --- Access to the compiler's symbol tables

5.32.3.2 Examining Symbol Tables
................................

 -- Class: symtable.SymbolTable

     A namespace table for a block.  The constructor is not public.

      -- Method: get_type ()

          Return the type of the symbol table.  Possible values are
          ‘'class'’, ‘'module'’, and ‘'function'’.

      -- Method: get_id ()

          Return the table’s identifier.

      -- Method: get_name ()

          Return the table’s name.  This is the name of the class if the
          table is for a class, the name of the function if the table is
          for a function, or ‘'top'’ if the table is global (*note
          get_type(): 2fbc. returns ‘'module'’).

      -- Method: get_lineno ()

          Return the number of the first line in the block this table
          represents.

      -- Method: is_optimized ()

          Return ‘True’ if the locals in this table can be optimized.

      -- Method: is_nested ()

          Return ‘True’ if the block is a nested class or function.

      -- Method: has_children ()

          Return ‘True’ if the block has nested namespaces within it.
          These can be obtained with *note get_children(): 2fc3.

      -- Method: has_exec ()

          Return ‘True’ if the block uses ‘exec’.

      -- Method: get_identifiers ()

          Return a list of names of symbols in this table.

      -- Method: lookup (name)

          Lookup `name' in the table and return a *note Symbol: 2fc7.
          instance.

      -- Method: get_symbols ()

          Return a list of *note Symbol: 2fc7. instances for names in
          the table.

      -- Method: get_children ()

          Return a list of the nested symbol tables.

 -- Class: symtable.Function

     A namespace for a function or method.  This class inherits *note
     SymbolTable: 2fba.

      -- Method: get_parameters ()

          Return a tuple containing names of parameters to this
          function.

      -- Method: get_locals ()

          Return a tuple containing names of locals in this function.

      -- Method: get_globals ()

          Return a tuple containing names of globals in this function.

      -- Method: get_frees ()

          Return a tuple containing names of free variables in this
          function.

 -- Class: symtable.Class

     A namespace of a class.  This class inherits *note SymbolTable:
     2fba.

      -- Method: get_methods ()

          Return a tuple containing the names of methods declared in the
          class.

 -- Class: symtable.Symbol

     An entry in a *note SymbolTable: 2fba. corresponding to an
     identifier in the source.  The constructor is not public.

      -- Method: get_name ()

          Return the symbol’s name.

      -- Method: is_referenced ()

          Return ‘True’ if the symbol is used in its block.

      -- Method: is_imported ()

          Return ‘True’ if the symbol is created from an import
          statement.

      -- Method: is_parameter ()

          Return ‘True’ if the symbol is a parameter.

      -- Method: is_global ()

          Return ‘True’ if the symbol is global.

      -- Method: is_declared_global ()

          Return ‘True’ if the symbol is declared global with a global
          statement.

      -- Method: is_local ()

          Return ‘True’ if the symbol is local to its block.

      -- Method: is_free ()

          Return ‘True’ if the symbol is referenced in its block, but
          not assigned to.

      -- Method: is_assigned ()

          Return ‘True’ if the symbol is assigned to in its block.

      -- Method: is_namespace ()

          Return ‘True’ if name binding introduces new namespace.

          If the name is used as the target of a function or class
          statement, this will be true.

          For example:

               >>> table = symtable.symtable("def some_func(): pass", "string", "exec")
               >>> table.lookup("some_func").is_namespace()
               True

          Note that a single name can be bound to multiple objects.  If
          the result is ‘True’, the name may also be bound to other
          objects, like an int or list, that does not introduce a new
          namespace.

      -- Method: get_namespaces ()

          Return a list of namespaces bound to this name.

      -- Method: get_namespace ()

          Return the namespace bound to this name.  If more than one
          namespace is bound, *note ValueError: 19c. is raised.


File: python.info,  Node: symbol --- Constants used with Python parse trees,  Next: token --- Constants used with Python parse trees,  Prev: symtable --- Access to the compiler's symbol tables,  Up: Python Language Services

5.32.4 ‘symbol’ — Constants used with Python parse trees
--------------------------------------------------------

`Source code:' Lib/symbol.py(1)

__________________________________________________________________

This module provides constants which represent the numeric values of
internal nodes of the parse tree.  Unlike most Python constants, these
use lower-case names.  Refer to the file ‘Grammar/Grammar’ in the Python
distribution for the definitions of the names in the context of the
language grammar.  The specific numeric values which the names map to
may change between Python versions.

This module also provides one additional data object:

 -- Data: symbol.sym_name

     Dictionary mapping the numeric values of the constants defined in
     this module back to name strings, allowing more human-readable
     representation of parse trees to be generated.

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/symbol.py


File: python.info,  Node: token --- Constants used with Python parse trees,  Next: keyword --- Testing for Python keywords,  Prev: symbol --- Constants used with Python parse trees,  Up: Python Language Services

5.32.5 ‘token’ — Constants used with Python parse trees
-------------------------------------------------------

`Source code:' Lib/token.py(1)

__________________________________________________________________

This module provides constants which represent the numeric values of
leaf nodes of the parse tree (terminal tokens).  Refer to the file
‘Grammar/Grammar’ in the Python distribution for the definitions of the
names in the context of the language grammar.  The specific numeric
values which the names map to may change between Python versions.

The module also provides a mapping from numeric codes to names and some
functions.  The functions mirror definitions in the Python C header
files.

 -- Data: token.tok_name

     Dictionary mapping the numeric values of the constants defined in
     this module back to name strings, allowing more human-readable
     representation of parse trees to be generated.

 -- Function: token.ISTERMINAL (x)

     Return true for terminal token values.

 -- Function: token.ISNONTERMINAL (x)

     Return true for non-terminal token values.

 -- Function: token.ISEOF (x)

     Return true if `x' is the marker indicating the end of input.

The token constants are:

 -- Data: token.ENDMARKER
 -- Data: token.NAME
 -- Data: token.NUMBER
 -- Data: token.STRING
 -- Data: token.NEWLINE
 -- Data: token.INDENT
 -- Data: token.DEDENT
 -- Data: token.LPAR
 -- Data: token.RPAR
 -- Data: token.LSQB
 -- Data: token.RSQB
 -- Data: token.COLON
 -- Data: token.COMMA
 -- Data: token.SEMI
 -- Data: token.PLUS
 -- Data: token.MINUS
 -- Data: token.STAR
 -- Data: token.SLASH
 -- Data: token.VBAR
 -- Data: token.AMPER
 -- Data: token.LESS
 -- Data: token.GREATER
 -- Data: token.EQUAL
 -- Data: token.DOT
 -- Data: token.PERCENT
 -- Data: token.LBRACE
 -- Data: token.RBRACE
 -- Data: token.EQEQUAL
 -- Data: token.NOTEQUAL
 -- Data: token.LESSEQUAL
 -- Data: token.GREATEREQUAL
 -- Data: token.TILDE
 -- Data: token.CIRCUMFLEX
 -- Data: token.LEFTSHIFT
 -- Data: token.RIGHTSHIFT
 -- Data: token.DOUBLESTAR
 -- Data: token.PLUSEQUAL
 -- Data: token.MINEQUAL
 -- Data: token.STAREQUAL
 -- Data: token.SLASHEQUAL
 -- Data: token.PERCENTEQUAL
 -- Data: token.AMPEREQUAL
 -- Data: token.VBAREQUAL
 -- Data: token.CIRCUMFLEXEQUAL
 -- Data: token.LEFTSHIFTEQUAL
 -- Data: token.RIGHTSHIFTEQUAL
 -- Data: token.DOUBLESTAREQUAL
 -- Data: token.DOUBLESLASH
 -- Data: token.DOUBLESLASHEQUAL
 -- Data: token.AT
 -- Data: token.ATEQUAL
 -- Data: token.RARROW
 -- Data: token.ELLIPSIS
 -- Data: token.OP
 -- Data: token.AWAIT
 -- Data: token.ASYNC
 -- Data: token.ERRORTOKEN
 -- Data: token.N_TOKENS
 -- Data: token.NT_OFFSET

     Changed in version 3.5: Added *note AWAIT: 301a. and *note ASYNC:
     301b. tokens.  Starting with Python 3.7, "async" and "await" will
     be tokenized as *note NAME: 2fe5. tokens, and *note AWAIT: 301a.
     and *note ASYNC: 301b. will be removed.

See also
........

Module *note parser: c5.

     The second example for the *note parser: c5. module shows how to
     use the *note symbol: f9. module.

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/token.py


File: python.info,  Node: keyword --- Testing for Python keywords,  Next: tokenize --- Tokenizer for Python source,  Prev: token --- Constants used with Python parse trees,  Up: Python Language Services

5.32.6 ‘keyword’ — Testing for Python keywords
----------------------------------------------

`Source code:' Lib/keyword.py(1)

__________________________________________________________________

This module allows a Python program to determine if a string is a
keyword.

 -- Function: keyword.iskeyword (s)

     Return true if `s' is a Python keyword.

 -- Data: keyword.kwlist

     Sequence containing all the keywords defined for the interpreter.
     If any keywords are defined to only be active when particular *note
     __future__: 0. statements are in effect, these will be included as
     well.

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/keyword.py


File: python.info,  Node: tokenize --- Tokenizer for Python source,  Next: tabnanny --- Detection of ambiguous indentation,  Prev: keyword --- Testing for Python keywords,  Up: Python Language Services

5.32.7 ‘tokenize’ — Tokenizer for Python source
-----------------------------------------------

`Source code:' Lib/tokenize.py(1)

__________________________________________________________________

The *note tokenize: 10e. module provides a lexical scanner for Python
source code, implemented in Python.  The scanner in this module returns
comments as tokens as well, making it useful for implementing
"pretty-printers," including colorizers for on-screen displays.

To simplify token stream handling, all *note Operators: dd5. and *note
Delimiters: dd7. tokens are returned using the generic *note token.OP:
3019. token type.  The exact type can be determined by checking the
‘exact_type’ property on the *note named tuple: 787. returned from *note
tokenize.tokenize(): 8c5.

* Menu:

* Tokenizing Input:: 
* Command-Line Usage: Command-Line Usage<2>. 
* Examples: Examples<24>. 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/tokenize.py


File: python.info,  Node: Tokenizing Input,  Next: Command-Line Usage<2>,  Up: tokenize --- Tokenizer for Python source

5.32.7.1 Tokenizing Input
.........................

The primary entry point is a *note generator: 5c0.:

 -- Function: tokenize.tokenize (readline)

     The *note tokenize(): 8c5. generator requires one argument,
     `readline', which must be a callable object which provides the same
     interface as the *note io.IOBase.readline(): 10b8. method of file
     objects.  Each call to the function should return one line of input
     as bytes.

     The generator produces 5-tuples with these members: the token type;
     the token string; a 2-tuple ‘(srow, scol)’ of ints specifying the
     row and column where the token begins in the source; a 2-tuple
     ‘(erow, ecol)’ of ints specifying the row and column where the
     token ends in the source; and the line on which the token was
     found.  The line passed (the last tuple item) is the `logical'
     line; continuation lines are included.  The 5 tuple is returned as
     a *note named tuple: 787. with the field names: ‘type string start
     end line’.

     The returned *note named tuple: 787. has an additional property
     named ‘exact_type’ that contains the exact operator type for *note
     token.OP: 3019. tokens.  For all other token types ‘exact_type’
     equals the named tuple ‘type’ field.

     Changed in version 3.1: Added support for named tuples.

     Changed in version 3.3: Added support for ‘exact_type’.

     *note tokenize(): 8c5. determines the source encoding of the file
     by looking for a UTF-8 BOM or encoding cookie, according to PEP
     263(1).

All constants from the *note token: 10d. module are also exported from
*note tokenize: 10e, as are three additional token type values:

 -- Data: tokenize.COMMENT

     Token value used to indicate a comment.

 -- Data: tokenize.NL

     Token value used to indicate a non-terminating newline.  The
     NEWLINE token indicates the end of a logical line of Python code;
     NL tokens are generated when a logical line of code is continued
     over multiple physical lines.

 -- Data: tokenize.ENCODING

     Token value that indicates the encoding used to decode the source
     bytes into text.  The first token returned by *note tokenize():
     8c5. will always be an ENCODING token.

Another function is provided to reverse the tokenization process.  This
is useful for creating tools that tokenize a script, modify the token
stream, and write back the modified script.

 -- Function: tokenize.untokenize (iterable)

     Converts tokens back into Python source code.  The `iterable' must
     return sequences with at least two elements, the token type and the
     token string.  Any additional sequence elements are ignored.

     The reconstructed script is returned as a single string.  The
     result is guaranteed to tokenize back to match the input so that
     the conversion is lossless and round-trips are assured.  The
     guarantee applies only to the token type and token string as the
     spacing between tokens (column positions) may change.

     It returns bytes, encoded using the ENCODING token, which is the
     first token sequence output by *note tokenize(): 8c5.

*note tokenize(): 8c5. needs to detect the encoding of source files it
tokenizes.  The function it uses to do this is available:

 -- Function: tokenize.detect_encoding (readline)

     The *note detect_encoding(): 1624. function is used to detect the
     encoding that should be used to decode a Python source file.  It
     requires one argument, readline, in the same way as the *note
     tokenize(): 8c5. generator.

     It will call readline a maximum of twice, and return the encoding
     used (as a string) and a list of any lines (not decoded from bytes)
     it has read in.

     It detects the encoding from the presence of a UTF-8 BOM or an
     encoding cookie as specified in PEP 263(2).  If both a BOM and a
     cookie are present, but disagree, a SyntaxError will be raised.
     Note that if the BOM is found, ‘'utf-8-sig'’ will be returned as an
     encoding.

     If no encoding is specified, then the default of ‘'utf-8'’ will be
     returned.

     Use *note open(): 1623. to open Python source files: it uses *note
     detect_encoding(): 1624. to detect the file encoding.

 -- Function: tokenize.open (filename)

     Open a file in read only mode using the encoding detected by *note
     detect_encoding(): 1624.

     New in version 3.2.

 -- Exception: tokenize.TokenError

     Raised when either a docstring or expression that may be split over
     several lines is not completed anywhere in the file, for example:

          """Beginning of
          docstring

     or:

          [1,
           2,
           3

Note that unclosed single-quoted strings do not cause an error to be
raised.  They are tokenized as ‘ERRORTOKEN’, followed by the
tokenization of their contents.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0263

   (2) https://www.python.org/dev/peps/pep-0263


File: python.info,  Node: Command-Line Usage<2>,  Next: Examples<24>,  Prev: Tokenizing Input,  Up: tokenize --- Tokenizer for Python source

5.32.7.2 Command-Line Usage
...........................

New in version 3.3.

The *note tokenize: 10e. module can be executed as a script from the
command line.  It is as simple as:

     python -m tokenize [-e] [filename.py]

The following options are accepted:

 -- Program Option: -h, --help

     show this help message and exit

 -- Program Option: -e, --exact

     display token names using the exact type

If ‘filename.py’ is specified its contents are tokenized to stdout.
Otherwise, tokenization is performed on stdin.


File: python.info,  Node: Examples<24>,  Prev: Command-Line Usage<2>,  Up: tokenize --- Tokenizer for Python source

5.32.7.3 Examples
.................

Example of a script rewriter that transforms float literals into Decimal
objects:

     from tokenize import tokenize, untokenize, NUMBER, STRING, NAME, OP
     from io import BytesIO

     def decistmt(s):
         """Substitute Decimals for floats in a string of statements.

         >>> from decimal import Decimal
         >>> s = 'print(+21.3e-5*-.1234/81.7)'
         >>> decistmt(s)
         "print (+Decimal ('21.3e-5')*-Decimal ('.1234')/Decimal ('81.7'))"

         The format of the exponent is inherited from the platform C library.
         Known cases are "e-007" (Windows) and "e-07" (not Windows).  Since
         we're only showing 12 digits, and the 13th isn't close to 5, the
         rest of the output should be platform-independent.

         >>> exec(s) #doctest: +ELLIPSIS
         -3.21716034272e-0...7

         Output from calculations with Decimal should be identical across all
         platforms.

         >>> exec(decistmt(s))
         -3.217160342717258261933904529E-7
         """
         result = []
         g = tokenize(BytesIO(s.encode('utf-8')).readline) # tokenize the string
         for toknum, tokval, _, _, _  in g:
             if toknum == NUMBER and '.' in tokval:  # replace NUMBER tokens
                 result.extend([
                     (NAME, 'Decimal'),
                     (OP, '('),
                     (STRING, repr(tokval)),
                     (OP, ')')
                 ])
             else:
                 result.append((toknum, tokval))
         return untokenize(result).decode('utf-8')

Example of tokenizing from the command line.  The script:

     def say_hello():
         print("Hello, World!")

     say_hello()

will be tokenized to the following output where the first column is the
range of the line/column coordinates where the token is found, the
second column is the name of the token, and the final column is the
value of the token (if any)

     $ python -m tokenize hello.py
     0,0-0,0:            ENCODING       'utf-8'
     1,0-1,3:            NAME           'def'
     1,4-1,13:           NAME           'say_hello'
     1,13-1,14:          OP             '('
     1,14-1,15:          OP             ')'
     1,15-1,16:          OP             ':'
     1,16-1,17:          NEWLINE        '\n'
     2,0-2,4:            INDENT         '    '
     2,4-2,9:            NAME           'print'
     2,9-2,10:           OP             '('
     2,10-2,25:          STRING         '"Hello, World!"'
     2,25-2,26:          OP             ')'
     2,26-2,27:          NEWLINE        '\n'
     3,0-3,1:            NL             '\n'
     4,0-4,0:            DEDENT         ''
     4,0-4,9:            NAME           'say_hello'
     4,9-4,10:           OP             '('
     4,10-4,11:          OP             ')'
     4,11-4,12:          NEWLINE        '\n'
     5,0-5,0:            ENDMARKER      ''

The exact token type names can be displayed using the ‘-e’ option:

     $ python -m tokenize -e hello.py
     0,0-0,0:            ENCODING       'utf-8'
     1,0-1,3:            NAME           'def'
     1,4-1,13:           NAME           'say_hello'
     1,13-1,14:          LPAR           '('
     1,14-1,15:          RPAR           ')'
     1,15-1,16:          COLON          ':'
     1,16-1,17:          NEWLINE        '\n'
     2,0-2,4:            INDENT         '    '
     2,4-2,9:            NAME           'print'
     2,9-2,10:           LPAR           '('
     2,10-2,25:          STRING         '"Hello, World!"'
     2,25-2,26:          RPAR           ')'
     2,26-2,27:          NEWLINE        '\n'
     3,0-3,1:            NL             '\n'
     4,0-4,0:            DEDENT         ''
     4,0-4,9:            NAME           'say_hello'
     4,9-4,10:           LPAR           '('
     4,10-4,11:          RPAR           ')'
     4,11-4,12:          NEWLINE        '\n'
     5,0-5,0:            ENDMARKER      ''


File: python.info,  Node: tabnanny --- Detection of ambiguous indentation,  Next: pyclbr --- Python class browser support,  Prev: tokenize --- Tokenizer for Python source,  Up: Python Language Services

5.32.8 ‘tabnanny’ — Detection of ambiguous indentation
------------------------------------------------------

`Source code:' Lib/tabnanny.py(1)

__________________________________________________________________

For the time being this module is intended to be called as a script.
However it is possible to import it into an IDE and use the function
*note check(): 3033. described below.

     Note: The API provided by this module is likely to change in future
     releases; such changes may not be backward compatible.

 -- Function: tabnanny.check (file_or_dir)

     If `file_or_dir' is a directory and not a symbolic link, then
     recursively descend the directory tree named by `file_or_dir',
     checking all ‘.py’ files along the way.  If `file_or_dir' is an
     ordinary Python source file, it is checked for whitespace related
     problems.  The diagnostic messages are written to standard output
     using the *note print(): 481. function.

 -- Data: tabnanny.verbose

     Flag indicating whether to print verbose messages.  This is
     incremented by the ‘-v’ option if called as a script.

 -- Data: tabnanny.filename_only

     Flag indicating whether to print only the filenames of files
     containing whitespace related problems.  This is set to true by the
     ‘-q’ option if called as a script.

 -- Exception: tabnanny.NannyNag

     Raised by *note tokeneater(): 3037. if detecting an ambiguous
     indent.  Captured and handled in *note check(): 3033.

 -- Function: tabnanny.tokeneater (type, token, start, end, line)

     This function is used by *note check(): 3033. as a callback
     parameter to the function *note tokenize.tokenize(): 8c5.

See also
........

Module *note tokenize: 10e.

     Lexical scanner for Python source code.

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/tabnanny.py


File: python.info,  Node: pyclbr --- Python class browser support,  Next: py_compile --- Compile Python source files,  Prev: tabnanny --- Detection of ambiguous indentation,  Up: Python Language Services

5.32.9 ‘pyclbr’ — Python class browser support
----------------------------------------------

`Source code:' Lib/pyclbr.py(1)

__________________________________________________________________

The *note pyclbr: d6. module can be used to determine some limited
information about the classes, methods and top-level functions defined
in a module.  The information provided is sufficient to implement a
traditional three-pane class browser.  The information is extracted from
the source code rather than by importing the module, so this module is
safe to use with untrusted code.  This restriction makes it impossible
to use this module with modules not implemented in Python, including all
standard and optional extension modules.

 -- Function: pyclbr.readmodule (module, path=None)

     Read a module and return a dictionary mapping class names to class
     descriptor objects.  The parameter `module' should be the name of a
     module as a string; it may be the name of a module within a
     package.  The `path' parameter should be a sequence, and is used to
     augment the value of ‘sys.path’, which is used to locate module
     source code.

 -- Function: pyclbr.readmodule_ex (module, path=None)

     Like *note readmodule(): b18, but the returned dictionary, in
     addition to mapping class names to class descriptor objects, also
     maps top-level function names to function descriptor objects.
     Moreover, if the module being read is a package, the key
     ‘'__path__'’ in the returned dictionary has as its value a list
     which contains the package search path.

* Menu:

* Class Objects: Class Objects<2>. 
* Function Objects:: 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/pyclbr.py


File: python.info,  Node: Class Objects<2>,  Next: Function Objects,  Up: pyclbr --- Python class browser support

5.32.9.1 Class Objects
......................

The ‘Class’ objects used as values in the dictionary returned by *note
readmodule(): b18. and *note readmodule_ex(): b19. provide the following
data attributes:

 -- Attribute: Class.module

     The name of the module defining the class described by the class
     descriptor.

 -- Attribute: Class.name

     The name of the class.

 -- Attribute: Class.super

     A list of ‘Class’ objects which describe the immediate base classes
     of the class being described.  Classes which are named as
     superclasses but which are not discoverable by *note readmodule():
     b18. are listed as a string with the class name instead of as
     ‘Class’ objects.

 -- Attribute: Class.methods

     A dictionary mapping method names to line numbers.

 -- Attribute: Class.file

     Name of the file containing the ‘class’ statement defining the
     class.

 -- Attribute: Class.lineno

     The line number of the ‘class’ statement within the file named by
     *note file: 3040.


File: python.info,  Node: Function Objects,  Prev: Class Objects<2>,  Up: pyclbr --- Python class browser support

5.32.9.2 Function Objects
.........................

The ‘Function’ objects used as values in the dictionary returned by
*note readmodule_ex(): b19. provide the following attributes:

 -- Attribute: Function.module

     The name of the module defining the function described by the
     function descriptor.

 -- Attribute: Function.name

     The name of the function.

 -- Attribute: Function.file

     Name of the file containing the ‘def’ statement defining the
     function.

 -- Attribute: Function.lineno

     The line number of the ‘def’ statement within the file named by
     *note file: 3046.


File: python.info,  Node: py_compile --- Compile Python source files,  Next: compileall --- Byte-compile Python libraries,  Prev: pyclbr --- Python class browser support,  Up: Python Language Services

5.32.10 ‘py_compile’ — Compile Python source files
--------------------------------------------------

`Source code:' Lib/py_compile.py(1)

__________________________________________________________________

The *note py_compile: d5. module provides a function to generate a
byte-code file from a source file, and another function used when the
module source file is invoked as a script.

Though not often needed, this function can be useful when installing
modules for shared use, especially if some of the users may not have
permission to write the byte-code cache files in the directory
containing the source code.

 -- Exception: py_compile.PyCompileError

     Exception raised when an error occurs while attempting to compile
     the file.

 -- Function: py_compile.compile (file, cfile=None, dfile=None,
          doraise=False, optimize=-1)

     Compile a source file to byte-code and write out the byte-code
     cache file.  The source code is loaded from the file name `file'.
     The byte-code is written to `cfile', which defaults to the PEP
     3147(2)/ PEP 488(3) path, ending in ‘.pyc’.  For example, if `file'
     is ‘/foo/bar/baz.py’ `cfile' will default to
     ‘/foo/bar/__pycache__/baz.cpython-32.pyc’ for Python 3.2.  If
     `dfile' is specified, it is used as the name of the source file in
     error messages when instead of `file'.  If `doraise' is true, a
     *note PyCompileError: 304a. is raised when an error is encountered
     while compiling `file'.  If `doraise' is false (the default), an
     error string is written to ‘sys.stderr’, but no exception is
     raised.  This function returns the path to byte-compiled file, i.e.
     whatever `cfile' value was used.

     If the path that `cfile' becomes (either explicitly specified or
     computed) is a symlink or non-regular file, *note FileExistsError:
     56f. will be raised.  This is to act as a warning that import will
     turn those paths into regular files if it is allowed to write
     byte-compiled files to those paths.  This is a side-effect of
     import using file renaming to place the final byte-compiled file
     into place to prevent concurrent file writing issues.

     `optimize' controls the optimization level and is passed to the
     built-in *note compile(): 903. function.  The default of ‘-1’
     selects the optimization level of the current interpreter.

     Changed in version 3.2: Changed default value of `cfile' to be PEP
     3147(4)-compliant.  Previous default was `file' + ‘'c'’ (‘'o'’ if
     optimization was enabled).  Also added the `optimize' parameter.

     Changed in version 3.4: Changed code to use *note importlib: 9a.
     for the byte-code cache file writing.  This means file
     creation/writing semantics now match what *note importlib: 9a.
     does, e.g.  permissions, write-and-move semantics, etc.  Also added
     the caveat that *note FileExistsError: 56f. is raised if `cfile' is
     a symlink or non-regular file.

 -- Function: py_compile.main (args=None)

     Compile several source files.  The files named in `args' (or on the
     command line, if `args' is ‘None’) are compiled and the resulting
     byte-code is cached in the normal manner.  This function does not
     search a directory structure to locate source files; it only
     compiles files named explicitly.  If ‘'-'’ is the only parameter in
     args, the list of files is taken from standard input.

     Changed in version 3.2: Added support for ‘'-'’.

When this module is run as a script, the *note main(): 304b. is used to
compile all the files named on the command line.  The exit status is
nonzero if one of the files could not be compiled.

See also
........

Module *note compileall: 21.

     Utilities to compile all Python source files in a directory tree.

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/py_compile.py

   (2) https://www.python.org/dev/peps/pep-3147

   (3) https://www.python.org/dev/peps/pep-0488

   (4) https://www.python.org/dev/peps/pep-3147


File: python.info,  Node: compileall --- Byte-compile Python libraries,  Next: dis --- Disassembler for Python bytecode,  Prev: py_compile --- Compile Python source files,  Up: Python Language Services

5.32.11 ‘compileall’ — Byte-compile Python libraries
----------------------------------------------------

`Source code:' Lib/compileall.py(1)

__________________________________________________________________

This module provides some utility functions to support installing Python
libraries.  These functions compile Python source files in a directory
tree.  This module can be used to create the cached byte-code files at
library installation time, which makes them available for use even by
users who don’t have write permission to the library directories.

* Menu:

* Command-line use:: 
* Public functions:: 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/compileall.py


File: python.info,  Node: Command-line use,  Next: Public functions,  Up: compileall --- Byte-compile Python libraries

5.32.11.1 Command-line use
..........................

This module can work as a script (using ‘python -m compileall’) to
compile Python sources.

 -- Program Option: directory ...
 -- Program Option: file ...

     Positional arguments are files to compile or directories that
     contain source files, traversed recursively.  If no argument is
     given, behave as if the command line was ‘-l <directories from
     sys.path>’.

 -- Program Option: -l

     Do not recurse into subdirectories, only compile source code files
     directly contained in the named or implied directories.

 -- Program Option: -f

     Force rebuild even if timestamps are up-to-date.

 -- Program Option: -q

     Do not print the list of files compiled.  If passed once, error
     messages will still be printed.  If passed twice (‘-qq’), all
     output is suppressed.

 -- Program Option: -d destdir

     Directory prepended to the path to each file being compiled.  This
     will appear in compilation time tracebacks, and is also compiled in
     to the byte-code file, where it will be used in tracebacks and
     other messages in cases where the source file does not exist at the
     time the byte-code file is executed.

 -- Program Option: -x regex

     regex is used to search the full path to each file considered for
     compilation, and if the regex produces a match, the file is
     skipped.

 -- Program Option: -i list

     Read the file ‘list’ and add each line that it contains to the list
     of files and directories to compile.  If ‘list’ is ‘-’, read lines
     from ‘stdin’.

 -- Program Option: -b

     Write the byte-code files to their legacy locations and names,
     which may overwrite byte-code files created by another version of
     Python.  The default is to write files to their PEP 3147(1)
     locations and names, which allows byte-code files from multiple
     versions of Python to coexist.

 -- Program Option: -r

     Control the maximum recursion level for subdirectories.  If this is
     given, then ‘-l’ option will not be taken into account.  ‘python -m
     compileall <directory> -r 0’ is equivalent to ‘python -m compileall
     <directory> -l’.

 -- Program Option: -j N

     Use `N' workers to compile the files within the given directory.
     If ‘0’ is used, then the result of *note os.cpu_count(): 478. will
     be used.

Changed in version 3.2: Added the ‘-i’, ‘-b’ and ‘-h’ options.

Changed in version 3.5: Added the ‘-j’, ‘-r’, and ‘-qq’ options.  ‘-q’
option was changed to a multilevel value.  ‘-b’ will always produce a
byte-code file ending in ‘.pyc’, never ‘.pyo’.

There is no command-line option to control the optimization level used
by the *note compile(): 903. function, because the Python interpreter
itself already provides the option: ‘python -O -m compileall’.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3147


File: python.info,  Node: Public functions,  Prev: Command-line use,  Up: compileall --- Byte-compile Python libraries

5.32.11.2 Public functions
..........................

 -- Function: compileall.compile_dir (dir, maxlevels=10, ddir=None,
          force=False, rx=None, quiet=0, legacy=False, optimize=-1,
          workers=1)

     Recursively descend the directory tree named by `dir', compiling
     all ‘.py’ files along the way.  Return a true value if all the
     files compiled successfully, and a false value otherwise.

     The `maxlevels' parameter is used to limit the depth of the
     recursion; it defaults to ‘10’.

     If `ddir' is given, it is prepended to the path to each file being
     compiled for use in compilation time tracebacks, and is also
     compiled in to the byte-code file, where it will be used in
     tracebacks and other messages in cases where the source file does
     not exist at the time the byte-code file is executed.

     If `force' is true, modules are re-compiled even if the timestamps
     are up to date.

     If `rx' is given, its search method is called on the complete path
     to each file considered for compilation, and if it returns a true
     value, the file is skipped.

     If `quiet' is ‘False’ or ‘0’ (the default), the filenames and other
     information are printed to standard out.  Set to ‘1’, only errors
     are printed.  Set to ‘2’, all output is suppressed.

     If `legacy' is true, byte-code files are written to their legacy
     locations and names, which may overwrite byte-code files created by
     another version of Python.  The default is to write files to their
     PEP 3147(1) locations and names, which allows byte-code files from
     multiple versions of Python to coexist.

     `optimize' specifies the optimization level for the compiler.  It
     is passed to the built-in *note compile(): 903. function.

     The argument `workers' specifies how many workers are used to
     compile files in parallel.  The default is to not use multiple
     workers.  If the platform can’t use multiple workers and `workers'
     argument is given, then sequential compilation will be used as a
     fallback.  If `workers' is lower than ‘0’, a *note ValueError: 19c.
     will be raised.

     Changed in version 3.2: Added the `legacy' and `optimize'
     parameter.

     Changed in version 3.5: Added the `workers' parameter.

     Changed in version 3.5: `quiet' parameter was changed to a
     multilevel value.

     Changed in version 3.5: The `legacy' parameter only writes out
     ‘.pyc’ files, not ‘.pyo’ files no matter what the value of
     `optimize' is.

 -- Function: compileall.compile_file (fullname, ddir=None, force=False,
          rx=None, quiet=0, legacy=False, optimize=-1)

     Compile the file with path `fullname'.  Return a true value if the
     file compiled successfully, and a false value otherwise.

     If `ddir' is given, it is prepended to the path to the file being
     compiled for use in compilation time tracebacks, and is also
     compiled in to the byte-code file, where it will be used in
     tracebacks and other messages in cases where the source file does
     not exist at the time the byte-code file is executed.

     If `rx' is given, its search method is passed the full path name to
     the file being compiled, and if it returns a true value, the file
     is not compiled and ‘True’ is returned.

     If `quiet' is ‘False’ or ‘0’ (the default), the filenames and other
     information are printed to standard out.  Set to ‘1’, only errors
     are printed.  Set to ‘2’, all output is suppressed.

     If `legacy' is true, byte-code files are written to their legacy
     locations and names, which may overwrite byte-code files created by
     another version of Python.  The default is to write files to their
     PEP 3147(2) locations and names, which allows byte-code files from
     multiple versions of Python to coexist.

     `optimize' specifies the optimization level for the compiler.  It
     is passed to the built-in *note compile(): 903. function.

     New in version 3.2.

     Changed in version 3.5: `quiet' parameter was changed to a
     multilevel value.

     Changed in version 3.5: The `legacy' parameter only writes out
     ‘.pyc’ files, not ‘.pyo’ files no matter what the value of
     `optimize' is.

 -- Function: compileall.compile_path (skip_curdir=True, maxlevels=0,
          force=False, quiet=0, legacy=False, optimize=-1)

     Byte-compile all the ‘.py’ files found along ‘sys.path’.  Return a
     true value if all the files compiled successfully, and a false
     value otherwise.

     If `skip_curdir' is true (the default), the current directory is
     not included in the search.  All other parameters are passed to the
     *note compile_dir(): 264. function.  Note that unlike the other
     compile functions, ‘maxlevels’ defaults to ‘0’.

     Changed in version 3.2: Added the `legacy' and `optimize'
     parameter.

     Changed in version 3.5: `quiet' parameter was changed to a
     multilevel value.

     Changed in version 3.5: The `legacy' parameter only writes out
     ‘.pyc’ files, not ‘.pyo’ files no matter what the value of
     `optimize' is.

To force a recompile of all the ‘.py’ files in the ‘Lib/’ subdirectory
and all its subdirectories:

     import compileall

     compileall.compile_dir('Lib/', force=True)

     # Perform same compilation, excluding files in .svn directories.
     import re
     compileall.compile_dir('Lib/', rx=re.compile(r'[/\\][.]svn'), force=True)

See also
........

Module *note py_compile: d5.

     Byte-compile a single source file.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3147

   (2) https://www.python.org/dev/peps/pep-3147


File: python.info,  Node: dis --- Disassembler for Python bytecode,  Next: pickletools --- Tools for pickle developers,  Prev: compileall --- Byte-compile Python libraries,  Up: Python Language Services

5.32.12 ‘dis’ — Disassembler for Python bytecode
------------------------------------------------

`Source code:' Lib/dis.py(1)

__________________________________________________________________

The *note dis: 36. module supports the analysis of CPython *note
bytecode: d06. by disassembling it.  The CPython bytecode which this
module takes as an input is defined in the file ‘Include/opcode.h’ and
used by the compiler and the interpreter.

`CPython implementation detail:' Bytecode is an implementation detail of
the CPython interpreter.  No guarantees are made that bytecode will not
be added, removed, or changed between versions of Python.  Use of this
module should not be considered to work across Python VMs or Python
releases.

Example: Given the function ‘myfunc()’:

     def myfunc(alist):
         return len(alist)

the following command can be used to display the disassembly of
‘myfunc()’:

     >>> dis.dis(myfunc)
       2           0 LOAD_GLOBAL              0 (len)
                   3 LOAD_FAST                0 (alist)
                   6 CALL_FUNCTION            1
                   9 RETURN_VALUE

(The "2" is a line number).

* Menu:

* Bytecode analysis:: 
* Analysis functions:: 
* Python Bytecode Instructions:: 
* Opcode collections:: 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/dis.py


File: python.info,  Node: Bytecode analysis,  Next: Analysis functions,  Up: dis --- Disassembler for Python bytecode

5.32.12.1 Bytecode analysis
...........................

New in version 3.4.

The bytecode analysis API allows pieces of Python code to be wrapped in
a *note Bytecode: 429. object that provides easy access to details of
the compiled code.

 -- Class: dis.Bytecode (x, *, first_line=None, current_offset=None)

     Analyse the bytecode corresponding to a function, generator,
     method, string of source code, or a code object (as returned by
     *note compile(): 903.).

     This is a convenience wrapper around many of the functions listed
     below, most notably *note get_instructions(): 428, as iterating
     over a *note Bytecode: 429. instance yields the bytecode operations
     as *note Instruction: 427. instances.

     If `first_line' is not None, it indicates the line number that
     should be reported for the first source line in the disassembled
     code.  Otherwise, the source line information (if any) is taken
     directly from the disassembled code object.

     If `current_offset' is not None, it refers to an instruction offset
     in the disassembled code.  Setting this means *note dis(): 42a.
     will display a "current instruction" marker against the specified
     opcode.

      -- Class Method: from_traceback (tb)

          Construct a *note Bytecode: 429. instance from the given
          traceback, setting `current_offset' to the instruction
          responsible for the exception.

      -- Data: codeobj

          The compiled code object.

      -- Data: first_line

          The first source line of the code object (if available)

      -- Method: dis ()

          Return a formatted view of the bytecode operations (the same
          as printed by *note dis.dis(): 424, but returned as a
          multi-line string).

      -- Method: info ()

          Return a formatted multi-line string with detailed information
          about the code object, like *note code_info(): 82c.

Example:

     >>> bytecode = dis.Bytecode(myfunc)
     >>> for instr in bytecode:
     ...     print(instr.opname)
     ...
     LOAD_GLOBAL
     LOAD_FAST
     CALL_FUNCTION
     RETURN_VALUE


File: python.info,  Node: Analysis functions,  Next: Python Bytecode Instructions,  Prev: Bytecode analysis,  Up: dis --- Disassembler for Python bytecode

5.32.12.2 Analysis functions
............................

The *note dis: 36. module also defines the following analysis functions
that convert the input directly to the desired output.  They can be
useful if only a single operation is being performed, so the
intermediate analysis object isn’t useful:

 -- Function: dis.code_info (x)

     Return a formatted multi-line string with detailed code object
     information for the supplied function, generator, method, source
     code string or code object.

     Note that the exact contents of code info strings are highly
     implementation dependent and they may change arbitrarily across
     Python VMs or Python releases.

     New in version 3.2.

 -- Function: dis.show_code (x, *, file=None)

     Print detailed code object information for the supplied function,
     method, source code string or code object to `file' (or
     ‘sys.stdout’ if `file' is not specified).

     This is a convenient shorthand for ‘print(code_info(x),
     file=file)’, intended for interactive exploration at the
     interpreter prompt.

     New in version 3.2.

     Changed in version 3.4: Added `file' parameter.

 -- Function: dis.dis (x=None, *, file=None)

     Disassemble the `x' object.  `x' can denote either a module, a
     class, a method, a function, a generator, a code object, a string
     of source code or a byte sequence of raw bytecode.  For a module,
     it disassembles all functions.  For a class, it disassembles all
     methods (including class and static methods).  For a code object or
     sequence of raw bytecode, it prints one line per bytecode
     instruction.  Strings are first compiled to code objects with the
     *note compile(): 903. built-in function before being disassembled.
     If no object is provided, this function disassembles the last
     traceback.

     The disassembly is written as text to the supplied `file' argument
     if provided and to ‘sys.stdout’ otherwise.

     Changed in version 3.4: Added `file' parameter.

 -- Function: dis.distb (tb=None, *, file=None)

     Disassemble the top-of-stack function of a traceback, using the
     last traceback if none was passed.  The instruction causing the
     exception is indicated.

     The disassembly is written as text to the supplied `file' argument
     if provided and to ‘sys.stdout’ otherwise.

     Changed in version 3.4: Added `file' parameter.

 -- Function: dis.disassemble (code, lasti=-1, *, file=None)
 -- Function: dis.disco (code, lasti=-1, *, file=None)

     Disassemble a code object, indicating the last instruction if
     `lasti' was provided.  The output is divided in the following
     columns:

       1. the line number, for the first instruction of each line

       2. the current instruction, indicated as ‘-->’,

       3. a labelled instruction, indicated with ‘>>’,

       4. the address of the instruction,

       5. the operation code name,

       6. operation parameters, and

       7. interpretation of the parameters in parentheses.

     The parameter interpretation recognizes local and global variable
     names, constant values, branch targets, and compare operators.

     The disassembly is written as text to the supplied `file' argument
     if provided and to ‘sys.stdout’ otherwise.

     Changed in version 3.4: Added `file' parameter.

 -- Function: dis.get_instructions (x, *, first_line=None)

     Return an iterator over the instructions in the supplied function,
     method, source code string or code object.

     The iterator generates a series of *note Instruction: 427. named
     tuples giving the details of each operation in the supplied code.

     If `first_line' is not None, it indicates the line number that
     should be reported for the first source line in the disassembled
     code.  Otherwise, the source line information (if any) is taken
     directly from the disassembled code object.

     New in version 3.4.

 -- Function: dis.findlinestarts (code)

     This generator function uses the ‘co_firstlineno’ and ‘co_lnotab’
     attributes of the code object `code' to find the offsets which are
     starts of lines in the source code.  They are generated as
     ‘(offset, lineno)’ pairs.

 -- Function: dis.findlabels (code)

     Detect all offsets in the code object `code' which are jump
     targets, and return a list of these offsets.

 -- Function: dis.stack_effect (opcode[, oparg])

     Compute the stack effect of `opcode' with argument `oparg'.

     New in version 3.4.


File: python.info,  Node: Python Bytecode Instructions,  Next: Opcode collections,  Prev: Analysis functions,  Up: dis --- Disassembler for Python bytecode

5.32.12.3 Python Bytecode Instructions
......................................

The *note get_instructions(): 428. function and *note Bytecode: 429.
class provide details of bytecode instructions as *note Instruction:
427. instances:

 -- Class: dis.Instruction

     Details for a bytecode operation

      -- Data: opcode

          numeric code for operation, corresponding to the opcode values
          listed below and the bytecode values in the *note Opcode
          collections: 3068.

      -- Data: opname

          human readable name for operation

      -- Data: arg

          numeric argument to operation (if any), otherwise None

      -- Data: argval

          resolved arg value (if known), otherwise same as arg

      -- Data: argrepr

          human readable description of operation argument

      -- Data: offset

          start index of operation within bytecode sequence

      -- Data: starts_line

          line started by this opcode (if any), otherwise None

      -- Data: is_jump_target

          ‘True’ if other code jumps to here, otherwise ‘False’

     New in version 3.4.

The Python compiler currently generates the following bytecode
instructions.

`General instructions'

 -- Opcode: NOP

     Do nothing code.  Used as a placeholder by the bytecode optimizer.

 -- Opcode: POP_TOP

     Removes the top-of-stack (TOS) item.

 -- Opcode: ROT_TWO

     Swaps the two top-most stack items.

 -- Opcode: ROT_THREE

     Lifts second and third stack item one position up, moves top down
     to position three.

 -- Opcode: DUP_TOP

     Duplicates the reference on top of the stack.

 -- Opcode: DUP_TOP_TWO

     Duplicates the two references on top of the stack, leaving them in
     the same order.

`Unary operations'

Unary operations take the top of the stack, apply the operation, and
push the result back on the stack.

 -- Opcode: UNARY_POSITIVE

     Implements ‘TOS = +TOS’.

 -- Opcode: UNARY_NEGATIVE

     Implements ‘TOS = -TOS’.

 -- Opcode: UNARY_NOT

     Implements ‘TOS = not TOS’.

 -- Opcode: UNARY_INVERT

     Implements ‘TOS = ~TOS’.

 -- Opcode: GET_ITER

     Implements ‘TOS = iter(TOS)’.

 -- Opcode: GET_YIELD_FROM_ITER

     If ‘TOS’ is a *note generator iterator: 34e. or *note coroutine:
     2ad. object it is left as is.  Otherwise, implements ‘TOS =
     iter(TOS)’.

     New in version 3.5.

`Binary operations'

Binary operations remove the top of the stack (TOS) and the second
top-most stack item (TOS1) from the stack.  They perform the operation,
and put the result back on the stack.

 -- Opcode: BINARY_POWER

     Implements ‘TOS = TOS1 ** TOS’.

 -- Opcode: BINARY_MULTIPLY

     Implements ‘TOS = TOS1 * TOS’.

 -- Opcode: BINARY_MATRIX_MULTIPLY

     Implements ‘TOS = TOS1 @ TOS’.

     New in version 3.5.

 -- Opcode: BINARY_FLOOR_DIVIDE

     Implements ‘TOS = TOS1 // TOS’.

 -- Opcode: BINARY_TRUE_DIVIDE

     Implements ‘TOS = TOS1 / TOS’.

 -- Opcode: BINARY_MODULO

     Implements ‘TOS = TOS1 % TOS’.

 -- Opcode: BINARY_ADD

     Implements ‘TOS = TOS1 + TOS’.

 -- Opcode: BINARY_SUBTRACT

     Implements ‘TOS = TOS1 - TOS’.

 -- Opcode: BINARY_SUBSCR

     Implements ‘TOS = TOS1[TOS]’.

 -- Opcode: BINARY_LSHIFT

     Implements ‘TOS = TOS1 << TOS’.

 -- Opcode: BINARY_RSHIFT

     Implements ‘TOS = TOS1 >> TOS’.

 -- Opcode: BINARY_AND

     Implements ‘TOS = TOS1 & TOS’.

 -- Opcode: BINARY_XOR

     Implements ‘TOS = TOS1 ^ TOS’.

 -- Opcode: BINARY_OR

     Implements ‘TOS = TOS1 | TOS’.

`In-place operations'

In-place operations are like binary operations, in that they remove TOS
and TOS1, and push the result back on the stack, but the operation is
done in-place when TOS1 supports it, and the resulting TOS may be (but
does not have to be) the original TOS1.

 -- Opcode: INPLACE_POWER

     Implements in-place ‘TOS = TOS1 ** TOS’.

 -- Opcode: INPLACE_MULTIPLY

     Implements in-place ‘TOS = TOS1 * TOS’.

 -- Opcode: INPLACE_MATRIX_MULTIPLY

     Implements in-place ‘TOS = TOS1 @ TOS’.

     New in version 3.5.

 -- Opcode: INPLACE_FLOOR_DIVIDE

     Implements in-place ‘TOS = TOS1 // TOS’.

 -- Opcode: INPLACE_TRUE_DIVIDE

     Implements in-place ‘TOS = TOS1 / TOS’.

 -- Opcode: INPLACE_MODULO

     Implements in-place ‘TOS = TOS1 % TOS’.

 -- Opcode: INPLACE_ADD

     Implements in-place ‘TOS = TOS1 + TOS’.

 -- Opcode: INPLACE_SUBTRACT

     Implements in-place ‘TOS = TOS1 - TOS’.

 -- Opcode: INPLACE_LSHIFT

     Implements in-place ‘TOS = TOS1 << TOS’.

 -- Opcode: INPLACE_RSHIFT

     Implements in-place ‘TOS = TOS1 >> TOS’.

 -- Opcode: INPLACE_AND

     Implements in-place ‘TOS = TOS1 & TOS’.

 -- Opcode: INPLACE_XOR

     Implements in-place ‘TOS = TOS1 ^ TOS’.

 -- Opcode: INPLACE_OR

     Implements in-place ‘TOS = TOS1 | TOS’.

 -- Opcode: STORE_SUBSCR

     Implements ‘TOS1[TOS] = TOS2’.

 -- Opcode: DELETE_SUBSCR

     Implements ‘del TOS1[TOS]’.

`Coroutine opcodes'

 -- Opcode: GET_AWAITABLE

     Implements ‘TOS = get_awaitable(TOS)’, where ‘get_awaitable(o)’
     returns ‘o’ if ‘o’ is a coroutine object or a generator object with
     the CO_ITERABLE_COROUTINE flag, or resolves ‘o.__await__’.

 -- Opcode: GET_AITER

     Implements ‘TOS = get_awaitable(TOS.__aiter__())’.  See
     ‘GET_AWAITABLE’ for details about ‘get_awaitable’

 -- Opcode: GET_ANEXT

     Implements ‘PUSH(get_awaitable(TOS.__anext__()))’.  See
     ‘GET_AWAITABLE’ for details about ‘get_awaitable’

 -- Opcode: BEFORE_ASYNC_WITH

     Resolves ‘__aenter__’ and ‘__aexit__’ from the object on top of the
     stack.  Pushes ‘__aexit__’ and result of ‘__aenter__()’ to the
     stack.

 -- Opcode: SETUP_ASYNC_WITH

     Creates a new frame object.

`Miscellaneous opcodes'

 -- Opcode: PRINT_EXPR

     Implements the expression statement for the interactive mode.  TOS
     is removed from the stack and printed.  In non-interactive mode, an
     expression statement is terminated with *note POP_TOP: 3071.

 -- Opcode: BREAK_LOOP

     Terminates a loop due to a *note break: c02. statement.

 -- Opcode: CONTINUE_LOOP (target)

     Continues a loop due to a *note continue: c04. statement.  `target'
     is the address to jump to (which should be a *note FOR_ITER: 30a1.
     instruction).

 -- Opcode: SET_ADD (i)

     Calls ‘set.add(TOS1[-i], TOS)’.  Used to implement set
     comprehensions.

 -- Opcode: LIST_APPEND (i)

     Calls ‘list.append(TOS[-i], TOS)’.  Used to implement list
     comprehensions.

 -- Opcode: MAP_ADD (i)

     Calls ‘dict.setitem(TOS1[-i], TOS, TOS1)’.  Used to implement dict
     comprehensions.

For all of the *note SET_ADD: 30a2, *note LIST_APPEND: 30a3. and *note
MAP_ADD: 30a4. instructions, while the added value or key/value pair is
popped off, the container object remains on the stack so that it is
available for further iterations of the loop.

 -- Opcode: RETURN_VALUE

     Returns with TOS to the caller of the function.

 -- Opcode: YIELD_VALUE

     Pops TOS and yields it from a *note generator: 5c0.

 -- Opcode: YIELD_FROM

     Pops TOS and delegates to it as a subiterator from a *note
     generator: 5c0.

     New in version 3.3.

 -- Opcode: IMPORT_STAR

     Loads all symbols not starting with ‘'_'’ directly from the module
     TOS to the local namespace.  The module is popped after loading all
     names.  This opcode implements ‘from module import *’.

 -- Opcode: POP_BLOCK

     Removes one block from the block stack.  Per frame, there is a
     stack of blocks, denoting nested loops, try statements, and such.

 -- Opcode: POP_EXCEPT

     Removes one block from the block stack.  The popped block must be
     an exception handler block, as implicitly created when entering an
     except handler.  In addition to popping extraneous values from the
     frame stack, the last three popped values are used to restore the
     exception state.

 -- Opcode: END_FINALLY

     Terminates a *note finally: 526. clause.  The interpreter recalls
     whether the exception has to be re-raised, or whether the function
     returns, and continues with the outer-next block.

 -- Opcode: LOAD_BUILD_CLASS

     Pushes ‘builtins.__build_class__()’ onto the stack.  It is later
     called by *note CALL_FUNCTION: 30ad. to construct a class.

 -- Opcode: SETUP_WITH (delta)

     This opcode performs several operations before a with block starts.
     First, it loads *note __exit__(): 908. from the context manager and
     pushes it onto the stack for later use by ‘WITH_CLEANUP’.  Then,
     *note __enter__(): 907. is called, and a finally block pointing to
     `delta' is pushed.  Finally, the result of calling the enter method
     is pushed onto the stack.  The next opcode will either ignore it
     (*note POP_TOP: 3071.), or store it in (a) variable(s) (*note
     STORE_FAST: 30af, *note STORE_NAME: 30b0, or *note UNPACK_SEQUENCE:
     30b1.).

 -- Opcode: WITH_CLEANUP_START

     Cleans up the stack when a *note with: 29d. statement block exits.
     TOS is the context manager’s *note __exit__(): 908. bound method.
     Below TOS are 1–3 values indicating how/why the finally clause was
     entered:

        * SECOND = ‘None’

        * (SECOND, THIRD) = (‘WHY_{RETURN,CONTINUE}’), retval

        * SECOND = ‘WHY_*’; no retval below it

        * (SECOND, THIRD, FOURTH) = exc_info()

     In the last case, ‘TOS(SECOND, THIRD, FOURTH)’ is called, otherwise
     ‘TOS(None, None, None)’.  Pushes SECOND and result of the call to
     the stack.

 -- Opcode: WITH_CLEANUP_FINISH

     Pops exception type and result of ’exit’ function call from the
     stack.

     If the stack represents an exception, `and' the function call
     returns a ’true’ value, this information is "zapped" and replaced
     with a single ‘WHY_SILENCED’ to prevent *note END_FINALLY: 30ab.
     from re-raising the exception.  (But non-local gotos will still be
     resumed.)

All of the following opcodes expect arguments.  An argument is two
bytes, with the more significant byte last.

 -- Opcode: STORE_NAME (namei)

     Implements ‘name = TOS’.  `namei' is the index of `name' in the
     attribute ‘co_names’ of the code object.  The compiler tries to use
     *note STORE_FAST: 30af. or *note STORE_GLOBAL: 30b4. if possible.

 -- Opcode: DELETE_NAME (namei)

     Implements ‘del name’, where `namei' is the index into ‘co_names’
     attribute of the code object.

 -- Opcode: UNPACK_SEQUENCE (count)

     Unpacks TOS into `count' individual values, which are put onto the
     stack right-to-left.

 -- Opcode: UNPACK_EX (counts)

     Implements assignment with a starred target: Unpacks an iterable in
     TOS into individual values, where the total number of values can be
     smaller than the number of items in the iterable: one of the new
     values will be a list of all leftover items.

     The low byte of `counts' is the number of values before the list
     value, the high byte of `counts' the number of values after it.
     The resulting values are put onto the stack right-to-left.

 -- Opcode: STORE_ATTR (namei)

     Implements ‘TOS.name = TOS1’, where `namei' is the index of name in
     ‘co_names’.

 -- Opcode: DELETE_ATTR (namei)

     Implements ‘del TOS.name’, using `namei' as index into ‘co_names’.

 -- Opcode: STORE_GLOBAL (namei)

     Works as *note STORE_NAME: 30b0, but stores the name as a global.

 -- Opcode: DELETE_GLOBAL (namei)

     Works as *note DELETE_NAME: 30b5, but deletes a global name.

 -- Opcode: LOAD_CONST (consti)

     Pushes ‘co_consts[consti]’ onto the stack.

 -- Opcode: LOAD_NAME (namei)

     Pushes the value associated with ‘co_names[namei]’ onto the stack.

 -- Opcode: BUILD_TUPLE (count)

     Creates a tuple consuming `count' items from the stack, and pushes
     the resulting tuple onto the stack.

 -- Opcode: BUILD_LIST (count)

     Works as *note BUILD_TUPLE: 30bc, but creates a list.

 -- Opcode: BUILD_SET (count)

     Works as *note BUILD_TUPLE: 30bc, but creates a set.

 -- Opcode: BUILD_MAP (count)

     Pushes a new dictionary object onto the stack.  The dictionary is
     pre-sized to hold `count' entries.

 -- Opcode: LOAD_ATTR (namei)

     Replaces TOS with ‘getattr(TOS, co_names[namei])’.

 -- Opcode: COMPARE_OP (opname)

     Performs a Boolean operation.  The operation name can be found in
     ‘cmp_op[opname]’.

 -- Opcode: IMPORT_NAME (namei)

     Imports the module ‘co_names[namei]’.  TOS and TOS1 are popped and
     provide the `fromlist' and `level' arguments of *note __import__():
     5cd.  The module object is pushed onto the stack.  The current
     namespace is not affected: for a proper import statement, a
     subsequent *note STORE_FAST: 30af. instruction modifies the
     namespace.

 -- Opcode: IMPORT_FROM (namei)

     Loads the attribute ‘co_names[namei]’ from the module found in TOS.
     The resulting object is pushed onto the stack, to be subsequently
     stored by a *note STORE_FAST: 30af. instruction.

 -- Opcode: JUMP_FORWARD (delta)

     Increments bytecode counter by `delta'.

 -- Opcode: POP_JUMP_IF_TRUE (target)

     If TOS is true, sets the bytecode counter to `target'.  TOS is
     popped.

 -- Opcode: POP_JUMP_IF_FALSE (target)

     If TOS is false, sets the bytecode counter to `target'.  TOS is
     popped.

 -- Opcode: JUMP_IF_TRUE_OR_POP (target)

     If TOS is true, sets the bytecode counter to `target' and leaves
     TOS on the stack.  Otherwise (TOS is false), TOS is popped.

 -- Opcode: JUMP_IF_FALSE_OR_POP (target)

     If TOS is false, sets the bytecode counter to `target' and leaves
     TOS on the stack.  Otherwise (TOS is true), TOS is popped.

 -- Opcode: JUMP_ABSOLUTE (target)

     Set bytecode counter to `target'.

 -- Opcode: FOR_ITER (delta)

     TOS is an *note iterator: e4f.  Call its *note __next__(): 8cf.
     method.  If this yields a new value, push it on the stack (leaving
     the iterator below it).  If the iterator indicates it is exhausted
     TOS is popped, and the byte code counter is incremented by `delta'.

 -- Opcode: LOAD_GLOBAL (namei)

     Loads the global named ‘co_names[namei]’ onto the stack.

 -- Opcode: SETUP_LOOP (delta)

     Pushes a block for a loop onto the block stack.  The block spans
     from the current instruction with a size of `delta' bytes.

 -- Opcode: SETUP_EXCEPT (delta)

     Pushes a try block from a try-except clause onto the block stack.
     `delta' points to the first except block.

 -- Opcode: SETUP_FINALLY (delta)

     Pushes a try block from a try-except clause onto the block stack.
     `delta' points to the finally block.

 -- Opcode: LOAD_FAST (var_num)

     Pushes a reference to the local ‘co_varnames[var_num]’ onto the
     stack.

 -- Opcode: STORE_FAST (var_num)

     Stores TOS into the local ‘co_varnames[var_num]’.

 -- Opcode: DELETE_FAST (var_num)

     Deletes local ‘co_varnames[var_num]’.

 -- Opcode: LOAD_CLOSURE (i)

     Pushes a reference to the cell contained in slot `i' of the cell
     and free variable storage.  The name of the variable is
     ‘co_cellvars[i]’ if `i' is less than the length of `co_cellvars'.
     Otherwise it is ‘co_freevars[i - len(co_cellvars)]’.

 -- Opcode: LOAD_DEREF (i)

     Loads the cell contained in slot `i' of the cell and free variable
     storage.  Pushes a reference to the object the cell contains on the
     stack.

 -- Opcode: LOAD_CLASSDEREF (i)

     Much like *note LOAD_DEREF: 30d1. but first checks the locals
     dictionary before consulting the cell.  This is used for loading
     free variables in class bodies.

 -- Opcode: STORE_DEREF (i)

     Stores TOS into the cell contained in slot `i' of the cell and free
     variable storage.

 -- Opcode: DELETE_DEREF (i)

     Empties the cell contained in slot `i' of the cell and free
     variable storage.  Used by the *note del: c30. statement.

 -- Opcode: RAISE_VARARGS (argc)

     Raises an exception.  `argc' indicates the number of parameters to
     the raise statement, ranging from 0 to 3.  The handler will find
     the traceback as TOS2, the parameter as TOS1, and the exception as
     TOS.

 -- Opcode: CALL_FUNCTION (argc)

     Calls a function.  The low byte of `argc' indicates the number of
     positional parameters, the high byte the number of keyword
     parameters.  On the stack, the opcode finds the keyword parameters
     first.  For each keyword argument, the value is on top of the key.
     Below the keyword parameters, the positional parameters are on the
     stack, with the right-most parameter on top.  Below the parameters,
     the function object to call is on the stack.  Pops all function
     arguments, and the function itself off the stack, and pushes the
     return value.

 -- Opcode: MAKE_FUNCTION (argc)

     Pushes a new function object on the stack.  From bottom to top, the
     consumed stack must consist of

        * ‘argc & 0xFF’ default argument objects in positional order

        * ‘(argc >> 8) & 0xFF’ pairs of name and default argument, with
          the name just below the object on the stack, for keyword-only
          parameters

        * ‘(argc >> 16) & 0x7FFF’ parameter annotation objects

        * a tuple listing the parameter names for the annotations (only
          if there are ony annotation objects)

        * the code associated with the function (at TOS1)

        * the *note qualified name: dec. of the function (at TOS)

 -- Opcode: MAKE_CLOSURE (argc)

     Creates a new function object, sets its `__closure__' slot, and
     pushes it on the stack.  TOS is the *note qualified name: dec. of
     the function, TOS1 is the code associated with the function, and
     TOS2 is the tuple containing cells for the closure’s free
     variables.  `argc' is interpreted as in ‘MAKE_FUNCTION’; the
     annotations and defaults are also in the same order below TOS2.

 -- Opcode: BUILD_SLICE (argc)

     Pushes a slice object on the stack.  `argc' must be 2 or 3.  If it
     is 2, ‘slice(TOS1, TOS)’ is pushed; if it is 3, ‘slice(TOS2, TOS1,
     TOS)’ is pushed.  See the *note slice(): a85. built-in function for
     more information.

 -- Opcode: EXTENDED_ARG (ext)

     Prefixes any opcode which has an argument too big to fit into the
     default two bytes.  `ext' holds two additional bytes which, taken
     together with the subsequent opcode’s argument, comprise a
     four-byte argument, `ext' being the two most-significant bytes.

 -- Opcode: CALL_FUNCTION_VAR (argc)

     Calls a function.  `argc' is interpreted as in *note CALL_FUNCTION:
     30ad.  The top element on the stack contains the variable argument
     list, followed by keyword and positional arguments.

 -- Opcode: CALL_FUNCTION_KW (argc)

     Calls a function.  `argc' is interpreted as in *note CALL_FUNCTION:
     30ad.  The top element on the stack contains the keyword arguments
     dictionary, followed by explicit keyword and positional arguments.

 -- Opcode: CALL_FUNCTION_VAR_KW (argc)

     Calls a function.  `argc' is interpreted as in *note CALL_FUNCTION:
     30ad.  The top element on the stack contains the keyword arguments
     dictionary, followed by the variable-arguments tuple, followed by
     explicit keyword and positional arguments.

 -- Opcode: FORMAT_VALUE (flags)

     Used for implementing formatted literal strings (f-strings).  Pops
     an optional `fmt_spec' from the stack, then a required `value'.
     `flags' is interpreted as follows:

        * ‘(flags & 0x03) == 0x00’: `value' is formatted as-is.

        * ‘(flags & 0x03) == 0x01’: call *note str(): 25a. on `value'
          before formatting it.

        * ‘(flags & 0x03) == 0x02’: call *note repr(): 3bb. on `value'
          before formatting it.

        * ‘(flags & 0x03) == 0x03’: call *note ascii(): 9c3. on `value'
          before formatting it.

        * ‘(flags & 0x04) == 0x04’: pop `fmt_spec' from the stack and
          use it, else use an empty `fmt_spec'.

     Formatting is performed using ‘PyObject_Format()’.  The result is
     pushed on the stack.

     New in version 3.6.

 -- Opcode: HAVE_ARGUMENT

     This is not really an opcode.  It identifies the dividing line
     between opcodes which don’t take arguments ‘< HAVE_ARGUMENT’ and
     those which do ‘>= HAVE_ARGUMENT’.


File: python.info,  Node: Opcode collections,  Prev: Python Bytecode Instructions,  Up: dis --- Disassembler for Python bytecode

5.32.12.4 Opcode collections
............................

These collections are provided for automatic introspection of bytecode
instructions:

 -- Data: dis.opname

     Sequence of operation names, indexable using the bytecode.

 -- Data: dis.opmap

     Dictionary mapping operation names to bytecodes.

 -- Data: dis.cmp_op

     Sequence of all compare operation names.

 -- Data: dis.hasconst

     Sequence of bytecodes that have a constant parameter.

 -- Data: dis.hasfree

     Sequence of bytecodes that access a free variable (note that ’free’
     in this context refers to names in the current scope that are
     referenced by inner scopes or names in outer scopes that are
     referenced from this scope.  It does `not' include references to
     global or builtin scopes).

 -- Data: dis.hasname

     Sequence of bytecodes that access an attribute by name.

 -- Data: dis.hasjrel

     Sequence of bytecodes that have a relative jump target.

 -- Data: dis.hasjabs

     Sequence of bytecodes that have an absolute jump target.

 -- Data: dis.haslocal

     Sequence of bytecodes that access a local variable.

 -- Data: dis.hascompare

     Sequence of bytecodes of Boolean operations.


File: python.info,  Node: pickletools --- Tools for pickle developers,  Prev: dis --- Disassembler for Python bytecode,  Up: Python Language Services

5.32.13 ‘pickletools’ — Tools for pickle developers
---------------------------------------------------

`Source code:' Lib/pickletools.py(1)

__________________________________________________________________

This module contains various constants relating to the intimate details
of the *note pickle: c8. module, some lengthy comments about the
implementation, and a few useful functions for analyzing pickled data.
The contents of this module are useful for Python core developers who
are working on the *note pickle: c8.; ordinary users of the *note
pickle: c8. module probably won’t find the *note pickletools: c9. module
relevant.

* Menu:

* Command line usage: Command line usage<2>. 
* Programmatic Interface: Programmatic Interface<2>. 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/pickletools.py


File: python.info,  Node: Command line usage<2>,  Next: Programmatic Interface<2>,  Up: pickletools --- Tools for pickle developers

5.32.13.1 Command line usage
............................

New in version 3.2.

When invoked from the command line, ‘python -m pickletools’ will
disassemble the contents of one or more pickle files.  Note that if you
want to see the Python object stored in the pickle rather than the
details of pickle format, you may want to use ‘-m pickle’ instead.
However, when the pickle file that you want to examine comes from an
untrusted source, ‘-m pickletools’ is a safer option because it does not
execute pickle bytecode.

For example, with a tuple ‘(1, 2)’ pickled in file ‘x.pickle’:

     $ python -m pickle x.pickle
     (1, 2)

     $ python -m pickletools x.pickle
         0: \x80 PROTO      3
         2: K    BININT1    1
         4: K    BININT1    2
         6: \x86 TUPLE2
         7: q    BINPUT     0
         9: .    STOP
     highest protocol among opcodes = 2

* Menu:

* Command line options: Command line options<3>. 


File: python.info,  Node: Command line options<3>,  Up: Command line usage<2>

5.32.13.2 Command line options
..............................

 -- Program Option: -a, --annotate

     Annotate each line with a short opcode description.

 -- Program Option: -o, --output=<file>

     Name of a file where the output should be written.

 -- Program Option: -l, --indentlevel=<num>

     The number of blanks by which to indent a new MARK level.

 -- Program Option: -m, --memo

     When multiple objects are disassembled, preserve memo between
     disassemblies.

 -- Program Option: -p, --preamble=<preamble>

     When more than one pickle file are specified, print given preamble
     before each disassembly.


File: python.info,  Node: Programmatic Interface<2>,  Prev: Command line usage<2>,  Up: pickletools --- Tools for pickle developers

5.32.13.3 Programmatic Interface
................................

 -- Function: pickletools.dis (pickle, out=None, memo=None,
          indentlevel=4, annotate=0)

          Outputs a symbolic disassembly of the pickle to the file-like
          object `out', defaulting to ‘sys.stdout’.  `pickle' can be a
          string or a file-like object.  `memo' can be a Python
          dictionary that will be used as the pickle’s memo; it can be
          used to perform disassemblies across multiple pickles created
          by the same pickler.  Successive levels, indicated by ‘MARK’
          opcodes in the stream, are indented by `indentlevel' spaces.
          If a nonzero value is given to `annotate', each opcode in the
          output is annotated with a short description.  The value of
          `annotate' is used as a hint for the column where annotation
          should start.

     New in version 3.2: The `annotate' argument.

 -- Function: pickletools.genops (pickle)

     Provides an *note iterator: e4f. over all of the opcodes in a
     pickle, returning a sequence of ‘(opcode, arg, pos)’ triples.
     `opcode' is an instance of an ‘OpcodeInfo’ class; `arg' is the
     decoded value, as a Python object, of the opcode’s argument; `pos'
     is the position at which this opcode is located.  `pickle' can be a
     string or a file-like object.

 -- Function: pickletools.optimize (picklestring)

     Returns a new equivalent pickle string after eliminating unused
     ‘PUT’ opcodes.  The optimized pickle is shorter, takes less
     transmission time, requires less storage space, and unpickles more
     efficiently.


File: python.info,  Node: Miscellaneous Services,  Next: MS Windows Specific Services,  Prev: Python Language Services,  Up: The Python Standard Library

5.33 Miscellaneous Services
===========================

The modules described in this chapter provide miscellaneous services
that are available in all Python versions.  Here’s an overview:

* Menu:

* formatter: formatter --- Generic output formatting. Generic output formatting


File: python.info,  Node: formatter --- Generic output formatting,  Up: Miscellaneous Services

5.33.1 ‘formatter’ — Generic output formatting
----------------------------------------------

Deprecated since version 3.4: Due to lack of usage, the formatter module
has been deprecated.

This module supports two interface definitions, each with multiple
implementations: The `formatter' interface, and the `writer' interface
which is required by the formatter interface.

Formatter objects transform an abstract flow of formatting events into
specific output events on writer objects.  Formatters manage several
stack structures to allow various properties of a writer object to be
changed and restored; writers need not be able to handle relative
changes nor any sort of "change back" operation.  Specific writer
properties which may be controlled via formatter objects are horizontal
alignment, font, and left margin indentations.  A mechanism is provided
which supports providing arbitrary, non-exclusive style settings to a
writer as well.  Additional interfaces facilitate formatting events
which are not reversible, such as paragraph separation.

Writer objects encapsulate device interfaces.  Abstract devices, such as
file formats, are supported as well as physical devices.  The provided
implementations all work with abstract devices.  The interface makes
available mechanisms for setting the properties which formatter objects
manage and inserting data into the output.

* Menu:

* The Formatter Interface:: 
* Formatter Implementations:: 
* The Writer Interface:: 
* Writer Implementations:: 


File: python.info,  Node: The Formatter Interface,  Next: Formatter Implementations,  Up: formatter --- Generic output formatting

5.33.1.1 The Formatter Interface
................................

Interfaces to create formatters are dependent on the specific formatter
class being instantiated.  The interfaces described below are the
required interfaces which all formatters must support once initialized.

One data element is defined at the module level:

 -- Data: formatter.AS_IS

     Value which can be used in the font specification passed to the
     ‘push_font()’ method described below, or as the new value to any
     other ‘push_property()’ method.  Pushing the ‘AS_IS’ value allows
     the corresponding ‘pop_property()’ method to be called without
     having to track whether the property was changed.

The following attributes are defined for formatter instance objects:

 -- Attribute: formatter.writer

     The writer instance with which the formatter interacts.

 -- Method: formatter.end_paragraph (blanklines)

     Close any open paragraphs and insert at least `blanklines' before
     the next paragraph.

 -- Method: formatter.add_line_break ()

     Add a hard line break if one does not already exist.  This does not
     break the logical paragraph.

 -- Method: formatter.add_hor_rule (*args, **kw)

     Insert a horizontal rule in the output.  A hard break is inserted
     if there is data in the current paragraph, but the logical
     paragraph is not broken.  The arguments and keywords are passed on
     to the writer’s ‘send_line_break()’ method.

 -- Method: formatter.add_flowing_data (data)

     Provide data which should be formatted with collapsed whitespace.
     Whitespace from preceding and successive calls to *note
     add_flowing_data(): 3106. is considered as well when the whitespace
     collapse is performed.  The data which is passed to this method is
     expected to be word-wrapped by the output device.  Note that any
     word-wrapping still must be performed by the writer object due to
     the need to rely on device and font information.

 -- Method: formatter.add_literal_data (data)

     Provide data which should be passed to the writer unchanged.
     Whitespace, including newline and tab characters, are considered
     legal in the value of `data'.

 -- Method: formatter.add_label_data (format, counter)

     Insert a label which should be placed to the left of the current
     left margin.  This should be used for constructing bulleted or
     numbered lists.  If the `format' value is a string, it is
     interpreted as a format specification for `counter', which should
     be an integer.  The result of this formatting becomes the value of
     the label; if `format' is not a string it is used as the label
     value directly.  The label value is passed as the only argument to
     the writer’s ‘send_label_data()’ method.  Interpretation of
     non-string label values is dependent on the associated writer.

     Format specifications are strings which, in combination with a
     counter value, are used to compute label values.  Each character in
     the format string is copied to the label value, with some
     characters recognized to indicate a transform on the counter value.
     Specifically, the character ‘'1'’ represents the counter value
     formatter as an Arabic number, the characters ‘'A'’ and ‘'a'’
     represent alphabetic representations of the counter value in upper
     and lower case, respectively, and ‘'I'’ and ‘'i'’ represent the
     counter value in Roman numerals, in upper and lower case.  Note
     that the alphabetic and roman transforms require that the counter
     value be greater than zero.

 -- Method: formatter.flush_softspace ()

     Send any pending whitespace buffered from a previous call to *note
     add_flowing_data(): 3106. to the associated writer object.  This
     should be called before any direct manipulation of the writer
     object.

 -- Method: formatter.push_alignment (align)

     Push a new alignment setting onto the alignment stack.  This may be
     *note AS_IS: 3101. if no change is desired.  If the alignment value
     is changed from the previous setting, the writer’s
     ‘new_alignment()’ method is called with the `align' value.

 -- Method: formatter.pop_alignment ()

     Restore the previous alignment.

 -- Method: formatter.push_font ((size, italic, bold, teletype))

     Change some or all font properties of the writer object.
     Properties which are not set to *note AS_IS: 3101. are set to the
     values passed in while others are maintained at their current
     settings.  The writer’s ‘new_font()’ method is called with the
     fully resolved font specification.

 -- Method: formatter.pop_font ()

     Restore the previous font.

 -- Method: formatter.push_margin (margin)

     Increase the number of left margin indentations by one, associating
     the logical tag `margin' with the new indentation.  The initial
     margin level is ‘0’.  Changed values of the logical tag must be
     true values; false values other than *note AS_IS: 3101. are not
     sufficient to change the margin.

 -- Method: formatter.pop_margin ()

     Restore the previous margin.

 -- Method: formatter.push_style (*styles)

     Push any number of arbitrary style specifications.  All styles are
     pushed onto the styles stack in order.  A tuple representing the
     entire stack, including *note AS_IS: 3101. values, is passed to the
     writer’s ‘new_styles()’ method.

 -- Method: formatter.pop_style (n=1)

     Pop the last `n' style specifications passed to *note push_style():
     3110.  A tuple representing the revised stack, including *note
     AS_IS: 3101. values, is passed to the writer’s ‘new_styles()’
     method.

 -- Method: formatter.set_spacing (spacing)

     Set the spacing style for the writer.

 -- Method: formatter.assert_line_data (flag=1)

     Inform the formatter that data has been added to the current
     paragraph out-of-band.  This should be used when the writer has
     been manipulated directly.  The optional `flag' argument can be set
     to false if the writer manipulations produced a hard line break at
     the end of the output.


File: python.info,  Node: Formatter Implementations,  Next: The Writer Interface,  Prev: The Formatter Interface,  Up: formatter --- Generic output formatting

5.33.1.2 Formatter Implementations
..................................

Two implementations of formatter objects are provided by this module.
Most applications may use one of these classes without modification or
subclassing.

 -- Class: formatter.NullFormatter (writer=None)

     A formatter which does nothing.  If `writer' is omitted, a *note
     NullWriter: 3117. instance is created.  No methods of the writer
     are called by *note NullFormatter: 3116. instances.
     Implementations should inherit from this class if implementing a
     writer interface but don’t need to inherit any implementation.

 -- Class: formatter.AbstractFormatter (writer)

     The standard formatter.  This implementation has demonstrated wide
     applicability to many writers, and may be used directly in most
     circumstances.  It has been used to implement a full-featured World
     Wide Web browser.


File: python.info,  Node: The Writer Interface,  Next: Writer Implementations,  Prev: Formatter Implementations,  Up: formatter --- Generic output formatting

5.33.1.3 The Writer Interface
.............................

Interfaces to create writers are dependent on the specific writer class
being instantiated.  The interfaces described below are the required
interfaces which all writers must support once initialized.  Note that
while most applications can use the *note AbstractFormatter: 3118. class
as a formatter, the writer must typically be provided by the
application.

 -- Method: writer.flush ()

     Flush any buffered output or device control events.

 -- Method: writer.new_alignment (align)

     Set the alignment style.  The `align' value can be any object, but
     by convention is a string or ‘None’, where ‘None’ indicates that
     the writer’s "preferred" alignment should be used.  Conventional
     `align' values are ‘'left'’, ‘'center'’, ‘'right'’, and
     ‘'justify'’.

 -- Method: writer.new_font (font)

     Set the font style.  The value of `font' will be ‘None’, indicating
     that the device’s default font should be used, or a tuple of the
     form ‘(size, italic, bold, teletype)’.  Size will be a string
     indicating the size of font that should be used; specific strings
     and their interpretation must be defined by the application.  The
     `italic', `bold', and `teletype' values are Boolean values
     specifying which of those font attributes should be used.

 -- Method: writer.new_margin (margin, level)

     Set the margin level to the integer `level' and the logical tag to
     `margin'.  Interpretation of the logical tag is at the writer’s
     discretion; the only restriction on the value of the logical tag is
     that it not be a false value for non-zero values of `level'.

 -- Method: writer.new_spacing (spacing)

     Set the spacing style to `spacing'.

 -- Method: writer.new_styles (styles)

     Set additional styles.  The `styles' value is a tuple of arbitrary
     values; the value *note AS_IS: 3101. should be ignored.  The
     `styles' tuple may be interpreted either as a set or as a stack
     depending on the requirements of the application and writer
     implementation.

 -- Method: writer.send_line_break ()

     Break the current line.

 -- Method: writer.send_paragraph (blankline)

     Produce a paragraph separation of at least `blankline' blank lines,
     or the equivalent.  The `blankline' value will be an integer.  Note
     that the implementation will receive a call to *note
     send_line_break(): 3121. before this call if a line break is
     needed; this method should not include ending the last line of the
     paragraph.  It is only responsible for vertical spacing between
     paragraphs.

 -- Method: writer.send_hor_rule (*args, **kw)

     Display a horizontal rule on the output device.  The arguments to
     this method are entirely application- and writer-specific, and
     should be interpreted with care.  The method implementation may
     assume that a line break has already been issued via *note
     send_line_break(): 3121.

 -- Method: writer.send_flowing_data (data)

     Output character data which may be word-wrapped and re-flowed as
     needed.  Within any sequence of calls to this method, the writer
     may assume that spans of multiple whitespace characters have been
     collapsed to single space characters.

 -- Method: writer.send_literal_data (data)

     Output character data which has already been formatted for display.
     Generally, this should be interpreted to mean that line breaks
     indicated by newline characters should be preserved and no new line
     breaks should be introduced.  The data may contain embedded newline
     and tab characters, unlike data provided to the
     ‘send_formatted_data()’ interface.

 -- Method: writer.send_label_data (data)

     Set `data' to the left of the current left margin, if possible.
     The value of `data' is not restricted; treatment of non-string
     values is entirely application- and writer-dependent.  This method
     will only be called at the beginning of a line.


File: python.info,  Node: Writer Implementations,  Prev: The Writer Interface,  Up: formatter --- Generic output formatting

5.33.1.4 Writer Implementations
...............................

Three implementations of the writer object interface are provided as
examples by this module.  Most applications will need to derive new
writer classes from the *note NullWriter: 3117. class.

 -- Class: formatter.NullWriter

     A writer which only provides the interface definition; no actions
     are taken on any methods.  This should be the base class for all
     writers which do not need to inherit any implementation methods.

 -- Class: formatter.AbstractWriter

     A writer which can be used in debugging formatters, but not much
     else.  Each method simply announces itself by printing its name and
     arguments on standard output.

 -- Class: formatter.DumbWriter (file=None, maxcol=72)

     Simple writer class which writes output on the *note file object:
     78b. passed in as `file' or, if `file' is omitted, on standard
     output.  The output is simply word-wrapped to the number of columns
     specified by `maxcol'.  This class is suitable for reflowing a
     sequence of paragraphs.


File: python.info,  Node: MS Windows Specific Services,  Next: Unix Specific Services,  Prev: Miscellaneous Services,  Up: The Python Standard Library

5.34 MS Windows Specific Services
=================================

This chapter describes modules that are only available on MS Windows
platforms.

* Menu:

* msilib: msilib --- Read and write Microsoft Installer files. Read and write Microsoft Installer files
* msvcrt: msvcrt -- Useful routines from the MS VC++ runtime. Useful routines from the MS VC++ runtime
* winreg: winreg -- Windows registry access. Windows registry access
* winsound: winsound --- Sound-playing interface for Windows. Sound-playing interface for Windows


File: python.info,  Node: msilib --- Read and write Microsoft Installer files,  Next: msvcrt -- Useful routines from the MS VC++ runtime,  Up: MS Windows Specific Services

5.34.1 ‘msilib’ — Read and write Microsoft Installer files
----------------------------------------------------------

The *note msilib: b4. supports the creation of Microsoft Installer
(‘.msi’) files.  Because these files often contain an embedded "cabinet"
file (‘.cab’), it also exposes an API to create CAB files.  Support for
reading ‘.cab’ files is currently not implemented; read support for the
‘.msi’ database is possible.

This package aims to provide complete access to all tables in an ‘.msi’
file, therefore, it is a fairly low-level API. Two primary applications
of this package are the *note distutils: 37. command ‘bdist_msi’, and
the creation of Python installer package itself (although that currently
uses a different version of ‘msilib’).

The package contents can be roughly split into four parts: low-level CAB
routines, low-level MSI routines, higher-level MSI routines, and
standard table structures.

 -- Function: msilib.FCICreate (cabname, files)

     Create a new CAB file named `cabname'.  `files' must be a list of
     tuples, each containing the name of the file on disk, and the name
     of the file inside the CAB file.

     The files are added to the CAB file in the order they appear in the
     list.  All files are added into a single CAB file, using the MSZIP
     compression algorithm.

     Callbacks to Python for the various steps of MSI creation are
     currently not exposed.

 -- Function: msilib.UuidCreate ()

     Return the string representation of a new unique identifier.  This
     wraps the Windows API functions ‘UuidCreate()’ and
     ‘UuidToString()’.

 -- Function: msilib.OpenDatabase (path, persist)

     Return a new database object by calling MsiOpenDatabase.  `path' is
     the file name of the MSI file; `persist' can be one of the
     constants ‘MSIDBOPEN_CREATEDIRECT’, ‘MSIDBOPEN_CREATE’,
     ‘MSIDBOPEN_DIRECT’, ‘MSIDBOPEN_READONLY’, or ‘MSIDBOPEN_TRANSACT’,
     and may include the flag ‘MSIDBOPEN_PATCHFILE’.  See the Microsoft
     documentation for the meaning of these flags; depending on the
     flags, an existing database is opened, or a new one created.

 -- Function: msilib.CreateRecord (count)

     Return a new record object by calling ‘MSICreateRecord()’.  `count'
     is the number of fields of the record.

 -- Function: msilib.init_database (name, schema, ProductName,
          ProductCode, ProductVersion, Manufacturer)

     Create and return a new database `name', initialize it with
     `schema', and set the properties `ProductName', `ProductCode',
     `ProductVersion', and `Manufacturer'.

     `schema' must be a module object containing ‘tables’ and
     ‘_Validation_records’ attributes; typically, *note msilib.schema:
     3134. should be used.

     The database will contain just the schema and the validation
     records when this function returns.

 -- Function: msilib.add_data (database, table, records)

     Add all `records' to the table named `table' in `database'.

     The `table' argument must be one of the predefined tables in the
     MSI schema, e.g.  ‘'Feature'’, ‘'File'’, ‘'Component'’, ‘'Dialog'’,
     ‘'Control'’, etc.

     `records' should be a list of tuples, each one containing all
     fields of a record according to the schema of the table.  For
     optional fields, ‘None’ can be passed.

     Field values can be ints, strings, or instances of the Binary
     class.

 -- Class: msilib.Binary (filename)

     Represents entries in the Binary table; inserting such an object
     using *note add_data(): 3135. reads the file named `filename' into
     the table.

 -- Function: msilib.add_tables (database, module)

     Add all table content from `module' to `database'.  `module' must
     contain an attribute `tables' listing all tables for which content
     should be added, and one attribute per table that has the actual
     content.

     This is typically used to install the sequence tables.

 -- Function: msilib.add_stream (database, name, path)

     Add the file `path' into the ‘_Stream’ table of `database', with
     the stream name `name'.

 -- Function: msilib.gen_uuid ()

     Return a new UUID, in the format that MSI typically requires (i.e.
     in curly braces, and with all hexdigits in upper-case).

See also
........

FCICreateFile(1) UuidCreate(2) UuidToString(3)

* Menu:

* Database Objects:: 
* View Objects:: 
* Summary Information Objects:: 
* Record Objects:: 
* Errors:: 
* CAB Objects:: 
* Directory Objects:: 
* Features: Features<3>. 
* GUI classes:: 
* Precomputed tables:: 

   ---------- Footnotes ----------

   (1) 
https://msdn.microsoft.com/library?url=/library/en-us/devnotes/winprog/fcicreate.asp

   (2) 
https://msdn.microsoft.com/library?url=/library/en-us/rpc/rpc/uuidcreate.asp

   (3) 
https://msdn.microsoft.com/library?url=/library/en-us/rpc/rpc/uuidtostring.asp


File: python.info,  Node: Database Objects,  Next: View Objects,  Up: msilib --- Read and write Microsoft Installer files

5.34.1.1 Database Objects
.........................

 -- Method: Database.OpenView (sql)

     Return a view object, by calling ‘MSIDatabaseOpenView()’.  `sql' is
     the SQL statement to execute.

 -- Method: Database.Commit ()

     Commit the changes pending in the current transaction, by calling
     ‘MSIDatabaseCommit()’.

 -- Method: Database.GetSummaryInformation (count)

     Return a new summary information object, by calling
     ‘MsiGetSummaryInformation()’.  `count' is the maximum number of
     updated values.

See also
........

MSIDatabaseOpenView(1) MSIDatabaseCommit(2) MSIGetSummaryInformation(3)

   ---------- Footnotes ----------

   (1) 
https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/msidatabaseopenview.asp

   (2) 
https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/msidatabasecommit.asp

   (3) 
https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/msigetsummaryinformation.asp


File: python.info,  Node: View Objects,  Next: Summary Information Objects,  Prev: Database Objects,  Up: msilib --- Read and write Microsoft Installer files

5.34.1.2 View Objects
.....................

 -- Method: View.Execute (params)

     Execute the SQL query of the view, through ‘MSIViewExecute()’.  If
     `params' is not ‘None’, it is a record describing actual values of
     the parameter tokens in the query.

 -- Method: View.GetColumnInfo (kind)

     Return a record describing the columns of the view, through calling
     ‘MsiViewGetColumnInfo()’.  `kind' can be either ‘MSICOLINFO_NAMES’
     or ‘MSICOLINFO_TYPES’.

 -- Method: View.Fetch ()

     Return a result record of the query, through calling
     ‘MsiViewFetch()’.

 -- Method: View.Modify (kind, data)

     Modify the view, by calling ‘MsiViewModify()’.  `kind' can be one
     of ‘MSIMODIFY_SEEK’, ‘MSIMODIFY_REFRESH’, ‘MSIMODIFY_INSERT’,
     ‘MSIMODIFY_UPDATE’, ‘MSIMODIFY_ASSIGN’, ‘MSIMODIFY_REPLACE’,
     ‘MSIMODIFY_MERGE’, ‘MSIMODIFY_DELETE’,
     ‘MSIMODIFY_INSERT_TEMPORARY’, ‘MSIMODIFY_VALIDATE’,
     ‘MSIMODIFY_VALIDATE_NEW’, ‘MSIMODIFY_VALIDATE_FIELD’, or
     ‘MSIMODIFY_VALIDATE_DELETE’.

     `data' must be a record describing the new data.

 -- Method: View.Close ()

     Close the view, through ‘MsiViewClose()’.

See also
........

MsiViewExecute(1) MSIViewGetColumnInfo(2) MsiViewFetch(3)
MsiViewModify(4) MsiViewClose(5)

   ---------- Footnotes ----------

   (1) 
https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/msiviewexecute.asp

   (2) 
https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/msiviewgetcolumninfo.asp

   (3) 
https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/msiviewfetch.asp

   (4) 
https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/msiviewmodify.asp

   (5) 
https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/msiviewclose.asp


File: python.info,  Node: Summary Information Objects,  Next: Record Objects,  Prev: View Objects,  Up: msilib --- Read and write Microsoft Installer files

5.34.1.3 Summary Information Objects
....................................

 -- Method: SummaryInformation.GetProperty (field)

     Return a property of the summary, through
     ‘MsiSummaryInfoGetProperty()’.  `field' is the name of the
     property, and can be one of the constants ‘PID_CODEPAGE’,
     ‘PID_TITLE’, ‘PID_SUBJECT’, ‘PID_AUTHOR’, ‘PID_KEYWORDS’,
     ‘PID_COMMENTS’, ‘PID_TEMPLATE’, ‘PID_LASTAUTHOR’, ‘PID_REVNUMBER’,
     ‘PID_LASTPRINTED’, ‘PID_CREATE_DTM’, ‘PID_LASTSAVE_DTM’,
     ‘PID_PAGECOUNT’, ‘PID_WORDCOUNT’, ‘PID_CHARCOUNT’, ‘PID_APPNAME’,
     or ‘PID_SECURITY’.

 -- Method: SummaryInformation.GetPropertyCount ()

     Return the number of summary properties, through
     ‘MsiSummaryInfoGetPropertyCount()’.

 -- Method: SummaryInformation.SetProperty (field, value)

     Set a property through ‘MsiSummaryInfoSetProperty()’.  `field' can
     have the same values as in *note GetProperty(): 3148, `value' is
     the new value of the property.  Possible value types are integer
     and string.

 -- Method: SummaryInformation.Persist ()

     Write the modified properties to the summary information stream,
     using ‘MsiSummaryInfoPersist()’.

See also
........

MsiSummaryInfoGetProperty(1) MsiSummaryInfoGetPropertyCount(2)
MsiSummaryInfoSetProperty(3) MsiSummaryInfoPersist(4)

   ---------- Footnotes ----------

   (1) 
https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/msisummaryinfogetproperty.asp

   (2) 
https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/msisummaryinfogetpropertycount.asp

   (3) 
https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/msisummaryinfosetproperty.asp

   (4) 
https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/msisummaryinfopersist.asp


File: python.info,  Node: Record Objects,  Next: Errors,  Prev: Summary Information Objects,  Up: msilib --- Read and write Microsoft Installer files

5.34.1.4 Record Objects
.......................

 -- Method: Record.GetFieldCount ()

     Return the number of fields of the record, through
     ‘MsiRecordGetFieldCount()’.

 -- Method: Record.GetInteger (field)

     Return the value of `field' as an integer where possible.  `field'
     must be an integer.

 -- Method: Record.GetString (field)

     Return the value of `field' as a string where possible.  `field'
     must be an integer.

 -- Method: Record.SetString (field, value)

     Set `field' to `value' through ‘MsiRecordSetString()’.  `field'
     must be an integer; `value' a string.

 -- Method: Record.SetStream (field, value)

     Set `field' to the contents of the file named `value', through
     ‘MsiRecordSetStream()’.  `field' must be an integer; `value' a
     string.

 -- Method: Record.SetInteger (field, value)

     Set `field' to `value' through ‘MsiRecordSetInteger()’.  Both
     `field' and `value' must be an integer.

 -- Method: Record.ClearData ()

     Set all fields of the record to 0, through ‘MsiRecordClearData()’.

See also
........

MsiRecordGetFieldCount(1) MsiRecordSetString(2) MsiRecordSetStream(3)
MsiRecordSetInteger(4) MsiRecordClear(5)

   ---------- Footnotes ----------

   (1) 
https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/msirecordgetfieldcount.asp

   (2) 
https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/msirecordsetstring.asp

   (3) 
https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/msirecordsetstream.asp

   (4) 
https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/msirecordsetinteger.asp

   (5) 
https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/msirecordclear.asp


File: python.info,  Node: Errors,  Next: CAB Objects,  Prev: Record Objects,  Up: msilib --- Read and write Microsoft Installer files

5.34.1.5 Errors
...............

All wrappers around MSI functions raise ‘MsiError’; the string inside
the exception will contain more detail.


File: python.info,  Node: CAB Objects,  Next: Directory Objects,  Prev: Errors,  Up: msilib --- Read and write Microsoft Installer files

5.34.1.6 CAB Objects
....................

 -- Class: msilib.CAB (name)

     The class *note CAB: 3159. represents a CAB file.  During MSI
     construction, files will be added simultaneously to the ‘Files’
     table, and to a CAB file.  Then, when all files have been added,
     the CAB file can be written, then added to the MSI file.

     `name' is the name of the CAB file in the MSI file.

      -- Method: append (full, file, logical)

          Add the file with the pathname `full' to the CAB file, under
          the name `logical'.  If there is already a file named
          `logical', a new file name is created.

          Return the index of the file in the CAB file, and the new name
          of the file inside the CAB file.

      -- Method: commit (database)

          Generate a CAB file, add it as a stream to the MSI file, put
          it into the ‘Media’ table, and remove the generated file from
          the disk.


File: python.info,  Node: Directory Objects,  Next: Features<3>,  Prev: CAB Objects,  Up: msilib --- Read and write Microsoft Installer files

5.34.1.7 Directory Objects
..........................

 -- Class: msilib.Directory (database, cab, basedir, physical, logical,
          default[, componentflags])

     Create a new directory in the Directory table.  There is a current
     component at each point in time for the directory, which is either
     explicitly created through *note start_component(): 315f, or
     implicitly when files are added for the first time.  Files are
     added into the current component, and into the cab file.  To create
     a directory, a base directory object needs to be specified (can be
     ‘None’), the path to the physical directory, and a logical
     directory name.  `default' specifies the DefaultDir slot in the
     directory table.  `componentflags' specifies the default flags that
     new components get.

      -- Method: start_component (component=None, feature=None,
               flags=None, keyfile=None, uuid=None)

          Add an entry to the Component table, and make this component
          the current component for this directory.  If no component
          name is given, the directory name is used.  If no `feature' is
          given, the current feature is used.  If no `flags' are given,
          the directory’s default flags are used.  If no `keyfile' is
          given, the KeyPath is left null in the Component table.

      -- Method: add_file (file, src=None, version=None, language=None)

          Add a file to the current component of the directory, starting
          a new one if there is no current component.  By default, the
          file name in the source and the file table will be identical.
          If the `src' file is specified, it is interpreted relative to
          the current directory.  Optionally, a `version' and a
          `language' can be specified for the entry in the File table.

      -- Method: glob (pattern, exclude=None)

          Add a list of files to the current component as specified in
          the glob pattern.  Individual files can be excluded in the
          `exclude' list.

      -- Method: remove_pyc ()

          Remove ‘.pyc’/‘.pyo’ files on uninstall.

See also
........

Directory Table(1) File Table(2) Component Table(3) FeatureComponents
Table(4)

   ---------- Footnotes ----------

   (1) 
https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/directory_table.asp

   (2) 
https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/file_table.asp

   (3) 
https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/component_table.asp

   (4) 
https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/featurecomponents_table.asp


File: python.info,  Node: Features<3>,  Next: GUI classes,  Prev: Directory Objects,  Up: msilib --- Read and write Microsoft Installer files

5.34.1.8 Features
.................

 -- Class: msilib.Feature (db, id, title, desc, display, level=1,
          parent=None, directory=None, attributes=0)

     Add a new record to the ‘Feature’ table, using the values `id',
     `parent.id', `title', `desc', `display', `level', `directory', and
     `attributes'.  The resulting feature object can be passed to the
     ‘start_component()’ method of *note Directory: 315e.

      -- Method: set_current ()

          Make this feature the current feature of *note msilib: b4.
          New components are automatically added to the default feature,
          unless a feature is explicitly specified.

See also
........

Feature Table(1)

   ---------- Footnotes ----------

   (1) 
https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/feature_table.asp


File: python.info,  Node: GUI classes,  Next: Precomputed tables,  Prev: Features<3>,  Up: msilib --- Read and write Microsoft Installer files

5.34.1.9 GUI classes
....................

*note msilib: b4. provides several classes that wrap the GUI tables in
an MSI database.  However, no standard user interface is provided; use
*note bdist_msi: 3f. to create MSI files with a user-interface for
installing Python packages.

 -- Class: msilib.Control (dlg, name)

     Base class of the dialog controls.  `dlg' is the dialog object the
     control belongs to, and `name' is the control’s name.

      -- Method: event (event, argument, condition=1, ordering=None)

          Make an entry into the ‘ControlEvent’ table for this control.

      -- Method: mapping (event, attribute)

          Make an entry into the ‘EventMapping’ table for this control.

      -- Method: condition (action, condition)

          Make an entry into the ‘ControlCondition’ table for this
          control.

 -- Class: msilib.RadioButtonGroup (dlg, name, property)

     Create a radio button control named `name'.  `property' is the
     installer property that gets set when a radio button is selected.

      -- Method: add (name, x, y, width, height, text, value=None)

          Add a radio button named `name' to the group, at the
          coordinates `x', `y', `width', `height', and with the label
          `text'.  If `value' is ‘None’, it defaults to `name'.

 -- Class: msilib.Dialog (db, name, x, y, w, h, attr, title, first,
          default, cancel)

     Return a new *note Dialog: 316f. object.  An entry in the ‘Dialog’
     table is made, with the specified coordinates, dialog attributes,
     title, name of the first, default, and cancel controls.

      -- Method: control (name, type, x, y, width, height, attributes,
               property, text, control_next, help)

          Return a new *note Control: 3169. object.  An entry in the
          ‘Control’ table is made with the specified parameters.

          This is a generic method; for specific types, specialized
          methods are provided.

      -- Method: text (name, x, y, width, height, attributes, text)

          Add and return a ‘Text’ control.

      -- Method: bitmap (name, x, y, width, height, text)

          Add and return a ‘Bitmap’ control.

      -- Method: line (name, x, y, width, height)

          Add and return a ‘Line’ control.

      -- Method: pushbutton (name, x, y, width, height, attributes,
               text, next_control)

          Add and return a ‘PushButton’ control.

      -- Method: radiogroup (name, x, y, width, height, attributes,
               property, text, next_control)

          Add and return a ‘RadioButtonGroup’ control.

      -- Method: checkbox (name, x, y, width, height, attributes,
               property, text, next_control)

          Add and return a ‘CheckBox’ control.

See also
........

Dialog Table(1) Control Table(2) Control Types(3) ControlCondition
Table(4) ControlEvent Table(5) EventMapping Table(6) RadioButton
Table(7)

   ---------- Footnotes ----------

   (1) 
https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/dialog_table.asp

   (2) 
https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/control_table.asp

   (3) 
https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/controls.asp

   (4) 
https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/controlcondition_table.asp

   (5) 
https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/controlevent_table.asp

   (6) 
https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/eventmapping_table.asp

   (7) 
https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/radiobutton_table.asp


File: python.info,  Node: Precomputed tables,  Prev: GUI classes,  Up: msilib --- Read and write Microsoft Installer files

5.34.1.10 Precomputed tables
............................

*note msilib: b4. provides a few subpackages that contain only schema
and table definitions.  Currently, these definitions are based on MSI
version 2.0.

 -- Data: msilib.schema

     This is the standard MSI schema for MSI 2.0, with the `tables'
     variable providing a list of table definitions, and
     `_Validation_records' providing the data for MSI validation.

 -- Data: msilib.sequence

     This module contains table contents for the standard sequence
     tables: `AdminExecuteSequence', `AdminUISequence',
     `AdvtExecuteSequence', `InstallExecuteSequence', and
     `InstallUISequence'.

 -- Data: msilib.text

     This module contains definitions for the UIText and ActionText
     tables, for the standard installer actions.


File: python.info,  Node: msvcrt -- Useful routines from the MS VC++ runtime,  Next: winreg -- Windows registry access,  Prev: msilib --- Read and write Microsoft Installer files,  Up: MS Windows Specific Services

5.34.2 ‘msvcrt’ – Useful routines from the MS VC++ runtime
----------------------------------------------------------

These functions provide access to some useful capabilities on Windows
platforms.  Some higher-level modules use these functions to build the
Windows implementations of their services.  For example, the *note
getpass: 87. module uses this in the implementation of the *note
getpass(): 87. function.

Further documentation on these functions can be found in the Platform
API documentation.

The module implements both the normal and wide char variants of the
console I/O api.  The normal API deals only with ASCII characters and is
of limited use for internationalized applications.  The wide char API
should be used where ever possible.

Changed in version 3.3: Operations in this module now raise *note
OSError: 4b6. where *note IOError: 5b0. was raised.

* Menu:

* File Operations:: 
* Console I/O:: 
* Other Functions:: 


File: python.info,  Node: File Operations,  Next: Console I/O,  Up: msvcrt -- Useful routines from the MS VC++ runtime

5.34.2.1 File Operations
........................

 -- Function: msvcrt.locking (fd, mode, nbytes)

     Lock part of a file based on file descriptor `fd' from the C
     runtime.  Raises *note OSError: 4b6. on failure.  The locked region
     of the file extends from the current file position for `nbytes'
     bytes, and may continue beyond the end of the file.  `mode' must be
     one of the ‘LK_*’ constants listed below.  Multiple regions in a
     file may be locked at the same time, but may not overlap.  Adjacent
     regions are not merged; they must be unlocked individually.

 -- Data: msvcrt.LK_LOCK
 -- Data: msvcrt.LK_RLCK

     Locks the specified bytes.  If the bytes cannot be locked, the
     program immediately tries again after 1 second.  If, after 10
     attempts, the bytes cannot be locked, *note OSError: 4b6. is
     raised.

 -- Data: msvcrt.LK_NBLCK
 -- Data: msvcrt.LK_NBRLCK

     Locks the specified bytes.  If the bytes cannot be locked, *note
     OSError: 4b6. is raised.

 -- Data: msvcrt.LK_UNLCK

     Unlocks the specified bytes, which must have been previously
     locked.

 -- Function: msvcrt.setmode (fd, flags)

     Set the line-end translation mode for the file descriptor `fd'.  To
     set it to text mode, `flags' should be *note os.O_TEXT: 189a.; for
     binary, it should be *note os.O_BINARY: 188b.

 -- Function: msvcrt.open_osfhandle (handle, flags)

     Create a C runtime file descriptor from the file handle `handle'.
     The `flags' parameter should be a bitwise OR of *note os.O_APPEND:
     188d, *note os.O_RDONLY: 1889, and *note os.O_TEXT: 189a.  The
     returned file descriptor may be used as a parameter to *note
     os.fdopen(): df6. to create a file object.

 -- Function: msvcrt.get_osfhandle (fd)

     Return the file handle for the file descriptor `fd'.  Raises *note
     OSError: 4b6. if `fd' is not recognized.


File: python.info,  Node: Console I/O,  Next: Other Functions,  Prev: File Operations,  Up: msvcrt -- Useful routines from the MS VC++ runtime

5.34.2.2 Console I/O
....................

 -- Function: msvcrt.kbhit ()

     Return true if a keypress is waiting to be read.

 -- Function: msvcrt.getch ()

     Read a keypress and return the resulting character as a byte
     string.  Nothing is echoed to the console.  This call will block if
     a keypress is not already available, but will not wait for ‘Enter’
     to be pressed.  If the pressed key was a special function key, this
     will return ‘'\000'’ or ‘'\xe0'’; the next call will return the
     keycode.  The ‘Control-C’ keypress cannot be read with this
     function.

 -- Function: msvcrt.getwch ()

     Wide char variant of *note getch(): 318b, returning a Unicode
     value.

 -- Function: msvcrt.getche ()

     Similar to *note getch(): 318b, but the keypress will be echoed if
     it represents a printable character.

 -- Function: msvcrt.getwche ()

     Wide char variant of *note getche(): 318d, returning a Unicode
     value.

 -- Function: msvcrt.putch (char)

     Print the byte string `char' to the console without buffering.

 -- Function: msvcrt.putwch (unicode_char)

     Wide char variant of *note putch(): 318f, accepting a Unicode
     value.

 -- Function: msvcrt.ungetch (char)

     Cause the byte string `char' to be "pushed back" into the console
     buffer; it will be the next character read by *note getch(): 318b.
     or *note getche(): 318d.

 -- Function: msvcrt.ungetwch (unicode_char)

     Wide char variant of *note ungetch(): 3191, accepting a Unicode
     value.


File: python.info,  Node: Other Functions,  Prev: Console I/O,  Up: msvcrt -- Useful routines from the MS VC++ runtime

5.34.2.3 Other Functions
........................

 -- Function: msvcrt.heapmin ()

     Force the ‘malloc()’ heap to clean itself up and return unused
     blocks to the operating system.  On failure, this raises *note
     OSError: 4b6.


File: python.info,  Node: winreg -- Windows registry access,  Next: winsound --- Sound-playing interface for Windows,  Prev: msvcrt -- Useful routines from the MS VC++ runtime,  Up: MS Windows Specific Services

5.34.3 ‘winreg’ – Windows registry access
-----------------------------------------

These functions expose the Windows registry API to Python.  Instead of
using an integer as the registry handle, a *note handle object: 3198. is
used to ensure that the handles are closed correctly, even if the
programmer neglects to explicitly close them.

Changed in version 3.3: Several functions in this module used to raise a
*note WindowsError: 5b2, which is now an alias of *note OSError: 4b6.

* Menu:

* Functions: Functions<9>. 
* Constants: Constants<9>. 
* Registry Handle Objects:: 


File: python.info,  Node: Functions<9>,  Next: Constants<9>,  Up: winreg -- Windows registry access

5.34.3.1 Functions
..................

This module offers the following functions:

 -- Function: winreg.CloseKey (hkey)

     Closes a previously opened registry key.  The `hkey' argument
     specifies a previously opened key.

          Note: If `hkey' is not closed using this method (or via *note
          hkey.Close(): 319d.), it is closed when the `hkey' object is
          destroyed by Python.

 -- Function: winreg.ConnectRegistry (computer_name, key)

     Establishes a connection to a predefined registry handle on another
     computer, and returns a *note handle object: 3198.

     `computer_name' is the name of the remote computer, of the form
     ‘r"\\computername"’.  If ‘None’, the local computer is used.

     `key' is the predefined handle to connect to.

     The return value is the handle of the opened key.  If the function
     fails, an *note OSError: 4b6. exception is raised.

     Changed in version 3.3: See *note above: 3199.

 -- Function: winreg.CreateKey (key, sub_key)

     Creates or opens the specified key, returning a *note handle
     object: 3198.

     `key' is an already open key, or one of the predefined *note HKEY_*
     constants: 31a0.

     `sub_key' is a string that names the key this method opens or
     creates.

     If `key' is one of the predefined keys, `sub_key' may be ‘None’.
     In that case, the handle returned is the same key handle passed in
     to the function.

     If the key already exists, this function opens the existing key.

     The return value is the handle of the opened key.  If the function
     fails, an *note OSError: 4b6. exception is raised.

     Changed in version 3.3: See *note above: 3199.

 -- Function: winreg.CreateKeyEx (key, sub_key, reserved=0,
          access=KEY_WRITE)

     Creates or opens the specified key, returning a *note handle
     object: 3198.

     `key' is an already open key, or one of the predefined *note HKEY_*
     constants: 31a0.

     `sub_key' is a string that names the key this method opens or
     creates.

     `reserved' is a reserved integer, and must be zero.  The default is
     zero.

     `access' is an integer that specifies an access mask that describes
     the desired security access for the key.  Default is *note
     KEY_WRITE: 31a2.  See *note Access Rights: 31a3. for other allowed
     values.

     If `key' is one of the predefined keys, `sub_key' may be ‘None’.
     In that case, the handle returned is the same key handle passed in
     to the function.

     If the key already exists, this function opens the existing key.

     The return value is the handle of the opened key.  If the function
     fails, an *note OSError: 4b6. exception is raised.

     New in version 3.2.

     Changed in version 3.3: See *note above: 3199.

 -- Function: winreg.DeleteKey (key, sub_key)

     Deletes the specified key.

     `key' is an already open key, or one of the predefined *note HKEY_*
     constants: 31a0.

     `sub_key' is a string that must be a subkey of the key identified
     by the `key' parameter.  This value must not be ‘None’, and the key
     may not have subkeys.

     `This method can not delete keys with subkeys.'

     If the method succeeds, the entire key, including all of its
     values, is removed.  If the method fails, an *note OSError: 4b6.
     exception is raised.

     Changed in version 3.3: See *note above: 3199.

 -- Function: winreg.DeleteKeyEx (key, sub_key, access=KEY_WOW64_64KEY,
          reserved=0)

     Deletes the specified key.

          Note: The *note DeleteKeyEx(): 31a5. function is implemented
          with the RegDeleteKeyEx Windows API function, which is
          specific to 64-bit versions of Windows.  See the
          RegDeleteKeyEx documentation(1).

     `key' is an already open key, or one of the predefined *note HKEY_*
     constants: 31a0.

     `sub_key' is a string that must be a subkey of the key identified
     by the `key' parameter.  This value must not be ‘None’, and the key
     may not have subkeys.

     `reserved' is a reserved integer, and must be zero.  The default is
     zero.

     `access' is an integer that specifies an access mask that describes
     the desired security access for the key.  Default is *note
     KEY_WOW64_64KEY: 31a6.  See *note Access Rights: 31a3. for other
     allowed values.

     `This method can not delete keys with subkeys.'

     If the method succeeds, the entire key, including all of its
     values, is removed.  If the method fails, an *note OSError: 4b6.
     exception is raised.

     On unsupported Windows versions, *note NotImplementedError: 569. is
     raised.

     New in version 3.2.

     Changed in version 3.3: See *note above: 3199.

 -- Function: winreg.DeleteValue (key, value)

     Removes a named value from a registry key.

     `key' is an already open key, or one of the predefined *note HKEY_*
     constants: 31a0.

     `value' is a string that identifies the value to remove.

 -- Function: winreg.EnumKey (key, index)

     Enumerates subkeys of an open registry key, returning a string.

     `key' is an already open key, or one of the predefined *note HKEY_*
     constants: 31a0.

     `index' is an integer that identifies the index of the key to
     retrieve.

     The function retrieves the name of one subkey each time it is
     called.  It is typically called repeatedly until an *note OSError:
     4b6. exception is raised, indicating, no more values are available.

     Changed in version 3.3: See *note above: 3199.

 -- Function: winreg.EnumValue (key, index)

     Enumerates values of an open registry key, returning a tuple.

     `key' is an already open key, or one of the predefined *note HKEY_*
     constants: 31a0.

     `index' is an integer that identifies the index of the value to
     retrieve.

     The function retrieves the name of one subkey each time it is
     called.  It is typically called repeatedly, until an *note OSError:
     4b6. exception is raised, indicating no more values.

     The result is a tuple of 3 items:

     Index       Meaning
                 
     -------------------------------------------------------------
                 
     ‘0’         A string that identifies the value name
                 
                 
     ‘1’         An object that holds the value data, and whose
                 type depends on the underlying registry type
                 
                 
     ‘2’         An integer that identifies the type of the
                 value data (see table in docs for
                 *note SetValueEx(): 31aa.)
                 

     Changed in version 3.3: See *note above: 3199.

 -- Function: winreg.ExpandEnvironmentStrings (str)

     Expands environment variable placeholders ‘%NAME%’ in strings like
     *note REG_EXPAND_SZ: 31ac.:

          >>> ExpandEnvironmentStrings('%windir%')
          'C:\\Windows'

 -- Function: winreg.FlushKey (key)

     Writes all the attributes of a key to the registry.

     `key' is an already open key, or one of the predefined *note HKEY_*
     constants: 31a0.

     It is not necessary to call *note FlushKey(): 31ad. to change a
     key.  Registry changes are flushed to disk by the registry using
     its lazy flusher.  Registry changes are also flushed to disk at
     system shutdown.  Unlike *note CloseKey(): 319c, the *note
     FlushKey(): 31ad. method returns only when all the data has been
     written to the registry.  An application should only call *note
     FlushKey(): 31ad. if it requires absolute certainty that registry
     changes are on disk.

          Note: If you don’t know whether a *note FlushKey(): 31ad. call
          is required, it probably isn’t.

 -- Function: winreg.LoadKey (key, sub_key, file_name)

     Creates a subkey under the specified key and stores registration
     information from a specified file into that subkey.

     `key' is a handle returned by *note ConnectRegistry(): 319e. or one
     of the constants *note HKEY_USERS: 31af. or *note
     HKEY_LOCAL_MACHINE: 31b0.

     `sub_key' is a string that identifies the subkey to load.

     `file_name' is the name of the file to load registry data from.
     This file must have been created with the *note SaveKey(): 31b1.
     function.  Under the file allocation table (FAT) file system, the
     filename may not have an extension.

     A call to *note LoadKey(): 31ae. fails if the calling process does
     not have the ‘SE_RESTORE_PRIVILEGE’ privilege.  Note that
     privileges are different from permissions – see the RegLoadKey
     documentation(2) for more details.

     If `key' is a handle returned by *note ConnectRegistry(): 319e,
     then the path specified in `file_name' is relative to the remote
     computer.

 -- Function: winreg.OpenKey (key, sub_key, reserved=0, access=KEY_READ)
 -- Function: winreg.OpenKeyEx (key, sub_key, reserved=0,
          access=KEY_READ)

     Opens the specified key, returning a *note handle object: 3198.

     `key' is an already open key, or one of the predefined *note HKEY_*
     constants: 31a0.

     `sub_key' is a string that identifies the sub_key to open.

     `reserved' is a reserved integer, and must be zero.  The default is
     zero.

     `access' is an integer that specifies an access mask that describes
     the desired security access for the key.  Default is *note
     KEY_READ: 31b4.  See *note Access Rights: 31a3. for other allowed
     values.

     The result is a new handle to the specified key.

     If the function fails, *note OSError: 4b6. is raised.

     Changed in version 3.2: Allow the use of named arguments.

     Changed in version 3.3: See *note above: 3199.

 -- Function: winreg.QueryInfoKey (key)

     Returns information about a key, as a tuple.

     `key' is an already open key, or one of the predefined *note HKEY_*
     constants: 31a0.

     The result is a tuple of 3 items:

     Index       Meaning
                 
     --------------------------------------------------------------
                 
     ‘0’         An integer giving the number of sub keys this
                 key has.
                 
                 
     ‘1’         An integer giving the number of values this key
                 has.
                 
                 
     ‘2’         An integer giving when the key was last
                 modified (if available) as 100’s of nanoseconds
                 since Jan 1, 1601.
                 

 -- Function: winreg.QueryValue (key, sub_key)

     Retrieves the unnamed value for a key, as a string.

     `key' is an already open key, or one of the predefined *note HKEY_*
     constants: 31a0.

     `sub_key' is a string that holds the name of the subkey with which
     the value is associated.  If this parameter is ‘None’ or empty, the
     function retrieves the value set by the *note SetValue(): 31b7.
     method for the key identified by `key'.

     Values in the registry have name, type, and data components.  This
     method retrieves the data for a key’s first value that has a NULL
     name.  But the underlying API call doesn’t return the type, so
     always use *note QueryValueEx(): 31b8. if possible.

 -- Function: winreg.QueryValueEx (key, value_name)

     Retrieves the type and data for a specified value name associated
     with an open registry key.

     `key' is an already open key, or one of the predefined *note HKEY_*
     constants: 31a0.

     `value_name' is a string indicating the value to query.

     The result is a tuple of 2 items:

     Index       Meaning
                 
     ----------------------------------------------------------
                 
     ‘0’         The value of the registry item.
                 
                 
     ‘1’         An integer giving the registry type for
                 this value (see table in docs for
                 *note SetValueEx(): 31aa.)
                 

 -- Function: winreg.SaveKey (key, file_name)

     Saves the specified key, and all its subkeys to the specified file.

     `key' is an already open key, or one of the predefined *note HKEY_*
     constants: 31a0.

     `file_name' is the name of the file to save registry data to.  This
     file cannot already exist.  If this filename includes an extension,
     it cannot be used on file allocation table (FAT) file systems by
     the *note LoadKey(): 31ae. method.

     If `key' represents a key on a remote computer, the path described
     by `file_name' is relative to the remote computer.  The caller of
     this method must possess the ‘SeBackupPrivilege’ security
     privilege.  Note that privileges are different than permissions –
     see the Conflicts Between User Rights and Permissions
     documentation(3) for more details.

     This function passes NULL for `security_attributes' to the API.

 -- Function: winreg.SetValue (key, sub_key, type, value)

     Associates a value with a specified key.

     `key' is an already open key, or one of the predefined *note HKEY_*
     constants: 31a0.

     `sub_key' is a string that names the subkey with which the value is
     associated.

     `type' is an integer that specifies the type of the data.
     Currently this must be *note REG_SZ: 31b9, meaning only strings are
     supported.  Use the *note SetValueEx(): 31aa. function for support
     for other data types.

     `value' is a string that specifies the new value.

     If the key specified by the `sub_key' parameter does not exist, the
     SetValue function creates it.

     Value lengths are limited by available memory.  Long values (more
     than 2048 bytes) should be stored as files with the filenames
     stored in the configuration registry.  This helps the registry
     perform efficiently.

     The key identified by the `key' parameter must have been opened
     with *note KEY_SET_VALUE: 31ba. access.

 -- Function: winreg.SetValueEx (key, value_name, reserved, type, value)

     Stores data in the value field of an open registry key.

     `key' is an already open key, or one of the predefined *note HKEY_*
     constants: 31a0.

     `value_name' is a string that names the subkey with which the value
     is associated.

     `reserved' can be anything – zero is always passed to the API.

     `type' is an integer that specifies the type of the data.  See
     *note Value Types: 31bb. for the available types.

     `value' is a string that specifies the new value.

     This method can also set additional value and type information for
     the specified key.  The key identified by the key parameter must
     have been opened with *note KEY_SET_VALUE: 31ba. access.

     To open the key, use the *note CreateKey(): 319f. or *note
     OpenKey(): 31b2. methods.

     Value lengths are limited by available memory.  Long values (more
     than 2048 bytes) should be stored as files with the filenames
     stored in the configuration registry.  This helps the registry
     perform efficiently.

 -- Function: winreg.DisableReflectionKey (key)

     Disables registry reflection for 32-bit processes running on a
     64-bit operating system.

     `key' is an already open key, or one of the predefined *note HKEY_*
     constants: 31a0.

     Will generally raise *note NotImplemented: 441. if executed on a
     32-bit operating system.

     If the key is not on the reflection list, the function succeeds but
     has no effect.  Disabling reflection for a key does not affect
     reflection of any subkeys.

 -- Function: winreg.EnableReflectionKey (key)

     Restores registry reflection for the specified disabled key.

     `key' is an already open key, or one of the predefined *note HKEY_*
     constants: 31a0.

     Will generally raise *note NotImplemented: 441. if executed on a
     32-bit operating system.

     Restoring reflection for a key does not affect reflection of any
     subkeys.

 -- Function: winreg.QueryReflectionKey (key)

     Determines the reflection state for the specified key.

     `key' is an already open key, or one of the predefined *note HKEY_*
     constants: 31a0.

     Returns ‘True’ if reflection is disabled.

     Will generally raise *note NotImplemented: 441. if executed on a
     32-bit operating system.

   ---------- Footnotes ----------

   (1) https://msdn.microsoft.com/en-us/library/ms724847%28VS.85%29.aspx

   (2) 
https://msdn.microsoft.com/en-us/library/ms724889%28v=VS.85%29.aspx

   (3) 
https://msdn.microsoft.com/en-us/library/ms724878%28v=VS.85%29.aspx


File: python.info,  Node: Constants<9>,  Next: Registry Handle Objects,  Prev: Functions<9>,  Up: winreg -- Windows registry access

5.34.3.2 Constants
..................

The following constants are defined for use in many ‘_winreg’ functions.

* Menu:

* HKEY_* Constants:: 
* Access Rights:: 
* Value Types:: 


File: python.info,  Node: HKEY_* Constants,  Next: Access Rights,  Up: Constants<9>

5.34.3.3 HKEY_* Constants
.........................

 -- Data: winreg.HKEY_CLASSES_ROOT

     Registry entries subordinate to this key define types (or classes)
     of documents and the properties associated with those types.  Shell
     and COM applications use the information stored under this key.

 -- Data: winreg.HKEY_CURRENT_USER

     Registry entries subordinate to this key define the preferences of
     the current user.  These preferences include the settings of
     environment variables, data about program groups, colors, printers,
     network connections, and application preferences.

 -- Data: winreg.HKEY_LOCAL_MACHINE

     Registry entries subordinate to this key define the physical state
     of the computer, including data about the bus type, system memory,
     and installed hardware and software.

 -- Data: winreg.HKEY_USERS

     Registry entries subordinate to this key define the default user
     configuration for new users on the local computer and the user
     configuration for the current user.

 -- Data: winreg.HKEY_PERFORMANCE_DATA

     Registry entries subordinate to this key allow you to access
     performance data.  The data is not actually stored in the registry;
     the registry functions cause the system to collect the data from
     its source.

 -- Data: winreg.HKEY_CURRENT_CONFIG

     Contains information about the current hardware profile of the
     local computer system.

 -- Data: winreg.HKEY_DYN_DATA

     This key is not used in versions of Windows after 98.


File: python.info,  Node: Access Rights,  Next: Value Types,  Prev: HKEY_* Constants,  Up: Constants<9>

5.34.3.4 Access Rights
......................

For more information, see Registry Key Security and Access(1).

 -- Data: winreg.KEY_ALL_ACCESS

     Combines the STANDARD_RIGHTS_REQUIRED, *note KEY_QUERY_VALUE: 31c9,
     *note KEY_SET_VALUE: 31ba, *note KEY_CREATE_SUB_KEY: 31ca, *note
     KEY_ENUMERATE_SUB_KEYS: 31cb, *note KEY_NOTIFY: 31cc, and *note
     KEY_CREATE_LINK: 31cd. access rights.

 -- Data: winreg.KEY_WRITE

     Combines the STANDARD_RIGHTS_WRITE, *note KEY_SET_VALUE: 31ba, and
     *note KEY_CREATE_SUB_KEY: 31ca. access rights.

 -- Data: winreg.KEY_READ

     Combines the STANDARD_RIGHTS_READ, *note KEY_QUERY_VALUE: 31c9,
     *note KEY_ENUMERATE_SUB_KEYS: 31cb, and *note KEY_NOTIFY: 31cc.
     values.

 -- Data: winreg.KEY_EXECUTE

     Equivalent to *note KEY_READ: 31b4.

 -- Data: winreg.KEY_QUERY_VALUE

     Required to query the values of a registry key.

 -- Data: winreg.KEY_SET_VALUE

     Required to create, delete, or set a registry value.

 -- Data: winreg.KEY_CREATE_SUB_KEY

     Required to create a subkey of a registry key.

 -- Data: winreg.KEY_ENUMERATE_SUB_KEYS

     Required to enumerate the subkeys of a registry key.

 -- Data: winreg.KEY_NOTIFY

     Required to request change notifications for a registry key or for
     subkeys of a registry key.

 -- Data: winreg.KEY_CREATE_LINK

     Reserved for system use.

* Menu:

* 64-bit Specific:: 

   ---------- Footnotes ----------

   (1) 
https://msdn.microsoft.com/en-us/library/ms724878%28v=VS.85%29.aspx


File: python.info,  Node: 64-bit Specific,  Up: Access Rights

5.34.3.5 64-bit Specific
........................

For more information, see Accessing an Alternate Registry View(1).

 -- Data: winreg.KEY_WOW64_64KEY

     Indicates that an application on 64-bit Windows should operate on
     the 64-bit registry view.

 -- Data: winreg.KEY_WOW64_32KEY

     Indicates that an application on 64-bit Windows should operate on
     the 32-bit registry view.

   ---------- Footnotes ----------

   (1) https://msdn.microsoft.com/en-us/library/aa384129(v=VS.85).aspx


File: python.info,  Node: Value Types,  Prev: Access Rights,  Up: Constants<9>

5.34.3.6 Value Types
....................

For more information, see Registry Value Types(1).

 -- Data: winreg.REG_BINARY

     Binary data in any form.

 -- Data: winreg.REG_DWORD

     32-bit number.

 -- Data: winreg.REG_DWORD_LITTLE_ENDIAN

     A 32-bit number in little-endian format.

 -- Data: winreg.REG_DWORD_BIG_ENDIAN

     A 32-bit number in big-endian format.

 -- Data: winreg.REG_EXPAND_SZ

     Null-terminated string containing references to environment
     variables (‘%PATH%’).

 -- Data: winreg.REG_LINK

     A Unicode symbolic link.

 -- Data: winreg.REG_MULTI_SZ

     A sequence of null-terminated strings, terminated by two null
     characters.  (Python handles this termination automatically.)

 -- Data: winreg.REG_NONE

     No defined value type.

 -- Data: winreg.REG_RESOURCE_LIST

     A device-driver resource list.

 -- Data: winreg.REG_FULL_RESOURCE_DESCRIPTOR

     A hardware setting.

 -- Data: winreg.REG_RESOURCE_REQUIREMENTS_LIST

     A hardware resource list.

 -- Data: winreg.REG_SZ

     A null-terminated string.

   ---------- Footnotes ----------

   (1) 
https://msdn.microsoft.com/en-us/library/ms724884%28v=VS.85%29.aspx


File: python.info,  Node: Registry Handle Objects,  Prev: Constants<9>,  Up: winreg -- Windows registry access

5.34.3.7 Registry Handle Objects
................................

This object wraps a Windows HKEY object, automatically closing it when
the object is destroyed.  To guarantee cleanup, you can call either the
*note Close(): 319d. method on the object, or the *note CloseKey():
319c. function.

All registry functions in this module return one of these objects.

All registry functions in this module which accept a handle object also
accept an integer, however, use of the handle object is encouraged.

Handle objects provide semantics for *note __bool__(): 8d4. – thus

     if handle:
         print("Yes")

will print ‘Yes’ if the handle is currently valid (has not been closed
or detached).

The object also support comparison semantics, so handle objects will
compare true if they both reference the same underlying Windows handle
value.

Handle objects can be converted to an integer (e.g., using the built-in
*note int(): 227. function), in which case the underlying Windows handle
value is returned.  You can also use the *note Detach(): 31de. method to
return the integer handle, and also disconnect the Windows handle from
the handle object.

 -- Method: PyHKEY.Close ()

     Closes the underlying Windows handle.

     If the handle is already closed, no error is raised.

 -- Method: PyHKEY.Detach ()

     Detaches the Windows handle from the handle object.

     The result is an integer that holds the value of the handle before
     it is detached.  If the handle is already detached or closed, this
     will return zero.

     After calling this function, the handle is effectively invalidated,
     but the handle is not closed.  You would call this function when
     you need the underlying Win32 handle to exist beyond the lifetime
     of the handle object.

 -- Method: PyHKEY.__enter__ ()
 -- Method: PyHKEY.__exit__ (*exc_info)

     The HKEY object implements *note __enter__(): 907. and *note
     __exit__(): 908. and thus supports the context protocol for the
     *note with: 29d. statement:

          with OpenKey(HKEY_LOCAL_MACHINE, "foo") as key:
              ...  # work with key

     will automatically close `key' when control leaves the *note with:
     29d. block.


File: python.info,  Node: winsound --- Sound-playing interface for Windows,  Prev: winreg -- Windows registry access,  Up: MS Windows Specific Services

5.34.4 ‘winsound’ — Sound-playing interface for Windows
-------------------------------------------------------

The *note winsound: 128. module provides access to the basic
sound-playing machinery provided by Windows platforms.  It includes
functions and several constants.

 -- Function: winsound.Beep (frequency, duration)

     Beep the PC’s speaker.  The `frequency' parameter specifies
     frequency, in hertz, of the sound, and must be in the range 37
     through 32,767.  The `duration' parameter specifies the number of
     milliseconds the sound should last.  If the system is not able to
     beep the speaker, *note RuntimeError: 193. is raised.

 -- Function: winsound.PlaySound (sound, flags)

     Call the underlying ‘PlaySound()’ function from the Platform API.
     The `sound' parameter may be a filename, audio data as a string, or
     ‘None’.  Its interpretation depends on the value of `flags', which
     can be a bitwise ORed combination of the constants described below.
     If the `sound' parameter is ‘None’, any currently playing waveform
     sound is stopped.  If the system indicates an error, *note
     RuntimeError: 193. is raised.

 -- Function: winsound.MessageBeep (type=MB_OK)

     Call the underlying ‘MessageBeep()’ function from the Platform API.
     This plays a sound as specified in the registry.  The `type'
     argument specifies which sound to play; possible values are ‘-1’,
     ‘MB_ICONASTERISK’, ‘MB_ICONEXCLAMATION’, ‘MB_ICONHAND’,
     ‘MB_ICONQUESTION’, and ‘MB_OK’, all described below.  The value
     ‘-1’ produces a "simple beep"; this is the final fallback if a
     sound cannot be played otherwise.

 -- Data: winsound.SND_FILENAME

     The `sound' parameter is the name of a WAV file.  Do not use with
     *note SND_ALIAS: 31e7.

 -- Data: winsound.SND_ALIAS

     The `sound' parameter is a sound association name from the
     registry.  If the registry contains no such name, play the system
     default sound unless *note SND_NODEFAULT: 31e8. is also specified.
     If no default sound is registered, raise *note RuntimeError: 193.
     Do not use with *note SND_FILENAME: 31e6.

     All Win32 systems support at least the following; most systems
     support many more:

     *note PlaySound(): 31e4.       Corresponding Control Panel Sound name
     `name'                         

     ----------------------------------------------------------------------------
                                    
     ‘'SystemAsterisk'’             Asterisk
                                    
                                    
     ‘'SystemExclamation'’          Exclamation
                                    
                                    
     ‘'SystemExit'’                 Exit Windows
                                    
                                    
     ‘'SystemHand'’                 Critical Stop
                                    
                                    
     ‘'SystemQuestion'’             Question
                                    

     For example:

          import winsound
          # Play Windows exit sound.
          winsound.PlaySound("SystemExit", winsound.SND_ALIAS)

          # Probably play Windows default sound, if any is registered (because
          # "*" probably isn't the registered name of any sound).
          winsound.PlaySound("*", winsound.SND_ALIAS)

 -- Data: winsound.SND_LOOP

     Play the sound repeatedly.  The *note SND_ASYNC: 31ea. flag must
     also be used to avoid blocking.  Cannot be used with *note
     SND_MEMORY: 31eb.

 -- Data: winsound.SND_MEMORY

     The `sound' parameter to *note PlaySound(): 31e4. is a memory image
     of a WAV file, as a string.

          Note: This module does not support playing from a memory image
          asynchronously, so a combination of this flag and *note
          SND_ASYNC: 31ea. will raise *note RuntimeError: 193.

 -- Data: winsound.SND_PURGE

     Stop playing all instances of the specified sound.

          Note: This flag is not supported on modern Windows platforms.

 -- Data: winsound.SND_ASYNC

     Return immediately, allowing sounds to play asynchronously.

 -- Data: winsound.SND_NODEFAULT

     If the specified sound cannot be found, do not play the system
     default sound.

 -- Data: winsound.SND_NOSTOP

     Do not interrupt sounds currently playing.

 -- Data: winsound.SND_NOWAIT

     Return immediately if the sound driver is busy.

          Note: This flag is not supported on modern Windows platforms.

 -- Data: winsound.MB_ICONASTERISK

     Play the ‘SystemDefault’ sound.

 -- Data: winsound.MB_ICONEXCLAMATION

     Play the ‘SystemExclamation’ sound.

 -- Data: winsound.MB_ICONHAND

     Play the ‘SystemHand’ sound.

 -- Data: winsound.MB_ICONQUESTION

     Play the ‘SystemQuestion’ sound.

 -- Data: winsound.MB_OK

     Play the ‘SystemDefault’ sound.


File: python.info,  Node: Unix Specific Services,  Next: Superseded Modules,  Prev: MS Windows Specific Services,  Up: The Python Standard Library

5.35 Unix Specific Services
===========================

The modules described in this chapter provide interfaces to features
that are unique to the Unix operating system, or in some cases to some
or many variants of it.  Here’s an overview:

* Menu:

* posix: posix --- The most common POSIX system calls. The most common POSIX system calls
* pwd: pwd --- The password database. The password database
* spwd: spwd --- The shadow password database. The shadow password database
* grp: grp --- The group database. The group database
* crypt: crypt --- Function to check Unix passwords. Function to check Unix passwords
* termios: termios --- POSIX style tty control. POSIX style tty control
* tty: tty --- Terminal control functions. Terminal control functions
* pty: pty --- Pseudo-terminal utilities. Pseudo-terminal utilities
* fcntl: fcntl --- The fcntl and ioctl system calls. The fcntl and ioctl system calls
* pipes: pipes --- Interface to shell pipelines. Interface to shell pipelines
* resource: resource --- Resource usage information. Resource usage information
* nis: nis --- Interface to Sun's NIS Yellow Pages. Interface to Sun’s NIS (Yellow Pages)
* syslog: syslog --- Unix syslog library routines. Unix syslog library routines


File: python.info,  Node: posix --- The most common POSIX system calls,  Next: pwd --- The password database,  Up: Unix Specific Services

5.35.1 ‘posix’ — The most common POSIX system calls
---------------------------------------------------

This module provides access to operating system functionality that is
standardized by the C Standard and the POSIX standard (a thinly
disguised Unix interface).

`Do not import this module directly.'  Instead, import the module *note
os: c2, which provides a `portable' version of this interface.  On Unix,
the *note os: c2. module provides a superset of the *note posix: cf.
interface.  On non-Unix operating systems the *note posix: cf. module is
not available, but a subset is always available through the *note os:
c2. interface.  Once *note os: c2. is imported, there is `no'
performance penalty in using it instead of *note posix: cf.  In
addition, *note os: c2. provides some additional functionality, such as
automatically calling *note putenv(): 1856. when an entry in
‘os.environ’ is changed.

Errors are reported as exceptions; the usual exceptions are given for
type errors, while errors reported by the system calls raise *note
OSError: 4b6.

* Menu:

* Large File Support:: 
* Notable Module Contents:: 


File: python.info,  Node: Large File Support,  Next: Notable Module Contents,  Up: posix --- The most common POSIX system calls

5.35.1.1 Large File Support
...........................

Several operating systems (including AIX, HP-UX, Irix and Solaris)
provide support for files that are larger than 2 GiB from a C
programming model where ‘int’ and ‘long’ are 32-bit values.  This is
typically accomplished by defining the relevant size and offset types as
64-bit values.  Such files are sometimes referred to as `large files'.

Large file support is enabled in Python when the size of an ‘off_t’ is
larger than a ‘long’ and the ‘long long’ type is available and is at
least as large as an ‘off_t’.  It may be necessary to configure and
compile Python with certain compiler flags to enable this mode.  For
example, it is enabled by default with recent versions of Irix, but with
Solaris 2.6 and 2.7 you need to do something like:

     CFLAGS="`getconf LFS_CFLAGS`" OPT="-g -O2 $CFLAGS" \
             ./configure

On large-file-capable Linux systems, this might work:

     CFLAGS='-D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64' OPT="-g -O2 $CFLAGS" \
             ./configure


File: python.info,  Node: Notable Module Contents,  Prev: Large File Support,  Up: posix --- The most common POSIX system calls

5.35.1.2 Notable Module Contents
................................

In addition to many functions described in the *note os: c2. module
documentation, *note posix: cf. defines the following data item:

 -- Data: posix.environ

     A dictionary representing the string environment at the time the
     interpreter was started.  Keys and values are bytes on Unix and str
     on Windows.  For example, ‘environ[b'HOME']’ (‘environ['HOME']’ on
     Windows) is the pathname of your home directory, equivalent to
     ‘getenv("HOME")’ in C.

     Modifying this dictionary does not affect the string environment
     passed on by *note execv(): 1868, *note popen(): 7d7. or *note
     system(): a3d.; if you need to change the environment, pass
     ‘environ’ to *note execve(): 674. or add variable assignments and
     export statements to the command string for *note system(): a3d. or
     *note popen(): 7d7.

     Changed in version 3.2: On Unix, keys and values are bytes.

          Note: The *note os: c2. module provides an alternate
          implementation of ‘environ’ which updates the environment on
          modification.  Note also that updating *note os.environ: 77a.
          will render this dictionary obsolete.  Use of the *note os:
          c2. module version of this is recommended over direct access
          to the *note posix: cf. module.


File: python.info,  Node: pwd --- The password database,  Next: spwd --- The shadow password database,  Prev: posix --- The most common POSIX system calls,  Up: Unix Specific Services

5.35.2 ‘pwd’ — The password database
------------------------------------

This module provides access to the Unix user account and password
database.  It is available on all Unix versions.

Password database entries are reported as a tuple-like object, whose
attributes correspond to the members of the ‘passwd’ structure
(Attribute field below, see ‘<pwd.h>’):

Index       Attribute           Meaning
                                
------------------------------------------------------------------
                                
0           ‘pw_name’           Login name
                                
                                
1           ‘pw_passwd’         Optional encrypted password
                                
                                
2           ‘pw_uid’            Numerical user ID
                                
                                
3           ‘pw_gid’            Numerical group ID
                                
                                
4           ‘pw_gecos’          User name or comment field
                                
                                
5           ‘pw_dir’            User home directory
                                
                                
6           ‘pw_shell’          User command interpreter
                                

The uid and gid items are integers, all others are strings.  *note
KeyError: 1a7. is raised if the entry asked for cannot be found.

     Note: 
     In traditional Unix the field ‘pw_passwd’ usually contains a
     password encrypted with a DES derived algorithm (see module *note
     crypt: 28.).  However most modern unices use a so-called `shadow
     password' system.  On those unices the `pw_passwd' field only
     contains an asterisk (‘'*'’) or the letter ‘'x'’ where the
     encrypted password is stored in a file ‘/etc/shadow’ which is not
     world readable.  Whether the `pw_passwd' field contains anything
     useful is system-dependent.  If available, the *note spwd: ef.
     module should be used where access to the encrypted password is
     required.

It defines the following items:

 -- Function: pwd.getpwuid (uid)

     Return the password database entry for the given numeric user ID.

 -- Function: pwd.getpwnam (name)

     Return the password database entry for the given user name.

 -- Function: pwd.getpwall ()

     Return a list of all available password database entries, in
     arbitrary order.

See also
........

Module *note grp: 8a.

     An interface to the group database, similar to this.

Module *note spwd: ef.

     An interface to the shadow password database, similar to this.


File: python.info,  Node: spwd --- The shadow password database,  Next: grp --- The group database,  Prev: pwd --- The password database,  Up: Unix Specific Services

5.35.3 ‘spwd’ — The shadow password database
--------------------------------------------

This module provides access to the Unix shadow password database.  It is
available on various Unix versions.

You must have enough privileges to access the shadow password database
(this usually means you have to be root).

Shadow password database entries are reported as a tuple-like object,
whose attributes correspond to the members of the ‘spwd’ structure
(Attribute field below, see ‘<shadow.h>’):

Index       Attribute           Meaning
                                
----------------------------------------------------------------------
                                
0           ‘sp_namp’           Login name
                                
                                
1           ‘sp_pwdp’           Encrypted password
                                
                                
2           ‘sp_lstchg’         Date of last change
                                
                                
3           ‘sp_min’            Minimal number of days between
                                changes
                                
                                
4           ‘sp_max’            Maximum number of days between
                                changes
                                
                                
5           ‘sp_warn’           Number of days before password
                                expires to warn user about it
                                
                                
6           ‘sp_inact’          Number of days after password
                                expires until account is disabled
                                
                                
7           ‘sp_expire’         Number of days since 1970-01-01
                                when account expires
                                
                                
8           ‘sp_flag’           Reserved
                                

The sp_namp and sp_pwdp items are strings, all others are integers.
*note KeyError: 1a7. is raised if the entry asked for cannot be found.

The following functions are defined:

 -- Function: spwd.getspnam (name)

     Return the shadow password database entry for the given user name.

     Changed in version 3.6: Raises a *note PermissionError: 1a6.
     instead of *note KeyError: 1a7. if the user doesn’t have
     privileges.

 -- Function: spwd.getspall ()

     Return a list of all available shadow password database entries, in
     arbitrary order.

See also
........

Module *note grp: 8a.

     An interface to the group database, similar to this.

Module *note pwd: d4.

     An interface to the normal password database, similar to this.


File: python.info,  Node: grp --- The group database,  Next: crypt --- Function to check Unix passwords,  Prev: spwd --- The shadow password database,  Up: Unix Specific Services

5.35.4 ‘grp’ — The group database
---------------------------------

This module provides access to the Unix group database.  It is available
on all Unix versions.

Group database entries are reported as a tuple-like object, whose
attributes correspond to the members of the ‘group’ structure (Attribute
field below, see ‘<pwd.h>’):

Index       Attribute       Meaning
                            
------------------------------------------------------------------
                            
0           gr_name         the name of the group
                            
                            
1           gr_passwd       the (encrypted) group password;
                            often empty
                            
                            
2           gr_gid          the numerical group ID
                            
                            
3           gr_mem          all the group member’s user names
                            

The gid is an integer, name and password are strings, and the member
list is a list of strings.  (Note that most users are not explicitly
listed as members of the group they are in according to the password
database.  Check both databases to get complete membership information.
Also note that a ‘gr_name’ that starts with a ‘+’ or ‘-’ is likely to be
a YP/NIS reference and may not be accessible via *note getgrnam(): 3208.
or *note getgrgid(): 3209.)

It defines the following items:

 -- Function: grp.getgrgid (gid)

     Return the group database entry for the given numeric group ID.
     *note KeyError: 1a7. is raised if the entry asked for cannot be
     found.

     Deprecated since version 3.6: Since Python 3.6 the support of
     non-integer arguments like floats or strings in *note getgrgid():
     3209. is deprecated.

 -- Function: grp.getgrnam (name)

     Return the group database entry for the given group name.  *note
     KeyError: 1a7. is raised if the entry asked for cannot be found.

 -- Function: grp.getgrall ()

     Return a list of all available group entries, in arbitrary order.

See also
........

Module *note pwd: d4.

     An interface to the user database, similar to this.

Module *note spwd: ef.

     An interface to the shadow password database, similar to this.


File: python.info,  Node: crypt --- Function to check Unix passwords,  Next: termios --- POSIX style tty control,  Prev: grp --- The group database,  Up: Unix Specific Services

5.35.5 ‘crypt’ — Function to check Unix passwords
-------------------------------------------------

This module implements an interface to the ‘crypt(3)’ routine, which is
a one-way hash function based upon a modified DES algorithm; see the
Unix man page for further details.  Possible uses include storing hashed
passwords so you can check passwords without storing the actual
password, or attempting to crack Unix passwords with a dictionary.

Notice that the behavior of this module depends on the actual
implementation of the ‘crypt(3)’ routine in the running system.
Therefore, any extensions available on the current implementation will
also be available on this module.

* Menu:

* Hashing Methods:: 
* Module Attributes:: 
* Module Functions: Module Functions<2>. 
* Examples: Examples<25>. 


File: python.info,  Node: Hashing Methods,  Next: Module Attributes,  Up: crypt --- Function to check Unix passwords

5.35.5.1 Hashing Methods
........................

New in version 3.3.

The *note crypt: 28. module defines the list of hashing methods (not all
methods are available on all platforms):

 -- Data: crypt.METHOD_SHA512

     A Modular Crypt Format method with 16 character salt and 86
     character hash.  This is the strongest method.

 -- Data: crypt.METHOD_SHA256

     Another Modular Crypt Format method with 16 character salt and 43
     character hash.

 -- Data: crypt.METHOD_MD5

     Another Modular Crypt Format method with 8 character salt and 22
     character hash.

 -- Data: crypt.METHOD_CRYPT

     The traditional method with a 2 character salt and 13 characters of
     hash.  This is the weakest method.


File: python.info,  Node: Module Attributes,  Next: Module Functions<2>,  Prev: Hashing Methods,  Up: crypt --- Function to check Unix passwords

5.35.5.2 Module Attributes
..........................

New in version 3.3.

 -- Attribute: crypt.methods

     A list of available password hashing algorithms, as
     ‘crypt.METHOD_*’ objects.  This list is sorted from strongest to
     weakest.


File: python.info,  Node: Module Functions<2>,  Next: Examples<25>,  Prev: Module Attributes,  Up: crypt --- Function to check Unix passwords

5.35.5.3 Module Functions
.........................

The *note crypt: 28. module defines the following functions:

 -- Function: crypt.crypt (word, salt=None)

     `word' will usually be a user’s password as typed at a prompt or in
     a graphical interface.  The optional `salt' is either a string as
     returned from *note mksalt(): 606, one of the ‘crypt.METHOD_*’
     values (though not all may be available on all platforms), or a
     full encrypted password including salt, as returned by this
     function.  If `salt' is not provided, the strongest method will be
     used (as returned by *note methods(): 3213.

     Checking a password is usually done by passing the plain-text
     password as `word' and the full results of a previous *note
     crypt(): 28. call, which should be the same as the results of this
     call.

     `salt' (either a random 2 or 16 character string, possibly prefixed
     with ‘$digit$’ to indicate the method) which will be used to
     perturb the encryption algorithm.  The characters in `salt' must be
     in the set ‘[./a-zA-Z0-9]’, with the exception of Modular Crypt
     Format which prefixes a ‘$digit$’.

     Returns the hashed password as a string, which will be composed of
     characters from the same alphabet as the salt.

     Since a few ‘crypt(3)’ extensions allow different values, with
     different sizes in the `salt', it is recommended to use the full
     crypted password as salt when checking for a password.

     Changed in version 3.3: Accept ‘crypt.METHOD_*’ values in addition
     to strings for `salt'.

 -- Function: crypt.mksalt (method=None)

     Return a randomly generated salt of the specified method.  If no
     `method' is given, the strongest method available as returned by
     *note methods(): 3213. is used.

     The return value is a string either of 2 characters in length for
     ‘crypt.METHOD_CRYPT’, or 19 characters starting with ‘$digit$’ and
     16 random characters from the set ‘[./a-zA-Z0-9]’, suitable for
     passing as the `salt' argument to *note crypt(): 28.

     New in version 3.3.


File: python.info,  Node: Examples<25>,  Prev: Module Functions<2>,  Up: crypt --- Function to check Unix passwords

5.35.5.4 Examples
.................

A simple example illustrating typical use (a constant-time comparison
operation is needed to limit exposure to timing attacks.  *note
hmac.compare_digest(): 639. is suitable for this purpose):

     import pwd
     import crypt
     import getpass
     from hmac import compare_digest as compare_hash

     def login():
         username = input('Python login: ')
         cryptedpasswd = pwd.getpwnam(username)[1]
         if cryptedpasswd:
             if cryptedpasswd == 'x' or cryptedpasswd == '*':
                 raise ValueError('no support for shadow passwords')
             cleartext = getpass.getpass()
             return compare_hash(crypt.crypt(cleartext, cryptedpasswd), cryptedpasswd)
         else:
             return True

To generate a hash of a password using the strongest available method
and check it against the original:

     import crypt
     from hmac import compare_digest as compare_hash

     hashed = crypt.crypt(plaintext)
     if not compare_hash(hashed, crypt.crypt(plaintext, hashed)):
        raise ValueError("hashed version doesn't validate against original")


File: python.info,  Node: termios --- POSIX style tty control,  Next: tty --- Terminal control functions,  Prev: crypt --- Function to check Unix passwords,  Up: Unix Specific Services

5.35.6 ‘termios’ — POSIX style tty control
------------------------------------------

This module provides an interface to the POSIX calls for tty I/O
control.  For a complete description of these calls, see the POSIX or
Unix manual pages.  It is only available for those Unix versions that
support POSIX `termios' style tty I/O control (and then only if
configured at installation time).

All functions in this module take a file descriptor `fd' as their first
argument.  This can be an integer file descriptor, such as returned by
‘sys.stdin.fileno()’, or a *note file object: 78b, such as ‘sys.stdin’
itself.

This module also defines all the constants needed to work with the
functions provided here; these have the same name as their counterparts
in C. Please refer to your system documentation for more information on
using these terminal control interfaces.

The module defines the following functions:

 -- Function: termios.tcgetattr (fd)

     Return a list containing the tty attributes for file descriptor
     `fd', as follows: ‘[iflag, oflag, cflag, lflag, ispeed, ospeed,
     cc]’ where `cc' is a list of the tty special characters (each a
     string of length 1, except the items with indices ‘VMIN’ and
     ‘VTIME’, which are integers when these fields are defined).  The
     interpretation of the flags and the speeds as well as the indexing
     in the `cc' array must be done using the symbolic constants defined
     in the *note termios: 102. module.

 -- Function: termios.tcsetattr (fd, when, attributes)

     Set the tty attributes for file descriptor `fd' from the
     `attributes', which is a list like the one returned by *note
     tcgetattr(): 3219.  The `when' argument determines when the
     attributes are changed: ‘TCSANOW’ to change immediately,
     ‘TCSADRAIN’ to change after transmitting all queued output, or
     ‘TCSAFLUSH’ to change after transmitting all queued output and
     discarding all queued input.

 -- Function: termios.tcsendbreak (fd, duration)

     Send a break on file descriptor `fd'.  A zero `duration' sends a
     break for 0.25 –0.5 seconds; a nonzero `duration' has a system
     dependent meaning.

 -- Function: termios.tcdrain (fd)

     Wait until all output written to file descriptor `fd' has been
     transmitted.

 -- Function: termios.tcflush (fd, queue)

     Discard queued data on file descriptor `fd'.  The `queue' selector
     specifies which queue: ‘TCIFLUSH’ for the input queue, ‘TCOFLUSH’
     for the output queue, or ‘TCIOFLUSH’ for both queues.

 -- Function: termios.tcflow (fd, action)

     Suspend or resume input or output on file descriptor `fd'.  The
     `action' argument can be ‘TCOOFF’ to suspend output, ‘TCOON’ to
     restart output, ‘TCIOFF’ to suspend input, or ‘TCION’ to restart
     input.

See also
........

Module *note tty: 112.

     Convenience functions for common terminal control operations.

* Menu:

* Example: Example<15>. 


File: python.info,  Node: Example<15>,  Up: termios --- POSIX style tty control

5.35.6.1 Example
................

Here’s a function that prompts for a password with echoing turned off.
Note the technique using a separate *note tcgetattr(): 3219. call and a
*note try: 9e9. ...  *note finally: 526. statement to ensure that the
old tty attributes are restored exactly no matter what happens:

     def getpass(prompt="Password: "):
         import termios, sys
         fd = sys.stdin.fileno()
         old = termios.tcgetattr(fd)
         new = termios.tcgetattr(fd)
         new[3] = new[3] & ~termios.ECHO          # lflags
         try:
             termios.tcsetattr(fd, termios.TCSADRAIN, new)
             passwd = input(prompt)
         finally:
             termios.tcsetattr(fd, termios.TCSADRAIN, old)
         return passwd


File: python.info,  Node: tty --- Terminal control functions,  Next: pty --- Pseudo-terminal utilities,  Prev: termios --- POSIX style tty control,  Up: Unix Specific Services

5.35.7 ‘tty’ — Terminal control functions
-----------------------------------------

The *note tty: 112. module defines functions for putting the tty into
cbreak and raw modes.

Because it requires the *note termios: 102. module, it will work only on
Unix.

The *note tty: 112. module defines the following functions:

 -- Function: tty.setraw (fd, when=termios.TCSAFLUSH)

     Change the mode of the file descriptor `fd' to raw.  If `when' is
     omitted, it defaults to ‘termios.TCSAFLUSH’, and is passed to *note
     termios.tcsetattr(): 321a.

 -- Function: tty.setcbreak (fd, when=termios.TCSAFLUSH)

     Change the mode of file descriptor `fd' to cbreak.  If `when' is
     omitted, it defaults to ‘termios.TCSAFLUSH’, and is passed to *note
     termios.tcsetattr(): 321a.

See also
........

Module *note termios: 102.

     Low-level terminal control interface.


File: python.info,  Node: pty --- Pseudo-terminal utilities,  Next: fcntl --- The fcntl and ioctl system calls,  Prev: tty --- Terminal control functions,  Up: Unix Specific Services

5.35.8 ‘pty’ — Pseudo-terminal utilities
----------------------------------------

The *note pty: d3. module defines operations for handling the
pseudo-terminal concept: starting another process and being able to
write to and read from its controlling terminal programmatically.

Because pseudo-terminal handling is highly platform dependent, there is
code to do it only for Linux.  (The Linux code is supposed to work on
other platforms, but hasn’t been tested yet.)

The *note pty: d3. module defines the following functions:

 -- Function: pty.fork ()

     Fork.  Connect the child’s controlling terminal to a
     pseudo-terminal.  Return value is ‘(pid, fd)’.  Note that the child
     gets `pid' 0, and the `fd' is `invalid'.  The parent’s return value
     is the `pid' of the child, and `fd' is a file descriptor connected
     to the child’s controlling terminal (and also to the child’s
     standard input and output).

 -- Function: pty.openpty ()

     Open a new pseudo-terminal pair, using *note os.openpty(): 18a0. if
     possible, or emulation code for generic Unix systems.  Return a
     pair of file descriptors ‘(master, slave)’, for the master and the
     slave end, respectively.

 -- Function: pty.spawn (argv[, master_read[, stdin_read]])

     Spawn a process, and connect its controlling terminal with the
     current process’s standard io.  This is often used to baffle
     programs which insist on reading from the controlling terminal.

     The functions `master_read' and `stdin_read' should be functions
     which read from a file descriptor.  The defaults try to read 1024
     bytes each time they are called.

     Changed in version 3.4: *note spawn(): 494. now returns the status
     value from *note os.waitpid(): 200. on the child process.

* Menu:

* Example: Example<16>. 


File: python.info,  Node: Example<16>,  Up: pty --- Pseudo-terminal utilities

5.35.8.1 Example
................

The following program acts like the Unix command ‘script(1)’, using a
pseudo-terminal to record all input and output of a terminal session in
a "typescript".

     import argparse
     import os
     import pty
     import sys
     import time

     parser = argparse.ArgumentParser()
     parser.add_argument('-a', dest='append', action='store_true')
     parser.add_argument('-p', dest='use_python', action='store_true')
     parser.add_argument('filename', nargs='?', default='typescript')
     options = parser.parse_args()

     shell = sys.executable if options.use_python else os.environ.get('SHELL', 'sh')
     filename = options.filename
     mode = 'ab' if options.append else 'wb'

     with open(filename, mode) as script:
         def read(fd):
             data = os.read(fd, 1024)
             script.write(data)
             return data

         print('Script started, file is', filename)
         script.write(('Script started on %s\n' % time.asctime()).encode())

         pty.spawn(shell, read)

         script.write(('Script done on %s\n' % time.asctime()).encode())
         print('Script done, file is', filename)


File: python.info,  Node: fcntl --- The fcntl and ioctl system calls,  Next: pipes --- Interface to shell pipelines,  Prev: pty --- Pseudo-terminal utilities,  Up: Unix Specific Services

5.35.9 ‘fcntl’ — The ‘fcntl’ and ‘ioctl’ system calls
-----------------------------------------------------

This module performs file control and I/O control on file descriptors.
It is an interface to the ‘fcntl()’ and ‘ioctl()’ Unix routines.

All functions in this module take a file descriptor `fd' as their first
argument.  This can be an integer file descriptor, such as returned by
‘sys.stdin.fileno()’, or an *note io.IOBase: 1946. object, such as
‘sys.stdin’ itself, which provides a *note fileno(): 187a. that returns
a genuine file descriptor.

Changed in version 3.3: Operations in this module used to raise an *note
IOError: 5b0. where they now raise an *note OSError: 4b6.

The module defines the following functions:

 -- Function: fcntl.fcntl (fd, cmd, arg=0)

     Perform the operation `cmd' on file descriptor `fd' (file objects
     providing a *note fileno(): 187a. method are accepted as well).
     The values used for `cmd' are operating system dependent, and are
     available as constants in the *note fcntl: 7c. module, using the
     same names as used in the relevant C header files.  The argument
     `arg' can either be an integer value, or a *note bytes: 1db.
     object.  With an integer value, the return value of this function
     is the integer return value of the C ‘fcntl()’ call.  When the
     argument is bytes it represents a binary structure, e.g.  created
     by *note struct.pack(): 86c.  The binary data is copied to a buffer
     whose address is passed to the C ‘fcntl()’ call.  The return value
     after a successful call is the contents of the buffer, converted to
     a *note bytes: 1db. object.  The length of the returned object will
     be the same as the length of the `arg' argument.  This is limited
     to 1024 bytes.  If the information returned in the buffer by the
     operating system is larger than 1024 bytes, this is most likely to
     result in a segmentation violation or a more subtle data
     corruption.

     If the ‘fcntl()’ fails, an *note OSError: 4b6. is raised.

 -- Function: fcntl.ioctl (fd, request, arg=0, mutate_flag=True)

     This function is identical to the *note fcntl(): 1e5c. function,
     except that the argument handling is even more complicated.

     The `request' parameter is limited to values that can fit in
     32-bits.  Additional constants of interest for use as the `request'
     argument can be found in the *note termios: 102. module, under the
     same names as used in the relevant C header files.

     The parameter `arg' can be one of an integer, an object supporting
     the read-only buffer interface (like *note bytes: 1db.) or an
     object supporting the read-write buffer interface (like *note
     bytearray: 1dc.).

     In all but the last case, behaviour is as for the *note fcntl():
     1e5c. function.

     If a mutable buffer is passed, then the behaviour is determined by
     the value of the `mutate_flag' parameter.

     If it is false, the buffer’s mutability is ignored and behaviour is
     as for a read-only buffer, except that the 1024 byte limit
     mentioned above is avoided – so long as the buffer you pass is at
     least as long as what the operating system wants to put there,
     things should work.

     If `mutate_flag' is true (the default), then the buffer is (in
     effect) passed to the underlying *note ioctl(): a5b. system call,
     the latter’s return code is passed back to the calling Python, and
     the buffer’s new contents reflect the action of the *note ioctl():
     a5b.  This is a slight simplification, because if the supplied
     buffer is less than 1024 bytes long it is first copied into a
     static buffer 1024 bytes long which is then passed to *note
     ioctl(): a5b. and copied back into the supplied buffer.

     If the ‘ioctl()’ fails, an *note OSError: 4b6. exception is raised.

     An example:

          >>> import array, fcntl, struct, termios, os
          >>> os.getpgrp()
          13341
          >>> struct.unpack('h', fcntl.ioctl(0, termios.TIOCGPGRP, "  "))[0]
          13341
          >>> buf = array.array('h', [0])
          >>> fcntl.ioctl(0, termios.TIOCGPGRP, buf, 1)
          0
          >>> buf
          array('h', [13341])

 -- Function: fcntl.flock (fd, operation)

     Perform the lock operation `operation' on file descriptor `fd'
     (file objects providing a *note fileno(): 187a. method are accepted
     as well).  See the Unix manual ‘flock(2)’ for details.  (On some
     systems, this function is emulated using ‘fcntl()’.)

     If the ‘flock()’ fails, an *note OSError: 4b6. exception is raised.

 -- Function: fcntl.lockf (fd, cmd, len=0, start=0, whence=0)

     This is essentially a wrapper around the *note fcntl(): 1e5c.
     locking calls.  `fd' is the file descriptor of the file to lock or
     unlock, and `cmd' is one of the following values:

        * ‘LOCK_UN’ – unlock

        * ‘LOCK_SH’ – acquire a shared lock

        * ‘LOCK_EX’ – acquire an exclusive lock

     When `cmd' is ‘LOCK_SH’ or ‘LOCK_EX’, it can also be bitwise ORed
     with ‘LOCK_NB’ to avoid blocking on lock acquisition.  If ‘LOCK_NB’
     is used and the lock cannot be acquired, an *note OSError: 4b6.
     will be raised and the exception will have an `errno' attribute set
     to ‘EACCES’ or ‘EAGAIN’ (depending on the operating system; for
     portability, check for both values).  On at least some systems,
     ‘LOCK_EX’ can only be used if the file descriptor refers to a file
     opened for writing.

     `len' is the number of bytes to lock, `start' is the byte offset at
     which the lock starts, relative to `whence', and `whence' is as
     with *note io.IOBase.seek(): 194c, specifically:

        * ‘0’ – relative to the start of the file (*note os.SEEK_SET:
          a10.)

        * ‘1’ – relative to the current buffer position (*note
          os.SEEK_CUR: a11.)

        * ‘2’ – relative to the end of the file (*note os.SEEK_END:
          a12.)

     The default for `start' is 0, which means to start at the beginning
     of the file.  The default for `len' is 0 which means to lock to the
     end of the file.  The default for `whence' is also 0.

Examples (all on a SVR4 compliant system):

     import struct, fcntl, os

     f = open(...)
     rv = fcntl.fcntl(f, fcntl.F_SETFL, os.O_NDELAY)

     lockdata = struct.pack('hhllhh', fcntl.F_WRLCK, 0, 0, 0, 0, 0)
     rv = fcntl.fcntl(f, fcntl.F_SETLKW, lockdata)

Note that in the first example the return value variable `rv' will hold
an integer value; in the second example it will hold a *note bytes: 1db.
object.  The structure lay-out for the `lockdata' variable is system
dependent — therefore using the *note flock(): 322c. call may be better.

See also
........

Module *note os: c2.

     If the locking flags *note O_SHLOCK: a13. and *note O_EXLOCK: a14.
     are present in the *note os: c2. module (on BSD only), the *note
     os.open(): 1f4. function provides an alternative to the *note
     lockf(): 9c9. and *note flock(): 322c. functions.


File: python.info,  Node: pipes --- Interface to shell pipelines,  Next: resource --- Resource usage information,  Prev: fcntl --- The fcntl and ioctl system calls,  Up: Unix Specific Services

5.35.10 ‘pipes’ — Interface to shell pipelines
----------------------------------------------

`Source code:' Lib/pipes.py(1)

__________________________________________________________________

The *note pipes: ca. module defines a class to abstract the concept of a
`pipeline' — a sequence of converters from one file to another.

Because the module uses ‘/bin/sh’ command lines, a POSIX or compatible
shell for *note os.system(): a3d. and *note os.popen(): 7d7. is
required.

The *note pipes: ca. module defines the following class:

 -- Class: pipes.Template

     An abstraction of a pipeline.

Example:

     >>> import pipes
     >>> t = pipes.Template()
     >>> t.append('tr a-z A-Z', '--')
     >>> f = t.open('pipefile', 'w')
     >>> f.write('hello world')
     >>> f.close()
     >>> open('pipefile').read()
     'HELLO WORLD'

* Menu:

* Template Objects:: 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/pipes.py


File: python.info,  Node: Template Objects,  Up: pipes --- Interface to shell pipelines

5.35.10.1 Template Objects
..........................

Template objects following methods:

 -- Method: Template.reset ()

     Restore a pipeline template to its initial state.

 -- Method: Template.clone ()

     Return a new, equivalent, pipeline template.

 -- Method: Template.debug (flag)

     If `flag' is true, turn debugging on.  Otherwise, turn debugging
     off.  When debugging is on, commands to be executed are printed,
     and the shell is given ‘set -x’ command to be more verbose.

 -- Method: Template.append (cmd, kind)

     Append a new action at the end.  The `cmd' variable must be a valid
     bourne shell command.  The `kind' variable consists of two letters.

     The first letter can be either of ‘'-'’ (which means the command
     reads its standard input), ‘'f'’ (which means the commands reads a
     given file on the command line) or ‘'.'’ (which means the commands
     reads no input, and hence must be first.)

     Similarly, the second letter can be either of ‘'-'’ (which means
     the command writes to standard output), ‘'f'’ (which means the
     command writes a file on the command line) or ‘'.'’ (which means
     the command does not write anything, and hence must be last.)

 -- Method: Template.prepend (cmd, kind)

     Add a new action at the beginning.  See *note append(): 3235. for
     explanations of the arguments.

 -- Method: Template.open (file, mode)

     Return a file-like object, open to `file', but read from or written
     to by the pipeline.  Note that only one of ‘'r'’, ‘'w'’ may be
     given.

 -- Method: Template.copy (infile, outfile)

     Copy `infile' to `outfile' through the pipe.


File: python.info,  Node: resource --- Resource usage information,  Next: nis --- Interface to Sun's NIS Yellow Pages,  Prev: pipes --- Interface to shell pipelines,  Up: Unix Specific Services

5.35.11 ‘resource’ — Resource usage information
-----------------------------------------------

This module provides basic mechanisms for measuring and controlling
system resources utilized by a program.

Symbolic constants are used to specify particular system resources and
to request usage information about either the current process or its
children.

An *note OSError: 4b6. is raised on syscall failure.

 -- Exception: resource.error

     A deprecated alias of *note OSError: 4b6.

     Changed in version 3.3: Following PEP 3151(1), this class was made
     an alias of *note OSError: 4b6.

* Menu:

* Resource Limits:: 
* Resource Usage:: 

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3151


File: python.info,  Node: Resource Limits,  Next: Resource Usage,  Up: resource --- Resource usage information

5.35.11.1 Resource Limits
.........................

Resources usage can be limited using the *note setrlimit(): 2ccc.
function described below.  Each resource is controlled by a pair of
limits: a soft limit and a hard limit.  The soft limit is the current
limit, and may be lowered or raised by a process over time.  The soft
limit can never exceed the hard limit.  The hard limit can be lowered to
any value greater than the soft limit, but not raised.  (Only processes
with the effective UID of the super-user can raise a hard limit.)

The specific resources that can be limited are system dependent.  They
are described in the ‘getrlimit(2)’ man page.  The resources listed
below are supported when the underlying operating system supports them;
resources which cannot be checked or controlled by the operating system
are not defined in this module for those platforms.

 -- Data: resource.RLIM_INFINITY

     Constant used to represent the limit for an unlimited resource.

 -- Function: resource.getrlimit (resource)

     Returns a tuple ‘(soft, hard)’ with the current soft and hard
     limits of `resource'.  Raises *note ValueError: 19c. if an invalid
     resource is specified, or *note error: 323b. if the underlying
     system call fails unexpectedly.

 -- Function: resource.setrlimit (resource, limits)

     Sets new limits of consumption of `resource'.  The `limits'
     argument must be a tuple ‘(soft, hard)’ of two integers describing
     the new limits.  A value of *note RLIM_INFINITY: 323d. can be used
     to request a limit that is unlimited.

     Raises *note ValueError: 19c. if an invalid resource is specified,
     if the new soft limit exceeds the hard limit, or if a process tries
     to raise its hard limit.  Specifying a limit of *note
     RLIM_INFINITY: 323d. when the hard or system limit for that
     resource is not unlimited will result in a *note ValueError: 19c.
     A process with the effective UID of super-user can request any
     valid limit value, including unlimited, but *note ValueError: 19c.
     will still be raised if the requested limit exceeds the system
     imposed limit.

     ‘setrlimit’ may also raise *note error: 323b. if the underlying
     system call fails.

 -- Function: resource.prlimit (pid, resource[, limits])

     Combines *note setrlimit(): 2ccc. and *note getrlimit(): 323e. in
     one function and supports to get and set the resources limits of an
     arbitrary process.  If `pid' is 0, then the call applies to the
     current process.  `resource' and `limits' have the same meaning as
     in *note setrlimit(): 2ccc, except that `limits' is optional.

     When `limits' is not given the function returns the `resource'
     limit of the process `pid'.  When `limits' is given the `resource'
     limit of the process is set and the former resource limit is
     returned.

     Raises *note ProcessLookupError: 5b9. when `pid' can’t be found and
     *note PermissionError: 1a6. when the user doesn’t have
     ‘CAP_SYS_RESOURCE’ for the process.

     Availability: Linux 2.6.36 or later with glibc 2.13 or later

     New in version 3.4.

These symbols define resources whose consumption can be controlled using
the *note setrlimit(): 2ccc. and *note getrlimit(): 323e. functions
described below.  The values of these symbols are exactly the constants
used by C programs.

The Unix man page for ‘getrlimit(2)’ lists the available resources.
Note that not all systems use the same symbol or same value to denote
the same resource.  This module does not attempt to mask platform
differences — symbols not defined for a platform will not be available
from this module on that platform.

 -- Data: resource.RLIMIT_CORE

     The maximum size (in bytes) of a core file that the current process
     can create.  This may result in the creation of a partial core file
     if a larger core would be required to contain the entire process
     image.

 -- Data: resource.RLIMIT_CPU

     The maximum amount of processor time (in seconds) that a process
     can use.  If this limit is exceeded, a ‘SIGXCPU’ signal is sent to
     the process.  (See the *note signal: e8. module documentation for
     information about how to catch this signal and do something useful,
     e.g.  flush open files to disk.)

 -- Data: resource.RLIMIT_FSIZE

     The maximum size of a file which the process may create.  This only
     affects the stack of the main thread in a multi-threaded process.

 -- Data: resource.RLIMIT_DATA

     The maximum size (in bytes) of the process’s heap.

 -- Data: resource.RLIMIT_STACK

     The maximum size (in bytes) of the call stack for the current
     process.

 -- Data: resource.RLIMIT_RSS

     The maximum resident set size that should be made available to the
     process.

 -- Data: resource.RLIMIT_NPROC

     The maximum number of processes the current process may create.

 -- Data: resource.RLIMIT_NOFILE

     The maximum number of open file descriptors for the current
     process.

 -- Data: resource.RLIMIT_OFILE

     The BSD name for *note RLIMIT_NOFILE: 3245.

 -- Data: resource.RLIMIT_MEMLOCK

     The maximum address space which may be locked in memory.

 -- Data: resource.RLIMIT_VMEM

     The largest area of mapped memory which the process may occupy.

 -- Data: resource.RLIMIT_AS

     The maximum area (in bytes) of address space which may be taken by
     the process.

 -- Data: resource.RLIMIT_MSGQUEUE

     The number of bytes that can be allocated for POSIX message queues.

     Availability: Linux 2.6.8 or later.

     New in version 3.4.

 -- Data: resource.RLIMIT_NICE

     The ceiling for the process’s nice level (calculated as 20 -
     rlim_cur).

     Availability: Linux 2.6.12 or later.

     New in version 3.4.

 -- Data: resource.RLIMIT_RTPRIO

     The ceiling of the real-time priority.

     Availability: Linux 2.6.12 or later.

     New in version 3.4.

 -- Data: resource.RLIMIT_RTTIME

     The time limit (in microseconds) on CPU time that a process can
     spend under real-time scheduling without making a blocking syscall.

     Availability: Linux 2.6.25 or later.

     New in version 3.4.

 -- Data: resource.RLIMIT_SIGPENDING

     The number of signals which the process may queue.

     Availability: Linux 2.6.8 or later.

     New in version 3.4.

 -- Data: resource.RLIMIT_SBSIZE

     The maximum size (in bytes) of socket buffer usage for this user.
     This limits the amount of network memory, and hence the amount of
     mbufs, that this user may hold at any time.

     Availability: FreeBSD 9 or later.

     New in version 3.4.

 -- Data: resource.RLIMIT_SWAP

     The maximum size (in bytes) of the swap space that may be reserved
     or used by all of this user id’s processes.  This limit is enforced
     only if bit 1 of the vm.overcommit sysctl is set.  Please see
     ‘tuning(7)’ for a complete description of this sysctl.

     Availability: FreeBSD 9 or later.

     New in version 3.4.

 -- Data: resource.RLIMIT_NPTS

     The maximum number of pseudo-terminals created by this user id.

     Availability: FreeBSD 9 or later.

     New in version 3.4.


File: python.info,  Node: Resource Usage,  Prev: Resource Limits,  Up: resource --- Resource usage information

5.35.11.2 Resource Usage
........................

These functions are used to retrieve resource usage information:

 -- Function: resource.getrusage (who)

     This function returns an object that describes the resources
     consumed by either the current process or its children, as
     specified by the `who' parameter.  The `who' parameter should be
     specified using one of the ‘RUSAGE_*’ constants described below.

     The fields of the return value each describe how a particular
     system resource has been used, e.g.  amount of time spent running
     is user mode or number of times the process was swapped out of main
     memory.  Some values are dependent on the clock tick internal, e.g.
     the amount of memory the process is using.

     For backward compatibility, the return value is also accessible as
     a tuple of 16 elements.

     The fields ‘ru_utime’ and ‘ru_stime’ of the return value are
     floating point values representing the amount of time spent
     executing in user mode and the amount of time spent executing in
     system mode, respectively.  The remaining values are integers.
     Consult the ‘getrusage(2)’ man page for detailed information about
     these values.  A brief summary is presented here:

     Index        Field                     Resource
                                            
     ---------------------------------------------------------------------------
                                            
     ‘0’          ‘ru_utime’                time in user mode (float)
                                            
                                            
     ‘1’          ‘ru_stime’                time in system mode (float)
                                            
                                            
     ‘2’          ‘ru_maxrss’               maximum resident set size
                                            
                                            
     ‘3’          ‘ru_ixrss’                shared memory size
                                            
                                            
     ‘4’          ‘ru_idrss’                unshared memory size
                                            
                                            
     ‘5’          ‘ru_isrss’                unshared stack size
                                            
                                            
     ‘6’          ‘ru_minflt’               page faults not requiring I/O
                                            
                                            
     ‘7’          ‘ru_majflt’               page faults requiring I/O
                                            
                                            
     ‘8’          ‘ru_nswap’                number of swap outs
                                            
                                            
     ‘9’          ‘ru_inblock’              block input operations
                                            
                                            
     ‘10’         ‘ru_oublock’              block output operations
                                            
                                            
     ‘11’         ‘ru_msgsnd’               messages sent
                                            
                                            
     ‘12’         ‘ru_msgrcv’               messages received
                                            
                                            
     ‘13’         ‘ru_nsignals’             signals received
                                            
                                            
     ‘14’         ‘ru_nvcsw’                voluntary context switches
                                            
                                            
     ‘15’         ‘ru_nivcsw’               involuntary context switches
                                            

     This function will raise a *note ValueError: 19c. if an invalid
     `who' parameter is specified.  It may also raise *note error: 323b.
     exception in unusual circumstances.

 -- Function: resource.getpagesize ()

     Returns the number of bytes in a system page.  (This need not be
     the same as the hardware page size.)

The following ‘RUSAGE_*’ symbols are passed to the *note getrusage():
a15. function to specify which processes information should be provided
for.

 -- Data: resource.RUSAGE_SELF

     Pass to *note getrusage(): a15. to request resources consumed by
     the calling process, which is the sum of resources used by all
     threads in the process.

 -- Data: resource.RUSAGE_CHILDREN

     Pass to *note getrusage(): a15. to request resources consumed by
     child processes of the calling process which have been terminated
     and waited for.

 -- Data: resource.RUSAGE_BOTH

     Pass to *note getrusage(): a15. to request resources consumed by
     both the current process and child processes.  May not be available
     on all systems.

 -- Data: resource.RUSAGE_THREAD

     Pass to *note getrusage(): a15. to request resources consumed by
     the current thread.  May not be available on all systems.

     New in version 3.2.


File: python.info,  Node: nis --- Interface to Sun's NIS Yellow Pages,  Next: syslog --- Unix syslog library routines,  Prev: resource --- Resource usage information,  Up: Unix Specific Services

5.35.12 ‘nis’ — Interface to Sun’s NIS (Yellow Pages)
-----------------------------------------------------

The *note nis: bd. module gives a thin wrapper around the NIS library,
useful for central administration of several hosts.

Because NIS exists only on Unix systems, this module is only available
for Unix.

The *note nis: bd. module defines the following functions:

 -- Function: nis.match (key, mapname, domain=default_domain)

     Return the match for `key' in map `mapname', or raise an error
     (*note nis.error: 3252.) if there is none.  Both should be strings,
     `key' is 8-bit clean.  Return value is an arbitrary array of bytes
     (may contain ‘NULL’ and other joys).

     Note that `mapname' is first checked if it is an alias to another
     name.

     The `domain' argument allows overriding the NIS domain used for the
     lookup.  If unspecified, lookup is in the default NIS domain.

 -- Function: nis.cat (mapname, domain=default_domain)

     Return a dictionary mapping `key' to `value' such that ‘match(key,
     mapname)==value’.  Note that both keys and values of the dictionary
     are arbitrary arrays of bytes.

     Note that `mapname' is first checked if it is an alias to another
     name.

     The `domain' argument allows overriding the NIS domain used for the
     lookup.  If unspecified, lookup is in the default NIS domain.

 -- Function: nis.maps (domain=default_domain)

     Return a list of all valid maps.

     The `domain' argument allows overriding the NIS domain used for the
     lookup.  If unspecified, lookup is in the default NIS domain.

 -- Function: nis.get_default_domain ()

     Return the system default NIS domain.

The *note nis: bd. module defines the following exception:

 -- Exception: nis.error

     An error raised when a NIS function returns an error code.


File: python.info,  Node: syslog --- Unix syslog library routines,  Prev: nis --- Interface to Sun's NIS Yellow Pages,  Up: Unix Specific Services

5.35.13 ‘syslog’ — Unix syslog library routines
-----------------------------------------------

This module provides an interface to the Unix ‘syslog’ library routines.
Refer to the Unix manual pages for a detailed description of the
‘syslog’ facility.

This module wraps the system ‘syslog’ family of routines.  A pure Python
library that can speak to a syslog server is available in the *note
logging.handlers: aa. module as ‘SysLogHandler’.

The module defines the following functions:

 -- Function: syslog.syslog (message)

 -- Function: syslog.syslog (priority, message)

     Send the string `message' to the system logger.  A trailing newline
     is added if necessary.  Each message is tagged with a priority
     composed of a `facility' and a `level'.  The optional `priority'
     argument, which defaults to ‘LOG_INFO’, determines the message
     priority.  If the facility is not encoded in `priority' using
     logical-or (‘LOG_INFO | LOG_USER’), the value given in the *note
     openlog(): 3258. call is used.

     If *note openlog(): 3258. has not been called prior to the call to
     *note syslog(): fd, ‘openlog()’ will be called with no arguments.

 -- Function: syslog.openlog ([ident[, logoption[, facility]]])

     Logging options of subsequent *note syslog(): fd. calls can be set
     by calling *note openlog(): 3258.  *note syslog(): fd. will call
     *note openlog(): 3258. with no arguments if the log is not
     currently open.

     The optional `ident' keyword argument is a string which is
     prepended to every message, and defaults to ‘sys.argv[0]’ with
     leading path components stripped.  The optional `logoption' keyword
     argument (default is 0) is a bit field – see below for possible
     values to combine.  The optional `facility' keyword argument
     (default is ‘LOG_USER’) sets the default facility for messages
     which do not have a facility explicitly encoded.

     Changed in version 3.2: In previous versions, keyword arguments
     were not allowed, and `ident' was required.  The default for
     `ident' was dependent on the system libraries, and often was
     ‘python’ instead of the name of the python program file.

 -- Function: syslog.closelog ()

     Reset the syslog module values and call the system library
     ‘closelog()’.

     This causes the module to behave as it does when initially
     imported.  For example, *note openlog(): 3258. will be called on
     the first *note syslog(): fd. call (if *note openlog(): 3258.
     hasn’t already been called), and `ident' and other *note openlog():
     3258. parameters are reset to defaults.

 -- Function: syslog.setlogmask (maskpri)

     Set the priority mask to `maskpri' and return the previous mask
     value.  Calls to *note syslog(): fd. with a priority level not set
     in `maskpri' are ignored.  The default is to log all priorities.
     The function ‘LOG_MASK(pri)’ calculates the mask for the individual
     priority `pri'.  The function ‘LOG_UPTO(pri)’ calculates the mask
     for all priorities up to and including `pri'.

The module defines the following constants:

Priority levels (high to low):

     ‘LOG_EMERG’, ‘LOG_ALERT’, ‘LOG_CRIT’, ‘LOG_ERR’, ‘LOG_WARNING’,
     ‘LOG_NOTICE’, ‘LOG_INFO’, ‘LOG_DEBUG’.

Facilities:

     ‘LOG_KERN’, ‘LOG_USER’, ‘LOG_MAIL’, ‘LOG_DAEMON’, ‘LOG_AUTH’,
     ‘LOG_LPR’, ‘LOG_NEWS’, ‘LOG_UUCP’, ‘LOG_CRON’, ‘LOG_SYSLOG’,
     ‘LOG_LOCAL0’ to ‘LOG_LOCAL7’, and, if defined in ‘<syslog.h>’,
     ‘LOG_AUTHPRIV’.

Log options:

     ‘LOG_PID’, ‘LOG_CONS’, ‘LOG_NDELAY’, and, if defined in
     ‘<syslog.h>’, ‘LOG_ODELAY’, ‘LOG_NOWAIT’, and ‘LOG_PERROR’.

* Menu:

* Examples: Examples<26>. 


File: python.info,  Node: Examples<26>,  Up: syslog --- Unix syslog library routines

5.35.13.1 Examples
..................

* Menu:

* Simple example:: 


File: python.info,  Node: Simple example,  Up: Examples<26>

5.35.13.2 Simple example
........................

A simple set of examples:

     import syslog

     syslog.syslog('Processing started')
     if error:
         syslog.syslog(syslog.LOG_ERR, 'Processing started')

An example of setting some log options, these would include the process
ID in logged messages, and write the messages to the destination
facility used for mail logging:

     syslog.openlog(logoption=syslog.LOG_PID, facility=syslog.LOG_MAIL)
     syslog.syslog('E-mail processing initiated...')


File: python.info,  Node: Superseded Modules,  Next: Undocumented Modules,  Prev: Unix Specific Services,  Up: The Python Standard Library

5.36 Superseded Modules
=======================

The modules described in this chapter are deprecated and only kept for
backwards compatibility.  They have been superseded by other modules.

* Menu:

* optparse: optparse --- Parser for command line options. Parser for command line options
* imp: imp --- Access the import internals. Access the import internals


File: python.info,  Node: optparse --- Parser for command line options,  Next: imp --- Access the import internals,  Up: Superseded Modules

5.36.1 ‘optparse’ — Parser for command line options
---------------------------------------------------

Deprecated since version 3.2: The *note optparse: c1. module is
deprecated and will not be developed further; development will continue
with the *note argparse: 6. module.

`Source code:' Lib/optparse.py(1)

__________________________________________________________________

*note optparse: c1. is a more convenient, flexible, and powerful library
for parsing command-line options than the old *note getopt: 86. module.
*note optparse: c1. uses a more declarative style of command-line
parsing: you create an instance of *note OptionParser: 3262, populate it
with options, and parse the command line.  *note optparse: c1. allows
users to specify options in the conventional GNU/POSIX syntax, and
additionally generates usage and help messages for you.

Here’s an example of using *note optparse: c1. in a simple script:

     from optparse import OptionParser
     [...]
     parser = OptionParser()
     parser.add_option("-f", "--file", dest="filename",
                       help="write report to FILE", metavar="FILE")
     parser.add_option("-q", "--quiet",
                       action="store_false", dest="verbose", default=True,
                       help="don't print status messages to stdout")

     (options, args) = parser.parse_args()

With these few lines of code, users of your script can now do the "usual
thing" on the command-line, for example:

     <yourscript> --file=outfile -q

As it parses the command line, *note optparse: c1. sets attributes of
the ‘options’ object returned by ‘parse_args()’ based on user-supplied
command-line values.  When ‘parse_args()’ returns from parsing this
command line, ‘options.filename’ will be ‘"outfile"’ and
‘options.verbose’ will be ‘False’.  *note optparse: c1. supports both
long and short options, allows short options to be merged together, and
allows options to be associated with their arguments in a variety of
ways.  Thus, the following command lines are all equivalent to the above
example:

     <yourscript> -f outfile --quiet
     <yourscript> --quiet --file outfile
     <yourscript> -q -foutfile
     <yourscript> -qfoutfile

Additionally, users can run one of

     <yourscript> -h
     <yourscript> --help

and *note optparse: c1. will print out a brief summary of your script’s
options:

     Usage: <yourscript> [options]

     Options:
       -h, --help            show this help message and exit
       -f FILE, --file=FILE  write report to FILE
       -q, --quiet           don't print status messages to stdout

where the value of `yourscript' is determined at runtime (normally from
‘sys.argv[0]’).

* Menu:

* Background:: 
* Tutorial: Tutorial<2>. 
* Reference Guide:: 
* Option Callbacks:: 
* Extending optparse:: 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/default/Lib/optparse.py


File: python.info,  Node: Background,  Next: Tutorial<2>,  Up: optparse --- Parser for command line options

5.36.1.1 Background
...................

*note optparse: c1. was explicitly designed to encourage the creation of
programs with straightforward, conventional command-line interfaces.  To
that end, it supports only the most common command-line syntax and
semantics conventionally used under Unix.  If you are unfamiliar with
these conventions, read this section to acquaint yourself with them.

* Menu:

* Terminology:: 
* What are options for?:: 
* What are positional arguments for?:: 


File: python.info,  Node: Terminology,  Next: What are options for?,  Up: Background

5.36.1.2 Terminology
....................

argument

     a string entered on the command-line, and passed by the shell to
     ‘execl()’ or ‘execv()’.  In Python, arguments are elements of
     ‘sys.argv[1:]’ (‘sys.argv[0]’ is the name of the program being
     executed).  Unix shells also use the term "word".

     It is occasionally desirable to substitute an argument list other
     than ‘sys.argv[1:]’, so you should read "argument" as "an element
     of ‘sys.argv[1:]’, or of some other list provided as a substitute
     for ‘sys.argv[1:]’".

option

     an argument used to supply extra information to guide or customize
     the execution of a program.  There are many different syntaxes for
     options; the traditional Unix syntax is a hyphen ("-") followed by
     a single letter, e.g.  ‘-x’ or ‘-F’.  Also, traditional Unix syntax
     allows multiple options to be merged into a single argument, e.g.
     ‘-x -F’ is equivalent to ‘-xF’.  The GNU project introduced ‘--’
     followed by a series of hyphen-separated words, e.g.  ‘--file’ or
     ‘--dry-run’.  These are the only two option syntaxes provided by
     *note optparse: c1.

     Some other option syntaxes that the world has seen include:

        * a hyphen followed by a few letters, e.g.  ‘-pf’ (this is `not'
          the same as multiple options merged into a single argument)

        * a hyphen followed by a whole word, e.g.  ‘-file’ (this is
          technically equivalent to the previous syntax, but they aren’t
          usually seen in the same program)

        * a plus sign followed by a single letter, or a few letters, or
          a word, e.g.  ‘+f’, ‘+rgb’

        * a slash followed by a letter, or a few letters, or a word,
          e.g.  ‘/f’, ‘/file’

     These option syntaxes are not supported by *note optparse: c1, and
     they never will be.  This is deliberate: the first three are
     non-standard on any environment, and the last only makes sense if
     you’re exclusively targeting VMS, MS-DOS, and/or Windows.

option argument

     an argument that follows an option, is closely associated with that
     option, and is consumed from the argument list when that option is.
     With *note optparse: c1, option arguments may either be in a
     separate argument from their option:

          -f foo
          --file foo

     or included in the same argument:

          -ffoo
          --file=foo

     Typically, a given option either takes an argument or it doesn’t.
     Lots of people want an "optional option arguments" feature, meaning
     that some options will take an argument if they see it, and won’t
     if they don’t.  This is somewhat controversial, because it makes
     parsing ambiguous: if ‘-a’ takes an optional argument and ‘-b’ is
     another option entirely, how do we interpret ‘-ab’?  Because of
     this ambiguity, *note optparse: c1. does not support this feature.

positional argument

     something leftover in the argument list after options have been
     parsed, i.e.  after options and their arguments have been parsed
     and removed from the argument list.

required option

     an option that must be supplied on the command-line; note that the
     phrase "required option" is self-contradictory in English.  *note
     optparse: c1. doesn’t prevent you from implementing required
     options, but doesn’t give you much help at it either.

For example, consider this hypothetical command-line:

     prog -v --report report.txt foo bar

‘-v’ and ‘--report’ are both options.  Assuming that ‘--report’ takes
one argument, ‘report.txt’ is an option argument.  ‘foo’ and ‘bar’ are
positional arguments.


File: python.info,  Node: What are options for?,  Next: What are positional arguments for?,  Prev: Terminology,  Up: Background

5.36.1.3 What are options for?
..............................

Options are used to provide extra information to tune or customize the
execution of a program.  In case it wasn’t clear, options are usually
`optional'.  A program should be able to run just fine with no options
whatsoever.  (Pick a random program from the Unix or GNU toolsets.  Can
it run without any options at all and still make sense?  The main
exceptions are ‘find’, ‘tar’, and ‘dd’—all of which are mutant oddballs
that have been rightly criticized for their non-standard syntax and
confusing interfaces.)

Lots of people want their programs to have "required options".  Think
about it.  If it’s required, then it’s `not optional'!  If there is a
piece of information that your program absolutely requires in order to
run successfully, that’s what positional arguments are for.

As an example of good command-line interface design, consider the humble
‘cp’ utility, for copying files.  It doesn’t make much sense to try to
copy files without supplying a destination and at least one source.
Hence, ‘cp’ fails if you run it with no arguments.  However, it has a
flexible, useful syntax that does not require any options at all:

     cp SOURCE DEST
     cp SOURCE ... DEST-DIR

You can get pretty far with just that.  Most ‘cp’ implementations
provide a bunch of options to tweak exactly how the files are copied:
you can preserve mode and modification time, avoid following symlinks,
ask before clobbering existing files, etc.  But none of this distracts
from the core mission of ‘cp’, which is to copy either one file to
another, or several files to another directory.


File: python.info,  Node: What are positional arguments for?,  Prev: What are options for?,  Up: Background

5.36.1.4 What are positional arguments for?
...........................................

Positional arguments are for those pieces of information that your
program absolutely, positively requires to run.

A good user interface should have as few absolute requirements as
possible.  If your program requires 17 distinct pieces of information in
order to run successfully, it doesn’t much matter `how' you get that
information from the user—most people will give up and walk away before
they successfully run the program.  This applies whether the user
interface is a command-line, a configuration file, or a GUI: if you make
that many demands on your users, most of them will simply give up.

In short, try to minimize the amount of information that users are
absolutely required to supply—use sensible defaults whenever possible.
Of course, you also want to make your programs reasonably flexible.
That’s what options are for.  Again, it doesn’t matter if they are
entries in a config file, widgets in the "Preferences" dialog of a GUI,
or command-line options—the more options you implement, the more
flexible your program is, and the more complicated its implementation
becomes.  Too much flexibility has drawbacks as well, of course; too
many options can overwhelm users and make your code much harder to
maintain.


File: python.info,  Node: Tutorial<2>,  Next: Reference Guide,  Prev: Background,  Up: optparse --- Parser for command line options

5.36.1.5 Tutorial
.................

While *note optparse: c1. is quite flexible and powerful, it’s also
straightforward to use in most cases.  This section covers the code
patterns that are common to any *note optparse: c1.-based program.

First, you need to import the OptionParser class; then, early in the
main program, create an OptionParser instance:

     from optparse import OptionParser
     [...]
     parser = OptionParser()

Then you can start defining options.  The basic syntax is:

     parser.add_option(opt_str, ...,
                       attr=value, ...)

Each option has one or more option strings, such as ‘-f’ or ‘--file’,
and several option attributes that tell *note optparse: c1. what to
expect and what to do when it encounters that option on the command
line.

Typically, each option will have one short option string and one long
option string, e.g.:

     parser.add_option("-f", "--file", ...)

You’re free to define as many short option strings and as many long
option strings as you like (including zero), as long as there is at
least one option string overall.

The option strings passed to *note OptionParser.add_option(): 19c9. are
effectively labels for the option defined by that call.  For brevity, we
will frequently refer to `encountering an option' on the command line;
in reality, *note optparse: c1. encounters `option strings' and looks up
options from them.

Once all of your options are defined, instruct *note optparse: c1. to
parse your program’s command line:

     (options, args) = parser.parse_args()

(If you like, you can pass a custom argument list to ‘parse_args()’, but
that’s rarely necessary: by default it uses ‘sys.argv[1:]’.)

‘parse_args()’ returns two values:

   * ‘options’, an object containing values for all of your options—e.g.
     if ‘--file’ takes a single string argument, then ‘options.file’
     will be the filename supplied by the user, or ‘None’ if the user
     did not supply that option

   * ‘args’, the list of positional arguments leftover after parsing
     options

This tutorial section only covers the four most important option
attributes: *note action: 326d, *note type: 326e, *note dest: 326f.
(destination), and *note help: 3270.  Of these, *note action: 326d. is
the most fundamental.

* Menu:

* Understanding option actions:: 
* The store action:: 
* Handling boolean (flag) options: Handling boolean flag options. 
* Other actions:: 
* Default values:: 
* Generating help:: 
* Printing a version string:: 
* How optparse handles errors:: 
* Putting it all together:: 


File: python.info,  Node: Understanding option actions,  Next: The store action,  Up: Tutorial<2>

5.36.1.6 Understanding option actions
.....................................

Actions tell *note optparse: c1. what to do when it encounters an option
on the command line.  There is a fixed set of actions hard-coded into
*note optparse: c1.; adding new actions is an advanced topic covered in
section *note Extending optparse: 3273.  Most actions tell *note
optparse: c1. to store a value in some variable—for example, take a
string from the command line and store it in an attribute of ‘options’.

If you don’t specify an option action, *note optparse: c1. defaults to
‘store’.


File: python.info,  Node: The store action,  Next: Handling boolean flag options,  Prev: Understanding option actions,  Up: Tutorial<2>

5.36.1.7 The store action
.........................

The most common option action is ‘store’, which tells *note optparse:
c1. to take the next argument (or the remainder of the current
argument), ensure that it is of the correct type, and store it to your
chosen destination.

For example:

     parser.add_option("-f", "--file",
                       action="store", type="string", dest="filename")

Now let’s make up a fake command line and ask *note optparse: c1. to
parse it:

     args = ["-f", "foo.txt"]
     (options, args) = parser.parse_args(args)

When *note optparse: c1. sees the option string ‘-f’, it consumes the
next argument, ‘foo.txt’, and stores it in ‘options.filename’.  So,
after this call to ‘parse_args()’, ‘options.filename’ is ‘"foo.txt"’.

Some other option types supported by *note optparse: c1. are ‘int’ and
‘float’.  Here’s an option that expects an integer argument:

     parser.add_option("-n", type="int", dest="num")

Note that this option has no long option string, which is perfectly
acceptable.  Also, there’s no explicit action, since the default is
‘store’.

Let’s parse another fake command-line.  This time, we’ll jam the option
argument right up against the option: since ‘-n42’ (one argument) is
equivalent to ‘-n 42’ (two arguments), the code

     (options, args) = parser.parse_args(["-n42"])
     print(options.num)

will print ‘42’.

If you don’t specify a type, *note optparse: c1. assumes ‘string’.
Combined with the fact that the default action is ‘store’, that means
our first example can be a lot shorter:

     parser.add_option("-f", "--file", dest="filename")

If you don’t supply a destination, *note optparse: c1. figures out a
sensible default from the option strings: if the first long option
string is ‘--foo-bar’, then the default destination is ‘foo_bar’.  If
there are no long option strings, *note optparse: c1. looks at the first
short option string: the default destination for ‘-f’ is ‘f’.

*note optparse: c1. also includes the built-in ‘complex’ type.  Adding
types is covered in section *note Extending optparse: 3273.


File: python.info,  Node: Handling boolean flag options,  Next: Other actions,  Prev: The store action,  Up: Tutorial<2>

5.36.1.8 Handling boolean (flag) options
........................................

Flag options—set a variable to true or false when a particular option is
seen —are quite common.  *note optparse: c1. supports them with two
separate actions, ‘store_true’ and ‘store_false’.  For example, you
might have a ‘verbose’ flag that is turned on with ‘-v’ and off with
‘-q’:

     parser.add_option("-v", action="store_true", dest="verbose")
     parser.add_option("-q", action="store_false", dest="verbose")

Here we have two different options with the same destination, which is
perfectly OK. (It just means you have to be a bit careful when setting
default values— see below.)

When *note optparse: c1. encounters ‘-v’ on the command line, it sets
‘options.verbose’ to ‘True’; when it encounters ‘-q’, ‘options.verbose’
is set to ‘False’.


File: python.info,  Node: Other actions,  Next: Default values,  Prev: Handling boolean flag options,  Up: Tutorial<2>

5.36.1.9 Other actions
......................

Some other actions supported by *note optparse: c1. are:

‘"store_const"’

     store a constant value

‘"append"’

     append this option’s argument to a list

‘"count"’

     increment a counter by one

‘"callback"’

     call a specified function

These are covered in section *note Reference Guide: 327a, Reference
Guide and section *note Option Callbacks: 327b.


File: python.info,  Node: Default values,  Next: Generating help,  Prev: Other actions,  Up: Tutorial<2>

5.36.1.10 Default values
........................

All of the above examples involve setting some variable (the
"destination") when certain command-line options are seen.  What happens
if those options are never seen?  Since we didn’t supply any defaults,
they are all set to ‘None’.  This is usually fine, but sometimes you
want more control.  *note optparse: c1. lets you supply a default value
for each destination, which is assigned before the command line is
parsed.

First, consider the verbose/quiet example.  If we want *note optparse:
c1. to set ‘verbose’ to ‘True’ unless ‘-q’ is seen, then we can do this:

     parser.add_option("-v", action="store_true", dest="verbose", default=True)
     parser.add_option("-q", action="store_false", dest="verbose")

Since default values apply to the `destination' rather than to any
particular option, and these two options happen to have the same
destination, this is exactly equivalent:

     parser.add_option("-v", action="store_true", dest="verbose")
     parser.add_option("-q", action="store_false", dest="verbose", default=True)

Consider this:

     parser.add_option("-v", action="store_true", dest="verbose", default=False)
     parser.add_option("-q", action="store_false", dest="verbose", default=True)

Again, the default value for ‘verbose’ will be ‘True’: the last default
value supplied for any particular destination is the one that counts.

A clearer way to specify default values is the ‘set_defaults()’ method
of OptionParser, which you can call at any time before calling
‘parse_args()’:

     parser.set_defaults(verbose=True)
     parser.add_option(...)
     (options, args) = parser.parse_args()

As before, the last value specified for a given option destination is
the one that counts.  For clarity, try to use one method or the other of
setting default values, not both.


File: python.info,  Node: Generating help,  Next: Printing a version string,  Prev: Default values,  Up: Tutorial<2>

5.36.1.11 Generating help
.........................

*note optparse: c1.’s ability to generate help and usage text
automatically is useful for creating user-friendly command-line
interfaces.  All you have to do is supply a *note help: 3270. value for
each option, and optionally a short usage message for your whole
program.  Here’s an OptionParser populated with user-friendly
(documented) options:

     usage = "usage: %prog [options] arg1 arg2"
     parser = OptionParser(usage=usage)
     parser.add_option("-v", "--verbose",
                       action="store_true", dest="verbose", default=True,
                       help="make lots of noise [default]")
     parser.add_option("-q", "--quiet",
                       action="store_false", dest="verbose",
                       help="be vewwy quiet (I'm hunting wabbits)")
     parser.add_option("-f", "--filename",
                       metavar="FILE", help="write output to FILE")
     parser.add_option("-m", "--mode",
                       default="intermediate",
                       help="interaction mode: novice, intermediate, "
                            "or expert [default: %default]")

If *note optparse: c1. encounters either ‘-h’ or ‘--help’ on the
command-line, or if you just call ‘parser.print_help()’, it prints the
following to standard output:

     Usage: <yourscript> [options] arg1 arg2

     Options:
       -h, --help            show this help message and exit
       -v, --verbose         make lots of noise [default]
       -q, --quiet           be vewwy quiet (I'm hunting wabbits)
       -f FILE, --filename=FILE
                             write output to FILE
       -m MODE, --mode=MODE  interaction mode: novice, intermediate, or
                             expert [default: intermediate]

(If the help output is triggered by a help option, *note optparse: c1.
exits after printing the help text.)

There’s a lot going on here to help *note optparse: c1. generate the
best possible help message:

   * the script defines its own usage message:

          usage = "usage: %prog [options] arg1 arg2"

     *note optparse: c1. expands ‘%prog’ in the usage string to the name
     of the current program, i.e.  ‘os.path.basename(sys.argv[0])’.  The
     expanded string is then printed before the detailed option help.

     If you don’t supply a usage string, *note optparse: c1. uses a
     bland but sensible default: ‘"Usage: %prog [options]"’, which is
     fine if your script doesn’t take any positional arguments.

   * every option defines a help string, and doesn’t worry about
     line-wrapping— *note optparse: c1. takes care of wrapping lines and
     making the help output look good.

   * options that take a value indicate this fact in their
     automatically-generated help message, e.g.  for the "mode" option:

          -m MODE, --mode=MODE

     Here, "MODE" is called the meta-variable: it stands for the
     argument that the user is expected to supply to ‘-m’/‘--mode’.  By
     default, *note optparse: c1. converts the destination variable name
     to uppercase and uses that for the meta-variable.  Sometimes,
     that’s not what you want—for example, the ‘--filename’ option
     explicitly sets ‘metavar="FILE"’, resulting in this
     automatically-generated option description:

          -f FILE, --filename=FILE

     This is important for more than just saving space, though: the
     manually written help text uses the meta-variable ‘FILE’ to clue
     the user in that there’s a connection between the semi-formal
     syntax ‘-f FILE’ and the informal semantic description "write
     output to FILE". This is a simple but effective way to make your
     help text a lot clearer and more useful for end users.

   * options that have a default value can include ‘%default’ in the
     help string—*note optparse: c1. will replace it with *note str():
     25a. of the option’s default value.  If an option has no default
     value (or the default value is ‘None’), ‘%default’ expands to
     ‘none’.

* Menu:

* Grouping Options:: 


File: python.info,  Node: Grouping Options,  Up: Generating help

5.36.1.12 Grouping Options
..........................

When dealing with many options, it is convenient to group these options
for better help output.  An *note OptionParser: 3262. can contain
several option groups, each of which can contain several options.

An option group is obtained using the class *note OptionGroup: 3281.:

 -- Class: optparse.OptionGroup (parser, title, description=None)

     where

        * parser is the *note OptionParser: 3262. instance the group
          will be insterted in to

        * title is the group title

        * description, optional, is a long description of the group

*note OptionGroup: 3281. inherits from ‘OptionContainer’ (like *note
OptionParser: 3262.) and so the ‘add_option()’ method can be used to add
an option to the group.

Once all the options are declared, using the *note OptionParser: 3262.
method ‘add_option_group()’ the group is added to the previously defined
parser.

Continuing with the parser defined in the previous section, adding an
*note OptionGroup: 3281. to a parser is easy:

     group = OptionGroup(parser, "Dangerous Options",
                         "Caution: use these options at your own risk.  "
                         "It is believed that some of them bite.")
     group.add_option("-g", action="store_true", help="Group option.")
     parser.add_option_group(group)

This would result in the following help output:

     Usage: <yourscript> [options] arg1 arg2

     Options:
       -h, --help            show this help message and exit
       -v, --verbose         make lots of noise [default]
       -q, --quiet           be vewwy quiet (I'm hunting wabbits)
       -f FILE, --filename=FILE
                             write output to FILE
       -m MODE, --mode=MODE  interaction mode: novice, intermediate, or
                             expert [default: intermediate]

       Dangerous Options:
         Caution: use these options at your own risk.  It is believed that some
         of them bite.

         -g                  Group option.

A bit more complete example might involve using more than one group:
still extending the previous example:

     group = OptionGroup(parser, "Dangerous Options",
                         "Caution: use these options at your own risk.  "
                         "It is believed that some of them bite.")
     group.add_option("-g", action="store_true", help="Group option.")
     parser.add_option_group(group)

     group = OptionGroup(parser, "Debug Options")
     group.add_option("-d", "--debug", action="store_true",
                      help="Print debug information")
     group.add_option("-s", "--sql", action="store_true",
                      help="Print all SQL statements executed")
     group.add_option("-e", action="store_true", help="Print every action done")
     parser.add_option_group(group)

that results in the following output:

     Usage: <yourscript> [options] arg1 arg2

     Options:
       -h, --help            show this help message and exit
       -v, --verbose         make lots of noise [default]
       -q, --quiet           be vewwy quiet (I'm hunting wabbits)
       -f FILE, --filename=FILE
                             write output to FILE
       -m MODE, --mode=MODE  interaction mode: novice, intermediate, or expert
                             [default: intermediate]

       Dangerous Options:
         Caution: use these options at your own risk.  It is believed that some
         of them bite.

         -g                  Group option.

       Debug Options:
         -d, --debug         Print debug information
         -s, --sql           Print all SQL statements executed
         -e                  Print every action done

Another interesting method, in particular when working programmatically
with option groups is:

 -- Method: OptionParser.get_option_group (opt_str)

     Return the *note OptionGroup: 3281. to which the short or long
     option string `opt_str' (e.g.  ‘'-o'’ or ‘'--option'’) belongs.  If
     there’s no such *note OptionGroup: 3281, return ‘None’.


File: python.info,  Node: Printing a version string,  Next: How optparse handles errors,  Prev: Generating help,  Up: Tutorial<2>

5.36.1.13 Printing a version string
...................................

Similar to the brief usage string, *note optparse: c1. can also print a
version string for your program.  You have to supply the string as the
‘version’ argument to OptionParser:

     parser = OptionParser(usage="%prog [-f] [-q]", version="%prog 1.0")

‘%prog’ is expanded just like it is in ‘usage’.  Apart from that,
‘version’ can contain anything you like.  When you supply it, *note
optparse: c1. automatically adds a ‘--version’ option to your parser.
If it encounters this option on the command line, it expands your
‘version’ string (by replacing ‘%prog’), prints it to stdout, and exits.

For example, if your script is called ‘/usr/bin/foo’:

     $ /usr/bin/foo --version
     foo 1.0

The following two methods can be used to print and get the ‘version’
string:

 -- Method: OptionParser.print_version (file=None)

     Print the version message for the current program (‘self.version’)
     to `file' (default stdout).  As with *note print_usage(): 3286, any
     occurrence of ‘%prog’ in ‘self.version’ is replaced with the name
     of the current program.  Does nothing if ‘self.version’ is empty or
     undefined.

 -- Method: OptionParser.get_version ()

     Same as *note print_version(): 3285. but returns the version string
     instead of printing it.


File: python.info,  Node: How optparse handles errors,  Next: Putting it all together,  Prev: Printing a version string,  Up: Tutorial<2>

5.36.1.14 How ‘optparse’ handles errors
.......................................

There are two broad classes of errors that *note optparse: c1. has to
worry about: programmer errors and user errors.  Programmer errors are
usually erroneous calls to *note OptionParser.add_option(): 19c9, e.g.
invalid option strings, unknown option attributes, missing option
attributes, etc.  These are dealt with in the usual way: raise an
exception (either ‘optparse.OptionError’ or *note TypeError: 562.) and
let the program crash.

Handling user errors is much more important, since they are guaranteed
to happen no matter how stable your code is.  *note optparse: c1. can
automatically detect some user errors, such as bad option arguments
(passing ‘-n 4x’ where ‘-n’ takes an integer argument), missing
arguments (‘-n’ at the end of the command line, where ‘-n’ takes an
argument of any type).  Also, you can call ‘OptionParser.error()’ to
signal an application-defined error condition:

     (options, args) = parser.parse_args()
     [...]
     if options.a and options.b:
         parser.error("options -a and -b are mutually exclusive")

In either case, *note optparse: c1. handles the error the same way: it
prints the program’s usage message and an error message to standard
error and exits with error status 2.

Consider the first example above, where the user passes ‘4x’ to an
option that takes an integer:

     $ /usr/bin/foo -n 4x
     Usage: foo [options]

     foo: error: option -n: invalid integer value: '4x'

Or, where the user fails to pass a value at all:

     $ /usr/bin/foo -n
     Usage: foo [options]

     foo: error: -n option requires an argument

*note optparse: c1.-generated error messages take care always to mention
the option involved in the error; be sure to do the same when calling
‘OptionParser.error()’ from your application code.

If *note optparse: c1.’s default error-handling behaviour does not suit
your needs, you’ll need to subclass OptionParser and override its
‘exit()’ and/or ‘error()’ methods.


File: python.info,  Node: Putting it all together,  Prev: How optparse handles errors,  Up: Tutorial<2>

5.36.1.15 Putting it all together
.................................

Here’s what *note optparse: c1.-based scripts usually look like:

     from optparse import OptionParser
     [...]
     def main():
         usage = "usage: %prog [options] arg"
         parser = OptionParser(usage)
         parser.add_option("-f", "--file", dest="filename",
                           help="read data from FILENAME")
         parser.add_option("-v", "--verbose",
                           action="store_true", dest="verbose")
         parser.add_option("-q", "--quiet",
                           action="store_false", dest="verbose")
         [...]
         (options, args) = parser.parse_args()
         if len(args) != 1:
             parser.error("incorrect number of arguments")
         if options.verbose:
             print("reading %s..." % options.filename)
         [...]

     if __name__ == "__main__":
         main()


File: python.info,  Node: Reference Guide,  Next: Option Callbacks,  Prev: Tutorial<2>,  Up: optparse --- Parser for command line options

5.36.1.16 Reference Guide
.........................

* Menu:

* Creating the parser:: 
* Populating the parser:: 
* Defining options:: 
* Option attributes:: 
* Standard option actions:: 
* Standard option types:: 
* Parsing arguments: Parsing arguments<2>. 
* Querying and manipulating your option parser:: 
* Conflicts between options:: 
* Cleanup: Cleanup<2>. 
* Other methods:: 


File: python.info,  Node: Creating the parser,  Next: Populating the parser,  Up: Reference Guide

5.36.1.17 Creating the parser
.............................

The first step in using *note optparse: c1. is to create an OptionParser
instance.

 -- Class: optparse.OptionParser (...)

     The OptionParser constructor has no required arguments, but a
     number of optional keyword arguments.  You should always pass them
     as keyword arguments, i.e.  do not rely on the order in which the
     arguments are declared.

     ‘usage’ (default: ‘"%prog [options]"’)

          The usage summary to print when your program is run
          incorrectly or with a help option.  When *note optparse: c1.
          prints the usage string, it expands ‘%prog’ to
          ‘os.path.basename(sys.argv[0])’ (or to ‘prog’ if you passed
          that keyword argument).  To suppress a usage message, pass the
          special value ‘optparse.SUPPRESS_USAGE’.

     ‘option_list’ (default: ‘[]’)

          A list of Option objects to populate the parser with.  The
          options in ‘option_list’ are added after any options in
          ‘standard_option_list’ (a class attribute that may be set by
          OptionParser subclasses), but before any version or help
          options.  Deprecated; use *note add_option(): 19c9. after
          creating the parser instead.

     ‘option_class’ (default: optparse.Option)

          Class to use when adding options to the parser in *note
          add_option(): 19c9.

     ‘version’ (default: ‘None’)

          A version string to print when the user supplies a version
          option.  If you supply a true value for ‘version’, *note
          optparse: c1. automatically adds a version option with the
          single option string ‘--version’.  The substring ‘%prog’ is
          expanded the same as for ‘usage’.

     ‘conflict_handler’ (default: ‘"error"’)

          Specifies what to do when options with conflicting option
          strings are added to the parser; see section *note Conflicts
          between options: 328f.

     ‘description’ (default: ‘None’)

          A paragraph of text giving a brief overview of your program.
          *note optparse: c1. reformats this paragraph to fit the
          current terminal width and prints it when the user requests
          help (after ‘usage’, but before the list of options).

     ‘formatter’ (default: a new ‘IndentedHelpFormatter’)

          An instance of optparse.HelpFormatter that will be used for
          printing help text.  *note optparse: c1. provides two concrete
          classes for this purpose: IndentedHelpFormatter and
          TitledHelpFormatter.

     ‘add_help_option’ (default: ‘True’)

          If true, *note optparse: c1. will add a help option (with
          option strings ‘-h’ and ‘--help’) to the parser.

     ‘prog’

          The string to use when expanding ‘%prog’ in ‘usage’ and
          ‘version’ instead of ‘os.path.basename(sys.argv[0])’.

     ‘epilog’ (default: ‘None’)

          A paragraph of help text to print after the option help.


File: python.info,  Node: Populating the parser,  Next: Defining options,  Prev: Creating the parser,  Up: Reference Guide

5.36.1.18 Populating the parser
...............................

There are several ways to populate the parser with options.  The
preferred way is by using *note OptionParser.add_option(): 19c9, as
shown in section *note Tutorial: 326c.  ‘add_option()’ can be called in
one of two ways:

   * pass it an Option instance (as returned by ‘make_option()’)

   * pass it any combination of positional and keyword arguments that
     are acceptable to ‘make_option()’ (i.e., to the Option
     constructor), and it will create the Option instance for you

The other alternative is to pass a list of pre-constructed Option
instances to the OptionParser constructor, as in:

     option_list = [
         make_option("-f", "--filename",
                     action="store", type="string", dest="filename"),
         make_option("-q", "--quiet",
                     action="store_false", dest="verbose"),
         ]
     parser = OptionParser(option_list=option_list)

(‘make_option()’ is a factory function for creating Option instances;
currently it is an alias for the Option constructor.  A future version
of *note optparse: c1. may split Option into several classes, and
‘make_option()’ will pick the right class to instantiate.  Do not
instantiate Option directly.)


File: python.info,  Node: Defining options,  Next: Option attributes,  Prev: Populating the parser,  Up: Reference Guide

5.36.1.19 Defining options
..........................

Each Option instance represents a set of synonymous command-line option
strings, e.g.  ‘-f’ and ‘--file’.  You can specify any number of short
or long option strings, but you must specify at least one overall option
string.

The canonical way to create an ‘Option’ instance is with the
‘add_option()’ method of *note OptionParser: 3262.

 -- Method: OptionParser.add_option (option)

 -- Method: OptionParser.add_option (*opt_str, attr=value, ...)

     To define an option with only a short option string:

          parser.add_option("-f", attr=value, ...)

     And to define an option with only a long option string:

          parser.add_option("--foo", attr=value, ...)

     The keyword arguments define attributes of the new Option object.
     The most important option attribute is *note action: 326d, and it
     largely determines which other attributes are relevant or required.
     If you pass irrelevant option attributes, or fail to pass required
     ones, *note optparse: c1. raises an ‘OptionError’ exception
     explaining your mistake.

     An option’s `action' determines what *note optparse: c1. does when
     it encounters this option on the command-line.  The standard option
     actions hard-coded into *note optparse: c1. are:

     ‘"store"’

          store this option’s argument (default)

     ‘"store_const"’

          store a constant value

     ‘"store_true"’

          store a true value

     ‘"store_false"’

          store a false value

     ‘"append"’

          append this option’s argument to a list

     ‘"append_const"’

          append a constant value to a list

     ‘"count"’

          increment a counter by one

     ‘"callback"’

          call a specified function

     ‘"help"’

          print a usage message including all options and the
          documentation for them

     (If you don’t supply an action, the default is ‘"store"’.  For this
     action, you may also supply *note type: 326e. and *note dest: 326f.
     option attributes; see *note Standard option actions: 3294.)

As you can see, most actions involve storing or updating a value
somewhere.  *note optparse: c1. always creates a special object for
this, conventionally called ‘options’ (it happens to be an instance of
‘optparse.Values’).  Option arguments (and various other values) are
stored as attributes of this object, according to the *note dest: 326f.
(destination) option attribute.

For example, when you call

     parser.parse_args()

one of the first things *note optparse: c1. does is create the ‘options’
object:

     options = Values()

If one of the options in this parser is defined with

     parser.add_option("-f", "--file", action="store", type="string", dest="filename")

and the command-line being parsed includes any of the following:

     -ffoo
     -f foo
     --file=foo
     --file foo

then *note optparse: c1, on seeing this option, will do the equivalent
of

     options.filename = "foo"

The *note type: 326e. and *note dest: 326f. option attributes are almost
as important as *note action: 326d, but *note action: 326d. is the only
one that makes sense for `all' options.


File: python.info,  Node: Option attributes,  Next: Standard option actions,  Prev: Defining options,  Up: Reference Guide

5.36.1.20 Option attributes
...........................

The following option attributes may be passed as keyword arguments to
*note OptionParser.add_option(): 19c9.  If you pass an option attribute
that is not relevant to a particular option, or fail to pass a required
option attribute, *note optparse: c1. raises ‘OptionError’.

 -- Attribute: Option.action

     (default: ‘"store"’)

     Determines *note optparse: c1.’s behaviour when this option is seen
     on the command line; the available options are documented *note
     here: 3294.

 -- Attribute: Option.type

     (default: ‘"string"’)

     The argument type expected by this option (e.g., ‘"string"’ or
     ‘"int"’); the available option types are documented *note here:
     3297.

 -- Attribute: Option.dest

     (default: derived from option strings)

     If the option’s action implies writing or modifying a value
     somewhere, this tells *note optparse: c1. where to write it: *note
     dest: 326f. names an attribute of the ‘options’ object that *note
     optparse: c1. builds as it parses the command line.

 -- Attribute: Option.default

     The value to use for this option’s destination if the option is not
     seen on the command line.  See also *note
     OptionParser.set_defaults(): 3299.

 -- Attribute: Option.nargs

     (default: 1)

     How many arguments of type *note type: 326e. should be consumed
     when this option is seen.  If > 1, *note optparse: c1. will store a
     tuple of values to *note dest: 326f.

 -- Attribute: Option.const

     For actions that store a constant value, the constant value to
     store.

 -- Attribute: Option.choices

     For options of type ‘"choice"’, the list of strings the user may
     choose from.

 -- Attribute: Option.callback

     For options with action ‘"callback"’, the callable to call when
     this option is seen.  See section *note Option Callbacks: 327b. for
     detail on the arguments passed to the callable.

 -- Attribute: Option.callback_args
 -- Attribute: Option.callback_kwargs

     Additional positional and keyword arguments to pass to ‘callback’
     after the four standard callback arguments.

 -- Attribute: Option.help

     Help text to print for this option when listing all available
     options after the user supplies a *note help: 3270. option (such as
     ‘--help’).  If no help text is supplied, the option will be listed
     without help text.  To hide this option, use the special value
     ‘optparse.SUPPRESS_HELP’.

 -- Attribute: Option.metavar

     (default: derived from option strings)

     Stand-in for the option argument(s) to use when printing help text.
     See section *note Tutorial: 326c. for an example.


File: python.info,  Node: Standard option actions,  Next: Standard option types,  Prev: Option attributes,  Up: Reference Guide

5.36.1.21 Standard option actions
.................................

The various option actions all have slightly different requirements and
effects.  Most actions have several relevant option attributes which you
may specify to guide *note optparse: c1.’s behaviour; a few have
required attributes, which you must specify for any option using that
action.

   * ‘"store"’ [relevant: *note type: 326e, *note dest: 326f, *note
     nargs: 329a, *note choices: 329c.]

     The option must be followed by an argument, which is converted to a
     value according to *note type: 326e. and stored in *note dest:
     326f.  If *note nargs: 329a. > 1, multiple arguments will be
     consumed from the command line; all will be converted according to
     *note type: 326e. and stored to *note dest: 326f. as a tuple.  See
     the *note Standard option types: 3297. section.

     If *note choices: 329c. is supplied (a list or tuple of strings),
     the type defaults to ‘"choice"’.

     If *note type: 326e. is not supplied, it defaults to ‘"string"’.

     If *note dest: 326f. is not supplied, *note optparse: c1. derives a
     destination from the first long option string (e.g., ‘--foo-bar’
     implies ‘foo_bar’).  If there are no long option strings, *note
     optparse: c1. derives a destination from the first short option
     string (e.g., ‘-f’ implies ‘f’).

     Example:

          parser.add_option("-f")
          parser.add_option("-p", type="float", nargs=3, dest="point")

     As it parses the command line

          -f foo.txt -p 1 -3.5 4 -fbar.txt

     *note optparse: c1. will set

          options.f = "foo.txt"
          options.point = (1.0, -3.5, 4.0)
          options.f = "bar.txt"

   * ‘"store_const"’ [required: *note const: 329b.; relevant: *note
     dest: 326f.]

     The value *note const: 329b. is stored in *note dest: 326f.

     Example:

          parser.add_option("-q", "--quiet",
                            action="store_const", const=0, dest="verbose")
          parser.add_option("-v", "--verbose",
                            action="store_const", const=1, dest="verbose")
          parser.add_option("--noisy",
                            action="store_const", const=2, dest="verbose")

     If ‘--noisy’ is seen, *note optparse: c1. will set

          options.verbose = 2

   * ‘"store_true"’ [relevant: *note dest: 326f.]

     A special case of ‘"store_const"’ that stores a true value to *note
     dest: 326f.

   * ‘"store_false"’ [relevant: *note dest: 326f.]

     Like ‘"store_true"’, but stores a false value.

     Example:

          parser.add_option("--clobber", action="store_true", dest="clobber")
          parser.add_option("--no-clobber", action="store_false", dest="clobber")

   * ‘"append"’ [relevant: *note type: 326e, *note dest: 326f, *note
     nargs: 329a, *note choices: 329c.]

     The option must be followed by an argument, which is appended to
     the list in *note dest: 326f.  If no default value for *note dest:
     326f. is supplied, an empty list is automatically created when
     *note optparse: c1. first encounters this option on the
     command-line.  If *note nargs: 329a. > 1, multiple arguments are
     consumed, and a tuple of length *note nargs: 329a. is appended to
     *note dest: 326f.

     The defaults for *note type: 326e. and *note dest: 326f. are the
     same as for the ‘"store"’ action.

     Example:

          parser.add_option("-t", "--tracks", action="append", type="int")

     If ‘-t3’ is seen on the command-line, *note optparse: c1. does the
     equivalent of:

          options.tracks = []
          options.tracks.append(int("3"))

     If, a little later on, ‘--tracks=4’ is seen, it does:

          options.tracks.append(int("4"))

     The ‘append’ action calls the ‘append’ method on the current value
     of the option.  This means that any default value specified must
     have an ‘append’ method.  It also means that if the default value
     is non-empty, the default elements will be present in the parsed
     value for the option, with any values from the command line
     appended after those default values:

          >>> parser.add_option("--files", action="append", default=['~/.mypkg/defaults'])
          >>> opts, args = parser.parse_args(['--files', 'overrides.mypkg'])
          >>> opts.files
          ['~/.mypkg/defaults', 'overrides.mypkg']

   * ‘"append_const"’ [required: *note const: 329b.; relevant: *note
     dest: 326f.]

     Like ‘"store_const"’, but the value *note const: 329b. is appended
     to *note dest: 326f.; as with ‘"append"’, *note dest: 326f.
     defaults to ‘None’, and an empty list is automatically created the
     first time the option is encountered.

   * ‘"count"’ [relevant: *note dest: 326f.]

     Increment the integer stored at *note dest: 326f.  If no default
     value is supplied, *note dest: 326f. is set to zero before being
     incremented the first time.

     Example:

          parser.add_option("-v", action="count", dest="verbosity")

     The first time ‘-v’ is seen on the command line, *note optparse:
     c1. does the equivalent of:

          options.verbosity = 0
          options.verbosity += 1

     Every subsequent occurrence of ‘-v’ results in

          options.verbosity += 1

   * ‘"callback"’ [required: *note callback: 329d.; relevant: *note
     type: 326e, *note nargs: 329a, *note callback_args: 329e, *note
     callback_kwargs: 329f.]

     Call the function specified by *note callback: 329d, which is
     called as

          func(option, opt_str, value, parser, *args, **kwargs)

     See section *note Option Callbacks: 327b. for more detail.

   * ‘"help"’

     Prints a complete help message for all the options in the current
     option parser.  The help message is constructed from the ‘usage’
     string passed to OptionParser’s constructor and the *note help:
     3270. string passed to every option.

     If no *note help: 3270. string is supplied for an option, it will
     still be listed in the help message.  To omit an option entirely,
     use the special value ‘optparse.SUPPRESS_HELP’.

     *note optparse: c1. automatically adds a *note help: 3270. option
     to all OptionParsers, so you do not normally need to create one.

     Example:

          from optparse import OptionParser, SUPPRESS_HELP

          # usually, a help option is added automatically, but that can
          # be suppressed using the add_help_option argument
          parser = OptionParser(add_help_option=False)

          parser.add_option("-h", "--help", action="help")
          parser.add_option("-v", action="store_true", dest="verbose",
                            help="Be moderately verbose")
          parser.add_option("--file", dest="filename",
                            help="Input file to read data from")
          parser.add_option("--secret", help=SUPPRESS_HELP)

     If *note optparse: c1. sees either ‘-h’ or ‘--help’ on the command
     line, it will print something like the following help message to
     stdout (assuming ‘sys.argv[0]’ is ‘"foo.py"’):

          Usage: foo.py [options]

          Options:
            -h, --help        Show this help message and exit
            -v                Be moderately verbose
            --file=FILENAME   Input file to read data from

     After printing the help message, *note optparse: c1. terminates
     your process with ‘sys.exit(0)’.

   * ‘"version"’

     Prints the version number supplied to the OptionParser to stdout
     and exits.  The version number is actually formatted and printed by
     the ‘print_version()’ method of OptionParser.  Generally only
     relevant if the ‘version’ argument is supplied to the OptionParser
     constructor.  As with *note help: 3270. options, you will rarely
     create ‘version’ options, since *note optparse: c1. automatically
     adds them when needed.


File: python.info,  Node: Standard option types,  Next: Parsing arguments<2>,  Prev: Standard option actions,  Up: Reference Guide

5.36.1.22 Standard option types
...............................

*note optparse: c1. has five built-in option types: ‘"string"’, ‘"int"’,
‘"choice"’, ‘"float"’ and ‘"complex"’.  If you need to add new option
types, see section *note Extending optparse: 3273.

Arguments to string options are not checked or converted in any way: the
text on the command line is stored in the destination (or passed to the
callback) as-is.

Integer arguments (type ‘"int"’) are parsed as follows:

   * if the number starts with ‘0x’, it is parsed as a hexadecimal
     number

   * if the number starts with ‘0’, it is parsed as an octal number

   * if the number starts with ‘0b’, it is parsed as a binary number

   * otherwise, the number is parsed as a decimal number

The conversion is done by calling *note int(): 227. with the appropriate
base (2, 8, 10, or 16).  If this fails, so will *note optparse: c1,
although with a more useful error message.

‘"float"’ and ‘"complex"’ option arguments are converted directly with
*note float(): 57a. and *note complex(): 579, with similar
error-handling.

‘"choice"’ options are a subtype of ‘"string"’ options.  The *note
choices: 329c. option attribute (a sequence of strings) defines the set
of allowed option arguments.  ‘optparse.check_choice()’ compares
user-supplied option arguments against this master list and raises
‘OptionValueError’ if an invalid string is given.


File: python.info,  Node: Parsing arguments<2>,  Next: Querying and manipulating your option parser,  Prev: Standard option types,  Up: Reference Guide

5.36.1.23 Parsing arguments
...........................

The whole point of creating and populating an OptionParser is to call
its ‘parse_args()’ method:

     (options, args) = parser.parse_args(args=None, values=None)

where the input parameters are

‘args’

     the list of arguments to process (default: ‘sys.argv[1:]’)

‘values’

     an ‘optparse.Values’ object to store option arguments in (default:
     a new instance of ‘Values’) – if you give an existing object, the
     option defaults will not be initialized on it

and the return values are

‘options’

     the same object that was passed in as ‘values’, or the
     optparse.Values instance created by *note optparse: c1.

‘args’

     the leftover positional arguments after all options have been
     processed

The most common usage is to supply neither keyword argument.  If you
supply ‘values’, it will be modified with repeated *note setattr(): f90.
calls (roughly one for every option argument stored to an option
destination) and returned by ‘parse_args()’.

If ‘parse_args()’ encounters any errors in the argument list, it calls
the OptionParser’s ‘error()’ method with an appropriate end-user error
message.  This ultimately terminates your process with an exit status of
2 (the traditional Unix exit status for command-line errors).


File: python.info,  Node: Querying and manipulating your option parser,  Next: Conflicts between options,  Prev: Parsing arguments<2>,  Up: Reference Guide

5.36.1.24 Querying and manipulating your option parser
......................................................

The default behavior of the option parser can be customized slightly,
and you can also poke around your option parser and see what’s there.
OptionParser provides several methods to help you out:

 -- Method: OptionParser.disable_interspersed_args ()

     Set parsing to stop on the first non-option.  For example, if ‘-a’
     and ‘-b’ are both simple options that take no arguments, *note
     optparse: c1. normally accepts this syntax:

          prog -a arg1 -b arg2

     and treats it as equivalent to

          prog -a -b arg1 arg2

     To disable this feature, call *note disable_interspersed_args():
     32a7.  This restores traditional Unix syntax, where option parsing
     stops with the first non-option argument.

     Use this if you have a command processor which runs another command
     which has options of its own and you want to make sure these
     options don’t get confused.  For example, each command might have a
     different set of options.

 -- Method: OptionParser.enable_interspersed_args ()

     Set parsing to not stop on the first non-option, allowing
     interspersing switches with command arguments.  This is the default
     behavior.

 -- Method: OptionParser.get_option (opt_str)

     Returns the Option instance with the option string `opt_str', or
     ‘None’ if no options have that option string.

 -- Method: OptionParser.has_option (opt_str)

     Return true if the OptionParser has an option with option string
     `opt_str' (e.g., ‘-q’ or ‘--verbose’).

 -- Method: OptionParser.remove_option (opt_str)

     If the *note OptionParser: 3262. has an option corresponding to
     `opt_str', that option is removed.  If that option provided any
     other option strings, all of those option strings become invalid.
     If `opt_str' does not occur in any option belonging to this *note
     OptionParser: 3262, raises *note ValueError: 19c.


File: python.info,  Node: Conflicts between options,  Next: Cleanup<2>,  Prev: Querying and manipulating your option parser,  Up: Reference Guide

5.36.1.25 Conflicts between options
...................................

If you’re not careful, it’s easy to define options with conflicting
option strings:

     parser.add_option("-n", "--dry-run", ...)
     [...]
     parser.add_option("-n", "--noisy", ...)

(This is particularly true if you’ve defined your own OptionParser
subclass with some standard options.)

Every time you add an option, *note optparse: c1. checks for conflicts
with existing options.  If it finds any, it invokes the current
conflict-handling mechanism.  You can set the conflict-handling
mechanism either in the constructor:

     parser = OptionParser(..., conflict_handler=handler)

or with a separate call:

     parser.set_conflict_handler(handler)

The available conflict handlers are:

     ‘"error"’ (default)

          assume option conflicts are a programming error and raise
          ‘OptionConflictError’

     ‘"resolve"’

          resolve option conflicts intelligently (see below)

As an example, let’s define an *note OptionParser: 3262. that resolves
conflicts intelligently and add conflicting options to it:

     parser = OptionParser(conflict_handler="resolve")
     parser.add_option("-n", "--dry-run", ..., help="do no harm")
     parser.add_option("-n", "--noisy", ..., help="be noisy")

At this point, *note optparse: c1. detects that a previously-added
option is already using the ‘-n’ option string.  Since
‘conflict_handler’ is ‘"resolve"’, it resolves the situation by removing
‘-n’ from the earlier option’s list of option strings.  Now ‘--dry-run’
is the only way for the user to activate that option.  If the user asks
for help, the help message will reflect that:

     Options:
       --dry-run     do no harm
       [...]
       -n, --noisy   be noisy

It’s possible to whittle away the option strings for a previously-added
option until there are none left, and the user has no way of invoking
that option from the command-line.  In that case, *note optparse: c1.
removes that option completely, so it doesn’t show up in help text or
anywhere else.  Carrying on with our existing OptionParser:

     parser.add_option("--dry-run", ..., help="new dry-run option")

At this point, the original ‘-n’/‘--dry-run’ option is no longer
accessible, so *note optparse: c1. removes it, leaving this help text:

     Options:
       [...]
       -n, --noisy   be noisy
       --dry-run     new dry-run option


File: python.info,  Node: Cleanup<2>,  Next: Other methods,  Prev: Conflicts between options,  Up: Reference Guide

5.36.1.26 Cleanup
.................

OptionParser instances have several cyclic references.  This should not
be a problem for Python’s garbage collector, but you may wish to break
the cyclic references explicitly by calling ‘destroy()’ on your
OptionParser once you are done with it.  This is particularly useful in
long-running applications where large object graphs are reachable from
your OptionParser.


File: python.info,  Node: Other methods,  Prev: Cleanup<2>,  Up: Reference Guide

5.36.1.27 Other methods
.......................

OptionParser supports several other public methods:

 -- Method: OptionParser.set_usage (usage)

     Set the usage string according to the rules described above for the
     ‘usage’ constructor keyword argument.  Passing ‘None’ sets the
     default usage string; use ‘optparse.SUPPRESS_USAGE’ to suppress a
     usage message.

 -- Method: OptionParser.print_usage (file=None)

     Print the usage message for the current program (‘self.usage’) to
     `file' (default stdout).  Any occurrence of the string ‘%prog’ in
     ‘self.usage’ is replaced with the name of the current program.
     Does nothing if ‘self.usage’ is empty or not defined.

 -- Method: OptionParser.get_usage ()

     Same as *note print_usage(): 3286. but returns the usage string
     instead of printing it.

 -- Method: OptionParser.set_defaults (dest=value, ...)

     Set default values for several option destinations at once.  Using
     *note set_defaults(): 3299. is the preferred way to set default
     values for options, since multiple options can share the same
     destination.  For example, if several "mode" options all set the
     same destination, any one of them can set the default, and the last
     one wins:

          parser.add_option("--advanced", action="store_const",
                            dest="mode", const="advanced",
                            default="novice")    # overridden below
          parser.add_option("--novice", action="store_const",
                            dest="mode", const="novice",
                            default="advanced")  # overrides above setting

     To avoid this confusion, use *note set_defaults(): 3299.:

          parser.set_defaults(mode="advanced")
          parser.add_option("--advanced", action="store_const",
                            dest="mode", const="advanced")
          parser.add_option("--novice", action="store_const",
                            dest="mode", const="novice")


File: python.info,  Node: Option Callbacks,  Next: Extending optparse,  Prev: Reference Guide,  Up: optparse --- Parser for command line options

5.36.1.28 Option Callbacks
..........................

When *note optparse: c1.’s built-in actions and types aren’t quite
enough for your needs, you have two choices: extend *note optparse: c1.
or define a callback option.  Extending *note optparse: c1. is more
general, but overkill for a lot of simple cases.  Quite often a simple
callback is all you need.

There are two steps to defining a callback option:

   * define the option itself using the ‘"callback"’ action

   * write the callback; this is a function (or method) that takes at
     least four arguments, as described below

* Menu:

* Defining a callback option:: 
* How callbacks are called:: 
* Raising errors in a callback:: 
* Callback example 1; trivial callback: Callback example 1 trivial callback. 
* Callback example 2; check option order: Callback example 2 check option order. 
* Callback example 3; check option order (generalized): Callback example 3 check option order generalized. 
* Callback example 4; check arbitrary condition: Callback example 4 check arbitrary condition. 
* Callback example 5; fixed arguments: Callback example 5 fixed arguments. 
* Callback example 6; variable arguments: Callback example 6 variable arguments. 

