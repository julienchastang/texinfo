This is Elpy.info, produced by makeinfo version 6.0 from Elpy.texi.

     Elpy 1.12.0, May 24, 2016

     Jorgen Schäfer

     Copyright © 2014, Jorgen Schäfer

INFO-DIR-SECTION Miscellaneous
START-INFO-DIR-ENTRY
* Elpy: (Elpy.info). One line description of project.
END-INFO-DIR-ENTRY


   Generated by Sphinx 1.3.5.


File: Elpy.info,  Node: Top,  Next: Introduction,  Up: (dir)

Elpy Documentation
******************

     Elpy 1.12.0, May 24, 2016

     Jorgen Schäfer

     Copyright © 2014, Jorgen Schäfer

Elpy is the Emacs Python Development Environment.  It aims to provide an
easy to install, fully-featured environment for Python development.

Contents:

* Menu:

* Introduction:: 
* Concepts:: 
* Editing:: 
* IDE Features:: 
* Extending Elpy:: 
* Indices and tables:: 
* Index:: 

 — The Detailed Node Listing —

Introduction

* Overview:: 
* Installation:: 

Concepts

* Configuration:: 
* The RPC Process:: 
* Backends:: 
* Virtual Envs:: 
* Modules:: 

Editing

* Emacs Basics:: 
* Moving By Indentation:: 
* Moving the Current Region:: 

IDE Features

* Projects:: 
* Completion:: 
* Navigation:: 
* Interactive Python:: 
* Syntax Checking:: 
* Documentation:: 
* Testing:: 
* Refactoring:: 

Extending Elpy

* Writing Modules:: 
* Writing Test Runners:: 



File: Elpy.info,  Node: Introduction,  Next: Concepts,  Prev: Top,  Up: Top

1 Introduction
**************

* Menu:

* Overview:: 
* Installation:: 


File: Elpy.info,  Node: Overview,  Next: Installation,  Up: Introduction

1.1 Overview
============

Elpy is an extension for the Emacs(1) text editor to work with Python(2)
projects.  This documentation tries to explain how to use Elpy to work
on Python project using Emacs, but it does not aim to be an introduction
to either Emacs or Python.

You can read a quick tour(3) of Emacs, or read the built-in tutorial by
running ‘C-h t’ in the editor.  That is, you hold down the ‘control’ key
and hit ‘h’ (the canonical `help' key in Emacs), release both, and hit
‘t’ (for tutorial).

For Python, you can read the basic tutorial(4).  If you already know
Python, you should check out some best practices(5).

Once you have these basics, you can go on to install Elpy.

   ---------- Footnotes ----------

   (1) http://www.gnu.org/s/emacs/

   (2) http://www.python.org/

   (3) https://www.gnu.org/software/emacs/tour/

   (4) https://docs.python.org/3/tutorial/index.html

   (5) http://docs.python-guide.org/en/latest/


File: Elpy.info,  Node: Installation,  Prev: Overview,  Up: Introduction

1.2 Installation
================

The main Elpy package is installed via the Emacs package interface,
‘package.el’.  First, you have to add Elpy’s package archive to your
list of archives, though.  Add the following code to your ‘.emacs’ file
and restart Emacs:

     (require 'package)
     (add-to-list 'package-archives
                  '("elpy" . "http://jorgenschaefer.github.io/packages/"))

Now you can run ‘M-x package-refresh-contents’ to download a fresh copy
of the archive contents, and ‘M-x package-install RET elpy RET’ to
install elpy.  If you want to enable Elpy by default, you can simply add
the following to your .emacs:

     (package-initialize)
     (elpy-enable)

Congratulations, Elpy is now successfully installed!

In order to use all the features (such as navigation with ‘M-.’), you’ll
need to install some python libraries.  You can do that easily by typing
‘M-x elpy-config RET’, and following the instructions.


File: Elpy.info,  Node: Concepts,  Next: Editing,  Prev: Introduction,  Up: Top

2 Concepts
**********

* Menu:

* Configuration:: 
* The RPC Process:: 
* Backends:: 
* Virtual Envs:: 
* Modules:: 


File: Elpy.info,  Node: Configuration,  Next: The RPC Process,  Up: Concepts

2.1 Configuration
=================

You can easily configure Elpy to your own preferences.  All `Customize
Options' below are accessible via this interface.  Elpy builds heavily
upon existing extensions for Emacs.  The configuration interface tries
to include the options for those as well.

 -- ELisp Function: M-x elpy-config

     Show the current Elpy configuration, point out possible problems,
     and provide a quick interface to relevant customization options.

     Missing packages can be installed right from this interface.  Be
     aware that this does use your currently-selected virtual env.  If
     there is no current virtual env, it will suggest installing
     packages globally.  This is rarely what you want.


File: Elpy.info,  Node: The RPC Process,  Next: Backends,  Prev: Configuration,  Up: Concepts

2.2 The RPC Process
===================

Elpy works by starting a Python process in the background and
communicating with it through a basic `Remote Procedure Call' (RPC)
interface.  Ideally, you should never see this process and not worry
about it, but when things don’t work as expected, it’s good to know
what’s going on in the background.

Every project and virtual env combination gets their own RPC process.
You can see them both in the process list (‘M-x list-process’) as well
as in the buffer list (‘C-x C-b’) as buffers named ‘*elpy-rpc[...]*’.

By default, Elpy will also find the library root of the current file and
pass that to the RPC functions.  The library root is the directory from
which the current file can be imported.

There are a few options and commands related to the RPC process.

 -- ELisp Function: M-x elpy-rpc-restart

     Close all running RPC processes.  Elpy will re-start them on demand
     with current settings.

 -- ELisp Variable: elpy-rpc-python-command (Customize Option)

     The Python interpreter Elpy should use to run the RPC process.
     This defaults to ‘"python"’, which should be correct for most
     cases, as a virtual env should make that the right interpreter.

     Please do note that this is `not' an interactive interpreter, so do
     not set this to ‘"ipython"’ or similar.

 -- ELisp Variable: elpy-rpc-large-buffer-size (Customize Option)

     The size in character starting from which Elpy will transfer buffer
     contents via temporary files instead of via the normal RPC
     mechanism.

     When Elpy communicates with the RPC process, it often needs to tell
     Python about the contents of the current buffer.  As the RPC
     protocol encodes all data in JSON, this can be a bit slow for large
     buffers.  To speed things up, Elpy can transfer file contents in
     temporary files, which is a lot faster for large files, but
     slightly slower for small ones.

 -- ELisp Variable: elpy-rpc-pythonpath (Customize Option)

     A directory to add to the ‘PYTHONPATH’ for the RPC process.  This
     should point to the directory where the ‘elpy’ module is installed.
     Usually, there is no need to change this.


File: Elpy.info,  Node: Backends,  Next: Virtual Envs,  Prev: The RPC Process,  Up: Concepts

2.3 Backends
============

For introspection and analysis of Python sources, Elpy mainly relies on
external libraries.  It currently supports two different ones which can
not be used at the same time.  But you can switch between them.  They
have certain advantages and disadvantages respectively to each other,
making the choice not trivial.

Rope(1) is a refactoring library that also provides code introspection.
It’s quite good at finding completions, but can not provide locations
for *note elpy-multiedit-python-symbol-at-point: 10.  It also has
problems with large projects.

Jedi(2) is a more lightweight library, but has some problems coping with
badly-formatted Python.

 -- ELisp Variable: elpy-rpc-backend (Customize Option)

     Elpy will use whichever library is installed, preferring Rope if
     both are available.  If you dislike Elpy’s default preference, you
     can set this option to the backend it should prefer.

   ---------- Footnotes ----------

   (1) https://github.com/python-rope/rope

   (2) https://github.com/davidhalter/jedi/


File: Elpy.info,  Node: Virtual Envs,  Next: Modules,  Prev: Backends,  Up: Concepts

2.4 Virtual Envs
================

Elpy has full support for Python’s virtual envs.  Every RPC process is
associated with a specific virtual env and completions are done based on
that environment.

Outside of RPC processes, though, it is not easy to have more than one
virtual env active at the same time.  Elpy allows you to set a single
global virtual env and change it whenever you like, though.

 -- ELisp Function: M-x pyvenv-workon

 -- ELisp Function: M-x pyvenv-activate

 -- ELisp Function: M-x pyvenv-deactivate

     These commands are the main interaction point with virtual envs,
     mirroring the normal ‘activate’ and ‘deactivate’ commands of
     virtual envs and the ‘workon’ command of ‘virtualenvwrapper.sh’.

     The *note pyvenv-workon: 13. command will allow auto-completion of
     existing virtual envs and also supports virtualenvwrapper’s setup
     hooks to set environment variables.

Elpy won’t pollute your Emacs command namespaces, but it might be an
idea to create an alias for the workon command:

     (defalias 'workon 'pyvenv-workon)


File: Elpy.info,  Node: Modules,  Prev: Virtual Envs,  Up: Concepts

2.5 Modules
===========

As the last concept, Elpy has a number of optional features you can
enable or disable as per your preferences.

 -- ELisp Variable: elpy-modules (Customize Option)

     The list of modules to activate by default.  See the section on
     *note Writing Modules: 18. for details on how to write your own
     modules.


File: Elpy.info,  Node: Editing,  Next: IDE Features,  Prev: Concepts,  Up: Top

3 Editing
*********

* Menu:

* Emacs Basics:: 
* Moving By Indentation:: 
* Moving the Current Region:: 


File: Elpy.info,  Node: Emacs Basics,  Next: Moving By Indentation,  Up: Editing

3.1 Emacs Basics
================

Elpy is an extension to Emacs, and as such the standard bindings in
Emacs are available.  This manual is not meant to be an introduction to
Emacs, but this section will still highlight some features in Emacs that
are especially useful for Python editing.

Movement keys in Emacs often use ‘fbnp’ for forward, backward, next
(down) and previous (up).  ‘k’ and ‘backspace’ (‘DEL’) are for deleting.
These are combined with the ‘Control’, ‘Meta’ and ‘Control-Meta’
modifiers.  Control generally refers to the simplest form.  ‘C-f’ moves
one character forward.  Meta changes this to affect `words', that is,
consecutive sequences of alphanumeric characters.  The Control-Meta
combination then affects whole expressions.

In the following table, ‘|’ refers to the position of point.

Before                   Key             After
                                         
------------------------------------------------------------------
                                         
‘|hello_world’           ‘C-f’           ‘h|ello_world’
                                         
                                         
‘|hello_world’           ‘M-f’           ‘hello|_world’
                                         
                                         
‘|hello_world’           ‘C-M-f’         ‘hello_world|’
                                         

Expression-based commands will also work on strings, tuples,
dictionaries, or any balanced groups of parentheses.  This works for all
movement keys (‘f’, ‘b’, ‘n’, ‘p`’), with `next' and `previous' moving
to the next or previous group of parens.  It also works with forward and
backward deletion (‘d’ and ‘DEL’/‘<backspace>’, respectively) for
character and word groups, but not for expressions.  To delete the
expression after point, use ‘C-M-k’.  For the expression before point,
you can use ‘C-M-b C-M-k’.

If you enable ‘subword-mode’, Emacs will also consider CamelCase to be
two words instead of one for the purpose of these operations.

In addition to the above, Emacs also supports moving up or down inside
nested parentheses groups.  ‘C-M-d’ will move `down' into the next
enclosed group of parentheses, while ‘C-M-u’ will move `up' to the
directly enclosing group of parentheses.

Finally, a lot of Elpy’s commands change their behavior when the prefix
argument is given.  That is, hit ‘C-u’ before the command.  In Elpy, the
prefix argument often disables any attempt by the command at being
smart, in case it would get it wrong.


File: Elpy.info,  Node: Moving By Indentation,  Next: Moving the Current Region,  Prev: Emacs Basics,  Up: Editing

3.2 Moving By Indentation
=========================

 -- ELisp Function: C-down (elpy-nav-forward-block)

 -- ELisp Function: C-up (elpy-nav-backward-block)

     These commands are used to navigate between lines with same
     indentation as the current line.  Point should be placed on the
     first non-whitespace character of the line and then use ‘C-down’ to
     move forward or ‘C-up’ to move backward.

 -- ELisp Function: C-left (elpy-nav-backward-indent)

 -- ELisp Function: C-right (elpy-nav-forward-indent)

     These commands are used to navigate between indentation levels.
     ‘C-left’ moves point to previous indent level or over previous
     word.  ‘C-right’ moves point to next indent level or over the next
     word.


File: Elpy.info,  Node: Moving the Current Region,  Prev: Moving By Indentation,  Up: Editing

3.3 Moving the Current Region
=============================

 -- ELisp Function: M-down (elpy-nav-move-line-or-region-down)

 -- ELisp Function: M-up (elpy-nav-move-line-or-region-up)

 -- ELisp Function: M-left (elpy-nav-indent-shift-left)

 -- ELisp Function: M-right (elpy-nav-indent-shift-right)

     Elpy can move the selected region (or the current line if no region
     is selected) by using the cursor keys with meta.  Left and right
     will dedent or indent the code, while up and down will move it
     line-wise up or down, respectively.


File: Elpy.info,  Node: IDE Features,  Next: Extending Elpy,  Prev: Editing,  Up: Top

4 IDE Features
**************

* Menu:

* Projects:: 
* Completion:: 
* Navigation:: 
* Interactive Python:: 
* Syntax Checking:: 
* Documentation:: 
* Testing:: 
* Refactoring:: 


File: Elpy.info,  Node: Projects,  Next: Completion,  Up: IDE Features

4.1 Projects
============

Elpy supports the notion of `projects', a related collection of files
under a common directory.  This common directory is called the project
root.  A number of Elpy’s commands work on all files inside the project
root.

 -- ELisp Function: C-c C-f (elpy-find-file)

     Find a file in the current project.  This uses a search-as-you-type
     interface for all files under the project root.

     A prefix argument enables "do what I mean" mode.  On an import
     statement, it will try to open the module imported.  Elsewhere in a
     file, it will look for an associated test or implementation file,
     and if found, open that.  If this fails, either way, it will fall
     back to the normal find file in project behavior.

     If the current file is called ‘foo.py’, then this will search for a
     ‘test_foo.py’ in the same directory, or in a ‘test’ or ‘tests’
     subdirectory.  If the current file is already called ‘test_foo.py’,
     it will try and find a ‘foo.py’ nearby.

     This command uses find-file-in-project(1) under the hood, so see
     there for more options.

 -- ELisp Function: C-c C-s (elpy-rgrep-symbol)

     Search the files in the current project for a string.  By default,
     this uses the symbol at point.  With a prefix argument, it will
     prompt for a regular expression to search.

     This is basically a ‘grep -r’ through the project.

In addition to these two commands, *note elpy-check: 2b. also supports
optionally checking all files in the current project.

Elpy’s idea of the project root and which files belong to a project and
which don’t can be influenced as well.

 -- ELisp Function: M-x elpy-set-project-root

     Set the current project root directory.  This directory should
     contain all files related to the current project.

 -- ELisp Variable: elpy-project-ignored-directories (Customize Option)

     When Elpy searches for files in the current project, it will ignore
     files in directories listed here.

 -- ELisp Variable: elpy-project-root-finder-functions (Customize
          Option)

     To find the project root, Elpy can utilize a number of heuristics.
     With this option, you can configure which are used.

To configure Elpy specifically for a single project, you can use Emacs’
Directory Variables(2).  Elpy provides a simple interface to this.

 -- ELisp Function: M-x elpy-set-project-variable

     Set or change the value of a project-wide variable.  With a prefix
     argument, the value for the variable is removed.

     This only takes effect in new buffers.

   ---------- Footnotes ----------

   (1) https://github.com/technomancy/find-file-in-project

   (2) 
https://www.gnu.org/software/emacs/manual/html_node/emacs/Directory-Variables.html


File: Elpy.info,  Node: Completion,  Next: Navigation,  Prev: Projects,  Up: IDE Features

4.2 Completion
==============

When you type Python code, Elpy will try and figure out possible
completions and provide them in a suggestion window.  If Elpy doesn’t do
so automatically, you can force it to complete right where you are.

 -- ELisp Function: M-TAB (elpy-company-backend)

     Provide completion suggestions for a completion at point.

You can use cursor keys or ‘M-n’ and ‘M-p’ to scroll through the
options, ‘RET’ to use the selected completion, or ‘TAB’ to complete the
common part.

On any completion option, ‘C-d’ or ‘<f1>’ will display a temporary
window with documentation.  ‘C-w’ will display a temporary window
showing the source code of the completion to get some context.

Elpy uses Company Mode(1) for the completion interface, so its
documentation is a good place for further information.

   ---------- Footnotes ----------

   (1) https://company-mode.github.io/


File: Elpy.info,  Node: Navigation,  Next: Interactive Python,  Prev: Completion,  Up: IDE Features

4.3 Navigation
==============

Elpy supports some advanced navigation features inside Python projects.

 -- ELisp Function: M-. (elpy-goto-definition)

     Go to the location where the identifier at point is defined.  This
     is not always easy to make out, so the result can be wrong.  Also,
     the backends can not always identify what kind of symbol is at
     point.  Especially after a few indirections, they have basically no
     hope of guessing right, so they don’t.

 -- ELisp Function: C-x 4 M-. (elpy-goto-definition-other-window)

     Same as ‘elpy-go-to-definition’ (with the same caveats) but goes to
     the definition of the symbol at point in other window, if defined.

 -- ELisp Function: M-* (pop-tag-mark)

     Go back to the last place where ‘M-.’ was used, effectively turning
     ‘M-.’ and ‘M-*’ into a forward and backward motion for definition
     lookups.


File: Elpy.info,  Node: Interactive Python,  Next: Syntax Checking,  Prev: Navigation,  Up: IDE Features

4.4 Interactive Python
======================

Emacs can run a Python interpreter in a special buffer, making it much
easier to send code snippets over.

 -- ELisp Function: C-c C-z (elpy-shell-switch-to-shell)

     Switch to buffer with a Python interpreter running, starting one if
     necessary.

     Do note that Elpy only starts a single interactive Python process.
     This process will inherit the current virtual env.  If you want to
     start a Python interpreter with a different virtual env, you can
     either kill the existing one, or rename the buffer.

 -- ELisp Function: C-c C-c (elpy-shell-send-region-or-buffer)

     Whenever you are in an Elpy buffer, ‘C-c C-c’ will send Python code
     to the subprocess.  If there is an active region, that region will
     be sent; if not, the whole buffer is sent.

     This command will also escape any uses of the ‘if __name__ ==
     '__main__'’ idiom, to prevent accidental execution of a script.  If
     you want this to be evaluated, pass a prefix argument with ‘C-u’.

 -- ELisp Function: C-c RET (elpy-shell-send-current-statement)

     Send current statement to Python shell.

     This command sends statements to shell without indentation.  If you
     send nested statements, shell will trow ‘IndentationError’.  To
     send nested statements, it is recommended to select region and run
     ‘elpy-shell-send-region-or-buffer’

 -- ELisp Function: C-M-x (python-shell-send-defun)

     Similar to ‘C-c C-c’, this will send the code of the current top
     level class or function to the interactive Python process.

 -- ELisp Variable: elpy-interactive-python-command (Customize Option)

     This option changes the default interpreter to use for the
     interactive Python shell.  While there are options available from
     ‘python-mode’, using this one will do the right thing when you
     choose to use IPython(1).

     The problem is that IPython uses a different prompt pattern and
     slightly different modules for tab completion, which confuses the
     standard ‘python-mode’ interactive shell mode.  Using this variable
     will change all associated options to deal with IPython correctly.

 -- ELisp Function: M-x elpy-use-ipython

 -- ELisp Function: M-x elpy-use-cpython

     Alternatively, you can also use these commands, either
     interactively or from your ‘.emacs’, to set the interactive
     interpreter.

     As an IPython user, you might be interested in the Emacs IPython
     Notebook(2), too.

   ---------- Footnotes ----------

   (1) http://ipython.org/

   (2) https://tkf.github.io/emacs-ipython-notebook/


File: Elpy.info,  Node: Syntax Checking,  Next: Documentation,  Prev: Interactive Python,  Up: IDE Features

4.5 Syntax Checking
===================

Whenever you save a file, Elpy will run a syntax check and highlight
possible errors or warnings inline.

 -- ELisp Function: C-c C-n (elpy-flymake-next-error)

 -- ELisp Function: C-c C-p (elpy-flymake-previous-error)

     You can navigate between any error messages with these keys.  The
     current error will be shown in the minibuffer.

Elpy uses the built-in Flymake(1) library to find syntax errors on the
fly, so see there for more configuration options.

 -- ELisp Function: C-c C-v (elpy-check)

     Alternatively, you can run a syntax check on the current file where
     the output is displayed in a new buffer, giving you an overview and
     allowing you to jump to the errors from there.

     With a prefix argument, this will run the syntax check on all files
     in the current project.

 -- ELisp Variable: python-check-command (Customize Option)

     To change which command is used for syntax checks, you can
     customize this option.  By default, Elpy uses the ‘flake8’ program,
     which you have to install separately.  The *note elpy-config: 9.
     command will prompt you to do this if Elpy can’t find the program.

     It is possible to create a single virtual env for the sole purpose
     of installing ‘flake8’ in there, and then simply link the command
     script to a directory inside your ‘PATH’, meaning you do not need
     to install the program in every virtual env separately.

   ---------- Footnotes ----------

   (1) 
https://www.gnu.org/software/emacs/manual/html_node/flymake/index.html#Top


File: Elpy.info,  Node: Documentation,  Next: Testing,  Prev: Syntax Checking,  Up: IDE Features

4.6 Documentation
=================

Elpy provides a single interface to documentation.

 -- ELisp Function: C-c C-d (elpy-doc)

     When point is on a symbol, Elpy will try and find the documentation
     for that object, and display that.  If it can’t find the
     documentation for whatever reason, it will try and look up the
     symbol at point in pydoc.  If it’s not there, either, it will
     prompt the user for a string to look up in pydoc.

     With a prefix argument, Elpy will skip all the guessing and just
     prompt the user for a string to look up in pydoc.


File: Elpy.info,  Node: Testing,  Next: Refactoring,  Prev: Documentation,  Up: IDE Features

4.7 Testing
===========

Testing is an important part of programming.  Elpy provides a central
interface to testing, which allows for a good workflow for tests.

Elpy’s test interface is built around Emacs’ compilation framework(1).
Elpy will run test commands as a compilation job, with all the
advantages this brings.

 -- ELisp Function: C-c C-t (elpy-test)

     Start a test run.  This uses the currently configured test runner
     to discover and run tests.  If point is inside a test case, the
     test runner will run exactly that test case.  Otherwise, or if a
     prefix argument is given, it will run all tests.

 -- ELisp Function: M-x elpy-set-test-runner

     This changes the current test runner.  Elpy supports the standard
     unittest discovery runner, the Django discovery runner, nose and
     py.test.  You can also write your own, as described in *note
     Writing Test Runners: 4a.

This enables a good workflow.  You write a test and use ‘C-c C-t’ to
watch it fail.  You then go to your implementation file, for example
using ‘C-u C-c C-f’, and make the test pass.  You can use a key bound to
‘recompile’ (I use ‘<f5>’ for this) to just re-run that one test.  Once
that passes, you can use ‘C-c C-t’ again to run all tests to make sure
they all pass as well.  Repeat.

For an even more automated way, you can use tdd.el(2), which will run
your last compile command whenever you save a file.

   ---------- Footnotes ----------

   (1) 
https://www.gnu.org/software/emacs/manual/html_node/emacs/Compilation.html

   (2) https://github.com/jorgenschaefer/emacs-tdd/


File: Elpy.info,  Node: Refactoring,  Prev: Testing,  Up: IDE Features

4.8 Refactoring
===============

Elpy supports various forms of refactoring Python code.

 -- ELisp Function: C-c C-e (elpy-multiedit-python-symbol-at-point)

     Edit all occurrences of the symbol at point at once.  This will
     highlight all such occurrences, and editing one of them will edit
     all.  This is an easy way to rename identifiers.

     If the backend does not support finding occurrences (currently only
     Jedi does), or if a prefix argument is given, this will edit
     syntactic occurrences instead of semantic ones.  This can match
     more occurrences than it should, so be careful.  You can narrow the
     current buffer to the current function using ‘C-x n d’ to restrict
     where this matches.

     Finally, if there is a region active, Elpy will edit all
     occurrences of the text in the region.

 -- ELisp Function: C-c C-r f (elpy-format-code)

     Format code using the available formatter.

     This command formats code using yapf(1) or autopep8(2) formatter.
     If a region is selected, only that region is formatted.  Otherwise
     current buffer is formatted.

 -- ELisp Function: C-c C-r i (elpy-importmagic-fixup)

     Query for new imports of unresolved symbols, and remove
     unreferenced imports.  Also sort the imports in the import
     statement blocks.

 -- ELisp Function: C-c C-r r (elpy-refactor)

     Run the Elpy refactoring interface for Python code.

     This command uses rope(3) package and provides various refactoring
     options depending on the context.

   ---------- Footnotes ----------

   (1) https://github.com/google/yapf

   (2) https://github.com/hhatto/autopep8

   (3) https://github.com/python-rope/rope


File: Elpy.info,  Node: Extending Elpy,  Next: Indices and tables,  Prev: IDE Features,  Up: Top

5 Extending Elpy
****************

* Menu:

* Writing Modules:: 
* Writing Test Runners:: 


File: Elpy.info,  Node: Writing Modules,  Next: Writing Test Runners,  Up: Extending Elpy

5.1 Writing Modules
===================

Modules are a way of easily extending Elpy with modular extensions.  In
essence, a module is a function which is called once to initialize
itself globally, then once every time elpy-mode is enabled or disabled,
and also once if elpy is disabled globally.

To achieve this, a module function receives one or more arguments, the
first of which is the command specifier symbol, which can be one of the
following:

‘global-init’

     Called once, when Elpy is enabled using ‘elpy-enable’.

‘global-stop’

     Called once, when Elpy is disabled using ‘elpy-disable’.

‘buffer-init’

     Called in a buffer when ‘elpy-mode’ is enabled.

‘buffer-stop’

     Called in a buffer when ‘elpy-mode’ is disabled.

To activate a module, the user has to add the function to *note
elpy-modules: 17.


File: Elpy.info,  Node: Writing Test Runners,  Prev: Writing Modules,  Up: Extending Elpy

5.2 Writing Test Runners
========================

A test runner is a function that receives four arguments, described in
the docstring of ‘elpy-test-at-point’.  If only the first argument is
given, the test runner should find tests under this directory and run
them.  If the others are given, the test runner should run the specified
test only, or as few as it can.

Test runners should use an interactive spec of ‘(interactive
(elpy-test-at-point))’ so they can be called directly by the user.  For
their main work, they can use the helper function ‘elpy-test-run’.  See
the ‘elpy-test-discover-runner’ for an example.

To make it possible to set the test runner as a file-, directory- or
project-local variable, the function symbol should get the
‘elpy-test-runner’ property with a value of ‘t’.


File: Elpy.info,  Node: Indices and tables,  Next: Index,  Prev: Extending Elpy,  Up: Top

Indices and tables
******************

   * genindex

   * search


File: Elpy.info,  Node: Index,  Prev: Indices and tables,  Up: Top

Index
*****

 [index ]
* Menu:

* elpy-check (command):                  Syntax Checking.      (line 19)
* elpy-company-backend (command):        Completion.           (line 10)
* elpy-config (command):                 Configuration.        (line 11)
* elpy-doc (command):                    Documentation.        (line  8)
* elpy-find-file (command):              Projects.             (line 11)
* elpy-flymake-next-error (command):     Syntax Checking.      (line  9)
* elpy-flymake-previous-error (command): Syntax Checking.      (line 11)
* elpy-format-code (command):            Refactoring.          (line 24)
* elpy-goto-definition (command):        Navigation.           (line  8)
* elpy-goto-definition-other-window (command): Navigation.     (line 16)
* elpy-importmagic-fixup (command):      Refactoring.          (line 32)
* elpy-interactive-python-command (customize option): Interactive Python.
                                                               (line 43)
* elpy-modules (customize option):       Modules.              (line  9)
* elpy-multiedit-python-symbol-at-point (command): Refactoring.
                                                               (line  8)
* elpy-nav-backward-block (command):     Moving By Indentation.
                                                               (line  8)
* elpy-nav-backward-indent (command):    Moving By Indentation.
                                                               (line 15)
* elpy-nav-forward-block (command):      Moving By Indentation.
                                                               (line  6)
* elpy-nav-forward-indent (command):     Moving By Indentation.
                                                               (line 17)
* elpy-nav-indent-shift-left (command):  Moving the Current Region.
                                                               (line 10)
* elpy-nav-indent-shift-right (command): Moving the Current Region.
                                                               (line 12)
* elpy-nav-move-line-or-region-down (command): Moving the Current Region.
                                                               (line  6)
* elpy-nav-move-line-or-region-up (command): Moving the Current Region.
                                                               (line  8)
* elpy-project-ignored-directories (customize option): Projects.
                                                               (line 49)
* elpy-project-root-finder-functions (customize option): Projects.
                                                               (line 54)
* elpy-refactor (command):               Refactoring.          (line 38)
* elpy-rgrep-symbol (command):           Projects.             (line 30)
* elpy-rpc-backend (customize option):   Backends.             (line 20)
* elpy-rpc-large-buffer-size (customize option): The RPC Process.
                                                               (line 36)
* elpy-rpc-python-command (customize option): The RPC Process. (line 27)
* elpy-rpc-pythonpath (customize option): The RPC Process.     (line 49)
* elpy-rpc-restart (command):            The RPC Process.      (line 22)
* elpy-set-project-root (command):       Projects.             (line 44)
* elpy-set-project-variable (command):   Projects.             (line 63)
* elpy-set-test-runner (command):        Testing.              (line 20)
* elpy-shell-send-current-statement (command): Interactive Python.
                                                               (line 29)
* elpy-shell-send-region-or-buffer (command): Interactive Python.
                                                               (line 19)
* elpy-shell-switch-to-shell (command):  Interactive Python.   (line  9)
* elpy-test (command):                   Testing.              (line 13)
* elpy-use-cpython (command):            Interactive Python.   (line 57)
* elpy-use-ipython (command):            Interactive Python.   (line 55)
* environment variable; PATH:            Syntax Checking.      (line 37)
* environment variable; PYTHONPATH:      The RPC Process.      (line 51)
* library root:                          The RPC Process.      (line 16)
* PATH:                                  Syntax Checking.      (line 37)
* pop-tag-mark (command):                Navigation.           (line 21)
* prefix argument:                       Emacs Basics.         (line 51)
* project root:                          Projects.             (line  7)
* python-check-command (customize option): Syntax Checking.    (line 28)
* python-shell-send-defun (command):     Interactive Python.   (line 38)
* PYTHONPATH:                            The RPC Process.      (line 51)
* pyvenv-activate (command):             Virtual Envs.         (line 16)
* pyvenv-deactivate (command):           Virtual Envs.         (line 18)
* pyvenv-workon (command):               Virtual Envs.         (line 14)



Tag Table:
Node: Top322
Ref: index doc520
Ref: 0520
Node: Introduction1286
Ref: introduction elpy1365
Ref: 11365
Ref: introduction introduction1365
Ref: 21365
Ref: introduction doc1365
Ref: 31365
Node: Overview1438
Ref: introduction overview1514
Ref: 41514
Ref: Overview-Footnote-12258
Ref: Overview-Footnote-22294
Ref: Overview-Footnote-32325
Ref: Overview-Footnote-42374
Ref: Overview-Footnote-52428
Node: Installation2476
Ref: introduction installation2552
Ref: 52552
Node: Concepts3525
Ref: concepts concepts3608
Ref: 63608
Ref: concepts doc3608
Ref: 73608
Node: Configuration3726
Ref: concepts configuration3806
Ref: 83806
Ref: concepts command-elpy-config4099
Ref: 94099
Node: The RPC Process4540
Ref: concepts the-rpc-process4637
Ref: a4637
Ref: concepts command-elpy-rpc-restart5463
Ref: b5463
Ref: concepts option-elpy-rpc-python-command5607
Ref: c5607
Ref: concepts option-elpy-rpc-large-buffer-size6003
Ref: d6003
Ref: concepts option-elpy-rpc-pythonpath6609
Ref: e6609
Node: Backends6869
Ref: concepts backends6965
Ref: f6965
Ref: concepts option-elpy-rpc-backend7647
Ref: 117647
Ref: Backends-Footnote-17943
Ref: Backends-Footnote-27987
Node: Virtual Envs8032
Ref: concepts virtual-envs8120
Ref: 128120
Ref: concepts command-pyvenv-workon8522
Ref: 138522
Ref: concepts command-pyvenv-activate8561
Ref: 148561
Ref: concepts command-pyvenv-deactivate8602
Ref: 158602
Node: Modules9215
Ref: concepts modules9286
Ref: 169286
Ref: concepts option-elpy-modules9423
Ref: 179423
Node: Editing9629
Ref: editing editing9712
Ref: 199712
Ref: editing doc9712
Ref: 1a9712
Node: Emacs Basics9819
Ref: editing emacs-basics9903
Ref: 1b9903
Node: Moving By Indentation12562
Ref: editing moving-by-indentation12680
Ref: 1c12680
Ref: editing command-elpy-nav-forward-block12733
Ref: 1d12733
Ref: editing command-elpy-nav-backward-block12786
Ref: 1e12786
Ref: editing command-elpy-nav-backward-indent13100
Ref: 1f13100
Ref: editing command-elpy-nav-forward-indent13155
Ref: 2013155
Node: Moving the Current Region13439
Ref: editing moving-the-current-region13536
Ref: 2113536
Ref: editing command-elpy-nav-move-line-or-region-down13597
Ref: 2213597
Ref: editing command-elpy-nav-move-line-or-region-up13661
Ref: 2313661
Ref: editing command-elpy-nav-indent-shift-left13721
Ref: 2413721
Ref: editing command-elpy-nav-indent-shift-right13778
Ref: 2513778
Node: IDE Features14090
Ref: ide ide-features14179
Ref: 2614179
Ref: ide doc14179
Ref: 2714179
Node: Projects14360
Ref: ide projects14434
Ref: 2814434
Ref: ide command-elpy-find-file14683
Ref: 2914683
Ref: ide command-elpy-rgrep-symbol15579
Ref: 2a15579
Ref: ide command-elpy-set-project-root16121
Ref: 2c16121
Ref: ide option-elpy-project-ignored-directories16292
Ref: 2d16292
Ref: ide option-elpy-project-root-finder-functions16478
Ref: 2e16478
Ref: ide command-elpy-set-project-variable16835
Ref: 2f16835
Ref: Projects-Footnote-117094
Ref: Projects-Footnote-217154
Node: Completion17246
Ref: ide completion17339
Ref: 3017339
Ref: ide directory-variables17339
Ref: 3117339
Ref: ide command-elpy-company-backend17579
Ref: 3217579
Ref: Completion-Footnote-118224
Node: Navigation18264
Ref: ide company-mode18367
Ref: 3318367
Ref: ide navigation18367
Ref: 3418367
Ref: ide command-elpy-goto-definition18471
Ref: 3518471
Ref: ide command-elpy-goto-definition-other-window18851
Ref: 3618851
Ref: ide command-pop-tag-mark19068
Ref: 3719068
Node: Interactive Python19279
Ref: ide interactive-python19387
Ref: 3819387
Ref: ide command-elpy-shell-switch-to-shell19541
Ref: 3919541
Ref: ide command-elpy-shell-send-region-or-buffer19961
Ref: 3a19961
Ref: ide command-elpy-shell-send-current-statement20443
Ref: 3b20443
Ref: ide command-python-shell-send-defun20817
Ref: 3c20817
Ref: ide option-elpy-interactive-python-command21009
Ref: 3d21009
Ref: ide command-elpy-use-ipython21610
Ref: 3e21610
Ref: ide command-elpy-use-cpython21652
Ref: 3f21652
Ref: Interactive Python-Footnote-121972
Ref: Interactive Python-Footnote-222000
Node: Syntax Checking22054
Ref: ide syntax-checking22165
Ref: 4022165
Ref: ide emacs-ipython-notebook22165
Ref: 4122165
Ref: ide command-elpy-flymake-next-error22312
Ref: 4222312
Ref: ide command-elpy-flymake-previous-error22367
Ref: 4322367
Ref: ide command-elpy-check22672
Ref: 2b22672
Ref: ide option-python-check-command23016
Ref: 4423016
Ref: Syntax Checking-Footnote-123683
Node: Documentation23767
Ref: ide documentation23867
Ref: 4523867
Ref: ide command-elpy-doc23956
Ref: 4623956
Node: Testing24452
Ref: ide testing24548
Ref: 4724548
Ref: ide command-elpy-test24873
Ref: 4824873
Ref: ide command-elpy-set-test-runner25179
Ref: 4925179
Ref: Testing-Footnote-126030
Ref: Testing-Footnote-226114
Node: Refactoring26167
Ref: ide refactoring26241
Ref: 4b26241
Ref: ide tdd-el26241
Ref: 4c26241
Ref: ide command-elpy-multiedit-python-symbol-at-point26331
Ref: 1026331
Ref: ide command-elpy-format-code27085
Ref: 4d27085
Ref: ide command-elpy-importmagic-fixup27362
Ref: 4e27362
Ref: ide command-elpy-refactor27567
Ref: 4f27567
Ref: Refactoring-Footnote-127820
Ref: Refactoring-Footnote-227859
Ref: Refactoring-Footnote-327902
Node: Extending Elpy27946
Ref: extending rope28046
Ref: 5028046
Ref: extending extending-elpy28046
Ref: 5128046
Ref: extending doc28046
Ref: 5228046
Node: Writing Modules28138
Ref: extending id128231
Ref: 5328231
Ref: extending writing-modules28231
Ref: 1828231
Node: Writing Test Runners29091
Ref: extending writing-test-runners29184
Ref: 4a29184
Ref: extending id229184
Ref: 5429184
Node: Indices and tables30008
Ref: index indices-and-tables30101
Ref: 5530101
Node: Index30168

End Tag Table


Local Variables:
coding: utf-8
End:
